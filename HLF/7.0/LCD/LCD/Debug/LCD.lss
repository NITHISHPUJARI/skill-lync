
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001b2  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000acd  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000745  00000000  00000000  00000dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000391  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042e  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000325  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002047  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  8e:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z7LCD_cmdh>:
	_delay_ms(1);
}

void LCD_cmd(unsigned char cmd)
{
	LCD_DATA_PORT = cmd;    // Assign the command to the data port
  96:	85 b9       	out	0x05, r24	; 5
	CTRL_PORT &= ~(1 << RS);  // RS = 0 (command mode)
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	8b b9       	out	0x0b, r24	; 11
	CTRL_PORT &= ~(1 << RW);  // RW = 0 (write mode)
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	8b b9       	out	0x0b, r24	; 11
	CTRL_PORT |= (1 << EN);   // EN = 1
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	8a 95       	dec	r24
  ae:	f1 f7       	brne	.-4      	; 0xac <_Z7LCD_cmdh+0x16>
  b0:	00 00       	nop
	_delay_us(1);
	CTRL_PORT &= ~(1 << EN);  // EN = 0
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	9f e1       	ldi	r25, 0x1F	; 31
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <_Z7LCD_cmdh+0x26>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <_Z7LCD_cmdh+0x2c>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <_Z8LCD_initv>:
	return 0;
}

void LCD_init()
{
	LCD_cmd(0x38);          // Initialize the LCD in 8-bit mode, 2 lines, 5x8 font size
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	0e 94 4b 00 	call	0x96	; 0x96 <_Z7LCD_cmdh>
  cc:	8f e9       	ldi	r24, 0x9F	; 159
  ce:	9f e0       	ldi	r25, 0x0F	; 15
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <_Z8LCD_initv+0xa>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <_Z8LCD_initv+0x10>
  d6:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x01);          // Clear the display
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 4b 00 	call	0x96	; 0x96 <_Z7LCD_cmdh>
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <_Z8LCD_initv+0x1c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_Z8LCD_initv+0x22>
  e8:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x0E);          // Turn on the display, cursor blinking off
  ea:	8e e0       	ldi	r24, 0x0E	; 14
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <_Z7LCD_cmdh>
  f0:	8f e9       	ldi	r24, 0x9F	; 159
  f2:	9f e0       	ldi	r25, 0x0F	; 15
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <_Z8LCD_initv+0x2e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <_Z8LCD_initv+0x34>
  fa:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x80);          // Set the cursor to the beginning of the first line
  fc:	80 e8       	ldi	r24, 0x80	; 128
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <_Z7LCD_cmdh>
 102:	8f e9       	ldi	r24, 0x9F	; 159
 104:	9f e0       	ldi	r25, 0x0F	; 15
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <_Z8LCD_initv+0x40>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_Z8LCD_initv+0x46>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <_Z9LCD_writeh>:
	_delay_ms(2);
}

void LCD_write(unsigned char data)
{
	LCD_DATA_PORT = data;   // Assign the data to the data port
 110:	85 b9       	out	0x05, r24	; 5
	CTRL_PORT |= (1 << RS);  // RS = 1 (data mode)
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	81 60       	ori	r24, 0x01	; 1
 116:	8b b9       	out	0x0b, r24	; 11
	CTRL_PORT &= ~(1 << RW); // RW = 0 (write mode)
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	8d 7f       	andi	r24, 0xFD	; 253
 11c:	8b b9       	out	0x0b, r24	; 11
	CTRL_PORT |= (1 << EN);  // EN = 1
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	84 60       	ori	r24, 0x04	; 4
 122:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <_Z9LCD_writeh+0x16>
 12a:	00 00       	nop
	_delay_us(1);
	CTRL_PORT &= ~(1 << EN); // EN = 0
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	9f e1       	ldi	r25, 0x1F	; 31
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <_Z9LCD_writeh+0x26>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <_Z9LCD_writeh+0x2c>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <_Z16LCD_write_stringPKc>:
	_delay_ms(2);
}

void LCD_write_string(const char *str)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
	while (*str != '\0')
 146:	88 81       	ld	r24, Y
 148:	88 23       	and	r24, r24
 14a:	21 f0       	breq	.+8      	; 0x154 <_Z16LCD_write_stringPKc+0x14>
	{
		LCD_write(*str);
 14c:	0e 94 88 00 	call	0x110	; 0x110 <_Z9LCD_writeh>
		str++;
 150:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(2);
}

void LCD_write_string(const char *str)
{
	while (*str != '\0')
 152:	f9 cf       	rjmp	.-14     	; 0x146 <_Z16LCD_write_stringPKc+0x6>
		str++;
		
		
		
	}
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <main>:
void LCD_write(unsigned char data);
void LCD_write_string(const char *str);

int main()
{
	DDRB = 0xFF;            // Set PORTB as output
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << EN) | (1 << RW) | (1 << RS);  // Set EN, RW, RS as output
 15e:	8a b1       	in	r24, 0x0a	; 10
 160:	87 60       	ori	r24, 0x07	; 7
 162:	8a b9       	out	0x0a, r24	; 10

	LCD_init();             // Initialize the LCD
 164:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z8LCD_initv>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	89 e6       	ldi	r24, 0x69	; 105
 16c:	98 e1       	ldi	r25, 0x18	; 24
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x14>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x1e>
 178:	00 00       	nop
	

	while (1)
	{
		// Your code here
		LCD_write_string("Hello, World!");  // Print the string on the LCD
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 a0 00 	call	0x140	; 0x140 <_Z16LCD_write_stringPKc>
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	83 ed       	ldi	r24, 0xD3	; 211
 186:	90 e3       	ldi	r25, 0x30	; 48
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x2e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x38>
 192:	00 00       	nop
		_delay_ms(1000);
		LCD_cmd(0x01);          // Clear the display
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 4b 00 	call	0x96	; 0x96 <_Z7LCD_cmdh>
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	83 ed       	ldi	r24, 0xD3	; 211
 19e:	90 e3       	ldi	r25, 0x30	; 48
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x46>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x50>
 1aa:	00 00       	nop
 1ac:	e6 cf       	rjmp	.-52     	; 0x17a <main+0x20>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "stm32g0xx_hal.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define enA GPIO_PIN_0
#define in1 GPIO_PIN_1
#define in2 GPIO_PIN_2
#define in3 GPIO_PIN_3
#define in4 GPIO_PIN_4
#define enB GPIO_PIN_6

#define L_S GPIO_PIN_6
#define R_S GPIO_PIN_7

#define echo GPIO_PIN_8
#define trigger GPIO_PIN_7

#define servo GPIO_PIN_8

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
int Set = 15;
int distance_L, distance_F, distance_R;

void servoPulse(uint16_t pin, uint16_t angle);
long Ultrasonic_read(void);
void compareDistance(void);
void Check_side(void);
void forword(void);
void backword(void);
void turnRight(void);
void turnLeft(void);
void Stop(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);


  for (int angle = 70; angle <= 140; angle += 5)
    {
      servoPulse(servo, angle);
    }
    for (int angle = 140; angle >= 0; angle -= 5)
    {
      servoPulse(servo, angle);
    }

    for (int angle = 0; angle <= 70; angle += 5)
    {
      servoPulse(servo, angle);
    }

    distance_F = Ultrasonic_read();

    HAL_Delay(500);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  distance_F = Ultrasonic_read();
	  HAL_UART_Transmit(&huart2, (uint8_t*)"D F=", 4, HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart2, (uint8_t*)distance_F, sizeof(distance_F), HAL_MAX_DELAY);
	  if ((HAL_GPIO_ReadPin(GPIOA, R_S) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(GPIOA, L_S) == GPIO_PIN_RESET))
	  {
		  if (distance_F > Set)
		  {
			  forword();
	      }
	      else
	      {
	          Check_side();
	      }
	   }
	   else if ((HAL_GPIO_ReadPin(GPIOA, R_S) == GPIO_PIN_SET) && (HAL_GPIO_ReadPin(GPIOA, L_S) == GPIO_PIN_RESET))
	   {
	      turnRight();
	   }
	   else if ((HAL_GPIO_ReadPin(GPIOA, R_S) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(GPIOA, L_S) == GPIO_PIN_SET))
	   {
	      turnLeft();
	   }
	   HAL_Delay(10);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /*Configure GPIO pins : L_S R_S */
    GPIO_InitStruct.Pin = L_S | R_S;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /*Configure GPIO pins : enA in1 in2 in3 in4 enB */
    GPIO_InitStruct.Pin = enA | in1 | in2 | in3 | in4 | enB;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /*Configure GPIO pin : trigger */
    GPIO_InitStruct.Pin = trigger;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /*Configure GPIO pin : echo */
    GPIO_InitStruct.Pin = echo;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /*Configure GPIO pin : servo */
    GPIO_InitStruct.Pin = servo;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void servoPulse(uint16_t pin, uint16_t angle)
{
  uint16_t pwm = (angle * 11) + 500;
  HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_SET);
  TIM3->CCR1 = pwm;
  HAL_Delay(50);
  HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_RESET);
  HAL_Delay(50);
}

long Ultrasonic_read()
{
  HAL_GPIO_WritePin(GPIOA, trigger, GPIO_PIN_RESET);
  HAL_Delay(2);
  HAL_GPIO_WritePin(GPIOA, trigger, GPIO_PIN_SET);
  HAL_Delay(10);
  long time = __HAL_TIM_GET_COUNTER(&htim3);
  return time / 29 / 2;
}

void compareDistance()
{
  if (distance_L > distance_R)
  {
    turnLeft();
    HAL_Delay(500);
    forword();
    HAL_Delay(600);
    turnRight();
    HAL_Delay(500);
    forword();
    HAL_Delay(600);
    turnRight();
    HAL_Delay(400);
  }
  else
  {
    turnRight();
    HAL_Delay(500);
    forword();
    HAL_Delay(600);
    turnLeft();
    HAL_Delay(500);
    forword();
    HAL_Delay(600);
    turnLeft();
    HAL_Delay(400);
  }
}

void Check_side()
{
  Stop();
  HAL_Delay(100);
  for (int angle = 70; angle <= 140; angle += 5)
  {
    servoPulse(servo, angle);
  }
  HAL_Delay(300);
  distance_R = Ultrasonic_read();
  HAL_UART_Transmit(&huart2, (uint8_t*)"D R=", 4, HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart2, (uint8_t*)distance_R, sizeof(distance_R), HAL_MAX_DELAY);
  HAL_Delay(100);
  for (int angle = 140; angle >= 0; angle -= 5)
  {
    servoPulse(servo, angle);
  }
  HAL_Delay(500);
  distance_L = Ultrasonic_read();
  HAL_UART_Transmit(&huart2, (uint8_t*)"D L=", 4, HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart2, (uint8_t*)distance_L, sizeof(distance_L), HAL_MAX_DELAY);
  HAL_Delay(100);
  for (int angle = 0; angle <= 70; angle += 5)
  {
    servoPulse(servo, angle);
  }
  HAL_Delay(300);
  compareDistance();
}

void forword()
{
  HAL_GPIO_WritePin(GPIOA, in1, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, in2, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, in3, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, in4, GPIO_PIN_RESET);
}

void backword()
{
  HAL_GPIO_WritePin(GPIOA, in1, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, in2, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, in3, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, in4, GPIO_PIN_SET);
}

void turnRight()
{
  HAL_GPIO_WritePin(GPIOA, in1, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, in2, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, in3, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, in4, GPIO_PIN_SET);
}

void turnLeft()
{
  HAL_GPIO_WritePin(GPIOA, in1, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, in2, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, in3, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, in4, GPIO_PIN_RESET);
}

void Stop()
{
  HAL_GPIO_WritePin(GPIOA, in1, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, in2, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, in3, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, in4, GPIO_PIN_RESET);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */


LDR_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000285c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002954  08002954  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002954  08002954  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002954  08002954  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002954  08002954  00012954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800295c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  08002968  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002968  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006956  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001684  00000000  00000000  0002698a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  00028010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00028710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001494f  00000000  00000000  00028d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e2d  00000000  00000000  0003d6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083cd0  00000000  00000000  000454d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c91a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017b8  00000000  00000000  000c91f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080028fc 	.word	0x080028fc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080028fc 	.word	0x080028fc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa6c 	bl	80006f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f82a 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8fa 	bl	800041c <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f8da 	bl	80003e0 <MX_DMA_Init>
  MX_ADC1_Init();
 800022c:	f000 f86c 	bl	8000308 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc1, &adc_dma_ldr, 1);
 8000230:	490e      	ldr	r1, [pc, #56]	; (800026c <main+0x54>)
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <main+0x58>)
 8000234:	2201      	movs	r2, #1
 8000236:	0018      	movs	r0, r3
 8000238:	f000 fdf8 	bl	8000e2c <HAL_ADC_Start_DMA>
	  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800023c:	23a0      	movs	r3, #160	; 0xa0
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	2120      	movs	r1, #32
 8000242:	0018      	movs	r0, r3
 8000244:	f001 fe39 	bl	8001eba <HAL_GPIO_TogglePin>

	  	  HAL_Delay(1000);
 8000248:	23fa      	movs	r3, #250	; 0xfa
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fad9 	bl	8000804 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000252:	2380      	movs	r3, #128	; 0x80
 8000254:	01db      	lsls	r3, r3, #7
 8000256:	4807      	ldr	r0, [pc, #28]	; (8000274 <main+0x5c>)
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f001 fe10 	bl	8001e80 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1000);
 8000260:	23fa      	movs	r3, #250	; 0xfa
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	0018      	movs	r0, r3
 8000266:	f000 facd 	bl	8000804 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, &adc_dma_ldr, 1);
 800026a:	e7e1      	b.n	8000230 <main+0x18>
 800026c:	200000e8 	.word	0x200000e8
 8000270:	20000028 	.word	0x20000028
 8000274:	50000400 	.word	0x50000400

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b093      	sub	sp, #76	; 0x4c
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	2414      	movs	r4, #20
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2334      	movs	r3, #52	; 0x34
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f002 fb2f 	bl	80028ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	0018      	movs	r0, r3
 8000292:	2310      	movs	r3, #16
 8000294:	001a      	movs	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	f002 fb28 	bl	80028ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	0018      	movs	r0, r3
 80002a2:	f001 fe25 	bl	8001ef0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a6:	193b      	adds	r3, r7, r4
 80002a8:	2202      	movs	r2, #2
 80002aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	2280      	movs	r2, #128	; 0x80
 80002b0:	0052      	lsls	r2, r2, #1
 80002b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ba:	193b      	adds	r3, r7, r4
 80002bc:	2240      	movs	r2, #64	; 0x40
 80002be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 fe51 	bl	8001f70 <HAL_RCC_OscConfig>
 80002ce:	1e03      	subs	r3, r0, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002d2:	f000 f91f 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2207      	movs	r2, #7
 80002da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2100      	movs	r1, #0
 80002f2:	0018      	movs	r0, r3
 80002f4:	f002 f94c 	bl	8002590 <HAL_RCC_ClockConfig>
 80002f8:	1e03      	subs	r3, r0, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002fc:	f000 f90a 	bl	8000514 <Error_Handler>
  }
}
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	b013      	add	sp, #76	; 0x4c
 8000306:	bd90      	pop	{r4, r7, pc}

08000308 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	0018      	movs	r0, r3
 8000312:	230c      	movs	r3, #12
 8000314:	001a      	movs	r2, r3
 8000316:	2100      	movs	r1, #0
 8000318:	f002 fae8 	bl	80028ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800031c:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <MX_ADC1_Init+0xcc>)
 800031e:	4a2e      	ldr	r2, [pc, #184]	; (80003d8 <MX_ADC1_Init+0xd0>)
 8000320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000322:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	05d2      	lsls	r2, r2, #23
 8000328:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800032a:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <MX_ADC1_Init+0xcc>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000330:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000336:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800033c:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <MX_ADC1_Init+0xcc>)
 800033e:	2204      	movs	r2, #4
 8000340:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000342:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000344:	2200      	movs	r2, #0
 8000346:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000348:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <MX_ADC1_Init+0xcc>)
 800034a:	2200      	movs	r2, #0
 800034c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800034e:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000350:	2200      	movs	r2, #0
 8000352:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000354:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000356:	2201      	movs	r2, #1
 8000358:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035a:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <MX_ADC1_Init+0xcc>)
 800035c:	2220      	movs	r2, #32
 800035e:	2100      	movs	r1, #0
 8000360:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000364:	2200      	movs	r2, #0
 8000366:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <MX_ADC1_Init+0xcc>)
 800036a:	2200      	movs	r2, #0
 800036c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000370:	222c      	movs	r2, #44	; 0x2c
 8000372:	2100      	movs	r1, #0
 8000374:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000376:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000378:	2200      	movs	r2, #0
 800037a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_ADC1_Init+0xcc>)
 800037e:	2200      	movs	r2, #0
 8000380:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000384:	2200      	movs	r2, #0
 8000386:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_ADC1_Init+0xcc>)
 800038a:	223c      	movs	r2, #60	; 0x3c
 800038c:	2100      	movs	r1, #0
 800038e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000392:	2200      	movs	r2, #0
 8000394:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_ADC1_Init+0xcc>)
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fb9f 	bl	8000adc <HAL_ADC_Init>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80003a2:	f000 f8b7 	bl	8000514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4a0c      	ldr	r2, [pc, #48]	; (80003dc <MX_ADC1_Init+0xd4>)
 80003aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b8:	1d3a      	adds	r2, r7, #4
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_ADC1_Init+0xcc>)
 80003bc:	0011      	movs	r1, r2
 80003be:	0018      	movs	r0, r3
 80003c0:	f000 fdde 	bl	8000f80 <HAL_ADC_ConfigChannel>
 80003c4:	1e03      	subs	r3, r0, #0
 80003c6:	d001      	beq.n	80003cc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80003c8:	f000 f8a4 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b004      	add	sp, #16
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000028 	.word	0x20000028
 80003d8:	40012400 	.word	0x40012400
 80003dc:	24000200 	.word	0x24000200

080003e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_DMA_Init+0x38>)
 80003e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_DMA_Init+0x38>)
 80003ec:	2101      	movs	r1, #1
 80003ee:	430a      	orrs	r2, r1
 80003f0:	639a      	str	r2, [r3, #56]	; 0x38
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_DMA_Init+0x38>)
 80003f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003f6:	2201      	movs	r2, #1
 80003f8:	4013      	ands	r3, r2
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	2009      	movs	r0, #9
 8000404:	f001 f954 	bl	80016b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000408:	2009      	movs	r0, #9
 800040a:	f001 f966 	bl	80016da <HAL_NVIC_EnableIRQ>

}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	40021000 	.word	0x40021000

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b089      	sub	sp, #36	; 0x24
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	240c      	movs	r4, #12
 8000424:	193b      	adds	r3, r7, r4
 8000426:	0018      	movs	r0, r3
 8000428:	2314      	movs	r3, #20
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f002 fa5d 	bl	80028ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <MX_GPIO_Init+0xb8>)
 8000434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000436:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <MX_GPIO_Init+0xb8>)
 8000438:	2101      	movs	r1, #1
 800043a:	430a      	orrs	r2, r1
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
 800043e:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <MX_GPIO_Init+0xb8>)
 8000440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000442:	2201      	movs	r2, #1
 8000444:	4013      	ands	r3, r2
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <MX_GPIO_Init+0xb8>)
 800044c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800044e:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <MX_GPIO_Init+0xb8>)
 8000450:	2102      	movs	r1, #2
 8000452:	430a      	orrs	r2, r1
 8000454:	635a      	str	r2, [r3, #52]	; 0x34
 8000456:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <MX_GPIO_Init+0xb8>)
 8000458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800045a:	2202      	movs	r2, #2
 800045c:	4013      	ands	r3, r2
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000462:	23a0      	movs	r3, #160	; 0xa0
 8000464:	05db      	lsls	r3, r3, #23
 8000466:	2200      	movs	r2, #0
 8000468:	2120      	movs	r1, #32
 800046a:	0018      	movs	r0, r3
 800046c:	f001 fd08 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	01db      	lsls	r3, r3, #7
 8000474:	4818      	ldr	r0, [pc, #96]	; (80004d8 <MX_GPIO_Init+0xbc>)
 8000476:	2200      	movs	r2, #0
 8000478:	0019      	movs	r1, r3
 800047a:	f001 fd01 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2220      	movs	r2, #32
 8000482:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2201      	movs	r2, #1
 8000488:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000496:	193a      	adds	r2, r7, r4
 8000498:	23a0      	movs	r3, #160	; 0xa0
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	0011      	movs	r1, r2
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 fb8a 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80004a4:	0021      	movs	r1, r4
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	01d2      	lsls	r2, r2, #7
 80004ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2201      	movs	r2, #1
 80004b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <MX_GPIO_Init+0xbc>)
 80004c4:	0019      	movs	r1, r3
 80004c6:	0010      	movs	r0, r2
 80004c8:	f001 fb76 	bl	8001bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b009      	add	sp, #36	; 0x24
 80004d2:	bd90      	pop	{r4, r7, pc}
 80004d4:	40021000 	.word	0x40021000
 80004d8:	50000400 	.word	0x50000400

080004dc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	adc_dma_ldr =  HAL_ADC_GetValue(&hadc1);
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_ADC_ConvCpltCallback+0x2c>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 fd2e 	bl	8000f48 <HAL_ADC_GetValue>
 80004ec:	0002      	movs	r2, r0
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <HAL_ADC_ConvCpltCallback+0x30>)
 80004f0:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	01db      	lsls	r3, r3, #7
 80004f6:	4806      	ldr	r0, [pc, #24]	; (8000510 <HAL_ADC_ConvCpltCallback+0x34>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	0019      	movs	r1, r3
 80004fc:	f001 fcc0 	bl	8001e80 <HAL_GPIO_WritePin>
	//HAL_ADC_Stop_IT(&hadc1);
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b002      	add	sp, #8
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000028 	.word	0x20000028
 800050c:	200000e8 	.word	0x200000e8
 8000510:	50000400 	.word	0x50000400

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x44>)
 8000528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_MspInit+0x44>)
 800052c:	2101      	movs	r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	641a      	str	r2, [r3, #64]	; 0x40
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x44>)
 8000534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000536:	2201      	movs	r2, #1
 8000538:	4013      	ands	r3, r2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_MspInit+0x44>)
 8000540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_MspInit+0x44>)
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	0549      	lsls	r1, r1, #21
 8000548:	430a      	orrs	r2, r1
 800054a:	63da      	str	r2, [r3, #60]	; 0x3c
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_MspInit+0x44>)
 800054e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	055b      	lsls	r3, r3, #21
 8000554:	4013      	ands	r3, r2
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b08b      	sub	sp, #44	; 0x2c
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	2414      	movs	r4, #20
 8000572:	193b      	adds	r3, r7, r4
 8000574:	0018      	movs	r0, r3
 8000576:	2314      	movs	r3, #20
 8000578:	001a      	movs	r2, r3
 800057a:	2100      	movs	r1, #0
 800057c:	f002 f9b6 	bl	80028ec <memset>
  if(hadc->Instance==ADC1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a2d      	ldr	r2, [pc, #180]	; (800063c <HAL_ADC_MspInit+0xd4>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d153      	bne.n	8000632 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <HAL_ADC_MspInit+0xd8>)
 800058c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800058e:	4b2c      	ldr	r3, [pc, #176]	; (8000640 <HAL_ADC_MspInit+0xd8>)
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	0349      	lsls	r1, r1, #13
 8000594:	430a      	orrs	r2, r1
 8000596:	641a      	str	r2, [r3, #64]	; 0x40
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <HAL_ADC_MspInit+0xd8>)
 800059a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	035b      	lsls	r3, r3, #13
 80005a0:	4013      	ands	r3, r2
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b26      	ldr	r3, [pc, #152]	; (8000640 <HAL_ADC_MspInit+0xd8>)
 80005a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <HAL_ADC_MspInit+0xd8>)
 80005ac:	2102      	movs	r1, #2
 80005ae:	430a      	orrs	r2, r1
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
 80005b2:	4b23      	ldr	r3, [pc, #140]	; (8000640 <HAL_ADC_MspInit+0xd8>)
 80005b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b6:	2202      	movs	r2, #2
 80005b8:	4013      	ands	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2202      	movs	r2, #2
 80005c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2203      	movs	r2, #3
 80005c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <HAL_ADC_MspInit+0xdc>)
 80005d4:	0019      	movs	r1, r3
 80005d6:	0010      	movs	r0, r2
 80005d8:	f001 faee 	bl	8001bb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 80005de:	4a1b      	ldr	r2, [pc, #108]	; (800064c <HAL_ADC_MspInit+0xe4>)
 80005e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 80005e4:	2205      	movs	r2, #5
 80005e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	0092      	lsls	r2, r2, #2
 8000600:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	0112      	lsls	r2, r2, #4
 8000608:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 800060c:	2220      	movs	r2, #32
 800060e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 8000612:	2200      	movs	r2, #0
 8000614:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 8000618:	0018      	movs	r0, r3
 800061a:	f001 f87b 	bl	8001714 <HAL_DMA_Init>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000622:	f7ff ff77 	bl	8000514 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 800062a:	651a      	str	r2, [r3, #80]	; 0x50
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_ADC_MspInit+0xe0>)
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b00b      	add	sp, #44	; 0x2c
 8000638:	bd90      	pop	{r4, r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40012400 	.word	0x40012400
 8000640:	40021000 	.word	0x40021000
 8000644:	50000400 	.word	0x50000400
 8000648:	2000008c 	.word	0x2000008c
 800064c:	40020008 	.word	0x40020008

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000674:	f000 f8aa 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <DMA1_Channel1_IRQHandler+0x14>)
 8000686:	0018      	movs	r0, r3
 8000688:	f001 f954 	bl	8001934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	2000008c 	.word	0x2000008c

08000698 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a8:	f7ff fff6 	bl	8000698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006d2:	f002 f8e7 	bl	80028a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006d6:	f7ff fd9f 	bl	8000218 <main>

080006da <LoopForever>:

LoopForever:
  b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e8:	0800295c 	.word	0x0800295c
  ldr r2, =_sbss
 80006ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f0:	200000f0 	.word	0x200000f0

080006f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_IRQHandler>
	...

080006f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <HAL_Init+0x3c>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_Init+0x3c>)
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	0049      	lsls	r1, r1, #1
 800070e:	430a      	orrs	r2, r1
 8000710:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000712:	2000      	movs	r0, #0
 8000714:	f000 f810 	bl	8000738 <HAL_InitTick>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d003      	beq.n	8000724 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	e001      	b.n	8000728 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000724:	f7ff fefc 	bl	8000520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	b002      	add	sp, #8
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40022000 	.word	0x40022000

08000738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000740:	230f      	movs	r3, #15
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <HAL_InitTick+0x88>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d02b      	beq.n	80007a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <HAL_InitTick+0x8c>)
 8000752:	681c      	ldr	r4, [r3, #0]
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <HAL_InitTick+0x88>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	0019      	movs	r1, r3
 800075a:	23fa      	movs	r3, #250	; 0xfa
 800075c:	0098      	lsls	r0, r3, #2
 800075e:	f7ff fccf 	bl	8000100 <__udivsi3>
 8000762:	0003      	movs	r3, r0
 8000764:	0019      	movs	r1, r3
 8000766:	0020      	movs	r0, r4
 8000768:	f7ff fcca 	bl	8000100 <__udivsi3>
 800076c:	0003      	movs	r3, r0
 800076e:	0018      	movs	r0, r3
 8000770:	f000 ffc3 	bl	80016fa <HAL_SYSTICK_Config>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d112      	bne.n	800079e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d80a      	bhi.n	8000794 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	2301      	movs	r3, #1
 8000782:	425b      	negs	r3, r3
 8000784:	2200      	movs	r2, #0
 8000786:	0018      	movs	r0, r3
 8000788:	f000 ff92 	bl	80016b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <HAL_InitTick+0x90>)
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	e00d      	b.n	80007b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000794:	230f      	movs	r3, #15
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	e008      	b.n	80007b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800079e:	230f      	movs	r3, #15
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e003      	b.n	80007b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007a8:	230f      	movs	r3, #15
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007b0:	230f      	movs	r3, #15
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	781b      	ldrb	r3, [r3, #0]
}
 80007b6:	0018      	movs	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b005      	add	sp, #20
 80007bc:	bd90      	pop	{r4, r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x1c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	001a      	movs	r2, r3
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x20>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	18d2      	adds	r2, r2, r3
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <HAL_IncTick+0x20>)
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000008 	.word	0x20000008
 80007ec:	200000ec 	.word	0x200000ec

080007f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return uwTick;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <HAL_GetTick+0x10>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	200000ec 	.word	0x200000ec

08000804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800080c:	f7ff fff0 	bl	80007f0 <HAL_GetTick>
 8000810:	0003      	movs	r3, r0
 8000812:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	d005      	beq.n	800082a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_Delay+0x44>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	001a      	movs	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	189b      	adds	r3, r3, r2
 8000828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	f7ff ffe0 	bl	80007f0 <HAL_GetTick>
 8000830:	0002      	movs	r2, r0
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	429a      	cmp	r2, r3
 800083a:	d8f7      	bhi.n	800082c <HAL_Delay+0x28>
  {
  }
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b004      	add	sp, #16
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	20000008 	.word	0x20000008

0800084c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800085c:	401a      	ands	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	431a      	orrs	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	601a      	str	r2, [r3, #0]
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	fe3fffff 	.word	0xfe3fffff

08000874 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	23e0      	movs	r3, #224	; 0xe0
 8000882:	045b      	lsls	r3, r3, #17
 8000884:	4013      	ands	r3, r2
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}

0800088e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	2104      	movs	r1, #4
 80008a2:	400a      	ands	r2, r1
 80008a4:	2107      	movs	r1, #7
 80008a6:	4091      	lsls	r1, r2
 80008a8:	000a      	movs	r2, r1
 80008aa:	43d2      	mvns	r2, r2
 80008ac:	401a      	ands	r2, r3
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2104      	movs	r1, #4
 80008b2:	400b      	ands	r3, r1
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	4099      	lsls	r1, r3
 80008b8:	000b      	movs	r3, r1
 80008ba:	431a      	orrs	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b004      	add	sp, #16
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	2104      	movs	r1, #4
 80008da:	400a      	ands	r2, r1
 80008dc:	2107      	movs	r1, #7
 80008de:	4091      	lsls	r1, r2
 80008e0:	000a      	movs	r2, r1
 80008e2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	2104      	movs	r1, #4
 80008e8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80008ea:	40da      	lsrs	r2, r3
 80008ec:	0013      	movs	r3, r2
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68da      	ldr	r2, [r3, #12]
 8000902:	23c0      	movs	r3, #192	; 0xc0
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4013      	ands	r3, r2
 8000908:	d101      	bne.n	800090e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800090a:	2301      	movs	r3, #1
 800090c:	e000      	b.n	8000910 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800090e:	2300      	movs	r3, #0
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}

08000918 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	211f      	movs	r1, #31
 800092c:	400a      	ands	r2, r1
 800092e:	210f      	movs	r1, #15
 8000930:	4091      	lsls	r1, r2
 8000932:	000a      	movs	r2, r1
 8000934:	43d2      	mvns	r2, r2
 8000936:	401a      	ands	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	0e9b      	lsrs	r3, r3, #26
 800093c:	210f      	movs	r1, #15
 800093e:	4019      	ands	r1, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	201f      	movs	r0, #31
 8000944:	4003      	ands	r3, r0
 8000946:	4099      	lsls	r1, r3
 8000948:	000b      	movs	r3, r1
 800094a:	431a      	orrs	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b004      	add	sp, #16
 8000956:	bd80      	pop	{r7, pc}

08000958 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	035b      	lsls	r3, r3, #13
 800096a:	0b5b      	lsrs	r3, r3, #13
 800096c:	431a      	orrs	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}

0800097a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	0352      	lsls	r2, r2, #13
 800098c:	0b52      	lsrs	r2, r2, #13
 800098e:	43d2      	mvns	r2, r2
 8000990:	401a      	ands	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	0212      	lsls	r2, r2, #8
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	401a      	ands	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	400b      	ands	r3, r1
 80009c0:	4904      	ldr	r1, [pc, #16]	; (80009d4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80009c2:	400b      	ands	r3, r1
 80009c4:	431a      	orrs	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b004      	add	sp, #16
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	07ffff00 	.word	0x07ffff00

080009d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <LL_ADC_EnableInternalRegulator+0x24>)
 80009e6:	4013      	ands	r3, r2
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	0552      	lsls	r2, r2, #21
 80009ec:	431a      	orrs	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	6fffffe8 	.word	0x6fffffe8

08000a00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	055b      	lsls	r3, r3, #21
 8000a10:	401a      	ands	r2, r3
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	055b      	lsls	r3, r3, #21
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d101      	bne.n	8000a1e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <LL_ADC_Enable+0x20>)
 8000a36:	4013      	ands	r3, r2
 8000a38:	2201      	movs	r2, #1
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b002      	add	sp, #8
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	7fffffe8 	.word	0x7fffffe8

08000a4c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <LL_ADC_Disable+0x20>)
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	7fffffe8 	.word	0x7fffffe8

08000a70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d101      	bne.n	8000a88 <LL_ADC_IsEnabled+0x18>
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <LL_ADC_IsEnabled+0x1a>
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <LL_ADC_REG_StartConversion+0x20>)
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	7fffffe8 	.word	0x7fffffe8

08000ab8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d101      	bne.n	8000ad0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b002      	add	sp, #8
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae4:	231f      	movs	r3, #31
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e17f      	b.n	8000e02 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10a      	bne.n	8000b20 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fd2b 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2254      	movs	r2, #84	; 0x54
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff ff6b 	bl	8000a00 <LL_ADC_IsInternalRegulatorEnabled>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d115      	bne.n	8000b5a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff ff50 	bl	80009d8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b38:	4bb4      	ldr	r3, [pc, #720]	; (8000e0c <HAL_ADC_Init+0x330>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	49b4      	ldr	r1, [pc, #720]	; (8000e10 <HAL_ADC_Init+0x334>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff fade 	bl	8000100 <__udivsi3>
 8000b44:	0003      	movs	r3, r0
 8000b46:	3301      	adds	r3, #1
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b4c:	e002      	b.n	8000b54 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1f9      	bne.n	8000b4e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff ff4e 	bl	8000a00 <LL_ADC_IsInternalRegulatorEnabled>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d10f      	bne.n	8000b88 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b78:	2201      	movs	r2, #1
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000b80:	231f      	movs	r3, #31
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff ff93 	bl	8000ab8 <LL_ADC_REG_IsConversionOngoing>
 8000b92:	0003      	movs	r3, r0
 8000b94:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	2210      	movs	r2, #16
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	d000      	beq.n	8000ba2 <HAL_ADC_Init+0xc6>
 8000ba0:	e122      	b.n	8000de8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d000      	beq.n	8000baa <HAL_ADC_Init+0xce>
 8000ba8:	e11e      	b.n	8000de8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a99      	ldr	r2, [pc, #612]	; (8000e14 <HAL_ADC_Init+0x338>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff ff56 	bl	8000a70 <LL_ADC_IsEnabled>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d000      	beq.n	8000bca <HAL_ADC_Init+0xee>
 8000bc8:	e0ad      	b.n	8000d26 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7e1b      	ldrb	r3, [r3, #24]
 8000bd2:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000bd4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	7e5b      	ldrb	r3, [r3, #25]
 8000bda:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000bdc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7e9b      	ldrb	r3, [r3, #26]
 8000be2:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000be4:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <HAL_ADC_Init+0x118>
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	015b      	lsls	r3, r3, #5
 8000bf2:	e000      	b.n	8000bf6 <HAL_ADC_Init+0x11a>
 8000bf4:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000bf6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000bfc:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	da04      	bge.n	8000c10 <HAL_ADC_Init+0x134>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	085b      	lsrs	r3, r3, #1
 8000c0e:	e001      	b.n	8000c14 <HAL_ADC_Init+0x138>
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000c14:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	212c      	movs	r1, #44	; 0x2c
 8000c1a:	5c5b      	ldrb	r3, [r3, r1]
 8000c1c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c1e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2220      	movs	r2, #32
 8000c2a:	5c9b      	ldrb	r3, [r3, r2]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d115      	bne.n	8000c5c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7e9b      	ldrb	r3, [r3, #26]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d105      	bne.n	8000c44 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	0252      	lsls	r2, r2, #9
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	e00b      	b.n	8000c5c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c48:	2220      	movs	r2, #32
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c54:	2201      	movs	r2, #1
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00a      	beq.n	8000c7a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c68:	23e0      	movs	r3, #224	; 0xe0
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c72:	4313      	orrs	r3, r2
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	4a65      	ldr	r2, [pc, #404]	; (8000e18 <HAL_ADC_Init+0x33c>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	0019      	movs	r1, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	0f9b      	lsrs	r3, r3, #30
 8000c96:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	223c      	movs	r2, #60	; 0x3c
 8000ca8:	5c9b      	ldrb	r3, [r3, r2]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d111      	bne.n	8000cd2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	0f9b      	lsrs	r3, r3, #30
 8000cb4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cba:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000cc0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000cc6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	4a50      	ldr	r2, [pc, #320]	; (8000e1c <HAL_ADC_Init+0x340>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	0019      	movs	r1, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	23c0      	movs	r3, #192	; 0xc0
 8000cee:	061b      	lsls	r3, r3, #24
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d018      	beq.n	8000d26 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	05db      	lsls	r3, r3, #23
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d012      	beq.n	8000d26 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	061b      	lsls	r3, r3, #24
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d00c      	beq.n	8000d26 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d0c:	4b44      	ldr	r3, [pc, #272]	; (8000e20 <HAL_ADC_Init+0x344>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a44      	ldr	r2, [pc, #272]	; (8000e24 <HAL_ADC_Init+0x348>)
 8000d12:	4013      	ands	r3, r2
 8000d14:	0019      	movs	r1, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	23f0      	movs	r3, #240	; 0xf0
 8000d1c:	039b      	lsls	r3, r3, #14
 8000d1e:	401a      	ands	r2, r3
 8000d20:	4b3f      	ldr	r3, [pc, #252]	; (8000e20 <HAL_ADC_Init+0x344>)
 8000d22:	430a      	orrs	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2e:	001a      	movs	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	f7ff fdac 	bl	800088e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d3e:	493a      	ldr	r1, [pc, #232]	; (8000e28 <HAL_ADC_Init+0x34c>)
 8000d40:	001a      	movs	r2, r3
 8000d42:	f7ff fda4 	bl	800088e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2110      	movs	r1, #16
 8000d5a:	4249      	negs	r1, r1
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8000d60:	e018      	b.n	8000d94 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691a      	ldr	r2, [r3, #16]
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	039b      	lsls	r3, r3, #14
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d112      	bne.n	8000d94 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	69db      	ldr	r3, [r3, #28]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	221c      	movs	r2, #28
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2210      	movs	r2, #16
 8000d82:	4252      	negs	r2, r2
 8000d84:	409a      	lsls	r2, r3
 8000d86:	0011      	movs	r1, r2
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff fd94 	bl	80008c8 <LL_ADC_GetSamplingTimeCommonChannels>
 8000da0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d10b      	bne.n	8000dc2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db4:	2203      	movs	r2, #3
 8000db6:	4393      	bics	r3, r2
 8000db8:	2201      	movs	r2, #1
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000dc0:	e01c      	b.n	8000dfc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	2212      	movs	r2, #18
 8000dc8:	4393      	bics	r3, r2
 8000dca:	2210      	movs	r2, #16
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000dde:	231f      	movs	r3, #31
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000de6:	e009      	b.n	8000dfc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dec:	2210      	movs	r2, #16
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000df4:	231f      	movs	r3, #31
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000dfc:	231f      	movs	r3, #31
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	781b      	ldrb	r3, [r3, #0]
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b008      	add	sp, #32
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	00030d40 	.word	0x00030d40
 8000e14:	fffffefd 	.word	0xfffffefd
 8000e18:	fffe0201 	.word	0xfffe0201
 8000e1c:	1ffffc02 	.word	0x1ffffc02
 8000e20:	40012708 	.word	0x40012708
 8000e24:	ffc3ffff 	.word	0xffc3ffff
 8000e28:	07ffff04 	.word	0x07ffff04

08000e2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff fe3b 	bl	8000ab8 <LL_ADC_REG_IsConversionOngoing>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d16c      	bne.n	8000f20 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2254      	movs	r2, #84	; 0x54
 8000e4a:	5c9b      	ldrb	r3, [r3, r2]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d101      	bne.n	8000e54 <HAL_ADC_Start_DMA+0x28>
 8000e50:	2302      	movs	r3, #2
 8000e52:	e06c      	b.n	8000f2e <HAL_ADC_Start_DMA+0x102>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2254      	movs	r2, #84	; 0x54
 8000e58:	2101      	movs	r1, #1
 8000e5a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2201      	movs	r2, #1
 8000e64:	4013      	ands	r3, r2
 8000e66:	d113      	bne.n	8000e90 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff fdff 	bl	8000a70 <LL_ADC_IsEnabled>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d004      	beq.n	8000e80 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff fde6 	bl	8000a4c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e90:	2517      	movs	r5, #23
 8000e92:	197c      	adds	r4, r7, r5
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 fa4a 	bl	8001330 <ADC_Enable>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ea0:	002c      	movs	r4, r5
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d13e      	bne.n	8000f28 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <HAL_ADC_Start_DMA+0x10c>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0052      	lsls	r2, r2, #1
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ec6:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_ADC_Start_DMA+0x110>)
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <HAL_ADC_Start_DMA+0x114>)
 8000ed0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <HAL_ADC_Start_DMA+0x118>)
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	221c      	movs	r2, #28
 8000ee0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2254      	movs	r2, #84	; 0x54
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3340      	adds	r3, #64	; 0x40
 8000f04:	0019      	movs	r1, r3
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	193c      	adds	r4, r7, r4
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f000 fc8c 	bl	8001828 <HAL_DMA_Start_IT>
 8000f10:	0003      	movs	r3, r0
 8000f12:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff fdbb 	bl	8000a94 <LL_ADC_REG_StartConversion>
 8000f1e:	e003      	b.n	8000f28 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f20:	2317      	movs	r3, #23
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	2202      	movs	r2, #2
 8000f26:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000f28:	2317      	movs	r3, #23
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	781b      	ldrb	r3, [r3, #0]
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b006      	add	sp, #24
 8000f34:	bdb0      	pop	{r4, r5, r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	fffff0fe 	.word	0xfffff0fe
 8000f3c:	0800143d 	.word	0x0800143d
 8000f40:	08001505 	.word	0x08001505
 8000f44:	08001523 	.word	0x08001523

08000f48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f8a:	2317      	movs	r3, #23
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2254      	movs	r2, #84	; 0x54
 8000f9a:	5c9b      	ldrb	r3, [r3, r2]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <HAL_ADC_ConfigChannel+0x24>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e1c0      	b.n	8001326 <HAL_ADC_ConfigChannel+0x3a6>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2254      	movs	r2, #84	; 0x54
 8000fa8:	2101      	movs	r1, #1
 8000faa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff fd81 	bl	8000ab8 <LL_ADC_REG_IsConversionOngoing>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d000      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x3c>
 8000fba:	e1a3      	b.n	8001304 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d100      	bne.n	8000fc6 <HAL_ADC_ConfigChannel+0x46>
 8000fc4:	e143      	b.n	800124e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691a      	ldr	r2, [r3, #16]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	061b      	lsls	r3, r3, #24
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d004      	beq.n	8000fdc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000fd6:	4ac1      	ldr	r2, [pc, #772]	; (80012dc <HAL_ADC_ConfigChannel+0x35c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d108      	bne.n	8000fee <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	0010      	movs	r0, r2
 8000fe8:	f7ff fcb6 	bl	8000958 <LL_ADC_REG_SetSequencerChAdd>
 8000fec:	e0c9      	b.n	8001182 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	211f      	movs	r1, #31
 8000ff8:	400b      	ands	r3, r1
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	4099      	lsls	r1, r3
 8000ffe:	000b      	movs	r3, r1
 8001000:	43db      	mvns	r3, r3
 8001002:	4013      	ands	r3, r2
 8001004:	0019      	movs	r1, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	035b      	lsls	r3, r3, #13
 800100c:	0b5b      	lsrs	r3, r3, #13
 800100e:	d105      	bne.n	800101c <HAL_ADC_ConfigChannel+0x9c>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	0e9b      	lsrs	r3, r3, #26
 8001016:	221f      	movs	r2, #31
 8001018:	4013      	ands	r3, r2
 800101a:	e098      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2201      	movs	r2, #1
 8001022:	4013      	ands	r3, r2
 8001024:	d000      	beq.n	8001028 <HAL_ADC_ConfigChannel+0xa8>
 8001026:	e091      	b.n	800114c <HAL_ADC_ConfigChannel+0x1cc>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2202      	movs	r2, #2
 800102e:	4013      	ands	r3, r2
 8001030:	d000      	beq.n	8001034 <HAL_ADC_ConfigChannel+0xb4>
 8001032:	e089      	b.n	8001148 <HAL_ADC_ConfigChannel+0x1c8>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2204      	movs	r2, #4
 800103a:	4013      	ands	r3, r2
 800103c:	d000      	beq.n	8001040 <HAL_ADC_ConfigChannel+0xc0>
 800103e:	e081      	b.n	8001144 <HAL_ADC_ConfigChannel+0x1c4>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2208      	movs	r2, #8
 8001046:	4013      	ands	r3, r2
 8001048:	d000      	beq.n	800104c <HAL_ADC_ConfigChannel+0xcc>
 800104a:	e079      	b.n	8001140 <HAL_ADC_ConfigChannel+0x1c0>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2210      	movs	r2, #16
 8001052:	4013      	ands	r3, r2
 8001054:	d000      	beq.n	8001058 <HAL_ADC_ConfigChannel+0xd8>
 8001056:	e071      	b.n	800113c <HAL_ADC_ConfigChannel+0x1bc>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2220      	movs	r2, #32
 800105e:	4013      	ands	r3, r2
 8001060:	d000      	beq.n	8001064 <HAL_ADC_ConfigChannel+0xe4>
 8001062:	e069      	b.n	8001138 <HAL_ADC_ConfigChannel+0x1b8>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2240      	movs	r2, #64	; 0x40
 800106a:	4013      	ands	r3, r2
 800106c:	d000      	beq.n	8001070 <HAL_ADC_ConfigChannel+0xf0>
 800106e:	e061      	b.n	8001134 <HAL_ADC_ConfigChannel+0x1b4>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	4013      	ands	r3, r2
 8001078:	d000      	beq.n	800107c <HAL_ADC_ConfigChannel+0xfc>
 800107a:	e059      	b.n	8001130 <HAL_ADC_ConfigChannel+0x1b0>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4013      	ands	r3, r2
 8001086:	d151      	bne.n	800112c <HAL_ADC_ConfigChannel+0x1ac>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4013      	ands	r3, r2
 8001092:	d149      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x1a8>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4013      	ands	r3, r2
 800109e:	d141      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1a4>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	4013      	ands	r3, r2
 80010aa:	d139      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x1a0>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	015b      	lsls	r3, r3, #5
 80010b4:	4013      	ands	r3, r2
 80010b6:	d131      	bne.n	800111c <HAL_ADC_ConfigChannel+0x19c>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	019b      	lsls	r3, r3, #6
 80010c0:	4013      	ands	r3, r2
 80010c2:	d129      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x198>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	01db      	lsls	r3, r3, #7
 80010cc:	4013      	ands	r3, r2
 80010ce:	d121      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x194>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	4013      	ands	r3, r2
 80010da:	d119      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x190>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	025b      	lsls	r3, r3, #9
 80010e4:	4013      	ands	r3, r2
 80010e6:	d111      	bne.n	800110c <HAL_ADC_ConfigChannel+0x18c>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	029b      	lsls	r3, r3, #10
 80010f0:	4013      	ands	r3, r2
 80010f2:	d109      	bne.n	8001108 <HAL_ADC_ConfigChannel+0x188>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	02db      	lsls	r3, r3, #11
 80010fc:	4013      	ands	r3, r2
 80010fe:	d001      	beq.n	8001104 <HAL_ADC_ConfigChannel+0x184>
 8001100:	2312      	movs	r3, #18
 8001102:	e024      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001104:	2300      	movs	r3, #0
 8001106:	e022      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001108:	2311      	movs	r3, #17
 800110a:	e020      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 800110c:	2310      	movs	r3, #16
 800110e:	e01e      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001110:	230f      	movs	r3, #15
 8001112:	e01c      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001114:	230e      	movs	r3, #14
 8001116:	e01a      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001118:	230d      	movs	r3, #13
 800111a:	e018      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 800111c:	230c      	movs	r3, #12
 800111e:	e016      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001120:	230b      	movs	r3, #11
 8001122:	e014      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001124:	230a      	movs	r3, #10
 8001126:	e012      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001128:	2309      	movs	r3, #9
 800112a:	e010      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 800112c:	2308      	movs	r3, #8
 800112e:	e00e      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001130:	2307      	movs	r3, #7
 8001132:	e00c      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001134:	2306      	movs	r3, #6
 8001136:	e00a      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001138:	2305      	movs	r3, #5
 800113a:	e008      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 800113c:	2304      	movs	r3, #4
 800113e:	e006      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001140:	2303      	movs	r3, #3
 8001142:	e004      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001144:	2302      	movs	r3, #2
 8001146:	e002      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <HAL_ADC_ConfigChannel+0x1ce>
 800114c:	2300      	movs	r3, #0
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	6852      	ldr	r2, [r2, #4]
 8001152:	201f      	movs	r0, #31
 8001154:	4002      	ands	r2, r0
 8001156:	4093      	lsls	r3, r2
 8001158:	000a      	movs	r2, r1
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	429a      	cmp	r2, r3
 800116e:	d808      	bhi.n	8001182 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	6859      	ldr	r1, [r3, #4]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	001a      	movs	r2, r3
 800117e:	f7ff fbcb 	bl	8000918 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	6819      	ldr	r1, [r3, #0]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	001a      	movs	r2, r3
 8001190:	f7ff fc06 	bl	80009a0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db00      	blt.n	800119e <HAL_ADC_ConfigChannel+0x21e>
 800119c:	e0bc      	b.n	8001318 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800119e:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <HAL_ADC_ConfigChannel+0x360>)
 80011a0:	0018      	movs	r0, r3
 80011a2:	f7ff fb67 	bl	8000874 <LL_ADC_GetCommonPathInternalCh>
 80011a6:	0003      	movs	r3, r0
 80011a8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <HAL_ADC_ConfigChannel+0x364>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d122      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	041b      	lsls	r3, r3, #16
 80011ba:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011bc:	d11d      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	0412      	lsls	r2, r2, #16
 80011c4:	4313      	orrs	r3, r2
 80011c6:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <HAL_ADC_ConfigChannel+0x360>)
 80011c8:	0019      	movs	r1, r3
 80011ca:	0010      	movs	r0, r2
 80011cc:	f7ff fb3e 	bl	800084c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011d0:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <HAL_ADC_ConfigChannel+0x368>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4945      	ldr	r1, [pc, #276]	; (80012ec <HAL_ADC_ConfigChannel+0x36c>)
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7fe ff92 	bl	8000100 <__udivsi3>
 80011dc:	0003      	movs	r3, r0
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	0013      	movs	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	189b      	adds	r3, r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80011ea:	e002      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f9      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011f8:	e08e      	b.n	8001318 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a3c      	ldr	r2, [pc, #240]	; (80012f0 <HAL_ADC_ConfigChannel+0x370>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d10e      	bne.n	8001222 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	045b      	lsls	r3, r3, #17
 800120a:	4013      	ands	r3, r2
 800120c:	d109      	bne.n	8001222 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	0452      	lsls	r2, r2, #17
 8001214:	4313      	orrs	r3, r2
 8001216:	4a32      	ldr	r2, [pc, #200]	; (80012e0 <HAL_ADC_ConfigChannel+0x360>)
 8001218:	0019      	movs	r1, r3
 800121a:	0010      	movs	r0, r2
 800121c:	f7ff fb16 	bl	800084c <LL_ADC_SetCommonPathInternalCh>
 8001220:	e07a      	b.n	8001318 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <HAL_ADC_ConfigChannel+0x374>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d000      	beq.n	800122e <HAL_ADC_ConfigChannel+0x2ae>
 800122c:	e074      	b.n	8001318 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	03db      	lsls	r3, r3, #15
 8001234:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001236:	d000      	beq.n	800123a <HAL_ADC_ConfigChannel+0x2ba>
 8001238:	e06e      	b.n	8001318 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	03d2      	lsls	r2, r2, #15
 8001240:	4313      	orrs	r3, r2
 8001242:	4a27      	ldr	r2, [pc, #156]	; (80012e0 <HAL_ADC_ConfigChannel+0x360>)
 8001244:	0019      	movs	r1, r3
 8001246:	0010      	movs	r0, r2
 8001248:	f7ff fb00 	bl	800084c <LL_ADC_SetCommonPathInternalCh>
 800124c:	e064      	b.n	8001318 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	061b      	lsls	r3, r3, #24
 8001256:	429a      	cmp	r2, r3
 8001258:	d004      	beq.n	8001264 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_ADC_ConfigChannel+0x35c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d107      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	0019      	movs	r1, r3
 800126e:	0010      	movs	r0, r2
 8001270:	f7ff fb83 	bl	800097a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	da4d      	bge.n	8001318 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_ADC_ConfigChannel+0x360>)
 800127e:	0018      	movs	r0, r3
 8001280:	f7ff faf8 	bl	8000874 <LL_ADC_GetCommonPathInternalCh>
 8001284:	0003      	movs	r3, r0
 8001286:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <HAL_ADC_ConfigChannel+0x364>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d108      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <HAL_ADC_ConfigChannel+0x378>)
 8001296:	4013      	ands	r3, r2
 8001298:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <HAL_ADC_ConfigChannel+0x360>)
 800129a:	0019      	movs	r1, r3
 800129c:	0010      	movs	r0, r2
 800129e:	f7ff fad5 	bl	800084c <LL_ADC_SetCommonPathInternalCh>
 80012a2:	e039      	b.n	8001318 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_ADC_ConfigChannel+0x370>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d108      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <HAL_ADC_ConfigChannel+0x37c>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_ADC_ConfigChannel+0x360>)
 80012b6:	0019      	movs	r1, r3
 80012b8:	0010      	movs	r0, r2
 80012ba:	f7ff fac7 	bl	800084c <LL_ADC_SetCommonPathInternalCh>
 80012be:	e02b      	b.n	8001318 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_ADC_ConfigChannel+0x374>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d126      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <HAL_ADC_ConfigChannel+0x380>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <HAL_ADC_ConfigChannel+0x360>)
 80012d2:	0019      	movs	r1, r3
 80012d4:	0010      	movs	r0, r2
 80012d6:	f7ff fab9 	bl	800084c <LL_ADC_SetCommonPathInternalCh>
 80012da:	e01d      	b.n	8001318 <HAL_ADC_ConfigChannel+0x398>
 80012dc:	80000004 	.word	0x80000004
 80012e0:	40012708 	.word	0x40012708
 80012e4:	b0001000 	.word	0xb0001000
 80012e8:	20000000 	.word	0x20000000
 80012ec:	00030d40 	.word	0x00030d40
 80012f0:	b8004000 	.word	0xb8004000
 80012f4:	b4002000 	.word	0xb4002000
 80012f8:	ff7fffff 	.word	0xff7fffff
 80012fc:	feffffff 	.word	0xfeffffff
 8001300:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001308:	2220      	movs	r2, #32
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001310:	2317      	movs	r3, #23
 8001312:	18fb      	adds	r3, r7, r3
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2254      	movs	r2, #84	; 0x54
 800131c:	2100      	movs	r1, #0
 800131e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001320:	2317      	movs	r3, #23
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	781b      	ldrb	r3, [r3, #0]
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b006      	add	sp, #24
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)

08001330 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff fb95 	bl	8000a70 <LL_ADC_IsEnabled>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d000      	beq.n	800134c <ADC_Enable+0x1c>
 800134a:	e069      	b.n	8001420 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	4a36      	ldr	r2, [pc, #216]	; (800142c <ADC_Enable+0xfc>)
 8001354:	4013      	ands	r3, r2
 8001356:	d00d      	beq.n	8001374 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135c:	2210      	movs	r2, #16
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001368:	2201      	movs	r2, #1
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e056      	b.n	8001422 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff fb55 	bl	8000a28 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800137e:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <ADC_Enable+0x100>)
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff fa77 	bl	8000874 <LL_ADC_GetCommonPathInternalCh>
 8001386:	0002      	movs	r2, r0
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	041b      	lsls	r3, r3, #16
 800138c:	4013      	ands	r3, r2
 800138e:	d00f      	beq.n	80013b0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <ADC_Enable+0x104>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4928      	ldr	r1, [pc, #160]	; (8001438 <ADC_Enable+0x108>)
 8001396:	0018      	movs	r0, r3
 8001398:	f7fe feb2 	bl	8000100 <__udivsi3>
 800139c:	0003      	movs	r3, r0
 800139e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80013a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013a2:	e002      	b.n	80013aa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f9      	bne.n	80013a4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e5b      	ldrb	r3, [r3, #25]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d033      	beq.n	8001420 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fa1a 	bl	80007f0 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013c0:	e027      	b.n	8001412 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7ff fb52 	bl	8000a70 <LL_ADC_IsEnabled>
 80013cc:	1e03      	subs	r3, r0, #0
 80013ce:	d104      	bne.n	80013da <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff fb27 	bl	8000a28 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013da:	f7ff fa09 	bl	80007f0 <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d914      	bls.n	8001412 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2201      	movs	r2, #1
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d00d      	beq.n	8001412 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	2210      	movs	r2, #16
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001406:	2201      	movs	r2, #1
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e007      	b.n	8001422 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	4013      	ands	r3, r2
 800141c:	2b01      	cmp	r3, #1
 800141e:	d1d0      	bne.n	80013c2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	80000017 	.word	0x80000017
 8001430:	40012708 	.word	0x40012708
 8001434:	20000000 	.word	0x20000000
 8001438:	00030d40 	.word	0x00030d40

0800143c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	2250      	movs	r2, #80	; 0x50
 8001450:	4013      	ands	r3, r2
 8001452:	d141      	bne.n	80014d8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	2280      	movs	r2, #128	; 0x80
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	431a      	orrs	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	0018      	movs	r0, r3
 8001468:	f7ff fa45 	bl	80008f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800146c:	1e03      	subs	r3, r0, #0
 800146e:	d02e      	beq.n	80014ce <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	7e9b      	ldrb	r3, [r3, #26]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d12a      	bne.n	80014ce <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2208      	movs	r2, #8
 8001480:	4013      	ands	r3, r2
 8001482:	2b08      	cmp	r3, #8
 8001484:	d123      	bne.n	80014ce <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fb14 	bl	8000ab8 <LL_ADC_REG_IsConversionOngoing>
 8001490:	1e03      	subs	r3, r0, #0
 8001492:	d110      	bne.n	80014b6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	210c      	movs	r1, #12
 80014a0:	438a      	bics	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	4a15      	ldr	r2, [pc, #84]	; (8001500 <ADC_DMAConvCplt+0xc4>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	2201      	movs	r2, #1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	659a      	str	r2, [r3, #88]	; 0x58
 80014b4:	e00b      	b.n	80014ce <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	2220      	movs	r2, #32
 80014bc:	431a      	orrs	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	2201      	movs	r2, #1
 80014c8:	431a      	orrs	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7ff f803 	bl	80004dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80014d6:	e00f      	b.n	80014f8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014dc:	2210      	movs	r2, #16
 80014de:	4013      	ands	r3, r2
 80014e0:	d004      	beq.n	80014ec <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff fd42 	bl	8000f6e <HAL_ADC_ErrorCallback>
}
 80014ea:	e005      	b.n	80014f8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	0010      	movs	r0, r2
 80014f6:	4798      	blx	r3
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b004      	add	sp, #16
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	fffffefe 	.word	0xfffffefe

08001504 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fd22 	bl	8000f5e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b004      	add	sp, #16
 8001520:	bd80      	pop	{r7, pc}

08001522 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001534:	2240      	movs	r2, #64	; 0x40
 8001536:	431a      	orrs	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	2204      	movs	r2, #4
 8001542:	431a      	orrs	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff fd0f 	bl	8000f6e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	b004      	add	sp, #16
 8001556:	bd80      	pop	{r7, pc}

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	0002      	movs	r2, r0
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001564:	1dfb      	adds	r3, r7, #7
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b7f      	cmp	r3, #127	; 0x7f
 800156a:	d809      	bhi.n	8001580 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156c:	1dfb      	adds	r3, r7, #7
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	001a      	movs	r2, r3
 8001572:	231f      	movs	r3, #31
 8001574:	401a      	ands	r2, r3
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_EnableIRQ+0x30>)
 8001578:	2101      	movs	r1, #1
 800157a:	4091      	lsls	r1, r2
 800157c:	000a      	movs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bd80      	pop	{r7, pc}
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	0002      	movs	r2, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b7f      	cmp	r3, #127	; 0x7f
 80015a0:	d828      	bhi.n	80015f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a2:	4a2f      	ldr	r2, [pc, #188]	; (8001660 <__NVIC_SetPriority+0xd4>)
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	33c0      	adds	r3, #192	; 0xc0
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	589b      	ldr	r3, [r3, r2]
 80015b2:	1dfa      	adds	r2, r7, #7
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	0011      	movs	r1, r2
 80015b8:	2203      	movs	r2, #3
 80015ba:	400a      	ands	r2, r1
 80015bc:	00d2      	lsls	r2, r2, #3
 80015be:	21ff      	movs	r1, #255	; 0xff
 80015c0:	4091      	lsls	r1, r2
 80015c2:	000a      	movs	r2, r1
 80015c4:	43d2      	mvns	r2, r2
 80015c6:	401a      	ands	r2, r3
 80015c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	22ff      	movs	r2, #255	; 0xff
 80015d0:	401a      	ands	r2, r3
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	0018      	movs	r0, r3
 80015d8:	2303      	movs	r3, #3
 80015da:	4003      	ands	r3, r0
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e0:	481f      	ldr	r0, [pc, #124]	; (8001660 <__NVIC_SetPriority+0xd4>)
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	430a      	orrs	r2, r1
 80015ec:	33c0      	adds	r3, #192	; 0xc0
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015f2:	e031      	b.n	8001658 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <__NVIC_SetPriority+0xd8>)
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	0019      	movs	r1, r3
 80015fc:	230f      	movs	r3, #15
 80015fe:	400b      	ands	r3, r1
 8001600:	3b08      	subs	r3, #8
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3306      	adds	r3, #6
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	18d3      	adds	r3, r2, r3
 800160a:	3304      	adds	r3, #4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1dfa      	adds	r2, r7, #7
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	0011      	movs	r1, r2
 8001614:	2203      	movs	r2, #3
 8001616:	400a      	ands	r2, r1
 8001618:	00d2      	lsls	r2, r2, #3
 800161a:	21ff      	movs	r1, #255	; 0xff
 800161c:	4091      	lsls	r1, r2
 800161e:	000a      	movs	r2, r1
 8001620:	43d2      	mvns	r2, r2
 8001622:	401a      	ands	r2, r3
 8001624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	401a      	ands	r2, r3
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	0018      	movs	r0, r3
 8001634:	2303      	movs	r3, #3
 8001636:	4003      	ands	r3, r0
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <__NVIC_SetPriority+0xd8>)
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	001c      	movs	r4, r3
 8001644:	230f      	movs	r3, #15
 8001646:	4023      	ands	r3, r4
 8001648:	3b08      	subs	r3, #8
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	430a      	orrs	r2, r1
 800164e:	3306      	adds	r3, #6
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	18c3      	adds	r3, r0, r3
 8001654:	3304      	adds	r3, #4
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b003      	add	sp, #12
 800165e:	bd90      	pop	{r4, r7, pc}
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	1e5a      	subs	r2, r3, #1
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	045b      	lsls	r3, r3, #17
 8001678:	429a      	cmp	r2, r3
 800167a:	d301      	bcc.n	8001680 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167c:	2301      	movs	r3, #1
 800167e:	e010      	b.n	80016a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <SysTick_Config+0x44>)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	3a01      	subs	r2, #1
 8001686:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001688:	2301      	movs	r3, #1
 800168a:	425b      	negs	r3, r3
 800168c:	2103      	movs	r1, #3
 800168e:	0018      	movs	r0, r3
 8001690:	f7ff ff7c 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x44>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x44>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	210f      	movs	r1, #15
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	1c02      	adds	r2, r0, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	0011      	movs	r1, r2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	0002      	movs	r2, r0
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff ff33 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff ffaf 	bl	8001668 <SysTick_Config>
 800170a:	0003      	movs	r3, r0
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e077      	b.n	8001816 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a3d      	ldr	r2, [pc, #244]	; (8001820 <HAL_DMA_Init+0x10c>)
 800172c:	4694      	mov	ip, r2
 800172e:	4463      	add	r3, ip
 8001730:	2114      	movs	r1, #20
 8001732:	0018      	movs	r0, r3
 8001734:	f7fe fce4 	bl	8000100 <__udivsi3>
 8001738:	0003      	movs	r3, r0
 800173a:	009a      	lsls	r2, r3, #2
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2225      	movs	r2, #37	; 0x25
 8001744:	2102      	movs	r1, #2
 8001746:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4934      	ldr	r1, [pc, #208]	; (8001824 <HAL_DMA_Init+0x110>)
 8001754:	400a      	ands	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f000 f9c1 	bl	8001b18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	01db      	lsls	r3, r3, #7
 800179e:	429a      	cmp	r2, r3
 80017a0:	d102      	bne.n	80017a8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	213f      	movs	r1, #63	; 0x3f
 80017b2:	400a      	ands	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017be:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d011      	beq.n	80017ec <HAL_DMA_Init+0xd8>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d80d      	bhi.n	80017ec <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 f9cc 	bl	8001b70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	e008      	b.n	80017fe <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2225      	movs	r2, #37	; 0x25
 8001808:	2101      	movs	r1, #1
 800180a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	; 0x24
 8001810:	2100      	movs	r1, #0
 8001812:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b002      	add	sp, #8
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	bffdfff8 	.word	0xbffdfff8
 8001824:	ffff800f 	.word	0xffff800f

08001828 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001836:	2317      	movs	r3, #23
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2224      	movs	r2, #36	; 0x24
 8001842:	5c9b      	ldrb	r3, [r3, r2]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_DMA_Start_IT+0x24>
 8001848:	2302      	movs	r3, #2
 800184a:	e06f      	b.n	800192c <HAL_DMA_Start_IT+0x104>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2224      	movs	r2, #36	; 0x24
 8001850:	2101      	movs	r1, #1
 8001852:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2225      	movs	r2, #37	; 0x25
 8001858:	5c9b      	ldrb	r3, [r3, r2]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b01      	cmp	r3, #1
 800185e:	d157      	bne.n	8001910 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2225      	movs	r2, #37	; 0x25
 8001864:	2102      	movs	r1, #2
 8001866:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	438a      	bics	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	68b9      	ldr	r1, [r7, #8]
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f907 	bl	8001a98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	210e      	movs	r1, #14
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	e00f      	b.n	80018c4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2104      	movs	r1, #4
 80018b0:	438a      	bics	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	210a      	movs	r1, #10
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	025b      	lsls	r3, r3, #9
 80018ce:	4013      	ands	r3, r2
 80018d0:	d008      	beq.n	80018e4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	0049      	lsls	r1, r1, #1
 80018e0:	430a      	orrs	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	0049      	lsls	r1, r1, #1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2101      	movs	r1, #1
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e00a      	b.n	8001926 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2280      	movs	r2, #128	; 0x80
 8001914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2224      	movs	r2, #36	; 0x24
 800191a:	2100      	movs	r1, #0
 800191c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800191e:	2317      	movs	r3, #23
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001926:	2317      	movs	r3, #23
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	781b      	ldrb	r3, [r3, #0]
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b006      	add	sp, #24
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800193c:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <HAL_DMA_IRQHandler+0x160>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	221c      	movs	r2, #28
 8001950:	4013      	ands	r3, r2
 8001952:	2204      	movs	r2, #4
 8001954:	409a      	lsls	r2, r3
 8001956:	0013      	movs	r3, r2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	d027      	beq.n	80019ae <HAL_DMA_IRQHandler+0x7a>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2204      	movs	r2, #4
 8001962:	4013      	ands	r3, r2
 8001964:	d023      	beq.n	80019ae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2220      	movs	r2, #32
 800196e:	4013      	ands	r3, r2
 8001970:	d107      	bne.n	8001982 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2104      	movs	r1, #4
 800197e:	438a      	bics	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001982:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <HAL_DMA_IRQHandler+0x160>)
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	221c      	movs	r2, #28
 800198c:	4013      	ands	r3, r2
 800198e:	2204      	movs	r2, #4
 8001990:	409a      	lsls	r2, r3
 8001992:	4b40      	ldr	r3, [pc, #256]	; (8001a94 <HAL_DMA_IRQHandler+0x160>)
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	2b00      	cmp	r3, #0
 800199e:	d100      	bne.n	80019a2 <HAL_DMA_IRQHandler+0x6e>
 80019a0:	e073      	b.n	8001a8a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	0010      	movs	r0, r2
 80019aa:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80019ac:	e06d      	b.n	8001a8a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	221c      	movs	r2, #28
 80019b4:	4013      	ands	r3, r2
 80019b6:	2202      	movs	r2, #2
 80019b8:	409a      	lsls	r2, r3
 80019ba:	0013      	movs	r3, r2
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4013      	ands	r3, r2
 80019c0:	d02e      	beq.n	8001a20 <HAL_DMA_IRQHandler+0xec>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2202      	movs	r2, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d02a      	beq.n	8001a20 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2220      	movs	r2, #32
 80019d2:	4013      	ands	r3, r2
 80019d4:	d10b      	bne.n	80019ee <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	210a      	movs	r1, #10
 80019e2:	438a      	bics	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2225      	movs	r2, #37	; 0x25
 80019ea:	2101      	movs	r1, #1
 80019ec:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <HAL_DMA_IRQHandler+0x160>)
 80019f0:	6859      	ldr	r1, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	221c      	movs	r2, #28
 80019f8:	4013      	ands	r3, r2
 80019fa:	2202      	movs	r2, #2
 80019fc:	409a      	lsls	r2, r3
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <HAL_DMA_IRQHandler+0x160>)
 8001a00:	430a      	orrs	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2224      	movs	r2, #36	; 0x24
 8001a08:	2100      	movs	r1, #0
 8001a0a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d03a      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	0010      	movs	r0, r2
 8001a1c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001a1e:	e034      	b.n	8001a8a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	221c      	movs	r2, #28
 8001a26:	4013      	ands	r3, r2
 8001a28:	2208      	movs	r2, #8
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	d02b      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x158>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2208      	movs	r2, #8
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d027      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	210e      	movs	r1, #14
 8001a48:	438a      	bics	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_DMA_IRQHandler+0x160>)
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	221c      	movs	r2, #28
 8001a56:	4013      	ands	r3, r2
 8001a58:	2201      	movs	r2, #1
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_DMA_IRQHandler+0x160>)
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2225      	movs	r2, #37	; 0x25
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2224      	movs	r2, #36	; 0x24
 8001a74:	2100      	movs	r1, #0
 8001a76:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	0010      	movs	r0, r2
 8001a88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46c0      	nop			; (mov r8, r8)
}
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b004      	add	sp, #16
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40020000 	.word	0x40020000

08001a98 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001aae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d004      	beq.n	8001ac2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001ac0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <DMA_SetConfig+0x7c>)
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	221c      	movs	r2, #28
 8001acc:	4013      	ands	r3, r2
 8001ace:	2201      	movs	r2, #1
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <DMA_SetConfig+0x7c>)
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b10      	cmp	r3, #16
 8001ae6:	d108      	bne.n	8001afa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001af8:	e007      	b.n	8001b0a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	60da      	str	r2, [r3, #12]
}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b004      	add	sp, #16
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	40020000 	.word	0x40020000

08001b18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001b28:	4694      	mov	ip, r2
 8001b2a:	4463      	add	r3, ip
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	001a      	movs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	001a      	movs	r2, r3
 8001b3a:	23ff      	movs	r3, #255	; 0xff
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	3b08      	subs	r3, #8
 8001b40:	2114      	movs	r1, #20
 8001b42:	0018      	movs	r0, r3
 8001b44:	f7fe fadc 	bl	8000100 <__udivsi3>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001b50:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	221f      	movs	r2, #31
 8001b56:	4013      	ands	r3, r2
 8001b58:	2201      	movs	r2, #1
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b004      	add	sp, #16
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	10008200 	.word	0x10008200
 8001b6c:	40020880 	.word	0x40020880

08001b70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	223f      	movs	r2, #63	; 0x3f
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b86:	4694      	mov	ip, r2
 8001b88:	4463      	add	r3, ip
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b96:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b004      	add	sp, #16
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	1000823f 	.word	0x1000823f
 8001bb4:	40020940 	.word	0x40020940

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	e147      	b.n	8001e58 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4091      	lsls	r1, r2
 8001bd2:	000a      	movs	r2, r1
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d100      	bne.n	8001be0 <HAL_GPIO_Init+0x28>
 8001bde:	e138      	b.n	8001e52 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2203      	movs	r2, #3
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d005      	beq.n	8001bf8 <HAL_GPIO_Init+0x40>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d130      	bne.n	8001c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	409a      	lsls	r2, r3
 8001c06:	0013      	movs	r3, r2
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	0013      	movs	r3, r2
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2e:	2201      	movs	r2, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	43da      	mvns	r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	2201      	movs	r2, #1
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d017      	beq.n	8001c96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	409a      	lsls	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	43da      	mvns	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	409a      	lsls	r2, r3
 8001c88:	0013      	movs	r3, r2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d123      	bne.n	8001cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	58d3      	ldr	r3, [r2, r3]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2107      	movs	r1, #7
 8001cce:	400b      	ands	r3, r1
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	6939      	ldr	r1, [r7, #16]
 8001ce8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2203      	movs	r2, #3
 8001d08:	401a      	ands	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	0013      	movs	r3, r2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	23c0      	movs	r3, #192	; 0xc0
 8001d24:	029b      	lsls	r3, r3, #10
 8001d26:	4013      	ands	r3, r2
 8001d28:	d100      	bne.n	8001d2c <HAL_GPIO_Init+0x174>
 8001d2a:	e092      	b.n	8001e52 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001d2c:	4a50      	ldr	r2, [pc, #320]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3318      	adds	r3, #24
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	589b      	ldr	r3, [r3, r2]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	4013      	ands	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	220f      	movs	r2, #15
 8001d44:	409a      	lsls	r2, r3
 8001d46:	0013      	movs	r3, r2
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	23a0      	movs	r3, #160	; 0xa0
 8001d54:	05db      	lsls	r3, r3, #23
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d013      	beq.n	8001d82 <HAL_GPIO_Init+0x1ca>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a45      	ldr	r2, [pc, #276]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00d      	beq.n	8001d7e <HAL_GPIO_Init+0x1c6>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a44      	ldr	r2, [pc, #272]	; (8001e78 <HAL_GPIO_Init+0x2c0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d007      	beq.n	8001d7a <HAL_GPIO_Init+0x1c2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a43      	ldr	r2, [pc, #268]	; (8001e7c <HAL_GPIO_Init+0x2c4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_GPIO_Init+0x1be>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x1cc>
 8001d76:	2305      	movs	r3, #5
 8001d78:	e004      	b.n	8001d84 <HAL_GPIO_Init+0x1cc>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e002      	b.n	8001d84 <HAL_GPIO_Init+0x1cc>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_GPIO_Init+0x1cc>
 8001d82:	2300      	movs	r3, #0
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	2103      	movs	r1, #3
 8001d88:	400a      	ands	r2, r1
 8001d8a:	00d2      	lsls	r2, r2, #3
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001d94:	4936      	ldr	r1, [pc, #216]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3318      	adds	r3, #24
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001da2:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43da      	mvns	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	035b      	lsls	r3, r3, #13
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	039b      	lsls	r3, r3, #14
 8001de4:	4013      	ands	r3, r2
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001df8:	2384      	movs	r3, #132	; 0x84
 8001dfa:	58d3      	ldr	r3, [r2, r3]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43da      	mvns	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	029b      	lsls	r3, r3, #10
 8001e10:	4013      	ands	r3, r2
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e1c:	4914      	ldr	r1, [pc, #80]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001e1e:	2284      	movs	r2, #132	; 0x84
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	58d3      	ldr	r3, [r2, r3]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	025b      	lsls	r3, r3, #9
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e4a:	4909      	ldr	r1, [pc, #36]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	40da      	lsrs	r2, r3
 8001e60:	1e13      	subs	r3, r2, #0
 8001e62:	d000      	beq.n	8001e66 <HAL_GPIO_Init+0x2ae>
 8001e64:	e6b0      	b.n	8001bc8 <HAL_GPIO_Init+0x10>
  }
}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b006      	add	sp, #24
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021800 	.word	0x40021800
 8001e74:	50000400 	.word	0x50000400
 8001e78:	50000800 	.word	0x50000800
 8001e7c:	50000c00 	.word	0x50000c00

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	0008      	movs	r0, r1
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	1cbb      	adds	r3, r7, #2
 8001e8e:	1c02      	adds	r2, r0, #0
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	1c7b      	adds	r3, r7, #1
 8001e94:	1c0a      	adds	r2, r1, #0
 8001e96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e98:	1c7b      	adds	r3, r7, #1
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea0:	1cbb      	adds	r3, r7, #2
 8001ea2:	881a      	ldrh	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eaa:	1cbb      	adds	r3, r7, #2
 8001eac:	881a      	ldrh	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	000a      	movs	r2, r1
 8001ec4:	1cbb      	adds	r3, r7, #2
 8001ec6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ece:	1cbb      	adds	r3, r7, #2
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	041a      	lsls	r2, r3, #16
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	1cb9      	adds	r1, r7, #2
 8001ede:	8809      	ldrh	r1, [r1, #0]
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b004      	add	sp, #16
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d11f      	bne.n	8001f54 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	0013      	movs	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	189b      	adds	r3, r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4912      	ldr	r1, [pc, #72]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7fe f8ec 	bl	8000100 <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f2e:	e008      	b.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e001      	b.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e009      	b.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d0ed      	beq.n	8001f30 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b004      	add	sp, #16
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	40007000 	.word	0x40007000
 8001f64:	fffff9ff 	.word	0xfffff9ff
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	000f4240 	.word	0x000f4240

08001f70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e2f3      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2201      	movs	r2, #1
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d100      	bne.n	8001f8e <HAL_RCC_OscConfig+0x1e>
 8001f8c:	e07c      	b.n	8002088 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8e:	4bc3      	ldr	r3, [pc, #780]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2238      	movs	r2, #56	; 0x38
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f98:	4bc0      	ldr	r3, [pc, #768]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b10      	cmp	r3, #16
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_OscConfig+0x3e>
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d002      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d10b      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	4bb9      	ldr	r3, [pc, #740]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d062      	beq.n	8002086 <HAL_RCC_OscConfig+0x116>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d15e      	bne.n	8002086 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e2ce      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	025b      	lsls	r3, r3, #9
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x78>
 8001fd8:	4bb0      	ldr	r3, [pc, #704]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4baf      	ldr	r3, [pc, #700]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	0249      	lsls	r1, r1, #9
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e020      	b.n	800202a <HAL_RCC_OscConfig+0xba>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	23a0      	movs	r3, #160	; 0xa0
 8001fee:	02db      	lsls	r3, r3, #11
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d10e      	bne.n	8002012 <HAL_RCC_OscConfig+0xa2>
 8001ff4:	4ba9      	ldr	r3, [pc, #676]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4ba8      	ldr	r3, [pc, #672]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	02c9      	lsls	r1, r1, #11
 8001ffe:	430a      	orrs	r2, r1
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	4ba6      	ldr	r3, [pc, #664]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4ba5      	ldr	r3, [pc, #660]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0249      	lsls	r1, r1, #9
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e00b      	b.n	800202a <HAL_RCC_OscConfig+0xba>
 8002012:	4ba2      	ldr	r3, [pc, #648]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4ba1      	ldr	r3, [pc, #644]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002018:	49a1      	ldr	r1, [pc, #644]	; (80022a0 <HAL_RCC_OscConfig+0x330>)
 800201a:	400a      	ands	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	4b9f      	ldr	r3, [pc, #636]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b9e      	ldr	r3, [pc, #632]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002024:	499f      	ldr	r1, [pc, #636]	; (80022a4 <HAL_RCC_OscConfig+0x334>)
 8002026:	400a      	ands	r2, r1
 8002028:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d014      	beq.n	800205c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7fe fbdd 	bl	80007f0 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7fe fbd8 	bl	80007f0 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e28d      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204e:	4b93      	ldr	r3, [pc, #588]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	4013      	ands	r3, r2
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0xcc>
 800205a:	e015      	b.n	8002088 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7fe fbc8 	bl	80007f0 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002066:	f7fe fbc3 	bl	80007f0 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b64      	cmp	r3, #100	; 0x64
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e278      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002078:	4b88      	ldr	r3, [pc, #544]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	029b      	lsls	r3, r3, #10
 8002080:	4013      	ands	r3, r2
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0xf6>
 8002084:	e000      	b.n	8002088 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002086:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2202      	movs	r2, #2
 800208e:	4013      	ands	r3, r2
 8002090:	d100      	bne.n	8002094 <HAL_RCC_OscConfig+0x124>
 8002092:	e099      	b.n	80021c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002094:	4b81      	ldr	r3, [pc, #516]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2238      	movs	r2, #56	; 0x38
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209e:	4b7f      	ldr	r3, [pc, #508]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2203      	movs	r2, #3
 80020a4:	4013      	ands	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2b10      	cmp	r3, #16
 80020ac:	d102      	bne.n	80020b4 <HAL_RCC_OscConfig+0x144>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d002      	beq.n	80020ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d135      	bne.n	8002126 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ba:	4b78      	ldr	r3, [pc, #480]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4013      	ands	r3, r2
 80020c4:	d005      	beq.n	80020d2 <HAL_RCC_OscConfig+0x162>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e24b      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d2:	4b72      	ldr	r3, [pc, #456]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a74      	ldr	r2, [pc, #464]	; (80022a8 <HAL_RCC_OscConfig+0x338>)
 80020d8:	4013      	ands	r3, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	021a      	lsls	r2, r3, #8
 80020e2:	4b6e      	ldr	r3, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d112      	bne.n	8002114 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020ee:	4b6b      	ldr	r3, [pc, #428]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6e      	ldr	r2, [pc, #440]	; (80022ac <HAL_RCC_OscConfig+0x33c>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	0019      	movs	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002102:	4b66      	ldr	r3, [pc, #408]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0adb      	lsrs	r3, r3, #11
 8002108:	2207      	movs	r2, #7
 800210a:	4013      	ands	r3, r2
 800210c:	4a68      	ldr	r2, [pc, #416]	; (80022b0 <HAL_RCC_OscConfig+0x340>)
 800210e:	40da      	lsrs	r2, r3
 8002110:	4b68      	ldr	r3, [pc, #416]	; (80022b4 <HAL_RCC_OscConfig+0x344>)
 8002112:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002114:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <HAL_RCC_OscConfig+0x348>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0018      	movs	r0, r3
 800211a:	f7fe fb0d 	bl	8000738 <HAL_InitTick>
 800211e:	1e03      	subs	r3, r0, #0
 8002120:	d051      	beq.n	80021c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e221      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d030      	beq.n	8002190 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800212e:	4b5b      	ldr	r3, [pc, #364]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a5e      	ldr	r2, [pc, #376]	; (80022ac <HAL_RCC_OscConfig+0x33c>)
 8002134:	4013      	ands	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	4b57      	ldr	r3, [pc, #348]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002142:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b55      	ldr	r3, [pc, #340]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002148:	2180      	movs	r1, #128	; 0x80
 800214a:	0049      	lsls	r1, r1, #1
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe fb4e 	bl	80007f0 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215a:	f7fe fb49 	bl	80007f0 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1fe      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216c:	4b4b      	ldr	r3, [pc, #300]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4013      	ands	r3, r2
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b48      	ldr	r3, [pc, #288]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a4a      	ldr	r2, [pc, #296]	; (80022a8 <HAL_RCC_OscConfig+0x338>)
 800217e:	4013      	ands	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	021a      	lsls	r2, r3, #8
 8002188:	4b44      	ldr	r3, [pc, #272]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	e01b      	b.n	80021c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002190:	4b42      	ldr	r3, [pc, #264]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002196:	4949      	ldr	r1, [pc, #292]	; (80022bc <HAL_RCC_OscConfig+0x34c>)
 8002198:	400a      	ands	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe fb28 	bl	80007f0 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a6:	f7fe fb23 	bl	80007f0 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e1d8      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b8:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4013      	ands	r3, r2
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x236>
 80021c4:	e000      	b.n	80021c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2208      	movs	r2, #8
 80021ce:	4013      	ands	r3, r2
 80021d0:	d047      	beq.n	8002262 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2238      	movs	r2, #56	; 0x38
 80021d8:	4013      	ands	r3, r2
 80021da:	2b18      	cmp	r3, #24
 80021dc:	d10a      	bne.n	80021f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 80021e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d03c      	beq.n	8002262 <HAL_RCC_OscConfig+0x2f2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d138      	bne.n	8002262 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e1ba      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d019      	beq.n	8002230 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 80021fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002200:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002202:	2101      	movs	r1, #1
 8002204:	430a      	orrs	r2, r1
 8002206:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe faf2 	bl	80007f0 <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002212:	f7fe faed 	bl	80007f0 <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e1a2      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002228:	2202      	movs	r2, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d0f1      	beq.n	8002212 <HAL_RCC_OscConfig+0x2a2>
 800222e:	e018      	b.n	8002262 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002232:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002236:	2101      	movs	r1, #1
 8002238:	438a      	bics	r2, r1
 800223a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fad8 	bl	80007f0 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002246:	f7fe fad3 	bl	80007f0 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e188      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 800225a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225c:	2202      	movs	r2, #2
 800225e:	4013      	ands	r3, r2
 8002260:	d1f1      	bne.n	8002246 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2204      	movs	r2, #4
 8002268:	4013      	ands	r3, r2
 800226a:	d100      	bne.n	800226e <HAL_RCC_OscConfig+0x2fe>
 800226c:	e0c6      	b.n	80023fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226e:	231f      	movs	r3, #31
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2238      	movs	r2, #56	; 0x38
 800227c:	4013      	ands	r3, r2
 800227e:	2b20      	cmp	r3, #32
 8002280:	d11e      	bne.n	80022c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_OscConfig+0x32c>)
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	2202      	movs	r2, #2
 8002288:	4013      	ands	r3, r2
 800228a:	d100      	bne.n	800228e <HAL_RCC_OscConfig+0x31e>
 800228c:	e0b6      	b.n	80023fc <HAL_RCC_OscConfig+0x48c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d000      	beq.n	8002298 <HAL_RCC_OscConfig+0x328>
 8002296:	e0b1      	b.n	80023fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e166      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
 800229c:	40021000 	.word	0x40021000
 80022a0:	fffeffff 	.word	0xfffeffff
 80022a4:	fffbffff 	.word	0xfffbffff
 80022a8:	ffff80ff 	.word	0xffff80ff
 80022ac:	ffffc7ff 	.word	0xffffc7ff
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000004 	.word	0x20000004
 80022bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022c0:	4bac      	ldr	r3, [pc, #688]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80022c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	055b      	lsls	r3, r3, #21
 80022c8:	4013      	ands	r3, r2
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_OscConfig+0x360>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x362>
 80022d0:	2300      	movs	r3, #0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d011      	beq.n	80022fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	4ba7      	ldr	r3, [pc, #668]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80022d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022da:	4ba6      	ldr	r3, [pc, #664]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0549      	lsls	r1, r1, #21
 80022e0:	430a      	orrs	r2, r1
 80022e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80022e4:	4ba3      	ldr	r3, [pc, #652]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80022e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	055b      	lsls	r3, r3, #21
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80022f2:	231f      	movs	r3, #31
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022fa:	4b9f      	ldr	r3, [pc, #636]	; (8002578 <HAL_RCC_OscConfig+0x608>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4013      	ands	r3, r2
 8002304:	d11a      	bne.n	800233c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002306:	4b9c      	ldr	r3, [pc, #624]	; (8002578 <HAL_RCC_OscConfig+0x608>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4b9b      	ldr	r3, [pc, #620]	; (8002578 <HAL_RCC_OscConfig+0x608>)
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	0049      	lsls	r1, r1, #1
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002314:	f7fe fa6c 	bl	80007f0 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7fe fa67 	bl	80007f0 <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e11c      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002330:	4b91      	ldr	r3, [pc, #580]	; (8002578 <HAL_RCC_OscConfig+0x608>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4013      	ands	r3, r2
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x3e2>
 8002344:	4b8b      	ldr	r3, [pc, #556]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002346:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002348:	4b8a      	ldr	r3, [pc, #552]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 800234a:	2101      	movs	r1, #1
 800234c:	430a      	orrs	r2, r1
 800234e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002350:	e01c      	b.n	800238c <HAL_RCC_OscConfig+0x41c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b05      	cmp	r3, #5
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x404>
 800235a:	4b86      	ldr	r3, [pc, #536]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 800235c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800235e:	4b85      	ldr	r3, [pc, #532]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002360:	2104      	movs	r1, #4
 8002362:	430a      	orrs	r2, r1
 8002364:	65da      	str	r2, [r3, #92]	; 0x5c
 8002366:	4b83      	ldr	r3, [pc, #524]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002368:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800236a:	4b82      	ldr	r3, [pc, #520]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 800236c:	2101      	movs	r1, #1
 800236e:	430a      	orrs	r2, r1
 8002370:	65da      	str	r2, [r3, #92]	; 0x5c
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0x41c>
 8002374:	4b7f      	ldr	r3, [pc, #508]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002376:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002378:	4b7e      	ldr	r3, [pc, #504]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 800237a:	2101      	movs	r1, #1
 800237c:	438a      	bics	r2, r1
 800237e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002380:	4b7c      	ldr	r3, [pc, #496]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002382:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002384:	4b7b      	ldr	r3, [pc, #492]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002386:	2104      	movs	r1, #4
 8002388:	438a      	bics	r2, r1
 800238a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d014      	beq.n	80023be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fa2c 	bl	80007f0 <HAL_GetTick>
 8002398:	0003      	movs	r3, r0
 800239a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239c:	e009      	b.n	80023b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe fa27 	bl	80007f0 <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4a74      	ldr	r2, [pc, #464]	; (800257c <HAL_RCC_OscConfig+0x60c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0db      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b2:	4b70      	ldr	r3, [pc, #448]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2202      	movs	r2, #2
 80023b8:	4013      	ands	r3, r2
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x42e>
 80023bc:	e013      	b.n	80023e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe fa17 	bl	80007f0 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c6:	e009      	b.n	80023dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f7fe fa12 	bl	80007f0 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x60c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e0c6      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023dc:	4b65      	ldr	r3, [pc, #404]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	2202      	movs	r2, #2
 80023e2:	4013      	ands	r3, r2
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80023e6:	231f      	movs	r3, #31
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d105      	bne.n	80023fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80023f0:	4b60      	ldr	r3, [pc, #384]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80023f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023f4:	4b5f      	ldr	r3, [pc, #380]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80023f6:	4962      	ldr	r1, [pc, #392]	; (8002580 <HAL_RCC_OscConfig+0x610>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d100      	bne.n	8002406 <HAL_RCC_OscConfig+0x496>
 8002404:	e0b0      	b.n	8002568 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002406:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2238      	movs	r2, #56	; 0x38
 800240c:	4013      	ands	r3, r2
 800240e:	2b10      	cmp	r3, #16
 8002410:	d100      	bne.n	8002414 <HAL_RCC_OscConfig+0x4a4>
 8002412:	e078      	b.n	8002506 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d153      	bne.n	80024c4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241c:	4b55      	ldr	r3, [pc, #340]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b54      	ldr	r3, [pc, #336]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002422:	4958      	ldr	r1, [pc, #352]	; (8002584 <HAL_RCC_OscConfig+0x614>)
 8002424:	400a      	ands	r2, r1
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe f9e2 	bl	80007f0 <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe f9dd 	bl	80007f0 <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e092      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	4b4b      	ldr	r3, [pc, #300]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	049b      	lsls	r3, r3, #18
 800244c:	4013      	ands	r3, r2
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002450:	4b48      	ldr	r3, [pc, #288]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a4c      	ldr	r2, [pc, #304]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 8002456:	4013      	ands	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	431a      	orrs	r2, r3
 8002478:	4b3e      	ldr	r3, [pc, #248]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 800247a:	430a      	orrs	r2, r1
 800247c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800247e:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b3c      	ldr	r3, [pc, #240]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	0449      	lsls	r1, r1, #17
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800248c:	4b39      	ldr	r3, [pc, #228]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	4b38      	ldr	r3, [pc, #224]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002492:	2180      	movs	r1, #128	; 0x80
 8002494:	0549      	lsls	r1, r1, #21
 8002496:	430a      	orrs	r2, r1
 8002498:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe f9a9 	bl	80007f0 <HAL_GetTick>
 800249e:	0003      	movs	r3, r0
 80024a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe f9a4 	bl	80007f0 <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e059      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b6:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	049b      	lsls	r3, r3, #18
 80024be:	4013      	ands	r3, r2
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x534>
 80024c2:	e051      	b.n	8002568 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c4:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80024ca:	492e      	ldr	r1, [pc, #184]	; (8002584 <HAL_RCC_OscConfig+0x614>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe f98e 	bl	80007f0 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe f989 	bl	80007f0 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e03e      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	049b      	lsls	r3, r3, #18
 80024f4:	4013      	ands	r3, r2
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 80024fe:	4923      	ldr	r1, [pc, #140]	; (800258c <HAL_RCC_OscConfig+0x61c>)
 8002500:	400a      	ands	r2, r1
 8002502:	60da      	str	r2, [r3, #12]
 8002504:	e030      	b.n	8002568 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e02b      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_RCC_OscConfig+0x604>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2203      	movs	r2, #3
 800251c:	401a      	ands	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	429a      	cmp	r2, r3
 8002524:	d11e      	bne.n	8002564 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2270      	movs	r2, #112	; 0x70
 800252a:	401a      	ands	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d117      	bne.n	8002564 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	23fe      	movs	r3, #254	; 0xfe
 8002538:	01db      	lsls	r3, r3, #7
 800253a:	401a      	ands	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d10e      	bne.n	8002564 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	23f8      	movs	r3, #248	; 0xf8
 800254a:	039b      	lsls	r3, r3, #14
 800254c:	401a      	ands	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d106      	bne.n	8002564 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	0f5b      	lsrs	r3, r3, #29
 800255a:	075a      	lsls	r2, r3, #29
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b008      	add	sp, #32
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	40021000 	.word	0x40021000
 8002578:	40007000 	.word	0x40007000
 800257c:	00001388 	.word	0x00001388
 8002580:	efffffff 	.word	0xefffffff
 8002584:	feffffff 	.word	0xfeffffff
 8002588:	1fc1808c 	.word	0x1fc1808c
 800258c:	effefffc 	.word	0xeffefffc

08002590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0e9      	b.n	8002778 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b76      	ldr	r3, [pc, #472]	; (8002780 <HAL_RCC_ClockConfig+0x1f0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2207      	movs	r2, #7
 80025aa:	4013      	ands	r3, r2
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d91e      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2207      	movs	r2, #7
 80025b8:	4393      	bics	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	4b70      	ldr	r3, [pc, #448]	; (8002780 <HAL_RCC_ClockConfig+0x1f0>)
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025c4:	f7fe f914 	bl	80007f0 <HAL_GetTick>
 80025c8:	0003      	movs	r3, r0
 80025ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025cc:	e009      	b.n	80025e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ce:	f7fe f90f 	bl	80007f0 <HAL_GetTick>
 80025d2:	0002      	movs	r2, r0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_RCC_ClockConfig+0x1f4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e0ca      	b.n	8002778 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2207      	movs	r2, #7
 80025e8:	4013      	ands	r3, r2
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1ee      	bne.n	80025ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2202      	movs	r2, #2
 80025f6:	4013      	ands	r3, r2
 80025f8:	d015      	beq.n	8002626 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2204      	movs	r2, #4
 8002600:	4013      	ands	r3, r2
 8002602:	d006      	beq.n	8002612 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002604:	4b60      	ldr	r3, [pc, #384]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 800260a:	21e0      	movs	r1, #224	; 0xe0
 800260c:	01c9      	lsls	r1, r1, #7
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	4a5d      	ldr	r2, [pc, #372]	; (800278c <HAL_RCC_ClockConfig+0x1fc>)
 8002618:	4013      	ands	r3, r2
 800261a:	0019      	movs	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	4b59      	ldr	r3, [pc, #356]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 8002622:	430a      	orrs	r2, r1
 8002624:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2201      	movs	r2, #1
 800262c:	4013      	ands	r3, r2
 800262e:	d057      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d107      	bne.n	8002648 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	029b      	lsls	r3, r3, #10
 8002640:	4013      	ands	r3, r2
 8002642:	d12b      	bne.n	800269c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e097      	b.n	8002778 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d107      	bne.n	8002660 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002650:	4b4d      	ldr	r3, [pc, #308]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	049b      	lsls	r3, r3, #18
 8002658:	4013      	ands	r3, r2
 800265a:	d11f      	bne.n	800269c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e08b      	b.n	8002778 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d107      	bne.n	8002678 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002668:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4013      	ands	r3, r2
 8002672:	d113      	bne.n	800269c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e07f      	b.n	8002778 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d106      	bne.n	800268e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002680:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 8002682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002684:	2202      	movs	r2, #2
 8002686:	4013      	ands	r3, r2
 8002688:	d108      	bne.n	800269c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e074      	b.n	8002778 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268e:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	2202      	movs	r2, #2
 8002694:	4013      	ands	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e06d      	b.n	8002778 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800269c:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2207      	movs	r2, #7
 80026a2:	4393      	bics	r3, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b0:	f7fe f89e 	bl	80007f0 <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b8:	e009      	b.n	80026ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ba:	f7fe f899 	bl	80007f0 <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	4a2f      	ldr	r2, [pc, #188]	; (8002784 <HAL_RCC_ClockConfig+0x1f4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e054      	b.n	8002778 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2238      	movs	r2, #56	; 0x38
 80026d4:	401a      	ands	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1ec      	bne.n	80026ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCC_ClockConfig+0x1f0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2207      	movs	r2, #7
 80026e6:	4013      	ands	r3, r2
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d21e      	bcs.n	800272c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2207      	movs	r2, #7
 80026f4:	4393      	bics	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	4b21      	ldr	r3, [pc, #132]	; (8002780 <HAL_RCC_ClockConfig+0x1f0>)
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002700:	f7fe f876 	bl	80007f0 <HAL_GetTick>
 8002704:	0003      	movs	r3, r0
 8002706:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002708:	e009      	b.n	800271e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270a:	f7fe f871 	bl	80007f0 <HAL_GetTick>
 800270e:	0002      	movs	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <HAL_RCC_ClockConfig+0x1f4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e02c      	b.n	8002778 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800271e:	4b18      	ldr	r3, [pc, #96]	; (8002780 <HAL_RCC_ClockConfig+0x1f0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2207      	movs	r2, #7
 8002724:	4013      	ands	r3, r2
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d1ee      	bne.n	800270a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2204      	movs	r2, #4
 8002732:	4013      	ands	r3, r2
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002736:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4a15      	ldr	r2, [pc, #84]	; (8002790 <HAL_RCC_ClockConfig+0x200>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800274a:	f000 f829 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 800274e:	0001      	movs	r1, r0
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_RCC_ClockConfig+0x1f8>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	220f      	movs	r2, #15
 8002758:	401a      	ands	r2, r3
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_RCC_ClockConfig+0x204>)
 800275c:	0092      	lsls	r2, r2, #2
 800275e:	58d3      	ldr	r3, [r2, r3]
 8002760:	221f      	movs	r2, #31
 8002762:	4013      	ands	r3, r2
 8002764:	000a      	movs	r2, r1
 8002766:	40da      	lsrs	r2, r3
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_ClockConfig+0x208>)
 800276a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_ClockConfig+0x20c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0018      	movs	r0, r3
 8002772:	f7fd ffe1 	bl	8000738 <HAL_InitTick>
 8002776:	0003      	movs	r3, r0
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	b004      	add	sp, #16
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40022000 	.word	0x40022000
 8002784:	00001388 	.word	0x00001388
 8002788:	40021000 	.word	0x40021000
 800278c:	fffff0ff 	.word	0xfffff0ff
 8002790:	ffff8fff 	.word	0xffff8fff
 8002794:	08002914 	.word	0x08002914
 8002798:	20000000 	.word	0x20000000
 800279c:	20000004 	.word	0x20000004

080027a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027a6:	4b3c      	ldr	r3, [pc, #240]	; (8002898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2238      	movs	r2, #56	; 0x38
 80027ac:	4013      	ands	r3, r2
 80027ae:	d10f      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027b0:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0adb      	lsrs	r3, r3, #11
 80027b6:	2207      	movs	r2, #7
 80027b8:	4013      	ands	r3, r2
 80027ba:	2201      	movs	r2, #1
 80027bc:	409a      	lsls	r2, r3
 80027be:	0013      	movs	r3, r2
 80027c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027c2:	6839      	ldr	r1, [r7, #0]
 80027c4:	4835      	ldr	r0, [pc, #212]	; (800289c <HAL_RCC_GetSysClockFreq+0xfc>)
 80027c6:	f7fd fc9b 	bl	8000100 <__udivsi3>
 80027ca:	0003      	movs	r3, r0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	e05d      	b.n	800288c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d0:	4b31      	ldr	r3, [pc, #196]	; (8002898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2238      	movs	r2, #56	; 0x38
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d102      	bne.n	80027e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	e054      	b.n	800288c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2238      	movs	r2, #56	; 0x38
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d138      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2203      	movs	r2, #3
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	2207      	movs	r2, #7
 8002800:	4013      	ands	r3, r2
 8002802:	3301      	adds	r3, #1
 8002804:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d10d      	bne.n	8002828 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	4824      	ldr	r0, [pc, #144]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002810:	f7fd fc76 	bl	8000100 <__udivsi3>
 8002814:	0003      	movs	r3, r0
 8002816:	0019      	movs	r1, r3
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <HAL_RCC_GetSysClockFreq+0xf8>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	227f      	movs	r2, #127	; 0x7f
 8002820:	4013      	ands	r3, r2
 8002822:	434b      	muls	r3, r1
 8002824:	617b      	str	r3, [r7, #20]
        break;
 8002826:	e00d      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	481c      	ldr	r0, [pc, #112]	; (800289c <HAL_RCC_GetSysClockFreq+0xfc>)
 800282c:	f7fd fc68 	bl	8000100 <__udivsi3>
 8002830:	0003      	movs	r3, r0
 8002832:	0019      	movs	r1, r3
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	227f      	movs	r2, #127	; 0x7f
 800283c:	4013      	ands	r3, r2
 800283e:	434b      	muls	r3, r1
 8002840:	617b      	str	r3, [r7, #20]
        break;
 8002842:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0f5b      	lsrs	r3, r3, #29
 800284a:	2207      	movs	r2, #7
 800284c:	4013      	ands	r3, r2
 800284e:	3301      	adds	r3, #1
 8002850:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	6978      	ldr	r0, [r7, #20]
 8002856:	f7fd fc53 	bl	8000100 <__udivsi3>
 800285a:	0003      	movs	r3, r0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e015      	b.n	800288c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2238      	movs	r2, #56	; 0x38
 8002866:	4013      	ands	r3, r2
 8002868:	2b20      	cmp	r3, #32
 800286a:	d103      	bne.n	8002874 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	e00b      	b.n	800288c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2238      	movs	r2, #56	; 0x38
 800287a:	4013      	ands	r3, r2
 800287c:	2b18      	cmp	r3, #24
 800287e:	d103      	bne.n	8002888 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002880:	23fa      	movs	r3, #250	; 0xfa
 8002882:	01db      	lsls	r3, r3, #7
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	e001      	b.n	800288c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800288c:	693b      	ldr	r3, [r7, #16]
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b006      	add	sp, #24
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	40021000 	.word	0x40021000
 800289c:	00f42400 	.word	0x00f42400
 80028a0:	007a1200 	.word	0x007a1200

080028a4 <__libc_init_array>:
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	2600      	movs	r6, #0
 80028a8:	4d0c      	ldr	r5, [pc, #48]	; (80028dc <__libc_init_array+0x38>)
 80028aa:	4c0d      	ldr	r4, [pc, #52]	; (80028e0 <__libc_init_array+0x3c>)
 80028ac:	1b64      	subs	r4, r4, r5
 80028ae:	10a4      	asrs	r4, r4, #2
 80028b0:	42a6      	cmp	r6, r4
 80028b2:	d109      	bne.n	80028c8 <__libc_init_array+0x24>
 80028b4:	2600      	movs	r6, #0
 80028b6:	f000 f821 	bl	80028fc <_init>
 80028ba:	4d0a      	ldr	r5, [pc, #40]	; (80028e4 <__libc_init_array+0x40>)
 80028bc:	4c0a      	ldr	r4, [pc, #40]	; (80028e8 <__libc_init_array+0x44>)
 80028be:	1b64      	subs	r4, r4, r5
 80028c0:	10a4      	asrs	r4, r4, #2
 80028c2:	42a6      	cmp	r6, r4
 80028c4:	d105      	bne.n	80028d2 <__libc_init_array+0x2e>
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
 80028c8:	00b3      	lsls	r3, r6, #2
 80028ca:	58eb      	ldr	r3, [r5, r3]
 80028cc:	4798      	blx	r3
 80028ce:	3601      	adds	r6, #1
 80028d0:	e7ee      	b.n	80028b0 <__libc_init_array+0xc>
 80028d2:	00b3      	lsls	r3, r6, #2
 80028d4:	58eb      	ldr	r3, [r5, r3]
 80028d6:	4798      	blx	r3
 80028d8:	3601      	adds	r6, #1
 80028da:	e7f2      	b.n	80028c2 <__libc_init_array+0x1e>
 80028dc:	08002954 	.word	0x08002954
 80028e0:	08002954 	.word	0x08002954
 80028e4:	08002954 	.word	0x08002954
 80028e8:	08002958 	.word	0x08002958

080028ec <memset>:
 80028ec:	0003      	movs	r3, r0
 80028ee:	1882      	adds	r2, r0, r2
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d100      	bne.n	80028f6 <memset+0xa>
 80028f4:	4770      	bx	lr
 80028f6:	7019      	strb	r1, [r3, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	e7f9      	b.n	80028f0 <memset+0x4>

080028fc <_init>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr

08002908 <_fini>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr


UART_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023bc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002474  08002474  00012474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024fc  080024fc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080024fc  080024fc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024fc  080024fc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024fc  080024fc  000124fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002500  08002500  00012500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000018  0800251c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800251c  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6eb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001955  00000000  00000000  0002a72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0002c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001430a  00000000  00000000  0002cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a31e  00000000  00000000  00041222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fb8e  00000000  00000000  0004b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb0ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019dc  00000000  00000000  000cb120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800245c 	.word	0x0800245c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	0800245c 	.word	0x0800245c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 f992 	bl	8000718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f814 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f8a8 	bl	800054c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fc:	f000 f858 	bl	80004b0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, uart_tx, sizeof(uart_tx), 100);
 8000400:	4905      	ldr	r1, [pc, #20]	; (8000418 <main+0x2c>)
 8000402:	4806      	ldr	r0, [pc, #24]	; (800041c <main+0x30>)
 8000404:	2364      	movs	r3, #100	; 0x64
 8000406:	220c      	movs	r2, #12
 8000408:	f001 fad8 	bl	80019bc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800040c:	23fa      	movs	r3, #250	; 0xfa
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	0018      	movs	r0, r3
 8000412:	f000 fa07 	bl	8000824 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, uart_tx, sizeof(uart_tx), 100);
 8000416:	e7f3      	b.n	8000400 <main+0x14>
 8000418:	20000000 	.word	0x20000000
 800041c:	20000034 	.word	0x20000034

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b093      	sub	sp, #76	; 0x4c
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	2414      	movs	r4, #20
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	2334      	movs	r3, #52	; 0x34
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f002 f80b 	bl	800244c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	0018      	movs	r0, r3
 800043a:	2310      	movs	r3, #16
 800043c:	001a      	movs	r2, r3
 800043e:	2100      	movs	r1, #0
 8000440:	f002 f804 	bl	800244c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	0018      	movs	r0, r3
 800044a:	f000 fc27 	bl	8000c9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2202      	movs	r2, #2
 8000452:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000454:	193b      	adds	r3, r7, r4
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	0052      	lsls	r2, r2, #1
 800045a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2240      	movs	r2, #64	; 0x40
 8000466:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	193b      	adds	r3, r7, r4
 8000470:	0018      	movs	r0, r3
 8000472:	f000 fc5f 	bl	8000d34 <HAL_RCC_OscConfig>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800047a:	f000 f87d 	bl	8000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2207      	movs	r2, #7
 8000482:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2100      	movs	r1, #0
 800049a:	0018      	movs	r0, r3
 800049c:	f000 ff5a 	bl	8001354 <HAL_RCC_ClockConfig>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004a4:	f000 f868 	bl	8000578 <Error_Handler>
  }
}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b013      	add	sp, #76	; 0x4c
 80004ae:	bd90      	pop	{r4, r7, pc}

080004b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b4:	4b23      	ldr	r3, [pc, #140]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004b6:	4a24      	ldr	r2, [pc, #144]	; (8000548 <MX_USART2_UART_Init+0x98>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ba:	4b22      	ldr	r3, [pc, #136]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004bc:	22e1      	movs	r2, #225	; 0xe1
 80004be:	0252      	lsls	r2, r2, #9
 80004c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b20      	ldr	r3, [pc, #128]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_USART2_UART_Init+0x94>)
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fa08 	bl	8001910 <HAL_UART_Init>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000504:	f000 f838 	bl	8000578 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MX_USART2_UART_Init+0x94>)
 800050a:	2100      	movs	r1, #0
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fe99 	bl	8002244 <HAL_UARTEx_SetTxFifoThreshold>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000516:	f000 f82f 	bl	8000578 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <MX_USART2_UART_Init+0x94>)
 800051c:	2100      	movs	r1, #0
 800051e:	0018      	movs	r0, r3
 8000520:	f001 fed0 	bl	80022c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000528:	f000 f826 	bl	8000578 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <MX_USART2_UART_Init+0x94>)
 800052e:	0018      	movs	r0, r3
 8000530:	f001 fe4e 	bl	80021d0 <HAL_UARTEx_DisableFifoMode>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000538:	f000 f81e 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	20000034 	.word	0x20000034
 8000548:	40004400 	.word	0x40004400

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_GPIO_Init+0x28>)
 8000554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_GPIO_Init+0x28>)
 8000558:	2101      	movs	r1, #1
 800055a:	430a      	orrs	r2, r1
 800055c:	635a      	str	r2, [r3, #52]	; 0x34
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <MX_GPIO_Init+0x28>)
 8000560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000562:	2201      	movs	r2, #1
 8000564:	4013      	ands	r3, r2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40021000 	.word	0x40021000

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	e7fe      	b.n	8000580 <Error_Handler+0x8>
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_MspInit+0x44>)
 800058c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <HAL_MspInit+0x44>)
 8000590:	2101      	movs	r1, #1
 8000592:	430a      	orrs	r2, r1
 8000594:	641a      	str	r2, [r3, #64]	; 0x40
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_MspInit+0x44>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	2201      	movs	r2, #1
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_MspInit+0x44>)
 80005a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_MspInit+0x44>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0549      	lsls	r1, r1, #21
 80005ac:	430a      	orrs	r2, r1
 80005ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_MspInit+0x44>)
 80005b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	055b      	lsls	r3, r3, #21
 80005b8:	4013      	ands	r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b002      	add	sp, #8
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b091      	sub	sp, #68	; 0x44
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	232c      	movs	r3, #44	; 0x2c
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	0018      	movs	r0, r3
 80005da:	2314      	movs	r3, #20
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f001 ff34 	bl	800244c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e4:	2410      	movs	r4, #16
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	0018      	movs	r0, r3
 80005ea:	231c      	movs	r3, #28
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f001 ff2c 	bl	800244c <memset>
  if(huart->Instance==USART2)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a22      	ldr	r2, [pc, #136]	; (8000684 <HAL_UART_MspInit+0xb8>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d13e      	bne.n	800067c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	2202      	movs	r2, #2
 8000602:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	193b      	adds	r3, r7, r4
 800060c:	0018      	movs	r0, r3
 800060e:	f001 f84b 	bl	80016a8 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000616:	f7ff ffaf 	bl	8000578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <HAL_UART_MspInit+0xbc>)
 800061c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <HAL_UART_MspInit+0xbc>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0289      	lsls	r1, r1, #10
 8000624:	430a      	orrs	r2, r1
 8000626:	63da      	str	r2, [r3, #60]	; 0x3c
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_UART_MspInit+0xbc>)
 800062a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	029b      	lsls	r3, r3, #10
 8000630:	4013      	ands	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_UART_MspInit+0xbc>)
 8000638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <HAL_UART_MspInit+0xbc>)
 800063c:	2101      	movs	r1, #1
 800063e:	430a      	orrs	r2, r1
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <HAL_UART_MspInit+0xbc>)
 8000644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000646:	2201      	movs	r2, #1
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800064e:	212c      	movs	r1, #44	; 0x2c
 8000650:	187b      	adds	r3, r7, r1
 8000652:	220c      	movs	r2, #12
 8000654:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2202      	movs	r2, #2
 800065a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2201      	movs	r2, #1
 800066c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	187a      	adds	r2, r7, r1
 8000670:	23a0      	movs	r3, #160	; 0xa0
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 f9ac 	bl	80009d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b011      	add	sp, #68	; 0x44
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	40004400 	.word	0x40004400
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b0:	f000 f89c 	bl	80007ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c8:	f7ff fff7 	bl	80006ba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490d      	ldr	r1, [pc, #52]	; (8000704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0a      	ldr	r4, [pc, #40]	; (8000710 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f2:	f001 fe87 	bl	8002404 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006f6:	f7ff fe79 	bl	80003ec <main>

080006fa <LoopForever>:

LoopForever:
  b LoopForever
 80006fa:	e7fe      	b.n	80006fa <LoopForever>
  ldr   r0, =_estack
 80006fc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000708:	08002504 	.word	0x08002504
  ldr r2, =_sbss
 800070c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000710:	200000cc 	.word	0x200000cc

08000714 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_IRQHandler>
	...

08000718 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_Init+0x3c>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_Init+0x3c>)
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	0049      	lsls	r1, r1, #1
 800072e:	430a      	orrs	r2, r1
 8000730:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f810 	bl	8000758 <HAL_InitTick>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d003      	beq.n	8000744 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	e001      	b.n	8000748 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000744:	f7ff ff1e 	bl	8000584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
}
 800074c:	0018      	movs	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	b002      	add	sp, #8
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40022000 	.word	0x40022000

08000758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000760:	230f      	movs	r3, #15
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <HAL_InitTick+0x88>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d02b      	beq.n	80007c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <HAL_InitTick+0x8c>)
 8000772:	681c      	ldr	r4, [r3, #0]
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <HAL_InitTick+0x88>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	0019      	movs	r1, r3
 800077a:	23fa      	movs	r3, #250	; 0xfa
 800077c:	0098      	lsls	r0, r3, #2
 800077e:	f7ff fcbf 	bl	8000100 <__udivsi3>
 8000782:	0003      	movs	r3, r0
 8000784:	0019      	movs	r1, r3
 8000786:	0020      	movs	r0, r4
 8000788:	f7ff fcba 	bl	8000100 <__udivsi3>
 800078c:	0003      	movs	r3, r0
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f913 	bl	80009ba <HAL_SYSTICK_Config>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d112      	bne.n	80007be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d80a      	bhi.n	80007b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	2301      	movs	r3, #1
 80007a2:	425b      	negs	r3, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 f8f2 	bl	8000990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <HAL_InitTick+0x90>)
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	e00d      	b.n	80007d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007b4:	230f      	movs	r3, #15
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	e008      	b.n	80007d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007be:	230f      	movs	r3, #15
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e003      	b.n	80007d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007c8:	230f      	movs	r3, #15
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007d0:	230f      	movs	r3, #15
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	781b      	ldrb	r3, [r3, #0]
}
 80007d6:	0018      	movs	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	b005      	add	sp, #20
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000014 	.word	0x20000014
 80007e4:	2000000c 	.word	0x2000000c
 80007e8:	20000010 	.word	0x20000010

080007ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_IncTick+0x1c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	001a      	movs	r2, r3
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x20>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	18d2      	adds	r2, r2, r3
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <HAL_IncTick+0x20>)
 80007fe:	601a      	str	r2, [r3, #0]
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	20000014 	.word	0x20000014
 800080c:	200000c8 	.word	0x200000c8

08000810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;
 8000814:	4b02      	ldr	r3, [pc, #8]	; (8000820 <HAL_GetTick+0x10>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	200000c8 	.word	0x200000c8

08000824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800082c:	f7ff fff0 	bl	8000810 <HAL_GetTick>
 8000830:	0003      	movs	r3, r0
 8000832:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	3301      	adds	r3, #1
 800083c:	d005      	beq.n	800084a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <HAL_Delay+0x44>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	001a      	movs	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	189b      	adds	r3, r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	f7ff ffe0 	bl	8000810 <HAL_GetTick>
 8000850:	0002      	movs	r2, r0
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	429a      	cmp	r2, r3
 800085a:	d8f7      	bhi.n	800084c <HAL_Delay+0x28>
  {
  }
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b004      	add	sp, #16
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	20000014 	.word	0x20000014

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	0002      	movs	r2, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b7f      	cmp	r3, #127	; 0x7f
 8000880:	d828      	bhi.n	80008d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <__NVIC_SetPriority+0xd4>)
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	33c0      	adds	r3, #192	; 0xc0
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	589b      	ldr	r3, [r3, r2]
 8000892:	1dfa      	adds	r2, r7, #7
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	0011      	movs	r1, r2
 8000898:	2203      	movs	r2, #3
 800089a:	400a      	ands	r2, r1
 800089c:	00d2      	lsls	r2, r2, #3
 800089e:	21ff      	movs	r1, #255	; 0xff
 80008a0:	4091      	lsls	r1, r2
 80008a2:	000a      	movs	r2, r1
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	401a      	ands	r2, r3
 80008a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	019b      	lsls	r3, r3, #6
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	401a      	ands	r2, r3
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0018      	movs	r0, r3
 80008b8:	2303      	movs	r3, #3
 80008ba:	4003      	ands	r3, r0
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	481f      	ldr	r0, [pc, #124]	; (8000940 <__NVIC_SetPriority+0xd4>)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	089b      	lsrs	r3, r3, #2
 80008ca:	430a      	orrs	r2, r1
 80008cc:	33c0      	adds	r3, #192	; 0xc0
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008d2:	e031      	b.n	8000938 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <__NVIC_SetPriority+0xd8>)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	0019      	movs	r1, r3
 80008dc:	230f      	movs	r3, #15
 80008de:	400b      	ands	r3, r1
 80008e0:	3b08      	subs	r3, #8
 80008e2:	089b      	lsrs	r3, r3, #2
 80008e4:	3306      	adds	r3, #6
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	18d3      	adds	r3, r2, r3
 80008ea:	3304      	adds	r3, #4
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	1dfa      	adds	r2, r7, #7
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	0011      	movs	r1, r2
 80008f4:	2203      	movs	r2, #3
 80008f6:	400a      	ands	r2, r1
 80008f8:	00d2      	lsls	r2, r2, #3
 80008fa:	21ff      	movs	r1, #255	; 0xff
 80008fc:	4091      	lsls	r1, r2
 80008fe:	000a      	movs	r2, r1
 8000900:	43d2      	mvns	r2, r2
 8000902:	401a      	ands	r2, r3
 8000904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	019b      	lsls	r3, r3, #6
 800090a:	22ff      	movs	r2, #255	; 0xff
 800090c:	401a      	ands	r2, r3
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	0018      	movs	r0, r3
 8000914:	2303      	movs	r3, #3
 8000916:	4003      	ands	r3, r0
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <__NVIC_SetPriority+0xd8>)
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	001c      	movs	r4, r3
 8000924:	230f      	movs	r3, #15
 8000926:	4023      	ands	r3, r4
 8000928:	3b08      	subs	r3, #8
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	430a      	orrs	r2, r1
 800092e:	3306      	adds	r3, #6
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	18c3      	adds	r3, r0, r3
 8000934:	3304      	adds	r3, #4
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b003      	add	sp, #12
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	045b      	lsls	r3, r3, #17
 8000958:	429a      	cmp	r2, r3
 800095a:	d301      	bcc.n	8000960 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095c:	2301      	movs	r3, #1
 800095e:	e010      	b.n	8000982 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <SysTick_Config+0x44>)
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	3a01      	subs	r2, #1
 8000966:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000968:	2301      	movs	r3, #1
 800096a:	425b      	negs	r3, r3
 800096c:	2103      	movs	r1, #3
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ff7c 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x44>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	210f      	movs	r1, #15
 800099c:	187b      	adds	r3, r7, r1
 800099e:	1c02      	adds	r2, r0, #0
 80009a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff ff5d 	bl	800086c <__NVIC_SetPriority>
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b004      	add	sp, #16
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff ffbf 	bl	8000948 <SysTick_Config>
 80009ca:	0003      	movs	r3, r0
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e2:	e147      	b.n	8000c74 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	4091      	lsls	r1, r2
 80009ee:	000a      	movs	r2, r1
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d100      	bne.n	80009fc <HAL_GPIO_Init+0x28>
 80009fa:	e138      	b.n	8000c6e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2203      	movs	r2, #3
 8000a02:	4013      	ands	r3, r2
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d005      	beq.n	8000a14 <HAL_GPIO_Init+0x40>
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	4013      	ands	r3, r2
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d130      	bne.n	8000a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	409a      	lsls	r2, r3
 8000a22:	0013      	movs	r3, r2
 8000a24:	43da      	mvns	r2, r3
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68da      	ldr	r2, [r3, #12]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	409a      	lsls	r2, r3
 8000a36:	0013      	movs	r3, r2
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	0013      	movs	r3, r2
 8000a52:	43da      	mvns	r2, r3
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	091b      	lsrs	r3, r3, #4
 8000a60:	2201      	movs	r2, #1
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d017      	beq.n	8000ab2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	0013      	movs	r3, r2
 8000a92:	43da      	mvns	r2, r3
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d123      	bne.n	8000b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	08da      	lsrs	r2, r3, #3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	58d3      	ldr	r3, [r2, r3]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	2207      	movs	r2, #7
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	0013      	movs	r3, r2
 8000ada:	43da      	mvns	r2, r3
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	691a      	ldr	r2, [r3, #16]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	2107      	movs	r1, #7
 8000aea:	400b      	ands	r3, r1
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	08da      	lsrs	r2, r3, #3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3208      	adds	r2, #8
 8000b00:	0092      	lsls	r2, r2, #2
 8000b02:	6939      	ldr	r1, [r7, #16]
 8000b04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2203      	movs	r2, #3
 8000b12:	409a      	lsls	r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	43da      	mvns	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2203      	movs	r2, #3
 8000b24:	401a      	ands	r2, r3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	23c0      	movs	r3, #192	; 0xc0
 8000b40:	029b      	lsls	r3, r3, #10
 8000b42:	4013      	ands	r3, r2
 8000b44:	d100      	bne.n	8000b48 <HAL_GPIO_Init+0x174>
 8000b46:	e092      	b.n	8000c6e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000b48:	4a50      	ldr	r2, [pc, #320]	; (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	3318      	adds	r3, #24
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	589b      	ldr	r3, [r3, r2]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	2203      	movs	r2, #3
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	220f      	movs	r2, #15
 8000b60:	409a      	lsls	r2, r3
 8000b62:	0013      	movs	r3, r2
 8000b64:	43da      	mvns	r2, r3
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	23a0      	movs	r3, #160	; 0xa0
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d013      	beq.n	8000b9e <HAL_GPIO_Init+0x1ca>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a45      	ldr	r2, [pc, #276]	; (8000c90 <HAL_GPIO_Init+0x2bc>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d00d      	beq.n	8000b9a <HAL_GPIO_Init+0x1c6>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a44      	ldr	r2, [pc, #272]	; (8000c94 <HAL_GPIO_Init+0x2c0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d007      	beq.n	8000b96 <HAL_GPIO_Init+0x1c2>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a43      	ldr	r2, [pc, #268]	; (8000c98 <HAL_GPIO_Init+0x2c4>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d101      	bne.n	8000b92 <HAL_GPIO_Init+0x1be>
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e006      	b.n	8000ba0 <HAL_GPIO_Init+0x1cc>
 8000b92:	2305      	movs	r3, #5
 8000b94:	e004      	b.n	8000ba0 <HAL_GPIO_Init+0x1cc>
 8000b96:	2302      	movs	r3, #2
 8000b98:	e002      	b.n	8000ba0 <HAL_GPIO_Init+0x1cc>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <HAL_GPIO_Init+0x1cc>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	00d2      	lsls	r2, r2, #3
 8000ba8:	4093      	lsls	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000bb0:	4936      	ldr	r1, [pc, #216]	; (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3318      	adds	r3, #24
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	035b      	lsls	r3, r3, #13
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43da      	mvns	r2, r3
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	039b      	lsls	r3, r3, #14
 8000c00:	4013      	ands	r3, r2
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c12:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000c14:	2384      	movs	r3, #132	; 0x84
 8000c16:	58d3      	ldr	r3, [r2, r3]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43da      	mvns	r2, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	029b      	lsls	r3, r3, #10
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c38:	4914      	ldr	r1, [pc, #80]	; (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000c3a:	2284      	movs	r2, #132	; 0x84
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	58d3      	ldr	r3, [r2, r3]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	025b      	lsls	r3, r3, #9
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c66:	4909      	ldr	r1, [pc, #36]	; (8000c8c <HAL_GPIO_Init+0x2b8>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	40da      	lsrs	r2, r3
 8000c7c:	1e13      	subs	r3, r2, #0
 8000c7e:	d000      	beq.n	8000c82 <HAL_GPIO_Init+0x2ae>
 8000c80:	e6b0      	b.n	80009e4 <HAL_GPIO_Init+0x10>
  }
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b006      	add	sp, #24
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021800 	.word	0x40021800
 8000c90:	50000400 	.word	0x50000400
 8000c94:	50000800 	.word	0x50000800
 8000c98:	50000c00 	.word	0x50000c00

08000c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	0019      	movs	r1, r3
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d11f      	bne.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	189b      	adds	r3, r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4912      	ldr	r1, [pc, #72]	; (8000d18 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff fa16 	bl	8000100 <__udivsi3>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cda:	e008      	b.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e001      	b.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e009      	b.n	8000d02 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000cf0:	695a      	ldr	r2, [r3, #20]
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d0ed      	beq.n	8000cdc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	0018      	movs	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	40007000 	.word	0x40007000
 8000d10:	fffff9ff 	.word	0xfffff9ff
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	000f4240 	.word	0x000f4240

08000d1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	23e0      	movs	r3, #224	; 0xe0
 8000d26:	01db      	lsls	r3, r3, #7
 8000d28:	4013      	ands	r3, r2
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e2f3      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d100      	bne.n	8000d52 <HAL_RCC_OscConfig+0x1e>
 8000d50:	e07c      	b.n	8000e4c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d52:	4bc3      	ldr	r3, [pc, #780]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2238      	movs	r2, #56	; 0x38
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d5c:	4bc0      	ldr	r3, [pc, #768]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	2203      	movs	r2, #3
 8000d62:	4013      	ands	r3, r2
 8000d64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	2b10      	cmp	r3, #16
 8000d6a:	d102      	bne.n	8000d72 <HAL_RCC_OscConfig+0x3e>
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d002      	beq.n	8000d78 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	2b08      	cmp	r3, #8
 8000d76:	d10b      	bne.n	8000d90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d78:	4bb9      	ldr	r3, [pc, #740]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	029b      	lsls	r3, r3, #10
 8000d80:	4013      	ands	r3, r2
 8000d82:	d062      	beq.n	8000e4a <HAL_RCC_OscConfig+0x116>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d15e      	bne.n	8000e4a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e2ce      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	025b      	lsls	r3, r3, #9
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d107      	bne.n	8000dac <HAL_RCC_OscConfig+0x78>
 8000d9c:	4bb0      	ldr	r3, [pc, #704]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4baf      	ldr	r3, [pc, #700]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	0249      	lsls	r1, r1, #9
 8000da6:	430a      	orrs	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	e020      	b.n	8000dee <HAL_RCC_OscConfig+0xba>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	23a0      	movs	r3, #160	; 0xa0
 8000db2:	02db      	lsls	r3, r3, #11
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d10e      	bne.n	8000dd6 <HAL_RCC_OscConfig+0xa2>
 8000db8:	4ba9      	ldr	r3, [pc, #676]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4ba8      	ldr	r3, [pc, #672]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	02c9      	lsls	r1, r1, #11
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	4ba6      	ldr	r3, [pc, #664]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4ba5      	ldr	r3, [pc, #660]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	0249      	lsls	r1, r1, #9
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e00b      	b.n	8000dee <HAL_RCC_OscConfig+0xba>
 8000dd6:	4ba2      	ldr	r3, [pc, #648]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4ba1      	ldr	r3, [pc, #644]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000ddc:	49a1      	ldr	r1, [pc, #644]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000dde:	400a      	ands	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	4b9f      	ldr	r3, [pc, #636]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4b9e      	ldr	r3, [pc, #632]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000de8:	499f      	ldr	r1, [pc, #636]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000dea:	400a      	ands	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d014      	beq.n	8000e20 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df6:	f7ff fd0b 	bl	8000810 <HAL_GetTick>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e00:	f7ff fd06 	bl	8000810 <HAL_GetTick>
 8000e04:	0002      	movs	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b64      	cmp	r3, #100	; 0x64
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e28d      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e12:	4b93      	ldr	r3, [pc, #588]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	029b      	lsls	r3, r3, #10
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0xcc>
 8000e1e:	e015      	b.n	8000e4c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e20:	f7ff fcf6 	bl	8000810 <HAL_GetTick>
 8000e24:	0003      	movs	r3, r0
 8000e26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e28:	e008      	b.n	8000e3c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fcf1 	bl	8000810 <HAL_GetTick>
 8000e2e:	0002      	movs	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b64      	cmp	r3, #100	; 0x64
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e278      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e3c:	4b88      	ldr	r3, [pc, #544]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	029b      	lsls	r3, r3, #10
 8000e44:	4013      	ands	r3, r2
 8000e46:	d1f0      	bne.n	8000e2a <HAL_RCC_OscConfig+0xf6>
 8000e48:	e000      	b.n	8000e4c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2202      	movs	r2, #2
 8000e52:	4013      	ands	r3, r2
 8000e54:	d100      	bne.n	8000e58 <HAL_RCC_OscConfig+0x124>
 8000e56:	e099      	b.n	8000f8c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e58:	4b81      	ldr	r3, [pc, #516]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2238      	movs	r2, #56	; 0x38
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e62:	4b7f      	ldr	r3, [pc, #508]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	2203      	movs	r2, #3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2b10      	cmp	r3, #16
 8000e70:	d102      	bne.n	8000e78 <HAL_RCC_OscConfig+0x144>
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d002      	beq.n	8000e7e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d135      	bne.n	8000eea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e7e:	4b78      	ldr	r3, [pc, #480]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4013      	ands	r3, r2
 8000e88:	d005      	beq.n	8000e96 <HAL_RCC_OscConfig+0x162>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e24b      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e96:	4b72      	ldr	r3, [pc, #456]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	4a74      	ldr	r2, [pc, #464]	; (800106c <HAL_RCC_OscConfig+0x338>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	0019      	movs	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	021a      	lsls	r2, r3, #8
 8000ea6:	4b6e      	ldr	r3, [pc, #440]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d112      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000eb2:	4b6b      	ldr	r3, [pc, #428]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a6e      	ldr	r2, [pc, #440]	; (8001070 <HAL_RCC_OscConfig+0x33c>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	0019      	movs	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	4b67      	ldr	r3, [pc, #412]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000ec6:	4b66      	ldr	r3, [pc, #408]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	0adb      	lsrs	r3, r3, #11
 8000ecc:	2207      	movs	r2, #7
 8000ece:	4013      	ands	r3, r2
 8000ed0:	4a68      	ldr	r2, [pc, #416]	; (8001074 <HAL_RCC_OscConfig+0x340>)
 8000ed2:	40da      	lsrs	r2, r3
 8000ed4:	4b68      	ldr	r3, [pc, #416]	; (8001078 <HAL_RCC_OscConfig+0x344>)
 8000ed6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ed8:	4b68      	ldr	r3, [pc, #416]	; (800107c <HAL_RCC_OscConfig+0x348>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff fc3b 	bl	8000758 <HAL_InitTick>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d051      	beq.n	8000f8a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e221      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d030      	beq.n	8000f54 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ef2:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a5e      	ldr	r2, [pc, #376]	; (8001070 <HAL_RCC_OscConfig+0x33c>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	0019      	movs	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	4b57      	ldr	r3, [pc, #348]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000f06:	4b56      	ldr	r3, [pc, #344]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b55      	ldr	r3, [pc, #340]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	0049      	lsls	r1, r1, #1
 8000f10:	430a      	orrs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f14:	f7ff fc7c 	bl	8000810 <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f1e:	f7ff fc77 	bl	8000810 <HAL_GetTick>
 8000f22:	0002      	movs	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e1fe      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f30:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d0f0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3c:	4b48      	ldr	r3, [pc, #288]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	4a4a      	ldr	r2, [pc, #296]	; (800106c <HAL_RCC_OscConfig+0x338>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	0019      	movs	r1, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	021a      	lsls	r2, r3, #8
 8000f4c:	4b44      	ldr	r3, [pc, #272]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	e01b      	b.n	8000f8c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000f54:	4b42      	ldr	r3, [pc, #264]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b41      	ldr	r3, [pc, #260]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	4949      	ldr	r1, [pc, #292]	; (8001080 <HAL_RCC_OscConfig+0x34c>)
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f60:	f7ff fc56 	bl	8000810 <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f6a:	f7ff fc51 	bl	8000810 <HAL_GetTick>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e1d8      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f7c:	4b38      	ldr	r3, [pc, #224]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	4013      	ands	r3, r2
 8000f86:	d1f0      	bne.n	8000f6a <HAL_RCC_OscConfig+0x236>
 8000f88:	e000      	b.n	8000f8c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2208      	movs	r2, #8
 8000f92:	4013      	ands	r3, r2
 8000f94:	d047      	beq.n	8001026 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f96:	4b32      	ldr	r3, [pc, #200]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2238      	movs	r2, #56	; 0x38
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b18      	cmp	r3, #24
 8000fa0:	d10a      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d03c      	beq.n	8001026 <HAL_RCC_OscConfig+0x2f2>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d138      	bne.n	8001026 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e1ba      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d019      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fc20 	bl	8000810 <HAL_GetTick>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fc1b 	bl	8000810 <HAL_GetTick>
 8000fda:	0002      	movs	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e1a2      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fec:	2202      	movs	r2, #2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d0f1      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x2a2>
 8000ff2:	e018      	b.n	8001026 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000ff6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fc06 	bl	8000810 <HAL_GetTick>
 8001004:	0003      	movs	r3, r0
 8001006:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100a:	f7ff fc01 	bl	8000810 <HAL_GetTick>
 800100e:	0002      	movs	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e188      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	2202      	movs	r2, #2
 8001022:	4013      	ands	r3, r2
 8001024:	d1f1      	bne.n	800100a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2204      	movs	r2, #4
 800102c:	4013      	ands	r3, r2
 800102e:	d100      	bne.n	8001032 <HAL_RCC_OscConfig+0x2fe>
 8001030:	e0c6      	b.n	80011c0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001032:	231f      	movs	r3, #31
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2238      	movs	r2, #56	; 0x38
 8001040:	4013      	ands	r3, r2
 8001042:	2b20      	cmp	r3, #32
 8001044:	d11e      	bne.n	8001084 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_RCC_OscConfig+0x32c>)
 8001048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800104a:	2202      	movs	r2, #2
 800104c:	4013      	ands	r3, r2
 800104e:	d100      	bne.n	8001052 <HAL_RCC_OscConfig+0x31e>
 8001050:	e0b6      	b.n	80011c0 <HAL_RCC_OscConfig+0x48c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d000      	beq.n	800105c <HAL_RCC_OscConfig+0x328>
 800105a:	e0b1      	b.n	80011c0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e166      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
 8001060:	40021000 	.word	0x40021000
 8001064:	fffeffff 	.word	0xfffeffff
 8001068:	fffbffff 	.word	0xfffbffff
 800106c:	ffff80ff 	.word	0xffff80ff
 8001070:	ffffc7ff 	.word	0xffffc7ff
 8001074:	00f42400 	.word	0x00f42400
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000010 	.word	0x20000010
 8001080:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001084:	4bac      	ldr	r3, [pc, #688]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 8001086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	055b      	lsls	r3, r3, #21
 800108c:	4013      	ands	r3, r2
 800108e:	d101      	bne.n	8001094 <HAL_RCC_OscConfig+0x360>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <HAL_RCC_OscConfig+0x362>
 8001094:	2300      	movs	r3, #0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d011      	beq.n	80010be <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4ba7      	ldr	r3, [pc, #668]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800109c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800109e:	4ba6      	ldr	r3, [pc, #664]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	0549      	lsls	r1, r1, #21
 80010a4:	430a      	orrs	r2, r1
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80010a8:	4ba3      	ldr	r3, [pc, #652]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80010aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	055b      	lsls	r3, r3, #21
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80010b6:	231f      	movs	r3, #31
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010be:	4b9f      	ldr	r3, [pc, #636]	; (800133c <HAL_RCC_OscConfig+0x608>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4013      	ands	r3, r2
 80010c8:	d11a      	bne.n	8001100 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ca:	4b9c      	ldr	r3, [pc, #624]	; (800133c <HAL_RCC_OscConfig+0x608>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b9b      	ldr	r3, [pc, #620]	; (800133c <HAL_RCC_OscConfig+0x608>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0049      	lsls	r1, r1, #1
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fb9a 	bl	8000810 <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e2:	f7ff fb95 	bl	8000810 <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e11c      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f4:	4b91      	ldr	r3, [pc, #580]	; (800133c <HAL_RCC_OscConfig+0x608>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4013      	ands	r3, r2
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d106      	bne.n	8001116 <HAL_RCC_OscConfig+0x3e2>
 8001108:	4b8b      	ldr	r3, [pc, #556]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800110a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800110c:	4b8a      	ldr	r3, [pc, #552]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800110e:	2101      	movs	r1, #1
 8001110:	430a      	orrs	r2, r1
 8001112:	65da      	str	r2, [r3, #92]	; 0x5c
 8001114:	e01c      	b.n	8001150 <HAL_RCC_OscConfig+0x41c>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b05      	cmp	r3, #5
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x404>
 800111e:	4b86      	ldr	r3, [pc, #536]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 8001120:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001122:	4b85      	ldr	r3, [pc, #532]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 8001124:	2104      	movs	r1, #4
 8001126:	430a      	orrs	r2, r1
 8001128:	65da      	str	r2, [r3, #92]	; 0x5c
 800112a:	4b83      	ldr	r3, [pc, #524]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800112c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800112e:	4b82      	ldr	r3, [pc, #520]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 8001130:	2101      	movs	r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	65da      	str	r2, [r3, #92]	; 0x5c
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0x41c>
 8001138:	4b7f      	ldr	r3, [pc, #508]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800113a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800113c:	4b7e      	ldr	r3, [pc, #504]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800113e:	2101      	movs	r1, #1
 8001140:	438a      	bics	r2, r1
 8001142:	65da      	str	r2, [r3, #92]	; 0x5c
 8001144:	4b7c      	ldr	r3, [pc, #496]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 8001146:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001148:	4b7b      	ldr	r3, [pc, #492]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800114a:	2104      	movs	r1, #4
 800114c:	438a      	bics	r2, r1
 800114e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d014      	beq.n	8001182 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fb5a 	bl	8000810 <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001160:	e009      	b.n	8001176 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff fb55 	bl	8000810 <HAL_GetTick>
 8001166:	0002      	movs	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	4a74      	ldr	r2, [pc, #464]	; (8001340 <HAL_RCC_OscConfig+0x60c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e0db      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001176:	4b70      	ldr	r3, [pc, #448]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 8001178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117a:	2202      	movs	r2, #2
 800117c:	4013      	ands	r3, r2
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x42e>
 8001180:	e013      	b.n	80011aa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff fb45 	bl	8000810 <HAL_GetTick>
 8001186:	0003      	movs	r3, r0
 8001188:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800118a:	e009      	b.n	80011a0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118c:	f7ff fb40 	bl	8000810 <HAL_GetTick>
 8001190:	0002      	movs	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	4a6a      	ldr	r2, [pc, #424]	; (8001340 <HAL_RCC_OscConfig+0x60c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e0c6      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a0:	4b65      	ldr	r3, [pc, #404]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	2202      	movs	r2, #2
 80011a6:	4013      	ands	r3, r2
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80011aa:	231f      	movs	r3, #31
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80011b4:	4b60      	ldr	r3, [pc, #384]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80011b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011b8:	4b5f      	ldr	r3, [pc, #380]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80011ba:	4962      	ldr	r1, [pc, #392]	; (8001344 <HAL_RCC_OscConfig+0x610>)
 80011bc:	400a      	ands	r2, r1
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d100      	bne.n	80011ca <HAL_RCC_OscConfig+0x496>
 80011c8:	e0b0      	b.n	800132c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ca:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2238      	movs	r2, #56	; 0x38
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b10      	cmp	r3, #16
 80011d4:	d100      	bne.n	80011d8 <HAL_RCC_OscConfig+0x4a4>
 80011d6:	e078      	b.n	80012ca <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d153      	bne.n	8001288 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e0:	4b55      	ldr	r3, [pc, #340]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b54      	ldr	r3, [pc, #336]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80011e6:	4958      	ldr	r1, [pc, #352]	; (8001348 <HAL_RCC_OscConfig+0x614>)
 80011e8:	400a      	ands	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ec:	f7ff fb10 	bl	8000810 <HAL_GetTick>
 80011f0:	0003      	movs	r3, r0
 80011f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f6:	f7ff fb0b 	bl	8000810 <HAL_GetTick>
 80011fa:	0002      	movs	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e092      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	049b      	lsls	r3, r3, #18
 8001210:	4013      	ands	r3, r2
 8001212:	d1f0      	bne.n	80011f6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001214:	4b48      	ldr	r3, [pc, #288]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	4a4c      	ldr	r2, [pc, #304]	; (800134c <HAL_RCC_OscConfig+0x618>)
 800121a:	4013      	ands	r3, r2
 800121c:	0019      	movs	r1, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1a      	ldr	r2, [r3, #32]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	431a      	orrs	r2, r3
 800123c:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800123e:	430a      	orrs	r2, r1
 8001240:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001242:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	0449      	lsls	r1, r1, #17
 800124c:	430a      	orrs	r2, r1
 800124e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001250:	4b39      	ldr	r3, [pc, #228]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	0549      	lsls	r1, r1, #21
 800125a:	430a      	orrs	r2, r1
 800125c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fad7 	bl	8000810 <HAL_GetTick>
 8001262:	0003      	movs	r3, r0
 8001264:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001268:	f7ff fad2 	bl	8000810 <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e059      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	049b      	lsls	r3, r3, #18
 8001282:	4013      	ands	r3, r2
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x534>
 8001286:	e051      	b.n	800132c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 800128e:	492e      	ldr	r1, [pc, #184]	; (8001348 <HAL_RCC_OscConfig+0x614>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff fabc 	bl	8000810 <HAL_GetTick>
 8001298:	0003      	movs	r3, r0
 800129a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff fab7 	bl	8000810 <HAL_GetTick>
 80012a2:	0002      	movs	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e03e      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	049b      	lsls	r3, r3, #18
 80012b8:	4013      	ands	r3, r2
 80012ba:	d1f0      	bne.n	800129e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80012c2:	4923      	ldr	r1, [pc, #140]	; (8001350 <HAL_RCC_OscConfig+0x61c>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	e030      	b.n	800132c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e02b      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_RCC_OscConfig+0x604>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2203      	movs	r2, #3
 80012e0:	401a      	ands	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d11e      	bne.n	8001328 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2270      	movs	r2, #112	; 0x70
 80012ee:	401a      	ands	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d117      	bne.n	8001328 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	23fe      	movs	r3, #254	; 0xfe
 80012fc:	01db      	lsls	r3, r3, #7
 80012fe:	401a      	ands	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001306:	429a      	cmp	r2, r3
 8001308:	d10e      	bne.n	8001328 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	23f8      	movs	r3, #248	; 0xf8
 800130e:	039b      	lsls	r3, r3, #14
 8001310:	401a      	ands	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001316:	429a      	cmp	r2, r3
 8001318:	d106      	bne.n	8001328 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	0f5b      	lsrs	r3, r3, #29
 800131e:	075a      	lsls	r2, r3, #29
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001324:	429a      	cmp	r2, r3
 8001326:	d001      	beq.n	800132c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b008      	add	sp, #32
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	40021000 	.word	0x40021000
 800133c:	40007000 	.word	0x40007000
 8001340:	00001388 	.word	0x00001388
 8001344:	efffffff 	.word	0xefffffff
 8001348:	feffffff 	.word	0xfeffffff
 800134c:	1fc1808c 	.word	0x1fc1808c
 8001350:	effefffc 	.word	0xeffefffc

08001354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0e9      	b.n	800153c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001368:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2207      	movs	r2, #7
 800136e:	4013      	ands	r3, r2
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d91e      	bls.n	80013b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b73      	ldr	r3, [pc, #460]	; (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2207      	movs	r2, #7
 800137c:	4393      	bics	r3, r2
 800137e:	0019      	movs	r1, r3
 8001380:	4b70      	ldr	r3, [pc, #448]	; (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001388:	f7ff fa42 	bl	8000810 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001390:	e009      	b.n	80013a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001392:	f7ff fa3d 	bl	8000810 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	4a6a      	ldr	r2, [pc, #424]	; (8001548 <HAL_RCC_ClockConfig+0x1f4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e0ca      	b.n	800153c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013a6:	4b67      	ldr	r3, [pc, #412]	; (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2207      	movs	r2, #7
 80013ac:	4013      	ands	r3, r2
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d1ee      	bne.n	8001392 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2202      	movs	r2, #2
 80013ba:	4013      	ands	r3, r2
 80013bc:	d015      	beq.n	80013ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2204      	movs	r2, #4
 80013c4:	4013      	ands	r3, r2
 80013c6:	d006      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013c8:	4b60      	ldr	r3, [pc, #384]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	4b5f      	ldr	r3, [pc, #380]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 80013ce:	21e0      	movs	r1, #224	; 0xe0
 80013d0:	01c9      	lsls	r1, r1, #7
 80013d2:	430a      	orrs	r2, r1
 80013d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	4a5d      	ldr	r2, [pc, #372]	; (8001550 <HAL_RCC_ClockConfig+0x1fc>)
 80013dc:	4013      	ands	r3, r2
 80013de:	0019      	movs	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	4b59      	ldr	r3, [pc, #356]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 80013e6:	430a      	orrs	r2, r1
 80013e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2201      	movs	r2, #1
 80013f0:	4013      	ands	r3, r2
 80013f2:	d057      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d107      	bne.n	800140c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	029b      	lsls	r3, r3, #10
 8001404:	4013      	ands	r3, r2
 8001406:	d12b      	bne.n	8001460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e097      	b.n	800153c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d107      	bne.n	8001424 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	049b      	lsls	r3, r3, #18
 800141c:	4013      	ands	r3, r2
 800141e:	d11f      	bne.n	8001460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e08b      	b.n	800153c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d107      	bne.n	800143c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800142c:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4013      	ands	r3, r2
 8001436:	d113      	bne.n	8001460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e07f      	b.n	800153c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d106      	bne.n	8001452 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001444:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 8001446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001448:	2202      	movs	r2, #2
 800144a:	4013      	ands	r3, r2
 800144c:	d108      	bne.n	8001460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e074      	b.n	800153c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001452:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e06d      	b.n	800153c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001460:	4b3a      	ldr	r3, [pc, #232]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2207      	movs	r2, #7
 8001466:	4393      	bics	r3, r2
 8001468:	0019      	movs	r1, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 8001470:	430a      	orrs	r2, r1
 8001472:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001474:	f7ff f9cc 	bl	8000810 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147c:	e009      	b.n	8001492 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147e:	f7ff f9c7 	bl	8000810 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <HAL_RCC_ClockConfig+0x1f4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e054      	b.n	800153c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2238      	movs	r2, #56	; 0x38
 8001498:	401a      	ands	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d1ec      	bne.n	800147e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2207      	movs	r2, #7
 80014aa:	4013      	ands	r3, r2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d21e      	bcs.n	80014f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2207      	movs	r2, #7
 80014b8:	4393      	bics	r3, r2
 80014ba:	0019      	movs	r1, r3
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014c4:	f7ff f9a4 	bl	8000810 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014cc:	e009      	b.n	80014e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ce:	f7ff f99f 	bl	8000810 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <HAL_RCC_ClockConfig+0x1f4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e02c      	b.n	800153c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_RCC_ClockConfig+0x1f0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2207      	movs	r2, #7
 80014e8:	4013      	ands	r3, r2
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1ee      	bne.n	80014ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2204      	movs	r2, #4
 80014f6:	4013      	ands	r3, r2
 80014f8:	d009      	beq.n	800150e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <HAL_RCC_ClockConfig+0x200>)
 8001500:	4013      	ands	r3, r2
 8001502:	0019      	movs	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 800150a:	430a      	orrs	r2, r1
 800150c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800150e:	f000 f829 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8001512:	0001      	movs	r1, r0
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_ClockConfig+0x1f8>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	220f      	movs	r2, #15
 800151c:	401a      	ands	r2, r3
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_RCC_ClockConfig+0x204>)
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	58d3      	ldr	r3, [r2, r3]
 8001524:	221f      	movs	r2, #31
 8001526:	4013      	ands	r3, r2
 8001528:	000a      	movs	r2, r1
 800152a:	40da      	lsrs	r2, r3
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_ClockConfig+0x208>)
 800152e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x20c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0018      	movs	r0, r3
 8001536:	f7ff f90f 	bl	8000758 <HAL_InitTick>
 800153a:	0003      	movs	r3, r0
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b004      	add	sp, #16
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40022000 	.word	0x40022000
 8001548:	00001388 	.word	0x00001388
 800154c:	40021000 	.word	0x40021000
 8001550:	fffff0ff 	.word	0xfffff0ff
 8001554:	ffff8fff 	.word	0xffff8fff
 8001558:	08002474 	.word	0x08002474
 800155c:	2000000c 	.word	0x2000000c
 8001560:	20000010 	.word	0x20000010

08001564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156a:	4b3c      	ldr	r3, [pc, #240]	; (800165c <HAL_RCC_GetSysClockFreq+0xf8>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2238      	movs	r2, #56	; 0x38
 8001570:	4013      	ands	r3, r2
 8001572:	d10f      	bne.n	8001594 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001574:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0adb      	lsrs	r3, r3, #11
 800157a:	2207      	movs	r2, #7
 800157c:	4013      	ands	r3, r2
 800157e:	2201      	movs	r2, #1
 8001580:	409a      	lsls	r2, r3
 8001582:	0013      	movs	r3, r2
 8001584:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	4835      	ldr	r0, [pc, #212]	; (8001660 <HAL_RCC_GetSysClockFreq+0xfc>)
 800158a:	f7fe fdb9 	bl	8000100 <__udivsi3>
 800158e:	0003      	movs	r3, r0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	e05d      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2238      	movs	r2, #56	; 0x38
 800159a:	4013      	ands	r3, r2
 800159c:	2b08      	cmp	r3, #8
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015a0:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_RCC_GetSysClockFreq+0x100>)
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	e054      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2238      	movs	r2, #56	; 0x38
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b10      	cmp	r3, #16
 80015b0:	d138      	bne.n	8001624 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2203      	movs	r2, #3
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	2207      	movs	r2, #7
 80015c4:	4013      	ands	r3, r2
 80015c6:	3301      	adds	r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d10d      	bne.n	80015ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	4824      	ldr	r0, [pc, #144]	; (8001664 <HAL_RCC_GetSysClockFreq+0x100>)
 80015d4:	f7fe fd94 	bl	8000100 <__udivsi3>
 80015d8:	0003      	movs	r3, r0
 80015da:	0019      	movs	r1, r3
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	227f      	movs	r2, #127	; 0x7f
 80015e4:	4013      	ands	r3, r2
 80015e6:	434b      	muls	r3, r1
 80015e8:	617b      	str	r3, [r7, #20]
        break;
 80015ea:	e00d      	b.n	8001608 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	481c      	ldr	r0, [pc, #112]	; (8001660 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015f0:	f7fe fd86 	bl	8000100 <__udivsi3>
 80015f4:	0003      	movs	r3, r0
 80015f6:	0019      	movs	r1, r3
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	227f      	movs	r2, #127	; 0x7f
 8001600:	4013      	ands	r3, r2
 8001602:	434b      	muls	r3, r1
 8001604:	617b      	str	r3, [r7, #20]
        break;
 8001606:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_RCC_GetSysClockFreq+0xf8>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0f5b      	lsrs	r3, r3, #29
 800160e:	2207      	movs	r2, #7
 8001610:	4013      	ands	r3, r2
 8001612:	3301      	adds	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	6978      	ldr	r0, [r7, #20]
 800161a:	f7fe fd71 	bl	8000100 <__udivsi3>
 800161e:	0003      	movs	r3, r0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	e015      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2238      	movs	r2, #56	; 0x38
 800162a:	4013      	ands	r3, r2
 800162c:	2b20      	cmp	r3, #32
 800162e:	d103      	bne.n	8001638 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_RCC_GetSysClockFreq+0xf8>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2238      	movs	r2, #56	; 0x38
 800163e:	4013      	ands	r3, r2
 8001640:	2b18      	cmp	r3, #24
 8001642:	d103      	bne.n	800164c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001644:	23fa      	movs	r3, #250	; 0xfa
 8001646:	01db      	lsls	r3, r3, #7
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	e001      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001650:	693b      	ldr	r3, [r7, #16]
}
 8001652:	0018      	movs	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	b006      	add	sp, #24
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40021000 	.word	0x40021000
 8001660:	00f42400 	.word	0x00f42400
 8001664:	007a1200 	.word	0x007a1200

08001668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800166c:	4b02      	ldr	r3, [pc, #8]	; (8001678 <HAL_RCC_GetHCLKFreq+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	2000000c 	.word	0x2000000c

0800167c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001680:	f7ff fff2 	bl	8001668 <HAL_RCC_GetHCLKFreq>
 8001684:	0004      	movs	r4, r0
 8001686:	f7ff fb49 	bl	8000d1c <LL_RCC_GetAPB1Prescaler>
 800168a:	0003      	movs	r3, r0
 800168c:	0b1a      	lsrs	r2, r3, #12
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001690:	0092      	lsls	r2, r2, #2
 8001692:	58d3      	ldr	r3, [r2, r3]
 8001694:	221f      	movs	r2, #31
 8001696:	4013      	ands	r3, r2
 8001698:	40dc      	lsrs	r4, r3
 800169a:	0023      	movs	r3, r4
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bdb0      	pop	{r4, r5, r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	080024b4 	.word	0x080024b4

080016a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80016b0:	2313      	movs	r3, #19
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80016b8:	2312      	movs	r3, #18
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	029b      	lsls	r3, r3, #10
 80016c8:	4013      	ands	r3, r2
 80016ca:	d100      	bne.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80016cc:	e0a3      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ce:	2011      	movs	r0, #17
 80016d0:	183b      	adds	r3, r7, r0
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d6:	4b86      	ldr	r3, [pc, #536]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80016d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	055b      	lsls	r3, r3, #21
 80016de:	4013      	ands	r3, r2
 80016e0:	d110      	bne.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80016e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016e6:	4b82      	ldr	r3, [pc, #520]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	0549      	lsls	r1, r1, #21
 80016ec:	430a      	orrs	r2, r1
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80016f0:	4b7f      	ldr	r3, [pc, #508]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80016f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	055b      	lsls	r3, r3, #21
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fe:	183b      	adds	r3, r7, r0
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001704:	4b7b      	ldr	r3, [pc, #492]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b7a      	ldr	r3, [pc, #488]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	0049      	lsls	r1, r1, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001712:	f7ff f87d 	bl	8000810 <HAL_GetTick>
 8001716:	0003      	movs	r3, r0
 8001718:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800171a:	e00b      	b.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171c:	f7ff f878 	bl	8000810 <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d904      	bls.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800172a:	2313      	movs	r3, #19
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	2203      	movs	r2, #3
 8001730:	701a      	strb	r2, [r3, #0]
        break;
 8001732:	e005      	b.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4013      	ands	r3, r2
 800173e:	d0ed      	beq.n	800171c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001740:	2313      	movs	r3, #19
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d154      	bne.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800174a:	4b69      	ldr	r3, [pc, #420]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800174c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800174e:	23c0      	movs	r3, #192	; 0xc0
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4013      	ands	r3, r2
 8001754:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d019      	beq.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	429a      	cmp	r2, r3
 8001764:	d014      	beq.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001766:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	4a63      	ldr	r2, [pc, #396]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800176c:	4013      	ands	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001770:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001772:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001774:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	0249      	lsls	r1, r1, #9
 800177a:	430a      	orrs	r2, r1
 800177c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800177e:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001780:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001782:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001784:	495d      	ldr	r1, [pc, #372]	; (80018fc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001786:	400a      	ands	r2, r1
 8001788:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800178a:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2201      	movs	r2, #1
 8001794:	4013      	ands	r3, r2
 8001796:	d016      	beq.n	80017c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff f83a 	bl	8000810 <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a0:	e00c      	b.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff f835 	bl	8000810 <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4a54      	ldr	r2, [pc, #336]	; (8001900 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d904      	bls.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80017b2:	2313      	movs	r3, #19
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	2203      	movs	r2, #3
 80017b8:	701a      	strb	r2, [r3, #0]
            break;
 80017ba:	e004      	b.n	80017c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017bc:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80017be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c0:	2202      	movs	r2, #2
 80017c2:	4013      	ands	r3, r2
 80017c4:	d0ed      	beq.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80017c6:	2313      	movs	r3, #19
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10a      	bne.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017d0:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	4a48      	ldr	r2, [pc, #288]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80017e4:	e00c      	b.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80017e6:	2312      	movs	r3, #18
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	2213      	movs	r2, #19
 80017ec:	18ba      	adds	r2, r7, r2
 80017ee:	7812      	ldrb	r2, [r2, #0]
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e005      	b.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80017f4:	2312      	movs	r3, #18
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	2213      	movs	r2, #19
 80017fa:	18ba      	adds	r2, r7, r2
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001800:	2311      	movs	r3, #17
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d105      	bne.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180a:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800180c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800180e:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001810:	493c      	ldr	r1, [pc, #240]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001812:	400a      	ands	r2, r1
 8001814:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2201      	movs	r2, #1
 800181c:	4013      	ands	r3, r2
 800181e:	d009      	beq.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001820:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	2203      	movs	r2, #3
 8001826:	4393      	bics	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001830:	430a      	orrs	r2, r1
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2202      	movs	r2, #2
 800183a:	4013      	ands	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001842:	220c      	movs	r2, #12
 8001844:	4393      	bics	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800184e:	430a      	orrs	r2, r1
 8001850:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2220      	movs	r2, #32
 8001858:	4013      	ands	r3, r2
 800185a:	d009      	beq.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800185e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001860:	4a29      	ldr	r2, [pc, #164]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001862:	4013      	ands	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800186c:	430a      	orrs	r2, r1
 800186e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	01db      	lsls	r3, r3, #7
 8001878:	4013      	ands	r3, r2
 800187a:	d015      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800187e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	0899      	lsrs	r1, r3, #2
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800188a:	430a      	orrs	r2, r1
 800188c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	05db      	lsls	r3, r3, #23
 8001896:	429a      	cmp	r2, r3
 8001898:	d106      	bne.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0249      	lsls	r1, r1, #9
 80018a4:	430a      	orrs	r2, r1
 80018a6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	4013      	ands	r3, r2
 80018b2:	d016      	beq.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	01db      	lsls	r3, r3, #7
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d106      	bne.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	0249      	lsls	r1, r1, #9
 80018de:	430a      	orrs	r2, r1
 80018e0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80018e2:	2312      	movs	r3, #18
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	781b      	ldrb	r3, [r3, #0]
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b006      	add	sp, #24
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
 80018f8:	fffffcff 	.word	0xfffffcff
 80018fc:	fffeffff 	.word	0xfffeffff
 8001900:	00001388 	.word	0x00001388
 8001904:	efffffff 	.word	0xefffffff
 8001908:	ffffcfff 	.word	0xffffcfff
 800190c:	ffff3fff 	.word	0xffff3fff

08001910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e046      	b.n	80019b0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2288      	movs	r2, #136	; 0x88
 8001926:	589b      	ldr	r3, [r3, r2]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d107      	bne.n	800193c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2284      	movs	r2, #132	; 0x84
 8001930:	2100      	movs	r1, #0
 8001932:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	0018      	movs	r0, r3
 8001938:	f7fe fe48 	bl	80005cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2288      	movs	r2, #136	; 0x88
 8001940:	2124      	movs	r1, #36	; 0x24
 8001942:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2101      	movs	r1, #1
 8001950:	438a      	bics	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	0018      	movs	r0, r3
 8001958:	f000 f8cc 	bl	8001af4 <UART_SetConfig>
 800195c:	0003      	movs	r3, r0
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e024      	b.n	80019b0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	0018      	movs	r0, r3
 8001972:	f000 fa63 	bl	8001e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	490d      	ldr	r1, [pc, #52]	; (80019b8 <HAL_UART_Init+0xa8>)
 8001982:	400a      	ands	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	212a      	movs	r1, #42	; 0x2a
 8001992:	438a      	bics	r2, r1
 8001994:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2101      	movs	r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f000 fafb 	bl	8001fa4 <UART_CheckIdleState>
 80019ae:	0003      	movs	r3, r0
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	ffffb7ff 	.word	0xffffb7ff

080019bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	1dbb      	adds	r3, r7, #6
 80019ca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2288      	movs	r2, #136	; 0x88
 80019d0:	589b      	ldr	r3, [r3, r2]
 80019d2:	2b20      	cmp	r3, #32
 80019d4:	d000      	beq.n	80019d8 <HAL_UART_Transmit+0x1c>
 80019d6:	e088      	b.n	8001aea <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_UART_Transmit+0x2a>
 80019de:	1dbb      	adds	r3, r7, #6
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e080      	b.n	8001aec <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	015b      	lsls	r3, r3, #5
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d109      	bne.n	8001a0a <HAL_UART_Transmit+0x4e>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	d001      	beq.n	8001a0a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e070      	b.n	8001aec <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2290      	movs	r2, #144	; 0x90
 8001a0e:	2100      	movs	r1, #0
 8001a10:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2288      	movs	r2, #136	; 0x88
 8001a16:	2121      	movs	r1, #33	; 0x21
 8001a18:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a1a:	f7fe fef9 	bl	8000810 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1dba      	adds	r2, r7, #6
 8001a26:	2154      	movs	r1, #84	; 0x54
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1dba      	adds	r2, r7, #6
 8001a30:	2156      	movs	r1, #86	; 0x56
 8001a32:	8812      	ldrh	r2, [r2, #0]
 8001a34:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	015b      	lsls	r3, r3, #5
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d108      	bne.n	8001a54 <HAL_UART_Transmit+0x98>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d104      	bne.n	8001a54 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	e003      	b.n	8001a5c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a5c:	e02c      	b.n	8001ab8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	0013      	movs	r3, r2
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2180      	movs	r1, #128	; 0x80
 8001a6c:	f000 fae8 	bl	8002040 <UART_WaitOnFlagUntilTimeout>
 8001a70:	1e03      	subs	r3, r0, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e039      	b.n	8001aec <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10b      	bne.n	8001a96 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	001a      	movs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	05d2      	lsls	r2, r2, #23
 8001a8a:	0dd2      	lsrs	r2, r2, #23
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	3302      	adds	r3, #2
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	e007      	b.n	8001aa6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2256      	movs	r2, #86	; 0x56
 8001aaa:	5a9b      	ldrh	r3, [r3, r2]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b299      	uxth	r1, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2256      	movs	r2, #86	; 0x56
 8001ab6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2256      	movs	r2, #86	; 0x56
 8001abc:	5a9b      	ldrh	r3, [r3, r2]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1cc      	bne.n	8001a5e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	0013      	movs	r3, r2
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2140      	movs	r1, #64	; 0x40
 8001ad2:	f000 fab5 	bl	8002040 <UART_WaitOnFlagUntilTimeout>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e006      	b.n	8001aec <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2288      	movs	r2, #136	; 0x88
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e000      	b.n	8001aec <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8001aea:	2302      	movs	r3, #2
  }
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b008      	add	sp, #32
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001afc:	231a      	movs	r3, #26
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4abc      	ldr	r2, [pc, #752]	; (8001e14 <UART_SetConfig+0x320>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	0019      	movs	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4ab7      	ldr	r2, [pc, #732]	; (8001e18 <UART_SetConfig+0x324>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4aae      	ldr	r2, [pc, #696]	; (8001e1c <UART_SetConfig+0x328>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	220f      	movs	r2, #15
 8001b78:	4393      	bics	r3, r2
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4aa4      	ldr	r2, [pc, #656]	; (8001e20 <UART_SetConfig+0x32c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d127      	bne.n	8001be2 <UART_SetConfig+0xee>
 8001b92:	4ba4      	ldr	r3, [pc, #656]	; (8001e24 <UART_SetConfig+0x330>)
 8001b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b96:	2203      	movs	r2, #3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d017      	beq.n	8001bce <UART_SetConfig+0xda>
 8001b9e:	d81b      	bhi.n	8001bd8 <UART_SetConfig+0xe4>
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d00a      	beq.n	8001bba <UART_SetConfig+0xc6>
 8001ba4:	d818      	bhi.n	8001bd8 <UART_SetConfig+0xe4>
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <UART_SetConfig+0xbc>
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d00a      	beq.n	8001bc4 <UART_SetConfig+0xd0>
 8001bae:	e013      	b.n	8001bd8 <UART_SetConfig+0xe4>
 8001bb0:	231b      	movs	r3, #27
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	e058      	b.n	8001c6c <UART_SetConfig+0x178>
 8001bba:	231b      	movs	r3, #27
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	e053      	b.n	8001c6c <UART_SetConfig+0x178>
 8001bc4:	231b      	movs	r3, #27
 8001bc6:	18fb      	adds	r3, r7, r3
 8001bc8:	2204      	movs	r2, #4
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	e04e      	b.n	8001c6c <UART_SetConfig+0x178>
 8001bce:	231b      	movs	r3, #27
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	e049      	b.n	8001c6c <UART_SetConfig+0x178>
 8001bd8:	231b      	movs	r3, #27
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	2210      	movs	r2, #16
 8001bde:	701a      	strb	r2, [r3, #0]
 8001be0:	e044      	b.n	8001c6c <UART_SetConfig+0x178>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a90      	ldr	r2, [pc, #576]	; (8001e28 <UART_SetConfig+0x334>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d127      	bne.n	8001c3c <UART_SetConfig+0x148>
 8001bec:	4b8d      	ldr	r3, [pc, #564]	; (8001e24 <UART_SetConfig+0x330>)
 8001bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf0:	220c      	movs	r2, #12
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d017      	beq.n	8001c28 <UART_SetConfig+0x134>
 8001bf8:	d81b      	bhi.n	8001c32 <UART_SetConfig+0x13e>
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d00a      	beq.n	8001c14 <UART_SetConfig+0x120>
 8001bfe:	d818      	bhi.n	8001c32 <UART_SetConfig+0x13e>
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <UART_SetConfig+0x116>
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d00a      	beq.n	8001c1e <UART_SetConfig+0x12a>
 8001c08:	e013      	b.n	8001c32 <UART_SetConfig+0x13e>
 8001c0a:	231b      	movs	r3, #27
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	e02b      	b.n	8001c6c <UART_SetConfig+0x178>
 8001c14:	231b      	movs	r3, #27
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	2202      	movs	r2, #2
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	e026      	b.n	8001c6c <UART_SetConfig+0x178>
 8001c1e:	231b      	movs	r3, #27
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	2204      	movs	r2, #4
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e021      	b.n	8001c6c <UART_SetConfig+0x178>
 8001c28:	231b      	movs	r3, #27
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	e01c      	b.n	8001c6c <UART_SetConfig+0x178>
 8001c32:	231b      	movs	r3, #27
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	2210      	movs	r2, #16
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e017      	b.n	8001c6c <UART_SetConfig+0x178>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a7a      	ldr	r2, [pc, #488]	; (8001e2c <UART_SetConfig+0x338>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d104      	bne.n	8001c50 <UART_SetConfig+0x15c>
 8001c46:	231b      	movs	r3, #27
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e00d      	b.n	8001c6c <UART_SetConfig+0x178>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a76      	ldr	r2, [pc, #472]	; (8001e30 <UART_SetConfig+0x33c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d104      	bne.n	8001c64 <UART_SetConfig+0x170>
 8001c5a:	231b      	movs	r3, #27
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e003      	b.n	8001c6c <UART_SetConfig+0x178>
 8001c64:	231b      	movs	r3, #27
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2210      	movs	r2, #16
 8001c6a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69da      	ldr	r2, [r3, #28]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d000      	beq.n	8001c7a <UART_SetConfig+0x186>
 8001c78:	e065      	b.n	8001d46 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8001c7a:	231b      	movs	r3, #27
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d015      	beq.n	8001cb0 <UART_SetConfig+0x1bc>
 8001c84:	dc18      	bgt.n	8001cb8 <UART_SetConfig+0x1c4>
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d00d      	beq.n	8001ca6 <UART_SetConfig+0x1b2>
 8001c8a:	dc15      	bgt.n	8001cb8 <UART_SetConfig+0x1c4>
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <UART_SetConfig+0x1a2>
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d005      	beq.n	8001ca0 <UART_SetConfig+0x1ac>
 8001c94:	e010      	b.n	8001cb8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c96:	f7ff fcf1 	bl	800167c <HAL_RCC_GetPCLK1Freq>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	617b      	str	r3, [r7, #20]
        break;
 8001c9e:	e012      	b.n	8001cc6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ca0:	4b64      	ldr	r3, [pc, #400]	; (8001e34 <UART_SetConfig+0x340>)
 8001ca2:	617b      	str	r3, [r7, #20]
        break;
 8001ca4:	e00f      	b.n	8001cc6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ca6:	f7ff fc5d 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8001caa:	0003      	movs	r3, r0
 8001cac:	617b      	str	r3, [r7, #20]
        break;
 8001cae:	e00a      	b.n	8001cc6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	617b      	str	r3, [r7, #20]
        break;
 8001cb6:	e006      	b.n	8001cc6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001cbc:	231a      	movs	r3, #26
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
        break;
 8001cc4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d100      	bne.n	8001cce <UART_SetConfig+0x1da>
 8001ccc:	e08d      	b.n	8001dea <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd2:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <UART_SetConfig+0x344>)
 8001cd4:	0052      	lsls	r2, r2, #1
 8001cd6:	5ad3      	ldrh	r3, [r2, r3]
 8001cd8:	0019      	movs	r1, r3
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7fe fa10 	bl	8000100 <__udivsi3>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	005a      	lsls	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	085b      	lsrs	r3, r3, #1
 8001cea:	18d2      	adds	r2, r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	0010      	movs	r0, r2
 8001cf4:	f7fe fa04 	bl	8000100 <__udivsi3>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	d91c      	bls.n	8001d3c <UART_SetConfig+0x248>
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	025b      	lsls	r3, r3, #9
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d217      	bcs.n	8001d3c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	200e      	movs	r0, #14
 8001d12:	183b      	adds	r3, r7, r0
 8001d14:	210f      	movs	r1, #15
 8001d16:	438a      	bics	r2, r1
 8001d18:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	085b      	lsrs	r3, r3, #1
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2207      	movs	r2, #7
 8001d22:	4013      	ands	r3, r2
 8001d24:	b299      	uxth	r1, r3
 8001d26:	183b      	adds	r3, r7, r0
 8001d28:	183a      	adds	r2, r7, r0
 8001d2a:	8812      	ldrh	r2, [r2, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	183a      	adds	r2, r7, r0
 8001d36:	8812      	ldrh	r2, [r2, #0]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	e056      	b.n	8001dea <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8001d3c:	231a      	movs	r3, #26
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e051      	b.n	8001dea <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001d46:	231b      	movs	r3, #27
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d015      	beq.n	8001d7c <UART_SetConfig+0x288>
 8001d50:	dc18      	bgt.n	8001d84 <UART_SetConfig+0x290>
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d00d      	beq.n	8001d72 <UART_SetConfig+0x27e>
 8001d56:	dc15      	bgt.n	8001d84 <UART_SetConfig+0x290>
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <UART_SetConfig+0x26e>
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d005      	beq.n	8001d6c <UART_SetConfig+0x278>
 8001d60:	e010      	b.n	8001d84 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d62:	f7ff fc8b 	bl	800167c <HAL_RCC_GetPCLK1Freq>
 8001d66:	0003      	movs	r3, r0
 8001d68:	617b      	str	r3, [r7, #20]
        break;
 8001d6a:	e012      	b.n	8001d92 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d6c:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <UART_SetConfig+0x340>)
 8001d6e:	617b      	str	r3, [r7, #20]
        break;
 8001d70:	e00f      	b.n	8001d92 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d72:	f7ff fbf7 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8001d76:	0003      	movs	r3, r0
 8001d78:	617b      	str	r3, [r7, #20]
        break;
 8001d7a:	e00a      	b.n	8001d92 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	617b      	str	r3, [r7, #20]
        break;
 8001d82:	e006      	b.n	8001d92 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001d88:	231a      	movs	r3, #26
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
        break;
 8001d90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d028      	beq.n	8001dea <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <UART_SetConfig+0x344>)
 8001d9e:	0052      	lsls	r2, r2, #1
 8001da0:	5ad3      	ldrh	r3, [r2, r3]
 8001da2:	0019      	movs	r1, r3
 8001da4:	6978      	ldr	r0, [r7, #20]
 8001da6:	f7fe f9ab 	bl	8000100 <__udivsi3>
 8001daa:	0003      	movs	r3, r0
 8001dac:	001a      	movs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	18d2      	adds	r2, r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	0019      	movs	r1, r3
 8001dbc:	0010      	movs	r0, r2
 8001dbe:	f7fe f99f 	bl	8000100 <__udivsi3>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d90a      	bls.n	8001de2 <UART_SetConfig+0x2ee>
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	025b      	lsls	r3, r3, #9
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d205      	bcs.n	8001de2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	e003      	b.n	8001dea <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8001de2:	231a      	movs	r3, #26
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	226a      	movs	r2, #106	; 0x6a
 8001dee:	2101      	movs	r1, #1
 8001df0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2268      	movs	r2, #104	; 0x68
 8001df6:	2101      	movs	r1, #1
 8001df8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8001e06:	231a      	movs	r3, #26
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b008      	add	sp, #32
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	cfff69f3 	.word	0xcfff69f3
 8001e18:	ffffcfff 	.word	0xffffcfff
 8001e1c:	11fff4ff 	.word	0x11fff4ff
 8001e20:	40013800 	.word	0x40013800
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40004400 	.word	0x40004400
 8001e2c:	40004800 	.word	0x40004800
 8001e30:	40004c00 	.word	0x40004c00
 8001e34:	00f42400 	.word	0x00f42400
 8001e38:	080024d4 	.word	0x080024d4

08001e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d00b      	beq.n	8001e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4a4a      	ldr	r2, [pc, #296]	; (8001f80 <UART_AdvFeatureConfig+0x144>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d00b      	beq.n	8001e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a43      	ldr	r2, [pc, #268]	; (8001f84 <UART_AdvFeatureConfig+0x148>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d00b      	beq.n	8001eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <UART_AdvFeatureConfig+0x14c>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	2208      	movs	r2, #8
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d00b      	beq.n	8001ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <UART_AdvFeatureConfig+0x150>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d00b      	beq.n	8001eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a2c      	ldr	r2, [pc, #176]	; (8001f90 <UART_AdvFeatureConfig+0x154>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d00b      	beq.n	8001f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <UART_AdvFeatureConfig+0x158>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	2240      	movs	r2, #64	; 0x40
 8001f16:	4013      	ands	r3, r2
 8001f18:	d01d      	beq.n	8001f56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <UART_AdvFeatureConfig+0x15c>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	035b      	lsls	r3, r3, #13
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d10b      	bne.n	8001f56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <UART_AdvFeatureConfig+0x160>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	2280      	movs	r2, #128	; 0x80
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d00b      	beq.n	8001f78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <UART_AdvFeatureConfig+0x164>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	605a      	str	r2, [r3, #4]
  }
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	fffdffff 	.word	0xfffdffff
 8001f84:	fffeffff 	.word	0xfffeffff
 8001f88:	fffbffff 	.word	0xfffbffff
 8001f8c:	ffff7fff 	.word	0xffff7fff
 8001f90:	ffffefff 	.word	0xffffefff
 8001f94:	ffffdfff 	.word	0xffffdfff
 8001f98:	ffefffff 	.word	0xffefffff
 8001f9c:	ff9fffff 	.word	0xff9fffff
 8001fa0:	fff7ffff 	.word	0xfff7ffff

08001fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2290      	movs	r2, #144	; 0x90
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001fb4:	f7fe fc2c 	bl	8000810 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2208      	movs	r2, #8
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d10c      	bne.n	8001fe4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	0391      	lsls	r1, r2, #14
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4a1a      	ldr	r2, [pc, #104]	; (800203c <UART_CheckIdleState+0x98>)
 8001fd4:	9200      	str	r2, [sp, #0]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f000 f832 	bl	8002040 <UART_WaitOnFlagUntilTimeout>
 8001fdc:	1e03      	subs	r3, r0, #0
 8001fde:	d001      	beq.n	8001fe4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e026      	b.n	8002032 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2204      	movs	r2, #4
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d10c      	bne.n	800200c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	03d1      	lsls	r1, r2, #15
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <UART_CheckIdleState+0x98>)
 8001ffc:	9200      	str	r2, [sp, #0]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f000 f81e 	bl	8002040 <UART_WaitOnFlagUntilTimeout>
 8002004:	1e03      	subs	r3, r0, #0
 8002006:	d001      	beq.n	800200c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e012      	b.n	8002032 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2288      	movs	r2, #136	; 0x88
 8002010:	2120      	movs	r1, #32
 8002012:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	228c      	movs	r2, #140	; 0x8c
 8002018:	2120      	movs	r1, #32
 800201a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2284      	movs	r2, #132	; 0x84
 800202c:	2100      	movs	r1, #0
 800202e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b004      	add	sp, #16
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	01ffffff 	.word	0x01ffffff

08002040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b094      	sub	sp, #80	; 0x50
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	1dfb      	adds	r3, r7, #7
 800204e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002050:	e0a7      	b.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002054:	3301      	adds	r3, #1
 8002056:	d100      	bne.n	800205a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002058:	e0a3      	b.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7fe fbd9 	bl	8000810 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002066:	429a      	cmp	r2, r3
 8002068:	d302      	bcc.n	8002070 <UART_WaitOnFlagUntilTimeout+0x30>
 800206a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800206c:	2b00      	cmp	r3, #0
 800206e:	d13f      	bne.n	80020f0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002070:	f3ef 8310 	mrs	r3, PRIMASK
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002078:	647b      	str	r3, [r7, #68]	; 0x44
 800207a:	2301      	movs	r3, #1
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	f383 8810 	msr	PRIMASK, r3
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	494e      	ldr	r1, [pc, #312]	; (80021cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002092:	400a      	ands	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002098:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	f383 8810 	msr	PRIMASK, r3
}
 80020a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a2:	f3ef 8310 	mrs	r3, PRIMASK
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80020a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40
 80020ac:	2301      	movs	r3, #1
 80020ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b2:	f383 8810 	msr	PRIMASK, r3
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2101      	movs	r1, #1
 80020c4:	438a      	bics	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ce:	f383 8810 	msr	PRIMASK, r3
}
 80020d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2288      	movs	r2, #136	; 0x88
 80020d8:	2120      	movs	r1, #32
 80020da:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	228c      	movs	r2, #140	; 0x8c
 80020e0:	2120      	movs	r1, #32
 80020e2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2284      	movs	r2, #132	; 0x84
 80020e8:	2100      	movs	r1, #0
 80020ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e069      	b.n	80021c4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2204      	movs	r2, #4
 80020f8:	4013      	ands	r3, r2
 80020fa:	d052      	beq.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	401a      	ands	r2, r3
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	429a      	cmp	r2, r3
 800210e:	d148      	bne.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	0112      	lsls	r2, r2, #4
 8002118:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800211a:	f3ef 8310 	mrs	r3, PRIMASK
 800211e:	613b      	str	r3, [r7, #16]
  return(result);
 8002120:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002124:	2301      	movs	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f383 8810 	msr	PRIMASK, r3
}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4924      	ldr	r1, [pc, #144]	; (80021cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800213c:	400a      	ands	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002142:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	f383 8810 	msr	PRIMASK, r3
}
 800214a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800214c:	f3ef 8310 	mrs	r3, PRIMASK
 8002150:	61fb      	str	r3, [r7, #28]
  return(result);
 8002152:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002154:	64bb      	str	r3, [r7, #72]	; 0x48
 8002156:	2301      	movs	r3, #1
 8002158:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	f383 8810 	msr	PRIMASK, r3
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	438a      	bics	r2, r1
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	f383 8810 	msr	PRIMASK, r3
}
 800217c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2288      	movs	r2, #136	; 0x88
 8002182:	2120      	movs	r1, #32
 8002184:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	228c      	movs	r2, #140	; 0x8c
 800218a:	2120      	movs	r1, #32
 800218c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2290      	movs	r2, #144	; 0x90
 8002192:	2120      	movs	r1, #32
 8002194:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2284      	movs	r2, #132	; 0x84
 800219a:	2100      	movs	r1, #0
 800219c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e010      	b.n	80021c4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	4013      	ands	r3, r2
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	425a      	negs	r2, r3
 80021b2:	4153      	adcs	r3, r2
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	001a      	movs	r2, r3
 80021b8:	1dfb      	adds	r3, r7, #7
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d100      	bne.n	80021c2 <UART_WaitOnFlagUntilTimeout+0x182>
 80021c0:	e747      	b.n	8002052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b014      	add	sp, #80	; 0x50
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	fffffe5f 	.word	0xfffffe5f

080021d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2284      	movs	r2, #132	; 0x84
 80021dc:	5c9b      	ldrb	r3, [r3, r2]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e027      	b.n	8002236 <HAL_UARTEx_DisableFifoMode+0x66>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2284      	movs	r2, #132	; 0x84
 80021ea:	2101      	movs	r1, #1
 80021ec:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2288      	movs	r2, #136	; 0x88
 80021f2:	2124      	movs	r1, #36	; 0x24
 80021f4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	438a      	bics	r2, r1
 800220c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002212:	4013      	ands	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2288      	movs	r2, #136	; 0x88
 8002228:	2120      	movs	r1, #32
 800222a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2284      	movs	r2, #132	; 0x84
 8002230:	2100      	movs	r1, #0
 8002232:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b004      	add	sp, #16
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	dfffffff 	.word	0xdfffffff

08002244 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2284      	movs	r2, #132	; 0x84
 8002252:	5c9b      	ldrb	r3, [r3, r2]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002258:	2302      	movs	r3, #2
 800225a:	e02e      	b.n	80022ba <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2284      	movs	r2, #132	; 0x84
 8002260:	2101      	movs	r1, #1
 8002262:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2288      	movs	r2, #136	; 0x88
 8002268:	2124      	movs	r1, #36	; 0x24
 800226a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2101      	movs	r1, #1
 8002280:	438a      	bics	r2, r1
 8002282:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	08d9      	lsrs	r1, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f854 	bl	8002348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2288      	movs	r2, #136	; 0x88
 80022ac:	2120      	movs	r1, #32
 80022ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2284      	movs	r2, #132	; 0x84
 80022b4:	2100      	movs	r1, #0
 80022b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b004      	add	sp, #16
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2284      	movs	r2, #132	; 0x84
 80022d2:	5c9b      	ldrb	r3, [r3, r2]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80022d8:	2302      	movs	r3, #2
 80022da:	e02f      	b.n	800233c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2284      	movs	r2, #132	; 0x84
 80022e0:	2101      	movs	r1, #1
 80022e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2288      	movs	r2, #136	; 0x88
 80022e8:	2124      	movs	r1, #36	; 0x24
 80022ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2101      	movs	r1, #1
 8002300:	438a      	bics	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800230c:	4013      	ands	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f000 f813 	bl	8002348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2288      	movs	r2, #136	; 0x88
 800232e:	2120      	movs	r1, #32
 8002330:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2284      	movs	r2, #132	; 0x84
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b004      	add	sp, #16
 8002342:	bd80      	pop	{r7, pc}
 8002344:	f1ffffff 	.word	0xf1ffffff

08002348 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002354:	2b00      	cmp	r3, #0
 8002356:	d108      	bne.n	800236a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	226a      	movs	r2, #106	; 0x6a
 800235c:	2101      	movs	r1, #1
 800235e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2268      	movs	r2, #104	; 0x68
 8002364:	2101      	movs	r1, #1
 8002366:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002368:	e043      	b.n	80023f2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800236a:	260f      	movs	r6, #15
 800236c:	19bb      	adds	r3, r7, r6
 800236e:	2208      	movs	r2, #8
 8002370:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002372:	200e      	movs	r0, #14
 8002374:	183b      	adds	r3, r7, r0
 8002376:	2208      	movs	r2, #8
 8002378:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	0e5b      	lsrs	r3, r3, #25
 8002382:	b2da      	uxtb	r2, r3
 8002384:	240d      	movs	r4, #13
 8002386:	193b      	adds	r3, r7, r4
 8002388:	2107      	movs	r1, #7
 800238a:	400a      	ands	r2, r1
 800238c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	0f5b      	lsrs	r3, r3, #29
 8002396:	b2da      	uxtb	r2, r3
 8002398:	250c      	movs	r5, #12
 800239a:	197b      	adds	r3, r7, r5
 800239c:	2107      	movs	r1, #7
 800239e:	400a      	ands	r2, r1
 80023a0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80023a2:	183b      	adds	r3, r7, r0
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	197a      	adds	r2, r7, r5
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	4914      	ldr	r1, [pc, #80]	; (80023fc <UARTEx_SetNbDataToProcess+0xb4>)
 80023ac:	5c8a      	ldrb	r2, [r1, r2]
 80023ae:	435a      	muls	r2, r3
 80023b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80023b2:	197b      	adds	r3, r7, r5
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <UARTEx_SetNbDataToProcess+0xb8>)
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80023ba:	0019      	movs	r1, r3
 80023bc:	f7fd ff2a 	bl	8000214 <__divsi3>
 80023c0:	0003      	movs	r3, r0
 80023c2:	b299      	uxth	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	226a      	movs	r2, #106	; 0x6a
 80023c8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80023ca:	19bb      	adds	r3, r7, r6
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	193a      	adds	r2, r7, r4
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	490a      	ldr	r1, [pc, #40]	; (80023fc <UARTEx_SetNbDataToProcess+0xb4>)
 80023d4:	5c8a      	ldrb	r2, [r1, r2]
 80023d6:	435a      	muls	r2, r3
 80023d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80023da:	193b      	adds	r3, r7, r4
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	4a08      	ldr	r2, [pc, #32]	; (8002400 <UARTEx_SetNbDataToProcess+0xb8>)
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80023e2:	0019      	movs	r1, r3
 80023e4:	f7fd ff16 	bl	8000214 <__divsi3>
 80023e8:	0003      	movs	r3, r0
 80023ea:	b299      	uxth	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2268      	movs	r2, #104	; 0x68
 80023f0:	5299      	strh	r1, [r3, r2]
}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b005      	add	sp, #20
 80023f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	080024ec 	.word	0x080024ec
 8002400:	080024f4 	.word	0x080024f4

08002404 <__libc_init_array>:
 8002404:	b570      	push	{r4, r5, r6, lr}
 8002406:	2600      	movs	r6, #0
 8002408:	4d0c      	ldr	r5, [pc, #48]	; (800243c <__libc_init_array+0x38>)
 800240a:	4c0d      	ldr	r4, [pc, #52]	; (8002440 <__libc_init_array+0x3c>)
 800240c:	1b64      	subs	r4, r4, r5
 800240e:	10a4      	asrs	r4, r4, #2
 8002410:	42a6      	cmp	r6, r4
 8002412:	d109      	bne.n	8002428 <__libc_init_array+0x24>
 8002414:	2600      	movs	r6, #0
 8002416:	f000 f821 	bl	800245c <_init>
 800241a:	4d0a      	ldr	r5, [pc, #40]	; (8002444 <__libc_init_array+0x40>)
 800241c:	4c0a      	ldr	r4, [pc, #40]	; (8002448 <__libc_init_array+0x44>)
 800241e:	1b64      	subs	r4, r4, r5
 8002420:	10a4      	asrs	r4, r4, #2
 8002422:	42a6      	cmp	r6, r4
 8002424:	d105      	bne.n	8002432 <__libc_init_array+0x2e>
 8002426:	bd70      	pop	{r4, r5, r6, pc}
 8002428:	00b3      	lsls	r3, r6, #2
 800242a:	58eb      	ldr	r3, [r5, r3]
 800242c:	4798      	blx	r3
 800242e:	3601      	adds	r6, #1
 8002430:	e7ee      	b.n	8002410 <__libc_init_array+0xc>
 8002432:	00b3      	lsls	r3, r6, #2
 8002434:	58eb      	ldr	r3, [r5, r3]
 8002436:	4798      	blx	r3
 8002438:	3601      	adds	r6, #1
 800243a:	e7f2      	b.n	8002422 <__libc_init_array+0x1e>
 800243c:	080024fc 	.word	0x080024fc
 8002440:	080024fc 	.word	0x080024fc
 8002444:	080024fc 	.word	0x080024fc
 8002448:	08002500 	.word	0x08002500

0800244c <memset>:
 800244c:	0003      	movs	r3, r0
 800244e:	1882      	adds	r2, r0, r2
 8002450:	4293      	cmp	r3, r2
 8002452:	d100      	bne.n	8002456 <memset+0xa>
 8002454:	4770      	bx	lr
 8002456:	7019      	strb	r1, [r3, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	e7f9      	b.n	8002450 <memset+0x4>

0800245c <_init>:
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002462:	bc08      	pop	{r3}
 8002464:	469e      	mov	lr, r3
 8002466:	4770      	bx	lr

08002468 <_fini>:
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246e:	bc08      	pop	{r3}
 8002470:	469e      	mov	lr, r3
 8002472:	4770      	bx	lr

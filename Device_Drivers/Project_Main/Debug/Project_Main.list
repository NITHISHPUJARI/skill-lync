
Project_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000408c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004274  08004274  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004274  08004274  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004274  08004274  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800427c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000000c  08004288  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004288  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa7  00000000  00000000  0003008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00032038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00032dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000153ed  00000000  00000000  00033ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010278  00000000  00000000  00048e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a41b  00000000  00000000  00059115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3530  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003144  00000000  00000000  000e3580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800412c 	.word	0x0800412c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800412c 	.word	0x0800412c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f000 fe75 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 f8a5 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 fae9 	bl	80009d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fe:	f000 fa65 	bl	80008cc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000402:	f000 fa05 	bl	8000810 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000406:	f000 faaf 	bl	8000968 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800040a:	f000 f8e3 	bl	80005d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800040e:	4b47      	ldr	r3, [pc, #284]	; (800052c <main+0x140>)
 8000410:	0018      	movs	r0, r3
 8000412:	f001 ff7f 	bl	8002314 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000416:	4b46      	ldr	r3, [pc, #280]	; (8000530 <main+0x144>)
 8000418:	2100      	movs	r1, #0
 800041a:	0018      	movs	r0, r3
 800041c:	f002 f878 	bl	8002510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000420:	4b43      	ldr	r3, [pc, #268]	; (8000530 <main+0x144>)
 8000422:	2104      	movs	r1, #4
 8000424:	0018      	movs	r0, r3
 8000426:	f002 f873 	bl	8002510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800042a:	4b41      	ldr	r3, [pc, #260]	; (8000530 <main+0x144>)
 800042c:	2108      	movs	r1, #8
 800042e:	0018      	movs	r0, r3
 8000430:	f002 f86e 	bl	8002510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000434:	4b3e      	ldr	r3, [pc, #248]	; (8000530 <main+0x144>)
 8000436:	210c      	movs	r1, #12
 8000438:	0018      	movs	r0, r3
 800043a:	f002 f869 	bl	8002510 <HAL_TIM_PWM_Start>


  for (int angle = 70; angle <= 140; angle += 5)
 800043e:	2346      	movs	r3, #70	; 0x46
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e00a      	b.n	800045a <main+0x6e>
    {
      servoPulse(servo, angle);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	b29a      	uxth	r2, r3
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	0011      	movs	r1, r2
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fbb4 	bl	8000bbc <servoPulse>
  for (int angle = 70; angle <= 140; angle += 5)
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	3305      	adds	r3, #5
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	2b8c      	cmp	r3, #140	; 0x8c
 800045e:	ddf1      	ble.n	8000444 <main+0x58>
    }
    for (int angle = 140; angle >= 0; angle -= 5)
 8000460:	238c      	movs	r3, #140	; 0x8c
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	e00a      	b.n	800047c <main+0x90>
    {
      servoPulse(servo, angle);
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	b29a      	uxth	r2, r3
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	0011      	movs	r1, r2
 8000470:	0018      	movs	r0, r3
 8000472:	f000 fba3 	bl	8000bbc <servoPulse>
    for (int angle = 140; angle >= 0; angle -= 5)
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	3b05      	subs	r3, #5
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	2b00      	cmp	r3, #0
 8000480:	daf1      	bge.n	8000466 <main+0x7a>
    }

    for (int angle = 0; angle <= 70; angle += 5)
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	e00a      	b.n	800049e <main+0xb2>
    {
      servoPulse(servo, angle);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	b29a      	uxth	r2, r3
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fb92 	bl	8000bbc <servoPulse>
    for (int angle = 0; angle <= 70; angle += 5)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3305      	adds	r3, #5
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b46      	cmp	r3, #70	; 0x46
 80004a2:	ddf1      	ble.n	8000488 <main+0x9c>
    }

    distance_F = Ultrasonic_read();
 80004a4:	f000 fbc0 	bl	8000c28 <Ultrasonic_read>
 80004a8:	0002      	movs	r2, r0
 80004aa:	4b22      	ldr	r3, [pc, #136]	; (8000534 <main+0x148>)
 80004ac:	601a      	str	r2, [r3, #0]

    HAL_Delay(500);
 80004ae:	23fa      	movs	r3, #250	; 0xfa
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fe9a 	bl	80011ec <HAL_Delay>
//	   }
//	   HAL_Delay(10);



	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	01db      	lsls	r3, r3, #7
 80004bc:	481e      	ldr	r0, [pc, #120]	; (8000538 <main+0x14c>)
 80004be:	2201      	movs	r2, #1
 80004c0:	0019      	movs	r1, r3
 80004c2:	f001 f8cf 	bl	8001664 <HAL_GPIO_WritePin>

	   if (HAL_UART_Receive(&huart3, (uint8_t*)&value, 1, 0) == HAL_OK)
 80004c6:	491d      	ldr	r1, [pc, #116]	; (800053c <main+0x150>)
 80004c8:	481d      	ldr	r0, [pc, #116]	; (8000540 <main+0x154>)
 80004ca:	2300      	movs	r3, #0
 80004cc:	2201      	movs	r2, #1
 80004ce:	f003 f897 	bl	8003600 <HAL_UART_Receive>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d1f0      	bne.n	80004b8 <main+0xcc>
	       {
	         if (value == 'F')
 80004d6:	4b19      	ldr	r3, [pc, #100]	; (800053c <main+0x150>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b46      	cmp	r3, #70	; 0x46
 80004dc:	d109      	bne.n	80004f2 <main+0x106>
	         {
	        	forword();
 80004de:	f000 fbcb 	bl	8000c78 <forword>
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	01db      	lsls	r3, r3, #7
 80004e6:	4814      	ldr	r0, [pc, #80]	; (8000538 <main+0x14c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	0019      	movs	r1, r3
 80004ec:	f001 f8ba 	bl	8001664 <HAL_GPIO_WritePin>
 80004f0:	e7e2      	b.n	80004b8 <main+0xcc>
//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
//HAL_Delay(500);
	         }
	         else if (value == 'B')
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <main+0x150>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b42      	cmp	r3, #66	; 0x42
 80004f8:	d105      	bne.n	8000506 <main+0x11a>
	         {
	        	backword();
 80004fa:	f000 fbde 	bl	8000cba <backword>
	        	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	        	HAL_Delay(100);
 80004fe:	2064      	movs	r0, #100	; 0x64
 8000500:	f000 fe74 	bl	80011ec <HAL_Delay>
 8000504:	e7d8      	b.n	80004b8 <main+0xcc>
	         }
	         else if (value == 'L')
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <main+0x150>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b4c      	cmp	r3, #76	; 0x4c
 800050c:	d0d4      	beq.n	80004b8 <main+0xcc>
	         {
	        	//turnLeft();
	        	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	        	//HAL_Delay(1000);
	         }
	         else if (value == 'R')
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <main+0x150>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b52      	cmp	r3, #82	; 0x52
 8000514:	d0d0      	beq.n	80004b8 <main+0xcc>
	        	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	        	//HAL_Delay(2000);
	         }
	         else
	         {
	        	Stop();
 8000516:	f000 fbf1 	bl	8000cfc <Stop>
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800051a:	2380      	movs	r3, #128	; 0x80
 800051c:	01db      	lsls	r3, r3, #7
 800051e:	4806      	ldr	r0, [pc, #24]	; (8000538 <main+0x14c>)
 8000520:	2200      	movs	r2, #0
 8000522:	0019      	movs	r1, r3
 8000524:	f001 f89e 	bl	8001664 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000528:	e7c6      	b.n	80004b8 <main+0xcc>
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	20000074 	.word	0x20000074
 8000530:	20000028 	.word	0x20000028
 8000534:	200001ec 	.word	0x200001ec
 8000538:	50000400 	.word	0x50000400
 800053c:	200001e8 	.word	0x200001e8
 8000540:	20000154 	.word	0x20000154

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b093      	sub	sp, #76	; 0x4c
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	2414      	movs	r4, #20
 800054c:	193b      	adds	r3, r7, r4
 800054e:	0018      	movs	r0, r3
 8000550:	2334      	movs	r3, #52	; 0x34
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f003 fde1 	bl	800411c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	0018      	movs	r0, r3
 800055e:	2310      	movs	r3, #16
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f003 fdda 	bl	800411c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	0018      	movs	r0, r3
 800056e:	f001 f897 	bl	80016a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2202      	movs	r2, #2
 8000576:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2280      	movs	r2, #128	; 0x80
 800057c:	0052      	lsls	r2, r2, #1
 800057e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000580:	193b      	adds	r3, r7, r4
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	193b      	adds	r3, r7, r4
 8000588:	2240      	movs	r2, #64	; 0x40
 800058a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	193b      	adds	r3, r7, r4
 8000594:	0018      	movs	r0, r3
 8000596:	f001 f8cf 	bl	8001738 <HAL_RCC_OscConfig>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800059e:	f000 fbce 	bl	8000d3e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2207      	movs	r2, #7
 80005a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2100      	movs	r1, #0
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 fbca 	bl	8001d58 <HAL_RCC_ClockConfig>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005c8:	f000 fbb9 	bl	8000d3e <Error_Handler>
  }
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b013      	add	sp, #76	; 0x4c
 80005d2:	bd90      	pop	{r4, r7, pc}

080005d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b09c      	sub	sp, #112	; 0x70
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	0018      	movs	r0, r3
 80005e0:	230c      	movs	r3, #12
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f003 fd99 	bl	800411c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ea:	2348      	movs	r3, #72	; 0x48
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	0018      	movs	r0, r3
 80005f0:	231c      	movs	r3, #28
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f003 fd91 	bl	800411c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005fa:	2314      	movs	r3, #20
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	0018      	movs	r0, r3
 8000600:	2334      	movs	r3, #52	; 0x34
 8000602:	001a      	movs	r2, r3
 8000604:	2100      	movs	r1, #0
 8000606:	f003 fd89 	bl	800411c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800060a:	4b7f      	ldr	r3, [pc, #508]	; (8000808 <MX_TIM1_Init+0x234>)
 800060c:	4a7f      	ldr	r2, [pc, #508]	; (800080c <MX_TIM1_Init+0x238>)
 800060e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000610:	4b7d      	ldr	r3, [pc, #500]	; (8000808 <MX_TIM1_Init+0x234>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000616:	4b7c      	ldr	r3, [pc, #496]	; (8000808 <MX_TIM1_Init+0x234>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800061c:	4b7a      	ldr	r3, [pc, #488]	; (8000808 <MX_TIM1_Init+0x234>)
 800061e:	22ff      	movs	r2, #255	; 0xff
 8000620:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000622:	4b79      	ldr	r3, [pc, #484]	; (8000808 <MX_TIM1_Init+0x234>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000628:	4b77      	ldr	r3, [pc, #476]	; (8000808 <MX_TIM1_Init+0x234>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062e:	4b76      	ldr	r3, [pc, #472]	; (8000808 <MX_TIM1_Init+0x234>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000634:	4b74      	ldr	r3, [pc, #464]	; (8000808 <MX_TIM1_Init+0x234>)
 8000636:	0018      	movs	r0, r3
 8000638:	f001 ff12 	bl	8002460 <HAL_TIM_PWM_Init>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000640:	f000 fb7d 	bl	8000d3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000644:	2164      	movs	r1, #100	; 0x64
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000658:	187a      	adds	r2, r7, r1
 800065a:	4b6b      	ldr	r3, [pc, #428]	; (8000808 <MX_TIM1_Init+0x234>)
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f002 fe6a 	bl	8003338 <HAL_TIMEx_MasterConfigSynchronization>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000668:	f000 fb69 	bl	8000d3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800066c:	2148      	movs	r1, #72	; 0x48
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2260      	movs	r2, #96	; 0x60
 8000672:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000698:	1879      	adds	r1, r7, r1
 800069a:	4b5b      	ldr	r3, [pc, #364]	; (8000808 <MX_TIM1_Init+0x234>)
 800069c:	2200      	movs	r2, #0
 800069e:	0018      	movs	r0, r3
 80006a0:	f002 f87a 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80006a8:	f000 fb49 	bl	8000d3e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ac:	2114      	movs	r1, #20
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0192      	lsls	r2, r2, #6
 80006d2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	0492      	lsls	r2, r2, #18
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000700:	187a      	adds	r2, r7, r1
 8000702:	4b41      	ldr	r3, [pc, #260]	; (8000808 <MX_TIM1_Init+0x234>)
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f002 fe7e 	bl	8003408 <HAL_TIMEx_ConfigBreakDeadTime>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000710:	f000 fb15 	bl	8000d3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	0018      	movs	r0, r3
 8000718:	2310      	movs	r3, #16
 800071a:	001a      	movs	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	f003 fcfd 	bl	800411c <memset>

    htim1.Instance = TIM1;
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <MX_TIM1_Init+0x234>)
 8000724:	4a39      	ldr	r2, [pc, #228]	; (800080c <MX_TIM1_Init+0x238>)
 8000726:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 8000728:	4b37      	ldr	r3, [pc, #220]	; (8000808 <MX_TIM1_Init+0x234>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b36      	ldr	r3, [pc, #216]	; (8000808 <MX_TIM1_Init+0x234>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 255;
 8000734:	4b34      	ldr	r3, [pc, #208]	; (8000808 <MX_TIM1_Init+0x234>)
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073a:	4b33      	ldr	r3, [pc, #204]	; (8000808 <MX_TIM1_Init+0x234>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8000740:	4b31      	ldr	r3, [pc, #196]	; (8000808 <MX_TIM1_Init+0x234>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b30      	ldr	r3, [pc, #192]	; (8000808 <MX_TIM1_Init+0x234>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800074c:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <MX_TIM1_Init+0x234>)
 800074e:	0018      	movs	r0, r3
 8000750:	f001 fe86 	bl	8002460 <HAL_TIM_PWM_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0x188>
    {
      Error_Handler();
 8000758:	f000 faf1 	bl	8000d3e <Error_Handler>
    }

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	0152      	lsls	r2, r2, #5
 8000762:	601a      	str	r2, [r3, #0]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000764:	1d3a      	adds	r2, r7, #4
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_TIM1_Init+0x234>)
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f002 f914 	bl	8002998 <HAL_TIM_ConfigClockSource>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM1_Init+0x1a4>
    {
      Error_Handler();
 8000774:	f000 fae3 	bl	8000d3e <Error_Handler>
    }

    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000778:	2348      	movs	r3, #72	; 0x48
 800077a:	18f9      	adds	r1, r7, r3
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <MX_TIM1_Init+0x234>)
 800077e:	2200      	movs	r2, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f002 f809 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_TIM1_Init+0x1ba>
    {
      Error_Handler();
 800078a:	f000 fad8 	bl	8000d3e <Error_Handler>
    }

    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800078e:	2348      	movs	r3, #72	; 0x48
 8000790:	18f9      	adds	r1, r7, r3
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_TIM1_Init+0x234>)
 8000794:	2204      	movs	r2, #4
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fffe 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x1d0>
    {
      Error_Handler();
 80007a0:	f000 facd 	bl	8000d3e <Error_Handler>
    }

    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007a4:	2348      	movs	r3, #72	; 0x48
 80007a6:	18f9      	adds	r1, r7, r3
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_TIM1_Init+0x234>)
 80007aa:	2208      	movs	r2, #8
 80007ac:	0018      	movs	r0, r3
 80007ae:	f001 fff3 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x1e6>
    {
      Error_Handler();
 80007b6:	f000 fac2 	bl	8000d3e <Error_Handler>
    }

    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007ba:	2348      	movs	r3, #72	; 0x48
 80007bc:	18f9      	adds	r1, r7, r3
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_TIM1_Init+0x234>)
 80007c0:	220c      	movs	r2, #12
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 ffe8 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x1fc>
    {
      Error_Handler();
 80007cc:	f000 fab7 	bl	8000d3e <Error_Handler>
    }

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	2164      	movs	r1, #100	; 0x64
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e4:	187a      	adds	r2, r7, r1
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_TIM1_Init+0x234>)
 80007e8:	0011      	movs	r1, r2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f002 fda4 	bl	8003338 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0x224>
    {
      Error_Handler();
 80007f4:	f000 faa3 	bl	8000d3e <Error_Handler>
    }

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <MX_TIM1_Init+0x234>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fb06 	bl	8000e0c <HAL_TIM_MspPostInit>

}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b01c      	add	sp, #112	; 0x70
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000028 	.word	0x20000028
 800080c:	40012c00 	.word	0x40012c00

08000810 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000816:	231c      	movs	r3, #28
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	0018      	movs	r0, r3
 800081c:	230c      	movs	r3, #12
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f003 fc7b 	bl	800411c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000826:	003b      	movs	r3, r7
 8000828:	0018      	movs	r0, r3
 800082a:	231c      	movs	r3, #28
 800082c:	001a      	movs	r2, r3
 800082e:	2100      	movs	r1, #0
 8000830:	f003 fc74 	bl	800411c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_TIM3_Init+0xb0>)
 8000836:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <MX_TIM3_Init+0xb4>)
 8000838:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <MX_TIM3_Init+0xb0>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_TIM3_Init+0xb0>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_TIM3_Init+0xb0>)
 8000848:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <MX_TIM3_Init+0xb8>)
 800084a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_TIM3_Init+0xb0>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_TIM3_Init+0xb0>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_TIM3_Init+0xb0>)
 800085a:	0018      	movs	r0, r3
 800085c:	f001 fda8 	bl	80023b0 <HAL_TIM_OC_Init>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000864:	f000 fa6b 	bl	8000d3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000868:	211c      	movs	r1, #28
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000876:	187a      	adds	r2, r7, r1
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_TIM3_Init+0xb0>)
 800087a:	0011      	movs	r1, r2
 800087c:	0018      	movs	r0, r3
 800087e:	f002 fd5b 	bl	8003338 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000886:	f000 fa5a 	bl	8000d3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800088a:	003b      	movs	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000890:	003b      	movs	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000896:	003b      	movs	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089c:	003b      	movs	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a2:	0039      	movs	r1, r7
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_TIM3_Init+0xb0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 ff15 	bl	80026d8 <HAL_TIM_OC_ConfigChannel>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80008b2:	f000 fa44 	bl	8000d3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b00a      	add	sp, #40	; 0x28
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	20000074 	.word	0x20000074
 80008c4:	40000400 	.word	0x40000400
 80008c8:	0000ffff 	.word	0x0000ffff

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008d2:	4a24      	ldr	r2, [pc, #144]	; (8000964 <MX_USART2_UART_Init+0x98>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008d8:	2296      	movs	r2, #150	; 0x96
 80008da:	0192      	lsls	r2, r2, #6
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_USART2_UART_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_USART2_UART_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_USART2_UART_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_USART2_UART_Init+0x94>)
 8000916:	0018      	movs	r0, r3
 8000918:	f002 fe1c 	bl	8003554 <HAL_UART_Init>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000920:	f000 fa0d 	bl	8000d3e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART2_UART_Init+0x94>)
 8000926:	2100      	movs	r1, #0
 8000928:	0018      	movs	r0, r3
 800092a:	f003 faf3 	bl	8003f14 <HAL_UARTEx_SetTxFifoThreshold>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000932:	f000 fa04 	bl	8000d3e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_USART2_UART_Init+0x94>)
 8000938:	2100      	movs	r1, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f003 fb2a 	bl	8003f94 <HAL_UARTEx_SetRxFifoThreshold>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000944:	f000 f9fb 	bl	8000d3e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <MX_USART2_UART_Init+0x94>)
 800094a:	0018      	movs	r0, r3
 800094c:	f003 faa8 	bl	8003ea0 <HAL_UARTEx_DisableFifoMode>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000954:	f000 f9f3 	bl	8000d3e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	200000c0 	.word	0x200000c0
 8000964:	40004400 	.word	0x40004400

08000968 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 800096e:	4a17      	ldr	r2, [pc, #92]	; (80009cc <MX_USART3_UART_Init+0x64>)
 8000970:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 8000974:	2296      	movs	r2, #150	; 0x96
 8000976:	0192      	lsls	r2, r2, #6
 8000978:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <MX_USART3_UART_Init+0x60>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f002 fdce 	bl	8003554 <HAL_UART_Init>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 f9bf 	bl	8000d3e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000154 	.word	0x20000154
 80009cc:	40004800 	.word	0x40004800

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b08b      	sub	sp, #44	; 0x2c
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	2414      	movs	r4, #20
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	0018      	movs	r0, r3
 80009dc:	2314      	movs	r3, #20
 80009de:	001a      	movs	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f003 fb9b 	bl	800411c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b73      	ldr	r3, [pc, #460]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 80009e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ea:	4b72      	ldr	r3, [pc, #456]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 80009ec:	2104      	movs	r1, #4
 80009ee:	430a      	orrs	r2, r1
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
 80009f2:	4b70      	ldr	r3, [pc, #448]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f6:	2204      	movs	r2, #4
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	4b6d      	ldr	r3, [pc, #436]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a02:	4b6c      	ldr	r3, [pc, #432]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a04:	2120      	movs	r1, #32
 8000a06:	430a      	orrs	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0a:	4b6a      	ldr	r3, [pc, #424]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	2220      	movs	r2, #32
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b67      	ldr	r3, [pc, #412]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1a:	4b66      	ldr	r3, [pc, #408]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
 8000a22:	4b64      	ldr	r3, [pc, #400]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a26:	2201      	movs	r2, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b61      	ldr	r3, [pc, #388]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a32:	4b60      	ldr	r3, [pc, #384]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a34:	2102      	movs	r1, #2
 8000a36:	430a      	orrs	r2, r1
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
 8000a3a:	4b5e      	ldr	r3, [pc, #376]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3e:	2202      	movs	r2, #2
 8000a40:	4013      	ands	r3, r2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	4b5b      	ldr	r3, [pc, #364]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4a:	4b5a      	ldr	r3, [pc, #360]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
 8000a52:	4b58      	ldr	r3, [pc, #352]	; (8000bb4 <MX_GPIO_Init+0x1e4>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	2208      	movs	r2, #8
 8000a58:	4013      	ands	r3, r2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a5e:	23e0      	movs	r3, #224	; 0xe0
 8000a60:	33ff      	adds	r3, #255	; 0xff
 8000a62:	0019      	movs	r1, r3
 8000a64:	23a0      	movs	r3, #160	; 0xa0
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	2200      	movs	r2, #0
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fdfa 	bl	8001664 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	01db      	lsls	r3, r3, #7
 8000a74:	4850      	ldr	r0, [pc, #320]	; (8000bb8 <MX_GPIO_Init+0x1e8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	0019      	movs	r1, r3
 8000a7a:	f000 fdf3 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	22e0      	movs	r2, #224	; 0xe0
 8000a82:	32ff      	adds	r2, #255	; 0xff
 8000a84:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2201      	movs	r2, #1
 8000a8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	193a      	adds	r2, r7, r4
 8000a9a:	23a0      	movs	r3, #160	; 0xa0
 8000a9c:	05db      	lsls	r3, r3, #23
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 fc7b 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000aa6:	0021      	movs	r1, r4
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	01d2      	lsls	r2, r2, #7
 8000aae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	000c      	movs	r4, r1
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	4a3c      	ldr	r2, [pc, #240]	; (8000bb8 <MX_GPIO_Init+0x1e8>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0010      	movs	r0, r2
 8000acc:	f000 fc66 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000ad0:	0021      	movs	r1, r4
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	22e0      	movs	r2, #224	; 0xe0
 8000ad6:	0052      	lsls	r2, r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	000c      	movs	r4, r1
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	4a33      	ldr	r2, [pc, #204]	; (8000bb8 <MX_GPIO_Init+0x1e8>)
 8000aec:	0019      	movs	r1, r3
 8000aee:	0010      	movs	r0, r2
 8000af0:	f000 fc54 	bl	800139c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /*Configure GPIO pins : L_S R_S */
    GPIO_InitStruct.Pin = L_S | R_S;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	22c0      	movs	r2, #192	; 0xc0
 8000af8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	4a2b      	ldr	r2, [pc, #172]	; (8000bb8 <MX_GPIO_Init+0x1e8>)
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	0010      	movs	r0, r2
 8000b0e:	f000 fc45 	bl	800139c <HAL_GPIO_Init>

    /*Configure GPIO pins : enA in1 in2 in3 in4 enB */
    GPIO_InitStruct.Pin = enA | in1 | in2 | in3 | in4 | enB;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	225f      	movs	r2, #95	; 0x5f
 8000b16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	193a      	adds	r2, r7, r4
 8000b2c:	23a0      	movs	r3, #160	; 0xa0
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 fc32 	bl	800139c <HAL_GPIO_Init>

    /*Configure GPIO pin : trigger */
    GPIO_InitStruct.Pin = trigger;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2280      	movs	r2, #128	; 0x80
 8000b3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2201      	movs	r2, #1
 8000b42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	193a      	adds	r2, r7, r4
 8000b52:	23a0      	movs	r3, #160	; 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fc1f 	bl	800139c <HAL_GPIO_Init>

    /*Configure GPIO pin : echo */
    GPIO_InitStruct.Pin = echo;
 8000b5e:	0021      	movs	r1, r4
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	0052      	lsls	r2, r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	000c      	movs	r4, r1
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <MX_GPIO_Init+0x1e8>)
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	0010      	movs	r0, r2
 8000b7e:	f000 fc0d 	bl	800139c <HAL_GPIO_Init>

    /*Configure GPIO pin : servo */
    GPIO_InitStruct.Pin = servo;
 8000b82:	0021      	movs	r1, r4
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	0052      	lsls	r2, r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2201      	movs	r2, #1
 8000b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	187a      	adds	r2, r7, r1
 8000ba0:	23a0      	movs	r3, #160	; 0xa0
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 fbf8 	bl	800139c <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b00b      	add	sp, #44	; 0x2c
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	50000400 	.word	0x50000400

08000bbc <servoPulse>:

/* USER CODE BEGIN 4 */
void servoPulse(uint16_t pin, uint16_t angle)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	1dbb      	adds	r3, r7, #6
 8000bc6:	801a      	strh	r2, [r3, #0]
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	1c0a      	adds	r2, r1, #0
 8000bcc:	801a      	strh	r2, [r3, #0]
  uint16_t pwm = (angle * 11) + 500;
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	1c1a      	adds	r2, r3, #0
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	18d2      	adds	r2, r2, r3
 8000bd8:	1892      	adds	r2, r2, r2
 8000bda:	18d3      	adds	r3, r2, r3
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	240e      	movs	r4, #14
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	32f5      	adds	r2, #245	; 0xf5
 8000be4:	32ff      	adds	r2, #255	; 0xff
 8000be6:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_SET);
 8000be8:	1dbb      	adds	r3, r7, #6
 8000bea:	8819      	ldrh	r1, [r3, #0]
 8000bec:	23a0      	movs	r3, #160	; 0xa0
 8000bee:	05db      	lsls	r3, r3, #23
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fd36 	bl	8001664 <HAL_GPIO_WritePin>
  TIM3->CCR1 = pwm;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <servoPulse+0x68>)
 8000bfa:	193a      	adds	r2, r7, r4
 8000bfc:	8812      	ldrh	r2, [r2, #0]
 8000bfe:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(50);
 8000c00:	2032      	movs	r0, #50	; 0x32
 8000c02:	f000 faf3 	bl	80011ec <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_RESET);
 8000c06:	1dbb      	adds	r3, r7, #6
 8000c08:	8819      	ldrh	r1, [r3, #0]
 8000c0a:	23a0      	movs	r3, #160	; 0xa0
 8000c0c:	05db      	lsls	r3, r3, #23
 8000c0e:	2200      	movs	r2, #0
 8000c10:	0018      	movs	r0, r3
 8000c12:	f000 fd27 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000c16:	2032      	movs	r0, #50	; 0x32
 8000c18:	f000 fae8 	bl	80011ec <HAL_Delay>
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b005      	add	sp, #20
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	40000400 	.word	0x40000400

08000c28 <Ultrasonic_read>:

long Ultrasonic_read()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, trigger, GPIO_PIN_RESET);
 8000c2e:	23a0      	movs	r3, #160	; 0xa0
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	2200      	movs	r2, #0
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 fd14 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f000 fad5 	bl	80011ec <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, trigger, GPIO_PIN_SET);
 8000c42:	23a0      	movs	r3, #160	; 0xa0
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	2201      	movs	r2, #1
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fd0a 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f000 facb 	bl	80011ec <HAL_Delay>
  long time = __HAL_TIM_GET_COUNTER(&htim3);
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <Ultrasonic_read+0x4c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	607b      	str	r3, [r7, #4]
  return time / 29 / 2;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	213a      	movs	r1, #58	; 0x3a
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fad6 	bl	8000214 <__divsi3>
 8000c68:	0003      	movs	r3, r0
}
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	20000074 	.word	0x20000074

08000c78 <forword>:
  HAL_Delay(300);
  compareDistance();
}

void forword()
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, in1, GPIO_PIN_RESET);
 8000c7c:	23a0      	movs	r3, #160	; 0xa0
 8000c7e:	05db      	lsls	r3, r3, #23
 8000c80:	2200      	movs	r2, #0
 8000c82:	2102      	movs	r1, #2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fced 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, in2, GPIO_PIN_SET);
 8000c8a:	23a0      	movs	r3, #160	; 0xa0
 8000c8c:	05db      	lsls	r3, r3, #23
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2104      	movs	r1, #4
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 fce6 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, in3, GPIO_PIN_SET);
 8000c98:	23a0      	movs	r3, #160	; 0xa0
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 fcdf 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, in4, GPIO_PIN_RESET);
 8000ca6:	23a0      	movs	r3, #160	; 0xa0
 8000ca8:	05db      	lsls	r3, r3, #23
 8000caa:	2200      	movs	r2, #0
 8000cac:	2110      	movs	r1, #16
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 fcd8 	bl	8001664 <HAL_GPIO_WritePin>
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <backword>:

void backword()
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, in1, GPIO_PIN_SET);
 8000cbe:	23a0      	movs	r3, #160	; 0xa0
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 fccc 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, in2, GPIO_PIN_RESET);
 8000ccc:	23a0      	movs	r3, #160	; 0xa0
 8000cce:	05db      	lsls	r3, r3, #23
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fcc5 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, in3, GPIO_PIN_RESET);
 8000cda:	23a0      	movs	r3, #160	; 0xa0
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 fcbe 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, in4, GPIO_PIN_SET);
 8000ce8:	23a0      	movs	r3, #160	; 0xa0
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	2201      	movs	r2, #1
 8000cee:	2110      	movs	r1, #16
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 fcb7 	bl	8001664 <HAL_GPIO_WritePin>
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <Stop>:
  HAL_GPIO_WritePin(GPIOA, in3, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, in4, GPIO_PIN_RESET);
}

void Stop()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, in1, GPIO_PIN_RESET);
 8000d00:	23a0      	movs	r3, #160	; 0xa0
 8000d02:	05db      	lsls	r3, r3, #23
 8000d04:	2200      	movs	r2, #0
 8000d06:	2102      	movs	r1, #2
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fcab 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, in2, GPIO_PIN_RESET);
 8000d0e:	23a0      	movs	r3, #160	; 0xa0
 8000d10:	05db      	lsls	r3, r3, #23
 8000d12:	2200      	movs	r2, #0
 8000d14:	2104      	movs	r1, #4
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 fca4 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, in3, GPIO_PIN_RESET);
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	2200      	movs	r2, #0
 8000d22:	2108      	movs	r1, #8
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 fc9d 	bl	8001664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, in4, GPIO_PIN_RESET);
 8000d2a:	23a0      	movs	r3, #160	; 0xa0
 8000d2c:	05db      	lsls	r3, r3, #23
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2110      	movs	r1, #16
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fc96 	bl	8001664 <HAL_GPIO_WritePin>
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d42:	b672      	cpsid	i
}
 8000d44:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <Error_Handler+0x8>

08000d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x44>)
 8000d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_MspInit+0x44>)
 8000d54:	2101      	movs	r1, #1
 8000d56:	430a      	orrs	r2, r1
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4013      	ands	r3, r2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x44>)
 8000d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_MspInit+0x44>)
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	0549      	lsls	r1, r1, #21
 8000d70:	430a      	orrs	r2, r1
 8000d72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_MspInit+0x44>)
 8000d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	055b      	lsls	r3, r3, #21
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_TIM_PWM_MspInit+0x38>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10d      	bne.n	8000dbe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_TIM_PWM_MspInit+0x3c>)
 8000da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_TIM_PWM_MspInit+0x3c>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0109      	lsls	r1, r1, #4
 8000dac:	430a      	orrs	r2, r1
 8000dae:	641a      	str	r2, [r3, #64]	; 0x40
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_TIM_PWM_MspInit+0x3c>)
 8000db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40012c00 	.word	0x40012c00
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <HAL_TIM_OC_MspInit+0x34>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10b      	bne.n	8000dfa <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_TIM_OC_MspInit+0x38>)
 8000de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_TIM_OC_MspInit+0x38>)
 8000de8:	2102      	movs	r1, #2
 8000dea:	430a      	orrs	r2, r1
 8000dec:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_TIM_OC_MspInit+0x38>)
 8000df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df2:	2202      	movs	r2, #2
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	40000400 	.word	0x40000400
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	240c      	movs	r4, #12
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	0018      	movs	r0, r3
 8000e1a:	2314      	movs	r3, #20
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f003 f97c 	bl	800411c <memset>
  if(htim->Instance==TIM1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_TIM_MspPostInit+0x70>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d122      	bne.n	8000e74 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_TIM_MspPostInit+0x74>)
 8000e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_TIM_MspPostInit+0x74>)
 8000e34:	2104      	movs	r1, #4
 8000e36:	430a      	orrs	r2, r1
 8000e38:	635a      	str	r2, [r3, #52]	; 0x34
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_TIM_MspPostInit+0x74>)
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3e:	2204      	movs	r2, #4
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	0052      	lsls	r2, r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	0021      	movs	r1, r4
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2202      	movs	r2, #2
 8000e54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2202      	movs	r2, #2
 8000e66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_TIM_MspPostInit+0x78>)
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	0010      	movs	r0, r2
 8000e70:	f000 fa94 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b009      	add	sp, #36	; 0x24
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	40012c00 	.word	0x40012c00
 8000e80:	40021000 	.word	0x40021000
 8000e84:	50000800 	.word	0x50000800

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b095      	sub	sp, #84	; 0x54
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	233c      	movs	r3, #60	; 0x3c
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	0018      	movs	r0, r3
 8000e96:	2314      	movs	r3, #20
 8000e98:	001a      	movs	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f003 f93e 	bl	800411c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	2420      	movs	r4, #32
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	231c      	movs	r3, #28
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	f003 f936 	bl	800411c <memset>
  if(huart->Instance==USART2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a62      	ldr	r2, [pc, #392]	; (8001040 <HAL_UART_MspInit+0x1b8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d163      	bne.n	8000f82 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f001 f8ef 	bl	80020ac <HAL_RCCEx_PeriphCLKConfig>
 8000ece:	1e03      	subs	r3, r0, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ed2:	f7ff ff34 	bl	8000d3e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed6:	4b5b      	ldr	r3, [pc, #364]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eda:	4b5a      	ldr	r3, [pc, #360]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	0289      	lsls	r1, r1, #10
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ee4:	4b57      	ldr	r3, [pc, #348]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	029b      	lsls	r3, r3, #10
 8000eec:	4013      	ands	r3, r2
 8000eee:	61fb      	str	r3, [r7, #28]
 8000ef0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b54      	ldr	r3, [pc, #336]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef6:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	430a      	orrs	r2, r1
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
 8000efe:	4b51      	ldr	r3, [pc, #324]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f02:	2201      	movs	r2, #1
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f0e:	4b4d      	ldr	r3, [pc, #308]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000f10:	2108      	movs	r1, #8
 8000f12:	430a      	orrs	r2, r1
 8000f14:	635a      	str	r2, [r3, #52]	; 0x34
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f22:	213c      	movs	r1, #60	; 0x3c
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	0212      	lsls	r2, r2, #8
 8000f2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	000c      	movs	r4, r1
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2202      	movs	r2, #2
 8000f32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	2201      	movs	r2, #1
 8000f44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	193a      	adds	r2, r7, r4
 8000f48:	23a0      	movs	r3, #160	; 0xa0
 8000f4a:	05db      	lsls	r3, r3, #23
 8000f4c:	0011      	movs	r1, r2
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f000 fa24 	bl	800139c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f54:	0021      	movs	r1, r4
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2220      	movs	r2, #32
 8000f5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2202      	movs	r2, #2
 8000f60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	4a34      	ldr	r2, [pc, #208]	; (8001048 <HAL_UART_MspInit+0x1c0>)
 8000f78:	0019      	movs	r1, r3
 8000f7a:	0010      	movs	r0, r2
 8000f7c:	f000 fa0e 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f80:	e059      	b.n	8001036 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <HAL_UART_MspInit+0x1c4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d154      	bne.n	8001036 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f90:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000f92:	2180      	movs	r1, #128	; 0x80
 8000f94:	02c9      	lsls	r1, r1, #11
 8000f96:	430a      	orrs	r2, r1
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	02db      	lsls	r3, r3, #11
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fac:	4b25      	ldr	r3, [pc, #148]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000fae:	2104      	movs	r1, #4
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34
 8000fb4:	4b23      	ldr	r3, [pc, #140]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb8:	2204      	movs	r2, #4
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b20      	ldr	r3, [pc, #128]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_UART_MspInit+0x1bc>)
 8000fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fd8:	213c      	movs	r1, #60	; 0x3c
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	000c      	movs	r4, r1
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_UART_MspInit+0x1c8>)
 8001000:	0019      	movs	r1, r3
 8001002:	0010      	movs	r0, r2
 8001004:	f000 f9ca 	bl	800139c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001008:	0021      	movs	r1, r4
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2220      	movs	r2, #32
 800100e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2202      	movs	r2, #2
 8001014:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	187b      	adds	r3, r7, r1
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001022:	187b      	adds	r3, r7, r1
 8001024:	2204      	movs	r2, #4
 8001026:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	187a      	adds	r2, r7, r1
 800102a:	23a0      	movs	r3, #160	; 0xa0
 800102c:	05db      	lsls	r3, r3, #23
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f000 f9b3 	bl	800139c <HAL_GPIO_Init>
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b015      	add	sp, #84	; 0x54
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	40004400 	.word	0x40004400
 8001044:	40021000 	.word	0x40021000
 8001048:	50000c00 	.word	0x50000c00
 800104c:	40004800 	.word	0x40004800
 8001050:	50000800 	.word	0x50000800

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f89c 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800108e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001090:	f7ff fff7 	bl	8001082 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	; (80010cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <LoopForever+0xe>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	; (80010d8 <LoopForever+0x16>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ba:	f003 f80b 	bl	80040d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010be:	f7ff f995 	bl	80003ec <main>

080010c2 <LoopForever>:

LoopForever:
  b LoopForever
 80010c2:	e7fe      	b.n	80010c2 <LoopForever>
  ldr   r0, =_estack
 80010c4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010d0:	0800427c 	.word	0x0800427c
  ldr r2, =_sbss
 80010d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010d8:	200001f4 	.word	0x200001f4

080010dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_Init+0x3c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_Init+0x3c>)
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	0049      	lsls	r1, r1, #1
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f810 	bl	8001120 <HAL_InitTick>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d003      	beq.n	800110c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e001      	b.n	8001110 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fe1c 	bl	8000d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	781b      	ldrb	r3, [r3, #0]
}
 8001114:	0018      	movs	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	b002      	add	sp, #8
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40022000 	.word	0x40022000

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_InitTick+0x88>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d02b      	beq.n	8001190 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_InitTick+0x8c>)
 800113a:	681c      	ldr	r4, [r3, #0]
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_InitTick+0x88>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	0019      	movs	r1, r3
 8001142:	23fa      	movs	r3, #250	; 0xfa
 8001144:	0098      	lsls	r0, r3, #2
 8001146:	f7fe ffdb 	bl	8000100 <__udivsi3>
 800114a:	0003      	movs	r3, r0
 800114c:	0019      	movs	r1, r3
 800114e:	0020      	movs	r0, r4
 8001150:	f7fe ffd6 	bl	8000100 <__udivsi3>
 8001154:	0003      	movs	r3, r0
 8001156:	0018      	movs	r0, r3
 8001158:	f000 f913 	bl	8001382 <HAL_SYSTICK_Config>
 800115c:	1e03      	subs	r3, r0, #0
 800115e:	d112      	bne.n	8001186 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d80a      	bhi.n	800117c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	2301      	movs	r3, #1
 800116a:	425b      	negs	r3, r3
 800116c:	2200      	movs	r2, #0
 800116e:	0018      	movs	r0, r3
 8001170:	f000 f8f2 	bl	8001358 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_InitTick+0x90>)
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e00d      	b.n	8001198 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800117c:	230f      	movs	r3, #15
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e008      	b.n	8001198 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001186:	230f      	movs	r3, #15
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e003      	b.n	8001198 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	781b      	ldrb	r3, [r3, #0]
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b005      	add	sp, #20
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000004 	.word	0x20000004

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x1c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	001a      	movs	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x20>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	18d2      	adds	r2, r2, r3
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_IncTick+0x20>)
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	20000008 	.word	0x20000008
 80011d4:	200001f0 	.word	0x200001f0

080011d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_GetTick+0x10>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	200001f0 	.word	0x200001f0

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff fff0 	bl	80011d8 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3301      	adds	r3, #1
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	001a      	movs	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	189b      	adds	r3, r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	f7ff ffe0 	bl	80011d8 <HAL_GetTick>
 8001218:	0002      	movs	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b004      	add	sp, #16
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	20000008 	.word	0x20000008

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	0002      	movs	r2, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b7f      	cmp	r3, #127	; 0x7f
 8001248:	d828      	bhi.n	800129c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <__NVIC_SetPriority+0xd4>)
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b25b      	sxtb	r3, r3
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	33c0      	adds	r3, #192	; 0xc0
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	589b      	ldr	r3, [r3, r2]
 800125a:	1dfa      	adds	r2, r7, #7
 800125c:	7812      	ldrb	r2, [r2, #0]
 800125e:	0011      	movs	r1, r2
 8001260:	2203      	movs	r2, #3
 8001262:	400a      	ands	r2, r1
 8001264:	00d2      	lsls	r2, r2, #3
 8001266:	21ff      	movs	r1, #255	; 0xff
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	43d2      	mvns	r2, r2
 800126e:	401a      	ands	r2, r3
 8001270:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	22ff      	movs	r2, #255	; 0xff
 8001278:	401a      	ands	r2, r3
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0018      	movs	r0, r3
 8001280:	2303      	movs	r3, #3
 8001282:	4003      	ands	r3, r0
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001288:	481f      	ldr	r0, [pc, #124]	; (8001308 <__NVIC_SetPriority+0xd4>)
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b25b      	sxtb	r3, r3
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	430a      	orrs	r2, r1
 8001294:	33c0      	adds	r3, #192	; 0xc0
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800129a:	e031      	b.n	8001300 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <__NVIC_SetPriority+0xd8>)
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	0019      	movs	r1, r3
 80012a4:	230f      	movs	r3, #15
 80012a6:	400b      	ands	r3, r1
 80012a8:	3b08      	subs	r3, #8
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3306      	adds	r3, #6
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	18d3      	adds	r3, r2, r3
 80012b2:	3304      	adds	r3, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1dfa      	adds	r2, r7, #7
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	0011      	movs	r1, r2
 80012bc:	2203      	movs	r2, #3
 80012be:	400a      	ands	r2, r1
 80012c0:	00d2      	lsls	r2, r2, #3
 80012c2:	21ff      	movs	r1, #255	; 0xff
 80012c4:	4091      	lsls	r1, r2
 80012c6:	000a      	movs	r2, r1
 80012c8:	43d2      	mvns	r2, r2
 80012ca:	401a      	ands	r2, r3
 80012cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	22ff      	movs	r2, #255	; 0xff
 80012d4:	401a      	ands	r2, r3
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	0018      	movs	r0, r3
 80012dc:	2303      	movs	r3, #3
 80012de:	4003      	ands	r3, r0
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <__NVIC_SetPriority+0xd8>)
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	001c      	movs	r4, r3
 80012ec:	230f      	movs	r3, #15
 80012ee:	4023      	ands	r3, r4
 80012f0:	3b08      	subs	r3, #8
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	430a      	orrs	r2, r1
 80012f6:	3306      	adds	r3, #6
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	18c3      	adds	r3, r0, r3
 80012fc:	3304      	adds	r3, #4
 80012fe:	601a      	str	r2, [r3, #0]
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b003      	add	sp, #12
 8001306:	bd90      	pop	{r4, r7, pc}
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	1e5a      	subs	r2, r3, #1
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	045b      	lsls	r3, r3, #17
 8001320:	429a      	cmp	r2, r3
 8001322:	d301      	bcc.n	8001328 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001324:	2301      	movs	r3, #1
 8001326:	e010      	b.n	800134a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <SysTick_Config+0x44>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	3a01      	subs	r2, #1
 800132e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001330:	2301      	movs	r3, #1
 8001332:	425b      	negs	r3, r3
 8001334:	2103      	movs	r1, #3
 8001336:	0018      	movs	r0, r3
 8001338:	f7ff ff7c 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x44>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x44>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	210f      	movs	r1, #15
 8001364:	187b      	adds	r3, r7, r1
 8001366:	1c02      	adds	r2, r0, #0
 8001368:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	187b      	adds	r3, r7, r1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b25b      	sxtb	r3, r3
 8001372:	0011      	movs	r1, r2
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff ffbf 	bl	8001310 <SysTick_Config>
 8001392:	0003      	movs	r3, r0
}
 8001394:	0018      	movs	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e147      	b.n	800163c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4091      	lsls	r1, r2
 80013b6:	000a      	movs	r2, r1
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d100      	bne.n	80013c4 <HAL_GPIO_Init+0x28>
 80013c2:	e138      	b.n	8001636 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d005      	beq.n	80013dc <HAL_GPIO_Init+0x40>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d130      	bne.n	800143e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	409a      	lsls	r2, r3
 80013ea:	0013      	movs	r3, r2
 80013ec:	43da      	mvns	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001412:	2201      	movs	r2, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	43da      	mvns	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	2201      	movs	r2, #1
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	4013      	ands	r3, r2
 8001446:	2b03      	cmp	r3, #3
 8001448:	d017      	beq.n	800147a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	4013      	ands	r3, r2
 8001482:	2b02      	cmp	r3, #2
 8001484:	d123      	bne.n	80014ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	0092      	lsls	r2, r2, #2
 8001490:	58d3      	ldr	r3, [r2, r3]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2207      	movs	r2, #7
 8001498:	4013      	ands	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	43da      	mvns	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2107      	movs	r1, #7
 80014b2:	400b      	ands	r3, r1
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	6939      	ldr	r1, [r7, #16]
 80014cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	43da      	mvns	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2203      	movs	r2, #3
 80014ec:	401a      	ands	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	23c0      	movs	r3, #192	; 0xc0
 8001508:	029b      	lsls	r3, r3, #10
 800150a:	4013      	ands	r3, r2
 800150c:	d100      	bne.n	8001510 <HAL_GPIO_Init+0x174>
 800150e:	e092      	b.n	8001636 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001510:	4a50      	ldr	r2, [pc, #320]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3318      	adds	r3, #24
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	589b      	ldr	r3, [r3, r2]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2203      	movs	r2, #3
 8001522:	4013      	ands	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	220f      	movs	r2, #15
 8001528:	409a      	lsls	r2, r3
 800152a:	0013      	movs	r3, r2
 800152c:	43da      	mvns	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	23a0      	movs	r3, #160	; 0xa0
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	429a      	cmp	r2, r3
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x1ca>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a45      	ldr	r2, [pc, #276]	; (8001658 <HAL_GPIO_Init+0x2bc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x1c6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a44      	ldr	r2, [pc, #272]	; (800165c <HAL_GPIO_Init+0x2c0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x1c2>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a43      	ldr	r2, [pc, #268]	; (8001660 <HAL_GPIO_Init+0x2c4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x1be>
 8001556:	2303      	movs	r3, #3
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x1cc>
 800155a:	2305      	movs	r3, #5
 800155c:	e004      	b.n	8001568 <HAL_GPIO_Init+0x1cc>
 800155e:	2302      	movs	r3, #2
 8001560:	e002      	b.n	8001568 <HAL_GPIO_Init+0x1cc>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_GPIO_Init+0x1cc>
 8001566:	2300      	movs	r3, #0
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	2103      	movs	r1, #3
 800156c:	400a      	ands	r2, r1
 800156e:	00d2      	lsls	r2, r2, #3
 8001570:	4093      	lsls	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001578:	4936      	ldr	r1, [pc, #216]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3318      	adds	r3, #24
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	035b      	lsls	r3, r3, #13
 800159e:	4013      	ands	r3, r2
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43da      	mvns	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	039b      	lsls	r3, r3, #14
 80015c8:	4013      	ands	r3, r2
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 80015dc:	2384      	movs	r3, #132	; 0x84
 80015de:	58d3      	ldr	r3, [r2, r3]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43da      	mvns	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	029b      	lsls	r3, r3, #10
 80015f4:	4013      	ands	r3, r2
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001600:	4914      	ldr	r1, [pc, #80]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 8001602:	2284      	movs	r2, #132	; 0x84
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	58d3      	ldr	r3, [r2, r3]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43da      	mvns	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	025b      	lsls	r3, r3, #9
 8001622:	4013      	ands	r3, r2
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800162e:	4909      	ldr	r1, [pc, #36]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	40da      	lsrs	r2, r3
 8001644:	1e13      	subs	r3, r2, #0
 8001646:	d000      	beq.n	800164a <HAL_GPIO_Init+0x2ae>
 8001648:	e6b0      	b.n	80013ac <HAL_GPIO_Init+0x10>
  }
}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b006      	add	sp, #24
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021800 	.word	0x40021800
 8001658:	50000400 	.word	0x50000400
 800165c:	50000800 	.word	0x50000800
 8001660:	50000c00 	.word	0x50000c00

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	0008      	movs	r0, r1
 800166e:	0011      	movs	r1, r2
 8001670:	1cbb      	adds	r3, r7, #2
 8001672:	1c02      	adds	r2, r0, #0
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	1c7b      	adds	r3, r7, #1
 8001678:	1c0a      	adds	r2, r1, #0
 800167a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167c:	1c7b      	adds	r3, r7, #1
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001684:	1cbb      	adds	r3, r7, #2
 8001686:	881a      	ldrh	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168e:	1cbb      	adds	r3, r7, #2
 8001690:	881a      	ldrh	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a19      	ldr	r2, [pc, #100]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d11f      	bne.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	0013      	movs	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	189b      	adds	r3, r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4912      	ldr	r1, [pc, #72]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7fe fd14 	bl	8000100 <__udivsi3>
 80016d8:	0003      	movs	r3, r0
 80016da:	3301      	adds	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016de:	e008      	b.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	e001      	b.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e009      	b.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	401a      	ands	r2, r3
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	429a      	cmp	r2, r3
 8001702:	d0ed      	beq.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b004      	add	sp, #16
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40007000 	.word	0x40007000
 8001714:	fffff9ff 	.word	0xfffff9ff
 8001718:	20000000 	.word	0x20000000
 800171c:	000f4240 	.word	0x000f4240

08001720 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	23e0      	movs	r3, #224	; 0xe0
 800172a:	01db      	lsls	r3, r3, #7
 800172c:	4013      	ands	r3, r2
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e2f3      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	4013      	ands	r3, r2
 8001752:	d100      	bne.n	8001756 <HAL_RCC_OscConfig+0x1e>
 8001754:	e07c      	b.n	8001850 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001756:	4bc3      	ldr	r3, [pc, #780]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2238      	movs	r2, #56	; 0x38
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001760:	4bc0      	ldr	r3, [pc, #768]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2203      	movs	r2, #3
 8001766:	4013      	ands	r3, r2
 8001768:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2b10      	cmp	r3, #16
 800176e:	d102      	bne.n	8001776 <HAL_RCC_OscConfig+0x3e>
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d002      	beq.n	800177c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b08      	cmp	r3, #8
 800177a:	d10b      	bne.n	8001794 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	4bb9      	ldr	r3, [pc, #740]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	029b      	lsls	r3, r3, #10
 8001784:	4013      	ands	r3, r2
 8001786:	d062      	beq.n	800184e <HAL_RCC_OscConfig+0x116>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d15e      	bne.n	800184e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e2ce      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	025b      	lsls	r3, r3, #9
 800179c:	429a      	cmp	r2, r3
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_OscConfig+0x78>
 80017a0:	4bb0      	ldr	r3, [pc, #704]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4baf      	ldr	r3, [pc, #700]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	0249      	lsls	r1, r1, #9
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e020      	b.n	80017f2 <HAL_RCC_OscConfig+0xba>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	23a0      	movs	r3, #160	; 0xa0
 80017b6:	02db      	lsls	r3, r3, #11
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d10e      	bne.n	80017da <HAL_RCC_OscConfig+0xa2>
 80017bc:	4ba9      	ldr	r3, [pc, #676]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4ba8      	ldr	r3, [pc, #672]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	2180      	movs	r1, #128	; 0x80
 80017c4:	02c9      	lsls	r1, r1, #11
 80017c6:	430a      	orrs	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	4ba6      	ldr	r3, [pc, #664]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4ba5      	ldr	r3, [pc, #660]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0249      	lsls	r1, r1, #9
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e00b      	b.n	80017f2 <HAL_RCC_OscConfig+0xba>
 80017da:	4ba2      	ldr	r3, [pc, #648]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4ba1      	ldr	r3, [pc, #644]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017e0:	49a1      	ldr	r1, [pc, #644]	; (8001a68 <HAL_RCC_OscConfig+0x330>)
 80017e2:	400a      	ands	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	4b9f      	ldr	r3, [pc, #636]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b9e      	ldr	r3, [pc, #632]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	499f      	ldr	r1, [pc, #636]	; (8001a6c <HAL_RCC_OscConfig+0x334>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d014      	beq.n	8001824 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fced 	bl	80011d8 <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fce8 	bl	80011d8 <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e28d      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001816:	4b93      	ldr	r3, [pc, #588]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	029b      	lsls	r3, r3, #10
 800181e:	4013      	ands	r3, r2
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0xcc>
 8001822:	e015      	b.n	8001850 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fcd8 	bl	80011d8 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800182e:	f7ff fcd3 	bl	80011d8 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e278      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001840:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	029b      	lsls	r3, r3, #10
 8001848:	4013      	ands	r3, r2
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0xf6>
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2202      	movs	r2, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d100      	bne.n	800185c <HAL_RCC_OscConfig+0x124>
 800185a:	e099      	b.n	8001990 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185c:	4b81      	ldr	r3, [pc, #516]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2238      	movs	r2, #56	; 0x38
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001866:	4b7f      	ldr	r3, [pc, #508]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2203      	movs	r2, #3
 800186c:	4013      	ands	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b10      	cmp	r3, #16
 8001874:	d102      	bne.n	800187c <HAL_RCC_OscConfig+0x144>
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d002      	beq.n	8001882 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d135      	bne.n	80018ee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001882:	4b78      	ldr	r3, [pc, #480]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4013      	ands	r3, r2
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x162>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e24b      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b72      	ldr	r3, [pc, #456]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a74      	ldr	r2, [pc, #464]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	0019      	movs	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	021a      	lsls	r2, r3, #8
 80018aa:	4b6e      	ldr	r3, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	430a      	orrs	r2, r1
 80018ae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d112      	bne.n	80018dc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018b6:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6e      	ldr	r2, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x33c>)
 80018bc:	4013      	ands	r3, r2
 80018be:	0019      	movs	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018ca:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	0adb      	lsrs	r3, r3, #11
 80018d0:	2207      	movs	r2, #7
 80018d2:	4013      	ands	r3, r2
 80018d4:	4a68      	ldr	r2, [pc, #416]	; (8001a78 <HAL_RCC_OscConfig+0x340>)
 80018d6:	40da      	lsrs	r2, r3
 80018d8:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <HAL_RCC_OscConfig+0x344>)
 80018da:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018dc:	4b68      	ldr	r3, [pc, #416]	; (8001a80 <HAL_RCC_OscConfig+0x348>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f7ff fc1d 	bl	8001120 <HAL_InitTick>
 80018e6:	1e03      	subs	r3, r0, #0
 80018e8:	d051      	beq.n	800198e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e221      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d030      	beq.n	8001958 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018f6:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a5e      	ldr	r2, [pc, #376]	; (8001a74 <HAL_RCC_OscConfig+0x33c>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001906:	430a      	orrs	r2, r1
 8001908:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800190a:	4b56      	ldr	r3, [pc, #344]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	0049      	lsls	r1, r1, #1
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fc5e 	bl	80011d8 <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff fc59 	bl	80011d8 <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e1fe      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4013      	ands	r3, r2
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a4a      	ldr	r2, [pc, #296]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001946:	4013      	ands	r3, r2
 8001948:	0019      	movs	r1, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	021a      	lsls	r2, r3, #8
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	e01b      	b.n	8001990 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001958:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800195e:	4949      	ldr	r1, [pc, #292]	; (8001a84 <HAL_RCC_OscConfig+0x34c>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fc38 	bl	80011d8 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196e:	f7ff fc33 	bl	80011d8 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1d8      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4013      	ands	r3, r2
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x236>
 800198c:	e000      	b.n	8001990 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2208      	movs	r2, #8
 8001996:	4013      	ands	r3, r2
 8001998:	d047      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800199a:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2238      	movs	r2, #56	; 0x38
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b18      	cmp	r3, #24
 80019a4:	d10a      	bne.n	80019bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019a6:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	d03c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d138      	bne.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e1ba      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d019      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019c8:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	430a      	orrs	r2, r1
 80019ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fc02 	bl	80011d8 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff fbfd 	bl	80011d8 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e1a2      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f0:	2202      	movs	r2, #2
 80019f2:	4013      	ands	r3, r2
 80019f4:	d0f1      	beq.n	80019da <HAL_RCC_OscConfig+0x2a2>
 80019f6:	e018      	b.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	438a      	bics	r2, r1
 8001a02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fbe8 	bl	80011d8 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fbe3 	bl	80011d8 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e188      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a24:	2202      	movs	r2, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d1f1      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4013      	ands	r3, r2
 8001a32:	d100      	bne.n	8001a36 <HAL_RCC_OscConfig+0x2fe>
 8001a34:	e0c6      	b.n	8001bc4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a36:	231f      	movs	r3, #31
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2238      	movs	r2, #56	; 0x38
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	d11e      	bne.n	8001a88 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	2202      	movs	r2, #2
 8001a50:	4013      	ands	r3, r2
 8001a52:	d100      	bne.n	8001a56 <HAL_RCC_OscConfig+0x31e>
 8001a54:	e0b6      	b.n	8001bc4 <HAL_RCC_OscConfig+0x48c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d000      	beq.n	8001a60 <HAL_RCC_OscConfig+0x328>
 8001a5e:	e0b1      	b.n	8001bc4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e166      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
 8001a64:	40021000 	.word	0x40021000
 8001a68:	fffeffff 	.word	0xfffeffff
 8001a6c:	fffbffff 	.word	0xfffbffff
 8001a70:	ffff80ff 	.word	0xffff80ff
 8001a74:	ffffc7ff 	.word	0xffffc7ff
 8001a78:	00f42400 	.word	0x00f42400
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000004 	.word	0x20000004
 8001a84:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a88:	4bac      	ldr	r3, [pc, #688]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	055b      	lsls	r3, r3, #21
 8001a90:	4013      	ands	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0x360>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x362>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d011      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4ba7      	ldr	r3, [pc, #668]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aa2:	4ba6      	ldr	r3, [pc, #664]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	0549      	lsls	r1, r1, #21
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aac:	4ba3      	ldr	r3, [pc, #652]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	055b      	lsls	r3, r3, #21
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001aba:	231f      	movs	r3, #31
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac2:	4b9f      	ldr	r3, [pc, #636]	; (8001d40 <HAL_RCC_OscConfig+0x608>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	d11a      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ace:	4b9c      	ldr	r3, [pc, #624]	; (8001d40 <HAL_RCC_OscConfig+0x608>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b9b      	ldr	r3, [pc, #620]	; (8001d40 <HAL_RCC_OscConfig+0x608>)
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	0049      	lsls	r1, r1, #1
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fb7c 	bl	80011d8 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae6:	f7ff fb77 	bl	80011d8 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e11c      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af8:	4b91      	ldr	r3, [pc, #580]	; (8001d40 <HAL_RCC_OscConfig+0x608>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x3e2>
 8001b0c:	4b8b      	ldr	r3, [pc, #556]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b10:	4b8a      	ldr	r3, [pc, #552]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	430a      	orrs	r2, r1
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b18:	e01c      	b.n	8001b54 <HAL_RCC_OscConfig+0x41c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x404>
 8001b22:	4b86      	ldr	r3, [pc, #536]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b26:	4b85      	ldr	r3, [pc, #532]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b28:	2104      	movs	r1, #4
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b2e:	4b83      	ldr	r3, [pc, #524]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b32:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	430a      	orrs	r2, r1
 8001b38:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0x41c>
 8001b3c:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b40:	4b7e      	ldr	r3, [pc, #504]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	438a      	bics	r2, r1
 8001b46:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b48:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b4c:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b4e:	2104      	movs	r1, #4
 8001b50:	438a      	bics	r2, r1
 8001b52:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d014      	beq.n	8001b86 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fb3c 	bl	80011d8 <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b64:	e009      	b.n	8001b7a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7ff fb37 	bl	80011d8 <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	4a74      	ldr	r2, [pc, #464]	; (8001d44 <HAL_RCC_OscConfig+0x60c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0db      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7a:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x42e>
 8001b84:	e013      	b.n	8001bae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff fb27 	bl	80011d8 <HAL_GetTick>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b8e:	e009      	b.n	8001ba4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff fb22 	bl	80011d8 <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x60c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0c6      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba4:	4b65      	ldr	r3, [pc, #404]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001bae:	231f      	movs	r3, #31
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001bb8:	4b60      	ldr	r3, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bbc:	4b5f      	ldr	r3, [pc, #380]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001bbe:	4962      	ldr	r1, [pc, #392]	; (8001d48 <HAL_RCC_OscConfig+0x610>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d100      	bne.n	8001bce <HAL_RCC_OscConfig+0x496>
 8001bcc:	e0b0      	b.n	8001d30 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bce:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2238      	movs	r2, #56	; 0x38
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d100      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4a4>
 8001bda:	e078      	b.n	8001cce <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d153      	bne.n	8001c8c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be4:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b54      	ldr	r3, [pc, #336]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001bea:	4958      	ldr	r1, [pc, #352]	; (8001d4c <HAL_RCC_OscConfig+0x614>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff faf2 	bl	80011d8 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff faed 	bl	80011d8 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e092      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	049b      	lsls	r3, r3, #18
 8001c14:	4013      	ands	r3, r2
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c18:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_RCC_OscConfig+0x618>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1a      	ldr	r2, [r3, #32]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	0449      	lsls	r1, r1, #17
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c54:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c5a:	2180      	movs	r1, #128	; 0x80
 8001c5c:	0549      	lsls	r1, r1, #21
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fab9 	bl	80011d8 <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff fab4 	bl	80011d8 <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e059      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	049b      	lsls	r3, r3, #18
 8001c86:	4013      	ands	r3, r2
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x534>
 8001c8a:	e051      	b.n	8001d30 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c92:	492e      	ldr	r1, [pc, #184]	; (8001d4c <HAL_RCC_OscConfig+0x614>)
 8001c94:	400a      	ands	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff fa9e 	bl	80011d8 <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7ff fa99 	bl	80011d8 <HAL_GetTick>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e03e      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	049b      	lsls	r3, r3, #18
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001cc6:	4923      	ldr	r1, [pc, #140]	; (8001d54 <HAL_RCC_OscConfig+0x61c>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	e030      	b.n	8001d30 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e02b      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d11e      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2270      	movs	r2, #112	; 0x70
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d117      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	23fe      	movs	r3, #254	; 0xfe
 8001d00:	01db      	lsls	r3, r3, #7
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d10e      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	23f8      	movs	r3, #248	; 0xf8
 8001d12:	039b      	lsls	r3, r3, #14
 8001d14:	401a      	ands	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	0f5b      	lsrs	r3, r3, #29
 8001d22:	075a      	lsls	r2, r3, #29
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b008      	add	sp, #32
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40007000 	.word	0x40007000
 8001d44:	00001388 	.word	0x00001388
 8001d48:	efffffff 	.word	0xefffffff
 8001d4c:	feffffff 	.word	0xfeffffff
 8001d50:	1fc1808c 	.word	0x1fc1808c
 8001d54:	effefffc 	.word	0xeffefffc

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0e9      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2207      	movs	r2, #7
 8001d72:	4013      	ands	r3, r2
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d91e      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b73      	ldr	r3, [pc, #460]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2207      	movs	r2, #7
 8001d80:	4393      	bics	r3, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	4b70      	ldr	r3, [pc, #448]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d8c:	f7ff fa24 	bl	80011d8 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d94:	e009      	b.n	8001daa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d96:	f7ff fa1f 	bl	80011d8 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4a6a      	ldr	r2, [pc, #424]	; (8001f4c <HAL_RCC_ClockConfig+0x1f4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e0ca      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2207      	movs	r2, #7
 8001db0:	4013      	ands	r3, r2
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d1ee      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d015      	beq.n	8001dee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d006      	beq.n	8001dda <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd2:	21e0      	movs	r1, #224	; 0xe0
 8001dd4:	01c9      	lsls	r1, r1, #7
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4a5d      	ldr	r2, [pc, #372]	; (8001f54 <HAL_RCC_ClockConfig+0x1fc>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	0019      	movs	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	d057      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	029b      	lsls	r3, r3, #10
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d12b      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e097      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e18:	4b4d      	ldr	r3, [pc, #308]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	049b      	lsls	r3, r3, #18
 8001e20:	4013      	ands	r3, r2
 8001e22:	d11f      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e08b      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d113      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e07f      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e48:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e074      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e06d      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e64:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2207      	movs	r2, #7
 8001e6a:	4393      	bics	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e78:	f7ff f9ae 	bl	80011d8 <HAL_GetTick>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e80:	e009      	b.n	8001e96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e82:	f7ff f9a9 	bl	80011d8 <HAL_GetTick>
 8001e86:	0002      	movs	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <HAL_RCC_ClockConfig+0x1f4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e054      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2238      	movs	r2, #56	; 0x38
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1ec      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2207      	movs	r2, #7
 8001eae:	4013      	ands	r3, r2
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d21e      	bcs.n	8001ef4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2207      	movs	r2, #7
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ec8:	f7ff f986 	bl	80011d8 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed2:	f7ff f981 	bl	80011d8 <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <HAL_RCC_ClockConfig+0x1f4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e02c      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2207      	movs	r2, #7
 8001eec:	4013      	ands	r3, r2
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1ee      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2204      	movs	r2, #4
 8001efa:	4013      	ands	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <HAL_RCC_ClockConfig+0x200>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f12:	f000 f829 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f16:	0001      	movs	r1, r0
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	220f      	movs	r2, #15
 8001f20:	401a      	ands	r2, r3
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_RCC_ClockConfig+0x204>)
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	58d3      	ldr	r3, [r2, r3]
 8001f28:	221f      	movs	r2, #31
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	000a      	movs	r2, r1
 8001f2e:	40da      	lsrs	r2, r3
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_ClockConfig+0x208>)
 8001f32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x20c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff f8f1 	bl	8001120 <HAL_InitTick>
 8001f3e:	0003      	movs	r3, r0
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b004      	add	sp, #16
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	00001388 	.word	0x00001388
 8001f50:	40021000 	.word	0x40021000
 8001f54:	fffff0ff 	.word	0xfffff0ff
 8001f58:	ffff8fff 	.word	0xffff8fff
 8001f5c:	08004144 	.word	0x08004144
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2238      	movs	r2, #56	; 0x38
 8001f74:	4013      	ands	r3, r2
 8001f76:	d10f      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f78:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0adb      	lsrs	r3, r3, #11
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	2201      	movs	r2, #1
 8001f84:	409a      	lsls	r2, r3
 8001f86:	0013      	movs	r3, r2
 8001f88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	4835      	ldr	r0, [pc, #212]	; (8002064 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f8e:	f7fe f8b7 	bl	8000100 <__udivsi3>
 8001f92:	0003      	movs	r3, r0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e05d      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f98:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2238      	movs	r2, #56	; 0x38
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d102      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	e054      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2238      	movs	r2, #56	; 0x38
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d138      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	4013      	ands	r3, r2
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	4824      	ldr	r0, [pc, #144]	; (8002068 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fd8:	f7fe f892 	bl	8000100 <__udivsi3>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	0019      	movs	r1, r3
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	227f      	movs	r2, #127	; 0x7f
 8001fe8:	4013      	ands	r3, r2
 8001fea:	434b      	muls	r3, r1
 8001fec:	617b      	str	r3, [r7, #20]
        break;
 8001fee:	e00d      	b.n	800200c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	481c      	ldr	r0, [pc, #112]	; (8002064 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ff4:	f7fe f884 	bl	8000100 <__udivsi3>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	227f      	movs	r2, #127	; 0x7f
 8002004:	4013      	ands	r3, r2
 8002006:	434b      	muls	r3, r1
 8002008:	617b      	str	r3, [r7, #20]
        break;
 800200a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0f5b      	lsrs	r3, r3, #29
 8002012:	2207      	movs	r2, #7
 8002014:	4013      	ands	r3, r2
 8002016:	3301      	adds	r3, #1
 8002018:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	6978      	ldr	r0, [r7, #20]
 800201e:	f7fe f86f 	bl	8000100 <__udivsi3>
 8002022:	0003      	movs	r3, r0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	e015      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2238      	movs	r2, #56	; 0x38
 800202e:	4013      	ands	r3, r2
 8002030:	2b20      	cmp	r3, #32
 8002032:	d103      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	e00b      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2238      	movs	r2, #56	; 0x38
 8002042:	4013      	ands	r3, r2
 8002044:	2b18      	cmp	r3, #24
 8002046:	d103      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002048:	23fa      	movs	r3, #250	; 0xfa
 800204a:	01db      	lsls	r3, r3, #7
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	e001      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002054:	693b      	ldr	r3, [r7, #16]
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b006      	add	sp, #24
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	40021000 	.word	0x40021000
 8002064:	00f42400 	.word	0x00f42400
 8002068:	007a1200 	.word	0x007a1200

0800206c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002070:	4b02      	ldr	r3, [pc, #8]	; (800207c <HAL_RCC_GetHCLKFreq+0x10>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002084:	f7ff fff2 	bl	800206c <HAL_RCC_GetHCLKFreq>
 8002088:	0004      	movs	r4, r0
 800208a:	f7ff fb49 	bl	8001720 <LL_RCC_GetAPB1Prescaler>
 800208e:	0003      	movs	r3, r0
 8002090:	0b1a      	lsrs	r2, r3, #12
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002094:	0092      	lsls	r2, r2, #2
 8002096:	58d3      	ldr	r3, [r2, r3]
 8002098:	221f      	movs	r2, #31
 800209a:	4013      	ands	r3, r2
 800209c:	40dc      	lsrs	r4, r3
 800209e:	0023      	movs	r3, r4
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bdb0      	pop	{r4, r5, r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	08004184 	.word	0x08004184

080020ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80020b4:	2313      	movs	r3, #19
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020bc:	2312      	movs	r3, #18
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	029b      	lsls	r3, r3, #10
 80020cc:	4013      	ands	r3, r2
 80020ce:	d100      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80020d0:	e0a3      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d2:	2011      	movs	r0, #17
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b86      	ldr	r3, [pc, #536]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	055b      	lsls	r3, r3, #21
 80020e2:	4013      	ands	r3, r2
 80020e4:	d110      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b83      	ldr	r3, [pc, #524]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ea:	4b82      	ldr	r3, [pc, #520]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	0549      	lsls	r1, r1, #21
 80020f0:	430a      	orrs	r2, r1
 80020f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80020f4:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	183b      	adds	r3, r7, r0
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002108:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	0049      	lsls	r1, r1, #1
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002116:	f7ff f85f 	bl	80011d8 <HAL_GetTick>
 800211a:	0003      	movs	r3, r0
 800211c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800211e:	e00b      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7ff f85a 	bl	80011d8 <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d904      	bls.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800212e:	2313      	movs	r3, #19
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2203      	movs	r2, #3
 8002134:	701a      	strb	r2, [r3, #0]
        break;
 8002136:	e005      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002138:	4b6f      	ldr	r3, [pc, #444]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4013      	ands	r3, r2
 8002142:	d0ed      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002144:	2313      	movs	r3, #19
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d154      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800214e:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002150:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002152:	23c0      	movs	r3, #192	; 0xc0
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4013      	ands	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d019      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	429a      	cmp	r2, r3
 8002168:	d014      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800216a:	4b62      	ldr	r3, [pc, #392]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	4a63      	ldr	r2, [pc, #396]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002174:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002176:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002178:	4b5e      	ldr	r3, [pc, #376]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	0249      	lsls	r1, r1, #9
 800217e:	430a      	orrs	r2, r1
 8002180:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002182:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002184:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002186:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002188:	495d      	ldr	r1, [pc, #372]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800218a:	400a      	ands	r2, r1
 800218c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800218e:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2201      	movs	r2, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d016      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff f81c 	bl	80011d8 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a4:	e00c      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7ff f817 	bl	80011d8 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a54      	ldr	r2, [pc, #336]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d904      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80021b6:	2313      	movs	r3, #19
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	2203      	movs	r2, #3
 80021bc:	701a      	strb	r2, [r3, #0]
            break;
 80021be:	e004      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c0:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	2202      	movs	r2, #2
 80021c6:	4013      	ands	r3, r2
 80021c8:	d0ed      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80021ca:	2313      	movs	r3, #19
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d4:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	4a48      	ldr	r2, [pc, #288]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80021da:	4013      	ands	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80021e8:	e00c      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021ea:	2312      	movs	r3, #18
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2213      	movs	r2, #19
 80021f0:	18ba      	adds	r2, r7, r2
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e005      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f8:	2312      	movs	r3, #18
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	2213      	movs	r2, #19
 80021fe:	18ba      	adds	r2, r7, r2
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002204:	2311      	movs	r3, #17
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002214:	493c      	ldr	r1, [pc, #240]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002216:	400a      	ands	r2, r1
 8002218:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	4013      	ands	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002224:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	2203      	movs	r2, #3
 800222a:	4393      	bics	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002234:	430a      	orrs	r2, r1
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2202      	movs	r2, #2
 800223e:	4013      	ands	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	220c      	movs	r2, #12
 8002248:	4393      	bics	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002252:	430a      	orrs	r2, r1
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2220      	movs	r2, #32
 800225c:	4013      	ands	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	4a29      	ldr	r2, [pc, #164]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002270:	430a      	orrs	r2, r1
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	01db      	lsls	r3, r3, #7
 800227c:	4013      	ands	r3, r2
 800227e:	d015      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	0899      	lsrs	r1, r3, #2
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800228e:	430a      	orrs	r2, r1
 8002290:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	05db      	lsls	r3, r3, #23
 800229a:	429a      	cmp	r2, r3
 800229c:	d106      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	0249      	lsls	r1, r1, #9
 80022a8:	430a      	orrs	r2, r1
 80022aa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4013      	ands	r3, r2
 80022b6:	d016      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022be:	4013      	ands	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	01db      	lsls	r3, r3, #7
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d106      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	0249      	lsls	r1, r1, #9
 80022e2:	430a      	orrs	r2, r1
 80022e4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80022e6:	2312      	movs	r3, #18
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	781b      	ldrb	r3, [r3, #0]
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b006      	add	sp, #24
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40007000 	.word	0x40007000
 80022fc:	fffffcff 	.word	0xfffffcff
 8002300:	fffeffff 	.word	0xfffeffff
 8002304:	00001388 	.word	0x00001388
 8002308:	efffffff 	.word	0xefffffff
 800230c:	ffffcfff 	.word	0xffffcfff
 8002310:	ffff3fff 	.word	0xffff3fff

08002314 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	223d      	movs	r2, #61	; 0x3d
 8002320:	5c9b      	ldrb	r3, [r3, r2]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d001      	beq.n	800232c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e034      	b.n	8002396 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	223d      	movs	r2, #61	; 0x3d
 8002330:	2102      	movs	r1, #2
 8002332:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_TIM_Base_Start+0x8c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_TIM_Base_Start+0x3e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_TIM_Base_Start+0x90>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d004      	beq.n	8002352 <HAL_TIM_Base_Start+0x3e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <HAL_TIM_Base_Start+0x94>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d116      	bne.n	8002380 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a14      	ldr	r2, [pc, #80]	; (80023ac <HAL_TIM_Base_Start+0x98>)
 800235a:	4013      	ands	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b06      	cmp	r3, #6
 8002362:	d016      	beq.n	8002392 <HAL_TIM_Base_Start+0x7e>
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	025b      	lsls	r3, r3, #9
 800236a:	429a      	cmp	r2, r3
 800236c:	d011      	beq.n	8002392 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237e:	e008      	b.n	8002392 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e000      	b.n	8002394 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002392:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b004      	add	sp, #16
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40000400 	.word	0x40000400
 80023a8:	40014000 	.word	0x40014000
 80023ac:	00010007 	.word	0x00010007

080023b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e04a      	b.n	8002458 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	223d      	movs	r2, #61	; 0x3d
 80023c6:	5c9b      	ldrb	r3, [r3, r2]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d107      	bne.n	80023de <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	223c      	movs	r2, #60	; 0x3c
 80023d2:	2100      	movs	r1, #0
 80023d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	0018      	movs	r0, r3
 80023da:	f7fe fcf9 	bl	8000dd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	223d      	movs	r2, #61	; 0x3d
 80023e2:	2102      	movs	r1, #2
 80023e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	0019      	movs	r1, r3
 80023f0:	0010      	movs	r0, r2
 80023f2:	f000 fba7 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2248      	movs	r2, #72	; 0x48
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	223e      	movs	r2, #62	; 0x3e
 8002402:	2101      	movs	r1, #1
 8002404:	5499      	strb	r1, [r3, r2]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	223f      	movs	r2, #63	; 0x3f
 800240a:	2101      	movs	r1, #1
 800240c:	5499      	strb	r1, [r3, r2]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	2101      	movs	r1, #1
 8002414:	5499      	strb	r1, [r3, r2]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2241      	movs	r2, #65	; 0x41
 800241a:	2101      	movs	r1, #1
 800241c:	5499      	strb	r1, [r3, r2]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2242      	movs	r2, #66	; 0x42
 8002422:	2101      	movs	r1, #1
 8002424:	5499      	strb	r1, [r3, r2]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2243      	movs	r2, #67	; 0x43
 800242a:	2101      	movs	r1, #1
 800242c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2244      	movs	r2, #68	; 0x44
 8002432:	2101      	movs	r1, #1
 8002434:	5499      	strb	r1, [r3, r2]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2245      	movs	r2, #69	; 0x45
 800243a:	2101      	movs	r1, #1
 800243c:	5499      	strb	r1, [r3, r2]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2246      	movs	r2, #70	; 0x46
 8002442:	2101      	movs	r1, #1
 8002444:	5499      	strb	r1, [r3, r2]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2247      	movs	r2, #71	; 0x47
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	223d      	movs	r2, #61	; 0x3d
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e04a      	b.n	8002508 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	223d      	movs	r2, #61	; 0x3d
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d107      	bne.n	800248e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	223c      	movs	r2, #60	; 0x3c
 8002482:	2100      	movs	r1, #0
 8002484:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0018      	movs	r0, r3
 800248a:	f7fe fc81 	bl	8000d90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	223d      	movs	r2, #61	; 0x3d
 8002492:	2102      	movs	r1, #2
 8002494:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	0019      	movs	r1, r3
 80024a0:	0010      	movs	r0, r2
 80024a2:	f000 fb4f 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2248      	movs	r2, #72	; 0x48
 80024aa:	2101      	movs	r1, #1
 80024ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	223e      	movs	r2, #62	; 0x3e
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	223f      	movs	r2, #63	; 0x3f
 80024ba:	2101      	movs	r1, #1
 80024bc:	5499      	strb	r1, [r3, r2]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2240      	movs	r2, #64	; 0x40
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2241      	movs	r2, #65	; 0x41
 80024ca:	2101      	movs	r1, #1
 80024cc:	5499      	strb	r1, [r3, r2]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2242      	movs	r2, #66	; 0x42
 80024d2:	2101      	movs	r1, #1
 80024d4:	5499      	strb	r1, [r3, r2]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2243      	movs	r2, #67	; 0x43
 80024da:	2101      	movs	r1, #1
 80024dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2244      	movs	r2, #68	; 0x44
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2245      	movs	r2, #69	; 0x45
 80024ea:	2101      	movs	r1, #1
 80024ec:	5499      	strb	r1, [r3, r2]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2246      	movs	r2, #70	; 0x46
 80024f2:	2101      	movs	r1, #1
 80024f4:	5499      	strb	r1, [r3, r2]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2247      	movs	r2, #71	; 0x47
 80024fa:	2101      	movs	r1, #1
 80024fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	223d      	movs	r2, #61	; 0x3d
 8002502:	2101      	movs	r1, #1
 8002504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d108      	bne.n	8002532 <HAL_TIM_PWM_Start+0x22>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	223e      	movs	r2, #62	; 0x3e
 8002524:	5c9b      	ldrb	r3, [r3, r2]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	4193      	sbcs	r3, r2
 800252e:	b2db      	uxtb	r3, r3
 8002530:	e037      	b.n	80025a2 <HAL_TIM_PWM_Start+0x92>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d108      	bne.n	800254a <HAL_TIM_PWM_Start+0x3a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	223f      	movs	r2, #63	; 0x3f
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	1e5a      	subs	r2, r3, #1
 8002544:	4193      	sbcs	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	e02b      	b.n	80025a2 <HAL_TIM_PWM_Start+0x92>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b08      	cmp	r3, #8
 800254e:	d108      	bne.n	8002562 <HAL_TIM_PWM_Start+0x52>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	5c9b      	ldrb	r3, [r3, r2]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	1e5a      	subs	r2, r3, #1
 800255c:	4193      	sbcs	r3, r2
 800255e:	b2db      	uxtb	r3, r3
 8002560:	e01f      	b.n	80025a2 <HAL_TIM_PWM_Start+0x92>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d108      	bne.n	800257a <HAL_TIM_PWM_Start+0x6a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2241      	movs	r2, #65	; 0x41
 800256c:	5c9b      	ldrb	r3, [r3, r2]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	1e5a      	subs	r2, r3, #1
 8002574:	4193      	sbcs	r3, r2
 8002576:	b2db      	uxtb	r3, r3
 8002578:	e013      	b.n	80025a2 <HAL_TIM_PWM_Start+0x92>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b10      	cmp	r3, #16
 800257e:	d108      	bne.n	8002592 <HAL_TIM_PWM_Start+0x82>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2242      	movs	r2, #66	; 0x42
 8002584:	5c9b      	ldrb	r3, [r3, r2]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	1e5a      	subs	r2, r3, #1
 800258c:	4193      	sbcs	r3, r2
 800258e:	b2db      	uxtb	r3, r3
 8002590:	e007      	b.n	80025a2 <HAL_TIM_PWM_Start+0x92>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2243      	movs	r2, #67	; 0x43
 8002596:	5c9b      	ldrb	r3, [r3, r2]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	1e5a      	subs	r2, r3, #1
 800259e:	4193      	sbcs	r3, r2
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e085      	b.n	80026b6 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d104      	bne.n	80025ba <HAL_TIM_PWM_Start+0xaa>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	223e      	movs	r2, #62	; 0x3e
 80025b4:	2102      	movs	r1, #2
 80025b6:	5499      	strb	r1, [r3, r2]
 80025b8:	e023      	b.n	8002602 <HAL_TIM_PWM_Start+0xf2>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d104      	bne.n	80025ca <HAL_TIM_PWM_Start+0xba>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	223f      	movs	r2, #63	; 0x3f
 80025c4:	2102      	movs	r1, #2
 80025c6:	5499      	strb	r1, [r3, r2]
 80025c8:	e01b      	b.n	8002602 <HAL_TIM_PWM_Start+0xf2>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d104      	bne.n	80025da <HAL_TIM_PWM_Start+0xca>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	2102      	movs	r1, #2
 80025d6:	5499      	strb	r1, [r3, r2]
 80025d8:	e013      	b.n	8002602 <HAL_TIM_PWM_Start+0xf2>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b0c      	cmp	r3, #12
 80025de:	d104      	bne.n	80025ea <HAL_TIM_PWM_Start+0xda>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2241      	movs	r2, #65	; 0x41
 80025e4:	2102      	movs	r1, #2
 80025e6:	5499      	strb	r1, [r3, r2]
 80025e8:	e00b      	b.n	8002602 <HAL_TIM_PWM_Start+0xf2>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d104      	bne.n	80025fa <HAL_TIM_PWM_Start+0xea>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2242      	movs	r2, #66	; 0x42
 80025f4:	2102      	movs	r1, #2
 80025f6:	5499      	strb	r1, [r3, r2]
 80025f8:	e003      	b.n	8002602 <HAL_TIM_PWM_Start+0xf2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2243      	movs	r2, #67	; 0x43
 80025fe:	2102      	movs	r1, #2
 8002600:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	2201      	movs	r2, #1
 800260a:	0018      	movs	r0, r3
 800260c:	f000 fe70 	bl	80032f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2a      	ldr	r2, [pc, #168]	; (80026c0 <HAL_TIM_PWM_Start+0x1b0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00e      	beq.n	8002638 <HAL_TIM_PWM_Start+0x128>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <HAL_TIM_PWM_Start+0x1b4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_TIM_PWM_Start+0x128>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <HAL_TIM_PWM_Start+0x1b8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_TIM_PWM_Start+0x128>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a26      	ldr	r2, [pc, #152]	; (80026cc <HAL_TIM_PWM_Start+0x1bc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_TIM_PWM_Start+0x12c>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_TIM_PWM_Start+0x12e>
 800263c:	2300      	movs	r3, #0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0209      	lsls	r1, r1, #8
 8002650:	430a      	orrs	r2, r1
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_TIM_PWM_Start+0x1b0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_TIM_PWM_Start+0x162>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_TIM_PWM_Start+0x1c0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_TIM_PWM_Start+0x162>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <HAL_TIM_PWM_Start+0x1b4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d116      	bne.n	80026a0 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <HAL_TIM_PWM_Start+0x1c4>)
 800267a:	4013      	ands	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d016      	beq.n	80026b2 <HAL_TIM_PWM_Start+0x1a2>
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	025b      	lsls	r3, r3, #9
 800268a:	429a      	cmp	r2, r3
 800268c:	d011      	beq.n	80026b2 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269e:	e008      	b.n	80026b2 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2101      	movs	r1, #1
 80026ac:	430a      	orrs	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e000      	b.n	80026b4 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b004      	add	sp, #16
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40014400 	.word	0x40014400
 80026cc:	40014800 	.word	0x40014800
 80026d0:	40000400 	.word	0x40000400
 80026d4:	00010007 	.word	0x00010007

080026d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e4:	2317      	movs	r3, #23
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	223c      	movs	r2, #60	; 0x3c
 80026f0:	5c9b      	ldrb	r3, [r3, r2]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_OC_ConfigChannel+0x22>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e048      	b.n	800278c <HAL_TIM_OC_ConfigChannel+0xb4>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	223c      	movs	r2, #60	; 0x3c
 80026fe:	2101      	movs	r1, #1
 8002700:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b14      	cmp	r3, #20
 8002706:	d835      	bhi.n	8002774 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	009a      	lsls	r2, r3, #2
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800270e:	18d3      	adds	r3, r2, r3
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	0011      	movs	r1, r2
 800271c:	0018      	movs	r0, r3
 800271e:	f000 fa87 	bl	8002c30 <TIM_OC1_SetConfig>
      break;
 8002722:	e02c      	b.n	800277e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	0011      	movs	r1, r2
 800272c:	0018      	movs	r0, r3
 800272e:	f000 fb09 	bl	8002d44 <TIM_OC2_SetConfig>
      break;
 8002732:	e024      	b.n	800277e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	0011      	movs	r1, r2
 800273c:	0018      	movs	r0, r3
 800273e:	f000 fb85 	bl	8002e4c <TIM_OC3_SetConfig>
      break;
 8002742:	e01c      	b.n	800277e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f000 fc05 	bl	8002f5c <TIM_OC4_SetConfig>
      break;
 8002752:	e014      	b.n	800277e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	0011      	movs	r1, r2
 800275c:	0018      	movs	r0, r3
 800275e:	f000 fc67 	bl	8003030 <TIM_OC5_SetConfig>
      break;
 8002762:	e00c      	b.n	800277e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	0011      	movs	r1, r2
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fcbf 	bl	80030f0 <TIM_OC6_SetConfig>
      break;
 8002772:	e004      	b.n	800277e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002774:	2317      	movs	r3, #23
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
      break;
 800277c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	223c      	movs	r2, #60	; 0x3c
 8002782:	2100      	movs	r1, #0
 8002784:	5499      	strb	r1, [r3, r2]

  return status;
 8002786:	2317      	movs	r3, #23
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	781b      	ldrb	r3, [r3, #0]
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b006      	add	sp, #24
 8002792:	bd80      	pop	{r7, pc}
 8002794:	080041a4 	.word	0x080041a4

08002798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a4:	2317      	movs	r3, #23
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	223c      	movs	r2, #60	; 0x3c
 80027b0:	5c9b      	ldrb	r3, [r3, r2]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x22>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e0e5      	b.n	8002986 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	223c      	movs	r2, #60	; 0x3c
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b14      	cmp	r3, #20
 80027c6:	d900      	bls.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80027c8:	e0d1      	b.n	800296e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	009a      	lsls	r2, r3, #2
 80027ce:	4b70      	ldr	r3, [pc, #448]	; (8002990 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80027d0:	18d3      	adds	r3, r2, r3
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	0011      	movs	r1, r2
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 fa26 	bl	8002c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2108      	movs	r1, #8
 80027f0:	430a      	orrs	r2, r1
 80027f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2104      	movs	r1, #4
 8002800:	438a      	bics	r2, r1
 8002802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6999      	ldr	r1, [r3, #24]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	619a      	str	r2, [r3, #24]
      break;
 8002816:	e0af      	b.n	8002978 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	0011      	movs	r1, r2
 8002820:	0018      	movs	r0, r3
 8002822:	f000 fa8f 	bl	8002d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	0109      	lsls	r1, r1, #4
 8002834:	430a      	orrs	r2, r1
 8002836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4954      	ldr	r1, [pc, #336]	; (8002994 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002844:	400a      	ands	r2, r1
 8002846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6999      	ldr	r1, [r3, #24]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	021a      	lsls	r2, r3, #8
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	619a      	str	r2, [r3, #24]
      break;
 800285c:	e08c      	b.n	8002978 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	0011      	movs	r1, r2
 8002866:	0018      	movs	r0, r3
 8002868:	f000 faf0 	bl	8002e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2108      	movs	r1, #8
 8002878:	430a      	orrs	r2, r1
 800287a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2104      	movs	r1, #4
 8002888:	438a      	bics	r2, r1
 800288a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69d9      	ldr	r1, [r3, #28]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	61da      	str	r2, [r3, #28]
      break;
 800289e:	e06b      	b.n	8002978 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	0011      	movs	r1, r2
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 fb57 	bl	8002f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2180      	movs	r1, #128	; 0x80
 80028ba:	0109      	lsls	r1, r1, #4
 80028bc:	430a      	orrs	r2, r1
 80028be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69da      	ldr	r2, [r3, #28]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4932      	ldr	r1, [pc, #200]	; (8002994 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69d9      	ldr	r1, [r3, #28]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	021a      	lsls	r2, r3, #8
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	61da      	str	r2, [r3, #28]
      break;
 80028e4:	e048      	b.n	8002978 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	0011      	movs	r1, r2
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 fb9e 	bl	8003030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2108      	movs	r1, #8
 8002900:	430a      	orrs	r2, r1
 8002902:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2104      	movs	r1, #4
 8002910:	438a      	bics	r2, r1
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002926:	e027      	b.n	8002978 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f000 fbdd 	bl	80030f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2180      	movs	r1, #128	; 0x80
 8002942:	0109      	lsls	r1, r1, #4
 8002944:	430a      	orrs	r2, r1
 8002946:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4910      	ldr	r1, [pc, #64]	; (8002994 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002954:	400a      	ands	r2, r1
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	021a      	lsls	r2, r3, #8
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800296c:	e004      	b.n	8002978 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800296e:	2317      	movs	r3, #23
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
      break;
 8002976:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	223c      	movs	r2, #60	; 0x3c
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

  return status;
 8002980:	2317      	movs	r3, #23
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	781b      	ldrb	r3, [r3, #0]
}
 8002986:	0018      	movs	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	b006      	add	sp, #24
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	080041f8 	.word	0x080041f8
 8002994:	fffffbff 	.word	0xfffffbff

08002998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a2:	230f      	movs	r3, #15
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	223c      	movs	r2, #60	; 0x3c
 80029ae:	5c9b      	ldrb	r3, [r3, r2]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_TIM_ConfigClockSource+0x20>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e0bc      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	223c      	movs	r2, #60	; 0x3c
 80029bc:	2101      	movs	r1, #1
 80029be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	223d      	movs	r2, #61	; 0x3d
 80029c4:	2102      	movs	r1, #2
 80029c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4a5a      	ldr	r2, [pc, #360]	; (8002b3c <HAL_TIM_ConfigClockSource+0x1a4>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4a59      	ldr	r2, [pc, #356]	; (8002b40 <HAL_TIM_ConfigClockSource+0x1a8>)
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	0192      	lsls	r2, r2, #6
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d040      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0xde>
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0192      	lsls	r2, r2, #6
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d900      	bls.n	80029fe <HAL_TIM_ConfigClockSource+0x66>
 80029fc:	e088      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	0152      	lsls	r2, r2, #5
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d100      	bne.n	8002a08 <HAL_TIM_ConfigClockSource+0x70>
 8002a06:	e088      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x182>
 8002a08:	2280      	movs	r2, #128	; 0x80
 8002a0a:	0152      	lsls	r2, r2, #5
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d900      	bls.n	8002a12 <HAL_TIM_ConfigClockSource+0x7a>
 8002a10:	e07e      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a12:	2b70      	cmp	r3, #112	; 0x70
 8002a14:	d018      	beq.n	8002a48 <HAL_TIM_ConfigClockSource+0xb0>
 8002a16:	d900      	bls.n	8002a1a <HAL_TIM_ConfigClockSource+0x82>
 8002a18:	e07a      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a1a:	2b60      	cmp	r3, #96	; 0x60
 8002a1c:	d04f      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0x126>
 8002a1e:	d900      	bls.n	8002a22 <HAL_TIM_ConfigClockSource+0x8a>
 8002a20:	e076      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a22:	2b50      	cmp	r3, #80	; 0x50
 8002a24:	d03b      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x106>
 8002a26:	d900      	bls.n	8002a2a <HAL_TIM_ConfigClockSource+0x92>
 8002a28:	e072      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d057      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x146>
 8002a2e:	d900      	bls.n	8002a32 <HAL_TIM_ConfigClockSource+0x9a>
 8002a30:	e06e      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a32:	2b30      	cmp	r3, #48	; 0x30
 8002a34:	d063      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x166>
 8002a36:	d86b      	bhi.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d060      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x166>
 8002a3c:	d868      	bhi.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d05d      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x166>
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d05b      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x166>
 8002a46:	e063      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f000 fc2a 	bl	80032b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2277      	movs	r2, #119	; 0x77
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]
      break;
 8002a74:	e052      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f000 fc13 	bl	80032b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	01c9      	lsls	r1, r1, #7
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]
      break;
 8002a9c:	e03e      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	001a      	movs	r2, r3
 8002aac:	f000 fb84 	bl	80031b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2150      	movs	r1, #80	; 0x50
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 fbde 	bl	8003278 <TIM_ITRx_SetConfig>
      break;
 8002abc:	e02e      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	001a      	movs	r2, r3
 8002acc:	f000 fba2 	bl	8003214 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2160      	movs	r1, #96	; 0x60
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 fbce 	bl	8003278 <TIM_ITRx_SetConfig>
      break;
 8002adc:	e01e      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	001a      	movs	r2, r3
 8002aec:	f000 fb64 	bl	80031b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2140      	movs	r1, #64	; 0x40
 8002af6:	0018      	movs	r0, r3
 8002af8:	f000 fbbe 	bl	8003278 <TIM_ITRx_SetConfig>
      break;
 8002afc:	e00e      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0019      	movs	r1, r3
 8002b08:	0010      	movs	r0, r2
 8002b0a:	f000 fbb5 	bl	8003278 <TIM_ITRx_SetConfig>
      break;
 8002b0e:	e005      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002b10:	230f      	movs	r3, #15
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
      break;
 8002b18:	e000      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002b1a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	223d      	movs	r2, #61	; 0x3d
 8002b20:	2101      	movs	r1, #1
 8002b22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	223c      	movs	r2, #60	; 0x3c
 8002b28:	2100      	movs	r1, #0
 8002b2a:	5499      	strb	r1, [r3, r2]

  return status;
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	781b      	ldrb	r3, [r3, #0]
}
 8002b32:	0018      	movs	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b004      	add	sp, #16
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	ffceff88 	.word	0xffceff88
 8002b40:	ffff00ff 	.word	0xffff00ff

08002b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a2f      	ldr	r2, [pc, #188]	; (8002c14 <TIM_Base_SetConfig+0xd0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0x20>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a2e      	ldr	r2, [pc, #184]	; (8002c18 <TIM_Base_SetConfig+0xd4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d108      	bne.n	8002b76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2270      	movs	r2, #112	; 0x70
 8002b68:	4393      	bics	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <TIM_Base_SetConfig+0xd0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d013      	beq.n	8002ba6 <TIM_Base_SetConfig+0x62>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <TIM_Base_SetConfig+0xd4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00f      	beq.n	8002ba6 <TIM_Base_SetConfig+0x62>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a24      	ldr	r2, [pc, #144]	; (8002c1c <TIM_Base_SetConfig+0xd8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00b      	beq.n	8002ba6 <TIM_Base_SetConfig+0x62>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a23      	ldr	r2, [pc, #140]	; (8002c20 <TIM_Base_SetConfig+0xdc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <TIM_Base_SetConfig+0x62>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a22      	ldr	r2, [pc, #136]	; (8002c24 <TIM_Base_SetConfig+0xe0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d003      	beq.n	8002ba6 <TIM_Base_SetConfig+0x62>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a21      	ldr	r2, [pc, #132]	; (8002c28 <TIM_Base_SetConfig+0xe4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d108      	bne.n	8002bb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <TIM_Base_SetConfig+0xe8>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	001a      	movs	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <TIM_Base_SetConfig+0xd0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00b      	beq.n	8002bfe <TIM_Base_SetConfig+0xba>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <TIM_Base_SetConfig+0xdc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <TIM_Base_SetConfig+0xba>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <TIM_Base_SetConfig+0xe0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d003      	beq.n	8002bfe <TIM_Base_SetConfig+0xba>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <TIM_Base_SetConfig+0xe4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d103      	bne.n	8002c06 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	615a      	str	r2, [r3, #20]
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b004      	add	sp, #16
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40012c00 	.word	0x40012c00
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40002000 	.word	0x40002000
 8002c20:	40014000 	.word	0x40014000
 8002c24:	40014400 	.word	0x40014400
 8002c28:	40014800 	.word	0x40014800
 8002c2c:	fffffcff 	.word	0xfffffcff

08002c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4393      	bics	r3, r2
 8002c42:	001a      	movs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a32      	ldr	r2, [pc, #200]	; (8002d28 <TIM_OC1_SetConfig+0xf8>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2203      	movs	r2, #3
 8002c66:	4393      	bics	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2202      	movs	r2, #2
 8002c78:	4393      	bics	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <TIM_OC1_SetConfig+0xfc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00b      	beq.n	8002ca6 <TIM_OC1_SetConfig+0x76>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a27      	ldr	r2, [pc, #156]	; (8002d30 <TIM_OC1_SetConfig+0x100>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <TIM_OC1_SetConfig+0x76>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <TIM_OC1_SetConfig+0x104>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <TIM_OC1_SetConfig+0x76>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a25      	ldr	r2, [pc, #148]	; (8002d38 <TIM_OC1_SetConfig+0x108>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10c      	bne.n	8002cc0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	4393      	bics	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2204      	movs	r2, #4
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <TIM_OC1_SetConfig+0xfc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00b      	beq.n	8002ce0 <TIM_OC1_SetConfig+0xb0>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a19      	ldr	r2, [pc, #100]	; (8002d30 <TIM_OC1_SetConfig+0x100>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d007      	beq.n	8002ce0 <TIM_OC1_SetConfig+0xb0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <TIM_OC1_SetConfig+0x104>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <TIM_OC1_SetConfig+0xb0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <TIM_OC1_SetConfig+0x108>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d111      	bne.n	8002d04 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <TIM_OC1_SetConfig+0x10c>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <TIM_OC1_SetConfig+0x110>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	621a      	str	r2, [r3, #32]
}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b006      	add	sp, #24
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	fffeff8f 	.word	0xfffeff8f
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	fffffeff 	.word	0xfffffeff
 8002d40:	fffffdff 	.word	0xfffffdff

08002d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	2210      	movs	r2, #16
 8002d54:	4393      	bics	r3, r2
 8002d56:	001a      	movs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <TIM_OC2_SetConfig+0xe8>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a2d      	ldr	r2, [pc, #180]	; (8002e30 <TIM_OC2_SetConfig+0xec>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	4393      	bics	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <TIM_OC2_SetConfig+0xf0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10d      	bne.n	8002dc2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	4393      	bics	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2240      	movs	r2, #64	; 0x40
 8002dbe:	4393      	bics	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <TIM_OC2_SetConfig+0xf0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00b      	beq.n	8002de2 <TIM_OC2_SetConfig+0x9e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <TIM_OC2_SetConfig+0xf4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <TIM_OC2_SetConfig+0x9e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <TIM_OC2_SetConfig+0xf8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <TIM_OC2_SetConfig+0x9e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <TIM_OC2_SetConfig+0xfc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d113      	bne.n	8002e0a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <TIM_OC2_SetConfig+0x100>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4a16      	ldr	r2, [pc, #88]	; (8002e48 <TIM_OC2_SetConfig+0x104>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	621a      	str	r2, [r3, #32]
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b006      	add	sp, #24
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	feff8fff 	.word	0xfeff8fff
 8002e30:	fffffcff 	.word	0xfffffcff
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40014000 	.word	0x40014000
 8002e3c:	40014400 	.word	0x40014400
 8002e40:	40014800 	.word	0x40014800
 8002e44:	fffffbff 	.word	0xfffffbff
 8002e48:	fffff7ff 	.word	0xfffff7ff

08002e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a35      	ldr	r2, [pc, #212]	; (8002f30 <TIM_OC3_SetConfig+0xe4>)
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a2f      	ldr	r2, [pc, #188]	; (8002f34 <TIM_OC3_SetConfig+0xe8>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2203      	movs	r2, #3
 8002e80:	4393      	bics	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	4a29      	ldr	r2, [pc, #164]	; (8002f38 <TIM_OC3_SetConfig+0xec>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <TIM_OC3_SetConfig+0xf0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d10d      	bne.n	8002ec6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <TIM_OC3_SetConfig+0xf4>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	4a20      	ldr	r2, [pc, #128]	; (8002f44 <TIM_OC3_SetConfig+0xf8>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <TIM_OC3_SetConfig+0xf0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_OC3_SetConfig+0x9a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <TIM_OC3_SetConfig+0xfc>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_OC3_SetConfig+0x9a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <TIM_OC3_SetConfig+0x100>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_OC3_SetConfig+0x9a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <TIM_OC3_SetConfig+0x104>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d113      	bne.n	8002f0e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <TIM_OC3_SetConfig+0x108>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <TIM_OC3_SetConfig+0x10c>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	621a      	str	r2, [r3, #32]
}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b006      	add	sp, #24
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	fffffeff 	.word	0xfffffeff
 8002f34:	fffeff8f 	.word	0xfffeff8f
 8002f38:	fffffdff 	.word	0xfffffdff
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	fffff7ff 	.word	0xfffff7ff
 8002f44:	fffffbff 	.word	0xfffffbff
 8002f48:	40014000 	.word	0x40014000
 8002f4c:	40014400 	.word	0x40014400
 8002f50:	40014800 	.word	0x40014800
 8002f54:	ffffefff 	.word	0xffffefff
 8002f58:	ffffdfff 	.word	0xffffdfff

08002f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4a28      	ldr	r2, [pc, #160]	; (800300c <TIM_OC4_SetConfig+0xb0>)
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a22      	ldr	r2, [pc, #136]	; (8003010 <TIM_OC4_SetConfig+0xb4>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a21      	ldr	r2, [pc, #132]	; (8003014 <TIM_OC4_SetConfig+0xb8>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <TIM_OC4_SetConfig+0xbc>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	031b      	lsls	r3, r3, #12
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a19      	ldr	r2, [pc, #100]	; (800301c <TIM_OC4_SetConfig+0xc0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <TIM_OC4_SetConfig+0x78>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a18      	ldr	r2, [pc, #96]	; (8003020 <TIM_OC4_SetConfig+0xc4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d007      	beq.n	8002fd4 <TIM_OC4_SetConfig+0x78>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a17      	ldr	r2, [pc, #92]	; (8003024 <TIM_OC4_SetConfig+0xc8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_OC4_SetConfig+0x78>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a16      	ldr	r2, [pc, #88]	; (8003028 <TIM_OC4_SetConfig+0xcc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d109      	bne.n	8002fe8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	4a15      	ldr	r2, [pc, #84]	; (800302c <TIM_OC4_SetConfig+0xd0>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	019b      	lsls	r3, r3, #6
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	621a      	str	r2, [r3, #32]
}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	b006      	add	sp, #24
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	ffffefff 	.word	0xffffefff
 8003010:	feff8fff 	.word	0xfeff8fff
 8003014:	fffffcff 	.word	0xfffffcff
 8003018:	ffffdfff 	.word	0xffffdfff
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40014000 	.word	0x40014000
 8003024:	40014400 	.word	0x40014400
 8003028:	40014800 	.word	0x40014800
 800302c:	ffffbfff 	.word	0xffffbfff

08003030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4a25      	ldr	r2, [pc, #148]	; (80030d4 <TIM_OC5_SetConfig+0xa4>)
 8003040:	401a      	ands	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <TIM_OC5_SetConfig+0xa8>)
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <TIM_OC5_SetConfig+0xac>)
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a17      	ldr	r2, [pc, #92]	; (80030e0 <TIM_OC5_SetConfig+0xb0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00b      	beq.n	800309e <TIM_OC5_SetConfig+0x6e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <TIM_OC5_SetConfig+0xb4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d007      	beq.n	800309e <TIM_OC5_SetConfig+0x6e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <TIM_OC5_SetConfig+0xb8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d003      	beq.n	800309e <TIM_OC5_SetConfig+0x6e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a14      	ldr	r2, [pc, #80]	; (80030ec <TIM_OC5_SetConfig+0xbc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d109      	bne.n	80030b2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <TIM_OC5_SetConfig+0xa4>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	621a      	str	r2, [r3, #32]
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b006      	add	sp, #24
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	fffeffff 	.word	0xfffeffff
 80030d8:	fffeff8f 	.word	0xfffeff8f
 80030dc:	fffdffff 	.word	0xfffdffff
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	40014000 	.word	0x40014000
 80030e8:	40014400 	.word	0x40014400
 80030ec:	40014800 	.word	0x40014800

080030f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	4a26      	ldr	r2, [pc, #152]	; (8003198 <TIM_OC6_SetConfig+0xa8>)
 8003100:	401a      	ands	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a20      	ldr	r2, [pc, #128]	; (800319c <TIM_OC6_SetConfig+0xac>)
 800311c:	4013      	ands	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <TIM_OC6_SetConfig+0xb0>)
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	051b      	lsls	r3, r3, #20
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <TIM_OC6_SetConfig+0xb4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00b      	beq.n	8003160 <TIM_OC6_SetConfig+0x70>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <TIM_OC6_SetConfig+0xb8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <TIM_OC6_SetConfig+0x70>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <TIM_OC6_SetConfig+0xbc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <TIM_OC6_SetConfig+0x70>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <TIM_OC6_SetConfig+0xc0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d109      	bne.n	8003174 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <TIM_OC6_SetConfig+0xc4>)
 8003164:	4013      	ands	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	029b      	lsls	r3, r3, #10
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b006      	add	sp, #24
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	ffefffff 	.word	0xffefffff
 800319c:	feff8fff 	.word	0xfeff8fff
 80031a0:	ffdfffff 	.word	0xffdfffff
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40014000 	.word	0x40014000
 80031ac:	40014400 	.word	0x40014400
 80031b0:	40014800 	.word	0x40014800
 80031b4:	fffbffff 	.word	0xfffbffff

080031b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	2201      	movs	r2, #1
 80031d0:	4393      	bics	r3, r2
 80031d2:	001a      	movs	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	22f0      	movs	r2, #240	; 0xf0
 80031e2:	4393      	bics	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	220a      	movs	r2, #10
 80031f4:	4393      	bics	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	621a      	str	r2, [r3, #32]
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b006      	add	sp, #24
 8003212:	bd80      	pop	{r7, pc}

08003214 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	2210      	movs	r2, #16
 8003226:	4393      	bics	r3, r2
 8003228:	001a      	movs	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <TIM_TI2_ConfigInputStage+0x60>)
 800323e:	4013      	ands	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	031b      	lsls	r3, r3, #12
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	22a0      	movs	r2, #160	; 0xa0
 8003250:	4393      	bics	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b006      	add	sp, #24
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	ffff0fff 	.word	0xffff0fff

08003278 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <TIM_ITRx_SetConfig+0x34>)
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	2207      	movs	r2, #7
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	609a      	str	r2, [r3, #8]
}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	ffcfff8f 	.word	0xffcfff8f

080032b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <TIM_ETR_SetConfig+0x3c>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	021a      	lsls	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b006      	add	sp, #24
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	ffff00ff 	.word	0xffff00ff

080032f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	221f      	movs	r2, #31
 8003300:	4013      	ands	r3, r2
 8003302:	2201      	movs	r2, #1
 8003304:	409a      	lsls	r2, r3
 8003306:	0013      	movs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	43d2      	mvns	r2, r2
 8003312:	401a      	ands	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	211f      	movs	r1, #31
 8003320:	400b      	ands	r3, r1
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4099      	lsls	r1, r3
 8003326:	000b      	movs	r3, r1
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	46bd      	mov	sp, r7
 8003332:	b006      	add	sp, #24
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	223c      	movs	r2, #60	; 0x3c
 8003346:	5c9b      	ldrb	r3, [r3, r2]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800334c:	2302      	movs	r3, #2
 800334e:	e04f      	b.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	223c      	movs	r2, #60	; 0x3c
 8003354:	2101      	movs	r1, #1
 8003356:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	223d      	movs	r2, #61	; 0x3d
 800335c:	2102      	movs	r1, #2
 800335e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a20      	ldr	r2, [pc, #128]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d108      	bne.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800337e:	4013      	ands	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2270      	movs	r2, #112	; 0x70
 8003390:	4393      	bics	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a11      	ldr	r2, [pc, #68]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10c      	bne.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2280      	movs	r2, #128	; 0x80
 80033c8:	4393      	bics	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	223d      	movs	r2, #61	; 0x3d
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223c      	movs	r2, #60	; 0x3c
 80033ea:	2100      	movs	r1, #0
 80033ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	0018      	movs	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b004      	add	sp, #16
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	ff0fffff 	.word	0xff0fffff
 8003400:	40000400 	.word	0x40000400
 8003404:	40014000 	.word	0x40014000

08003408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	223c      	movs	r2, #60	; 0x3c
 800341a:	5c9b      	ldrb	r3, [r3, r2]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003420:	2302      	movs	r3, #2
 8003422:	e079      	b.n	8003518 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	223c      	movs	r2, #60	; 0x3c
 8003428:	2101      	movs	r1, #1
 800342a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	22ff      	movs	r2, #255	; 0xff
 8003430:	4393      	bics	r3, r2
 8003432:	001a      	movs	r2, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a38      	ldr	r2, [pc, #224]	; (8003520 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003440:	401a      	ands	r2, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a35      	ldr	r2, [pc, #212]	; (8003524 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800344e:	401a      	ands	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a33      	ldr	r2, [pc, #204]	; (8003528 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800345c:	401a      	ands	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a30      	ldr	r2, [pc, #192]	; (800352c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800346a:	401a      	ands	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a2e      	ldr	r2, [pc, #184]	; (8003530 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003478:	401a      	ands	r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003486:	401a      	ands	r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a29      	ldr	r2, [pc, #164]	; (8003538 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003494:	401a      	ands	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a25      	ldr	r2, [pc, #148]	; (800353c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d106      	bne.n	80034b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a24      	ldr	r2, [pc, #144]	; (8003540 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80034ae:	401a      	ands	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1f      	ldr	r2, [pc, #124]	; (800353c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d121      	bne.n	8003506 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80034c6:	401a      	ands	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	051b      	lsls	r3, r3, #20
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80034d6:	401a      	ands	r2, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a1a      	ldr	r2, [pc, #104]	; (800354c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80034e4:	401a      	ands	r2, r3
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d106      	bne.n	8003506 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a15      	ldr	r2, [pc, #84]	; (8003550 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80034fc:	401a      	ands	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	223c      	movs	r2, #60	; 0x3c
 8003512:	2100      	movs	r1, #0
 8003514:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}
 8003520:	fffffcff 	.word	0xfffffcff
 8003524:	fffffbff 	.word	0xfffffbff
 8003528:	fffff7ff 	.word	0xfffff7ff
 800352c:	ffffefff 	.word	0xffffefff
 8003530:	ffffdfff 	.word	0xffffdfff
 8003534:	ffffbfff 	.word	0xffffbfff
 8003538:	fff0ffff 	.word	0xfff0ffff
 800353c:	40012c00 	.word	0x40012c00
 8003540:	efffffff 	.word	0xefffffff
 8003544:	ff0fffff 	.word	0xff0fffff
 8003548:	feffffff 	.word	0xfeffffff
 800354c:	fdffffff 	.word	0xfdffffff
 8003550:	dfffffff 	.word	0xdfffffff

08003554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e046      	b.n	80035f4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2288      	movs	r2, #136	; 0x88
 800356a:	589b      	ldr	r3, [r3, r2]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d107      	bne.n	8003580 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2284      	movs	r2, #132	; 0x84
 8003574:	2100      	movs	r1, #0
 8003576:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0018      	movs	r0, r3
 800357c:	f7fd fc84 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2288      	movs	r2, #136	; 0x88
 8003584:	2124      	movs	r1, #36	; 0x24
 8003586:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	438a      	bics	r2, r1
 8003596:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	0018      	movs	r0, r3
 800359c:	f000 f912 	bl	80037c4 <UART_SetConfig>
 80035a0:	0003      	movs	r3, r0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e024      	b.n	80035f4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 faa9 	bl	8003b0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	490d      	ldr	r1, [pc, #52]	; (80035fc <HAL_UART_Init+0xa8>)
 80035c6:	400a      	ands	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	212a      	movs	r1, #42	; 0x2a
 80035d6:	438a      	bics	r2, r1
 80035d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	430a      	orrs	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 fb41 	bl	8003c74 <UART_CheckIdleState>
 80035f2:	0003      	movs	r3, r0
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	ffffb7ff 	.word	0xffffb7ff

08003600 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	1dbb      	adds	r3, r7, #6
 800360e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	228c      	movs	r2, #140	; 0x8c
 8003614:	589b      	ldr	r3, [r3, r2]
 8003616:	2b20      	cmp	r3, #32
 8003618:	d000      	beq.n	800361c <HAL_UART_Receive+0x1c>
 800361a:	e0cc      	b.n	80037b6 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_UART_Receive+0x2a>
 8003622:	1dbb      	adds	r3, r7, #6
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0c4      	b.n	80037b8 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	015b      	lsls	r3, r3, #5
 8003636:	429a      	cmp	r2, r3
 8003638:	d109      	bne.n	800364e <HAL_UART_Receive+0x4e>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d105      	bne.n	800364e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2201      	movs	r2, #1
 8003646:	4013      	ands	r3, r2
 8003648:	d001      	beq.n	800364e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0b4      	b.n	80037b8 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2290      	movs	r2, #144	; 0x90
 8003652:	2100      	movs	r1, #0
 8003654:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	228c      	movs	r2, #140	; 0x8c
 800365a:	2122      	movs	r1, #34	; 0x22
 800365c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003664:	f7fd fdb8 	bl	80011d8 <HAL_GetTick>
 8003668:	0003      	movs	r3, r0
 800366a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1dba      	adds	r2, r7, #6
 8003670:	215c      	movs	r1, #92	; 0x5c
 8003672:	8812      	ldrh	r2, [r2, #0]
 8003674:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1dba      	adds	r2, r7, #6
 800367a:	215e      	movs	r1, #94	; 0x5e
 800367c:	8812      	ldrh	r2, [r2, #0]
 800367e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	015b      	lsls	r3, r3, #5
 8003688:	429a      	cmp	r2, r3
 800368a:	d10d      	bne.n	80036a8 <HAL_UART_Receive+0xa8>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <HAL_UART_Receive+0x9e>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2260      	movs	r2, #96	; 0x60
 8003698:	4949      	ldr	r1, [pc, #292]	; (80037c0 <HAL_UART_Receive+0x1c0>)
 800369a:	5299      	strh	r1, [r3, r2]
 800369c:	e02e      	b.n	80036fc <HAL_UART_Receive+0xfc>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2260      	movs	r2, #96	; 0x60
 80036a2:	21ff      	movs	r1, #255	; 0xff
 80036a4:	5299      	strh	r1, [r3, r2]
 80036a6:	e029      	b.n	80036fc <HAL_UART_Receive+0xfc>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10d      	bne.n	80036cc <HAL_UART_Receive+0xcc>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <HAL_UART_Receive+0xc2>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2260      	movs	r2, #96	; 0x60
 80036bc:	21ff      	movs	r1, #255	; 0xff
 80036be:	5299      	strh	r1, [r3, r2]
 80036c0:	e01c      	b.n	80036fc <HAL_UART_Receive+0xfc>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2260      	movs	r2, #96	; 0x60
 80036c6:	217f      	movs	r1, #127	; 0x7f
 80036c8:	5299      	strh	r1, [r3, r2]
 80036ca:	e017      	b.n	80036fc <HAL_UART_Receive+0xfc>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	055b      	lsls	r3, r3, #21
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d10d      	bne.n	80036f4 <HAL_UART_Receive+0xf4>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d104      	bne.n	80036ea <HAL_UART_Receive+0xea>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2260      	movs	r2, #96	; 0x60
 80036e4:	217f      	movs	r1, #127	; 0x7f
 80036e6:	5299      	strh	r1, [r3, r2]
 80036e8:	e008      	b.n	80036fc <HAL_UART_Receive+0xfc>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2260      	movs	r2, #96	; 0x60
 80036ee:	213f      	movs	r1, #63	; 0x3f
 80036f0:	5299      	strh	r1, [r3, r2]
 80036f2:	e003      	b.n	80036fc <HAL_UART_Receive+0xfc>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2260      	movs	r2, #96	; 0x60
 80036f8:	2100      	movs	r1, #0
 80036fa:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80036fc:	2312      	movs	r3, #18
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	2160      	movs	r1, #96	; 0x60
 8003704:	5a52      	ldrh	r2, [r2, r1]
 8003706:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	015b      	lsls	r3, r3, #5
 8003710:	429a      	cmp	r2, r3
 8003712:	d108      	bne.n	8003726 <HAL_UART_Receive+0x126>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e003      	b.n	800372e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800372e:	e036      	b.n	800379e <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	0013      	movs	r3, r2
 800373a:	2200      	movs	r2, #0
 800373c:	2120      	movs	r1, #32
 800373e:	f000 fae7 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d001      	beq.n	800374a <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e036      	b.n	80037b8 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10e      	bne.n	800376e <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	b29b      	uxth	r3, r3
 8003758:	2212      	movs	r2, #18
 800375a:	18ba      	adds	r2, r7, r2
 800375c:	8812      	ldrh	r2, [r2, #0]
 800375e:	4013      	ands	r3, r2
 8003760:	b29a      	uxth	r2, r3
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	3302      	adds	r3, #2
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e00e      	b.n	800378c <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2212      	movs	r2, #18
 8003778:	18ba      	adds	r2, r7, r2
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	4013      	ands	r3, r2
 8003780:	b2da      	uxtb	r2, r3
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3301      	adds	r3, #1
 800378a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	225e      	movs	r2, #94	; 0x5e
 8003790:	5a9b      	ldrh	r3, [r3, r2]
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b299      	uxth	r1, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	225e      	movs	r2, #94	; 0x5e
 800379c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	225e      	movs	r2, #94	; 0x5e
 80037a2:	5a9b      	ldrh	r3, [r3, r2]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1c2      	bne.n	8003730 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	228c      	movs	r2, #140	; 0x8c
 80037ae:	2120      	movs	r1, #32
 80037b0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b008      	add	sp, #32
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	000001ff 	.word	0x000001ff

080037c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037cc:	231a      	movs	r3, #26
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4abc      	ldr	r2, [pc, #752]	; (8003ae4 <UART_SetConfig+0x320>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4ab7      	ldr	r2, [pc, #732]	; (8003ae8 <UART_SetConfig+0x324>)
 800380a:	4013      	ands	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	4313      	orrs	r3, r2
 8003828:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4aae      	ldr	r2, [pc, #696]	; (8003aec <UART_SetConfig+0x328>)
 8003832:	4013      	ands	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	220f      	movs	r2, #15
 8003848:	4393      	bics	r3, r2
 800384a:	0019      	movs	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4aa4      	ldr	r2, [pc, #656]	; (8003af0 <UART_SetConfig+0x32c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d127      	bne.n	80038b2 <UART_SetConfig+0xee>
 8003862:	4ba4      	ldr	r3, [pc, #656]	; (8003af4 <UART_SetConfig+0x330>)
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	2203      	movs	r2, #3
 8003868:	4013      	ands	r3, r2
 800386a:	2b03      	cmp	r3, #3
 800386c:	d017      	beq.n	800389e <UART_SetConfig+0xda>
 800386e:	d81b      	bhi.n	80038a8 <UART_SetConfig+0xe4>
 8003870:	2b02      	cmp	r3, #2
 8003872:	d00a      	beq.n	800388a <UART_SetConfig+0xc6>
 8003874:	d818      	bhi.n	80038a8 <UART_SetConfig+0xe4>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <UART_SetConfig+0xbc>
 800387a:	2b01      	cmp	r3, #1
 800387c:	d00a      	beq.n	8003894 <UART_SetConfig+0xd0>
 800387e:	e013      	b.n	80038a8 <UART_SetConfig+0xe4>
 8003880:	231b      	movs	r3, #27
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e058      	b.n	800393c <UART_SetConfig+0x178>
 800388a:	231b      	movs	r3, #27
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	2202      	movs	r2, #2
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	e053      	b.n	800393c <UART_SetConfig+0x178>
 8003894:	231b      	movs	r3, #27
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2204      	movs	r2, #4
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e04e      	b.n	800393c <UART_SetConfig+0x178>
 800389e:	231b      	movs	r3, #27
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2208      	movs	r2, #8
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e049      	b.n	800393c <UART_SetConfig+0x178>
 80038a8:	231b      	movs	r3, #27
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2210      	movs	r2, #16
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	e044      	b.n	800393c <UART_SetConfig+0x178>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a90      	ldr	r2, [pc, #576]	; (8003af8 <UART_SetConfig+0x334>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d127      	bne.n	800390c <UART_SetConfig+0x148>
 80038bc:	4b8d      	ldr	r3, [pc, #564]	; (8003af4 <UART_SetConfig+0x330>)
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	220c      	movs	r2, #12
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d017      	beq.n	80038f8 <UART_SetConfig+0x134>
 80038c8:	d81b      	bhi.n	8003902 <UART_SetConfig+0x13e>
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d00a      	beq.n	80038e4 <UART_SetConfig+0x120>
 80038ce:	d818      	bhi.n	8003902 <UART_SetConfig+0x13e>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <UART_SetConfig+0x116>
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d00a      	beq.n	80038ee <UART_SetConfig+0x12a>
 80038d8:	e013      	b.n	8003902 <UART_SetConfig+0x13e>
 80038da:	231b      	movs	r3, #27
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e02b      	b.n	800393c <UART_SetConfig+0x178>
 80038e4:	231b      	movs	r3, #27
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	2202      	movs	r2, #2
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	e026      	b.n	800393c <UART_SetConfig+0x178>
 80038ee:	231b      	movs	r3, #27
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	2204      	movs	r2, #4
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e021      	b.n	800393c <UART_SetConfig+0x178>
 80038f8:	231b      	movs	r3, #27
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	2208      	movs	r2, #8
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	e01c      	b.n	800393c <UART_SetConfig+0x178>
 8003902:	231b      	movs	r3, #27
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	2210      	movs	r2, #16
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	e017      	b.n	800393c <UART_SetConfig+0x178>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a7a      	ldr	r2, [pc, #488]	; (8003afc <UART_SetConfig+0x338>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d104      	bne.n	8003920 <UART_SetConfig+0x15c>
 8003916:	231b      	movs	r3, #27
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	e00d      	b.n	800393c <UART_SetConfig+0x178>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a76      	ldr	r2, [pc, #472]	; (8003b00 <UART_SetConfig+0x33c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d104      	bne.n	8003934 <UART_SetConfig+0x170>
 800392a:	231b      	movs	r3, #27
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e003      	b.n	800393c <UART_SetConfig+0x178>
 8003934:	231b      	movs	r3, #27
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2210      	movs	r2, #16
 800393a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	429a      	cmp	r2, r3
 8003946:	d000      	beq.n	800394a <UART_SetConfig+0x186>
 8003948:	e065      	b.n	8003a16 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800394a:	231b      	movs	r3, #27
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d015      	beq.n	8003980 <UART_SetConfig+0x1bc>
 8003954:	dc18      	bgt.n	8003988 <UART_SetConfig+0x1c4>
 8003956:	2b04      	cmp	r3, #4
 8003958:	d00d      	beq.n	8003976 <UART_SetConfig+0x1b2>
 800395a:	dc15      	bgt.n	8003988 <UART_SetConfig+0x1c4>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <UART_SetConfig+0x1a2>
 8003960:	2b02      	cmp	r3, #2
 8003962:	d005      	beq.n	8003970 <UART_SetConfig+0x1ac>
 8003964:	e010      	b.n	8003988 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003966:	f7fe fb8b 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 800396a:	0003      	movs	r3, r0
 800396c:	617b      	str	r3, [r7, #20]
        break;
 800396e:	e012      	b.n	8003996 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003970:	4b64      	ldr	r3, [pc, #400]	; (8003b04 <UART_SetConfig+0x340>)
 8003972:	617b      	str	r3, [r7, #20]
        break;
 8003974:	e00f      	b.n	8003996 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003976:	f7fe faf7 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 800397a:	0003      	movs	r3, r0
 800397c:	617b      	str	r3, [r7, #20]
        break;
 800397e:	e00a      	b.n	8003996 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	617b      	str	r3, [r7, #20]
        break;
 8003986:	e006      	b.n	8003996 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800398c:	231a      	movs	r3, #26
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
        break;
 8003994:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d100      	bne.n	800399e <UART_SetConfig+0x1da>
 800399c:	e08d      	b.n	8003aba <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a2:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <UART_SetConfig+0x344>)
 80039a4:	0052      	lsls	r2, r2, #1
 80039a6:	5ad3      	ldrh	r3, [r2, r3]
 80039a8:	0019      	movs	r1, r3
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	f7fc fba8 	bl	8000100 <__udivsi3>
 80039b0:	0003      	movs	r3, r0
 80039b2:	005a      	lsls	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	18d2      	adds	r2, r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	0019      	movs	r1, r3
 80039c2:	0010      	movs	r0, r2
 80039c4:	f7fc fb9c 	bl	8000100 <__udivsi3>
 80039c8:	0003      	movs	r3, r0
 80039ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b0f      	cmp	r3, #15
 80039d0:	d91c      	bls.n	8003a0c <UART_SetConfig+0x248>
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	025b      	lsls	r3, r3, #9
 80039d8:	429a      	cmp	r2, r3
 80039da:	d217      	bcs.n	8003a0c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	b29a      	uxth	r2, r3
 80039e0:	200e      	movs	r0, #14
 80039e2:	183b      	adds	r3, r7, r0
 80039e4:	210f      	movs	r1, #15
 80039e6:	438a      	bics	r2, r1
 80039e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2207      	movs	r2, #7
 80039f2:	4013      	ands	r3, r2
 80039f4:	b299      	uxth	r1, r3
 80039f6:	183b      	adds	r3, r7, r0
 80039f8:	183a      	adds	r2, r7, r0
 80039fa:	8812      	ldrh	r2, [r2, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	183a      	adds	r2, r7, r0
 8003a06:	8812      	ldrh	r2, [r2, #0]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	e056      	b.n	8003aba <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003a0c:	231a      	movs	r3, #26
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	e051      	b.n	8003aba <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a16:	231b      	movs	r3, #27
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d015      	beq.n	8003a4c <UART_SetConfig+0x288>
 8003a20:	dc18      	bgt.n	8003a54 <UART_SetConfig+0x290>
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d00d      	beq.n	8003a42 <UART_SetConfig+0x27e>
 8003a26:	dc15      	bgt.n	8003a54 <UART_SetConfig+0x290>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <UART_SetConfig+0x26e>
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d005      	beq.n	8003a3c <UART_SetConfig+0x278>
 8003a30:	e010      	b.n	8003a54 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a32:	f7fe fb25 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8003a36:	0003      	movs	r3, r0
 8003a38:	617b      	str	r3, [r7, #20]
        break;
 8003a3a:	e012      	b.n	8003a62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a3c:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <UART_SetConfig+0x340>)
 8003a3e:	617b      	str	r3, [r7, #20]
        break;
 8003a40:	e00f      	b.n	8003a62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a42:	f7fe fa91 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8003a46:	0003      	movs	r3, r0
 8003a48:	617b      	str	r3, [r7, #20]
        break;
 8003a4a:	e00a      	b.n	8003a62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	617b      	str	r3, [r7, #20]
        break;
 8003a52:	e006      	b.n	8003a62 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a58:	231a      	movs	r3, #26
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
        break;
 8003a60:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d028      	beq.n	8003aba <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a6c:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <UART_SetConfig+0x344>)
 8003a6e:	0052      	lsls	r2, r2, #1
 8003a70:	5ad3      	ldrh	r3, [r2, r3]
 8003a72:	0019      	movs	r1, r3
 8003a74:	6978      	ldr	r0, [r7, #20]
 8003a76:	f7fc fb43 	bl	8000100 <__udivsi3>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	001a      	movs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	18d2      	adds	r2, r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	0010      	movs	r0, r2
 8003a8e:	f7fc fb37 	bl	8000100 <__udivsi3>
 8003a92:	0003      	movs	r3, r0
 8003a94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	d90a      	bls.n	8003ab2 <UART_SetConfig+0x2ee>
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	025b      	lsls	r3, r3, #9
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d205      	bcs.n	8003ab2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60da      	str	r2, [r3, #12]
 8003ab0:	e003      	b.n	8003aba <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003ab2:	231a      	movs	r3, #26
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	226a      	movs	r2, #106	; 0x6a
 8003abe:	2101      	movs	r1, #1
 8003ac0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2268      	movs	r2, #104	; 0x68
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003ad6:	231a      	movs	r3, #26
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	781b      	ldrb	r3, [r3, #0]
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b008      	add	sp, #32
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	cfff69f3 	.word	0xcfff69f3
 8003ae8:	ffffcfff 	.word	0xffffcfff
 8003aec:	11fff4ff 	.word	0x11fff4ff
 8003af0:	40013800 	.word	0x40013800
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40004400 	.word	0x40004400
 8003afc:	40004800 	.word	0x40004800
 8003b00:	40004c00 	.word	0x40004c00
 8003b04:	00f42400 	.word	0x00f42400
 8003b08:	0800424c 	.word	0x0800424c

08003b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	2201      	movs	r2, #1
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4a4a      	ldr	r2, [pc, #296]	; (8003c50 <UART_AdvFeatureConfig+0x144>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	0019      	movs	r1, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d00b      	beq.n	8003b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a43      	ldr	r2, [pc, #268]	; (8003c54 <UART_AdvFeatureConfig+0x148>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d00b      	beq.n	8003b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a3b      	ldr	r2, [pc, #236]	; (8003c58 <UART_AdvFeatureConfig+0x14c>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	2208      	movs	r2, #8
 8003b80:	4013      	ands	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4a34      	ldr	r2, [pc, #208]	; (8003c5c <UART_AdvFeatureConfig+0x150>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	0019      	movs	r1, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d00b      	beq.n	8003bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a2c      	ldr	r2, [pc, #176]	; (8003c60 <UART_AdvFeatureConfig+0x154>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	4a25      	ldr	r2, [pc, #148]	; (8003c64 <UART_AdvFeatureConfig+0x158>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	2240      	movs	r2, #64	; 0x40
 8003be6:	4013      	ands	r3, r2
 8003be8:	d01d      	beq.n	8003c26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <UART_AdvFeatureConfig+0x15c>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	035b      	lsls	r3, r3, #13
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d10b      	bne.n	8003c26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <UART_AdvFeatureConfig+0x160>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	2280      	movs	r2, #128	; 0x80
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d00b      	beq.n	8003c48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <UART_AdvFeatureConfig+0x164>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]
  }
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b002      	add	sp, #8
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	fffdffff 	.word	0xfffdffff
 8003c54:	fffeffff 	.word	0xfffeffff
 8003c58:	fffbffff 	.word	0xfffbffff
 8003c5c:	ffff7fff 	.word	0xffff7fff
 8003c60:	ffffefff 	.word	0xffffefff
 8003c64:	ffffdfff 	.word	0xffffdfff
 8003c68:	ffefffff 	.word	0xffefffff
 8003c6c:	ff9fffff 	.word	0xff9fffff
 8003c70:	fff7ffff 	.word	0xfff7ffff

08003c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2290      	movs	r2, #144	; 0x90
 8003c80:	2100      	movs	r1, #0
 8003c82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c84:	f7fd faa8 	bl	80011d8 <HAL_GetTick>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2208      	movs	r2, #8
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d10c      	bne.n	8003cb4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2280      	movs	r2, #128	; 0x80
 8003c9e:	0391      	lsls	r1, r2, #14
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <UART_CheckIdleState+0x98>)
 8003ca4:	9200      	str	r2, [sp, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f000 f832 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 8003cac:	1e03      	subs	r3, r0, #0
 8003cae:	d001      	beq.n	8003cb4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e026      	b.n	8003d02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2204      	movs	r2, #4
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d10c      	bne.n	8003cdc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	03d1      	lsls	r1, r2, #15
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4a10      	ldr	r2, [pc, #64]	; (8003d0c <UART_CheckIdleState+0x98>)
 8003ccc:	9200      	str	r2, [sp, #0]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f000 f81e 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 8003cd4:	1e03      	subs	r3, r0, #0
 8003cd6:	d001      	beq.n	8003cdc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e012      	b.n	8003d02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2288      	movs	r2, #136	; 0x88
 8003ce0:	2120      	movs	r1, #32
 8003ce2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	228c      	movs	r2, #140	; 0x8c
 8003ce8:	2120      	movs	r1, #32
 8003cea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2284      	movs	r2, #132	; 0x84
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b004      	add	sp, #16
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	01ffffff 	.word	0x01ffffff

08003d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b094      	sub	sp, #80	; 0x50
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d20:	e0a7      	b.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d24:	3301      	adds	r3, #1
 8003d26:	d100      	bne.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003d28:	e0a3      	b.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2a:	f7fd fa55 	bl	80011d8 <HAL_GetTick>
 8003d2e:	0002      	movs	r2, r0
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d302      	bcc.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d13f      	bne.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d40:	f3ef 8310 	mrs	r3, PRIMASK
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d48:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	f383 8810 	msr	PRIMASK, r3
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	494e      	ldr	r1, [pc, #312]	; (8003e9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003d62:	400a      	ands	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d68:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	f383 8810 	msr	PRIMASK, r3
}
 8003d70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d72:	f3ef 8310 	mrs	r3, PRIMASK
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	f383 8810 	msr	PRIMASK, r3
}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2101      	movs	r1, #1
 8003d94:	438a      	bics	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9e:	f383 8810 	msr	PRIMASK, r3
}
 8003da2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2288      	movs	r2, #136	; 0x88
 8003da8:	2120      	movs	r1, #32
 8003daa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	228c      	movs	r2, #140	; 0x8c
 8003db0:	2120      	movs	r1, #32
 8003db2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2284      	movs	r2, #132	; 0x84
 8003db8:	2100      	movs	r1, #0
 8003dba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e069      	b.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d052      	beq.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d148      	bne.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	0112      	lsls	r2, r2, #4
 8003de8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dea:	f3ef 8310 	mrs	r3, PRIMASK
 8003dee:	613b      	str	r3, [r7, #16]
  return(result);
 8003df0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df4:	2301      	movs	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f383 8810 	msr	PRIMASK, r3
}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4924      	ldr	r1, [pc, #144]	; (8003e9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f383 8810 	msr	PRIMASK, r3
}
 8003e1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e20:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e22:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e26:	2301      	movs	r3, #1
 8003e28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f383 8810 	msr	PRIMASK, r3
}
 8003e30:	46c0      	nop			; (mov r8, r8)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	438a      	bics	r2, r1
 8003e40:	609a      	str	r2, [r3, #8]
 8003e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f383 8810 	msr	PRIMASK, r3
}
 8003e4c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2288      	movs	r2, #136	; 0x88
 8003e52:	2120      	movs	r1, #32
 8003e54:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	228c      	movs	r2, #140	; 0x8c
 8003e5a:	2120      	movs	r1, #32
 8003e5c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2290      	movs	r2, #144	; 0x90
 8003e62:	2120      	movs	r1, #32
 8003e64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2284      	movs	r2, #132	; 0x84
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e010      	b.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	425a      	negs	r2, r3
 8003e82:	4153      	adcs	r3, r2
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	001a      	movs	r2, r3
 8003e88:	1dfb      	adds	r3, r7, #7
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d100      	bne.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x182>
 8003e90:	e747      	b.n	8003d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b014      	add	sp, #80	; 0x50
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	fffffe5f 	.word	0xfffffe5f

08003ea0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2284      	movs	r2, #132	; 0x84
 8003eac:	5c9b      	ldrb	r3, [r3, r2]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UARTEx_DisableFifoMode+0x16>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e027      	b.n	8003f06 <HAL_UARTEx_DisableFifoMode+0x66>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2284      	movs	r2, #132	; 0x84
 8003eba:	2101      	movs	r1, #1
 8003ebc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2288      	movs	r2, #136	; 0x88
 8003ec2:	2124      	movs	r1, #36	; 0x24
 8003ec4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2101      	movs	r1, #1
 8003eda:	438a      	bics	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a0b      	ldr	r2, [pc, #44]	; (8003f10 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2288      	movs	r2, #136	; 0x88
 8003ef8:	2120      	movs	r1, #32
 8003efa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2284      	movs	r2, #132	; 0x84
 8003f00:	2100      	movs	r1, #0
 8003f02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	dfffffff 	.word	0xdfffffff

08003f14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2284      	movs	r2, #132	; 0x84
 8003f22:	5c9b      	ldrb	r3, [r3, r2]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e02e      	b.n	8003f8a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2284      	movs	r2, #132	; 0x84
 8003f30:	2101      	movs	r1, #1
 8003f32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2288      	movs	r2, #136	; 0x88
 8003f38:	2124      	movs	r1, #36	; 0x24
 8003f3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2101      	movs	r1, #1
 8003f50:	438a      	bics	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	08d9      	lsrs	r1, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 f854 	bl	8004018 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2288      	movs	r2, #136	; 0x88
 8003f7c:	2120      	movs	r1, #32
 8003f7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2284      	movs	r2, #132	; 0x84
 8003f84:	2100      	movs	r1, #0
 8003f86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b004      	add	sp, #16
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2284      	movs	r2, #132	; 0x84
 8003fa2:	5c9b      	ldrb	r3, [r3, r2]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e02f      	b.n	800400c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2284      	movs	r2, #132	; 0x84
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2288      	movs	r2, #136	; 0x88
 8003fb8:	2124      	movs	r1, #36	; 0x24
 8003fba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2101      	movs	r1, #1
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	4a0e      	ldr	r2, [pc, #56]	; (8004014 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	0019      	movs	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f000 f813 	bl	8004018 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2288      	movs	r2, #136	; 0x88
 8003ffe:	2120      	movs	r1, #32
 8004000:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2284      	movs	r2, #132	; 0x84
 8004006:	2100      	movs	r1, #0
 8004008:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b004      	add	sp, #16
 8004012:	bd80      	pop	{r7, pc}
 8004014:	f1ffffff 	.word	0xf1ffffff

08004018 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004024:	2b00      	cmp	r3, #0
 8004026:	d108      	bne.n	800403a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	226a      	movs	r2, #106	; 0x6a
 800402c:	2101      	movs	r1, #1
 800402e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2268      	movs	r2, #104	; 0x68
 8004034:	2101      	movs	r1, #1
 8004036:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004038:	e043      	b.n	80040c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800403a:	260f      	movs	r6, #15
 800403c:	19bb      	adds	r3, r7, r6
 800403e:	2208      	movs	r2, #8
 8004040:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004042:	200e      	movs	r0, #14
 8004044:	183b      	adds	r3, r7, r0
 8004046:	2208      	movs	r2, #8
 8004048:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	0e5b      	lsrs	r3, r3, #25
 8004052:	b2da      	uxtb	r2, r3
 8004054:	240d      	movs	r4, #13
 8004056:	193b      	adds	r3, r7, r4
 8004058:	2107      	movs	r1, #7
 800405a:	400a      	ands	r2, r1
 800405c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	0f5b      	lsrs	r3, r3, #29
 8004066:	b2da      	uxtb	r2, r3
 8004068:	250c      	movs	r5, #12
 800406a:	197b      	adds	r3, r7, r5
 800406c:	2107      	movs	r1, #7
 800406e:	400a      	ands	r2, r1
 8004070:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004072:	183b      	adds	r3, r7, r0
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	197a      	adds	r2, r7, r5
 8004078:	7812      	ldrb	r2, [r2, #0]
 800407a:	4914      	ldr	r1, [pc, #80]	; (80040cc <UARTEx_SetNbDataToProcess+0xb4>)
 800407c:	5c8a      	ldrb	r2, [r1, r2]
 800407e:	435a      	muls	r2, r3
 8004080:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004082:	197b      	adds	r3, r7, r5
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004088:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800408a:	0019      	movs	r1, r3
 800408c:	f7fc f8c2 	bl	8000214 <__divsi3>
 8004090:	0003      	movs	r3, r0
 8004092:	b299      	uxth	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	226a      	movs	r2, #106	; 0x6a
 8004098:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800409a:	19bb      	adds	r3, r7, r6
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	193a      	adds	r2, r7, r4
 80040a0:	7812      	ldrb	r2, [r2, #0]
 80040a2:	490a      	ldr	r1, [pc, #40]	; (80040cc <UARTEx_SetNbDataToProcess+0xb4>)
 80040a4:	5c8a      	ldrb	r2, [r1, r2]
 80040a6:	435a      	muls	r2, r3
 80040a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80040aa:	193b      	adds	r3, r7, r4
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80040b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040b2:	0019      	movs	r1, r3
 80040b4:	f7fc f8ae 	bl	8000214 <__divsi3>
 80040b8:	0003      	movs	r3, r0
 80040ba:	b299      	uxth	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2268      	movs	r2, #104	; 0x68
 80040c0:	5299      	strh	r1, [r3, r2]
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b005      	add	sp, #20
 80040c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	08004264 	.word	0x08004264
 80040d0:	0800426c 	.word	0x0800426c

080040d4 <__libc_init_array>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	2600      	movs	r6, #0
 80040d8:	4d0c      	ldr	r5, [pc, #48]	; (800410c <__libc_init_array+0x38>)
 80040da:	4c0d      	ldr	r4, [pc, #52]	; (8004110 <__libc_init_array+0x3c>)
 80040dc:	1b64      	subs	r4, r4, r5
 80040de:	10a4      	asrs	r4, r4, #2
 80040e0:	42a6      	cmp	r6, r4
 80040e2:	d109      	bne.n	80040f8 <__libc_init_array+0x24>
 80040e4:	2600      	movs	r6, #0
 80040e6:	f000 f821 	bl	800412c <_init>
 80040ea:	4d0a      	ldr	r5, [pc, #40]	; (8004114 <__libc_init_array+0x40>)
 80040ec:	4c0a      	ldr	r4, [pc, #40]	; (8004118 <__libc_init_array+0x44>)
 80040ee:	1b64      	subs	r4, r4, r5
 80040f0:	10a4      	asrs	r4, r4, #2
 80040f2:	42a6      	cmp	r6, r4
 80040f4:	d105      	bne.n	8004102 <__libc_init_array+0x2e>
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	00b3      	lsls	r3, r6, #2
 80040fa:	58eb      	ldr	r3, [r5, r3]
 80040fc:	4798      	blx	r3
 80040fe:	3601      	adds	r6, #1
 8004100:	e7ee      	b.n	80040e0 <__libc_init_array+0xc>
 8004102:	00b3      	lsls	r3, r6, #2
 8004104:	58eb      	ldr	r3, [r5, r3]
 8004106:	4798      	blx	r3
 8004108:	3601      	adds	r6, #1
 800410a:	e7f2      	b.n	80040f2 <__libc_init_array+0x1e>
 800410c:	08004274 	.word	0x08004274
 8004110:	08004274 	.word	0x08004274
 8004114:	08004274 	.word	0x08004274
 8004118:	08004278 	.word	0x08004278

0800411c <memset>:
 800411c:	0003      	movs	r3, r0
 800411e:	1882      	adds	r2, r0, r2
 8004120:	4293      	cmp	r3, r2
 8004122:	d100      	bne.n	8004126 <memset+0xa>
 8004124:	4770      	bx	lr
 8004126:	7019      	strb	r1, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	e7f9      	b.n	8004120 <memset+0x4>

0800412c <_init>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr

08004138 <_fini>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr

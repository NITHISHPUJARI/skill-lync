
Timer_Freq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000255c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026a8  080026a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026a8  080026a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026a8  080026a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026a8  080026a8  000126a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080026bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080026bc  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fc4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001677  00000000  00000000  00028ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145a4  00000000  00000000  0002b988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af00  00000000  00000000  0003ff2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842ca  00000000  00000000  0004ae2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf0f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002360  00000000  00000000  000cf148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080025fc 	.word	0x080025fc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080025fc 	.word	0x080025fc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa1a 	bl	8000654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f826 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8ec 	bl	8000400 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000228:	f000 f86a 	bl	8000300 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim3);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <main+0x50>)
 800022e:	2100      	movs	r1, #0
 8000230:	0018      	movs	r0, r3
 8000232:	f001 fa9b 	bl	800176c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM3->CCR1 = 1000;
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <main+0x54>)
 8000238:	22fa      	movs	r2, #250	; 0xfa
 800023a:	0092      	lsls	r2, r2, #2
 800023c:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(500);
 800023e:	23fa      	movs	r3, #250	; 0xfa
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fa8c 	bl	8000760 <HAL_Delay>


	 while(!(TIM3 -> SR & TIM_SR_UIF));
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <main+0x54>)
 800024c:	691b      	ldr	r3, [r3, #16]
 800024e:	2201      	movs	r2, #1
 8000250:	4013      	ands	r3, r2
 8000252:	d0fa      	beq.n	800024a <main+0x32>
		 TIM3 -> SR = 0;
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <main+0x54>)
 8000256:	2200      	movs	r2, #0
 8000258:	611a      	str	r2, [r3, #16]
		 HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800025a:	23a0      	movs	r3, #160	; 0xa0
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	2120      	movs	r1, #32
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fcd6 	bl	8000c12 <HAL_GPIO_TogglePin>
	  TIM3->CCR1 = 1000;
 8000266:	e7e6      	b.n	8000236 <main+0x1e>
 8000268:	20000028 	.word	0x20000028
 800026c:	40000400 	.word	0x40000400

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b093      	sub	sp, #76	; 0x4c
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	2414      	movs	r4, #20
 8000278:	193b      	adds	r3, r7, r4
 800027a:	0018      	movs	r0, r3
 800027c:	2334      	movs	r3, #52	; 0x34
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f002 f9b3 	bl	80025ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	0018      	movs	r0, r3
 800028a:	2310      	movs	r3, #16
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f002 f9ac 	bl	80025ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	0018      	movs	r0, r3
 800029a:	f000 fcd5 	bl	8000c48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	2202      	movs	r2, #2
 80002a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	0052      	lsls	r2, r2, #1
 80002aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	2200      	movs	r2, #0
 80002b0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	2240      	movs	r2, #64	; 0x40
 80002b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 fd01 	bl	8000cc8 <HAL_RCC_OscConfig>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002ca:	f000 f8f9 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2207      	movs	r2, #7
 80002d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2100      	movs	r1, #0
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 fffc 	bl	80012e8 <HAL_RCC_ClockConfig>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002f4:	f000 f8e4 	bl	80004c0 <Error_Handler>
  }
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b013      	add	sp, #76	; 0x4c
 80002fe:	bd90      	pop	{r4, r7, pc}

08000300 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b08e      	sub	sp, #56	; 0x38
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000306:	2328      	movs	r3, #40	; 0x28
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	0018      	movs	r0, r3
 800030c:	2310      	movs	r3, #16
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f002 f96b 	bl	80025ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000316:	231c      	movs	r3, #28
 8000318:	18fb      	adds	r3, r7, r3
 800031a:	0018      	movs	r0, r3
 800031c:	230c      	movs	r3, #12
 800031e:	001a      	movs	r2, r3
 8000320:	2100      	movs	r1, #0
 8000322:	f002 f963 	bl	80025ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000326:	003b      	movs	r3, r7
 8000328:	0018      	movs	r0, r3
 800032a:	231c      	movs	r3, #28
 800032c:	001a      	movs	r2, r3
 800032e:	2100      	movs	r1, #0
 8000330:	f002 f95c 	bl	80025ec <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000334:	4b2f      	ldr	r3, [pc, #188]	; (80003f4 <MX_TIM3_Init+0xf4>)
 8000336:	4a30      	ldr	r2, [pc, #192]	; (80003f8 <MX_TIM3_Init+0xf8>)
 8000338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 800033a:	4b2e      	ldr	r3, [pc, #184]	; (80003f4 <MX_TIM3_Init+0xf4>)
 800033c:	2208      	movs	r2, #8
 800033e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000340:	4b2c      	ldr	r3, [pc, #176]	; (80003f4 <MX_TIM3_Init+0xf4>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000346:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <MX_TIM3_Init+0xf4>)
 8000348:	4a2c      	ldr	r2, [pc, #176]	; (80003fc <MX_TIM3_Init+0xfc>)
 800034a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034c:	4b29      	ldr	r3, [pc, #164]	; (80003f4 <MX_TIM3_Init+0xf4>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000352:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <MX_TIM3_Init+0xf4>)
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000358:	4b26      	ldr	r3, [pc, #152]	; (80003f4 <MX_TIM3_Init+0xf4>)
 800035a:	0018      	movs	r0, r3
 800035c:	f001 f94e 	bl	80015fc <HAL_TIM_Base_Init>
 8000360:	1e03      	subs	r3, r0, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000364:	f000 f8ac 	bl	80004c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000368:	2128      	movs	r1, #40	; 0x28
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2280      	movs	r2, #128	; 0x80
 800036e:	0152      	lsls	r2, r2, #5
 8000370:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000372:	187a      	adds	r2, r7, r1
 8000374:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <MX_TIM3_Init+0xf4>)
 8000376:	0011      	movs	r1, r2
 8000378:	0018      	movs	r0, r3
 800037a:	f001 fbdb 	bl	8001b34 <HAL_TIM_ConfigClockSource>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000382:	f000 f89d 	bl	80004c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000386:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_TIM3_Init+0xf4>)
 8000388:	0018      	movs	r0, r3
 800038a:	f001 f98f 	bl	80016ac <HAL_TIM_PWM_Init>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000392:	f000 f895 	bl	80004c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000396:	211c      	movs	r1, #28
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003a4:	187a      	adds	r2, r7, r1
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_TIM3_Init+0xf4>)
 80003a8:	0011      	movs	r1, r2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f002 f892 	bl	80024d4 <HAL_TIMEx_MasterConfigSynchronization>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80003b4:	f000 f884 	bl	80004c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b8:	003b      	movs	r3, r7
 80003ba:	2260      	movs	r2, #96	; 0x60
 80003bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003be:	003b      	movs	r3, r7
 80003c0:	2200      	movs	r2, #0
 80003c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003c4:	003b      	movs	r3, r7
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ca:	003b      	movs	r3, r7
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003d0:	0039      	movs	r1, r7
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_TIM3_Init+0xf4>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	0018      	movs	r0, r3
 80003d8:	f001 faac 	bl	8001934 <HAL_TIM_PWM_ConfigChannel>
 80003dc:	1e03      	subs	r3, r0, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80003e0:	f000 f86e 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <MX_TIM3_Init+0xf4>)
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 f8b2 	bl	8000550 <HAL_TIM_MspPostInit>

}
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b00e      	add	sp, #56	; 0x38
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000028 	.word	0x20000028
 80003f8:	40000400 	.word	0x40000400
 80003fc:	0000ffff 	.word	0x0000ffff

08000400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b089      	sub	sp, #36	; 0x24
 8000404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000406:	240c      	movs	r4, #12
 8000408:	193b      	adds	r3, r7, r4
 800040a:	0018      	movs	r0, r3
 800040c:	2314      	movs	r3, #20
 800040e:	001a      	movs	r2, r3
 8000410:	2100      	movs	r1, #0
 8000412:	f002 f8eb 	bl	80025ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000416:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <MX_GPIO_Init+0xb8>)
 8000418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MX_GPIO_Init+0xb8>)
 800041c:	2101      	movs	r1, #1
 800041e:	430a      	orrs	r2, r1
 8000420:	635a      	str	r2, [r3, #52]	; 0x34
 8000422:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <MX_GPIO_Init+0xb8>)
 8000424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000426:	2201      	movs	r2, #1
 8000428:	4013      	ands	r3, r2
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042e:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_GPIO_Init+0xb8>)
 8000430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_GPIO_Init+0xb8>)
 8000434:	2102      	movs	r1, #2
 8000436:	430a      	orrs	r2, r1
 8000438:	635a      	str	r2, [r3, #52]	; 0x34
 800043a:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_GPIO_Init+0xb8>)
 800043c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800043e:	2202      	movs	r2, #2
 8000440:	4013      	ands	r3, r2
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000446:	23a0      	movs	r3, #160	; 0xa0
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	2200      	movs	r2, #0
 800044c:	2120      	movs	r1, #32
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fbc2 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	01db      	lsls	r3, r3, #7
 8000458:	4818      	ldr	r0, [pc, #96]	; (80004bc <MX_GPIO_Init+0xbc>)
 800045a:	2200      	movs	r2, #0
 800045c:	0019      	movs	r1, r3
 800045e:	f000 fbbb 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2220      	movs	r2, #32
 8000466:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2201      	movs	r2, #1
 800046c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	193b      	adds	r3, r7, r4
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	193a      	adds	r2, r7, r4
 800047c:	23a0      	movs	r3, #160	; 0xa0
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	0011      	movs	r1, r2
 8000482:	0018      	movs	r0, r3
 8000484:	f000 fa44 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000488:	0021      	movs	r1, r4
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	01d2      	lsls	r2, r2, #7
 8000490:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <MX_GPIO_Init+0xbc>)
 80004a8:	0019      	movs	r1, r3
 80004aa:	0010      	movs	r0, r2
 80004ac:	f000 fa30 	bl	8000910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b009      	add	sp, #36	; 0x24
 80004b6:	bd90      	pop	{r4, r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	50000400 	.word	0x50000400

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <Error_Handler+0x8>
	...

080004cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <HAL_MspInit+0x44>)
 80004d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_MspInit+0x44>)
 80004d8:	2101      	movs	r1, #1
 80004da:	430a      	orrs	r2, r1
 80004dc:	641a      	str	r2, [r3, #64]	; 0x40
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <HAL_MspInit+0x44>)
 80004e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e2:	2201      	movs	r2, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <HAL_MspInit+0x44>)
 80004ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_MspInit+0x44>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0549      	lsls	r1, r1, #21
 80004f4:	430a      	orrs	r2, r1
 80004f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <HAL_MspInit+0x44>)
 80004fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	055b      	lsls	r3, r3, #21
 8000500:	4013      	ands	r3, r2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40021000 	.word	0x40021000

08000514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <HAL_TIM_Base_MspInit+0x34>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d10b      	bne.n	800053e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <HAL_TIM_Base_MspInit+0x38>)
 8000528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <HAL_TIM_Base_MspInit+0x38>)
 800052c:	2102      	movs	r1, #2
 800052e:	430a      	orrs	r2, r1
 8000530:	63da      	str	r2, [r3, #60]	; 0x3c
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_TIM_Base_MspInit+0x38>)
 8000534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000536:	2202      	movs	r2, #2
 8000538:	4013      	ands	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b004      	add	sp, #16
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	40000400 	.word	0x40000400
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b089      	sub	sp, #36	; 0x24
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	240c      	movs	r4, #12
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	2314      	movs	r3, #20
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f002 f842 	bl	80025ec <memset>
  if(htim->Instance==TIM3)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <HAL_TIM_MspPostInit+0x70>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d122      	bne.n	80005b8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <HAL_TIM_MspPostInit+0x74>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <HAL_TIM_MspPostInit+0x74>)
 8000578:	2101      	movs	r1, #1
 800057a:	430a      	orrs	r2, r1
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <HAL_TIM_MspPostInit+0x74>)
 8000580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000582:	2201      	movs	r2, #1
 8000584:	4013      	ands	r3, r2
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800058a:	0021      	movs	r1, r4
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2240      	movs	r2, #64	; 0x40
 8000590:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2202      	movs	r2, #2
 8000596:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2201      	movs	r2, #1
 80005a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	187a      	adds	r2, r7, r1
 80005ac:	23a0      	movs	r3, #160	; 0xa0
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	0011      	movs	r1, r2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 f9ac 	bl	8000910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b009      	add	sp, #36	; 0x24
 80005be:	bd90      	pop	{r4, r7, pc}
 80005c0:	40000400 	.word	0x40000400
 80005c4:	40021000 	.word	0x40021000

080005c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <NMI_Handler+0x4>

080005ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <HardFault_Handler+0x4>

080005d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ec:	f000 f89c 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000602:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000604:	f7ff fff7 	bl	80005f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	; (800064c <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800062e:	f001 ffb9 	bl	80025a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000632:	f7ff fdf1 	bl	8000218 <main>

08000636 <LoopForever>:

LoopForever:
  b LoopForever
 8000636:	e7fe      	b.n	8000636 <LoopForever>
  ldr   r0, =_estack
 8000638:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000644:	080026b0 	.word	0x080026b0
  ldr r2, =_sbss
 8000648:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800064c:	20000078 	.word	0x20000078

08000650 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC1_IRQHandler>
	...

08000654 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <HAL_Init+0x3c>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_Init+0x3c>)
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	0049      	lsls	r1, r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f810 	bl	8000694 <HAL_InitTick>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d003      	beq.n	8000680 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e001      	b.n	8000684 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff ff24 	bl	80004cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
}
 8000688:	0018      	movs	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40022000 	.word	0x40022000

08000694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800069c:	230f      	movs	r3, #15
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <HAL_InitTick+0x88>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d02b      	beq.n	8000704 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <HAL_InitTick+0x8c>)
 80006ae:	681c      	ldr	r4, [r3, #0]
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <HAL_InitTick+0x88>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	0019      	movs	r1, r3
 80006b6:	23fa      	movs	r3, #250	; 0xfa
 80006b8:	0098      	lsls	r0, r3, #2
 80006ba:	f7ff fd21 	bl	8000100 <__udivsi3>
 80006be:	0003      	movs	r3, r0
 80006c0:	0019      	movs	r1, r3
 80006c2:	0020      	movs	r0, r4
 80006c4:	f7ff fd1c 	bl	8000100 <__udivsi3>
 80006c8:	0003      	movs	r3, r0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 f913 	bl	80008f6 <HAL_SYSTICK_Config>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d112      	bne.n	80006fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d80a      	bhi.n	80006f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	2301      	movs	r3, #1
 80006de:	425b      	negs	r3, r3
 80006e0:	2200      	movs	r2, #0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 f8f2 	bl	80008cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HAL_InitTick+0x90>)
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	e00d      	b.n	800070c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006f0:	230f      	movs	r3, #15
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	e008      	b.n	800070c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006fa:	230f      	movs	r3, #15
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	e003      	b.n	800070c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000704:	230f      	movs	r3, #15
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800070c:	230f      	movs	r3, #15
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	781b      	ldrb	r3, [r3, #0]
}
 8000712:	0018      	movs	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	b005      	add	sp, #20
 8000718:	bd90      	pop	{r4, r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20000008 	.word	0x20000008
 8000720:	20000000 	.word	0x20000000
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_IncTick+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	001a      	movs	r2, r3
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x20>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	18d2      	adds	r2, r2, r3
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <HAL_IncTick+0x20>)
 800073a:	601a      	str	r2, [r3, #0]
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000008 	.word	0x20000008
 8000748:	20000074 	.word	0x20000074

0800074c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;
 8000750:	4b02      	ldr	r3, [pc, #8]	; (800075c <HAL_GetTick+0x10>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	20000074 	.word	0x20000074

08000760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000768:	f7ff fff0 	bl	800074c <HAL_GetTick>
 800076c:	0003      	movs	r3, r0
 800076e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	d005      	beq.n	8000786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_Delay+0x44>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	001a      	movs	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	189b      	adds	r3, r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	f7ff ffe0 	bl	800074c <HAL_GetTick>
 800078c:	0002      	movs	r2, r0
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	429a      	cmp	r2, r3
 8000796:	d8f7      	bhi.n	8000788 <HAL_Delay+0x28>
  {
  }
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b004      	add	sp, #16
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	20000008 	.word	0x20000008

080007a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	0002      	movs	r2, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b7f      	cmp	r3, #127	; 0x7f
 80007bc:	d828      	bhi.n	8000810 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007be:	4a2f      	ldr	r2, [pc, #188]	; (800087c <__NVIC_SetPriority+0xd4>)
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	089b      	lsrs	r3, r3, #2
 80007c8:	33c0      	adds	r3, #192	; 0xc0
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	589b      	ldr	r3, [r3, r2]
 80007ce:	1dfa      	adds	r2, r7, #7
 80007d0:	7812      	ldrb	r2, [r2, #0]
 80007d2:	0011      	movs	r1, r2
 80007d4:	2203      	movs	r2, #3
 80007d6:	400a      	ands	r2, r1
 80007d8:	00d2      	lsls	r2, r2, #3
 80007da:	21ff      	movs	r1, #255	; 0xff
 80007dc:	4091      	lsls	r1, r2
 80007de:	000a      	movs	r2, r1
 80007e0:	43d2      	mvns	r2, r2
 80007e2:	401a      	ands	r2, r3
 80007e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	019b      	lsls	r3, r3, #6
 80007ea:	22ff      	movs	r2, #255	; 0xff
 80007ec:	401a      	ands	r2, r3
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	0018      	movs	r0, r3
 80007f4:	2303      	movs	r3, #3
 80007f6:	4003      	ands	r3, r0
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fc:	481f      	ldr	r0, [pc, #124]	; (800087c <__NVIC_SetPriority+0xd4>)
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b25b      	sxtb	r3, r3
 8000804:	089b      	lsrs	r3, r3, #2
 8000806:	430a      	orrs	r2, r1
 8000808:	33c0      	adds	r3, #192	; 0xc0
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800080e:	e031      	b.n	8000874 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <__NVIC_SetPriority+0xd8>)
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	0019      	movs	r1, r3
 8000818:	230f      	movs	r3, #15
 800081a:	400b      	ands	r3, r1
 800081c:	3b08      	subs	r3, #8
 800081e:	089b      	lsrs	r3, r3, #2
 8000820:	3306      	adds	r3, #6
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	18d3      	adds	r3, r2, r3
 8000826:	3304      	adds	r3, #4
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	1dfa      	adds	r2, r7, #7
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	0011      	movs	r1, r2
 8000830:	2203      	movs	r2, #3
 8000832:	400a      	ands	r2, r1
 8000834:	00d2      	lsls	r2, r2, #3
 8000836:	21ff      	movs	r1, #255	; 0xff
 8000838:	4091      	lsls	r1, r2
 800083a:	000a      	movs	r2, r1
 800083c:	43d2      	mvns	r2, r2
 800083e:	401a      	ands	r2, r3
 8000840:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	019b      	lsls	r3, r3, #6
 8000846:	22ff      	movs	r2, #255	; 0xff
 8000848:	401a      	ands	r2, r3
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	0018      	movs	r0, r3
 8000850:	2303      	movs	r3, #3
 8000852:	4003      	ands	r3, r0
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <__NVIC_SetPriority+0xd8>)
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	001c      	movs	r4, r3
 8000860:	230f      	movs	r3, #15
 8000862:	4023      	ands	r3, r4
 8000864:	3b08      	subs	r3, #8
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	430a      	orrs	r2, r1
 800086a:	3306      	adds	r3, #6
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	18c3      	adds	r3, r0, r3
 8000870:	3304      	adds	r3, #4
 8000872:	601a      	str	r2, [r3, #0]
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b003      	add	sp, #12
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	1e5a      	subs	r2, r3, #1
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	045b      	lsls	r3, r3, #17
 8000894:	429a      	cmp	r2, r3
 8000896:	d301      	bcc.n	800089c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000898:	2301      	movs	r3, #1
 800089a:	e010      	b.n	80008be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <SysTick_Config+0x44>)
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	3a01      	subs	r2, #1
 80008a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a4:	2301      	movs	r3, #1
 80008a6:	425b      	negs	r3, r3
 80008a8:	2103      	movs	r1, #3
 80008aa:	0018      	movs	r0, r3
 80008ac:	f7ff ff7c 	bl	80007a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <SysTick_Config+0x44>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <SysTick_Config+0x44>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	0018      	movs	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b002      	add	sp, #8
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	210f      	movs	r1, #15
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	1c02      	adds	r2, r0, #0
 80008dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff ff5d 	bl	80007a8 <__NVIC_SetPriority>
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b004      	add	sp, #16
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff ffbf 	bl	8000884 <SysTick_Config>
 8000906:	0003      	movs	r3, r0
}
 8000908:	0018      	movs	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	b002      	add	sp, #8
 800090e:	bd80      	pop	{r7, pc}

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091e:	e147      	b.n	8000bb0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2101      	movs	r1, #1
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	4091      	lsls	r1, r2
 800092a:	000a      	movs	r2, r1
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d100      	bne.n	8000938 <HAL_GPIO_Init+0x28>
 8000936:	e138      	b.n	8000baa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2203      	movs	r2, #3
 800093e:	4013      	ands	r3, r2
 8000940:	2b01      	cmp	r3, #1
 8000942:	d005      	beq.n	8000950 <HAL_GPIO_Init+0x40>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2203      	movs	r2, #3
 800094a:	4013      	ands	r3, r2
 800094c:	2b02      	cmp	r3, #2
 800094e:	d130      	bne.n	80009b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	409a      	lsls	r2, r3
 800095e:	0013      	movs	r3, r2
 8000960:	43da      	mvns	r2, r3
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	4013      	ands	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68da      	ldr	r2, [r3, #12]
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	409a      	lsls	r2, r3
 8000972:	0013      	movs	r3, r2
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000986:	2201      	movs	r2, #1
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	409a      	lsls	r2, r3
 800098c:	0013      	movs	r3, r2
 800098e:	43da      	mvns	r2, r3
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	4013      	ands	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	091b      	lsrs	r3, r3, #4
 800099c:	2201      	movs	r2, #1
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
 80009a4:	0013      	movs	r3, r2
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2203      	movs	r2, #3
 80009b8:	4013      	ands	r3, r2
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d017      	beq.n	80009ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	2203      	movs	r2, #3
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	43da      	mvns	r2, r3
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	409a      	lsls	r2, r3
 80009e0:	0013      	movs	r3, r2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2203      	movs	r2, #3
 80009f4:	4013      	ands	r3, r2
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d123      	bne.n	8000a42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	08da      	lsrs	r2, r3, #3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3208      	adds	r2, #8
 8000a02:	0092      	lsls	r2, r2, #2
 8000a04:	58d3      	ldr	r3, [r2, r3]
 8000a06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	2207      	movs	r2, #7
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	220f      	movs	r2, #15
 8000a12:	409a      	lsls	r2, r3
 8000a14:	0013      	movs	r3, r2
 8000a16:	43da      	mvns	r2, r3
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	691a      	ldr	r2, [r3, #16]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	2107      	movs	r1, #7
 8000a26:	400b      	ands	r3, r1
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	0013      	movs	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	08da      	lsrs	r2, r3, #3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3208      	adds	r2, #8
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	6939      	ldr	r1, [r7, #16]
 8000a40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	0013      	movs	r3, r2
 8000a52:	43da      	mvns	r2, r3
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2203      	movs	r2, #3
 8000a60:	401a      	ands	r2, r3
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	409a      	lsls	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	23c0      	movs	r3, #192	; 0xc0
 8000a7c:	029b      	lsls	r3, r3, #10
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d100      	bne.n	8000a84 <HAL_GPIO_Init+0x174>
 8000a82:	e092      	b.n	8000baa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a84:	4a50      	ldr	r2, [pc, #320]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	3318      	adds	r3, #24
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	589b      	ldr	r3, [r3, r2]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	2203      	movs	r2, #3
 8000a96:	4013      	ands	r3, r2
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	43da      	mvns	r2, r3
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d013      	beq.n	8000ada <HAL_GPIO_Init+0x1ca>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a45      	ldr	r2, [pc, #276]	; (8000bcc <HAL_GPIO_Init+0x2bc>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d00d      	beq.n	8000ad6 <HAL_GPIO_Init+0x1c6>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a44      	ldr	r2, [pc, #272]	; (8000bd0 <HAL_GPIO_Init+0x2c0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d007      	beq.n	8000ad2 <HAL_GPIO_Init+0x1c2>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a43      	ldr	r2, [pc, #268]	; (8000bd4 <HAL_GPIO_Init+0x2c4>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_GPIO_Init+0x1be>
 8000aca:	2303      	movs	r3, #3
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x1cc>
 8000ace:	2305      	movs	r3, #5
 8000ad0:	e004      	b.n	8000adc <HAL_GPIO_Init+0x1cc>
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	e002      	b.n	8000adc <HAL_GPIO_Init+0x1cc>
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e000      	b.n	8000adc <HAL_GPIO_Init+0x1cc>
 8000ada:	2300      	movs	r3, #0
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	2103      	movs	r1, #3
 8000ae0:	400a      	ands	r2, r1
 8000ae2:	00d2      	lsls	r2, r2, #3
 8000ae4:	4093      	lsls	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000aec:	4936      	ldr	r1, [pc, #216]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	3318      	adds	r3, #24
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000afa:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	43da      	mvns	r2, r3
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	035b      	lsls	r3, r3, #13
 8000b12:	4013      	ands	r3, r2
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	039b      	lsls	r3, r3, #14
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b4e:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000b50:	2384      	movs	r3, #132	; 0x84
 8000b52:	58d3      	ldr	r3, [r2, r3]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	43da      	mvns	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	029b      	lsls	r3, r3, #10
 8000b68:	4013      	ands	r3, r2
 8000b6a:	d003      	beq.n	8000b74 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b74:	4914      	ldr	r1, [pc, #80]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000b76:	2284      	movs	r2, #132	; 0x84
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	58d3      	ldr	r3, [r2, r3]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	43da      	mvns	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	025b      	lsls	r3, r3, #9
 8000b96:	4013      	ands	r3, r2
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ba2:	4909      	ldr	r1, [pc, #36]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	40da      	lsrs	r2, r3
 8000bb8:	1e13      	subs	r3, r2, #0
 8000bba:	d000      	beq.n	8000bbe <HAL_GPIO_Init+0x2ae>
 8000bbc:	e6b0      	b.n	8000920 <HAL_GPIO_Init+0x10>
  }
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b006      	add	sp, #24
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40021800 	.word	0x40021800
 8000bcc:	50000400 	.word	0x50000400
 8000bd0:	50000800 	.word	0x50000800
 8000bd4:	50000c00 	.word	0x50000c00

08000bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	0008      	movs	r0, r1
 8000be2:	0011      	movs	r1, r2
 8000be4:	1cbb      	adds	r3, r7, #2
 8000be6:	1c02      	adds	r2, r0, #0
 8000be8:	801a      	strh	r2, [r3, #0]
 8000bea:	1c7b      	adds	r3, r7, #1
 8000bec:	1c0a      	adds	r2, r1, #0
 8000bee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf0:	1c7b      	adds	r3, r7, #1
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d004      	beq.n	8000c02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bf8:	1cbb      	adds	r3, r7, #2
 8000bfa:	881a      	ldrh	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c00:	e003      	b.n	8000c0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c02:	1cbb      	adds	r3, r7, #2
 8000c04:	881a      	ldrh	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b002      	add	sp, #8
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	000a      	movs	r2, r1
 8000c1c:	1cbb      	adds	r3, r7, #2
 8000c1e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c26:	1cbb      	adds	r3, r7, #2
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	041a      	lsls	r2, r3, #16
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	1cb9      	adds	r1, r7, #2
 8000c36:	8809      	ldrh	r1, [r1, #0]
 8000c38:	400b      	ands	r3, r1
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	619a      	str	r2, [r3, #24]
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b004      	add	sp, #16
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000c56:	4013      	ands	r3, r2
 8000c58:	0019      	movs	r1, r3
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d11f      	bne.n	8000cac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	0013      	movs	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	189b      	adds	r3, r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4912      	ldr	r1, [pc, #72]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fa40 	bl	8000100 <__udivsi3>
 8000c80:	0003      	movs	r3, r0
 8000c82:	3301      	adds	r3, #1
 8000c84:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c86:	e008      	b.n	8000c9a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	e001      	b.n	8000c9a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e009      	b.n	8000cae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d0ed      	beq.n	8000c88 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b004      	add	sp, #16
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	40007000 	.word	0x40007000
 8000cbc:	fffff9ff 	.word	0xfffff9ff
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	000f4240 	.word	0x000f4240

08000cc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e2f3      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d100      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x1e>
 8000ce4:	e07c      	b.n	8000de0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ce6:	4bc3      	ldr	r3, [pc, #780]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	2238      	movs	r2, #56	; 0x38
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cf0:	4bc0      	ldr	r3, [pc, #768]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	2b10      	cmp	r3, #16
 8000cfe:	d102      	bne.n	8000d06 <HAL_RCC_OscConfig+0x3e>
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d002      	beq.n	8000d0c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d10b      	bne.n	8000d24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0c:	4bb9      	ldr	r3, [pc, #740]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	029b      	lsls	r3, r3, #10
 8000d14:	4013      	ands	r3, r2
 8000d16:	d062      	beq.n	8000dde <HAL_RCC_OscConfig+0x116>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d15e      	bne.n	8000dde <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e2ce      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	025b      	lsls	r3, r3, #9
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d107      	bne.n	8000d40 <HAL_RCC_OscConfig+0x78>
 8000d30:	4bb0      	ldr	r3, [pc, #704]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4baf      	ldr	r3, [pc, #700]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	0249      	lsls	r1, r1, #9
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	e020      	b.n	8000d82 <HAL_RCC_OscConfig+0xba>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	23a0      	movs	r3, #160	; 0xa0
 8000d46:	02db      	lsls	r3, r3, #11
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d10e      	bne.n	8000d6a <HAL_RCC_OscConfig+0xa2>
 8000d4c:	4ba9      	ldr	r3, [pc, #676]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4ba8      	ldr	r3, [pc, #672]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	02c9      	lsls	r1, r1, #11
 8000d56:	430a      	orrs	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	4ba6      	ldr	r3, [pc, #664]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4ba5      	ldr	r3, [pc, #660]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	0249      	lsls	r1, r1, #9
 8000d64:	430a      	orrs	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	e00b      	b.n	8000d82 <HAL_RCC_OscConfig+0xba>
 8000d6a:	4ba2      	ldr	r3, [pc, #648]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4ba1      	ldr	r3, [pc, #644]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000d70:	49a1      	ldr	r1, [pc, #644]	; (8000ff8 <HAL_RCC_OscConfig+0x330>)
 8000d72:	400a      	ands	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	4b9f      	ldr	r3, [pc, #636]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b9e      	ldr	r3, [pc, #632]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000d7c:	499f      	ldr	r1, [pc, #636]	; (8000ffc <HAL_RCC_OscConfig+0x334>)
 8000d7e:	400a      	ands	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d014      	beq.n	8000db4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fcdf 	bl	800074c <HAL_GetTick>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d92:	e008      	b.n	8000da6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d94:	f7ff fcda 	bl	800074c <HAL_GetTick>
 8000d98:	0002      	movs	r2, r0
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b64      	cmp	r3, #100	; 0x64
 8000da0:	d901      	bls.n	8000da6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e28d      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000da6:	4b93      	ldr	r3, [pc, #588]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	029b      	lsls	r3, r3, #10
 8000dae:	4013      	ands	r3, r2
 8000db0:	d0f0      	beq.n	8000d94 <HAL_RCC_OscConfig+0xcc>
 8000db2:	e015      	b.n	8000de0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db4:	f7ff fcca 	bl	800074c <HAL_GetTick>
 8000db8:	0003      	movs	r3, r0
 8000dba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dbc:	e008      	b.n	8000dd0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dbe:	f7ff fcc5 	bl	800074c <HAL_GetTick>
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	2b64      	cmp	r3, #100	; 0x64
 8000dca:	d901      	bls.n	8000dd0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e278      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dd0:	4b88      	ldr	r3, [pc, #544]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	029b      	lsls	r3, r3, #10
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d1f0      	bne.n	8000dbe <HAL_RCC_OscConfig+0xf6>
 8000ddc:	e000      	b.n	8000de0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dde:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2202      	movs	r2, #2
 8000de6:	4013      	ands	r3, r2
 8000de8:	d100      	bne.n	8000dec <HAL_RCC_OscConfig+0x124>
 8000dea:	e099      	b.n	8000f20 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dec:	4b81      	ldr	r3, [pc, #516]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2238      	movs	r2, #56	; 0x38
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df6:	4b7f      	ldr	r3, [pc, #508]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	2b10      	cmp	r3, #16
 8000e04:	d102      	bne.n	8000e0c <HAL_RCC_OscConfig+0x144>
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d002      	beq.n	8000e12 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d135      	bne.n	8000e7e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e12:	4b78      	ldr	r3, [pc, #480]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d005      	beq.n	8000e2a <HAL_RCC_OscConfig+0x162>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d101      	bne.n	8000e2a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e24b      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2a:	4b72      	ldr	r3, [pc, #456]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	4a74      	ldr	r2, [pc, #464]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	0019      	movs	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	021a      	lsls	r2, r3, #8
 8000e3a:	4b6e      	ldr	r3, [pc, #440]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d112      	bne.n	8000e6c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e46:	4b6b      	ldr	r3, [pc, #428]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a6e      	ldr	r2, [pc, #440]	; (8001004 <HAL_RCC_OscConfig+0x33c>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	4b67      	ldr	r3, [pc, #412]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e5a:	4b66      	ldr	r3, [pc, #408]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	0adb      	lsrs	r3, r3, #11
 8000e60:	2207      	movs	r2, #7
 8000e62:	4013      	ands	r3, r2
 8000e64:	4a68      	ldr	r2, [pc, #416]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000e66:	40da      	lsrs	r2, r3
 8000e68:	4b68      	ldr	r3, [pc, #416]	; (800100c <HAL_RCC_OscConfig+0x344>)
 8000e6a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e6c:	4b68      	ldr	r3, [pc, #416]	; (8001010 <HAL_RCC_OscConfig+0x348>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff fc0f 	bl	8000694 <HAL_InitTick>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d051      	beq.n	8000f1e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e221      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d030      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e86:	4b5b      	ldr	r3, [pc, #364]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a5e      	ldr	r2, [pc, #376]	; (8001004 <HAL_RCC_OscConfig+0x33c>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	0019      	movs	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	4b57      	ldr	r3, [pc, #348]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000e96:	430a      	orrs	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000e9a:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4b55      	ldr	r3, [pc, #340]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	0049      	lsls	r1, r1, #1
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fc50 	bl	800074c <HAL_GetTick>
 8000eac:	0003      	movs	r3, r0
 8000eae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fc4b 	bl	800074c <HAL_GetTick>
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e1fe      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d0f0      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed0:	4b48      	ldr	r3, [pc, #288]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	; (8001000 <HAL_RCC_OscConfig+0x338>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	0019      	movs	r1, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	021a      	lsls	r2, r3, #8
 8000ee0:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	e01b      	b.n	8000f20 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000ee8:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000eee:	4949      	ldr	r1, [pc, #292]	; (8001014 <HAL_RCC_OscConfig+0x34c>)
 8000ef0:	400a      	ands	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fc2a 	bl	800074c <HAL_GetTick>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efe:	f7ff fc25 	bl	800074c <HAL_GetTick>
 8000f02:	0002      	movs	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e1d8      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f10:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	d1f0      	bne.n	8000efe <HAL_RCC_OscConfig+0x236>
 8000f1c:	e000      	b.n	8000f20 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2208      	movs	r2, #8
 8000f26:	4013      	ands	r3, r2
 8000f28:	d047      	beq.n	8000fba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f2a:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	2238      	movs	r2, #56	; 0x38
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b18      	cmp	r3, #24
 8000f34:	d10a      	bne.n	8000f4c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000f36:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d03c      	beq.n	8000fba <HAL_RCC_OscConfig+0x2f2>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d138      	bne.n	8000fba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e1ba      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d019      	beq.n	8000f88 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f60:	f7ff fbf4 	bl	800074c <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f6a:	f7ff fbef 	bl	800074c <HAL_GetTick>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e1a2      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f80:	2202      	movs	r2, #2
 8000f82:	4013      	ands	r3, r2
 8000f84:	d0f1      	beq.n	8000f6a <HAL_RCC_OscConfig+0x2a2>
 8000f86:	e018      	b.n	8000fba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000f8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	438a      	bics	r2, r1
 8000f92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f94:	f7ff fbda 	bl	800074c <HAL_GetTick>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f9e:	f7ff fbd5 	bl	800074c <HAL_GetTick>
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e188      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d1f1      	bne.n	8000f9e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d100      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x2fe>
 8000fc4:	e0c6      	b.n	8001154 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc6:	231f      	movs	r3, #31
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2238      	movs	r2, #56	; 0x38
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b20      	cmp	r3, #32
 8000fd8:	d11e      	bne.n	8001018 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_RCC_OscConfig+0x32c>)
 8000fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fde:	2202      	movs	r2, #2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d100      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x31e>
 8000fe4:	e0b6      	b.n	8001154 <HAL_RCC_OscConfig+0x48c>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d000      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x328>
 8000fee:	e0b1      	b.n	8001154 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e166      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	fffeffff 	.word	0xfffeffff
 8000ffc:	fffbffff 	.word	0xfffbffff
 8001000:	ffff80ff 	.word	0xffff80ff
 8001004:	ffffc7ff 	.word	0xffffc7ff
 8001008:	00f42400 	.word	0x00f42400
 800100c:	20000000 	.word	0x20000000
 8001010:	20000004 	.word	0x20000004
 8001014:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001018:	4bac      	ldr	r3, [pc, #688]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 800101a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	055b      	lsls	r3, r3, #21
 8001020:	4013      	ands	r3, r2
 8001022:	d101      	bne.n	8001028 <HAL_RCC_OscConfig+0x360>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <HAL_RCC_OscConfig+0x362>
 8001028:	2300      	movs	r3, #0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d011      	beq.n	8001052 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4ba7      	ldr	r3, [pc, #668]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 8001030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001032:	4ba6      	ldr	r3, [pc, #664]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	0549      	lsls	r1, r1, #21
 8001038:	430a      	orrs	r2, r1
 800103a:	63da      	str	r2, [r3, #60]	; 0x3c
 800103c:	4ba3      	ldr	r3, [pc, #652]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 800103e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	055b      	lsls	r3, r3, #21
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800104a:	231f      	movs	r3, #31
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001052:	4b9f      	ldr	r3, [pc, #636]	; (80012d0 <HAL_RCC_OscConfig+0x608>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4013      	ands	r3, r2
 800105c:	d11a      	bne.n	8001094 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800105e:	4b9c      	ldr	r3, [pc, #624]	; (80012d0 <HAL_RCC_OscConfig+0x608>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b9b      	ldr	r3, [pc, #620]	; (80012d0 <HAL_RCC_OscConfig+0x608>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	0049      	lsls	r1, r1, #1
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800106c:	f7ff fb6e 	bl	800074c <HAL_GetTick>
 8001070:	0003      	movs	r3, r0
 8001072:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001076:	f7ff fb69 	bl	800074c <HAL_GetTick>
 800107a:	0002      	movs	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e11c      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001088:	4b91      	ldr	r3, [pc, #580]	; (80012d0 <HAL_RCC_OscConfig+0x608>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4013      	ands	r3, r2
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d106      	bne.n	80010aa <HAL_RCC_OscConfig+0x3e2>
 800109c:	4b8b      	ldr	r3, [pc, #556]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 800109e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010a0:	4b8a      	ldr	r3, [pc, #552]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	430a      	orrs	r2, r1
 80010a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80010a8:	e01c      	b.n	80010e4 <HAL_RCC_OscConfig+0x41c>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0x404>
 80010b2:	4b86      	ldr	r3, [pc, #536]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80010b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010b6:	4b85      	ldr	r3, [pc, #532]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80010b8:	2104      	movs	r1, #4
 80010ba:	430a      	orrs	r2, r1
 80010bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80010be:	4b83      	ldr	r3, [pc, #524]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80010c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010c2:	4b82      	ldr	r3, [pc, #520]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	430a      	orrs	r2, r1
 80010c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0x41c>
 80010cc:	4b7f      	ldr	r3, [pc, #508]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80010ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010d0:	4b7e      	ldr	r3, [pc, #504]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80010d2:	2101      	movs	r1, #1
 80010d4:	438a      	bics	r2, r1
 80010d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80010d8:	4b7c      	ldr	r3, [pc, #496]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80010da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010dc:	4b7b      	ldr	r3, [pc, #492]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80010de:	2104      	movs	r1, #4
 80010e0:	438a      	bics	r2, r1
 80010e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d014      	beq.n	8001116 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ec:	f7ff fb2e 	bl	800074c <HAL_GetTick>
 80010f0:	0003      	movs	r3, r0
 80010f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010f4:	e009      	b.n	800110a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f6:	f7ff fb29 	bl	800074c <HAL_GetTick>
 80010fa:	0002      	movs	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	4a74      	ldr	r2, [pc, #464]	; (80012d4 <HAL_RCC_OscConfig+0x60c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e0db      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800110a:	4b70      	ldr	r3, [pc, #448]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 800110c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110e:	2202      	movs	r2, #2
 8001110:	4013      	ands	r3, r2
 8001112:	d0f0      	beq.n	80010f6 <HAL_RCC_OscConfig+0x42e>
 8001114:	e013      	b.n	800113e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001116:	f7ff fb19 	bl	800074c <HAL_GetTick>
 800111a:	0003      	movs	r3, r0
 800111c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800111e:	e009      	b.n	8001134 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001120:	f7ff fb14 	bl	800074c <HAL_GetTick>
 8001124:	0002      	movs	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4a6a      	ldr	r2, [pc, #424]	; (80012d4 <HAL_RCC_OscConfig+0x60c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e0c6      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001134:	4b65      	ldr	r3, [pc, #404]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 8001136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001138:	2202      	movs	r2, #2
 800113a:	4013      	ands	r3, r2
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800113e:	231f      	movs	r3, #31
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d105      	bne.n	8001154 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001148:	4b60      	ldr	r3, [pc, #384]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 800114a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800114c:	4b5f      	ldr	r3, [pc, #380]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 800114e:	4962      	ldr	r1, [pc, #392]	; (80012d8 <HAL_RCC_OscConfig+0x610>)
 8001150:	400a      	ands	r2, r1
 8001152:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d100      	bne.n	800115e <HAL_RCC_OscConfig+0x496>
 800115c:	e0b0      	b.n	80012c0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800115e:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2238      	movs	r2, #56	; 0x38
 8001164:	4013      	ands	r3, r2
 8001166:	2b10      	cmp	r3, #16
 8001168:	d100      	bne.n	800116c <HAL_RCC_OscConfig+0x4a4>
 800116a:	e078      	b.n	800125e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d153      	bne.n	800121c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b54      	ldr	r3, [pc, #336]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 800117a:	4958      	ldr	r1, [pc, #352]	; (80012dc <HAL_RCC_OscConfig+0x614>)
 800117c:	400a      	ands	r2, r1
 800117e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001180:	f7ff fae4 	bl	800074c <HAL_GetTick>
 8001184:	0003      	movs	r3, r0
 8001186:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800118a:	f7ff fadf 	bl	800074c <HAL_GetTick>
 800118e:	0002      	movs	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e092      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800119c:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	049b      	lsls	r3, r3, #18
 80011a4:	4013      	ands	r3, r2
 80011a6:	d1f0      	bne.n	800118a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a8:	4b48      	ldr	r3, [pc, #288]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <HAL_RCC_OscConfig+0x618>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	0019      	movs	r1, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1a      	ldr	r2, [r3, #32]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	431a      	orrs	r2, r3
 80011d0:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	0449      	lsls	r1, r1, #17
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80011e4:	4b39      	ldr	r3, [pc, #228]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	0549      	lsls	r1, r1, #21
 80011ee:	430a      	orrs	r2, r1
 80011f0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff faab 	bl	800074c <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff faa6 	bl	800074c <HAL_GetTick>
 8001200:	0002      	movs	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e059      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	049b      	lsls	r3, r3, #18
 8001216:	4013      	ands	r3, r2
 8001218:	d0f0      	beq.n	80011fc <HAL_RCC_OscConfig+0x534>
 800121a:	e051      	b.n	80012c0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <HAL_RCC_OscConfig+0x614>)
 8001224:	400a      	ands	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fa90 	bl	800074c <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001232:	f7ff fa8b 	bl	800074c <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e03e      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	049b      	lsls	r3, r3, #18
 800124c:	4013      	ands	r3, r2
 800124e:	d1f0      	bne.n	8001232 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 8001256:	4923      	ldr	r1, [pc, #140]	; (80012e4 <HAL_RCC_OscConfig+0x61c>)
 8001258:	400a      	ands	r2, r1
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	e030      	b.n	80012c0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d101      	bne.n	800126a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e02b      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_RCC_OscConfig+0x604>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2203      	movs	r2, #3
 8001274:	401a      	ands	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	429a      	cmp	r2, r3
 800127c:	d11e      	bne.n	80012bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2270      	movs	r2, #112	; 0x70
 8001282:	401a      	ands	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001288:	429a      	cmp	r2, r3
 800128a:	d117      	bne.n	80012bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	23fe      	movs	r3, #254	; 0xfe
 8001290:	01db      	lsls	r3, r3, #7
 8001292:	401a      	ands	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800129a:	429a      	cmp	r2, r3
 800129c:	d10e      	bne.n	80012bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	23f8      	movs	r3, #248	; 0xf8
 80012a2:	039b      	lsls	r3, r3, #14
 80012a4:	401a      	ands	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d106      	bne.n	80012bc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	0f5b      	lsrs	r3, r3, #29
 80012b2:	075a      	lsls	r2, r3, #29
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b008      	add	sp, #32
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40007000 	.word	0x40007000
 80012d4:	00001388 	.word	0x00001388
 80012d8:	efffffff 	.word	0xefffffff
 80012dc:	feffffff 	.word	0xfeffffff
 80012e0:	1fc1808c 	.word	0x1fc1808c
 80012e4:	effefffc 	.word	0xeffefffc

080012e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e0e9      	b.n	80014d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012fc:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <HAL_RCC_ClockConfig+0x1f0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2207      	movs	r2, #7
 8001302:	4013      	ands	r3, r2
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d91e      	bls.n	8001348 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130a:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <HAL_RCC_ClockConfig+0x1f0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2207      	movs	r2, #7
 8001310:	4393      	bics	r3, r2
 8001312:	0019      	movs	r1, r3
 8001314:	4b70      	ldr	r3, [pc, #448]	; (80014d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800131c:	f7ff fa16 	bl	800074c <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001324:	e009      	b.n	800133a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001326:	f7ff fa11 	bl	800074c <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	4a6a      	ldr	r2, [pc, #424]	; (80014dc <HAL_RCC_ClockConfig+0x1f4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d901      	bls.n	800133a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e0ca      	b.n	80014d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800133a:	4b67      	ldr	r3, [pc, #412]	; (80014d8 <HAL_RCC_ClockConfig+0x1f0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2207      	movs	r2, #7
 8001340:	4013      	ands	r3, r2
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d1ee      	bne.n	8001326 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2202      	movs	r2, #2
 800134e:	4013      	ands	r3, r2
 8001350:	d015      	beq.n	800137e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2204      	movs	r2, #4
 8001358:	4013      	ands	r3, r2
 800135a:	d006      	beq.n	800136a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800135c:	4b60      	ldr	r3, [pc, #384]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001362:	21e0      	movs	r1, #224	; 0xe0
 8001364:	01c9      	lsls	r1, r1, #7
 8001366:	430a      	orrs	r2, r1
 8001368:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800136a:	4b5d      	ldr	r3, [pc, #372]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	4a5d      	ldr	r2, [pc, #372]	; (80014e4 <HAL_RCC_ClockConfig+0x1fc>)
 8001370:	4013      	ands	r3, r2
 8001372:	0019      	movs	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 800137a:	430a      	orrs	r2, r1
 800137c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2201      	movs	r2, #1
 8001384:	4013      	ands	r3, r2
 8001386:	d057      	beq.n	8001438 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d107      	bne.n	80013a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001390:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	029b      	lsls	r3, r3, #10
 8001398:	4013      	ands	r3, r2
 800139a:	d12b      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e097      	b.n	80014d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d107      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013a8:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	049b      	lsls	r3, r3, #18
 80013b0:	4013      	ands	r3, r2
 80013b2:	d11f      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e08b      	b.n	80014d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d107      	bne.n	80013d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c0:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4013      	ands	r3, r2
 80013ca:	d113      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e07f      	b.n	80014d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013d8:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 80013da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013dc:	2202      	movs	r2, #2
 80013de:	4013      	ands	r3, r2
 80013e0:	d108      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e074      	b.n	80014d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 80013e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ea:	2202      	movs	r2, #2
 80013ec:	4013      	ands	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e06d      	b.n	80014d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013f4:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2207      	movs	r2, #7
 80013fa:	4393      	bics	r3, r2
 80013fc:	0019      	movs	r1, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001404:	430a      	orrs	r2, r1
 8001406:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001408:	f7ff f9a0 	bl	800074c <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001410:	e009      	b.n	8001426 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001412:	f7ff f99b 	bl	800074c <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	4a2f      	ldr	r2, [pc, #188]	; (80014dc <HAL_RCC_ClockConfig+0x1f4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e054      	b.n	80014d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2238      	movs	r2, #56	; 0x38
 800142c:	401a      	ands	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	429a      	cmp	r2, r3
 8001436:	d1ec      	bne.n	8001412 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <HAL_RCC_ClockConfig+0x1f0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2207      	movs	r2, #7
 800143e:	4013      	ands	r3, r2
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d21e      	bcs.n	8001484 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2207      	movs	r2, #7
 800144c:	4393      	bics	r3, r2
 800144e:	0019      	movs	r1, r3
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001458:	f7ff f978 	bl	800074c <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001460:	e009      	b.n	8001476 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001462:	f7ff f973 	bl	800074c <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <HAL_RCC_ClockConfig+0x1f4>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e02c      	b.n	80014d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2207      	movs	r2, #7
 800147c:	4013      	ands	r3, r2
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d1ee      	bne.n	8001462 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2204      	movs	r2, #4
 800148a:	4013      	ands	r3, r2
 800148c:	d009      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <HAL_RCC_ClockConfig+0x200>)
 8001494:	4013      	ands	r3, r2
 8001496:	0019      	movs	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 800149e:	430a      	orrs	r2, r1
 80014a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80014a2:	f000 f829 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 80014a6:	0001      	movs	r1, r0
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_RCC_ClockConfig+0x1f8>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	220f      	movs	r2, #15
 80014b0:	401a      	ands	r2, r3
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_RCC_ClockConfig+0x204>)
 80014b4:	0092      	lsls	r2, r2, #2
 80014b6:	58d3      	ldr	r3, [r2, r3]
 80014b8:	221f      	movs	r2, #31
 80014ba:	4013      	ands	r3, r2
 80014bc:	000a      	movs	r2, r1
 80014be:	40da      	lsrs	r2, r3
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_RCC_ClockConfig+0x208>)
 80014c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_RCC_ClockConfig+0x20c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff f8e3 	bl	8000694 <HAL_InitTick>
 80014ce:	0003      	movs	r3, r0
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b004      	add	sp, #16
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40022000 	.word	0x40022000
 80014dc:	00001388 	.word	0x00001388
 80014e0:	40021000 	.word	0x40021000
 80014e4:	fffff0ff 	.word	0xfffff0ff
 80014e8:	ffff8fff 	.word	0xffff8fff
 80014ec:	08002614 	.word	0x08002614
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2238      	movs	r2, #56	; 0x38
 8001504:	4013      	ands	r3, r2
 8001506:	d10f      	bne.n	8001528 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0adb      	lsrs	r3, r3, #11
 800150e:	2207      	movs	r2, #7
 8001510:	4013      	ands	r3, r2
 8001512:	2201      	movs	r2, #1
 8001514:	409a      	lsls	r2, r3
 8001516:	0013      	movs	r3, r2
 8001518:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800151a:	6839      	ldr	r1, [r7, #0]
 800151c:	4835      	ldr	r0, [pc, #212]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800151e:	f7fe fdef 	bl	8000100 <__udivsi3>
 8001522:	0003      	movs	r3, r0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	e05d      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001528:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2238      	movs	r2, #56	; 0x38
 800152e:	4013      	ands	r3, r2
 8001530:	2b08      	cmp	r3, #8
 8001532:	d102      	bne.n	800153a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001534:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	e054      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2238      	movs	r2, #56	; 0x38
 8001540:	4013      	ands	r3, r2
 8001542:	2b10      	cmp	r3, #16
 8001544:	d138      	bne.n	80015b8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2203      	movs	r2, #3
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	2207      	movs	r2, #7
 8001558:	4013      	ands	r3, r2
 800155a:	3301      	adds	r3, #1
 800155c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d10d      	bne.n	8001580 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	4824      	ldr	r0, [pc, #144]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001568:	f7fe fdca 	bl	8000100 <__udivsi3>
 800156c:	0003      	movs	r3, r0
 800156e:	0019      	movs	r1, r3
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	227f      	movs	r2, #127	; 0x7f
 8001578:	4013      	ands	r3, r2
 800157a:	434b      	muls	r3, r1
 800157c:	617b      	str	r3, [r7, #20]
        break;
 800157e:	e00d      	b.n	800159c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	481c      	ldr	r0, [pc, #112]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001584:	f7fe fdbc 	bl	8000100 <__udivsi3>
 8001588:	0003      	movs	r3, r0
 800158a:	0019      	movs	r1, r3
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	227f      	movs	r2, #127	; 0x7f
 8001594:	4013      	ands	r3, r2
 8001596:	434b      	muls	r3, r1
 8001598:	617b      	str	r3, [r7, #20]
        break;
 800159a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0f5b      	lsrs	r3, r3, #29
 80015a2:	2207      	movs	r2, #7
 80015a4:	4013      	ands	r3, r2
 80015a6:	3301      	adds	r3, #1
 80015a8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	6978      	ldr	r0, [r7, #20]
 80015ae:	f7fe fda7 	bl	8000100 <__udivsi3>
 80015b2:	0003      	movs	r3, r0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	e015      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2238      	movs	r2, #56	; 0x38
 80015be:	4013      	ands	r3, r2
 80015c0:	2b20      	cmp	r3, #32
 80015c2:	d103      	bne.n	80015cc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2238      	movs	r2, #56	; 0x38
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b18      	cmp	r3, #24
 80015d6:	d103      	bne.n	80015e0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80015d8:	23fa      	movs	r3, #250	; 0xfa
 80015da:	01db      	lsls	r3, r3, #7
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	e001      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80015e4:	693b      	ldr	r3, [r7, #16]
}
 80015e6:	0018      	movs	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b006      	add	sp, #24
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	40021000 	.word	0x40021000
 80015f4:	00f42400 	.word	0x00f42400
 80015f8:	007a1200 	.word	0x007a1200

080015fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e04a      	b.n	80016a4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	223d      	movs	r2, #61	; 0x3d
 8001612:	5c9b      	ldrb	r3, [r3, r2]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d107      	bne.n	800162a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	223c      	movs	r2, #60	; 0x3c
 800161e:	2100      	movs	r1, #0
 8001620:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	0018      	movs	r0, r3
 8001626:	f7fe ff75 	bl	8000514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	223d      	movs	r2, #61	; 0x3d
 800162e:	2102      	movs	r1, #2
 8001630:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3304      	adds	r3, #4
 800163a:	0019      	movs	r1, r3
 800163c:	0010      	movs	r0, r2
 800163e:	f000 fb4f 	bl	8001ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2248      	movs	r2, #72	; 0x48
 8001646:	2101      	movs	r1, #1
 8001648:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	223e      	movs	r2, #62	; 0x3e
 800164e:	2101      	movs	r1, #1
 8001650:	5499      	strb	r1, [r3, r2]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	223f      	movs	r2, #63	; 0x3f
 8001656:	2101      	movs	r1, #1
 8001658:	5499      	strb	r1, [r3, r2]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2240      	movs	r2, #64	; 0x40
 800165e:	2101      	movs	r1, #1
 8001660:	5499      	strb	r1, [r3, r2]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2241      	movs	r2, #65	; 0x41
 8001666:	2101      	movs	r1, #1
 8001668:	5499      	strb	r1, [r3, r2]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2242      	movs	r2, #66	; 0x42
 800166e:	2101      	movs	r1, #1
 8001670:	5499      	strb	r1, [r3, r2]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2243      	movs	r2, #67	; 0x43
 8001676:	2101      	movs	r1, #1
 8001678:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2244      	movs	r2, #68	; 0x44
 800167e:	2101      	movs	r1, #1
 8001680:	5499      	strb	r1, [r3, r2]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2245      	movs	r2, #69	; 0x45
 8001686:	2101      	movs	r1, #1
 8001688:	5499      	strb	r1, [r3, r2]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2246      	movs	r2, #70	; 0x46
 800168e:	2101      	movs	r1, #1
 8001690:	5499      	strb	r1, [r3, r2]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2247      	movs	r2, #71	; 0x47
 8001696:	2101      	movs	r1, #1
 8001698:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	223d      	movs	r2, #61	; 0x3d
 800169e:	2101      	movs	r1, #1
 80016a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	0018      	movs	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e04a      	b.n	8001754 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	223d      	movs	r2, #61	; 0x3d
 80016c2:	5c9b      	ldrb	r3, [r3, r2]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d107      	bne.n	80016da <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	223c      	movs	r2, #60	; 0x3c
 80016ce:	2100      	movs	r1, #0
 80016d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f000 f841 	bl	800175c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	223d      	movs	r2, #61	; 0x3d
 80016de:	2102      	movs	r1, #2
 80016e0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	0019      	movs	r1, r3
 80016ec:	0010      	movs	r0, r2
 80016ee:	f000 faf7 	bl	8001ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2248      	movs	r2, #72	; 0x48
 80016f6:	2101      	movs	r1, #1
 80016f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	223e      	movs	r2, #62	; 0x3e
 80016fe:	2101      	movs	r1, #1
 8001700:	5499      	strb	r1, [r3, r2]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	223f      	movs	r2, #63	; 0x3f
 8001706:	2101      	movs	r1, #1
 8001708:	5499      	strb	r1, [r3, r2]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2240      	movs	r2, #64	; 0x40
 800170e:	2101      	movs	r1, #1
 8001710:	5499      	strb	r1, [r3, r2]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2241      	movs	r2, #65	; 0x41
 8001716:	2101      	movs	r1, #1
 8001718:	5499      	strb	r1, [r3, r2]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2242      	movs	r2, #66	; 0x42
 800171e:	2101      	movs	r1, #1
 8001720:	5499      	strb	r1, [r3, r2]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2243      	movs	r2, #67	; 0x43
 8001726:	2101      	movs	r1, #1
 8001728:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2244      	movs	r2, #68	; 0x44
 800172e:	2101      	movs	r1, #1
 8001730:	5499      	strb	r1, [r3, r2]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2245      	movs	r2, #69	; 0x45
 8001736:	2101      	movs	r1, #1
 8001738:	5499      	strb	r1, [r3, r2]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2246      	movs	r2, #70	; 0x46
 800173e:	2101      	movs	r1, #1
 8001740:	5499      	strb	r1, [r3, r2]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2247      	movs	r2, #71	; 0x47
 8001746:	2101      	movs	r1, #1
 8001748:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	223d      	movs	r2, #61	; 0x3d
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d108      	bne.n	800178e <HAL_TIM_PWM_Start+0x22>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	223e      	movs	r2, #62	; 0x3e
 8001780:	5c9b      	ldrb	r3, [r3, r2]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	3b01      	subs	r3, #1
 8001786:	1e5a      	subs	r2, r3, #1
 8001788:	4193      	sbcs	r3, r2
 800178a:	b2db      	uxtb	r3, r3
 800178c:	e037      	b.n	80017fe <HAL_TIM_PWM_Start+0x92>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b04      	cmp	r3, #4
 8001792:	d108      	bne.n	80017a6 <HAL_TIM_PWM_Start+0x3a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	223f      	movs	r2, #63	; 0x3f
 8001798:	5c9b      	ldrb	r3, [r3, r2]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	3b01      	subs	r3, #1
 800179e:	1e5a      	subs	r2, r3, #1
 80017a0:	4193      	sbcs	r3, r2
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	e02b      	b.n	80017fe <HAL_TIM_PWM_Start+0x92>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d108      	bne.n	80017be <HAL_TIM_PWM_Start+0x52>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	5c9b      	ldrb	r3, [r3, r2]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	1e5a      	subs	r2, r3, #1
 80017b8:	4193      	sbcs	r3, r2
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	e01f      	b.n	80017fe <HAL_TIM_PWM_Start+0x92>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d108      	bne.n	80017d6 <HAL_TIM_PWM_Start+0x6a>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2241      	movs	r2, #65	; 0x41
 80017c8:	5c9b      	ldrb	r3, [r3, r2]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	4193      	sbcs	r3, r2
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	e013      	b.n	80017fe <HAL_TIM_PWM_Start+0x92>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b10      	cmp	r3, #16
 80017da:	d108      	bne.n	80017ee <HAL_TIM_PWM_Start+0x82>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2242      	movs	r2, #66	; 0x42
 80017e0:	5c9b      	ldrb	r3, [r3, r2]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	3b01      	subs	r3, #1
 80017e6:	1e5a      	subs	r2, r3, #1
 80017e8:	4193      	sbcs	r3, r2
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	e007      	b.n	80017fe <HAL_TIM_PWM_Start+0x92>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2243      	movs	r2, #67	; 0x43
 80017f2:	5c9b      	ldrb	r3, [r3, r2]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	4193      	sbcs	r3, r2
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e085      	b.n	8001912 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d104      	bne.n	8001816 <HAL_TIM_PWM_Start+0xaa>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	223e      	movs	r2, #62	; 0x3e
 8001810:	2102      	movs	r1, #2
 8001812:	5499      	strb	r1, [r3, r2]
 8001814:	e023      	b.n	800185e <HAL_TIM_PWM_Start+0xf2>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b04      	cmp	r3, #4
 800181a:	d104      	bne.n	8001826 <HAL_TIM_PWM_Start+0xba>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	223f      	movs	r2, #63	; 0x3f
 8001820:	2102      	movs	r1, #2
 8001822:	5499      	strb	r1, [r3, r2]
 8001824:	e01b      	b.n	800185e <HAL_TIM_PWM_Start+0xf2>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b08      	cmp	r3, #8
 800182a:	d104      	bne.n	8001836 <HAL_TIM_PWM_Start+0xca>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	2102      	movs	r1, #2
 8001832:	5499      	strb	r1, [r3, r2]
 8001834:	e013      	b.n	800185e <HAL_TIM_PWM_Start+0xf2>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b0c      	cmp	r3, #12
 800183a:	d104      	bne.n	8001846 <HAL_TIM_PWM_Start+0xda>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2241      	movs	r2, #65	; 0x41
 8001840:	2102      	movs	r1, #2
 8001842:	5499      	strb	r1, [r3, r2]
 8001844:	e00b      	b.n	800185e <HAL_TIM_PWM_Start+0xf2>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b10      	cmp	r3, #16
 800184a:	d104      	bne.n	8001856 <HAL_TIM_PWM_Start+0xea>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2242      	movs	r2, #66	; 0x42
 8001850:	2102      	movs	r1, #2
 8001852:	5499      	strb	r1, [r3, r2]
 8001854:	e003      	b.n	800185e <HAL_TIM_PWM_Start+0xf2>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2243      	movs	r2, #67	; 0x43
 800185a:	2102      	movs	r1, #2
 800185c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	0018      	movs	r0, r3
 8001868:	f000 fe10 	bl	800248c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a2a      	ldr	r2, [pc, #168]	; (800191c <HAL_TIM_PWM_Start+0x1b0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00e      	beq.n	8001894 <HAL_TIM_PWM_Start+0x128>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a29      	ldr	r2, [pc, #164]	; (8001920 <HAL_TIM_PWM_Start+0x1b4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d009      	beq.n	8001894 <HAL_TIM_PWM_Start+0x128>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a27      	ldr	r2, [pc, #156]	; (8001924 <HAL_TIM_PWM_Start+0x1b8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d004      	beq.n	8001894 <HAL_TIM_PWM_Start+0x128>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a26      	ldr	r2, [pc, #152]	; (8001928 <HAL_TIM_PWM_Start+0x1bc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_TIM_PWM_Start+0x12c>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_TIM_PWM_Start+0x12e>
 8001898:	2300      	movs	r3, #0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d008      	beq.n	80018b0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	0209      	lsls	r1, r1, #8
 80018ac:	430a      	orrs	r2, r1
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	; (800191c <HAL_TIM_PWM_Start+0x1b0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d009      	beq.n	80018ce <HAL_TIM_PWM_Start+0x162>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1b      	ldr	r2, [pc, #108]	; (800192c <HAL_TIM_PWM_Start+0x1c0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d004      	beq.n	80018ce <HAL_TIM_PWM_Start+0x162>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_TIM_PWM_Start+0x1b4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d116      	bne.n	80018fc <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a16      	ldr	r2, [pc, #88]	; (8001930 <HAL_TIM_PWM_Start+0x1c4>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b06      	cmp	r3, #6
 80018de:	d016      	beq.n	800190e <HAL_TIM_PWM_Start+0x1a2>
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	025b      	lsls	r3, r3, #9
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d011      	beq.n	800190e <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fa:	e008      	b.n	800190e <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2101      	movs	r1, #1
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e000      	b.n	8001910 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800190e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b004      	add	sp, #16
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40012c00 	.word	0x40012c00
 8001920:	40014000 	.word	0x40014000
 8001924:	40014400 	.word	0x40014400
 8001928:	40014800 	.word	0x40014800
 800192c:	40000400 	.word	0x40000400
 8001930:	00010007 	.word	0x00010007

08001934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001940:	2317      	movs	r3, #23
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	223c      	movs	r2, #60	; 0x3c
 800194c:	5c9b      	ldrb	r3, [r3, r2]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001952:	2302      	movs	r3, #2
 8001954:	e0e5      	b.n	8001b22 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	223c      	movs	r2, #60	; 0x3c
 800195a:	2101      	movs	r1, #1
 800195c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b14      	cmp	r3, #20
 8001962:	d900      	bls.n	8001966 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001964:	e0d1      	b.n	8001b0a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	009a      	lsls	r2, r3, #2
 800196a:	4b70      	ldr	r3, [pc, #448]	; (8001b2c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800196c:	18d3      	adds	r3, r2, r3
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	0011      	movs	r1, r2
 800197a:	0018      	movs	r0, r3
 800197c:	f000 fa26 	bl	8001dcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	699a      	ldr	r2, [r3, #24]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2108      	movs	r1, #8
 800198c:	430a      	orrs	r2, r1
 800198e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2104      	movs	r1, #4
 800199c:	438a      	bics	r2, r1
 800199e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6999      	ldr	r1, [r3, #24]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	619a      	str	r2, [r3, #24]
      break;
 80019b2:	e0af      	b.n	8001b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	0011      	movs	r1, r2
 80019bc:	0018      	movs	r0, r3
 80019be:	f000 fa8f 	bl	8001ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699a      	ldr	r2, [r3, #24]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	0109      	lsls	r1, r1, #4
 80019d0:	430a      	orrs	r2, r1
 80019d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4954      	ldr	r1, [pc, #336]	; (8001b30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6999      	ldr	r1, [r3, #24]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	021a      	lsls	r2, r3, #8
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	619a      	str	r2, [r3, #24]
      break;
 80019f8:	e08c      	b.n	8001b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	0011      	movs	r1, r2
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 faf0 	bl	8001fe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2108      	movs	r1, #8
 8001a14:	430a      	orrs	r2, r1
 8001a16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	69da      	ldr	r2, [r3, #28]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2104      	movs	r1, #4
 8001a24:	438a      	bics	r2, r1
 8001a26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69d9      	ldr	r1, [r3, #28]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	61da      	str	r2, [r3, #28]
      break;
 8001a3a:	e06b      	b.n	8001b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	0011      	movs	r1, r2
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 fb57 	bl	80020f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	69da      	ldr	r2, [r3, #28]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0109      	lsls	r1, r1, #4
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4932      	ldr	r1, [pc, #200]	; (8001b30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69d9      	ldr	r1, [r3, #28]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	021a      	lsls	r2, r3, #8
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	61da      	str	r2, [r3, #28]
      break;
 8001a80:	e048      	b.n	8001b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	0011      	movs	r1, r2
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 fb9e 	bl	80021cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2108      	movs	r1, #8
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2104      	movs	r1, #4
 8001aac:	438a      	bics	r2, r1
 8001aae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001ac2:	e027      	b.n	8001b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	0011      	movs	r1, r2
 8001acc:	0018      	movs	r0, r3
 8001ace:	f000 fbdd 	bl	800228c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	0109      	lsls	r1, r1, #4
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4910      	ldr	r1, [pc, #64]	; (8001b30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	021a      	lsls	r2, r3, #8
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001b08:	e004      	b.n	8001b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001b0a:	2317      	movs	r3, #23
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
      break;
 8001b12:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	223c      	movs	r2, #60	; 0x3c
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5499      	strb	r1, [r3, r2]

  return status;
 8001b1c:	2317      	movs	r3, #23
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	781b      	ldrb	r3, [r3, #0]
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b006      	add	sp, #24
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	08002654 	.word	0x08002654
 8001b30:	fffffbff 	.word	0xfffffbff

08001b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3e:	230f      	movs	r3, #15
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	223c      	movs	r2, #60	; 0x3c
 8001b4a:	5c9b      	ldrb	r3, [r3, r2]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_TIM_ConfigClockSource+0x20>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e0bc      	b.n	8001cce <HAL_TIM_ConfigClockSource+0x19a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	223c      	movs	r2, #60	; 0x3c
 8001b58:	2101      	movs	r1, #1
 8001b5a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	223d      	movs	r2, #61	; 0x3d
 8001b60:	2102      	movs	r1, #2
 8001b62:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4a5a      	ldr	r2, [pc, #360]	; (8001cd8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4a59      	ldr	r2, [pc, #356]	; (8001cdc <HAL_TIM_ConfigClockSource+0x1a8>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	0192      	lsls	r2, r2, #6
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d040      	beq.n	8001c12 <HAL_TIM_ConfigClockSource+0xde>
 8001b90:	2280      	movs	r2, #128	; 0x80
 8001b92:	0192      	lsls	r2, r2, #6
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d900      	bls.n	8001b9a <HAL_TIM_ConfigClockSource+0x66>
 8001b98:	e088      	b.n	8001cac <HAL_TIM_ConfigClockSource+0x178>
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	0152      	lsls	r2, r2, #5
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d100      	bne.n	8001ba4 <HAL_TIM_ConfigClockSource+0x70>
 8001ba2:	e088      	b.n	8001cb6 <HAL_TIM_ConfigClockSource+0x182>
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	0152      	lsls	r2, r2, #5
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d900      	bls.n	8001bae <HAL_TIM_ConfigClockSource+0x7a>
 8001bac:	e07e      	b.n	8001cac <HAL_TIM_ConfigClockSource+0x178>
 8001bae:	2b70      	cmp	r3, #112	; 0x70
 8001bb0:	d018      	beq.n	8001be4 <HAL_TIM_ConfigClockSource+0xb0>
 8001bb2:	d900      	bls.n	8001bb6 <HAL_TIM_ConfigClockSource+0x82>
 8001bb4:	e07a      	b.n	8001cac <HAL_TIM_ConfigClockSource+0x178>
 8001bb6:	2b60      	cmp	r3, #96	; 0x60
 8001bb8:	d04f      	beq.n	8001c5a <HAL_TIM_ConfigClockSource+0x126>
 8001bba:	d900      	bls.n	8001bbe <HAL_TIM_ConfigClockSource+0x8a>
 8001bbc:	e076      	b.n	8001cac <HAL_TIM_ConfigClockSource+0x178>
 8001bbe:	2b50      	cmp	r3, #80	; 0x50
 8001bc0:	d03b      	beq.n	8001c3a <HAL_TIM_ConfigClockSource+0x106>
 8001bc2:	d900      	bls.n	8001bc6 <HAL_TIM_ConfigClockSource+0x92>
 8001bc4:	e072      	b.n	8001cac <HAL_TIM_ConfigClockSource+0x178>
 8001bc6:	2b40      	cmp	r3, #64	; 0x40
 8001bc8:	d057      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x146>
 8001bca:	d900      	bls.n	8001bce <HAL_TIM_ConfigClockSource+0x9a>
 8001bcc:	e06e      	b.n	8001cac <HAL_TIM_ConfigClockSource+0x178>
 8001bce:	2b30      	cmp	r3, #48	; 0x30
 8001bd0:	d063      	beq.n	8001c9a <HAL_TIM_ConfigClockSource+0x166>
 8001bd2:	d86b      	bhi.n	8001cac <HAL_TIM_ConfigClockSource+0x178>
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	d060      	beq.n	8001c9a <HAL_TIM_ConfigClockSource+0x166>
 8001bd8:	d868      	bhi.n	8001cac <HAL_TIM_ConfigClockSource+0x178>
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d05d      	beq.n	8001c9a <HAL_TIM_ConfigClockSource+0x166>
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d05b      	beq.n	8001c9a <HAL_TIM_ConfigClockSource+0x166>
 8001be2:	e063      	b.n	8001cac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6899      	ldr	r1, [r3, #8]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f000 fc2a 	bl	800244c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2277      	movs	r2, #119	; 0x77
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	609a      	str	r2, [r3, #8]
      break;
 8001c10:	e052      	b.n	8001cb8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6899      	ldr	r1, [r3, #8]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f000 fc13 	bl	800244c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	01c9      	lsls	r1, r1, #7
 8001c34:	430a      	orrs	r2, r1
 8001c36:	609a      	str	r2, [r3, #8]
      break;
 8001c38:	e03e      	b.n	8001cb8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6859      	ldr	r1, [r3, #4]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	001a      	movs	r2, r3
 8001c48:	f000 fb84 	bl	8002354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2150      	movs	r1, #80	; 0x50
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 fbde 	bl	8002414 <TIM_ITRx_SetConfig>
      break;
 8001c58:	e02e      	b.n	8001cb8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6859      	ldr	r1, [r3, #4]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	001a      	movs	r2, r3
 8001c68:	f000 fba2 	bl	80023b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2160      	movs	r1, #96	; 0x60
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 fbce 	bl	8002414 <TIM_ITRx_SetConfig>
      break;
 8001c78:	e01e      	b.n	8001cb8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6859      	ldr	r1, [r3, #4]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	001a      	movs	r2, r3
 8001c88:	f000 fb64 	bl	8002354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2140      	movs	r1, #64	; 0x40
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 fbbe 	bl	8002414 <TIM_ITRx_SetConfig>
      break;
 8001c98:	e00e      	b.n	8001cb8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	0010      	movs	r0, r2
 8001ca6:	f000 fbb5 	bl	8002414 <TIM_ITRx_SetConfig>
      break;
 8001caa:	e005      	b.n	8001cb8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001cac:	230f      	movs	r3, #15
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
      break;
 8001cb4:	e000      	b.n	8001cb8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001cb6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	223d      	movs	r2, #61	; 0x3d
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	223c      	movs	r2, #60	; 0x3c
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	5499      	strb	r1, [r3, r2]

  return status;
 8001cc8:	230f      	movs	r3, #15
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b004      	add	sp, #16
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	ffceff88 	.word	0xffceff88
 8001cdc:	ffff00ff 	.word	0xffff00ff

08001ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <TIM_Base_SetConfig+0xd0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d003      	beq.n	8001d00 <TIM_Base_SetConfig+0x20>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a2e      	ldr	r2, [pc, #184]	; (8001db4 <TIM_Base_SetConfig+0xd4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d108      	bne.n	8001d12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2270      	movs	r2, #112	; 0x70
 8001d04:	4393      	bics	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <TIM_Base_SetConfig+0xd0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <TIM_Base_SetConfig+0x62>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <TIM_Base_SetConfig+0xd4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00f      	beq.n	8001d42 <TIM_Base_SetConfig+0x62>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <TIM_Base_SetConfig+0xd8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00b      	beq.n	8001d42 <TIM_Base_SetConfig+0x62>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <TIM_Base_SetConfig+0xdc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <TIM_Base_SetConfig+0x62>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <TIM_Base_SetConfig+0xe0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d003      	beq.n	8001d42 <TIM_Base_SetConfig+0x62>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <TIM_Base_SetConfig+0xe4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d108      	bne.n	8001d54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4a20      	ldr	r2, [pc, #128]	; (8001dc8 <TIM_Base_SetConfig+0xe8>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	4393      	bics	r3, r2
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <TIM_Base_SetConfig+0xd0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00b      	beq.n	8001d9a <TIM_Base_SetConfig+0xba>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <TIM_Base_SetConfig+0xdc>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <TIM_Base_SetConfig+0xba>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <TIM_Base_SetConfig+0xe0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d003      	beq.n	8001d9a <TIM_Base_SetConfig+0xba>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <TIM_Base_SetConfig+0xe4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d103      	bne.n	8001da2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	615a      	str	r2, [r3, #20]
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b004      	add	sp, #16
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40012c00 	.word	0x40012c00
 8001db4:	40000400 	.word	0x40000400
 8001db8:	40002000 	.word	0x40002000
 8001dbc:	40014000 	.word	0x40014000
 8001dc0:	40014400 	.word	0x40014400
 8001dc4:	40014800 	.word	0x40014800
 8001dc8:	fffffcff 	.word	0xfffffcff

08001dcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4393      	bics	r3, r2
 8001dde:	001a      	movs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a32      	ldr	r2, [pc, #200]	; (8001ec4 <TIM_OC1_SetConfig+0xf8>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2203      	movs	r2, #3
 8001e02:	4393      	bics	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2202      	movs	r2, #2
 8001e14:	4393      	bics	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <TIM_OC1_SetConfig+0xfc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00b      	beq.n	8001e42 <TIM_OC1_SetConfig+0x76>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <TIM_OC1_SetConfig+0x100>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <TIM_OC1_SetConfig+0x76>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <TIM_OC1_SetConfig+0x104>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d003      	beq.n	8001e42 <TIM_OC1_SetConfig+0x76>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a25      	ldr	r2, [pc, #148]	; (8001ed4 <TIM_OC1_SetConfig+0x108>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d10c      	bne.n	8001e5c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2208      	movs	r2, #8
 8001e46:	4393      	bics	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2204      	movs	r2, #4
 8001e58:	4393      	bics	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a1a      	ldr	r2, [pc, #104]	; (8001ec8 <TIM_OC1_SetConfig+0xfc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00b      	beq.n	8001e7c <TIM_OC1_SetConfig+0xb0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <TIM_OC1_SetConfig+0x100>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <TIM_OC1_SetConfig+0xb0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <TIM_OC1_SetConfig+0x104>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d003      	beq.n	8001e7c <TIM_OC1_SetConfig+0xb0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <TIM_OC1_SetConfig+0x108>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d111      	bne.n	8001ea0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <TIM_OC1_SetConfig+0x10c>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <TIM_OC1_SetConfig+0x110>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	621a      	str	r2, [r3, #32]
}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b006      	add	sp, #24
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	fffeff8f 	.word	0xfffeff8f
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40014000 	.word	0x40014000
 8001ed0:	40014400 	.word	0x40014400
 8001ed4:	40014800 	.word	0x40014800
 8001ed8:	fffffeff 	.word	0xfffffeff
 8001edc:	fffffdff 	.word	0xfffffdff

08001ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	2210      	movs	r2, #16
 8001ef0:	4393      	bics	r3, r2
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a2e      	ldr	r2, [pc, #184]	; (8001fc8 <TIM_OC2_SetConfig+0xe8>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <TIM_OC2_SetConfig+0xec>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	4393      	bics	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a24      	ldr	r2, [pc, #144]	; (8001fd0 <TIM_OC2_SetConfig+0xf0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d10d      	bne.n	8001f5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	4393      	bics	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2240      	movs	r2, #64	; 0x40
 8001f5a:	4393      	bics	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <TIM_OC2_SetConfig+0xf0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00b      	beq.n	8001f7e <TIM_OC2_SetConfig+0x9e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <TIM_OC2_SetConfig+0xf4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d007      	beq.n	8001f7e <TIM_OC2_SetConfig+0x9e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <TIM_OC2_SetConfig+0xf8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d003      	beq.n	8001f7e <TIM_OC2_SetConfig+0x9e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <TIM_OC2_SetConfig+0xfc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d113      	bne.n	8001fa6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <TIM_OC2_SetConfig+0x100>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <TIM_OC2_SetConfig+0x104>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	621a      	str	r2, [r3, #32]
}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b006      	add	sp, #24
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	feff8fff 	.word	0xfeff8fff
 8001fcc:	fffffcff 	.word	0xfffffcff
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40014000 	.word	0x40014000
 8001fd8:	40014400 	.word	0x40014400
 8001fdc:	40014800 	.word	0x40014800
 8001fe0:	fffffbff 	.word	0xfffffbff
 8001fe4:	fffff7ff 	.word	0xfffff7ff

08001fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4a35      	ldr	r2, [pc, #212]	; (80020cc <TIM_OC3_SetConfig+0xe4>)
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a2f      	ldr	r2, [pc, #188]	; (80020d0 <TIM_OC3_SetConfig+0xe8>)
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2203      	movs	r2, #3
 800201c:	4393      	bics	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	4a29      	ldr	r2, [pc, #164]	; (80020d4 <TIM_OC3_SetConfig+0xec>)
 800202e:	4013      	ands	r3, r2
 8002030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <TIM_OC3_SetConfig+0xf0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10d      	bne.n	8002062 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	4a24      	ldr	r2, [pc, #144]	; (80020dc <TIM_OC3_SetConfig+0xf4>)
 800204a:	4013      	ands	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <TIM_OC3_SetConfig+0xf8>)
 800205e:	4013      	ands	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <TIM_OC3_SetConfig+0xf0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00b      	beq.n	8002082 <TIM_OC3_SetConfig+0x9a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <TIM_OC3_SetConfig+0xfc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <TIM_OC3_SetConfig+0x9a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <TIM_OC3_SetConfig+0x100>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d003      	beq.n	8002082 <TIM_OC3_SetConfig+0x9a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <TIM_OC3_SetConfig+0x104>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d113      	bne.n	80020aa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4a1a      	ldr	r2, [pc, #104]	; (80020f0 <TIM_OC3_SetConfig+0x108>)
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <TIM_OC3_SetConfig+0x10c>)
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	621a      	str	r2, [r3, #32]
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b006      	add	sp, #24
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	fffffeff 	.word	0xfffffeff
 80020d0:	fffeff8f 	.word	0xfffeff8f
 80020d4:	fffffdff 	.word	0xfffffdff
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	fffff7ff 	.word	0xfffff7ff
 80020e0:	fffffbff 	.word	0xfffffbff
 80020e4:	40014000 	.word	0x40014000
 80020e8:	40014400 	.word	0x40014400
 80020ec:	40014800 	.word	0x40014800
 80020f0:	ffffefff 	.word	0xffffefff
 80020f4:	ffffdfff 	.word	0xffffdfff

080020f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <TIM_OC4_SetConfig+0xb0>)
 8002108:	401a      	ands	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a22      	ldr	r2, [pc, #136]	; (80021ac <TIM_OC4_SetConfig+0xb4>)
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4a21      	ldr	r2, [pc, #132]	; (80021b0 <TIM_OC4_SetConfig+0xb8>)
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <TIM_OC4_SetConfig+0xbc>)
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	031b      	lsls	r3, r3, #12
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a19      	ldr	r2, [pc, #100]	; (80021b8 <TIM_OC4_SetConfig+0xc0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00b      	beq.n	8002170 <TIM_OC4_SetConfig+0x78>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <TIM_OC4_SetConfig+0xc4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d007      	beq.n	8002170 <TIM_OC4_SetConfig+0x78>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <TIM_OC4_SetConfig+0xc8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d003      	beq.n	8002170 <TIM_OC4_SetConfig+0x78>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <TIM_OC4_SetConfig+0xcc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d109      	bne.n	8002184 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4a15      	ldr	r2, [pc, #84]	; (80021c8 <TIM_OC4_SetConfig+0xd0>)
 8002174:	4013      	ands	r3, r2
 8002176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	621a      	str	r2, [r3, #32]
}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b006      	add	sp, #24
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	ffffefff 	.word	0xffffefff
 80021ac:	feff8fff 	.word	0xfeff8fff
 80021b0:	fffffcff 	.word	0xfffffcff
 80021b4:	ffffdfff 	.word	0xffffdfff
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40014000 	.word	0x40014000
 80021c0:	40014400 	.word	0x40014400
 80021c4:	40014800 	.word	0x40014800
 80021c8:	ffffbfff 	.word	0xffffbfff

080021cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a25      	ldr	r2, [pc, #148]	; (8002270 <TIM_OC5_SetConfig+0xa4>)
 80021dc:	401a      	ands	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <TIM_OC5_SetConfig+0xa8>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4a1b      	ldr	r2, [pc, #108]	; (8002278 <TIM_OC5_SetConfig+0xac>)
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a17      	ldr	r2, [pc, #92]	; (800227c <TIM_OC5_SetConfig+0xb0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00b      	beq.n	800223a <TIM_OC5_SetConfig+0x6e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a16      	ldr	r2, [pc, #88]	; (8002280 <TIM_OC5_SetConfig+0xb4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <TIM_OC5_SetConfig+0x6e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a15      	ldr	r2, [pc, #84]	; (8002284 <TIM_OC5_SetConfig+0xb8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d003      	beq.n	800223a <TIM_OC5_SetConfig+0x6e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <TIM_OC5_SetConfig+0xbc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d109      	bne.n	800224e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <TIM_OC5_SetConfig+0xa4>)
 800223e:	4013      	ands	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	621a      	str	r2, [r3, #32]
}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b006      	add	sp, #24
 800226e:	bd80      	pop	{r7, pc}
 8002270:	fffeffff 	.word	0xfffeffff
 8002274:	fffeff8f 	.word	0xfffeff8f
 8002278:	fffdffff 	.word	0xfffdffff
 800227c:	40012c00 	.word	0x40012c00
 8002280:	40014000 	.word	0x40014000
 8002284:	40014400 	.word	0x40014400
 8002288:	40014800 	.word	0x40014800

0800228c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4a26      	ldr	r2, [pc, #152]	; (8002334 <TIM_OC6_SetConfig+0xa8>)
 800229c:	401a      	ands	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a20      	ldr	r2, [pc, #128]	; (8002338 <TIM_OC6_SetConfig+0xac>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <TIM_OC6_SetConfig+0xb0>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	051b      	lsls	r3, r3, #20
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a18      	ldr	r2, [pc, #96]	; (8002340 <TIM_OC6_SetConfig+0xb4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00b      	beq.n	80022fc <TIM_OC6_SetConfig+0x70>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a17      	ldr	r2, [pc, #92]	; (8002344 <TIM_OC6_SetConfig+0xb8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d007      	beq.n	80022fc <TIM_OC6_SetConfig+0x70>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a16      	ldr	r2, [pc, #88]	; (8002348 <TIM_OC6_SetConfig+0xbc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d003      	beq.n	80022fc <TIM_OC6_SetConfig+0x70>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <TIM_OC6_SetConfig+0xc0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d109      	bne.n	8002310 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4a14      	ldr	r2, [pc, #80]	; (8002350 <TIM_OC6_SetConfig+0xc4>)
 8002300:	4013      	ands	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	029b      	lsls	r3, r3, #10
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	621a      	str	r2, [r3, #32]
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b006      	add	sp, #24
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	ffefffff 	.word	0xffefffff
 8002338:	feff8fff 	.word	0xfeff8fff
 800233c:	ffdfffff 	.word	0xffdfffff
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40014000 	.word	0x40014000
 8002348:	40014400 	.word	0x40014400
 800234c:	40014800 	.word	0x40014800
 8002350:	fffbffff 	.word	0xfffbffff

08002354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	2201      	movs	r2, #1
 800236c:	4393      	bics	r3, r2
 800236e:	001a      	movs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	22f0      	movs	r2, #240	; 0xf0
 800237e:	4393      	bics	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	220a      	movs	r2, #10
 8002390:	4393      	bics	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	621a      	str	r2, [r3, #32]
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b006      	add	sp, #24
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	2210      	movs	r2, #16
 80023c2:	4393      	bics	r3, r2
 80023c4:	001a      	movs	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <TIM_TI2_ConfigInputStage+0x60>)
 80023da:	4013      	ands	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	031b      	lsls	r3, r3, #12
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	22a0      	movs	r2, #160	; 0xa0
 80023ec:	4393      	bics	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	621a      	str	r2, [r3, #32]
}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b006      	add	sp, #24
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	ffff0fff 	.word	0xffff0fff

08002414 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4a08      	ldr	r2, [pc, #32]	; (8002448 <TIM_ITRx_SetConfig+0x34>)
 8002428:	4013      	ands	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	2207      	movs	r2, #7
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	609a      	str	r2, [r3, #8]
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b004      	add	sp, #16
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	ffcfff8f 	.word	0xffcfff8f

0800244c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <TIM_ETR_SetConfig+0x3c>)
 8002464:	4013      	ands	r3, r2
 8002466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	021a      	lsls	r2, r3, #8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	431a      	orrs	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b006      	add	sp, #24
 8002486:	bd80      	pop	{r7, pc}
 8002488:	ffff00ff 	.word	0xffff00ff

0800248c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	221f      	movs	r2, #31
 800249c:	4013      	ands	r3, r2
 800249e:	2201      	movs	r2, #1
 80024a0:	409a      	lsls	r2, r3
 80024a2:	0013      	movs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	43d2      	mvns	r2, r2
 80024ae:	401a      	ands	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a1a      	ldr	r2, [r3, #32]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	211f      	movs	r1, #31
 80024bc:	400b      	ands	r3, r1
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4099      	lsls	r1, r3
 80024c2:	000b      	movs	r3, r1
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	621a      	str	r2, [r3, #32]
}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b006      	add	sp, #24
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	223c      	movs	r2, #60	; 0x3c
 80024e2:	5c9b      	ldrb	r3, [r3, r2]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e04f      	b.n	800258c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	223c      	movs	r2, #60	; 0x3c
 80024f0:	2101      	movs	r1, #1
 80024f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	223d      	movs	r2, #61	; 0x3d
 80024f8:	2102      	movs	r1, #2
 80024fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a20      	ldr	r2, [pc, #128]	; (8002594 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d108      	bne.n	8002528 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800251a:	4013      	ands	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2270      	movs	r2, #112	; 0x70
 800252c:	4393      	bics	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a13      	ldr	r2, [pc, #76]	; (8002594 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d009      	beq.n	8002560 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a12      	ldr	r2, [pc, #72]	; (800259c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d10c      	bne.n	800257a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	4393      	bics	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	4313      	orrs	r3, r2
 8002570:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	223d      	movs	r2, #61	; 0x3d
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	223c      	movs	r2, #60	; 0x3c
 8002586:	2100      	movs	r1, #0
 8002588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b004      	add	sp, #16
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40012c00 	.word	0x40012c00
 8002598:	ff0fffff 	.word	0xff0fffff
 800259c:	40000400 	.word	0x40000400
 80025a0:	40014000 	.word	0x40014000

080025a4 <__libc_init_array>:
 80025a4:	b570      	push	{r4, r5, r6, lr}
 80025a6:	2600      	movs	r6, #0
 80025a8:	4d0c      	ldr	r5, [pc, #48]	; (80025dc <__libc_init_array+0x38>)
 80025aa:	4c0d      	ldr	r4, [pc, #52]	; (80025e0 <__libc_init_array+0x3c>)
 80025ac:	1b64      	subs	r4, r4, r5
 80025ae:	10a4      	asrs	r4, r4, #2
 80025b0:	42a6      	cmp	r6, r4
 80025b2:	d109      	bne.n	80025c8 <__libc_init_array+0x24>
 80025b4:	2600      	movs	r6, #0
 80025b6:	f000 f821 	bl	80025fc <_init>
 80025ba:	4d0a      	ldr	r5, [pc, #40]	; (80025e4 <__libc_init_array+0x40>)
 80025bc:	4c0a      	ldr	r4, [pc, #40]	; (80025e8 <__libc_init_array+0x44>)
 80025be:	1b64      	subs	r4, r4, r5
 80025c0:	10a4      	asrs	r4, r4, #2
 80025c2:	42a6      	cmp	r6, r4
 80025c4:	d105      	bne.n	80025d2 <__libc_init_array+0x2e>
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
 80025c8:	00b3      	lsls	r3, r6, #2
 80025ca:	58eb      	ldr	r3, [r5, r3]
 80025cc:	4798      	blx	r3
 80025ce:	3601      	adds	r6, #1
 80025d0:	e7ee      	b.n	80025b0 <__libc_init_array+0xc>
 80025d2:	00b3      	lsls	r3, r6, #2
 80025d4:	58eb      	ldr	r3, [r5, r3]
 80025d6:	4798      	blx	r3
 80025d8:	3601      	adds	r6, #1
 80025da:	e7f2      	b.n	80025c2 <__libc_init_array+0x1e>
 80025dc:	080026a8 	.word	0x080026a8
 80025e0:	080026a8 	.word	0x080026a8
 80025e4:	080026a8 	.word	0x080026a8
 80025e8:	080026ac 	.word	0x080026ac

080025ec <memset>:
 80025ec:	0003      	movs	r3, r0
 80025ee:	1882      	adds	r2, r0, r2
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d100      	bne.n	80025f6 <memset+0xa>
 80025f4:	4770      	bx	lr
 80025f6:	7019      	strb	r1, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	e7f9      	b.n	80025f0 <memset+0x4>

080025fc <_init>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr

08002608 <_fini>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr

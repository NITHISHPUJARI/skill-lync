
Timer_Freq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002178  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002230  08002230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002270  08002270  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002270  08002270  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002270  08002270  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002270  08002270  00012270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002274  08002274  00012274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002284  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002284  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f84  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001646  00000000  00000000  00028fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002a600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145a4  00000000  00000000  0002b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aed6  00000000  00000000  0003feac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842b6  00000000  00000000  0004ad82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf038  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002340  00000000  00000000  000cf088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002218 	.word	0x08002218

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002218 	.word	0x08002218

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f9fe 	bl	800061c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f822 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8e2 	bl	80003ec <MX_GPIO_Init>
  MX_TIM3_Init();
 8000228:	f000 f866 	bl	80002f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <main+0x48>)
 800022e:	0018      	movs	r0, r3
 8000230:	f001 f9fc 	bl	800162c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000234:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <main+0x48>)
 8000236:	2100      	movs	r1, #0
 8000238:	0018      	movs	r0, r3
 800023a:	f001 fa45 	bl	80016c8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(!(TIM3 -> SR & TIM_SR_UIF));
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <main+0x4c>)
 8000242:	691b      	ldr	r3, [r3, #16]
 8000244:	2201      	movs	r2, #1
 8000246:	4013      	ands	r3, r2
 8000248:	d0fa      	beq.n	8000240 <main+0x28>
		  TIM3 -> SR = 0;
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <main+0x4c>)
 800024c:	2200      	movs	r2, #0
 800024e:	611a      	str	r2, [r3, #16]
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000250:	23a0      	movs	r3, #160	; 0xa0
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	2120      	movs	r1, #32
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fc9b 	bl	8000b92 <HAL_GPIO_TogglePin>
	  while(!(TIM3 -> SR & TIM_SR_UIF));
 800025c:	e7ef      	b.n	800023e <main+0x26>
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	20000028 	.word	0x20000028
 8000264:	40000400 	.word	0x40000400

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b093      	sub	sp, #76	; 0x4c
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	2414      	movs	r4, #20
 8000270:	193b      	adds	r3, r7, r4
 8000272:	0018      	movs	r0, r3
 8000274:	2334      	movs	r3, #52	; 0x34
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f001 ffc5 	bl	8002208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	0018      	movs	r0, r3
 8000282:	2310      	movs	r3, #16
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f001 ffbe 	bl	8002208 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fc99 	bl	8000bc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2202      	movs	r2, #2
 800029a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2280      	movs	r2, #128	; 0x80
 80002a0:	0052      	lsls	r2, r2, #1
 80002a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2200      	movs	r2, #0
 80002a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2240      	movs	r2, #64	; 0x40
 80002ae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fcc5 	bl	8000c48 <HAL_RCC_OscConfig>
 80002be:	1e03      	subs	r3, r0, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002c2:	f000 f8f3 	bl	80004ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2207      	movs	r2, #7
 80002ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2100      	movs	r1, #0
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 ffc0 	bl	8001268 <HAL_RCC_ClockConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002ec:	f000 f8de 	bl	80004ac <Error_Handler>
  }
}
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b013      	add	sp, #76	; 0x4c
 80002f6:	bd90      	pop	{r4, r7, pc}

080002f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08c      	sub	sp, #48	; 0x30
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002fe:	2320      	movs	r3, #32
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	0018      	movs	r0, r3
 8000304:	2310      	movs	r3, #16
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f001 ff7d 	bl	8002208 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030e:	2314      	movs	r3, #20
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	0018      	movs	r0, r3
 8000314:	230c      	movs	r3, #12
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f001 ff75 	bl	8002208 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	0018      	movs	r0, r3
 8000322:	2310      	movs	r3, #16
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f001 ff6e 	bl	8002208 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800032c:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <MX_TIM3_Init+0xec>)
 800032e:	4a2e      	ldr	r2, [pc, #184]	; (80003e8 <MX_TIM3_Init+0xf0>)
 8000330:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000332:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <MX_TIM3_Init+0xec>)
 8000334:	2201      	movs	r2, #1
 8000336:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000338:	4b2a      	ldr	r3, [pc, #168]	; (80003e4 <MX_TIM3_Init+0xec>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800033e:	4b29      	ldr	r3, [pc, #164]	; (80003e4 <MX_TIM3_Init+0xec>)
 8000340:	2263      	movs	r2, #99	; 0x63
 8000342:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000344:	4b27      	ldr	r3, [pc, #156]	; (80003e4 <MX_TIM3_Init+0xec>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034a:	4b26      	ldr	r3, [pc, #152]	; (80003e4 <MX_TIM3_Init+0xec>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000350:	4b24      	ldr	r3, [pc, #144]	; (80003e4 <MX_TIM3_Init+0xec>)
 8000352:	0018      	movs	r0, r3
 8000354:	f001 f912 	bl	800157c <HAL_TIM_Base_Init>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800035c:	f000 f8a6 	bl	80004ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000360:	2120      	movs	r1, #32
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2280      	movs	r2, #128	; 0x80
 8000366:	0152      	lsls	r2, r2, #5
 8000368:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800036a:	187a      	adds	r2, r7, r1
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <MX_TIM3_Init+0xec>)
 800036e:	0011      	movs	r1, r2
 8000370:	0018      	movs	r0, r3
 8000372:	f001 fb91 	bl	8001a98 <HAL_TIM_ConfigClockSource>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800037a:	f000 f897 	bl	80004ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <MX_TIM3_Init+0xec>)
 8000380:	0018      	movs	r0, r3
 8000382:	f001 fa85 	bl	8001890 <HAL_TIM_IC_Init>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800038a:	f000 f88f 	bl	80004ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038e:	2114      	movs	r1, #20
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800039c:	187a      	adds	r2, r7, r1
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_TIM3_Init+0xec>)
 80003a0:	0011      	movs	r1, r2
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 fea4 	bl	80020f0 <HAL_TIMEx_MasterConfigSynchronization>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80003ac:	f000 f87e 	bl	80004ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2201      	movs	r2, #1
 80003ba:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80003c8:	1d39      	adds	r1, r7, #4
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_TIM3_Init+0xec>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 fabe 	bl	8001950 <HAL_TIM_IC_ConfigChannel>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80003d8:	f000 f868 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b00c      	add	sp, #48	; 0x30
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000028 	.word	0x20000028
 80003e8:	40000400 	.word	0x40000400

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b089      	sub	sp, #36	; 0x24
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	240c      	movs	r4, #12
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	0018      	movs	r0, r3
 80003f8:	2314      	movs	r3, #20
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f001 ff03 	bl	8002208 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b28      	ldr	r3, [pc, #160]	; (80004a4 <MX_GPIO_Init+0xb8>)
 8000404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000406:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <MX_GPIO_Init+0xb8>)
 8000408:	2101      	movs	r1, #1
 800040a:	430a      	orrs	r2, r1
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
 800040e:	4b25      	ldr	r3, [pc, #148]	; (80004a4 <MX_GPIO_Init+0xb8>)
 8000410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000412:	2201      	movs	r2, #1
 8000414:	4013      	ands	r3, r2
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <MX_GPIO_Init+0xb8>)
 800041c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <MX_GPIO_Init+0xb8>)
 8000420:	2102      	movs	r1, #2
 8000422:	430a      	orrs	r2, r1
 8000424:	635a      	str	r2, [r3, #52]	; 0x34
 8000426:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <MX_GPIO_Init+0xb8>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	2202      	movs	r2, #2
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000432:	23a0      	movs	r3, #160	; 0xa0
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	2200      	movs	r2, #0
 8000438:	2120      	movs	r1, #32
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fb8c 	bl	8000b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	01db      	lsls	r3, r3, #7
 8000444:	4818      	ldr	r0, [pc, #96]	; (80004a8 <MX_GPIO_Init+0xbc>)
 8000446:	2200      	movs	r2, #0
 8000448:	0019      	movs	r1, r3
 800044a:	f000 fb85 	bl	8000b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2220      	movs	r2, #32
 8000452:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	193b      	adds	r3, r7, r4
 8000456:	2201      	movs	r2, #1
 8000458:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	193b      	adds	r3, r7, r4
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	193b      	adds	r3, r7, r4
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000466:	193a      	adds	r2, r7, r4
 8000468:	23a0      	movs	r3, #160	; 0xa0
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fa0e 	bl	8000890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000474:	0021      	movs	r1, r4
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	01d2      	lsls	r2, r2, #7
 800047c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2201      	movs	r2, #1
 8000482:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000490:	187b      	adds	r3, r7, r1
 8000492:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <MX_GPIO_Init+0xbc>)
 8000494:	0019      	movs	r1, r3
 8000496:	0010      	movs	r0, r2
 8000498:	f000 f9fa 	bl	8000890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b009      	add	sp, #36	; 0x24
 80004a2:	bd90      	pop	{r4, r7, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	50000400 	.word	0x50000400

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <Error_Handler+0x8>
	...

080004b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004be:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <HAL_MspInit+0x44>)
 80004c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <HAL_MspInit+0x44>)
 80004c4:	2101      	movs	r1, #1
 80004c6:	430a      	orrs	r2, r1
 80004c8:	641a      	str	r2, [r3, #64]	; 0x40
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <HAL_MspInit+0x44>)
 80004cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ce:	2201      	movs	r2, #1
 80004d0:	4013      	ands	r3, r2
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <HAL_MspInit+0x44>)
 80004d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_MspInit+0x44>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0549      	lsls	r1, r1, #21
 80004e0:	430a      	orrs	r2, r1
 80004e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <HAL_MspInit+0x44>)
 80004e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	055b      	lsls	r3, r3, #21
 80004ec:	4013      	ands	r3, r2
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	40021000 	.word	0x40021000

08000500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b08b      	sub	sp, #44	; 0x2c
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	2414      	movs	r4, #20
 800050a:	193b      	adds	r3, r7, r4
 800050c:	0018      	movs	r0, r3
 800050e:	2314      	movs	r3, #20
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f001 fe78 	bl	8002208 <memset>
  if(htim_base->Instance==TIM3)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a1a      	ldr	r2, [pc, #104]	; (8000588 <HAL_TIM_Base_MspInit+0x88>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d12e      	bne.n	8000580 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000522:	4b1a      	ldr	r3, [pc, #104]	; (800058c <HAL_TIM_Base_MspInit+0x8c>)
 8000524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <HAL_TIM_Base_MspInit+0x8c>)
 8000528:	2102      	movs	r1, #2
 800052a:	430a      	orrs	r2, r1
 800052c:	63da      	str	r2, [r3, #60]	; 0x3c
 800052e:	4b17      	ldr	r3, [pc, #92]	; (800058c <HAL_TIM_Base_MspInit+0x8c>)
 8000530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000532:	2202      	movs	r2, #2
 8000534:	4013      	ands	r3, r2
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <HAL_TIM_Base_MspInit+0x8c>)
 800053c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <HAL_TIM_Base_MspInit+0x8c>)
 8000540:	2101      	movs	r1, #1
 8000542:	430a      	orrs	r2, r1
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <HAL_TIM_Base_MspInit+0x8c>)
 8000548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054a:	2201      	movs	r2, #1
 800054c:	4013      	ands	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000552:	0021      	movs	r1, r4
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2240      	movs	r2, #64	; 0x40
 8000558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2202      	movs	r2, #2
 800055e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2201      	movs	r2, #1
 8000570:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	187a      	adds	r2, r7, r1
 8000574:	23a0      	movs	r3, #160	; 0xa0
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f988 	bl	8000890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b00b      	add	sp, #44	; 0x2c
 8000586:	bd90      	pop	{r4, r7, pc}
 8000588:	40000400 	.word	0x40000400
 800058c:	40021000 	.word	0x40021000

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <NMI_Handler+0x4>

08000596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <HardFault_Handler+0x4>

0800059c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 f89c 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005cc:	f7ff fff7 	bl	80005be <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <LoopForever+0x6>)
  ldr r1, =_edata
 80005d2:	490d      	ldr	r1, [pc, #52]	; (8000608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <LoopForever+0xe>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d8:	e002      	b.n	80005e0 <LoopCopyDataInit>

080005da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005de:	3304      	adds	r3, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e4:	d3f9      	bcc.n	80005da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e8:	4c0a      	ldr	r4, [pc, #40]	; (8000614 <LoopForever+0x16>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ec:	e001      	b.n	80005f2 <LoopFillZerobss>

080005ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f0:	3204      	adds	r2, #4

080005f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f4:	d3fb      	bcc.n	80005ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005f6:	f001 fde3 	bl	80021c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80005fa:	f7ff fe0d 	bl	8000218 <main>

080005fe <LoopForever>:

LoopForever:
  b LoopForever
 80005fe:	e7fe      	b.n	80005fe <LoopForever>
  ldr   r0, =_estack
 8000600:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000608:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800060c:	08002278 	.word	0x08002278
  ldr r2, =_sbss
 8000610:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000614:	20000078 	.word	0x20000078

08000618 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC1_IRQHandler>
	...

0800061c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <HAL_Init+0x3c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_Init+0x3c>)
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	0049      	lsls	r1, r1, #1
 8000632:	430a      	orrs	r2, r1
 8000634:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f810 	bl	800065c <HAL_InitTick>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d003      	beq.n	8000648 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	e001      	b.n	800064c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000648:	f7ff ff36 	bl	80004b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	781b      	ldrb	r3, [r3, #0]
}
 8000650:	0018      	movs	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	b002      	add	sp, #8
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40022000 	.word	0x40022000

0800065c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000664:	230f      	movs	r3, #15
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <HAL_InitTick+0x88>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d02b      	beq.n	80006cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <HAL_InitTick+0x8c>)
 8000676:	681c      	ldr	r4, [r3, #0]
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <HAL_InitTick+0x88>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	0019      	movs	r1, r3
 800067e:	23fa      	movs	r3, #250	; 0xfa
 8000680:	0098      	lsls	r0, r3, #2
 8000682:	f7ff fd3d 	bl	8000100 <__udivsi3>
 8000686:	0003      	movs	r3, r0
 8000688:	0019      	movs	r1, r3
 800068a:	0020      	movs	r0, r4
 800068c:	f7ff fd38 	bl	8000100 <__udivsi3>
 8000690:	0003      	movs	r3, r0
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f8ef 	bl	8000876 <HAL_SYSTICK_Config>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d112      	bne.n	80006c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b03      	cmp	r3, #3
 80006a0:	d80a      	bhi.n	80006b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	2301      	movs	r3, #1
 80006a6:	425b      	negs	r3, r3
 80006a8:	2200      	movs	r2, #0
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 f8ce 	bl	800084c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <HAL_InitTick+0x90>)
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	e00d      	b.n	80006d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	e008      	b.n	80006d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006c2:	230f      	movs	r3, #15
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e003      	b.n	80006d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006cc:	230f      	movs	r3, #15
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	2201      	movs	r2, #1
 80006d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006d4:	230f      	movs	r3, #15
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	781b      	ldrb	r3, [r3, #0]
}
 80006da:	0018      	movs	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	b005      	add	sp, #20
 80006e0:	bd90      	pop	{r4, r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	18d2      	adds	r2, r2, r3
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <HAL_IncTick+0x20>)
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000008 	.word	0x20000008
 8000710:	20000074 	.word	0x20000074

08000714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	20000074 	.word	0x20000074

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	0002      	movs	r2, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b7f      	cmp	r3, #127	; 0x7f
 800073c:	d828      	bhi.n	8000790 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073e:	4a2f      	ldr	r2, [pc, #188]	; (80007fc <__NVIC_SetPriority+0xd4>)
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b25b      	sxtb	r3, r3
 8000746:	089b      	lsrs	r3, r3, #2
 8000748:	33c0      	adds	r3, #192	; 0xc0
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	589b      	ldr	r3, [r3, r2]
 800074e:	1dfa      	adds	r2, r7, #7
 8000750:	7812      	ldrb	r2, [r2, #0]
 8000752:	0011      	movs	r1, r2
 8000754:	2203      	movs	r2, #3
 8000756:	400a      	ands	r2, r1
 8000758:	00d2      	lsls	r2, r2, #3
 800075a:	21ff      	movs	r1, #255	; 0xff
 800075c:	4091      	lsls	r1, r2
 800075e:	000a      	movs	r2, r1
 8000760:	43d2      	mvns	r2, r2
 8000762:	401a      	ands	r2, r3
 8000764:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	019b      	lsls	r3, r3, #6
 800076a:	22ff      	movs	r2, #255	; 0xff
 800076c:	401a      	ands	r2, r3
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	0018      	movs	r0, r3
 8000774:	2303      	movs	r3, #3
 8000776:	4003      	ands	r3, r0
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077c:	481f      	ldr	r0, [pc, #124]	; (80007fc <__NVIC_SetPriority+0xd4>)
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b25b      	sxtb	r3, r3
 8000784:	089b      	lsrs	r3, r3, #2
 8000786:	430a      	orrs	r2, r1
 8000788:	33c0      	adds	r3, #192	; 0xc0
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800078e:	e031      	b.n	80007f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <__NVIC_SetPriority+0xd8>)
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	0019      	movs	r1, r3
 8000798:	230f      	movs	r3, #15
 800079a:	400b      	ands	r3, r1
 800079c:	3b08      	subs	r3, #8
 800079e:	089b      	lsrs	r3, r3, #2
 80007a0:	3306      	adds	r3, #6
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	18d3      	adds	r3, r2, r3
 80007a6:	3304      	adds	r3, #4
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1dfa      	adds	r2, r7, #7
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	0011      	movs	r1, r2
 80007b0:	2203      	movs	r2, #3
 80007b2:	400a      	ands	r2, r1
 80007b4:	00d2      	lsls	r2, r2, #3
 80007b6:	21ff      	movs	r1, #255	; 0xff
 80007b8:	4091      	lsls	r1, r2
 80007ba:	000a      	movs	r2, r1
 80007bc:	43d2      	mvns	r2, r2
 80007be:	401a      	ands	r2, r3
 80007c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	019b      	lsls	r3, r3, #6
 80007c6:	22ff      	movs	r2, #255	; 0xff
 80007c8:	401a      	ands	r2, r3
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	0018      	movs	r0, r3
 80007d0:	2303      	movs	r3, #3
 80007d2:	4003      	ands	r3, r0
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <__NVIC_SetPriority+0xd8>)
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	001c      	movs	r4, r3
 80007e0:	230f      	movs	r3, #15
 80007e2:	4023      	ands	r3, r4
 80007e4:	3b08      	subs	r3, #8
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	430a      	orrs	r2, r1
 80007ea:	3306      	adds	r3, #6
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	18c3      	adds	r3, r0, r3
 80007f0:	3304      	adds	r3, #4
 80007f2:	601a      	str	r2, [r3, #0]
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b003      	add	sp, #12
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	e000e100 	.word	0xe000e100
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	1e5a      	subs	r2, r3, #1
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	045b      	lsls	r3, r3, #17
 8000814:	429a      	cmp	r2, r3
 8000816:	d301      	bcc.n	800081c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000818:	2301      	movs	r3, #1
 800081a:	e010      	b.n	800083e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <SysTick_Config+0x44>)
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	3a01      	subs	r2, #1
 8000822:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000824:	2301      	movs	r3, #1
 8000826:	425b      	negs	r3, r3
 8000828:	2103      	movs	r1, #3
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff ff7c 	bl	8000728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x44>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x44>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	0018      	movs	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	b002      	add	sp, #8
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	210f      	movs	r1, #15
 8000858:	187b      	adds	r3, r7, r1
 800085a:	1c02      	adds	r2, r0, #0
 800085c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	187b      	adds	r3, r7, r1
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b25b      	sxtb	r3, r3
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ff5d 	bl	8000728 <__NVIC_SetPriority>
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b004      	add	sp, #16
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff ffbf 	bl	8000804 <SysTick_Config>
 8000886:	0003      	movs	r3, r0
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	b002      	add	sp, #8
 800088e:	bd80      	pop	{r7, pc}

08000890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089e:	e147      	b.n	8000b30 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2101      	movs	r1, #1
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	4091      	lsls	r1, r2
 80008aa:	000a      	movs	r2, r1
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d100      	bne.n	80008b8 <HAL_GPIO_Init+0x28>
 80008b6:	e138      	b.n	8000b2a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2203      	movs	r2, #3
 80008be:	4013      	ands	r3, r2
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d005      	beq.n	80008d0 <HAL_GPIO_Init+0x40>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2203      	movs	r2, #3
 80008ca:	4013      	ands	r3, r2
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d130      	bne.n	8000932 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	409a      	lsls	r2, r3
 80008de:	0013      	movs	r3, r2
 80008e0:	43da      	mvns	r2, r3
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68da      	ldr	r2, [r3, #12]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	409a      	lsls	r2, r3
 80008f2:	0013      	movs	r3, r2
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000906:	2201      	movs	r2, #1
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	409a      	lsls	r2, r3
 800090c:	0013      	movs	r3, r2
 800090e:	43da      	mvns	r2, r3
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	091b      	lsrs	r3, r3, #4
 800091c:	2201      	movs	r2, #1
 800091e:	401a      	ands	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	409a      	lsls	r2, r3
 8000924:	0013      	movs	r3, r2
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2203      	movs	r2, #3
 8000938:	4013      	ands	r3, r2
 800093a:	2b03      	cmp	r3, #3
 800093c:	d017      	beq.n	800096e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2203      	movs	r2, #3
 800094a:	409a      	lsls	r2, r3
 800094c:	0013      	movs	r3, r2
 800094e:	43da      	mvns	r2, r3
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	409a      	lsls	r2, r3
 8000960:	0013      	movs	r3, r2
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2203      	movs	r2, #3
 8000974:	4013      	ands	r3, r2
 8000976:	2b02      	cmp	r3, #2
 8000978:	d123      	bne.n	80009c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	0092      	lsls	r2, r2, #2
 8000984:	58d3      	ldr	r3, [r2, r3]
 8000986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	2207      	movs	r2, #7
 800098c:	4013      	ands	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	220f      	movs	r2, #15
 8000992:	409a      	lsls	r2, r3
 8000994:	0013      	movs	r3, r2
 8000996:	43da      	mvns	r2, r3
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	691a      	ldr	r2, [r3, #16]
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	2107      	movs	r1, #7
 80009a6:	400b      	ands	r3, r1
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	409a      	lsls	r2, r3
 80009ac:	0013      	movs	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	08da      	lsrs	r2, r3, #3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3208      	adds	r2, #8
 80009bc:	0092      	lsls	r2, r2, #2
 80009be:	6939      	ldr	r1, [r7, #16]
 80009c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	409a      	lsls	r2, r3
 80009d0:	0013      	movs	r3, r2
 80009d2:	43da      	mvns	r2, r3
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2203      	movs	r2, #3
 80009e0:	401a      	ands	r2, r3
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	409a      	lsls	r2, r3
 80009e8:	0013      	movs	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	23c0      	movs	r3, #192	; 0xc0
 80009fc:	029b      	lsls	r3, r3, #10
 80009fe:	4013      	ands	r3, r2
 8000a00:	d100      	bne.n	8000a04 <HAL_GPIO_Init+0x174>
 8000a02:	e092      	b.n	8000b2a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a04:	4a50      	ldr	r2, [pc, #320]	; (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	089b      	lsrs	r3, r3, #2
 8000a0a:	3318      	adds	r3, #24
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	589b      	ldr	r3, [r3, r2]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	2203      	movs	r2, #3
 8000a16:	4013      	ands	r3, r2
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	220f      	movs	r2, #15
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	0013      	movs	r3, r2
 8000a20:	43da      	mvns	r2, r3
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	23a0      	movs	r3, #160	; 0xa0
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d013      	beq.n	8000a5a <HAL_GPIO_Init+0x1ca>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a45      	ldr	r2, [pc, #276]	; (8000b4c <HAL_GPIO_Init+0x2bc>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d00d      	beq.n	8000a56 <HAL_GPIO_Init+0x1c6>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a44      	ldr	r2, [pc, #272]	; (8000b50 <HAL_GPIO_Init+0x2c0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d007      	beq.n	8000a52 <HAL_GPIO_Init+0x1c2>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a43      	ldr	r2, [pc, #268]	; (8000b54 <HAL_GPIO_Init+0x2c4>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_GPIO_Init+0x1be>
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	e006      	b.n	8000a5c <HAL_GPIO_Init+0x1cc>
 8000a4e:	2305      	movs	r3, #5
 8000a50:	e004      	b.n	8000a5c <HAL_GPIO_Init+0x1cc>
 8000a52:	2302      	movs	r3, #2
 8000a54:	e002      	b.n	8000a5c <HAL_GPIO_Init+0x1cc>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <HAL_GPIO_Init+0x1cc>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	2103      	movs	r1, #3
 8000a60:	400a      	ands	r2, r1
 8000a62:	00d2      	lsls	r2, r2, #3
 8000a64:	4093      	lsls	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000a6c:	4936      	ldr	r1, [pc, #216]	; (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	089b      	lsrs	r3, r3, #2
 8000a72:	3318      	adds	r3, #24
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a7a:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	43da      	mvns	r2, r3
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	035b      	lsls	r3, r3, #13
 8000a92:	4013      	ands	r3, r2
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	43da      	mvns	r2, r3
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	039b      	lsls	r3, r3, #14
 8000abc:	4013      	ands	r3, r2
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ace:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000ad0:	2384      	movs	r3, #132	; 0x84
 8000ad2:	58d3      	ldr	r3, [r2, r3]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	43da      	mvns	r2, r3
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	029b      	lsls	r3, r3, #10
 8000ae8:	4013      	ands	r3, r2
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000af4:	4914      	ldr	r1, [pc, #80]	; (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000af6:	2284      	movs	r2, #132	; 0x84
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	58d3      	ldr	r3, [r2, r3]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	43da      	mvns	r2, r3
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	025b      	lsls	r3, r3, #9
 8000b16:	4013      	ands	r3, r2
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b22:	4909      	ldr	r1, [pc, #36]	; (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	40da      	lsrs	r2, r3
 8000b38:	1e13      	subs	r3, r2, #0
 8000b3a:	d000      	beq.n	8000b3e <HAL_GPIO_Init+0x2ae>
 8000b3c:	e6b0      	b.n	80008a0 <HAL_GPIO_Init+0x10>
  }
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b006      	add	sp, #24
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021800 	.word	0x40021800
 8000b4c:	50000400 	.word	0x50000400
 8000b50:	50000800 	.word	0x50000800
 8000b54:	50000c00 	.word	0x50000c00

08000b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	0008      	movs	r0, r1
 8000b62:	0011      	movs	r1, r2
 8000b64:	1cbb      	adds	r3, r7, #2
 8000b66:	1c02      	adds	r2, r0, #0
 8000b68:	801a      	strh	r2, [r3, #0]
 8000b6a:	1c7b      	adds	r3, r7, #1
 8000b6c:	1c0a      	adds	r2, r1, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b70:	1c7b      	adds	r3, r7, #1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d004      	beq.n	8000b82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b78:	1cbb      	adds	r3, r7, #2
 8000b7a:	881a      	ldrh	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b80:	e003      	b.n	8000b8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b82:	1cbb      	adds	r3, r7, #2
 8000b84:	881a      	ldrh	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	1cbb      	adds	r3, r7, #2
 8000b9e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ba6:	1cbb      	adds	r3, r7, #2
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	4013      	ands	r3, r2
 8000bae:	041a      	lsls	r2, r3, #16
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	1cb9      	adds	r1, r7, #2
 8000bb6:	8809      	ldrh	r1, [r1, #0]
 8000bb8:	400b      	ands	r3, r1
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	619a      	str	r2, [r3, #24]
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b004      	add	sp, #16
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	0019      	movs	r1, r3
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d11f      	bne.n	8000c2c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	0013      	movs	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	189b      	adds	r3, r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	4912      	ldr	r1, [pc, #72]	; (8000c44 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fa80 	bl	8000100 <__udivsi3>
 8000c00:	0003      	movs	r3, r0
 8000c02:	3301      	adds	r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c06:	e008      	b.n	8000c1a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	e001      	b.n	8000c1a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e009      	b.n	8000c2e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	401a      	ands	r2, r3
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d0ed      	beq.n	8000c08 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40007000 	.word	0x40007000
 8000c3c:	fffff9ff 	.word	0xfffff9ff
 8000c40:	20000000 	.word	0x20000000
 8000c44:	000f4240 	.word	0x000f4240

08000c48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e2f3      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4013      	ands	r3, r2
 8000c62:	d100      	bne.n	8000c66 <HAL_RCC_OscConfig+0x1e>
 8000c64:	e07c      	b.n	8000d60 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c66:	4bc3      	ldr	r3, [pc, #780]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2238      	movs	r2, #56	; 0x38
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c70:	4bc0      	ldr	r3, [pc, #768]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	2203      	movs	r2, #3
 8000c76:	4013      	ands	r3, r2
 8000c78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	d102      	bne.n	8000c86 <HAL_RCC_OscConfig+0x3e>
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d002      	beq.n	8000c8c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	2b08      	cmp	r3, #8
 8000c8a:	d10b      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8c:	4bb9      	ldr	r3, [pc, #740]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	029b      	lsls	r3, r3, #10
 8000c94:	4013      	ands	r3, r2
 8000c96:	d062      	beq.n	8000d5e <HAL_RCC_OscConfig+0x116>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d15e      	bne.n	8000d5e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e2ce      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	025b      	lsls	r3, r3, #9
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d107      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x78>
 8000cb0:	4bb0      	ldr	r3, [pc, #704]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4baf      	ldr	r3, [pc, #700]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	0249      	lsls	r1, r1, #9
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e020      	b.n	8000d02 <HAL_RCC_OscConfig+0xba>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	23a0      	movs	r3, #160	; 0xa0
 8000cc6:	02db      	lsls	r3, r3, #11
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d10e      	bne.n	8000cea <HAL_RCC_OscConfig+0xa2>
 8000ccc:	4ba9      	ldr	r3, [pc, #676]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4ba8      	ldr	r3, [pc, #672]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	02c9      	lsls	r1, r1, #11
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	4ba6      	ldr	r3, [pc, #664]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4ba5      	ldr	r3, [pc, #660]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	0249      	lsls	r1, r1, #9
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	e00b      	b.n	8000d02 <HAL_RCC_OscConfig+0xba>
 8000cea:	4ba2      	ldr	r3, [pc, #648]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4ba1      	ldr	r3, [pc, #644]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cf0:	49a1      	ldr	r1, [pc, #644]	; (8000f78 <HAL_RCC_OscConfig+0x330>)
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	4b9f      	ldr	r3, [pc, #636]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b9e      	ldr	r3, [pc, #632]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cfc:	499f      	ldr	r1, [pc, #636]	; (8000f7c <HAL_RCC_OscConfig+0x334>)
 8000cfe:	400a      	ands	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d014      	beq.n	8000d34 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d0a:	f7ff fd03 	bl	8000714 <HAL_GetTick>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d14:	f7ff fcfe 	bl	8000714 <HAL_GetTick>
 8000d18:	0002      	movs	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b64      	cmp	r3, #100	; 0x64
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e28d      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d26:	4b93      	ldr	r3, [pc, #588]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	029b      	lsls	r3, r3, #10
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d0f0      	beq.n	8000d14 <HAL_RCC_OscConfig+0xcc>
 8000d32:	e015      	b.n	8000d60 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d34:	f7ff fcee 	bl	8000714 <HAL_GetTick>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d3c:	e008      	b.n	8000d50 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d3e:	f7ff fce9 	bl	8000714 <HAL_GetTick>
 8000d42:	0002      	movs	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b64      	cmp	r3, #100	; 0x64
 8000d4a:	d901      	bls.n	8000d50 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e278      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d50:	4b88      	ldr	r3, [pc, #544]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	029b      	lsls	r3, r3, #10
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d1f0      	bne.n	8000d3e <HAL_RCC_OscConfig+0xf6>
 8000d5c:	e000      	b.n	8000d60 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2202      	movs	r2, #2
 8000d66:	4013      	ands	r3, r2
 8000d68:	d100      	bne.n	8000d6c <HAL_RCC_OscConfig+0x124>
 8000d6a:	e099      	b.n	8000ea0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d6c:	4b81      	ldr	r3, [pc, #516]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	2238      	movs	r2, #56	; 0x38
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d76:	4b7f      	ldr	r3, [pc, #508]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	2b10      	cmp	r3, #16
 8000d84:	d102      	bne.n	8000d8c <HAL_RCC_OscConfig+0x144>
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d002      	beq.n	8000d92 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d135      	bne.n	8000dfe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d92:	4b78      	ldr	r3, [pc, #480]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d005      	beq.n	8000daa <HAL_RCC_OscConfig+0x162>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e24b      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000daa:	4b72      	ldr	r3, [pc, #456]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	4a74      	ldr	r2, [pc, #464]	; (8000f80 <HAL_RCC_OscConfig+0x338>)
 8000db0:	4013      	ands	r3, r2
 8000db2:	0019      	movs	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	021a      	lsls	r2, r3, #8
 8000dba:	4b6e      	ldr	r3, [pc, #440]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d112      	bne.n	8000dec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000dc6:	4b6b      	ldr	r3, [pc, #428]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a6e      	ldr	r2, [pc, #440]	; (8000f84 <HAL_RCC_OscConfig+0x33c>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	0019      	movs	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000dda:	4b66      	ldr	r3, [pc, #408]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	0adb      	lsrs	r3, r3, #11
 8000de0:	2207      	movs	r2, #7
 8000de2:	4013      	ands	r3, r2
 8000de4:	4a68      	ldr	r2, [pc, #416]	; (8000f88 <HAL_RCC_OscConfig+0x340>)
 8000de6:	40da      	lsrs	r2, r3
 8000de8:	4b68      	ldr	r3, [pc, #416]	; (8000f8c <HAL_RCC_OscConfig+0x344>)
 8000dea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000dec:	4b68      	ldr	r3, [pc, #416]	; (8000f90 <HAL_RCC_OscConfig+0x348>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff fc33 	bl	800065c <HAL_InitTick>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d051      	beq.n	8000e9e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e221      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d030      	beq.n	8000e68 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e06:	4b5b      	ldr	r3, [pc, #364]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a5e      	ldr	r2, [pc, #376]	; (8000f84 <HAL_RCC_OscConfig+0x33c>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	0019      	movs	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e16:	430a      	orrs	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000e1a:	4b56      	ldr	r3, [pc, #344]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4b55      	ldr	r3, [pc, #340]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	0049      	lsls	r1, r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc74 	bl	8000714 <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e32:	f7ff fc6f 	bl	8000714 <HAL_GetTick>
 8000e36:	0002      	movs	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e1fe      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e44:	4b4b      	ldr	r3, [pc, #300]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d0f0      	beq.n	8000e32 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e50:	4b48      	ldr	r3, [pc, #288]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4a4a      	ldr	r2, [pc, #296]	; (8000f80 <HAL_RCC_OscConfig+0x338>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	0019      	movs	r1, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	021a      	lsls	r2, r3, #8
 8000e60:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e62:	430a      	orrs	r2, r1
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	e01b      	b.n	8000ea0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000e68:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b41      	ldr	r3, [pc, #260]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e6e:	4949      	ldr	r1, [pc, #292]	; (8000f94 <HAL_RCC_OscConfig+0x34c>)
 8000e70:	400a      	ands	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e74:	f7ff fc4e 	bl	8000714 <HAL_GetTick>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e7e:	f7ff fc49 	bl	8000714 <HAL_GetTick>
 8000e82:	0002      	movs	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e1d8      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e90:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d1f0      	bne.n	8000e7e <HAL_RCC_OscConfig+0x236>
 8000e9c:	e000      	b.n	8000ea0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e9e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d047      	beq.n	8000f3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000eaa:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2238      	movs	r2, #56	; 0x38
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b18      	cmp	r3, #24
 8000eb4:	d10a      	bne.n	8000ecc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eba:	2202      	movs	r2, #2
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d03c      	beq.n	8000f3a <HAL_RCC_OscConfig+0x2f2>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d138      	bne.n	8000f3a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e1ba      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d019      	beq.n	8000f08 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000ed4:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000ed6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000eda:	2101      	movs	r1, #1
 8000edc:	430a      	orrs	r2, r1
 8000ede:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fc18 	bl	8000714 <HAL_GetTick>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eea:	f7ff fc13 	bl	8000714 <HAL_GetTick>
 8000eee:	0002      	movs	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e1a2      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f00:	2202      	movs	r2, #2
 8000f02:	4013      	ands	r3, r2
 8000f04:	d0f1      	beq.n	8000eea <HAL_RCC_OscConfig+0x2a2>
 8000f06:	e018      	b.n	8000f3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000f0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	438a      	bics	r2, r1
 8000f12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f14:	f7ff fbfe 	bl	8000714 <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1e:	f7ff fbf9 	bl	8000714 <HAL_GetTick>
 8000f22:	0002      	movs	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e188      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f34:	2202      	movs	r2, #2
 8000f36:	4013      	ands	r3, r2
 8000f38:	d1f1      	bne.n	8000f1e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4013      	ands	r3, r2
 8000f42:	d100      	bne.n	8000f46 <HAL_RCC_OscConfig+0x2fe>
 8000f44:	e0c6      	b.n	80010d4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f46:	231f      	movs	r3, #31
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2238      	movs	r2, #56	; 0x38
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b20      	cmp	r3, #32
 8000f58:	d11e      	bne.n	8000f98 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f5e:	2202      	movs	r2, #2
 8000f60:	4013      	ands	r3, r2
 8000f62:	d100      	bne.n	8000f66 <HAL_RCC_OscConfig+0x31e>
 8000f64:	e0b6      	b.n	80010d4 <HAL_RCC_OscConfig+0x48c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d000      	beq.n	8000f70 <HAL_RCC_OscConfig+0x328>
 8000f6e:	e0b1      	b.n	80010d4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e166      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
 8000f74:	40021000 	.word	0x40021000
 8000f78:	fffeffff 	.word	0xfffeffff
 8000f7c:	fffbffff 	.word	0xfffbffff
 8000f80:	ffff80ff 	.word	0xffff80ff
 8000f84:	ffffc7ff 	.word	0xffffc7ff
 8000f88:	00f42400 	.word	0x00f42400
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000004 	.word	0x20000004
 8000f94:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f98:	4bac      	ldr	r3, [pc, #688]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8000f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	055b      	lsls	r3, r3, #21
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d101      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x360>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_RCC_OscConfig+0x362>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d011      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4ba7      	ldr	r3, [pc, #668]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8000fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fb2:	4ba6      	ldr	r3, [pc, #664]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	0549      	lsls	r1, r1, #21
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fbc:	4ba3      	ldr	r3, [pc, #652]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8000fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	055b      	lsls	r3, r3, #21
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000fca:	231f      	movs	r3, #31
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fd2:	4b9f      	ldr	r3, [pc, #636]	; (8001250 <HAL_RCC_OscConfig+0x608>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d11a      	bne.n	8001014 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fde:	4b9c      	ldr	r3, [pc, #624]	; (8001250 <HAL_RCC_OscConfig+0x608>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b9b      	ldr	r3, [pc, #620]	; (8001250 <HAL_RCC_OscConfig+0x608>)
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	0049      	lsls	r1, r1, #1
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fb92 	bl	8000714 <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff6:	f7ff fb8d 	bl	8000714 <HAL_GetTick>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e11c      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001008:	4b91      	ldr	r3, [pc, #580]	; (8001250 <HAL_RCC_OscConfig+0x608>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4013      	ands	r3, r2
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d106      	bne.n	800102a <HAL_RCC_OscConfig+0x3e2>
 800101c:	4b8b      	ldr	r3, [pc, #556]	; (800124c <HAL_RCC_OscConfig+0x604>)
 800101e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001020:	4b8a      	ldr	r3, [pc, #552]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8001022:	2101      	movs	r1, #1
 8001024:	430a      	orrs	r2, r1
 8001026:	65da      	str	r2, [r3, #92]	; 0x5c
 8001028:	e01c      	b.n	8001064 <HAL_RCC_OscConfig+0x41c>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0x404>
 8001032:	4b86      	ldr	r3, [pc, #536]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8001034:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001036:	4b85      	ldr	r3, [pc, #532]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8001038:	2104      	movs	r1, #4
 800103a:	430a      	orrs	r2, r1
 800103c:	65da      	str	r2, [r3, #92]	; 0x5c
 800103e:	4b83      	ldr	r3, [pc, #524]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8001040:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001042:	4b82      	ldr	r3, [pc, #520]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8001044:	2101      	movs	r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	65da      	str	r2, [r3, #92]	; 0x5c
 800104a:	e00b      	b.n	8001064 <HAL_RCC_OscConfig+0x41c>
 800104c:	4b7f      	ldr	r3, [pc, #508]	; (800124c <HAL_RCC_OscConfig+0x604>)
 800104e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001050:	4b7e      	ldr	r3, [pc, #504]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8001052:	2101      	movs	r1, #1
 8001054:	438a      	bics	r2, r1
 8001056:	65da      	str	r2, [r3, #92]	; 0x5c
 8001058:	4b7c      	ldr	r3, [pc, #496]	; (800124c <HAL_RCC_OscConfig+0x604>)
 800105a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800105c:	4b7b      	ldr	r3, [pc, #492]	; (800124c <HAL_RCC_OscConfig+0x604>)
 800105e:	2104      	movs	r1, #4
 8001060:	438a      	bics	r2, r1
 8001062:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d014      	beq.n	8001096 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106c:	f7ff fb52 	bl	8000714 <HAL_GetTick>
 8001070:	0003      	movs	r3, r0
 8001072:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001074:	e009      	b.n	800108a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f7ff fb4d 	bl	8000714 <HAL_GetTick>
 800107a:	0002      	movs	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	4a74      	ldr	r2, [pc, #464]	; (8001254 <HAL_RCC_OscConfig+0x60c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e0db      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800108a:	4b70      	ldr	r3, [pc, #448]	; (800124c <HAL_RCC_OscConfig+0x604>)
 800108c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108e:	2202      	movs	r2, #2
 8001090:	4013      	ands	r3, r2
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0x42e>
 8001094:	e013      	b.n	80010be <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001096:	f7ff fb3d 	bl	8000714 <HAL_GetTick>
 800109a:	0003      	movs	r3, r0
 800109c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800109e:	e009      	b.n	80010b4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a0:	f7ff fb38 	bl	8000714 <HAL_GetTick>
 80010a4:	0002      	movs	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	4a6a      	ldr	r2, [pc, #424]	; (8001254 <HAL_RCC_OscConfig+0x60c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e0c6      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010b4:	4b65      	ldr	r3, [pc, #404]	; (800124c <HAL_RCC_OscConfig+0x604>)
 80010b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b8:	2202      	movs	r2, #2
 80010ba:	4013      	ands	r3, r2
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80010be:	231f      	movs	r3, #31
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d105      	bne.n	80010d4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80010c8:	4b60      	ldr	r3, [pc, #384]	; (800124c <HAL_RCC_OscConfig+0x604>)
 80010ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010cc:	4b5f      	ldr	r3, [pc, #380]	; (800124c <HAL_RCC_OscConfig+0x604>)
 80010ce:	4962      	ldr	r1, [pc, #392]	; (8001258 <HAL_RCC_OscConfig+0x610>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d100      	bne.n	80010de <HAL_RCC_OscConfig+0x496>
 80010dc:	e0b0      	b.n	8001240 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010de:	4b5b      	ldr	r3, [pc, #364]	; (800124c <HAL_RCC_OscConfig+0x604>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2238      	movs	r2, #56	; 0x38
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b10      	cmp	r3, #16
 80010e8:	d100      	bne.n	80010ec <HAL_RCC_OscConfig+0x4a4>
 80010ea:	e078      	b.n	80011de <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d153      	bne.n	800119c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f4:	4b55      	ldr	r3, [pc, #340]	; (800124c <HAL_RCC_OscConfig+0x604>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <HAL_RCC_OscConfig+0x604>)
 80010fa:	4958      	ldr	r1, [pc, #352]	; (800125c <HAL_RCC_OscConfig+0x614>)
 80010fc:	400a      	ands	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001100:	f7ff fb08 	bl	8000714 <HAL_GetTick>
 8001104:	0003      	movs	r3, r0
 8001106:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110a:	f7ff fb03 	bl	8000714 <HAL_GetTick>
 800110e:	0002      	movs	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e092      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800111c:	4b4b      	ldr	r3, [pc, #300]	; (800124c <HAL_RCC_OscConfig+0x604>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	049b      	lsls	r3, r3, #18
 8001124:	4013      	ands	r3, r2
 8001126:	d1f0      	bne.n	800110a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001128:	4b48      	ldr	r3, [pc, #288]	; (800124c <HAL_RCC_OscConfig+0x604>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_RCC_OscConfig+0x618>)
 800112e:	4013      	ands	r3, r2
 8001130:	0019      	movs	r1, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1a      	ldr	r2, [r3, #32]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	431a      	orrs	r2, r3
 8001150:	4b3e      	ldr	r3, [pc, #248]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8001152:	430a      	orrs	r2, r1
 8001154:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b3c      	ldr	r3, [pc, #240]	; (800124c <HAL_RCC_OscConfig+0x604>)
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	0449      	lsls	r1, r1, #17
 8001160:	430a      	orrs	r2, r1
 8001162:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001164:	4b39      	ldr	r3, [pc, #228]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	4b38      	ldr	r3, [pc, #224]	; (800124c <HAL_RCC_OscConfig+0x604>)
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	0549      	lsls	r1, r1, #21
 800116e:	430a      	orrs	r2, r1
 8001170:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001172:	f7ff facf 	bl	8000714 <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117c:	f7ff faca 	bl	8000714 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e059      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <HAL_RCC_OscConfig+0x604>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	049b      	lsls	r3, r3, #18
 8001196:	4013      	ands	r3, r2
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x534>
 800119a:	e051      	b.n	8001240 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_RCC_OscConfig+0x604>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_RCC_OscConfig+0x604>)
 80011a2:	492e      	ldr	r1, [pc, #184]	; (800125c <HAL_RCC_OscConfig+0x614>)
 80011a4:	400a      	ands	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fab4 	bl	8000714 <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b2:	f7ff faaf 	bl	8000714 <HAL_GetTick>
 80011b6:	0002      	movs	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e03e      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <HAL_RCC_OscConfig+0x604>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	049b      	lsls	r3, r3, #18
 80011cc:	4013      	ands	r3, r2
 80011ce:	d1f0      	bne.n	80011b2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <HAL_RCC_OscConfig+0x604>)
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_RCC_OscConfig+0x604>)
 80011d6:	4923      	ldr	r1, [pc, #140]	; (8001264 <HAL_RCC_OscConfig+0x61c>)
 80011d8:	400a      	ands	r2, r1
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	e030      	b.n	8001240 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e02b      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_RCC_OscConfig+0x604>)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2203      	movs	r2, #3
 80011f4:	401a      	ands	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d11e      	bne.n	800123c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2270      	movs	r2, #112	; 0x70
 8001202:	401a      	ands	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001208:	429a      	cmp	r2, r3
 800120a:	d117      	bne.n	800123c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	23fe      	movs	r3, #254	; 0xfe
 8001210:	01db      	lsls	r3, r3, #7
 8001212:	401a      	ands	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800121a:	429a      	cmp	r2, r3
 800121c:	d10e      	bne.n	800123c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	23f8      	movs	r3, #248	; 0xf8
 8001222:	039b      	lsls	r3, r3, #14
 8001224:	401a      	ands	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800122a:	429a      	cmp	r2, r3
 800122c:	d106      	bne.n	800123c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	0f5b      	lsrs	r3, r3, #29
 8001232:	075a      	lsls	r2, r3, #29
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b008      	add	sp, #32
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	40021000 	.word	0x40021000
 8001250:	40007000 	.word	0x40007000
 8001254:	00001388 	.word	0x00001388
 8001258:	efffffff 	.word	0xefffffff
 800125c:	feffffff 	.word	0xfeffffff
 8001260:	1fc1808c 	.word	0x1fc1808c
 8001264:	effefffc 	.word	0xeffefffc

08001268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e0e9      	b.n	8001450 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800127c:	4b76      	ldr	r3, [pc, #472]	; (8001458 <HAL_RCC_ClockConfig+0x1f0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2207      	movs	r2, #7
 8001282:	4013      	ands	r3, r2
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d91e      	bls.n	80012c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128a:	4b73      	ldr	r3, [pc, #460]	; (8001458 <HAL_RCC_ClockConfig+0x1f0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2207      	movs	r2, #7
 8001290:	4393      	bics	r3, r2
 8001292:	0019      	movs	r1, r3
 8001294:	4b70      	ldr	r3, [pc, #448]	; (8001458 <HAL_RCC_ClockConfig+0x1f0>)
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800129c:	f7ff fa3a 	bl	8000714 <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012a4:	e009      	b.n	80012ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a6:	f7ff fa35 	bl	8000714 <HAL_GetTick>
 80012aa:	0002      	movs	r2, r0
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	4a6a      	ldr	r2, [pc, #424]	; (800145c <HAL_RCC_ClockConfig+0x1f4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e0ca      	b.n	8001450 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <HAL_RCC_ClockConfig+0x1f0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2207      	movs	r2, #7
 80012c0:	4013      	ands	r3, r2
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d1ee      	bne.n	80012a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2202      	movs	r2, #2
 80012ce:	4013      	ands	r3, r2
 80012d0:	d015      	beq.n	80012fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2204      	movs	r2, #4
 80012d8:	4013      	ands	r3, r2
 80012da:	d006      	beq.n	80012ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012dc:	4b60      	ldr	r3, [pc, #384]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	4b5f      	ldr	r3, [pc, #380]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 80012e2:	21e0      	movs	r1, #224	; 0xe0
 80012e4:	01c9      	lsls	r1, r1, #7
 80012e6:	430a      	orrs	r2, r1
 80012e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	4a5d      	ldr	r2, [pc, #372]	; (8001464 <HAL_RCC_ClockConfig+0x1fc>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	0019      	movs	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	4b59      	ldr	r3, [pc, #356]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2201      	movs	r2, #1
 8001304:	4013      	ands	r3, r2
 8001306:	d057      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d107      	bne.n	8001320 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001310:	4b53      	ldr	r3, [pc, #332]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	029b      	lsls	r3, r3, #10
 8001318:	4013      	ands	r3, r2
 800131a:	d12b      	bne.n	8001374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e097      	b.n	8001450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d107      	bne.n	8001338 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001328:	4b4d      	ldr	r3, [pc, #308]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	049b      	lsls	r3, r3, #18
 8001330:	4013      	ands	r3, r2
 8001332:	d11f      	bne.n	8001374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e08b      	b.n	8001450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d107      	bne.n	8001350 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001340:	4b47      	ldr	r3, [pc, #284]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4013      	ands	r3, r2
 800134a:	d113      	bne.n	8001374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e07f      	b.n	8001450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b03      	cmp	r3, #3
 8001356:	d106      	bne.n	8001366 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 800135a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135c:	2202      	movs	r2, #2
 800135e:	4013      	ands	r3, r2
 8001360:	d108      	bne.n	8001374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e074      	b.n	8001450 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001366:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 8001368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136a:	2202      	movs	r2, #2
 800136c:	4013      	ands	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e06d      	b.n	8001450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2207      	movs	r2, #7
 800137a:	4393      	bics	r3, r2
 800137c:	0019      	movs	r1, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 8001384:	430a      	orrs	r2, r1
 8001386:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001388:	f7ff f9c4 	bl	8000714 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001390:	e009      	b.n	80013a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001392:	f7ff f9bf 	bl	8000714 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	4a2f      	ldr	r2, [pc, #188]	; (800145c <HAL_RCC_ClockConfig+0x1f4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e054      	b.n	8001450 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2238      	movs	r2, #56	; 0x38
 80013ac:	401a      	ands	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1ec      	bne.n	8001392 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_RCC_ClockConfig+0x1f0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2207      	movs	r2, #7
 80013be:	4013      	ands	r3, r2
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d21e      	bcs.n	8001404 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_ClockConfig+0x1f0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2207      	movs	r2, #7
 80013cc:	4393      	bics	r3, r2
 80013ce:	0019      	movs	r1, r3
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_RCC_ClockConfig+0x1f0>)
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013d8:	f7ff f99c 	bl	8000714 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013e0:	e009      	b.n	80013f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e2:	f7ff f997 	bl	8000714 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <HAL_RCC_ClockConfig+0x1f4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e02c      	b.n	8001450 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_RCC_ClockConfig+0x1f0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2207      	movs	r2, #7
 80013fc:	4013      	ands	r3, r2
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d1ee      	bne.n	80013e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2204      	movs	r2, #4
 800140a:	4013      	ands	r3, r2
 800140c:	d009      	beq.n	8001422 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <HAL_RCC_ClockConfig+0x200>)
 8001414:	4013      	ands	r3, r2
 8001416:	0019      	movs	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 800141e:	430a      	orrs	r2, r1
 8001420:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001422:	f000 f829 	bl	8001478 <HAL_RCC_GetSysClockFreq>
 8001426:	0001      	movs	r1, r0
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_RCC_ClockConfig+0x1f8>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	220f      	movs	r2, #15
 8001430:	401a      	ands	r2, r3
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_RCC_ClockConfig+0x204>)
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	58d3      	ldr	r3, [r2, r3]
 8001438:	221f      	movs	r2, #31
 800143a:	4013      	ands	r3, r2
 800143c:	000a      	movs	r2, r1
 800143e:	40da      	lsrs	r2, r3
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_ClockConfig+0x208>)
 8001442:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_ClockConfig+0x20c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff f907 	bl	800065c <HAL_InitTick>
 800144e:	0003      	movs	r3, r0
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b004      	add	sp, #16
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40022000 	.word	0x40022000
 800145c:	00001388 	.word	0x00001388
 8001460:	40021000 	.word	0x40021000
 8001464:	fffff0ff 	.word	0xfffff0ff
 8001468:	ffff8fff 	.word	0xffff8fff
 800146c:	08002230 	.word	0x08002230
 8001470:	20000000 	.word	0x20000000
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800147e:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2238      	movs	r2, #56	; 0x38
 8001484:	4013      	ands	r3, r2
 8001486:	d10f      	bne.n	80014a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	0adb      	lsrs	r3, r3, #11
 800148e:	2207      	movs	r2, #7
 8001490:	4013      	ands	r3, r2
 8001492:	2201      	movs	r2, #1
 8001494:	409a      	lsls	r2, r3
 8001496:	0013      	movs	r3, r2
 8001498:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	4835      	ldr	r0, [pc, #212]	; (8001574 <HAL_RCC_GetSysClockFreq+0xfc>)
 800149e:	f7fe fe2f 	bl	8000100 <__udivsi3>
 80014a2:	0003      	movs	r3, r0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	e05d      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a8:	4b31      	ldr	r3, [pc, #196]	; (8001570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2238      	movs	r2, #56	; 0x38
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d102      	bne.n	80014ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014b4:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_RCC_GetSysClockFreq+0x100>)
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	e054      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2238      	movs	r2, #56	; 0x38
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d138      	bne.n	8001538 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2203      	movs	r2, #3
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	2207      	movs	r2, #7
 80014d8:	4013      	ands	r3, r2
 80014da:	3301      	adds	r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d10d      	bne.n	8001500 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	4824      	ldr	r0, [pc, #144]	; (8001578 <HAL_RCC_GetSysClockFreq+0x100>)
 80014e8:	f7fe fe0a 	bl	8000100 <__udivsi3>
 80014ec:	0003      	movs	r3, r0
 80014ee:	0019      	movs	r1, r3
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	227f      	movs	r2, #127	; 0x7f
 80014f8:	4013      	ands	r3, r2
 80014fa:	434b      	muls	r3, r1
 80014fc:	617b      	str	r3, [r7, #20]
        break;
 80014fe:	e00d      	b.n	800151c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	481c      	ldr	r0, [pc, #112]	; (8001574 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001504:	f7fe fdfc 	bl	8000100 <__udivsi3>
 8001508:	0003      	movs	r3, r0
 800150a:	0019      	movs	r1, r3
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	227f      	movs	r2, #127	; 0x7f
 8001514:	4013      	ands	r3, r2
 8001516:	434b      	muls	r3, r1
 8001518:	617b      	str	r3, [r7, #20]
        break;
 800151a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0f5b      	lsrs	r3, r3, #29
 8001522:	2207      	movs	r2, #7
 8001524:	4013      	ands	r3, r2
 8001526:	3301      	adds	r3, #1
 8001528:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	6978      	ldr	r0, [r7, #20]
 800152e:	f7fe fde7 	bl	8000100 <__udivsi3>
 8001532:	0003      	movs	r3, r0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	e015      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2238      	movs	r2, #56	; 0x38
 800153e:	4013      	ands	r3, r2
 8001540:	2b20      	cmp	r3, #32
 8001542:	d103      	bne.n	800154c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2238      	movs	r2, #56	; 0x38
 8001552:	4013      	ands	r3, r2
 8001554:	2b18      	cmp	r3, #24
 8001556:	d103      	bne.n	8001560 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001558:	23fa      	movs	r3, #250	; 0xfa
 800155a:	01db      	lsls	r3, r3, #7
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	e001      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001564:	693b      	ldr	r3, [r7, #16]
}
 8001566:	0018      	movs	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	b006      	add	sp, #24
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	40021000 	.word	0x40021000
 8001574:	00f42400 	.word	0x00f42400
 8001578:	007a1200 	.word	0x007a1200

0800157c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e04a      	b.n	8001624 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	223d      	movs	r2, #61	; 0x3d
 8001592:	5c9b      	ldrb	r3, [r3, r2]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d107      	bne.n	80015aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	223c      	movs	r2, #60	; 0x3c
 800159e:	2100      	movs	r1, #0
 80015a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7fe ffab 	bl	8000500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	223d      	movs	r2, #61	; 0x3d
 80015ae:	2102      	movs	r1, #2
 80015b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3304      	adds	r3, #4
 80015ba:	0019      	movs	r1, r3
 80015bc:	0010      	movs	r0, r2
 80015be:	f000 fb41 	bl	8001c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2248      	movs	r2, #72	; 0x48
 80015c6:	2101      	movs	r1, #1
 80015c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	223e      	movs	r2, #62	; 0x3e
 80015ce:	2101      	movs	r1, #1
 80015d0:	5499      	strb	r1, [r3, r2]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	223f      	movs	r2, #63	; 0x3f
 80015d6:	2101      	movs	r1, #1
 80015d8:	5499      	strb	r1, [r3, r2]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2240      	movs	r2, #64	; 0x40
 80015de:	2101      	movs	r1, #1
 80015e0:	5499      	strb	r1, [r3, r2]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2241      	movs	r2, #65	; 0x41
 80015e6:	2101      	movs	r1, #1
 80015e8:	5499      	strb	r1, [r3, r2]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2242      	movs	r2, #66	; 0x42
 80015ee:	2101      	movs	r1, #1
 80015f0:	5499      	strb	r1, [r3, r2]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2243      	movs	r2, #67	; 0x43
 80015f6:	2101      	movs	r1, #1
 80015f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2244      	movs	r2, #68	; 0x44
 80015fe:	2101      	movs	r1, #1
 8001600:	5499      	strb	r1, [r3, r2]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2245      	movs	r2, #69	; 0x45
 8001606:	2101      	movs	r1, #1
 8001608:	5499      	strb	r1, [r3, r2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2246      	movs	r2, #70	; 0x46
 800160e:	2101      	movs	r1, #1
 8001610:	5499      	strb	r1, [r3, r2]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2247      	movs	r2, #71	; 0x47
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	223d      	movs	r2, #61	; 0x3d
 800161e:	2101      	movs	r1, #1
 8001620:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	223d      	movs	r2, #61	; 0x3d
 8001638:	5c9b      	ldrb	r3, [r3, r2]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d001      	beq.n	8001644 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e034      	b.n	80016ae <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	223d      	movs	r2, #61	; 0x3d
 8001648:	2102      	movs	r1, #2
 800164a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_TIM_Base_Start+0x8c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d009      	beq.n	800166a <HAL_TIM_Base_Start+0x3e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a18      	ldr	r2, [pc, #96]	; (80016bc <HAL_TIM_Base_Start+0x90>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d004      	beq.n	800166a <HAL_TIM_Base_Start+0x3e>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <HAL_TIM_Base_Start+0x94>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d116      	bne.n	8001698 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <HAL_TIM_Base_Start+0x98>)
 8001672:	4013      	ands	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b06      	cmp	r3, #6
 800167a:	d016      	beq.n	80016aa <HAL_TIM_Base_Start+0x7e>
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	025b      	lsls	r3, r3, #9
 8001682:	429a      	cmp	r2, r3
 8001684:	d011      	beq.n	80016aa <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001696:	e008      	b.n	80016aa <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2101      	movs	r1, #1
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e000      	b.n	80016ac <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016aa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b004      	add	sp, #16
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	40012c00 	.word	0x40012c00
 80016bc:	40000400 	.word	0x40000400
 80016c0:	40014000 	.word	0x40014000
 80016c4:	00010007 	.word	0x00010007

080016c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d108      	bne.n	80016ea <HAL_TIM_PWM_Start+0x22>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	223e      	movs	r2, #62	; 0x3e
 80016dc:	5c9b      	ldrb	r3, [r3, r2]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3b01      	subs	r3, #1
 80016e2:	1e5a      	subs	r2, r3, #1
 80016e4:	4193      	sbcs	r3, r2
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	e037      	b.n	800175a <HAL_TIM_PWM_Start+0x92>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d108      	bne.n	8001702 <HAL_TIM_PWM_Start+0x3a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	223f      	movs	r2, #63	; 0x3f
 80016f4:	5c9b      	ldrb	r3, [r3, r2]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	1e5a      	subs	r2, r3, #1
 80016fc:	4193      	sbcs	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	e02b      	b.n	800175a <HAL_TIM_PWM_Start+0x92>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d108      	bne.n	800171a <HAL_TIM_PWM_Start+0x52>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	5c9b      	ldrb	r3, [r3, r2]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3b01      	subs	r3, #1
 8001712:	1e5a      	subs	r2, r3, #1
 8001714:	4193      	sbcs	r3, r2
 8001716:	b2db      	uxtb	r3, r3
 8001718:	e01f      	b.n	800175a <HAL_TIM_PWM_Start+0x92>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2b0c      	cmp	r3, #12
 800171e:	d108      	bne.n	8001732 <HAL_TIM_PWM_Start+0x6a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2241      	movs	r2, #65	; 0x41
 8001724:	5c9b      	ldrb	r3, [r3, r2]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	3b01      	subs	r3, #1
 800172a:	1e5a      	subs	r2, r3, #1
 800172c:	4193      	sbcs	r3, r2
 800172e:	b2db      	uxtb	r3, r3
 8001730:	e013      	b.n	800175a <HAL_TIM_PWM_Start+0x92>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b10      	cmp	r3, #16
 8001736:	d108      	bne.n	800174a <HAL_TIM_PWM_Start+0x82>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2242      	movs	r2, #66	; 0x42
 800173c:	5c9b      	ldrb	r3, [r3, r2]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	3b01      	subs	r3, #1
 8001742:	1e5a      	subs	r2, r3, #1
 8001744:	4193      	sbcs	r3, r2
 8001746:	b2db      	uxtb	r3, r3
 8001748:	e007      	b.n	800175a <HAL_TIM_PWM_Start+0x92>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2243      	movs	r2, #67	; 0x43
 800174e:	5c9b      	ldrb	r3, [r3, r2]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3b01      	subs	r3, #1
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	4193      	sbcs	r3, r2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e085      	b.n	800186e <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d104      	bne.n	8001772 <HAL_TIM_PWM_Start+0xaa>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	223e      	movs	r2, #62	; 0x3e
 800176c:	2102      	movs	r1, #2
 800176e:	5499      	strb	r1, [r3, r2]
 8001770:	e023      	b.n	80017ba <HAL_TIM_PWM_Start+0xf2>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d104      	bne.n	8001782 <HAL_TIM_PWM_Start+0xba>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	223f      	movs	r2, #63	; 0x3f
 800177c:	2102      	movs	r1, #2
 800177e:	5499      	strb	r1, [r3, r2]
 8001780:	e01b      	b.n	80017ba <HAL_TIM_PWM_Start+0xf2>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b08      	cmp	r3, #8
 8001786:	d104      	bne.n	8001792 <HAL_TIM_PWM_Start+0xca>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	2102      	movs	r1, #2
 800178e:	5499      	strb	r1, [r3, r2]
 8001790:	e013      	b.n	80017ba <HAL_TIM_PWM_Start+0xf2>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d104      	bne.n	80017a2 <HAL_TIM_PWM_Start+0xda>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2241      	movs	r2, #65	; 0x41
 800179c:	2102      	movs	r1, #2
 800179e:	5499      	strb	r1, [r3, r2]
 80017a0:	e00b      	b.n	80017ba <HAL_TIM_PWM_Start+0xf2>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2b10      	cmp	r3, #16
 80017a6:	d104      	bne.n	80017b2 <HAL_TIM_PWM_Start+0xea>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2242      	movs	r2, #66	; 0x42
 80017ac:	2102      	movs	r1, #2
 80017ae:	5499      	strb	r1, [r3, r2]
 80017b0:	e003      	b.n	80017ba <HAL_TIM_PWM_Start+0xf2>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2243      	movs	r2, #67	; 0x43
 80017b6:	2102      	movs	r1, #2
 80017b8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	2201      	movs	r2, #1
 80017c2:	0018      	movs	r0, r3
 80017c4:	f000 fc70 	bl	80020a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2a      	ldr	r2, [pc, #168]	; (8001878 <HAL_TIM_PWM_Start+0x1b0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00e      	beq.n	80017f0 <HAL_TIM_PWM_Start+0x128>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a29      	ldr	r2, [pc, #164]	; (800187c <HAL_TIM_PWM_Start+0x1b4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d009      	beq.n	80017f0 <HAL_TIM_PWM_Start+0x128>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <HAL_TIM_PWM_Start+0x1b8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d004      	beq.n	80017f0 <HAL_TIM_PWM_Start+0x128>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a26      	ldr	r2, [pc, #152]	; (8001884 <HAL_TIM_PWM_Start+0x1bc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_TIM_PWM_Start+0x12c>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_TIM_PWM_Start+0x12e>
 80017f4:	2300      	movs	r3, #0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d008      	beq.n	800180c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	0209      	lsls	r1, r1, #8
 8001808:	430a      	orrs	r2, r1
 800180a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a19      	ldr	r2, [pc, #100]	; (8001878 <HAL_TIM_PWM_Start+0x1b0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d009      	beq.n	800182a <HAL_TIM_PWM_Start+0x162>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_TIM_PWM_Start+0x1c0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d004      	beq.n	800182a <HAL_TIM_PWM_Start+0x162>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a15      	ldr	r2, [pc, #84]	; (800187c <HAL_TIM_PWM_Start+0x1b4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d116      	bne.n	8001858 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <HAL_TIM_PWM_Start+0x1c4>)
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b06      	cmp	r3, #6
 800183a:	d016      	beq.n	800186a <HAL_TIM_PWM_Start+0x1a2>
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	025b      	lsls	r3, r3, #9
 8001842:	429a      	cmp	r2, r3
 8001844:	d011      	beq.n	800186a <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001856:	e008      	b.n	800186a <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2101      	movs	r1, #1
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e000      	b.n	800186c <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800186a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b004      	add	sp, #16
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	40012c00 	.word	0x40012c00
 800187c:	40014000 	.word	0x40014000
 8001880:	40014400 	.word	0x40014400
 8001884:	40014800 	.word	0x40014800
 8001888:	40000400 	.word	0x40000400
 800188c:	00010007 	.word	0x00010007

08001890 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e04a      	b.n	8001938 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	223d      	movs	r2, #61	; 0x3d
 80018a6:	5c9b      	ldrb	r3, [r3, r2]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d107      	bne.n	80018be <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	223c      	movs	r2, #60	; 0x3c
 80018b2:	2100      	movs	r1, #0
 80018b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 f841 	bl	8001940 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	223d      	movs	r2, #61	; 0x3d
 80018c2:	2102      	movs	r1, #2
 80018c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	0019      	movs	r1, r3
 80018d0:	0010      	movs	r0, r2
 80018d2:	f000 f9b7 	bl	8001c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2248      	movs	r2, #72	; 0x48
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	223e      	movs	r2, #62	; 0x3e
 80018e2:	2101      	movs	r1, #1
 80018e4:	5499      	strb	r1, [r3, r2]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	223f      	movs	r2, #63	; 0x3f
 80018ea:	2101      	movs	r1, #1
 80018ec:	5499      	strb	r1, [r3, r2]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2240      	movs	r2, #64	; 0x40
 80018f2:	2101      	movs	r1, #1
 80018f4:	5499      	strb	r1, [r3, r2]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2241      	movs	r2, #65	; 0x41
 80018fa:	2101      	movs	r1, #1
 80018fc:	5499      	strb	r1, [r3, r2]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2242      	movs	r2, #66	; 0x42
 8001902:	2101      	movs	r1, #1
 8001904:	5499      	strb	r1, [r3, r2]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2243      	movs	r2, #67	; 0x43
 800190a:	2101      	movs	r1, #1
 800190c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2244      	movs	r2, #68	; 0x44
 8001912:	2101      	movs	r1, #1
 8001914:	5499      	strb	r1, [r3, r2]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2245      	movs	r2, #69	; 0x45
 800191a:	2101      	movs	r1, #1
 800191c:	5499      	strb	r1, [r3, r2]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2246      	movs	r2, #70	; 0x46
 8001922:	2101      	movs	r1, #1
 8001924:	5499      	strb	r1, [r3, r2]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2247      	movs	r2, #71	; 0x47
 800192a:	2101      	movs	r1, #1
 800192c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	223d      	movs	r2, #61	; 0x3d
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800195c:	2317      	movs	r3, #23
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	223c      	movs	r2, #60	; 0x3c
 8001968:	5c9b      	ldrb	r3, [r3, r2]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_TIM_IC_ConfigChannel+0x22>
 800196e:	2302      	movs	r3, #2
 8001970:	e08c      	b.n	8001a8c <HAL_TIM_IC_ConfigChannel+0x13c>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	223c      	movs	r2, #60	; 0x3c
 8001976:	2101      	movs	r1, #1
 8001978:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d11b      	bne.n	80019b8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f000 f9ce 	bl	8001d30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	210c      	movs	r1, #12
 80019a0:	438a      	bics	r2, r1
 80019a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6999      	ldr	r1, [r3, #24]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	619a      	str	r2, [r3, #24]
 80019b6:	e062      	b.n	8001a7e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d11c      	bne.n	80019f8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f000 fa35 	bl	8001e3c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699a      	ldr	r2, [r3, #24]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	492d      	ldr	r1, [pc, #180]	; (8001a94 <HAL_TIM_IC_ConfigChannel+0x144>)
 80019de:	400a      	ands	r2, r1
 80019e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6999      	ldr	r1, [r3, #24]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	021a      	lsls	r2, r3, #8
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	619a      	str	r2, [r3, #24]
 80019f6:	e042      	b.n	8001a7e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d11b      	bne.n	8001a36 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f000 fa89 	bl	8001f24 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	69da      	ldr	r2, [r3, #28]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	210c      	movs	r1, #12
 8001a1e:	438a      	bics	r2, r1
 8001a20:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69d9      	ldr	r1, [r3, #28]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	61da      	str	r2, [r3, #28]
 8001a34:	e023      	b.n	8001a7e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d11c      	bne.n	8001a76 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f000 faaa 	bl	8001fa4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	490e      	ldr	r1, [pc, #56]	; (8001a94 <HAL_TIM_IC_ConfigChannel+0x144>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	69d9      	ldr	r1, [r3, #28]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	021a      	lsls	r2, r3, #8
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	61da      	str	r2, [r3, #28]
 8001a74:	e003      	b.n	8001a7e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8001a76:	2317      	movs	r3, #23
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	223c      	movs	r2, #60	; 0x3c
 8001a82:	2100      	movs	r1, #0
 8001a84:	5499      	strb	r1, [r3, r2]

  return status;
 8001a86:	2317      	movs	r3, #23
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	781b      	ldrb	r3, [r3, #0]
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b006      	add	sp, #24
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	fffff3ff 	.word	0xfffff3ff

08001a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	223c      	movs	r2, #60	; 0x3c
 8001aae:	5c9b      	ldrb	r3, [r3, r2]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_TIM_ConfigClockSource+0x20>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e0bc      	b.n	8001c32 <HAL_TIM_ConfigClockSource+0x19a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	223c      	movs	r2, #60	; 0x3c
 8001abc:	2101      	movs	r1, #1
 8001abe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	223d      	movs	r2, #61	; 0x3d
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4a5a      	ldr	r2, [pc, #360]	; (8001c3c <HAL_TIM_ConfigClockSource+0x1a4>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4a59      	ldr	r2, [pc, #356]	; (8001c40 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	0192      	lsls	r2, r2, #6
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d040      	beq.n	8001b76 <HAL_TIM_ConfigClockSource+0xde>
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	0192      	lsls	r2, r2, #6
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d900      	bls.n	8001afe <HAL_TIM_ConfigClockSource+0x66>
 8001afc:	e088      	b.n	8001c10 <HAL_TIM_ConfigClockSource+0x178>
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	0152      	lsls	r2, r2, #5
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d100      	bne.n	8001b08 <HAL_TIM_ConfigClockSource+0x70>
 8001b06:	e088      	b.n	8001c1a <HAL_TIM_ConfigClockSource+0x182>
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	0152      	lsls	r2, r2, #5
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d900      	bls.n	8001b12 <HAL_TIM_ConfigClockSource+0x7a>
 8001b10:	e07e      	b.n	8001c10 <HAL_TIM_ConfigClockSource+0x178>
 8001b12:	2b70      	cmp	r3, #112	; 0x70
 8001b14:	d018      	beq.n	8001b48 <HAL_TIM_ConfigClockSource+0xb0>
 8001b16:	d900      	bls.n	8001b1a <HAL_TIM_ConfigClockSource+0x82>
 8001b18:	e07a      	b.n	8001c10 <HAL_TIM_ConfigClockSource+0x178>
 8001b1a:	2b60      	cmp	r3, #96	; 0x60
 8001b1c:	d04f      	beq.n	8001bbe <HAL_TIM_ConfigClockSource+0x126>
 8001b1e:	d900      	bls.n	8001b22 <HAL_TIM_ConfigClockSource+0x8a>
 8001b20:	e076      	b.n	8001c10 <HAL_TIM_ConfigClockSource+0x178>
 8001b22:	2b50      	cmp	r3, #80	; 0x50
 8001b24:	d03b      	beq.n	8001b9e <HAL_TIM_ConfigClockSource+0x106>
 8001b26:	d900      	bls.n	8001b2a <HAL_TIM_ConfigClockSource+0x92>
 8001b28:	e072      	b.n	8001c10 <HAL_TIM_ConfigClockSource+0x178>
 8001b2a:	2b40      	cmp	r3, #64	; 0x40
 8001b2c:	d057      	beq.n	8001bde <HAL_TIM_ConfigClockSource+0x146>
 8001b2e:	d900      	bls.n	8001b32 <HAL_TIM_ConfigClockSource+0x9a>
 8001b30:	e06e      	b.n	8001c10 <HAL_TIM_ConfigClockSource+0x178>
 8001b32:	2b30      	cmp	r3, #48	; 0x30
 8001b34:	d063      	beq.n	8001bfe <HAL_TIM_ConfigClockSource+0x166>
 8001b36:	d86b      	bhi.n	8001c10 <HAL_TIM_ConfigClockSource+0x178>
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d060      	beq.n	8001bfe <HAL_TIM_ConfigClockSource+0x166>
 8001b3c:	d868      	bhi.n	8001c10 <HAL_TIM_ConfigClockSource+0x178>
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d05d      	beq.n	8001bfe <HAL_TIM_ConfigClockSource+0x166>
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d05b      	beq.n	8001bfe <HAL_TIM_ConfigClockSource+0x166>
 8001b46:	e063      	b.n	8001c10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6899      	ldr	r1, [r3, #8]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f000 fa86 	bl	8002068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2277      	movs	r2, #119	; 0x77
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	609a      	str	r2, [r3, #8]
      break;
 8001b74:	e052      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6899      	ldr	r1, [r3, #8]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f000 fa6f 	bl	8002068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	01c9      	lsls	r1, r1, #7
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]
      break;
 8001b9c:	e03e      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	001a      	movs	r2, r3
 8001bac:	f000 f918 	bl	8001de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2150      	movs	r1, #80	; 0x50
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 fa3a 	bl	8002030 <TIM_ITRx_SetConfig>
      break;
 8001bbc:	e02e      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6859      	ldr	r1, [r3, #4]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	001a      	movs	r2, r3
 8001bcc:	f000 f978 	bl	8001ec0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2160      	movs	r1, #96	; 0x60
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 fa2a 	bl	8002030 <TIM_ITRx_SetConfig>
      break;
 8001bdc:	e01e      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6859      	ldr	r1, [r3, #4]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	001a      	movs	r2, r3
 8001bec:	f000 f8f8 	bl	8001de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 fa1a 	bl	8002030 <TIM_ITRx_SetConfig>
      break;
 8001bfc:	e00e      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0019      	movs	r1, r3
 8001c08:	0010      	movs	r0, r2
 8001c0a:	f000 fa11 	bl	8002030 <TIM_ITRx_SetConfig>
      break;
 8001c0e:	e005      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001c10:	230f      	movs	r3, #15
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
      break;
 8001c18:	e000      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001c1a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	223d      	movs	r2, #61	; 0x3d
 8001c20:	2101      	movs	r1, #1
 8001c22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	223c      	movs	r2, #60	; 0x3c
 8001c28:	2100      	movs	r1, #0
 8001c2a:	5499      	strb	r1, [r3, r2]

  return status;
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	781b      	ldrb	r3, [r3, #0]
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b004      	add	sp, #16
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	ffceff88 	.word	0xffceff88
 8001c40:	ffff00ff 	.word	0xffff00ff

08001c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a2f      	ldr	r2, [pc, #188]	; (8001d14 <TIM_Base_SetConfig+0xd0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d003      	beq.n	8001c64 <TIM_Base_SetConfig+0x20>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a2e      	ldr	r2, [pc, #184]	; (8001d18 <TIM_Base_SetConfig+0xd4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d108      	bne.n	8001c76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2270      	movs	r2, #112	; 0x70
 8001c68:	4393      	bics	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <TIM_Base_SetConfig+0xd0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <TIM_Base_SetConfig+0x62>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <TIM_Base_SetConfig+0xd4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00f      	beq.n	8001ca6 <TIM_Base_SetConfig+0x62>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <TIM_Base_SetConfig+0xd8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00b      	beq.n	8001ca6 <TIM_Base_SetConfig+0x62>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <TIM_Base_SetConfig+0xdc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <TIM_Base_SetConfig+0x62>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a22      	ldr	r2, [pc, #136]	; (8001d24 <TIM_Base_SetConfig+0xe0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d003      	beq.n	8001ca6 <TIM_Base_SetConfig+0x62>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <TIM_Base_SetConfig+0xe4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d108      	bne.n	8001cb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4a20      	ldr	r2, [pc, #128]	; (8001d2c <TIM_Base_SetConfig+0xe8>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	4393      	bics	r3, r2
 8001cbe:	001a      	movs	r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <TIM_Base_SetConfig+0xd0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00b      	beq.n	8001cfe <TIM_Base_SetConfig+0xba>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <TIM_Base_SetConfig+0xdc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <TIM_Base_SetConfig+0xba>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <TIM_Base_SetConfig+0xe0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d003      	beq.n	8001cfe <TIM_Base_SetConfig+0xba>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <TIM_Base_SetConfig+0xe4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d103      	bne.n	8001d06 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	615a      	str	r2, [r3, #20]
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b004      	add	sp, #16
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40012c00 	.word	0x40012c00
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	40002000 	.word	0x40002000
 8001d20:	40014000 	.word	0x40014000
 8001d24:	40014400 	.word	0x40014400
 8001d28:	40014800 	.word	0x40014800
 8001d2c:	fffffcff 	.word	0xfffffcff

08001d30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	2201      	movs	r2, #1
 8001d44:	4393      	bics	r3, r2
 8001d46:	001a      	movs	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <TIM_TI1_SetConfig+0xa4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <TIM_TI1_SetConfig+0x40>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <TIM_TI1_SetConfig+0xa8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <TIM_TI1_SetConfig+0x40>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <TIM_TI1_SetConfig+0xac>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <TIM_TI1_SetConfig+0x44>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <TIM_TI1_SetConfig+0x46>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d008      	beq.n	8001d8c <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	4393      	bics	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e003      	b.n	8001d94 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	22f0      	movs	r2, #240	; 0xf0
 8001d98:	4393      	bics	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	22ff      	movs	r2, #255	; 0xff
 8001da2:	4013      	ands	r3, r2
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	220a      	movs	r2, #10
 8001dae:	4393      	bics	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	220a      	movs	r2, #10
 8001db6:	4013      	ands	r3, r2
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	621a      	str	r2, [r3, #32]
}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b006      	add	sp, #24
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40014000 	.word	0x40014000

08001de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4393      	bics	r3, r2
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	22f0      	movs	r2, #240	; 0xf0
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	220a      	movs	r2, #10
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	621a      	str	r2, [r3, #32]
}
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b006      	add	sp, #24
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	2210      	movs	r2, #16
 8001e50:	4393      	bics	r3, r2
 8001e52:	001a      	movs	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <TIM_TI2_SetConfig+0x7c>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <TIM_TI2_SetConfig+0x80>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	031b      	lsls	r3, r3, #12
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	22a0      	movs	r2, #160	; 0xa0
 8001e90:	4393      	bics	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	22a0      	movs	r2, #160	; 0xa0
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	621a      	str	r2, [r3, #32]
}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b006      	add	sp, #24
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	fffffcff 	.word	0xfffffcff
 8001ebc:	ffff0fff 	.word	0xffff0fff

08001ec0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <TIM_TI2_ConfigInputStage+0x60>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	031b      	lsls	r3, r3, #12
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	22a0      	movs	r2, #160	; 0xa0
 8001efc:	4393      	bics	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	621a      	str	r2, [r3, #32]
}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b006      	add	sp, #24
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	ffff0fff 	.word	0xffff0fff

08001f24 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <TIM_TI3_SetConfig+0x78>)
 8001f38:	401a      	ands	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	4393      	bics	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	22f0      	movs	r2, #240	; 0xf0
 8001f5e:	4393      	bics	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	4013      	ands	r3, r2
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <TIM_TI3_SetConfig+0x7c>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	021a      	lsls	r2, r3, #8
 8001f7c:	23a0      	movs	r3, #160	; 0xa0
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4013      	ands	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	621a      	str	r2, [r3, #32]
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b006      	add	sp, #24
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	fffffeff 	.word	0xfffffeff
 8001fa0:	fffff5ff 	.word	0xfffff5ff

08001fa4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <TIM_TI4_SetConfig+0x7c>)
 8001fb8:	401a      	ands	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <TIM_TI4_SetConfig+0x80>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <TIM_TI4_SetConfig+0x84>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	031b      	lsls	r3, r3, #12
 8001fe8:	041b      	lsls	r3, r3, #16
 8001fea:	0c1b      	lsrs	r3, r3, #16
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <TIM_TI4_SetConfig+0x88>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	031a      	lsls	r2, r3, #12
 8001ffe:	23a0      	movs	r3, #160	; 0xa0
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	4013      	ands	r3, r2
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	621a      	str	r2, [r3, #32]
}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b006      	add	sp, #24
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	ffffefff 	.word	0xffffefff
 8002024:	fffffcff 	.word	0xfffffcff
 8002028:	ffff0fff 	.word	0xffff0fff
 800202c:	ffff5fff 	.word	0xffff5fff

08002030 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a08      	ldr	r2, [pc, #32]	; (8002064 <TIM_ITRx_SetConfig+0x34>)
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	2207      	movs	r2, #7
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	609a      	str	r2, [r3, #8]
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	ffcfff8f 	.word	0xffcfff8f

08002068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <TIM_ETR_SetConfig+0x3c>)
 8002080:	4013      	ands	r3, r2
 8002082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	021a      	lsls	r2, r3, #8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	431a      	orrs	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	609a      	str	r2, [r3, #8]
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b006      	add	sp, #24
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	ffff00ff 	.word	0xffff00ff

080020a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	221f      	movs	r2, #31
 80020b8:	4013      	ands	r3, r2
 80020ba:	2201      	movs	r2, #1
 80020bc:	409a      	lsls	r2, r3
 80020be:	0013      	movs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	43d2      	mvns	r2, r2
 80020ca:	401a      	ands	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	211f      	movs	r1, #31
 80020d8:	400b      	ands	r3, r1
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4099      	lsls	r1, r3
 80020de:	000b      	movs	r3, r1
 80020e0:	431a      	orrs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	621a      	str	r2, [r3, #32]
}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b006      	add	sp, #24
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	223c      	movs	r2, #60	; 0x3c
 80020fe:	5c9b      	ldrb	r3, [r3, r2]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002104:	2302      	movs	r3, #2
 8002106:	e04f      	b.n	80021a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	223c      	movs	r2, #60	; 0x3c
 800210c:	2101      	movs	r1, #1
 800210e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	223d      	movs	r2, #61	; 0x3d
 8002114:	2102      	movs	r1, #2
 8002116:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d108      	bne.n	8002144 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002136:	4013      	ands	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2270      	movs	r2, #112	; 0x70
 8002148:	4393      	bics	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d009      	beq.n	800217c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d10c      	bne.n	8002196 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	4393      	bics	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	4313      	orrs	r3, r2
 800218c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	223d      	movs	r2, #61	; 0x3d
 800219a:	2101      	movs	r1, #1
 800219c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	223c      	movs	r2, #60	; 0x3c
 80021a2:	2100      	movs	r1, #0
 80021a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b004      	add	sp, #16
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40012c00 	.word	0x40012c00
 80021b4:	ff0fffff 	.word	0xff0fffff
 80021b8:	40000400 	.word	0x40000400
 80021bc:	40014000 	.word	0x40014000

080021c0 <__libc_init_array>:
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	2600      	movs	r6, #0
 80021c4:	4d0c      	ldr	r5, [pc, #48]	; (80021f8 <__libc_init_array+0x38>)
 80021c6:	4c0d      	ldr	r4, [pc, #52]	; (80021fc <__libc_init_array+0x3c>)
 80021c8:	1b64      	subs	r4, r4, r5
 80021ca:	10a4      	asrs	r4, r4, #2
 80021cc:	42a6      	cmp	r6, r4
 80021ce:	d109      	bne.n	80021e4 <__libc_init_array+0x24>
 80021d0:	2600      	movs	r6, #0
 80021d2:	f000 f821 	bl	8002218 <_init>
 80021d6:	4d0a      	ldr	r5, [pc, #40]	; (8002200 <__libc_init_array+0x40>)
 80021d8:	4c0a      	ldr	r4, [pc, #40]	; (8002204 <__libc_init_array+0x44>)
 80021da:	1b64      	subs	r4, r4, r5
 80021dc:	10a4      	asrs	r4, r4, #2
 80021de:	42a6      	cmp	r6, r4
 80021e0:	d105      	bne.n	80021ee <__libc_init_array+0x2e>
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
 80021e4:	00b3      	lsls	r3, r6, #2
 80021e6:	58eb      	ldr	r3, [r5, r3]
 80021e8:	4798      	blx	r3
 80021ea:	3601      	adds	r6, #1
 80021ec:	e7ee      	b.n	80021cc <__libc_init_array+0xc>
 80021ee:	00b3      	lsls	r3, r6, #2
 80021f0:	58eb      	ldr	r3, [r5, r3]
 80021f2:	4798      	blx	r3
 80021f4:	3601      	adds	r6, #1
 80021f6:	e7f2      	b.n	80021de <__libc_init_array+0x1e>
 80021f8:	08002270 	.word	0x08002270
 80021fc:	08002270 	.word	0x08002270
 8002200:	08002270 	.word	0x08002270
 8002204:	08002274 	.word	0x08002274

08002208 <memset>:
 8002208:	0003      	movs	r3, r0
 800220a:	1882      	adds	r2, r0, r2
 800220c:	4293      	cmp	r3, r2
 800220e:	d100      	bne.n	8002212 <memset+0xa>
 8002210:	4770      	bx	lr
 8002212:	7019      	strb	r1, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	e7f9      	b.n	800220c <memset+0x4>

08002218 <_init>:
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221e:	bc08      	pop	{r3}
 8002220:	469e      	mov	lr, r3
 8002222:	4770      	bx	lr

08002224 <_fini>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr

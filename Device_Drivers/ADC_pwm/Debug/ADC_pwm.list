
ADC_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003370  08003370  00013370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003404  08003404  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003404  08003404  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003404  08003404  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800340c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003418  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003418  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000add4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190e  00000000  00000000  0002ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  0002d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015811  00000000  00000000  0002de30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb38  00000000  00000000  00043641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e138  00000000  00000000  00050179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de2b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b4c  00000000  00000000  000de304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003358 	.word	0x08003358

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003358 	.word	0x08003358

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fab8 	bl	8000790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f830 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f960 	bl	80004e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000228:	f000 f874 	bl	8000314 <MX_ADC1_Init>
  MX_TIM3_Init();
 800022c:	f000 f8dc 	bl	80003e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Start(&hadc1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000230:	4b10      	ldr	r3, [pc, #64]	; (8000274 <main+0x5c>)
 8000232:	2100      	movs	r1, #0
 8000234:	0018      	movs	r0, r3
 8000236:	f002 f947 	bl	80024c8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <main+0x60>)
 800023c:	0018      	movs	r0, r3
 800023e:	f000 fe2f 	bl	8000ea0 <HAL_ADC_Start>

	  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000242:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <main+0x60>)
 8000244:	2164      	movs	r1, #100	; 0x64
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fe78 	bl	8000f3c <HAL_ADC_PollForConversion>
 800024c:	1e03      	subs	r3, r0, #0
 800024e:	d106      	bne.n	800025e <main+0x46>
	  	  {
	  		  adc_pwm = HAL_ADC_GetValue(&hadc1);
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <main+0x60>)
 8000252:	0018      	movs	r0, r3
 8000254:	f000 ff06 	bl	8001064 <HAL_ADC_GetValue>
 8000258:	0002      	movs	r2, r0
 800025a:	4b08      	ldr	r3, [pc, #32]	; (800027c <main+0x64>)
 800025c:	601a      	str	r2, [r3, #0]
	  	  }

	  TIM3->CCR1 = adc_pwm;
 800025e:	4a08      	ldr	r2, [pc, #32]	; (8000280 <main+0x68>)
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <main+0x64>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_Delay(500);
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fb16 	bl	800089c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000270:	e7e3      	b.n	800023a <main+0x22>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	2000008c 	.word	0x2000008c
 8000278:	20000028 	.word	0x20000028
 800027c:	200000d8 	.word	0x200000d8
 8000280:	40000400 	.word	0x40000400

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b093      	sub	sp, #76	; 0x4c
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	2414      	movs	r4, #20
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	2334      	movs	r3, #52	; 0x34
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f003 f857 	bl	8003348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	0018      	movs	r0, r3
 800029e:	2310      	movs	r3, #16
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f003 f850 	bl	8003348 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f001 fb79 	bl	80019a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	2202      	movs	r2, #2
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	0052      	lsls	r2, r2, #1
 80002be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2240      	movs	r2, #64	; 0x40
 80002ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2200      	movs	r2, #0
 80002d0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 fba5 	bl	8001a24 <HAL_RCC_OscConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002de:	f000 f949 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2100      	movs	r1, #0
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 fea0 	bl	8002044 <HAL_RCC_ClockConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000308:	f000 f934 	bl	8000574 <Error_Handler>
  }
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b013      	add	sp, #76	; 0x4c
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	0018      	movs	r0, r3
 800031e:	230c      	movs	r3, #12
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f003 f810 	bl	8003348 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000328:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <MX_ADC1_Init+0xcc>)
 800032a:	4a2e      	ldr	r2, [pc, #184]	; (80003e4 <MX_ADC1_Init+0xd0>)
 800032c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800032e:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000330:	2280      	movs	r2, #128	; 0x80
 8000332:	05d2      	lsls	r2, r2, #23
 8000334:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000336:	4b2a      	ldr	r3, [pc, #168]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <MX_ADC1_Init+0xcc>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000342:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000348:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <MX_ADC1_Init+0xcc>)
 800034a:	2204      	movs	r2, #4
 800034c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800034e:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000350:	2200      	movs	r2, #0
 8000352:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000356:	2200      	movs	r2, #0
 8000358:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800035a:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <MX_ADC1_Init+0xcc>)
 800035c:	2200      	movs	r2, #0
 800035e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000360:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000362:	2201      	movs	r2, #1
 8000364:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000366:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000368:	2220      	movs	r2, #32
 800036a:	2100      	movs	r1, #0
 800036c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800036e:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000370:	2200      	movs	r2, #0
 8000372:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000374:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000376:	2200      	movs	r2, #0
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <MX_ADC1_Init+0xcc>)
 800037c:	222c      	movs	r2, #44	; 0x2c
 800037e:	2100      	movs	r1, #0
 8000380:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000384:	2200      	movs	r2, #0
 8000386:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_ADC1_Init+0xcc>)
 800038a:	2200      	movs	r2, #0
 800038c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800038e:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000390:	2200      	movs	r2, #0
 8000392:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_ADC1_Init+0xcc>)
 8000396:	223c      	movs	r2, #60	; 0x3c
 8000398:	2100      	movs	r1, #0
 800039a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <MX_ADC1_Init+0xcc>)
 800039e:	2200      	movs	r2, #0
 80003a0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_ADC1_Init+0xcc>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f000 fbd3 	bl	8000b50 <HAL_ADC_Init>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80003ae:	f000 f8e1 	bl	8000574 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c4:	1d3a      	adds	r2, r7, #4
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_ADC1_Init+0xcc>)
 80003c8:	0011      	movs	r1, r2
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 fe56 	bl	800107c <HAL_ADC_ConfigChannel>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80003d4:	f000 f8ce 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b004      	add	sp, #16
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000028 	.word	0x20000028
 80003e4:	40012400 	.word	0x40012400

080003e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08e      	sub	sp, #56	; 0x38
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	2328      	movs	r3, #40	; 0x28
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	0018      	movs	r0, r3
 80003f4:	2310      	movs	r3, #16
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f002 ffa5 	bl	8003348 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fe:	231c      	movs	r3, #28
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	0018      	movs	r0, r3
 8000404:	230c      	movs	r3, #12
 8000406:	001a      	movs	r2, r3
 8000408:	2100      	movs	r1, #0
 800040a:	f002 ff9d 	bl	8003348 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800040e:	003b      	movs	r3, r7
 8000410:	0018      	movs	r0, r3
 8000412:	231c      	movs	r3, #28
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f002 ff96 	bl	8003348 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800041c:	4b2f      	ldr	r3, [pc, #188]	; (80004dc <MX_TIM3_Init+0xf4>)
 800041e:	4a30      	ldr	r2, [pc, #192]	; (80004e0 <MX_TIM3_Init+0xf8>)
 8000420:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8000422:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <MX_TIM3_Init+0xf4>)
 8000424:	2214      	movs	r2, #20
 8000426:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000428:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <MX_TIM3_Init+0xf4>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 800042e:	4b2b      	ldr	r3, [pc, #172]	; (80004dc <MX_TIM3_Init+0xf4>)
 8000430:	4a2c      	ldr	r2, [pc, #176]	; (80004e4 <MX_TIM3_Init+0xfc>)
 8000432:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <MX_TIM3_Init+0xf4>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800043a:	4b28      	ldr	r3, [pc, #160]	; (80004dc <MX_TIM3_Init+0xf4>)
 800043c:	2280      	movs	r2, #128	; 0x80
 800043e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000440:	4b26      	ldr	r3, [pc, #152]	; (80004dc <MX_TIM3_Init+0xf4>)
 8000442:	0018      	movs	r0, r3
 8000444:	f001 ff88 	bl	8002358 <HAL_TIM_Base_Init>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800044c:	f000 f892 	bl	8000574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000450:	2128      	movs	r1, #40	; 0x28
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2280      	movs	r2, #128	; 0x80
 8000456:	0152      	lsls	r2, r2, #5
 8000458:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800045a:	187a      	adds	r2, r7, r1
 800045c:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <MX_TIM3_Init+0xf4>)
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f002 fa15 	bl	8002890 <HAL_TIM_ConfigClockSource>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800046a:	f000 f883 	bl	8000574 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800046e:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <MX_TIM3_Init+0xf4>)
 8000470:	0018      	movs	r0, r3
 8000472:	f001 ffc9 	bl	8002408 <HAL_TIM_PWM_Init>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800047a:	f000 f87b 	bl	8000574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047e:	211c      	movs	r1, #28
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800048c:	187a      	adds	r2, r7, r1
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <MX_TIM3_Init+0xf4>)
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f002 fecc 	bl	8003230 <HAL_TIMEx_MasterConfigSynchronization>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800049c:	f000 f86a 	bl	8000574 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004a0:	003b      	movs	r3, r7
 80004a2:	2260      	movs	r2, #96	; 0x60
 80004a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ac:	003b      	movs	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b2:	003b      	movs	r3, r7
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004b8:	0039      	movs	r1, r7
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_TIM3_Init+0xf4>)
 80004bc:	2200      	movs	r2, #0
 80004be:	0018      	movs	r0, r3
 80004c0:	f002 f8e6 	bl	8002690 <HAL_TIM_PWM_ConfigChannel>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80004c8:	f000 f854 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <MX_TIM3_Init+0xf4>)
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 f8dc 	bl	800068c <HAL_TIM_MspPostInit>

}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b00e      	add	sp, #56	; 0x38
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	2000008c 	.word	0x2000008c
 80004e0:	40000400 	.word	0x40000400
 80004e4:	00001388 	.word	0x00001388

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b089      	sub	sp, #36	; 0x24
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	240c      	movs	r4, #12
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	2314      	movs	r3, #20
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f002 ff25 	bl	8003348 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_GPIO_Init+0x84>)
 8000500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_GPIO_Init+0x84>)
 8000504:	2101      	movs	r1, #1
 8000506:	430a      	orrs	r2, r1
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_GPIO_Init+0x84>)
 800050c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050e:	2201      	movs	r2, #1
 8000510:	4013      	ands	r3, r2
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_GPIO_Init+0x84>)
 8000518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_GPIO_Init+0x84>)
 800051c:	2102      	movs	r1, #2
 800051e:	430a      	orrs	r2, r1
 8000520:	635a      	str	r2, [r3, #52]	; 0x34
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_GPIO_Init+0x84>)
 8000524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000526:	2202      	movs	r2, #2
 8000528:	4013      	ands	r3, r2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	01db      	lsls	r3, r3, #7
 8000532:	480f      	ldr	r0, [pc, #60]	; (8000570 <MX_GPIO_Init+0x88>)
 8000534:	2200      	movs	r2, #0
 8000536:	0019      	movs	r1, r3
 8000538:	f001 fa16 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800053c:	193b      	adds	r3, r7, r4
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	01d2      	lsls	r2, r2, #7
 8000542:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2201      	movs	r2, #1
 8000548:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	193b      	adds	r3, r7, r4
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <MX_GPIO_Init+0x88>)
 800055a:	0019      	movs	r1, r3
 800055c:	0010      	movs	r0, r2
 800055e:	f001 f89f 	bl	80016a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b009      	add	sp, #36	; 0x24
 8000568:	bd90      	pop	{r4, r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40021000 	.word	0x40021000
 8000570:	50000400 	.word	0x50000400

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x8>
	...

08000580 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x44>)
 8000588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_MspInit+0x44>)
 800058c:	2101      	movs	r1, #1
 800058e:	430a      	orrs	r2, r1
 8000590:	641a      	str	r2, [r3, #64]	; 0x40
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_MspInit+0x44>)
 8000594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000596:	2201      	movs	r2, #1
 8000598:	4013      	ands	r3, r2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_MspInit+0x44>)
 80005a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_MspInit+0x44>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	0549      	lsls	r1, r1, #21
 80005a8:	430a      	orrs	r2, r1
 80005aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_MspInit+0x44>)
 80005ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	055b      	lsls	r3, r3, #21
 80005b4:	4013      	ands	r3, r2
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b08b      	sub	sp, #44	; 0x2c
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	2414      	movs	r4, #20
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	0018      	movs	r0, r3
 80005d6:	2314      	movs	r3, #20
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f002 feb4 	bl	8003348 <memset>
  if(hadc->Instance==ADC1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a18      	ldr	r2, [pc, #96]	; (8000648 <HAL_ADC_MspInit+0x80>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d129      	bne.n	800063e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <HAL_ADC_MspInit+0x84>)
 80005ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_ADC_MspInit+0x84>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0349      	lsls	r1, r1, #13
 80005f4:	430a      	orrs	r2, r1
 80005f6:	641a      	str	r2, [r3, #64]	; 0x40
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_ADC_MspInit+0x84>)
 80005fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	035b      	lsls	r3, r3, #13
 8000600:	4013      	ands	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_ADC_MspInit+0x84>)
 8000608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <HAL_ADC_MspInit+0x84>)
 800060c:	2101      	movs	r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_ADC_MspInit+0x84>)
 8000614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000616:	2201      	movs	r2, #1
 8000618:	4013      	ands	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2201      	movs	r2, #1
 8000622:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2203      	movs	r2, #3
 8000628:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	193a      	adds	r2, r7, r4
 8000632:	23a0      	movs	r3, #160	; 0xa0
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	0011      	movs	r1, r2
 8000638:	0018      	movs	r0, r3
 800063a:	f001 f831 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b00b      	add	sp, #44	; 0x2c
 8000644:	bd90      	pop	{r4, r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	40012400 	.word	0x40012400
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a09      	ldr	r2, [pc, #36]	; (8000684 <HAL_TIM_Base_MspInit+0x34>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d10b      	bne.n	800067a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_TIM_Base_MspInit+0x38>)
 8000664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <HAL_TIM_Base_MspInit+0x38>)
 8000668:	2102      	movs	r1, #2
 800066a:	430a      	orrs	r2, r1
 800066c:	63da      	str	r2, [r3, #60]	; 0x3c
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_TIM_Base_MspInit+0x38>)
 8000670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000672:	2202      	movs	r2, #2
 8000674:	4013      	ands	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40000400 	.word	0x40000400
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	240c      	movs	r4, #12
 8000696:	193b      	adds	r3, r7, r4
 8000698:	0018      	movs	r0, r3
 800069a:	2314      	movs	r3, #20
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f002 fe52 	bl	8003348 <memset>
  if(htim->Instance==TIM3)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <HAL_TIM_MspPostInit+0x70>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d122      	bne.n	80006f4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_TIM_MspPostInit+0x74>)
 80006b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <HAL_TIM_MspPostInit+0x74>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_TIM_MspPostInit+0x74>)
 80006bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006be:	2201      	movs	r2, #1
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006c6:	0021      	movs	r1, r4
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2240      	movs	r2, #64	; 0x40
 80006cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2202      	movs	r2, #2
 80006d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2201      	movs	r2, #1
 80006e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	187a      	adds	r2, r7, r1
 80006e8:	23a0      	movs	r3, #160	; 0xa0
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	0011      	movs	r1, r2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 ffd6 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	; 0x24
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	40000400 	.word	0x40000400
 8000700:	40021000 	.word	0x40021000

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000728:	f000 f89c 	bl	8000864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000740:	f7ff fff7 	bl	8000732 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <LoopForever+0x6>)
  ldr r1, =_edata
 8000746:	490d      	ldr	r1, [pc, #52]	; (800077c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <LoopForever+0xe>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800075c:	4c0a      	ldr	r4, [pc, #40]	; (8000788 <LoopForever+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800076a:	f002 fdc9 	bl	8003300 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800076e:	f7ff fd53 	bl	8000218 <main>

08000772 <LoopForever>:

LoopForever:
  b LoopForever
 8000772:	e7fe      	b.n	8000772 <LoopForever>
  ldr   r0, =_estack
 8000774:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000780:	0800340c 	.word	0x0800340c
  ldr r2, =_sbss
 8000784:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000788:	200000e0 	.word	0x200000e0

0800078c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC1_IRQHandler>
	...

08000790 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <HAL_Init+0x3c>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_Init+0x3c>)
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	0049      	lsls	r1, r1, #1
 80007a6:	430a      	orrs	r2, r1
 80007a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007aa:	2000      	movs	r0, #0
 80007ac:	f000 f810 	bl	80007d0 <HAL_InitTick>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d003      	beq.n	80007bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	e001      	b.n	80007c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007bc:	f7ff fee0 	bl	8000580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781b      	ldrb	r3, [r3, #0]
}
 80007c4:	0018      	movs	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40022000 	.word	0x40022000

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007d8:	230f      	movs	r3, #15
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <HAL_InitTick+0x88>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d02b      	beq.n	8000840 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <HAL_InitTick+0x8c>)
 80007ea:	681c      	ldr	r4, [r3, #0]
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <HAL_InitTick+0x88>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	0019      	movs	r1, r3
 80007f2:	23fa      	movs	r3, #250	; 0xfa
 80007f4:	0098      	lsls	r0, r3, #2
 80007f6:	f7ff fc83 	bl	8000100 <__udivsi3>
 80007fa:	0003      	movs	r3, r0
 80007fc:	0019      	movs	r1, r3
 80007fe:	0020      	movs	r0, r4
 8000800:	f7ff fc7e 	bl	8000100 <__udivsi3>
 8000804:	0003      	movs	r3, r0
 8000806:	0018      	movs	r0, r3
 8000808:	f000 ff3d 	bl	8001686 <HAL_SYSTICK_Config>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d112      	bne.n	8000836 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b03      	cmp	r3, #3
 8000814:	d80a      	bhi.n	800082c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	2301      	movs	r3, #1
 800081a:	425b      	negs	r3, r3
 800081c:	2200      	movs	r2, #0
 800081e:	0018      	movs	r0, r3
 8000820:	f000 ff1c 	bl	800165c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_InitTick+0x90>)
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	e00d      	b.n	8000848 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800082c:	230f      	movs	r3, #15
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	e008      	b.n	8000848 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000836:	230f      	movs	r3, #15
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e003      	b.n	8000848 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000840:	230f      	movs	r3, #15
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000848:	230f      	movs	r3, #15
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	781b      	ldrb	r3, [r3, #0]
}
 800084e:	0018      	movs	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	b005      	add	sp, #20
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	20000008 	.word	0x20000008
 800085c:	20000000 	.word	0x20000000
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_IncTick+0x1c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	001a      	movs	r2, r3
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_IncTick+0x20>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	18d2      	adds	r2, r2, r3
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <HAL_IncTick+0x20>)
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	20000008 	.word	0x20000008
 8000884:	200000dc 	.word	0x200000dc

08000888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;
 800088c:	4b02      	ldr	r3, [pc, #8]	; (8000898 <HAL_GetTick+0x10>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	0018      	movs	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	200000dc 	.word	0x200000dc

0800089c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a4:	f7ff fff0 	bl	8000888 <HAL_GetTick>
 80008a8:	0003      	movs	r3, r0
 80008aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	3301      	adds	r3, #1
 80008b4:	d005      	beq.n	80008c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <HAL_Delay+0x44>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	001a      	movs	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	189b      	adds	r3, r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	f7ff ffe0 	bl	8000888 <HAL_GetTick>
 80008c8:	0002      	movs	r2, r0
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d8f7      	bhi.n	80008c4 <HAL_Delay+0x28>
  {
  }
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b004      	add	sp, #16
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000008 	.word	0x20000008

080008e4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80008f4:	401a      	ands	r2, r3
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	431a      	orrs	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	fe3fffff 	.word	0xfe3fffff

0800090c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	23e0      	movs	r3, #224	; 0xe0
 800091a:	045b      	lsls	r3, r3, #17
 800091c:	4013      	ands	r3, r2
}
 800091e:	0018      	movs	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}

08000926 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b084      	sub	sp, #16
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	2104      	movs	r1, #4
 800093a:	400a      	ands	r2, r1
 800093c:	2107      	movs	r1, #7
 800093e:	4091      	lsls	r1, r2
 8000940:	000a      	movs	r2, r1
 8000942:	43d2      	mvns	r2, r2
 8000944:	401a      	ands	r2, r3
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2104      	movs	r1, #4
 800094a:	400b      	ands	r3, r1
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	4099      	lsls	r1, r3
 8000950:	000b      	movs	r3, r1
 8000952:	431a      	orrs	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b004      	add	sp, #16
 800095e:	bd80      	pop	{r7, pc}

08000960 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	2104      	movs	r1, #4
 8000972:	400a      	ands	r2, r1
 8000974:	2107      	movs	r1, #7
 8000976:	4091      	lsls	r1, r2
 8000978:	000a      	movs	r2, r1
 800097a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2104      	movs	r1, #4
 8000980:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000982:	40da      	lsrs	r2, r3
 8000984:	0013      	movs	r3, r2
}
 8000986:	0018      	movs	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}

0800098e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	23c0      	movs	r3, #192	; 0xc0
 800099c:	011b      	lsls	r3, r3, #4
 800099e:	4013      	ands	r3, r2
 80009a0:	d101      	bne.n	80009a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	211f      	movs	r1, #31
 80009c4:	400a      	ands	r2, r1
 80009c6:	210f      	movs	r1, #15
 80009c8:	4091      	lsls	r1, r2
 80009ca:	000a      	movs	r2, r1
 80009cc:	43d2      	mvns	r2, r2
 80009ce:	401a      	ands	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	0e9b      	lsrs	r3, r3, #26
 80009d4:	210f      	movs	r1, #15
 80009d6:	4019      	ands	r1, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	201f      	movs	r0, #31
 80009dc:	4003      	ands	r3, r0
 80009de:	4099      	lsls	r1, r3
 80009e0:	000b      	movs	r3, r1
 80009e2:	431a      	orrs	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b004      	add	sp, #16
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	035b      	lsls	r3, r3, #13
 8000a02:	0b5b      	lsrs	r3, r3, #13
 8000a04:	431a      	orrs	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	0352      	lsls	r2, r2, #13
 8000a24:	0b52      	lsrs	r2, r2, #13
 8000a26:	43d2      	mvns	r2, r2
 8000a28:	401a      	ands	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	0212      	lsls	r2, r2, #8
 8000a4c:	43d2      	mvns	r2, r2
 8000a4e:	401a      	ands	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	400b      	ands	r3, r1
 8000a58:	4904      	ldr	r1, [pc, #16]	; (8000a6c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a5a:	400b      	ands	r3, r1
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b004      	add	sp, #16
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	07ffff00 	.word	0x07ffff00

08000a70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <LL_ADC_EnableInternalRegulator+0x24>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	0552      	lsls	r2, r2, #21
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	6fffffe8 	.word	0x6fffffe8

08000a98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	055b      	lsls	r3, r3, #21
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	055b      	lsls	r3, r3, #21
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d101      	bne.n	8000ab6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e000      	b.n	8000ab8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b002      	add	sp, #8
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <LL_ADC_Enable+0x20>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	7fffffe8 	.word	0x7fffffe8

08000ae4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	2201      	movs	r2, #1
 8000af2:	4013      	ands	r3, r2
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d101      	bne.n	8000afc <LL_ADC_IsEnabled+0x18>
 8000af8:	2301      	movs	r3, #1
 8000afa:	e000      	b.n	8000afe <LL_ADC_IsEnabled+0x1a>
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	0018      	movs	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <LL_ADC_REG_StartConversion+0x20>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	2204      	movs	r2, #4
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	7fffffe8 	.word	0x7fffffe8

08000b2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	d101      	bne.n	8000b44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b58:	231f      	movs	r3, #31
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e17f      	b.n	8000e76 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10a      	bne.n	8000b94 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff fd21 	bl	80005c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2254      	movs	r2, #84	; 0x54
 8000b90:	2100      	movs	r1, #0
 8000b92:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ff7d 	bl	8000a98 <LL_ADC_IsInternalRegulatorEnabled>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d115      	bne.n	8000bce <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff ff62 	bl	8000a70 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000bac:	4bb4      	ldr	r3, [pc, #720]	; (8000e80 <HAL_ADC_Init+0x330>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	49b4      	ldr	r1, [pc, #720]	; (8000e84 <HAL_ADC_Init+0x334>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff faa4 	bl	8000100 <__udivsi3>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	3301      	adds	r3, #1
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000bc0:	e002      	b.n	8000bc8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f9      	bne.n	8000bc2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff ff60 	bl	8000a98 <LL_ADC_IsInternalRegulatorEnabled>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d10f      	bne.n	8000bfc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be0:	2210      	movs	r2, #16
 8000be2:	431a      	orrs	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bec:	2201      	movs	r2, #1
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000bf4:	231f      	movs	r3, #31
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff ff93 	bl	8000b2c <LL_ADC_REG_IsConversionOngoing>
 8000c06:	0003      	movs	r3, r0
 8000c08:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	2210      	movs	r2, #16
 8000c10:	4013      	ands	r3, r2
 8000c12:	d000      	beq.n	8000c16 <HAL_ADC_Init+0xc6>
 8000c14:	e122      	b.n	8000e5c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d000      	beq.n	8000c1e <HAL_ADC_Init+0xce>
 8000c1c:	e11e      	b.n	8000e5c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	4a99      	ldr	r2, [pc, #612]	; (8000e88 <HAL_ADC_Init+0x338>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	2202      	movs	r2, #2
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff ff56 	bl	8000ae4 <LL_ADC_IsEnabled>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d000      	beq.n	8000c3e <HAL_ADC_Init+0xee>
 8000c3c:	e0ad      	b.n	8000d9a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7e1b      	ldrb	r3, [r3, #24]
 8000c46:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c48:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7e5b      	ldrb	r3, [r3, #25]
 8000c4e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c50:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7e9b      	ldrb	r3, [r3, #26]
 8000c56:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c58:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <HAL_ADC_Init+0x118>
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	015b      	lsls	r3, r3, #5
 8000c66:	e000      	b.n	8000c6a <HAL_ADC_Init+0x11a>
 8000c68:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c6a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c70:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	da04      	bge.n	8000c84 <HAL_ADC_Init+0x134>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	085b      	lsrs	r3, r3, #1
 8000c82:	e001      	b.n	8000c88 <HAL_ADC_Init+0x138>
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000c88:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	212c      	movs	r1, #44	; 0x2c
 8000c8e:	5c5b      	ldrb	r3, [r3, r1]
 8000c90:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c92:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d115      	bne.n	8000cd0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7e9b      	ldrb	r3, [r3, #26]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d105      	bne.n	8000cb8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	0252      	lsls	r2, r2, #9
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	e00b      	b.n	8000cd0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbc:	2220      	movs	r2, #32
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cc8:	2201      	movs	r2, #1
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00a      	beq.n	8000cee <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cdc:	23e0      	movs	r3, #224	; 0xe0
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	4a65      	ldr	r2, [pc, #404]	; (8000e8c <HAL_ADC_Init+0x33c>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	0f9b      	lsrs	r3, r3, #30
 8000d0a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d10:	4313      	orrs	r3, r2
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	223c      	movs	r2, #60	; 0x3c
 8000d1c:	5c9b      	ldrb	r3, [r3, r2]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d111      	bne.n	8000d46 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	0f9b      	lsrs	r3, r3, #30
 8000d28:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d2e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000d34:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000d3a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	2201      	movs	r2, #1
 8000d42:	4313      	orrs	r3, r2
 8000d44:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	4a50      	ldr	r2, [pc, #320]	; (8000e90 <HAL_ADC_Init+0x340>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	0019      	movs	r1, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	23c0      	movs	r3, #192	; 0xc0
 8000d62:	061b      	lsls	r3, r3, #24
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d018      	beq.n	8000d9a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d012      	beq.n	8000d9a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	061b      	lsls	r3, r3, #24
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d00c      	beq.n	8000d9a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d80:	4b44      	ldr	r3, [pc, #272]	; (8000e94 <HAL_ADC_Init+0x344>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a44      	ldr	r2, [pc, #272]	; (8000e98 <HAL_ADC_Init+0x348>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	0019      	movs	r1, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	23f0      	movs	r3, #240	; 0xf0
 8000d90:	039b      	lsls	r3, r3, #14
 8000d92:	401a      	ands	r2, r3
 8000d94:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <HAL_ADC_Init+0x344>)
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da2:	001a      	movs	r2, r3
 8000da4:	2100      	movs	r1, #0
 8000da6:	f7ff fdbe 	bl	8000926 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db2:	493a      	ldr	r1, [pc, #232]	; (8000e9c <HAL_ADC_Init+0x34c>)
 8000db4:	001a      	movs	r2, r3
 8000db6:	f7ff fdb6 	bl	8000926 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d109      	bne.n	8000dd6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4249      	negs	r1, r1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8000dd4:	e018      	b.n	8000e08 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	039b      	lsls	r3, r3, #14
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d112      	bne.n	8000e08 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	221c      	movs	r2, #28
 8000df2:	4013      	ands	r3, r2
 8000df4:	2210      	movs	r2, #16
 8000df6:	4252      	negs	r2, r2
 8000df8:	409a      	lsls	r2, r3
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff fda6 	bl	8000960 <LL_ADC_GetSamplingTimeCommonChannels>
 8000e14:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d10b      	bne.n	8000e36 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e28:	2203      	movs	r2, #3
 8000e2a:	4393      	bics	r3, r2
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e34:	e01c      	b.n	8000e70 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	2212      	movs	r2, #18
 8000e3c:	4393      	bics	r3, r2
 8000e3e:	2210      	movs	r2, #16
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000e52:	231f      	movs	r3, #31
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e5a:	e009      	b.n	8000e70 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e60:	2210      	movs	r2, #16
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e68:	231f      	movs	r3, #31
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000e70:	231f      	movs	r3, #31
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	781b      	ldrb	r3, [r3, #0]
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b008      	add	sp, #32
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	20000000 	.word	0x20000000
 8000e84:	00030d40 	.word	0x00030d40
 8000e88:	fffffefd 	.word	0xfffffefd
 8000e8c:	fffe0201 	.word	0xfffe0201
 8000e90:	1ffffc02 	.word	0x1ffffc02
 8000e94:	40012708 	.word	0x40012708
 8000e98:	ffc3ffff 	.word	0xffc3ffff
 8000e9c:	07ffff04 	.word	0x07ffff04

08000ea0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff fe3d 	bl	8000b2c <LL_ADC_REG_IsConversionOngoing>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d135      	bne.n	8000f22 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2254      	movs	r2, #84	; 0x54
 8000eba:	5c9b      	ldrb	r3, [r3, r2]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d101      	bne.n	8000ec4 <HAL_ADC_Start+0x24>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e035      	b.n	8000f30 <HAL_ADC_Start+0x90>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2254      	movs	r2, #84	; 0x54
 8000ec8:	2101      	movs	r1, #1
 8000eca:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ecc:	250f      	movs	r5, #15
 8000ece:	197c      	adds	r4, r7, r5
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 faaa 	bl	800142c <ADC_Enable>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000edc:	197b      	adds	r3, r7, r5
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d119      	bne.n	8000f18 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <HAL_ADC_Start+0x98>)
 8000eea:	4013      	ands	r3, r2
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	0052      	lsls	r2, r2, #1
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	221c      	movs	r2, #28
 8000f02:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2254      	movs	r2, #84	; 0x54
 8000f08:	2100      	movs	r1, #0
 8000f0a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fdf9 	bl	8000b08 <LL_ADC_REG_StartConversion>
 8000f16:	e008      	b.n	8000f2a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2254      	movs	r2, #84	; 0x54
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	5499      	strb	r1, [r3, r2]
 8000f20:	e003      	b.n	8000f2a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f22:	230f      	movs	r3, #15
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	2202      	movs	r2, #2
 8000f28:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	781b      	ldrb	r3, [r3, #0]
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b004      	add	sp, #16
 8000f36:	bdb0      	pop	{r4, r5, r7, pc}
 8000f38:	fffff0fe 	.word	0xfffff0fe

08000f3c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d102      	bne.n	8000f54 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	e00f      	b.n	8000f74 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d007      	beq.n	8000f70 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f64:	2220      	movs	r2, #32
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e072      	b.n	8001056 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8000f70:	2304      	movs	r3, #4
 8000f72:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f74:	f7ff fc88 	bl	8000888 <HAL_GetTick>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000f7c:	e01f      	b.n	8000fbe <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	d01c      	beq.n	8000fbe <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000f84:	f7ff fc80 	bl	8000888 <HAL_GetTick>
 8000f88:	0002      	movs	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d302      	bcc.n	8000f9a <HAL_ADC_PollForConversion+0x5e>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d111      	bne.n	8000fbe <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d10b      	bne.n	8000fbe <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	2204      	movs	r2, #4
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2254      	movs	r2, #84	; 0x54
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e04b      	b.n	8001056 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d0d9      	beq.n	8000f7e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff fcd6 	bl	800098e <LL_ADC_REG_IsTriggerSourceSWStart>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d02e      	beq.n	8001044 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7e9b      	ldrb	r3, [r3, #26]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d12a      	bne.n	8001044 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d123      	bne.n	8001044 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff fd93 	bl	8000b2c <LL_ADC_REG_IsConversionOngoing>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d110      	bne.n	800102c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	210c      	movs	r1, #12
 8001016:	438a      	bics	r2, r1
 8001018:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_ADC_PollForConversion+0x124>)
 8001020:	4013      	ands	r3, r2
 8001022:	2201      	movs	r2, #1
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	659a      	str	r2, [r3, #88]	; 0x58
 800102a:	e00b      	b.n	8001044 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001030:	2220      	movs	r2, #32
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103c:	2201      	movs	r2, #1
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7e1b      	ldrb	r3, [r3, #24]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d103      	bne.n	8001054 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	220c      	movs	r2, #12
 8001052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	0018      	movs	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	b004      	add	sp, #16
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	fffffefe 	.word	0xfffffefe

08001064 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001086:	2317      	movs	r3, #23
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2254      	movs	r2, #84	; 0x54
 8001096:	5c9b      	ldrb	r3, [r3, r2]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d101      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x24>
 800109c:	2302      	movs	r3, #2
 800109e:	e1c0      	b.n	8001422 <HAL_ADC_ConfigChannel+0x3a6>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2254      	movs	r2, #84	; 0x54
 80010a4:	2101      	movs	r1, #1
 80010a6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff fd3d 	bl	8000b2c <LL_ADC_REG_IsConversionOngoing>
 80010b2:	1e03      	subs	r3, r0, #0
 80010b4:	d000      	beq.n	80010b8 <HAL_ADC_ConfigChannel+0x3c>
 80010b6:	e1a3      	b.n	8001400 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d100      	bne.n	80010c2 <HAL_ADC_ConfigChannel+0x46>
 80010c0:	e143      	b.n	800134a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	061b      	lsls	r3, r3, #24
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d004      	beq.n	80010d8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010d2:	4ac1      	ldr	r2, [pc, #772]	; (80013d8 <HAL_ADC_ConfigChannel+0x35c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d108      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0019      	movs	r1, r3
 80010e2:	0010      	movs	r0, r2
 80010e4:	f7ff fc84 	bl	80009f0 <LL_ADC_REG_SetSequencerChAdd>
 80010e8:	e0c9      	b.n	800127e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	211f      	movs	r1, #31
 80010f4:	400b      	ands	r3, r1
 80010f6:	210f      	movs	r1, #15
 80010f8:	4099      	lsls	r1, r3
 80010fa:	000b      	movs	r3, r1
 80010fc:	43db      	mvns	r3, r3
 80010fe:	4013      	ands	r3, r2
 8001100:	0019      	movs	r1, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	035b      	lsls	r3, r3, #13
 8001108:	0b5b      	lsrs	r3, r3, #13
 800110a:	d105      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x9c>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0e9b      	lsrs	r3, r3, #26
 8001112:	221f      	movs	r2, #31
 8001114:	4013      	ands	r3, r2
 8001116:	e098      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2201      	movs	r2, #1
 800111e:	4013      	ands	r3, r2
 8001120:	d000      	beq.n	8001124 <HAL_ADC_ConfigChannel+0xa8>
 8001122:	e091      	b.n	8001248 <HAL_ADC_ConfigChannel+0x1cc>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2202      	movs	r2, #2
 800112a:	4013      	ands	r3, r2
 800112c:	d000      	beq.n	8001130 <HAL_ADC_ConfigChannel+0xb4>
 800112e:	e089      	b.n	8001244 <HAL_ADC_ConfigChannel+0x1c8>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2204      	movs	r2, #4
 8001136:	4013      	ands	r3, r2
 8001138:	d000      	beq.n	800113c <HAL_ADC_ConfigChannel+0xc0>
 800113a:	e081      	b.n	8001240 <HAL_ADC_ConfigChannel+0x1c4>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2208      	movs	r2, #8
 8001142:	4013      	ands	r3, r2
 8001144:	d000      	beq.n	8001148 <HAL_ADC_ConfigChannel+0xcc>
 8001146:	e079      	b.n	800123c <HAL_ADC_ConfigChannel+0x1c0>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2210      	movs	r2, #16
 800114e:	4013      	ands	r3, r2
 8001150:	d000      	beq.n	8001154 <HAL_ADC_ConfigChannel+0xd8>
 8001152:	e071      	b.n	8001238 <HAL_ADC_ConfigChannel+0x1bc>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2220      	movs	r2, #32
 800115a:	4013      	ands	r3, r2
 800115c:	d000      	beq.n	8001160 <HAL_ADC_ConfigChannel+0xe4>
 800115e:	e069      	b.n	8001234 <HAL_ADC_ConfigChannel+0x1b8>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2240      	movs	r2, #64	; 0x40
 8001166:	4013      	ands	r3, r2
 8001168:	d000      	beq.n	800116c <HAL_ADC_ConfigChannel+0xf0>
 800116a:	e061      	b.n	8001230 <HAL_ADC_ConfigChannel+0x1b4>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	4013      	ands	r3, r2
 8001174:	d000      	beq.n	8001178 <HAL_ADC_ConfigChannel+0xfc>
 8001176:	e059      	b.n	800122c <HAL_ADC_ConfigChannel+0x1b0>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4013      	ands	r3, r2
 8001182:	d151      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1ac>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4013      	ands	r3, r2
 800118e:	d149      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x1a8>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4013      	ands	r3, r2
 800119a:	d141      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1a4>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4013      	ands	r3, r2
 80011a6:	d139      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1a0>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	4013      	ands	r3, r2
 80011b2:	d131      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x19c>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	019b      	lsls	r3, r3, #6
 80011bc:	4013      	ands	r3, r2
 80011be:	d129      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x198>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	01db      	lsls	r3, r3, #7
 80011c8:	4013      	ands	r3, r2
 80011ca:	d121      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x194>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	4013      	ands	r3, r2
 80011d6:	d119      	bne.n	800120c <HAL_ADC_ConfigChannel+0x190>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	025b      	lsls	r3, r3, #9
 80011e0:	4013      	ands	r3, r2
 80011e2:	d111      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x18c>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	029b      	lsls	r3, r3, #10
 80011ec:	4013      	ands	r3, r2
 80011ee:	d109      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x188>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	02db      	lsls	r3, r3, #11
 80011f8:	4013      	ands	r3, r2
 80011fa:	d001      	beq.n	8001200 <HAL_ADC_ConfigChannel+0x184>
 80011fc:	2312      	movs	r3, #18
 80011fe:	e024      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001200:	2300      	movs	r3, #0
 8001202:	e022      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001204:	2311      	movs	r3, #17
 8001206:	e020      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001208:	2310      	movs	r3, #16
 800120a:	e01e      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 800120c:	230f      	movs	r3, #15
 800120e:	e01c      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001210:	230e      	movs	r3, #14
 8001212:	e01a      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001214:	230d      	movs	r3, #13
 8001216:	e018      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001218:	230c      	movs	r3, #12
 800121a:	e016      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 800121c:	230b      	movs	r3, #11
 800121e:	e014      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001220:	230a      	movs	r3, #10
 8001222:	e012      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001224:	2309      	movs	r3, #9
 8001226:	e010      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001228:	2308      	movs	r3, #8
 800122a:	e00e      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 800122c:	2307      	movs	r3, #7
 800122e:	e00c      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001230:	2306      	movs	r3, #6
 8001232:	e00a      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001234:	2305      	movs	r3, #5
 8001236:	e008      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001238:	2304      	movs	r3, #4
 800123a:	e006      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 800123c:	2303      	movs	r3, #3
 800123e:	e004      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001240:	2302      	movs	r3, #2
 8001242:	e002      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_ADC_ConfigChannel+0x1ce>
 8001248:	2300      	movs	r3, #0
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	6852      	ldr	r2, [r2, #4]
 800124e:	201f      	movs	r0, #31
 8001250:	4002      	ands	r2, r0
 8001252:	4093      	lsls	r3, r2
 8001254:	000a      	movs	r2, r1
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	429a      	cmp	r2, r3
 800126a:	d808      	bhi.n	800127e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	001a      	movs	r2, r3
 800127a:	f7ff fb99 	bl	80009b0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	6819      	ldr	r1, [r3, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	001a      	movs	r2, r3
 800128c:	f7ff fbd4 	bl	8000a38 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db00      	blt.n	800129a <HAL_ADC_ConfigChannel+0x21e>
 8001298:	e0bc      	b.n	8001414 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800129a:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_ADC_ConfigChannel+0x360>)
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff fb35 	bl	800090c <LL_ADC_GetCommonPathInternalCh>
 80012a2:	0003      	movs	r3, r0
 80012a4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a4d      	ldr	r2, [pc, #308]	; (80013e0 <HAL_ADC_ConfigChannel+0x364>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d122      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012b8:	d11d      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	0412      	lsls	r2, r2, #16
 80012c0:	4313      	orrs	r3, r2
 80012c2:	4a46      	ldr	r2, [pc, #280]	; (80013dc <HAL_ADC_ConfigChannel+0x360>)
 80012c4:	0019      	movs	r1, r3
 80012c6:	0010      	movs	r0, r2
 80012c8:	f7ff fb0c 	bl	80008e4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012cc:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <HAL_ADC_ConfigChannel+0x368>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4945      	ldr	r1, [pc, #276]	; (80013e8 <HAL_ADC_ConfigChannel+0x36c>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7fe ff14 	bl	8000100 <__udivsi3>
 80012d8:	0003      	movs	r3, r0
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	0013      	movs	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80012e6:	e002      	b.n	80012ee <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f9      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012f4:	e08e      	b.n	8001414 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a3c      	ldr	r2, [pc, #240]	; (80013ec <HAL_ADC_ConfigChannel+0x370>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d10e      	bne.n	800131e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	045b      	lsls	r3, r3, #17
 8001306:	4013      	ands	r3, r2
 8001308:	d109      	bne.n	800131e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	0452      	lsls	r2, r2, #17
 8001310:	4313      	orrs	r3, r2
 8001312:	4a32      	ldr	r2, [pc, #200]	; (80013dc <HAL_ADC_ConfigChannel+0x360>)
 8001314:	0019      	movs	r1, r3
 8001316:	0010      	movs	r0, r2
 8001318:	f7ff fae4 	bl	80008e4 <LL_ADC_SetCommonPathInternalCh>
 800131c:	e07a      	b.n	8001414 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a33      	ldr	r2, [pc, #204]	; (80013f0 <HAL_ADC_ConfigChannel+0x374>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d000      	beq.n	800132a <HAL_ADC_ConfigChannel+0x2ae>
 8001328:	e074      	b.n	8001414 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	03db      	lsls	r3, r3, #15
 8001330:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001332:	d000      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x2ba>
 8001334:	e06e      	b.n	8001414 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	03d2      	lsls	r2, r2, #15
 800133c:	4313      	orrs	r3, r2
 800133e:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_ADC_ConfigChannel+0x360>)
 8001340:	0019      	movs	r1, r3
 8001342:	0010      	movs	r0, r2
 8001344:	f7ff face 	bl	80008e4 <LL_ADC_SetCommonPathInternalCh>
 8001348:	e064      	b.n	8001414 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	429a      	cmp	r2, r3
 8001354:	d004      	beq.n	8001360 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800135a:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <HAL_ADC_ConfigChannel+0x35c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d107      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0019      	movs	r1, r3
 800136a:	0010      	movs	r0, r2
 800136c:	f7ff fb51 	bl	8000a12 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	da4d      	bge.n	8001414 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_ADC_ConfigChannel+0x360>)
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff fac6 	bl	800090c <LL_ADC_GetCommonPathInternalCh>
 8001380:	0003      	movs	r3, r0
 8001382:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a15      	ldr	r2, [pc, #84]	; (80013e0 <HAL_ADC_ConfigChannel+0x364>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d108      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_ADC_ConfigChannel+0x378>)
 8001392:	4013      	ands	r3, r2
 8001394:	4a11      	ldr	r2, [pc, #68]	; (80013dc <HAL_ADC_ConfigChannel+0x360>)
 8001396:	0019      	movs	r1, r3
 8001398:	0010      	movs	r0, r2
 800139a:	f7ff faa3 	bl	80008e4 <LL_ADC_SetCommonPathInternalCh>
 800139e:	e039      	b.n	8001414 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a11      	ldr	r2, [pc, #68]	; (80013ec <HAL_ADC_ConfigChannel+0x370>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d108      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <HAL_ADC_ConfigChannel+0x37c>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_ADC_ConfigChannel+0x360>)
 80013b2:	0019      	movs	r1, r3
 80013b4:	0010      	movs	r0, r2
 80013b6:	f7ff fa95 	bl	80008e4 <LL_ADC_SetCommonPathInternalCh>
 80013ba:	e02b      	b.n	8001414 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_ADC_ConfigChannel+0x374>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d126      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_ADC_ConfigChannel+0x380>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_ADC_ConfigChannel+0x360>)
 80013ce:	0019      	movs	r1, r3
 80013d0:	0010      	movs	r0, r2
 80013d2:	f7ff fa87 	bl	80008e4 <LL_ADC_SetCommonPathInternalCh>
 80013d6:	e01d      	b.n	8001414 <HAL_ADC_ConfigChannel+0x398>
 80013d8:	80000004 	.word	0x80000004
 80013dc:	40012708 	.word	0x40012708
 80013e0:	b0001000 	.word	0xb0001000
 80013e4:	20000000 	.word	0x20000000
 80013e8:	00030d40 	.word	0x00030d40
 80013ec:	b8004000 	.word	0xb8004000
 80013f0:	b4002000 	.word	0xb4002000
 80013f4:	ff7fffff 	.word	0xff7fffff
 80013f8:	feffffff 	.word	0xfeffffff
 80013fc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001404:	2220      	movs	r2, #32
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800140c:	2317      	movs	r3, #23
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2254      	movs	r2, #84	; 0x54
 8001418:	2100      	movs	r1, #0
 800141a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800141c:	2317      	movs	r3, #23
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	781b      	ldrb	r3, [r3, #0]
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b006      	add	sp, #24
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)

0800142c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff fb51 	bl	8000ae4 <LL_ADC_IsEnabled>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d000      	beq.n	8001448 <ADC_Enable+0x1c>
 8001446:	e069      	b.n	800151c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4a36      	ldr	r2, [pc, #216]	; (8001528 <ADC_Enable+0xfc>)
 8001450:	4013      	ands	r3, r2
 8001452:	d00d      	beq.n	8001470 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	2210      	movs	r2, #16
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001464:	2201      	movs	r2, #1
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e056      	b.n	800151e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fb23 	bl	8000ac0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <ADC_Enable+0x100>)
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fa45 	bl	800090c <LL_ADC_GetCommonPathInternalCh>
 8001482:	0002      	movs	r2, r0
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	041b      	lsls	r3, r3, #16
 8001488:	4013      	ands	r3, r2
 800148a:	d00f      	beq.n	80014ac <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <ADC_Enable+0x104>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4928      	ldr	r1, [pc, #160]	; (8001534 <ADC_Enable+0x108>)
 8001492:	0018      	movs	r0, r3
 8001494:	f7fe fe34 	bl	8000100 <__udivsi3>
 8001498:	0003      	movs	r3, r0
 800149a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800149c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800149e:	e002      	b.n	80014a6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f9      	bne.n	80014a0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e5b      	ldrb	r3, [r3, #25]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d033      	beq.n	800151c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80014b4:	f7ff f9e8 	bl	8000888 <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80014bc:	e027      	b.n	800150e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff fb0e 	bl	8000ae4 <LL_ADC_IsEnabled>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d104      	bne.n	80014d6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7ff faf5 	bl	8000ac0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014d6:	f7ff f9d7 	bl	8000888 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d914      	bls.n	800150e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d00d      	beq.n	800150e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	2210      	movs	r2, #16
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	2201      	movs	r2, #1
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e007      	b.n	800151e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	4013      	ands	r3, r2
 8001518:	2b01      	cmp	r3, #1
 800151a:	d1d0      	bne.n	80014be <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b004      	add	sp, #16
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	80000017 	.word	0x80000017
 800152c:	40012708 	.word	0x40012708
 8001530:	20000000 	.word	0x20000000
 8001534:	00030d40 	.word	0x00030d40

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	0002      	movs	r2, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b7f      	cmp	r3, #127	; 0x7f
 800154c:	d828      	bhi.n	80015a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800154e:	4a2f      	ldr	r2, [pc, #188]	; (800160c <__NVIC_SetPriority+0xd4>)
 8001550:	1dfb      	adds	r3, r7, #7
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b25b      	sxtb	r3, r3
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	33c0      	adds	r3, #192	; 0xc0
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	589b      	ldr	r3, [r3, r2]
 800155e:	1dfa      	adds	r2, r7, #7
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	0011      	movs	r1, r2
 8001564:	2203      	movs	r2, #3
 8001566:	400a      	ands	r2, r1
 8001568:	00d2      	lsls	r2, r2, #3
 800156a:	21ff      	movs	r1, #255	; 0xff
 800156c:	4091      	lsls	r1, r2
 800156e:	000a      	movs	r2, r1
 8001570:	43d2      	mvns	r2, r2
 8001572:	401a      	ands	r2, r3
 8001574:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	019b      	lsls	r3, r3, #6
 800157a:	22ff      	movs	r2, #255	; 0xff
 800157c:	401a      	ands	r2, r3
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	0018      	movs	r0, r3
 8001584:	2303      	movs	r3, #3
 8001586:	4003      	ands	r3, r0
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800158c:	481f      	ldr	r0, [pc, #124]	; (800160c <__NVIC_SetPriority+0xd4>)
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b25b      	sxtb	r3, r3
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	430a      	orrs	r2, r1
 8001598:	33c0      	adds	r3, #192	; 0xc0
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800159e:	e031      	b.n	8001604 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a0:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <__NVIC_SetPriority+0xd8>)
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	0019      	movs	r1, r3
 80015a8:	230f      	movs	r3, #15
 80015aa:	400b      	ands	r3, r1
 80015ac:	3b08      	subs	r3, #8
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3306      	adds	r3, #6
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	18d3      	adds	r3, r2, r3
 80015b6:	3304      	adds	r3, #4
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	1dfa      	adds	r2, r7, #7
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	0011      	movs	r1, r2
 80015c0:	2203      	movs	r2, #3
 80015c2:	400a      	ands	r2, r1
 80015c4:	00d2      	lsls	r2, r2, #3
 80015c6:	21ff      	movs	r1, #255	; 0xff
 80015c8:	4091      	lsls	r1, r2
 80015ca:	000a      	movs	r2, r1
 80015cc:	43d2      	mvns	r2, r2
 80015ce:	401a      	ands	r2, r3
 80015d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	019b      	lsls	r3, r3, #6
 80015d6:	22ff      	movs	r2, #255	; 0xff
 80015d8:	401a      	ands	r2, r3
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	0018      	movs	r0, r3
 80015e0:	2303      	movs	r3, #3
 80015e2:	4003      	ands	r3, r0
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <__NVIC_SetPriority+0xd8>)
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	001c      	movs	r4, r3
 80015f0:	230f      	movs	r3, #15
 80015f2:	4023      	ands	r3, r4
 80015f4:	3b08      	subs	r3, #8
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	430a      	orrs	r2, r1
 80015fa:	3306      	adds	r3, #6
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	18c3      	adds	r3, r0, r3
 8001600:	3304      	adds	r3, #4
 8001602:	601a      	str	r2, [r3, #0]
}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b003      	add	sp, #12
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	1e5a      	subs	r2, r3, #1
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	045b      	lsls	r3, r3, #17
 8001624:	429a      	cmp	r2, r3
 8001626:	d301      	bcc.n	800162c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001628:	2301      	movs	r3, #1
 800162a:	e010      	b.n	800164e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <SysTick_Config+0x44>)
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	3a01      	subs	r2, #1
 8001632:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001634:	2301      	movs	r3, #1
 8001636:	425b      	negs	r3, r3
 8001638:	2103      	movs	r1, #3
 800163a:	0018      	movs	r0, r3
 800163c:	f7ff ff7c 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <SysTick_Config+0x44>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <SysTick_Config+0x44>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	0018      	movs	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	210f      	movs	r1, #15
 8001668:	187b      	adds	r3, r7, r1
 800166a:	1c02      	adds	r2, r0, #0
 800166c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	187b      	adds	r3, r7, r1
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b25b      	sxtb	r3, r3
 8001676:	0011      	movs	r1, r2
 8001678:	0018      	movs	r0, r3
 800167a:	f7ff ff5d 	bl	8001538 <__NVIC_SetPriority>
}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b004      	add	sp, #16
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff ffbf 	bl	8001614 <SysTick_Config>
 8001696:	0003      	movs	r3, r0
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	e147      	b.n	8001940 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4091      	lsls	r1, r2
 80016ba:	000a      	movs	r2, r1
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d100      	bne.n	80016c8 <HAL_GPIO_Init+0x28>
 80016c6:	e138      	b.n	800193a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2203      	movs	r2, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d005      	beq.n	80016e0 <HAL_GPIO_Init+0x40>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	4013      	ands	r3, r2
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d130      	bne.n	8001742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	409a      	lsls	r2, r3
 80016ee:	0013      	movs	r3, r2
 80016f0:	43da      	mvns	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	409a      	lsls	r2, r3
 8001702:	0013      	movs	r3, r2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001716:	2201      	movs	r2, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	2201      	movs	r2, #1
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	4013      	ands	r3, r2
 800174a:	2b03      	cmp	r3, #3
 800174c:	d017      	beq.n	800177e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	43da      	mvns	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2203      	movs	r2, #3
 8001784:	4013      	ands	r3, r2
 8001786:	2b02      	cmp	r3, #2
 8001788:	d123      	bne.n	80017d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	58d3      	ldr	r3, [r2, r3]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2207      	movs	r2, #7
 800179c:	4013      	ands	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2107      	movs	r1, #7
 80017b6:	400b      	ands	r3, r1
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	6939      	ldr	r1, [r7, #16]
 80017d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	409a      	lsls	r2, r3
 80017e0:	0013      	movs	r3, r2
 80017e2:	43da      	mvns	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2203      	movs	r2, #3
 80017f0:	401a      	ands	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	23c0      	movs	r3, #192	; 0xc0
 800180c:	029b      	lsls	r3, r3, #10
 800180e:	4013      	ands	r3, r2
 8001810:	d100      	bne.n	8001814 <HAL_GPIO_Init+0x174>
 8001812:	e092      	b.n	800193a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001814:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3318      	adds	r3, #24
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	589b      	ldr	r3, [r3, r2]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2203      	movs	r2, #3
 8001826:	4013      	ands	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	220f      	movs	r2, #15
 800182c:	409a      	lsls	r2, r3
 800182e:	0013      	movs	r3, r2
 8001830:	43da      	mvns	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	23a0      	movs	r3, #160	; 0xa0
 800183c:	05db      	lsls	r3, r3, #23
 800183e:	429a      	cmp	r2, r3
 8001840:	d013      	beq.n	800186a <HAL_GPIO_Init+0x1ca>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a45      	ldr	r2, [pc, #276]	; (800195c <HAL_GPIO_Init+0x2bc>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d00d      	beq.n	8001866 <HAL_GPIO_Init+0x1c6>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a44      	ldr	r2, [pc, #272]	; (8001960 <HAL_GPIO_Init+0x2c0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d007      	beq.n	8001862 <HAL_GPIO_Init+0x1c2>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a43      	ldr	r2, [pc, #268]	; (8001964 <HAL_GPIO_Init+0x2c4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <HAL_GPIO_Init+0x1be>
 800185a:	2303      	movs	r3, #3
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x1cc>
 800185e:	2305      	movs	r3, #5
 8001860:	e004      	b.n	800186c <HAL_GPIO_Init+0x1cc>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x1cc>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x1cc>
 800186a:	2300      	movs	r3, #0
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	2103      	movs	r1, #3
 8001870:	400a      	ands	r2, r1
 8001872:	00d2      	lsls	r2, r2, #3
 8001874:	4093      	lsls	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800187c:	4936      	ldr	r1, [pc, #216]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3318      	adds	r3, #24
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43da      	mvns	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	035b      	lsls	r3, r3, #13
 80018a2:	4013      	ands	r3, r2
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43da      	mvns	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	039b      	lsls	r3, r3, #14
 80018cc:	4013      	ands	r3, r2
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018de:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 80018e0:	2384      	movs	r3, #132	; 0x84
 80018e2:	58d3      	ldr	r3, [r2, r3]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43da      	mvns	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	029b      	lsls	r3, r3, #10
 80018f8:	4013      	ands	r3, r2
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001904:	4914      	ldr	r1, [pc, #80]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 8001906:	2284      	movs	r2, #132	; 0x84
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	58d3      	ldr	r3, [r2, r3]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43da      	mvns	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	025b      	lsls	r3, r3, #9
 8001926:	4013      	ands	r3, r2
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001932:	4909      	ldr	r1, [pc, #36]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	40da      	lsrs	r2, r3
 8001948:	1e13      	subs	r3, r2, #0
 800194a:	d000      	beq.n	800194e <HAL_GPIO_Init+0x2ae>
 800194c:	e6b0      	b.n	80016b0 <HAL_GPIO_Init+0x10>
  }
}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b006      	add	sp, #24
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021800 	.word	0x40021800
 800195c:	50000400 	.word	0x50000400
 8001960:	50000800 	.word	0x50000800
 8001964:	50000c00 	.word	0x50000c00

08001968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	0008      	movs	r0, r1
 8001972:	0011      	movs	r1, r2
 8001974:	1cbb      	adds	r3, r7, #2
 8001976:	1c02      	adds	r2, r0, #0
 8001978:	801a      	strh	r2, [r3, #0]
 800197a:	1c7b      	adds	r3, r7, #1
 800197c:	1c0a      	adds	r2, r1, #0
 800197e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001980:	1c7b      	adds	r3, r7, #1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001988:	1cbb      	adds	r3, r7, #2
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001992:	1cbb      	adds	r3, r7, #2
 8001994:	881a      	ldrh	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a19      	ldr	r2, [pc, #100]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d11f      	bne.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	0013      	movs	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	189b      	adds	r3, r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4912      	ldr	r1, [pc, #72]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7fe fb92 	bl	8000100 <__udivsi3>
 80019dc:	0003      	movs	r3, r0
 80019de:	3301      	adds	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e2:	e008      	b.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e001      	b.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e009      	b.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	401a      	ands	r2, r3
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d0ed      	beq.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b004      	add	sp, #16
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	40007000 	.word	0x40007000
 8001a18:	fffff9ff 	.word	0xfffff9ff
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	000f4240 	.word	0x000f4240

08001a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e2f3      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <HAL_RCC_OscConfig+0x1e>
 8001a40:	e07c      	b.n	8001b3c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a42:	4bc3      	ldr	r3, [pc, #780]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2238      	movs	r2, #56	; 0x38
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a4c:	4bc0      	ldr	r3, [pc, #768]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2203      	movs	r2, #3
 8001a52:	4013      	ands	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	d102      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3e>
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d002      	beq.n	8001a68 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d10b      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	4bb9      	ldr	r3, [pc, #740]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	029b      	lsls	r3, r3, #10
 8001a70:	4013      	ands	r3, r2
 8001a72:	d062      	beq.n	8001b3a <HAL_RCC_OscConfig+0x116>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d15e      	bne.n	8001b3a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e2ce      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	025b      	lsls	r3, r3, #9
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_OscConfig+0x78>
 8001a8c:	4bb0      	ldr	r3, [pc, #704]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4baf      	ldr	r3, [pc, #700]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	0249      	lsls	r1, r1, #9
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e020      	b.n	8001ade <HAL_RCC_OscConfig+0xba>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	23a0      	movs	r3, #160	; 0xa0
 8001aa2:	02db      	lsls	r3, r3, #11
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d10e      	bne.n	8001ac6 <HAL_RCC_OscConfig+0xa2>
 8001aa8:	4ba9      	ldr	r3, [pc, #676]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4ba8      	ldr	r3, [pc, #672]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	02c9      	lsls	r1, r1, #11
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	4ba6      	ldr	r3, [pc, #664]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4ba5      	ldr	r3, [pc, #660]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	0249      	lsls	r1, r1, #9
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e00b      	b.n	8001ade <HAL_RCC_OscConfig+0xba>
 8001ac6:	4ba2      	ldr	r3, [pc, #648]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4ba1      	ldr	r3, [pc, #644]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	49a1      	ldr	r1, [pc, #644]	; (8001d54 <HAL_RCC_OscConfig+0x330>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	4b9f      	ldr	r3, [pc, #636]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b9e      	ldr	r3, [pc, #632]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	499f      	ldr	r1, [pc, #636]	; (8001d58 <HAL_RCC_OscConfig+0x334>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d014      	beq.n	8001b10 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7fe fecf 	bl	8000888 <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7fe feca 	bl	8000888 <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e28d      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b02:	4b93      	ldr	r3, [pc, #588]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	029b      	lsls	r3, r3, #10
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0xcc>
 8001b0e:	e015      	b.n	8001b3c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7fe feba 	bl	8000888 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b1a:	f7fe feb5 	bl	8000888 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b64      	cmp	r3, #100	; 0x64
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e278      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b2c:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0xf6>
 8001b38:	e000      	b.n	8001b3c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d100      	bne.n	8001b48 <HAL_RCC_OscConfig+0x124>
 8001b46:	e099      	b.n	8001c7c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b48:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2238      	movs	r2, #56	; 0x38
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b52:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2203      	movs	r2, #3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b10      	cmp	r3, #16
 8001b60:	d102      	bne.n	8001b68 <HAL_RCC_OscConfig+0x144>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d002      	beq.n	8001b6e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d135      	bne.n	8001bda <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b6e:	4b78      	ldr	r3, [pc, #480]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4013      	ands	r3, r2
 8001b78:	d005      	beq.n	8001b86 <HAL_RCC_OscConfig+0x162>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e24b      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b86:	4b72      	ldr	r3, [pc, #456]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a74      	ldr	r2, [pc, #464]	; (8001d5c <HAL_RCC_OscConfig+0x338>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	021a      	lsls	r2, r3, #8
 8001b96:	4b6e      	ldr	r3, [pc, #440]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d112      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ba2:	4b6b      	ldr	r3, [pc, #428]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6e      	ldr	r2, [pc, #440]	; (8001d60 <HAL_RCC_OscConfig+0x33c>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	0019      	movs	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001bb6:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0adb      	lsrs	r3, r3, #11
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	4a68      	ldr	r2, [pc, #416]	; (8001d64 <HAL_RCC_OscConfig+0x340>)
 8001bc2:	40da      	lsrs	r2, r3
 8001bc4:	4b68      	ldr	r3, [pc, #416]	; (8001d68 <HAL_RCC_OscConfig+0x344>)
 8001bc6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x348>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7fe fdff 	bl	80007d0 <HAL_InitTick>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d051      	beq.n	8001c7a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e221      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d030      	beq.n	8001c44 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a5e      	ldr	r2, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x33c>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001bf6:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b55      	ldr	r3, [pc, #340]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001bfc:	2180      	movs	r1, #128	; 0x80
 8001bfe:	0049      	lsls	r1, r1, #1
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7fe fe40 	bl	8000888 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7fe fe3b 	bl	8000888 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e1fe      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c20:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a4a      	ldr	r2, [pc, #296]	; (8001d5c <HAL_RCC_OscConfig+0x338>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	021a      	lsls	r2, r3, #8
 8001c3c:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	e01b      	b.n	8001c7c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c44:	4b42      	ldr	r3, [pc, #264]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001c4a:	4949      	ldr	r1, [pc, #292]	; (8001d70 <HAL_RCC_OscConfig+0x34c>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe fe1a 	bl	8000888 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7fe fe15 	bl	8000888 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e1d8      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4013      	ands	r3, r2
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x236>
 8001c78:	e000      	b.n	8001c7c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2208      	movs	r2, #8
 8001c82:	4013      	ands	r3, r2
 8001c84:	d047      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2238      	movs	r2, #56	; 0x38
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b18      	cmp	r3, #24
 8001c90:	d10a      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c92:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d03c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2f2>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d138      	bne.n	8001d16 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e1ba      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d019      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001cb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fde4 	bl	8000888 <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7fe fddf 	bl	8000888 <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1a2      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d0f1      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2a2>
 8001ce2:	e018      	b.n	8001d16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	438a      	bics	r2, r1
 8001cee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fdca 	bl	8000888 <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7fe fdc5 	bl	8000888 <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e188      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d10:	2202      	movs	r2, #2
 8001d12:	4013      	ands	r3, r2
 8001d14:	d1f1      	bne.n	8001cfa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2fe>
 8001d20:	e0c6      	b.n	8001eb0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d22:	231f      	movs	r3, #31
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2238      	movs	r2, #56	; 0x38
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d11e      	bne.n	8001d74 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x32c>)
 8001d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d100      	bne.n	8001d42 <HAL_RCC_OscConfig+0x31e>
 8001d40:	e0b6      	b.n	8001eb0 <HAL_RCC_OscConfig+0x48c>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d000      	beq.n	8001d4c <HAL_RCC_OscConfig+0x328>
 8001d4a:	e0b1      	b.n	8001eb0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e166      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
 8001d50:	40021000 	.word	0x40021000
 8001d54:	fffeffff 	.word	0xfffeffff
 8001d58:	fffbffff 	.word	0xfffbffff
 8001d5c:	ffff80ff 	.word	0xffff80ff
 8001d60:	ffffc7ff 	.word	0xffffc7ff
 8001d64:	00f42400 	.word	0x00f42400
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004
 8001d70:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d74:	4bac      	ldr	r3, [pc, #688]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	055b      	lsls	r3, r3, #21
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_OscConfig+0x360>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x362>
 8001d84:	2300      	movs	r3, #0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d011      	beq.n	8001dae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4ba7      	ldr	r3, [pc, #668]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d8e:	4ba6      	ldr	r3, [pc, #664]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	0549      	lsls	r1, r1, #21
 8001d94:	430a      	orrs	r2, r1
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d98:	4ba3      	ldr	r3, [pc, #652]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	055b      	lsls	r3, r3, #21
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001da6:	231f      	movs	r3, #31
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dae:	4b9f      	ldr	r3, [pc, #636]	; (800202c <HAL_RCC_OscConfig+0x608>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	d11a      	bne.n	8001df0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dba:	4b9c      	ldr	r3, [pc, #624]	; (800202c <HAL_RCC_OscConfig+0x608>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b9b      	ldr	r3, [pc, #620]	; (800202c <HAL_RCC_OscConfig+0x608>)
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	0049      	lsls	r1, r1, #1
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001dc8:	f7fe fd5e 	bl	8000888 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd2:	f7fe fd59 	bl	8000888 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e11c      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de4:	4b91      	ldr	r3, [pc, #580]	; (800202c <HAL_RCC_OscConfig+0x608>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3e2>
 8001df8:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001dfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dfc:	4b8a      	ldr	r3, [pc, #552]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	430a      	orrs	r2, r1
 8001e02:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e04:	e01c      	b.n	8001e40 <HAL_RCC_OscConfig+0x41c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x404>
 8001e0e:	4b86      	ldr	r3, [pc, #536]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001e10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e12:	4b85      	ldr	r3, [pc, #532]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001e14:	2104      	movs	r1, #4
 8001e16:	430a      	orrs	r2, r1
 8001e18:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e1a:	4b83      	ldr	r3, [pc, #524]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001e1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e1e:	4b82      	ldr	r3, [pc, #520]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001e20:	2101      	movs	r1, #1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0x41c>
 8001e28:	4b7f      	ldr	r3, [pc, #508]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001e2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e2c:	4b7e      	ldr	r3, [pc, #504]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	438a      	bics	r2, r1
 8001e32:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e34:	4b7c      	ldr	r3, [pc, #496]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001e36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e38:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d014      	beq.n	8001e72 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe fd1e 	bl	8000888 <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e50:	e009      	b.n	8001e66 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7fe fd19 	bl	8000888 <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	4a74      	ldr	r2, [pc, #464]	; (8002030 <HAL_RCC_OscConfig+0x60c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0db      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e66:	4b70      	ldr	r3, [pc, #448]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x42e>
 8001e70:	e013      	b.n	8001e9a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7fe fd09 	bl	8000888 <HAL_GetTick>
 8001e76:	0003      	movs	r3, r0
 8001e78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e7a:	e009      	b.n	8001e90 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7c:	f7fe fd04 	bl	8000888 <HAL_GetTick>
 8001e80:	0002      	movs	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	4a6a      	ldr	r2, [pc, #424]	; (8002030 <HAL_RCC_OscConfig+0x60c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0c6      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e90:	4b65      	ldr	r3, [pc, #404]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e9a:	231f      	movs	r3, #31
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ea4:	4b60      	ldr	r3, [pc, #384]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ea8:	4b5f      	ldr	r3, [pc, #380]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001eaa:	4962      	ldr	r1, [pc, #392]	; (8002034 <HAL_RCC_OscConfig+0x610>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d100      	bne.n	8001eba <HAL_RCC_OscConfig+0x496>
 8001eb8:	e0b0      	b.n	800201c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eba:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2238      	movs	r2, #56	; 0x38
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d100      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4a4>
 8001ec6:	e078      	b.n	8001fba <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d153      	bne.n	8001f78 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b55      	ldr	r3, [pc, #340]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b54      	ldr	r3, [pc, #336]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001ed6:	4958      	ldr	r1, [pc, #352]	; (8002038 <HAL_RCC_OscConfig+0x614>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7fe fcd4 	bl	8000888 <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7fe fccf 	bl	8000888 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e092      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef8:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	049b      	lsls	r3, r3, #18
 8001f00:	4013      	ands	r3, r2
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f04:	4b48      	ldr	r3, [pc, #288]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4a4c      	ldr	r2, [pc, #304]	; (800203c <HAL_RCC_OscConfig+0x618>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1a      	ldr	r2, [r3, #32]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	0449      	lsls	r1, r1, #17
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f40:	4b39      	ldr	r3, [pc, #228]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	0549      	lsls	r1, r1, #21
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7fe fc9b 	bl	8000888 <HAL_GetTick>
 8001f52:	0003      	movs	r3, r0
 8001f54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f58:	f7fe fc96 	bl	8000888 <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e059      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6a:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	049b      	lsls	r3, r3, #18
 8001f72:	4013      	ands	r3, r2
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x534>
 8001f76:	e051      	b.n	800201c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001f7e:	492e      	ldr	r1, [pc, #184]	; (8002038 <HAL_RCC_OscConfig+0x614>)
 8001f80:	400a      	ands	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe fc80 	bl	8000888 <HAL_GetTick>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7fe fc7b 	bl	8000888 <HAL_GetTick>
 8001f92:	0002      	movs	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e03e      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	049b      	lsls	r3, r3, #18
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001fb2:	4923      	ldr	r1, [pc, #140]	; (8002040 <HAL_RCC_OscConfig+0x61c>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	e030      	b.n	800201c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e02b      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_RCC_OscConfig+0x604>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2203      	movs	r2, #3
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d11e      	bne.n	8002018 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2270      	movs	r2, #112	; 0x70
 8001fde:	401a      	ands	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d117      	bne.n	8002018 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	23fe      	movs	r3, #254	; 0xfe
 8001fec:	01db      	lsls	r3, r3, #7
 8001fee:	401a      	ands	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d10e      	bne.n	8002018 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	23f8      	movs	r3, #248	; 0xf8
 8001ffe:	039b      	lsls	r3, r3, #14
 8002000:	401a      	ands	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d106      	bne.n	8002018 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	0f5b      	lsrs	r3, r3, #29
 800200e:	075a      	lsls	r2, r3, #29
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b008      	add	sp, #32
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
 8002030:	00001388 	.word	0x00001388
 8002034:	efffffff 	.word	0xefffffff
 8002038:	feffffff 	.word	0xfeffffff
 800203c:	1fc1808c 	.word	0x1fc1808c
 8002040:	effefffc 	.word	0xeffefffc

08002044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0e9      	b.n	800222c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b76      	ldr	r3, [pc, #472]	; (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2207      	movs	r2, #7
 800205e:	4013      	ands	r3, r2
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d91e      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b73      	ldr	r3, [pc, #460]	; (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2207      	movs	r2, #7
 800206c:	4393      	bics	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	4b70      	ldr	r3, [pc, #448]	; (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002078:	f7fe fc06 	bl	8000888 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002080:	e009      	b.n	8002096 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002082:	f7fe fc01 	bl	8000888 <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	4a6a      	ldr	r2, [pc, #424]	; (8002238 <HAL_RCC_ClockConfig+0x1f4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0ca      	b.n	800222c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2207      	movs	r2, #7
 800209c:	4013      	ands	r3, r2
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1ee      	bne.n	8002082 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2202      	movs	r2, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	d015      	beq.n	80020da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2204      	movs	r2, #4
 80020b4:	4013      	ands	r3, r2
 80020b6:	d006      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020b8:	4b60      	ldr	r3, [pc, #384]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	4b5f      	ldr	r3, [pc, #380]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 80020be:	21e0      	movs	r1, #224	; 0xe0
 80020c0:	01c9      	lsls	r1, r1, #7
 80020c2:	430a      	orrs	r2, r1
 80020c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c6:	4b5d      	ldr	r3, [pc, #372]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4a5d      	ldr	r2, [pc, #372]	; (8002240 <HAL_RCC_ClockConfig+0x1fc>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	0019      	movs	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 80020d6:	430a      	orrs	r2, r1
 80020d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2201      	movs	r2, #1
 80020e0:	4013      	ands	r3, r2
 80020e2:	d057      	beq.n	8002194 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ec:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	4013      	ands	r3, r2
 80020f6:	d12b      	bne.n	8002150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e097      	b.n	800222c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d107      	bne.n	8002114 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002104:	4b4d      	ldr	r3, [pc, #308]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	049b      	lsls	r3, r3, #18
 800210c:	4013      	ands	r3, r2
 800210e:	d11f      	bne.n	8002150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e08b      	b.n	800222c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800211c:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4013      	ands	r3, r2
 8002126:	d113      	bne.n	8002150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e07f      	b.n	800222c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d106      	bne.n	8002142 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002134:	4b41      	ldr	r3, [pc, #260]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 8002136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	d108      	bne.n	8002150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e074      	b.n	800222c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e06d      	b.n	800222c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002150:	4b3a      	ldr	r3, [pc, #232]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2207      	movs	r2, #7
 8002156:	4393      	bics	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	4b37      	ldr	r3, [pc, #220]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 8002160:	430a      	orrs	r2, r1
 8002162:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002164:	f7fe fb90 	bl	8000888 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216c:	e009      	b.n	8002182 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216e:	f7fe fb8b 	bl	8000888 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	4a2f      	ldr	r2, [pc, #188]	; (8002238 <HAL_RCC_ClockConfig+0x1f4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e054      	b.n	800222c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b2e      	ldr	r3, [pc, #184]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2238      	movs	r2, #56	; 0x38
 8002188:	401a      	ands	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	429a      	cmp	r2, r3
 8002192:	d1ec      	bne.n	800216e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2207      	movs	r2, #7
 800219a:	4013      	ands	r3, r2
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d21e      	bcs.n	80021e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2207      	movs	r2, #7
 80021a8:	4393      	bics	r3, r2
 80021aa:	0019      	movs	r1, r3
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021b4:	f7fe fb68 	bl	8000888 <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021bc:	e009      	b.n	80021d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021be:	f7fe fb63 	bl	8000888 <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_RCC_ClockConfig+0x1f4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e02c      	b.n	800222c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021d2:	4b18      	ldr	r3, [pc, #96]	; (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2207      	movs	r2, #7
 80021d8:	4013      	ands	r3, r2
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1ee      	bne.n	80021be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2204      	movs	r2, #4
 80021e6:	4013      	ands	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	4a15      	ldr	r2, [pc, #84]	; (8002244 <HAL_RCC_ClockConfig+0x200>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021fe:	f000 f829 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8002202:	0001      	movs	r1, r0
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_RCC_ClockConfig+0x1f8>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	220f      	movs	r2, #15
 800220c:	401a      	ands	r2, r3
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_RCC_ClockConfig+0x204>)
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	58d3      	ldr	r3, [r2, r3]
 8002214:	221f      	movs	r2, #31
 8002216:	4013      	ands	r3, r2
 8002218:	000a      	movs	r2, r1
 800221a:	40da      	lsrs	r2, r3
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_ClockConfig+0x208>)
 800221e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_ClockConfig+0x20c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	0018      	movs	r0, r3
 8002226:	f7fe fad3 	bl	80007d0 <HAL_InitTick>
 800222a:	0003      	movs	r3, r0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b004      	add	sp, #16
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40022000 	.word	0x40022000
 8002238:	00001388 	.word	0x00001388
 800223c:	40021000 	.word	0x40021000
 8002240:	fffff0ff 	.word	0xfffff0ff
 8002244:	ffff8fff 	.word	0xffff8fff
 8002248:	08003370 	.word	0x08003370
 800224c:	20000000 	.word	0x20000000
 8002250:	20000004 	.word	0x20000004

08002254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800225a:	4b3c      	ldr	r3, [pc, #240]	; (800234c <HAL_RCC_GetSysClockFreq+0xf8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2238      	movs	r2, #56	; 0x38
 8002260:	4013      	ands	r3, r2
 8002262:	d10f      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002264:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0adb      	lsrs	r3, r3, #11
 800226a:	2207      	movs	r2, #7
 800226c:	4013      	ands	r3, r2
 800226e:	2201      	movs	r2, #1
 8002270:	409a      	lsls	r2, r3
 8002272:	0013      	movs	r3, r2
 8002274:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	4835      	ldr	r0, [pc, #212]	; (8002350 <HAL_RCC_GetSysClockFreq+0xfc>)
 800227a:	f7fd ff41 	bl	8000100 <__udivsi3>
 800227e:	0003      	movs	r3, r0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	e05d      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002284:	4b31      	ldr	r3, [pc, #196]	; (800234c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2238      	movs	r2, #56	; 0x38
 800228a:	4013      	ands	r3, r2
 800228c:	2b08      	cmp	r3, #8
 800228e:	d102      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_RCC_GetSysClockFreq+0x100>)
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e054      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2238      	movs	r2, #56	; 0x38
 800229c:	4013      	ands	r3, r2
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d138      	bne.n	8002314 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2203      	movs	r2, #3
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	2207      	movs	r2, #7
 80022b4:	4013      	ands	r3, r2
 80022b6:	3301      	adds	r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d10d      	bne.n	80022dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	4824      	ldr	r0, [pc, #144]	; (8002354 <HAL_RCC_GetSysClockFreq+0x100>)
 80022c4:	f7fd ff1c 	bl	8000100 <__udivsi3>
 80022c8:	0003      	movs	r3, r0
 80022ca:	0019      	movs	r1, r3
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	227f      	movs	r2, #127	; 0x7f
 80022d4:	4013      	ands	r3, r2
 80022d6:	434b      	muls	r3, r1
 80022d8:	617b      	str	r3, [r7, #20]
        break;
 80022da:	e00d      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	481c      	ldr	r0, [pc, #112]	; (8002350 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022e0:	f7fd ff0e 	bl	8000100 <__udivsi3>
 80022e4:	0003      	movs	r3, r0
 80022e6:	0019      	movs	r1, r3
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	227f      	movs	r2, #127	; 0x7f
 80022f0:	4013      	ands	r3, r2
 80022f2:	434b      	muls	r3, r1
 80022f4:	617b      	str	r3, [r7, #20]
        break;
 80022f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	0f5b      	lsrs	r3, r3, #29
 80022fe:	2207      	movs	r2, #7
 8002300:	4013      	ands	r3, r2
 8002302:	3301      	adds	r3, #1
 8002304:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	6978      	ldr	r0, [r7, #20]
 800230a:	f7fd fef9 	bl	8000100 <__udivsi3>
 800230e:	0003      	movs	r3, r0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	e015      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2238      	movs	r2, #56	; 0x38
 800231a:	4013      	ands	r3, r2
 800231c:	2b20      	cmp	r3, #32
 800231e:	d103      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_RCC_GetSysClockFreq+0xf8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2238      	movs	r2, #56	; 0x38
 800232e:	4013      	ands	r3, r2
 8002330:	2b18      	cmp	r3, #24
 8002332:	d103      	bne.n	800233c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002334:	23fa      	movs	r3, #250	; 0xfa
 8002336:	01db      	lsls	r3, r3, #7
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	e001      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002340:	693b      	ldr	r3, [r7, #16]
}
 8002342:	0018      	movs	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	b006      	add	sp, #24
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	40021000 	.word	0x40021000
 8002350:	00f42400 	.word	0x00f42400
 8002354:	007a1200 	.word	0x007a1200

08002358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e04a      	b.n	8002400 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	223d      	movs	r2, #61	; 0x3d
 800236e:	5c9b      	ldrb	r3, [r3, r2]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d107      	bne.n	8002386 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	223c      	movs	r2, #60	; 0x3c
 800237a:	2100      	movs	r1, #0
 800237c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f7fe f965 	bl	8000650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	223d      	movs	r2, #61	; 0x3d
 800238a:	2102      	movs	r1, #2
 800238c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	0019      	movs	r1, r3
 8002398:	0010      	movs	r0, r2
 800239a:	f000 fb4f 	bl	8002a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2248      	movs	r2, #72	; 0x48
 80023a2:	2101      	movs	r1, #1
 80023a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	223e      	movs	r2, #62	; 0x3e
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	223f      	movs	r2, #63	; 0x3f
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2240      	movs	r2, #64	; 0x40
 80023ba:	2101      	movs	r1, #1
 80023bc:	5499      	strb	r1, [r3, r2]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2241      	movs	r2, #65	; 0x41
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2242      	movs	r2, #66	; 0x42
 80023ca:	2101      	movs	r1, #1
 80023cc:	5499      	strb	r1, [r3, r2]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2243      	movs	r2, #67	; 0x43
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2244      	movs	r2, #68	; 0x44
 80023da:	2101      	movs	r1, #1
 80023dc:	5499      	strb	r1, [r3, r2]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2245      	movs	r2, #69	; 0x45
 80023e2:	2101      	movs	r1, #1
 80023e4:	5499      	strb	r1, [r3, r2]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2246      	movs	r2, #70	; 0x46
 80023ea:	2101      	movs	r1, #1
 80023ec:	5499      	strb	r1, [r3, r2]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2247      	movs	r2, #71	; 0x47
 80023f2:	2101      	movs	r1, #1
 80023f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	223d      	movs	r2, #61	; 0x3d
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e04a      	b.n	80024b0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	223d      	movs	r2, #61	; 0x3d
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	223c      	movs	r2, #60	; 0x3c
 800242a:	2100      	movs	r1, #0
 800242c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	0018      	movs	r0, r3
 8002432:	f000 f841 	bl	80024b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	223d      	movs	r2, #61	; 0x3d
 800243a:	2102      	movs	r1, #2
 800243c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	0019      	movs	r1, r3
 8002448:	0010      	movs	r0, r2
 800244a:	f000 faf7 	bl	8002a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2248      	movs	r2, #72	; 0x48
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	223e      	movs	r2, #62	; 0x3e
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	223f      	movs	r2, #63	; 0x3f
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2241      	movs	r2, #65	; 0x41
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2242      	movs	r2, #66	; 0x42
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2243      	movs	r2, #67	; 0x43
 8002482:	2101      	movs	r1, #1
 8002484:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2244      	movs	r2, #68	; 0x44
 800248a:	2101      	movs	r1, #1
 800248c:	5499      	strb	r1, [r3, r2]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2245      	movs	r2, #69	; 0x45
 8002492:	2101      	movs	r1, #1
 8002494:	5499      	strb	r1, [r3, r2]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2246      	movs	r2, #70	; 0x46
 800249a:	2101      	movs	r1, #1
 800249c:	5499      	strb	r1, [r3, r2]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2247      	movs	r2, #71	; 0x47
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	223d      	movs	r2, #61	; 0x3d
 80024aa:	2101      	movs	r1, #1
 80024ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d108      	bne.n	80024ea <HAL_TIM_PWM_Start+0x22>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	223e      	movs	r2, #62	; 0x3e
 80024dc:	5c9b      	ldrb	r3, [r3, r2]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	1e5a      	subs	r2, r3, #1
 80024e4:	4193      	sbcs	r3, r2
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	e037      	b.n	800255a <HAL_TIM_PWM_Start+0x92>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d108      	bne.n	8002502 <HAL_TIM_PWM_Start+0x3a>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	223f      	movs	r2, #63	; 0x3f
 80024f4:	5c9b      	ldrb	r3, [r3, r2]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	1e5a      	subs	r2, r3, #1
 80024fc:	4193      	sbcs	r3, r2
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	e02b      	b.n	800255a <HAL_TIM_PWM_Start+0x92>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d108      	bne.n	800251a <HAL_TIM_PWM_Start+0x52>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	5c9b      	ldrb	r3, [r3, r2]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	1e5a      	subs	r2, r3, #1
 8002514:	4193      	sbcs	r3, r2
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e01f      	b.n	800255a <HAL_TIM_PWM_Start+0x92>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d108      	bne.n	8002532 <HAL_TIM_PWM_Start+0x6a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2241      	movs	r2, #65	; 0x41
 8002524:	5c9b      	ldrb	r3, [r3, r2]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	4193      	sbcs	r3, r2
 800252e:	b2db      	uxtb	r3, r3
 8002530:	e013      	b.n	800255a <HAL_TIM_PWM_Start+0x92>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b10      	cmp	r3, #16
 8002536:	d108      	bne.n	800254a <HAL_TIM_PWM_Start+0x82>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2242      	movs	r2, #66	; 0x42
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	1e5a      	subs	r2, r3, #1
 8002544:	4193      	sbcs	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	e007      	b.n	800255a <HAL_TIM_PWM_Start+0x92>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2243      	movs	r2, #67	; 0x43
 800254e:	5c9b      	ldrb	r3, [r3, r2]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	1e5a      	subs	r2, r3, #1
 8002556:	4193      	sbcs	r3, r2
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e085      	b.n	800266e <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d104      	bne.n	8002572 <HAL_TIM_PWM_Start+0xaa>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	223e      	movs	r2, #62	; 0x3e
 800256c:	2102      	movs	r1, #2
 800256e:	5499      	strb	r1, [r3, r2]
 8002570:	e023      	b.n	80025ba <HAL_TIM_PWM_Start+0xf2>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d104      	bne.n	8002582 <HAL_TIM_PWM_Start+0xba>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	223f      	movs	r2, #63	; 0x3f
 800257c:	2102      	movs	r1, #2
 800257e:	5499      	strb	r1, [r3, r2]
 8002580:	e01b      	b.n	80025ba <HAL_TIM_PWM_Start+0xf2>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d104      	bne.n	8002592 <HAL_TIM_PWM_Start+0xca>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	2102      	movs	r1, #2
 800258e:	5499      	strb	r1, [r3, r2]
 8002590:	e013      	b.n	80025ba <HAL_TIM_PWM_Start+0xf2>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	d104      	bne.n	80025a2 <HAL_TIM_PWM_Start+0xda>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2241      	movs	r2, #65	; 0x41
 800259c:	2102      	movs	r1, #2
 800259e:	5499      	strb	r1, [r3, r2]
 80025a0:	e00b      	b.n	80025ba <HAL_TIM_PWM_Start+0xf2>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_PWM_Start+0xea>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2242      	movs	r2, #66	; 0x42
 80025ac:	2102      	movs	r1, #2
 80025ae:	5499      	strb	r1, [r3, r2]
 80025b0:	e003      	b.n	80025ba <HAL_TIM_PWM_Start+0xf2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2243      	movs	r2, #67	; 0x43
 80025b6:	2102      	movs	r1, #2
 80025b8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6839      	ldr	r1, [r7, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 fe10 	bl	80031e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a2a      	ldr	r2, [pc, #168]	; (8002678 <HAL_TIM_PWM_Start+0x1b0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00e      	beq.n	80025f0 <HAL_TIM_PWM_Start+0x128>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a29      	ldr	r2, [pc, #164]	; (800267c <HAL_TIM_PWM_Start+0x1b4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d009      	beq.n	80025f0 <HAL_TIM_PWM_Start+0x128>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a27      	ldr	r2, [pc, #156]	; (8002680 <HAL_TIM_PWM_Start+0x1b8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <HAL_TIM_PWM_Start+0x128>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a26      	ldr	r2, [pc, #152]	; (8002684 <HAL_TIM_PWM_Start+0x1bc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_TIM_PWM_Start+0x12c>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_TIM_PWM_Start+0x12e>
 80025f4:	2300      	movs	r3, #0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	0209      	lsls	r1, r1, #8
 8002608:	430a      	orrs	r2, r1
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a19      	ldr	r2, [pc, #100]	; (8002678 <HAL_TIM_PWM_Start+0x1b0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_TIM_PWM_Start+0x162>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <HAL_TIM_PWM_Start+0x1c0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_TIM_PWM_Start+0x162>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a15      	ldr	r2, [pc, #84]	; (800267c <HAL_TIM_PWM_Start+0x1b4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d116      	bne.n	8002658 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a16      	ldr	r2, [pc, #88]	; (800268c <HAL_TIM_PWM_Start+0x1c4>)
 8002632:	4013      	ands	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b06      	cmp	r3, #6
 800263a:	d016      	beq.n	800266a <HAL_TIM_PWM_Start+0x1a2>
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	025b      	lsls	r3, r3, #9
 8002642:	429a      	cmp	r2, r3
 8002644:	d011      	beq.n	800266a <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002656:	e008      	b.n	800266a <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2101      	movs	r1, #1
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e000      	b.n	800266c <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b004      	add	sp, #16
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40014000 	.word	0x40014000
 8002680:	40014400 	.word	0x40014400
 8002684:	40014800 	.word	0x40014800
 8002688:	40000400 	.word	0x40000400
 800268c:	00010007 	.word	0x00010007

08002690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	2317      	movs	r3, #23
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	223c      	movs	r2, #60	; 0x3c
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0e5      	b.n	800287e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	223c      	movs	r2, #60	; 0x3c
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b14      	cmp	r3, #20
 80026be:	d900      	bls.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80026c0:	e0d1      	b.n	8002866 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	009a      	lsls	r2, r3, #2
 80026c6:	4b70      	ldr	r3, [pc, #448]	; (8002888 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80026c8:	18d3      	adds	r3, r2, r3
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	0011      	movs	r1, r2
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 fa26 	bl	8002b28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2108      	movs	r1, #8
 80026e8:	430a      	orrs	r2, r1
 80026ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2104      	movs	r1, #4
 80026f8:	438a      	bics	r2, r1
 80026fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6999      	ldr	r1, [r3, #24]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	619a      	str	r2, [r3, #24]
      break;
 800270e:	e0af      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	0011      	movs	r1, r2
 8002718:	0018      	movs	r0, r3
 800271a:	f000 fa8f 	bl	8002c3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699a      	ldr	r2, [r3, #24]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2180      	movs	r1, #128	; 0x80
 800272a:	0109      	lsls	r1, r1, #4
 800272c:	430a      	orrs	r2, r1
 800272e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4954      	ldr	r1, [pc, #336]	; (800288c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800273c:	400a      	ands	r2, r1
 800273e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6999      	ldr	r1, [r3, #24]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	021a      	lsls	r2, r3, #8
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	619a      	str	r2, [r3, #24]
      break;
 8002754:	e08c      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f000 faf0 	bl	8002d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2108      	movs	r1, #8
 8002770:	430a      	orrs	r2, r1
 8002772:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2104      	movs	r1, #4
 8002780:	438a      	bics	r2, r1
 8002782:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69d9      	ldr	r1, [r3, #28]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	61da      	str	r2, [r3, #28]
      break;
 8002796:	e06b      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	0011      	movs	r1, r2
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 fb57 	bl	8002e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0109      	lsls	r1, r1, #4
 80027b4:	430a      	orrs	r2, r1
 80027b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4932      	ldr	r1, [pc, #200]	; (800288c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69d9      	ldr	r1, [r3, #28]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	021a      	lsls	r2, r3, #8
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	61da      	str	r2, [r3, #28]
      break;
 80027dc:	e048      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	0011      	movs	r1, r2
 80027e6:	0018      	movs	r0, r3
 80027e8:	f000 fb9e 	bl	8002f28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2108      	movs	r1, #8
 80027f8:	430a      	orrs	r2, r1
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2104      	movs	r1, #4
 8002808:	438a      	bics	r2, r1
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800281e:	e027      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f000 fbdd 	bl	8002fe8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	0109      	lsls	r1, r1, #4
 800283c:	430a      	orrs	r2, r1
 800283e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4910      	ldr	r1, [pc, #64]	; (800288c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800284c:	400a      	ands	r2, r1
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	021a      	lsls	r2, r3, #8
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002864:	e004      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002866:	2317      	movs	r3, #23
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
      break;
 800286e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	223c      	movs	r2, #60	; 0x3c
 8002874:	2100      	movs	r1, #0
 8002876:	5499      	strb	r1, [r3, r2]

  return status;
 8002878:	2317      	movs	r3, #23
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	781b      	ldrb	r3, [r3, #0]
}
 800287e:	0018      	movs	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	b006      	add	sp, #24
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	080033b0 	.word	0x080033b0
 800288c:	fffffbff 	.word	0xfffffbff

08002890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	230f      	movs	r3, #15
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	223c      	movs	r2, #60	; 0x3c
 80028a6:	5c9b      	ldrb	r3, [r3, r2]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_TIM_ConfigClockSource+0x20>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0bc      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0x19a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	223c      	movs	r2, #60	; 0x3c
 80028b4:	2101      	movs	r1, #1
 80028b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	223d      	movs	r2, #61	; 0x3d
 80028bc:	2102      	movs	r1, #2
 80028be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4a5a      	ldr	r2, [pc, #360]	; (8002a34 <HAL_TIM_ConfigClockSource+0x1a4>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4a59      	ldr	r2, [pc, #356]	; (8002a38 <HAL_TIM_ConfigClockSource+0x1a8>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	0192      	lsls	r2, r2, #6
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d040      	beq.n	800296e <HAL_TIM_ConfigClockSource+0xde>
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	0192      	lsls	r2, r2, #6
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d900      	bls.n	80028f6 <HAL_TIM_ConfigClockSource+0x66>
 80028f4:	e088      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x178>
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	0152      	lsls	r2, r2, #5
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d100      	bne.n	8002900 <HAL_TIM_ConfigClockSource+0x70>
 80028fe:	e088      	b.n	8002a12 <HAL_TIM_ConfigClockSource+0x182>
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	0152      	lsls	r2, r2, #5
 8002904:	4293      	cmp	r3, r2
 8002906:	d900      	bls.n	800290a <HAL_TIM_ConfigClockSource+0x7a>
 8002908:	e07e      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x178>
 800290a:	2b70      	cmp	r3, #112	; 0x70
 800290c:	d018      	beq.n	8002940 <HAL_TIM_ConfigClockSource+0xb0>
 800290e:	d900      	bls.n	8002912 <HAL_TIM_ConfigClockSource+0x82>
 8002910:	e07a      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x178>
 8002912:	2b60      	cmp	r3, #96	; 0x60
 8002914:	d04f      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x126>
 8002916:	d900      	bls.n	800291a <HAL_TIM_ConfigClockSource+0x8a>
 8002918:	e076      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x178>
 800291a:	2b50      	cmp	r3, #80	; 0x50
 800291c:	d03b      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x106>
 800291e:	d900      	bls.n	8002922 <HAL_TIM_ConfigClockSource+0x92>
 8002920:	e072      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x178>
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d057      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x146>
 8002926:	d900      	bls.n	800292a <HAL_TIM_ConfigClockSource+0x9a>
 8002928:	e06e      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x178>
 800292a:	2b30      	cmp	r3, #48	; 0x30
 800292c:	d063      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x166>
 800292e:	d86b      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x178>
 8002930:	2b20      	cmp	r3, #32
 8002932:	d060      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x166>
 8002934:	d868      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x178>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d05d      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x166>
 800293a:	2b10      	cmp	r3, #16
 800293c:	d05b      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x166>
 800293e:	e063      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6899      	ldr	r1, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f000 fc2a 	bl	80031a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2277      	movs	r2, #119	; 0x77
 8002960:	4313      	orrs	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	609a      	str	r2, [r3, #8]
      break;
 800296c:	e052      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6899      	ldr	r1, [r3, #8]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f000 fc13 	bl	80031a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	01c9      	lsls	r1, r1, #7
 8002990:	430a      	orrs	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
      break;
 8002994:	e03e      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	001a      	movs	r2, r3
 80029a4:	f000 fb84 	bl	80030b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2150      	movs	r1, #80	; 0x50
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 fbde 	bl	8003170 <TIM_ITRx_SetConfig>
      break;
 80029b4:	e02e      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	001a      	movs	r2, r3
 80029c4:	f000 fba2 	bl	800310c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2160      	movs	r1, #96	; 0x60
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 fbce 	bl	8003170 <TIM_ITRx_SetConfig>
      break;
 80029d4:	e01e      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	001a      	movs	r2, r3
 80029e4:	f000 fb64 	bl	80030b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2140      	movs	r1, #64	; 0x40
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 fbbe 	bl	8003170 <TIM_ITRx_SetConfig>
      break;
 80029f4:	e00e      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0019      	movs	r1, r3
 8002a00:	0010      	movs	r0, r2
 8002a02:	f000 fbb5 	bl	8003170 <TIM_ITRx_SetConfig>
      break;
 8002a06:	e005      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a08:	230f      	movs	r3, #15
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
      break;
 8002a10:	e000      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a12:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	223d      	movs	r2, #61	; 0x3d
 8002a18:	2101      	movs	r1, #1
 8002a1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	223c      	movs	r2, #60	; 0x3c
 8002a20:	2100      	movs	r1, #0
 8002a22:	5499      	strb	r1, [r3, r2]

  return status;
 8002a24:	230f      	movs	r3, #15
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	781b      	ldrb	r3, [r3, #0]
}
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b004      	add	sp, #16
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	ffceff88 	.word	0xffceff88
 8002a38:	ffff00ff 	.word	0xffff00ff

08002a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a2f      	ldr	r2, [pc, #188]	; (8002b0c <TIM_Base_SetConfig+0xd0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d003      	beq.n	8002a5c <TIM_Base_SetConfig+0x20>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a2e      	ldr	r2, [pc, #184]	; (8002b10 <TIM_Base_SetConfig+0xd4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d108      	bne.n	8002a6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2270      	movs	r2, #112	; 0x70
 8002a60:	4393      	bics	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <TIM_Base_SetConfig+0xd0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <TIM_Base_SetConfig+0x62>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <TIM_Base_SetConfig+0xd4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00f      	beq.n	8002a9e <TIM_Base_SetConfig+0x62>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <TIM_Base_SetConfig+0xd8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00b      	beq.n	8002a9e <TIM_Base_SetConfig+0x62>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <TIM_Base_SetConfig+0xdc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <TIM_Base_SetConfig+0x62>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a22      	ldr	r2, [pc, #136]	; (8002b1c <TIM_Base_SetConfig+0xe0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d003      	beq.n	8002a9e <TIM_Base_SetConfig+0x62>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a21      	ldr	r2, [pc, #132]	; (8002b20 <TIM_Base_SetConfig+0xe4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d108      	bne.n	8002ab0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a20      	ldr	r2, [pc, #128]	; (8002b24 <TIM_Base_SetConfig+0xe8>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <TIM_Base_SetConfig+0xd0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00b      	beq.n	8002af6 <TIM_Base_SetConfig+0xba>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <TIM_Base_SetConfig+0xdc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <TIM_Base_SetConfig+0xba>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a0c      	ldr	r2, [pc, #48]	; (8002b1c <TIM_Base_SetConfig+0xe0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d003      	beq.n	8002af6 <TIM_Base_SetConfig+0xba>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <TIM_Base_SetConfig+0xe4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d103      	bne.n	8002afe <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	615a      	str	r2, [r3, #20]
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b004      	add	sp, #16
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40012c00 	.word	0x40012c00
 8002b10:	40000400 	.word	0x40000400
 8002b14:	40002000 	.word	0x40002000
 8002b18:	40014000 	.word	0x40014000
 8002b1c:	40014400 	.word	0x40014400
 8002b20:	40014800 	.word	0x40014800
 8002b24:	fffffcff 	.word	0xfffffcff

08002b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	2201      	movs	r2, #1
 8002b38:	4393      	bics	r3, r2
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4a32      	ldr	r2, [pc, #200]	; (8002c20 <TIM_OC1_SetConfig+0xf8>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	4393      	bics	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	4393      	bics	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a28      	ldr	r2, [pc, #160]	; (8002c24 <TIM_OC1_SetConfig+0xfc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00b      	beq.n	8002b9e <TIM_OC1_SetConfig+0x76>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a27      	ldr	r2, [pc, #156]	; (8002c28 <TIM_OC1_SetConfig+0x100>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <TIM_OC1_SetConfig+0x76>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <TIM_OC1_SetConfig+0x104>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d003      	beq.n	8002b9e <TIM_OC1_SetConfig+0x76>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <TIM_OC1_SetConfig+0x108>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d10c      	bne.n	8002bb8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	4393      	bics	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <TIM_OC1_SetConfig+0xfc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00b      	beq.n	8002bd8 <TIM_OC1_SetConfig+0xb0>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <TIM_OC1_SetConfig+0x100>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <TIM_OC1_SetConfig+0xb0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <TIM_OC1_SetConfig+0x104>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d003      	beq.n	8002bd8 <TIM_OC1_SetConfig+0xb0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <TIM_OC1_SetConfig+0x108>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d111      	bne.n	8002bfc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <TIM_OC1_SetConfig+0x10c>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <TIM_OC1_SetConfig+0x110>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	621a      	str	r2, [r3, #32]
}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b006      	add	sp, #24
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	fffeff8f 	.word	0xfffeff8f
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40014000 	.word	0x40014000
 8002c2c:	40014400 	.word	0x40014400
 8002c30:	40014800 	.word	0x40014800
 8002c34:	fffffeff 	.word	0xfffffeff
 8002c38:	fffffdff 	.word	0xfffffdff

08002c3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	4393      	bics	r3, r2
 8002c4e:	001a      	movs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4a2e      	ldr	r2, [pc, #184]	; (8002d24 <TIM_OC2_SetConfig+0xe8>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a2d      	ldr	r2, [pc, #180]	; (8002d28 <TIM_OC2_SetConfig+0xec>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2220      	movs	r2, #32
 8002c86:	4393      	bics	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <TIM_OC2_SetConfig+0xf0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d10d      	bne.n	8002cba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	4393      	bics	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2240      	movs	r2, #64	; 0x40
 8002cb6:	4393      	bics	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a1b      	ldr	r2, [pc, #108]	; (8002d2c <TIM_OC2_SetConfig+0xf0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00b      	beq.n	8002cda <TIM_OC2_SetConfig+0x9e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <TIM_OC2_SetConfig+0xf4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <TIM_OC2_SetConfig+0x9e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a19      	ldr	r2, [pc, #100]	; (8002d34 <TIM_OC2_SetConfig+0xf8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d003      	beq.n	8002cda <TIM_OC2_SetConfig+0x9e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <TIM_OC2_SetConfig+0xfc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d113      	bne.n	8002d02 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <TIM_OC2_SetConfig+0x100>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <TIM_OC2_SetConfig+0x104>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	621a      	str	r2, [r3, #32]
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b006      	add	sp, #24
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	feff8fff 	.word	0xfeff8fff
 8002d28:	fffffcff 	.word	0xfffffcff
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	fffffbff 	.word	0xfffffbff
 8002d40:	fffff7ff 	.word	0xfffff7ff

08002d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a35      	ldr	r2, [pc, #212]	; (8002e28 <TIM_OC3_SetConfig+0xe4>)
 8002d54:	401a      	ands	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <TIM_OC3_SetConfig+0xe8>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2203      	movs	r2, #3
 8002d78:	4393      	bics	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	4a29      	ldr	r2, [pc, #164]	; (8002e30 <TIM_OC3_SetConfig+0xec>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a25      	ldr	r2, [pc, #148]	; (8002e34 <TIM_OC3_SetConfig+0xf0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10d      	bne.n	8002dbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	4a24      	ldr	r2, [pc, #144]	; (8002e38 <TIM_OC3_SetConfig+0xf4>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <TIM_OC3_SetConfig+0xf8>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <TIM_OC3_SetConfig+0xf0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00b      	beq.n	8002dde <TIM_OC3_SetConfig+0x9a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <TIM_OC3_SetConfig+0xfc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <TIM_OC3_SetConfig+0x9a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <TIM_OC3_SetConfig+0x100>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d003      	beq.n	8002dde <TIM_OC3_SetConfig+0x9a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <TIM_OC3_SetConfig+0x104>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d113      	bne.n	8002e06 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <TIM_OC3_SetConfig+0x108>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <TIM_OC3_SetConfig+0x10c>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	621a      	str	r2, [r3, #32]
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b006      	add	sp, #24
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	fffffeff 	.word	0xfffffeff
 8002e2c:	fffeff8f 	.word	0xfffeff8f
 8002e30:	fffffdff 	.word	0xfffffdff
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	fffff7ff 	.word	0xfffff7ff
 8002e3c:	fffffbff 	.word	0xfffffbff
 8002e40:	40014000 	.word	0x40014000
 8002e44:	40014400 	.word	0x40014400
 8002e48:	40014800 	.word	0x40014800
 8002e4c:	ffffefff 	.word	0xffffefff
 8002e50:	ffffdfff 	.word	0xffffdfff

08002e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <TIM_OC4_SetConfig+0xb0>)
 8002e64:	401a      	ands	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4a22      	ldr	r2, [pc, #136]	; (8002f08 <TIM_OC4_SetConfig+0xb4>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a21      	ldr	r2, [pc, #132]	; (8002f0c <TIM_OC4_SetConfig+0xb8>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <TIM_OC4_SetConfig+0xbc>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	031b      	lsls	r3, r3, #12
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <TIM_OC4_SetConfig+0xc0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <TIM_OC4_SetConfig+0x78>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <TIM_OC4_SetConfig+0xc4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d007      	beq.n	8002ecc <TIM_OC4_SetConfig+0x78>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <TIM_OC4_SetConfig+0xc8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_OC4_SetConfig+0x78>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <TIM_OC4_SetConfig+0xcc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d109      	bne.n	8002ee0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <TIM_OC4_SetConfig+0xd0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	019b      	lsls	r3, r3, #6
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	621a      	str	r2, [r3, #32]
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b006      	add	sp, #24
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	ffffefff 	.word	0xffffefff
 8002f08:	feff8fff 	.word	0xfeff8fff
 8002f0c:	fffffcff 	.word	0xfffffcff
 8002f10:	ffffdfff 	.word	0xffffdfff
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40014000 	.word	0x40014000
 8002f1c:	40014400 	.word	0x40014400
 8002f20:	40014800 	.word	0x40014800
 8002f24:	ffffbfff 	.word	0xffffbfff

08002f28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a25      	ldr	r2, [pc, #148]	; (8002fcc <TIM_OC5_SetConfig+0xa4>)
 8002f38:	401a      	ands	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <TIM_OC5_SetConfig+0xa8>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <TIM_OC5_SetConfig+0xac>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	041b      	lsls	r3, r3, #16
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <TIM_OC5_SetConfig+0xb0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_OC5_SetConfig+0x6e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <TIM_OC5_SetConfig+0xb4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_OC5_SetConfig+0x6e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a15      	ldr	r2, [pc, #84]	; (8002fe0 <TIM_OC5_SetConfig+0xb8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_OC5_SetConfig+0x6e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <TIM_OC5_SetConfig+0xbc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d109      	bne.n	8002faa <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	4a0c      	ldr	r2, [pc, #48]	; (8002fcc <TIM_OC5_SetConfig+0xa4>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	621a      	str	r2, [r3, #32]
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b006      	add	sp, #24
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	fffeffff 	.word	0xfffeffff
 8002fd0:	fffeff8f 	.word	0xfffeff8f
 8002fd4:	fffdffff 	.word	0xfffdffff
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40014000 	.word	0x40014000
 8002fe0:	40014400 	.word	0x40014400
 8002fe4:	40014800 	.word	0x40014800

08002fe8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4a26      	ldr	r2, [pc, #152]	; (8003090 <TIM_OC6_SetConfig+0xa8>)
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a20      	ldr	r2, [pc, #128]	; (8003094 <TIM_OC6_SetConfig+0xac>)
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <TIM_OC6_SetConfig+0xb0>)
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	051b      	lsls	r3, r3, #20
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a18      	ldr	r2, [pc, #96]	; (800309c <TIM_OC6_SetConfig+0xb4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00b      	beq.n	8003058 <TIM_OC6_SetConfig+0x70>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a17      	ldr	r2, [pc, #92]	; (80030a0 <TIM_OC6_SetConfig+0xb8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d007      	beq.n	8003058 <TIM_OC6_SetConfig+0x70>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <TIM_OC6_SetConfig+0xbc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_OC6_SetConfig+0x70>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <TIM_OC6_SetConfig+0xc0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d109      	bne.n	800306c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	4a14      	ldr	r2, [pc, #80]	; (80030ac <TIM_OC6_SetConfig+0xc4>)
 800305c:	4013      	ands	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b006      	add	sp, #24
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	ffefffff 	.word	0xffefffff
 8003094:	feff8fff 	.word	0xfeff8fff
 8003098:	ffdfffff 	.word	0xffdfffff
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40014000 	.word	0x40014000
 80030a4:	40014400 	.word	0x40014400
 80030a8:	40014800 	.word	0x40014800
 80030ac:	fffbffff 	.word	0xfffbffff

080030b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	2201      	movs	r2, #1
 80030c8:	4393      	bics	r3, r2
 80030ca:	001a      	movs	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	22f0      	movs	r2, #240	; 0xf0
 80030da:	4393      	bics	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	220a      	movs	r2, #10
 80030ec:	4393      	bics	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	621a      	str	r2, [r3, #32]
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b006      	add	sp, #24
 800310a:	bd80      	pop	{r7, pc}

0800310c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	2210      	movs	r2, #16
 800311e:	4393      	bics	r3, r2
 8003120:	001a      	movs	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <TIM_TI2_ConfigInputStage+0x60>)
 8003136:	4013      	ands	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	031b      	lsls	r3, r3, #12
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	22a0      	movs	r2, #160	; 0xa0
 8003148:	4393      	bics	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b006      	add	sp, #24
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	ffff0fff 	.word	0xffff0fff

08003170 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <TIM_ITRx_SetConfig+0x34>)
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	2207      	movs	r2, #7
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	609a      	str	r2, [r3, #8]
}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	ffcfff8f 	.word	0xffcfff8f

080031a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <TIM_ETR_SetConfig+0x3c>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	021a      	lsls	r2, r3, #8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	609a      	str	r2, [r3, #8]
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b006      	add	sp, #24
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	ffff00ff 	.word	0xffff00ff

080031e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	221f      	movs	r2, #31
 80031f8:	4013      	ands	r3, r2
 80031fa:	2201      	movs	r2, #1
 80031fc:	409a      	lsls	r2, r3
 80031fe:	0013      	movs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	43d2      	mvns	r2, r2
 800320a:	401a      	ands	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	211f      	movs	r1, #31
 8003218:	400b      	ands	r3, r1
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4099      	lsls	r1, r3
 800321e:	000b      	movs	r3, r1
 8003220:	431a      	orrs	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	621a      	str	r2, [r3, #32]
}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	46bd      	mov	sp, r7
 800322a:	b006      	add	sp, #24
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	223c      	movs	r2, #60	; 0x3c
 800323e:	5c9b      	ldrb	r3, [r3, r2]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003244:	2302      	movs	r3, #2
 8003246:	e04f      	b.n	80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	223c      	movs	r2, #60	; 0x3c
 800324c:	2101      	movs	r1, #1
 800324e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	223d      	movs	r2, #61	; 0x3d
 8003254:	2102      	movs	r1, #2
 8003256:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a20      	ldr	r2, [pc, #128]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003276:	4013      	ands	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2270      	movs	r2, #112	; 0x70
 8003288:	4393      	bics	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d009      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d004      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d10c      	bne.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	4393      	bics	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	223d      	movs	r2, #61	; 0x3d
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	223c      	movs	r2, #60	; 0x3c
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	ff0fffff 	.word	0xff0fffff
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40014000 	.word	0x40014000

08003300 <__libc_init_array>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	2600      	movs	r6, #0
 8003304:	4d0c      	ldr	r5, [pc, #48]	; (8003338 <__libc_init_array+0x38>)
 8003306:	4c0d      	ldr	r4, [pc, #52]	; (800333c <__libc_init_array+0x3c>)
 8003308:	1b64      	subs	r4, r4, r5
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	42a6      	cmp	r6, r4
 800330e:	d109      	bne.n	8003324 <__libc_init_array+0x24>
 8003310:	2600      	movs	r6, #0
 8003312:	f000 f821 	bl	8003358 <_init>
 8003316:	4d0a      	ldr	r5, [pc, #40]	; (8003340 <__libc_init_array+0x40>)
 8003318:	4c0a      	ldr	r4, [pc, #40]	; (8003344 <__libc_init_array+0x44>)
 800331a:	1b64      	subs	r4, r4, r5
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	42a6      	cmp	r6, r4
 8003320:	d105      	bne.n	800332e <__libc_init_array+0x2e>
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	00b3      	lsls	r3, r6, #2
 8003326:	58eb      	ldr	r3, [r5, r3]
 8003328:	4798      	blx	r3
 800332a:	3601      	adds	r6, #1
 800332c:	e7ee      	b.n	800330c <__libc_init_array+0xc>
 800332e:	00b3      	lsls	r3, r6, #2
 8003330:	58eb      	ldr	r3, [r5, r3]
 8003332:	4798      	blx	r3
 8003334:	3601      	adds	r6, #1
 8003336:	e7f2      	b.n	800331e <__libc_init_array+0x1e>
 8003338:	08003404 	.word	0x08003404
 800333c:	08003404 	.word	0x08003404
 8003340:	08003404 	.word	0x08003404
 8003344:	08003408 	.word	0x08003408

08003348 <memset>:
 8003348:	0003      	movs	r3, r0
 800334a:	1882      	adds	r2, r0, r2
 800334c:	4293      	cmp	r3, r2
 800334e:	d100      	bne.n	8003352 <memset+0xa>
 8003350:	4770      	bx	lr
 8003352:	7019      	strb	r1, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	e7f9      	b.n	800334c <memset+0x4>

08003358 <_init>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr

08003364 <_fini>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336a:	bc08      	pop	{r3}
 800336c:	469e      	mov	lr, r3
 800336e:	4770      	bx	lr

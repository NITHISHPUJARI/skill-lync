
I2C_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004514  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800468c  0800468c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800468c  0800468c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800468c  0800468c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  080046a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080046a0  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c65  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001817  00000000  00000000  00027c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  000294b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  00029c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000148ed  00000000  00000000  0002a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a595  00000000  00000000  0003ec35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008044e  00000000  00000000  000491ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001be0  00000000  00000000  000c9668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080045b4 	.word	0x080045b4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080045b4 	.word	0x080045b4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_dadd>:
 8000218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021a:	464f      	mov	r7, r9
 800021c:	4646      	mov	r6, r8
 800021e:	46d6      	mov	lr, sl
 8000220:	000d      	movs	r5, r1
 8000222:	0004      	movs	r4, r0
 8000224:	b5c0      	push	{r6, r7, lr}
 8000226:	001f      	movs	r7, r3
 8000228:	0011      	movs	r1, r2
 800022a:	0328      	lsls	r0, r5, #12
 800022c:	0f62      	lsrs	r2, r4, #29
 800022e:	0a40      	lsrs	r0, r0, #9
 8000230:	4310      	orrs	r0, r2
 8000232:	007a      	lsls	r2, r7, #1
 8000234:	0d52      	lsrs	r2, r2, #21
 8000236:	00e3      	lsls	r3, r4, #3
 8000238:	033c      	lsls	r4, r7, #12
 800023a:	4691      	mov	r9, r2
 800023c:	0a64      	lsrs	r4, r4, #9
 800023e:	0ffa      	lsrs	r2, r7, #31
 8000240:	0f4f      	lsrs	r7, r1, #29
 8000242:	006e      	lsls	r6, r5, #1
 8000244:	4327      	orrs	r7, r4
 8000246:	4692      	mov	sl, r2
 8000248:	46b8      	mov	r8, r7
 800024a:	0d76      	lsrs	r6, r6, #21
 800024c:	0fed      	lsrs	r5, r5, #31
 800024e:	00c9      	lsls	r1, r1, #3
 8000250:	4295      	cmp	r5, r2
 8000252:	d100      	bne.n	8000256 <__aeabi_dadd+0x3e>
 8000254:	e099      	b.n	800038a <__aeabi_dadd+0x172>
 8000256:	464c      	mov	r4, r9
 8000258:	1b34      	subs	r4, r6, r4
 800025a:	46a4      	mov	ip, r4
 800025c:	2c00      	cmp	r4, #0
 800025e:	dc00      	bgt.n	8000262 <__aeabi_dadd+0x4a>
 8000260:	e07c      	b.n	800035c <__aeabi_dadd+0x144>
 8000262:	464a      	mov	r2, r9
 8000264:	2a00      	cmp	r2, #0
 8000266:	d100      	bne.n	800026a <__aeabi_dadd+0x52>
 8000268:	e0b8      	b.n	80003dc <__aeabi_dadd+0x1c4>
 800026a:	4ac5      	ldr	r2, [pc, #788]	; (8000580 <__aeabi_dadd+0x368>)
 800026c:	4296      	cmp	r6, r2
 800026e:	d100      	bne.n	8000272 <__aeabi_dadd+0x5a>
 8000270:	e11c      	b.n	80004ac <__aeabi_dadd+0x294>
 8000272:	2280      	movs	r2, #128	; 0x80
 8000274:	003c      	movs	r4, r7
 8000276:	0412      	lsls	r2, r2, #16
 8000278:	4314      	orrs	r4, r2
 800027a:	46a0      	mov	r8, r4
 800027c:	4662      	mov	r2, ip
 800027e:	2a38      	cmp	r2, #56	; 0x38
 8000280:	dd00      	ble.n	8000284 <__aeabi_dadd+0x6c>
 8000282:	e161      	b.n	8000548 <__aeabi_dadd+0x330>
 8000284:	2a1f      	cmp	r2, #31
 8000286:	dd00      	ble.n	800028a <__aeabi_dadd+0x72>
 8000288:	e1cc      	b.n	8000624 <__aeabi_dadd+0x40c>
 800028a:	4664      	mov	r4, ip
 800028c:	2220      	movs	r2, #32
 800028e:	1b12      	subs	r2, r2, r4
 8000290:	4644      	mov	r4, r8
 8000292:	4094      	lsls	r4, r2
 8000294:	000f      	movs	r7, r1
 8000296:	46a1      	mov	r9, r4
 8000298:	4664      	mov	r4, ip
 800029a:	4091      	lsls	r1, r2
 800029c:	40e7      	lsrs	r7, r4
 800029e:	464c      	mov	r4, r9
 80002a0:	1e4a      	subs	r2, r1, #1
 80002a2:	4191      	sbcs	r1, r2
 80002a4:	433c      	orrs	r4, r7
 80002a6:	4642      	mov	r2, r8
 80002a8:	4321      	orrs	r1, r4
 80002aa:	4664      	mov	r4, ip
 80002ac:	40e2      	lsrs	r2, r4
 80002ae:	1a80      	subs	r0, r0, r2
 80002b0:	1a5c      	subs	r4, r3, r1
 80002b2:	42a3      	cmp	r3, r4
 80002b4:	419b      	sbcs	r3, r3
 80002b6:	425f      	negs	r7, r3
 80002b8:	1bc7      	subs	r7, r0, r7
 80002ba:	023b      	lsls	r3, r7, #8
 80002bc:	d400      	bmi.n	80002c0 <__aeabi_dadd+0xa8>
 80002be:	e0d0      	b.n	8000462 <__aeabi_dadd+0x24a>
 80002c0:	027f      	lsls	r7, r7, #9
 80002c2:	0a7f      	lsrs	r7, r7, #9
 80002c4:	2f00      	cmp	r7, #0
 80002c6:	d100      	bne.n	80002ca <__aeabi_dadd+0xb2>
 80002c8:	e0ff      	b.n	80004ca <__aeabi_dadd+0x2b2>
 80002ca:	0038      	movs	r0, r7
 80002cc:	f001 fce8 	bl	8001ca0 <__clzsi2>
 80002d0:	0001      	movs	r1, r0
 80002d2:	3908      	subs	r1, #8
 80002d4:	2320      	movs	r3, #32
 80002d6:	0022      	movs	r2, r4
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	408f      	lsls	r7, r1
 80002dc:	40da      	lsrs	r2, r3
 80002de:	408c      	lsls	r4, r1
 80002e0:	4317      	orrs	r7, r2
 80002e2:	42b1      	cmp	r1, r6
 80002e4:	da00      	bge.n	80002e8 <__aeabi_dadd+0xd0>
 80002e6:	e0ff      	b.n	80004e8 <__aeabi_dadd+0x2d0>
 80002e8:	1b89      	subs	r1, r1, r6
 80002ea:	1c4b      	adds	r3, r1, #1
 80002ec:	2b1f      	cmp	r3, #31
 80002ee:	dd00      	ble.n	80002f2 <__aeabi_dadd+0xda>
 80002f0:	e0a8      	b.n	8000444 <__aeabi_dadd+0x22c>
 80002f2:	2220      	movs	r2, #32
 80002f4:	0039      	movs	r1, r7
 80002f6:	1ad2      	subs	r2, r2, r3
 80002f8:	0020      	movs	r0, r4
 80002fa:	4094      	lsls	r4, r2
 80002fc:	4091      	lsls	r1, r2
 80002fe:	40d8      	lsrs	r0, r3
 8000300:	1e62      	subs	r2, r4, #1
 8000302:	4194      	sbcs	r4, r2
 8000304:	40df      	lsrs	r7, r3
 8000306:	2600      	movs	r6, #0
 8000308:	4301      	orrs	r1, r0
 800030a:	430c      	orrs	r4, r1
 800030c:	0763      	lsls	r3, r4, #29
 800030e:	d009      	beq.n	8000324 <__aeabi_dadd+0x10c>
 8000310:	230f      	movs	r3, #15
 8000312:	4023      	ands	r3, r4
 8000314:	2b04      	cmp	r3, #4
 8000316:	d005      	beq.n	8000324 <__aeabi_dadd+0x10c>
 8000318:	1d23      	adds	r3, r4, #4
 800031a:	42a3      	cmp	r3, r4
 800031c:	41a4      	sbcs	r4, r4
 800031e:	4264      	negs	r4, r4
 8000320:	193f      	adds	r7, r7, r4
 8000322:	001c      	movs	r4, r3
 8000324:	023b      	lsls	r3, r7, #8
 8000326:	d400      	bmi.n	800032a <__aeabi_dadd+0x112>
 8000328:	e09e      	b.n	8000468 <__aeabi_dadd+0x250>
 800032a:	4b95      	ldr	r3, [pc, #596]	; (8000580 <__aeabi_dadd+0x368>)
 800032c:	3601      	adds	r6, #1
 800032e:	429e      	cmp	r6, r3
 8000330:	d100      	bne.n	8000334 <__aeabi_dadd+0x11c>
 8000332:	e0b7      	b.n	80004a4 <__aeabi_dadd+0x28c>
 8000334:	4a93      	ldr	r2, [pc, #588]	; (8000584 <__aeabi_dadd+0x36c>)
 8000336:	08e4      	lsrs	r4, r4, #3
 8000338:	4017      	ands	r7, r2
 800033a:	077b      	lsls	r3, r7, #29
 800033c:	0571      	lsls	r1, r6, #21
 800033e:	027f      	lsls	r7, r7, #9
 8000340:	4323      	orrs	r3, r4
 8000342:	0b3f      	lsrs	r7, r7, #12
 8000344:	0d4a      	lsrs	r2, r1, #21
 8000346:	0512      	lsls	r2, r2, #20
 8000348:	433a      	orrs	r2, r7
 800034a:	07ed      	lsls	r5, r5, #31
 800034c:	432a      	orrs	r2, r5
 800034e:	0018      	movs	r0, r3
 8000350:	0011      	movs	r1, r2
 8000352:	bce0      	pop	{r5, r6, r7}
 8000354:	46ba      	mov	sl, r7
 8000356:	46b1      	mov	r9, r6
 8000358:	46a8      	mov	r8, r5
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	2c00      	cmp	r4, #0
 800035e:	d04b      	beq.n	80003f8 <__aeabi_dadd+0x1e0>
 8000360:	464c      	mov	r4, r9
 8000362:	1ba4      	subs	r4, r4, r6
 8000364:	46a4      	mov	ip, r4
 8000366:	2e00      	cmp	r6, #0
 8000368:	d000      	beq.n	800036c <__aeabi_dadd+0x154>
 800036a:	e123      	b.n	80005b4 <__aeabi_dadd+0x39c>
 800036c:	0004      	movs	r4, r0
 800036e:	431c      	orrs	r4, r3
 8000370:	d100      	bne.n	8000374 <__aeabi_dadd+0x15c>
 8000372:	e1af      	b.n	80006d4 <__aeabi_dadd+0x4bc>
 8000374:	4662      	mov	r2, ip
 8000376:	1e54      	subs	r4, r2, #1
 8000378:	2a01      	cmp	r2, #1
 800037a:	d100      	bne.n	800037e <__aeabi_dadd+0x166>
 800037c:	e215      	b.n	80007aa <__aeabi_dadd+0x592>
 800037e:	4d80      	ldr	r5, [pc, #512]	; (8000580 <__aeabi_dadd+0x368>)
 8000380:	45ac      	cmp	ip, r5
 8000382:	d100      	bne.n	8000386 <__aeabi_dadd+0x16e>
 8000384:	e1c8      	b.n	8000718 <__aeabi_dadd+0x500>
 8000386:	46a4      	mov	ip, r4
 8000388:	e11b      	b.n	80005c2 <__aeabi_dadd+0x3aa>
 800038a:	464a      	mov	r2, r9
 800038c:	1ab2      	subs	r2, r6, r2
 800038e:	4694      	mov	ip, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	dc00      	bgt.n	8000396 <__aeabi_dadd+0x17e>
 8000394:	e0ac      	b.n	80004f0 <__aeabi_dadd+0x2d8>
 8000396:	464a      	mov	r2, r9
 8000398:	2a00      	cmp	r2, #0
 800039a:	d043      	beq.n	8000424 <__aeabi_dadd+0x20c>
 800039c:	4a78      	ldr	r2, [pc, #480]	; (8000580 <__aeabi_dadd+0x368>)
 800039e:	4296      	cmp	r6, r2
 80003a0:	d100      	bne.n	80003a4 <__aeabi_dadd+0x18c>
 80003a2:	e1af      	b.n	8000704 <__aeabi_dadd+0x4ec>
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	003c      	movs	r4, r7
 80003a8:	0412      	lsls	r2, r2, #16
 80003aa:	4314      	orrs	r4, r2
 80003ac:	46a0      	mov	r8, r4
 80003ae:	4662      	mov	r2, ip
 80003b0:	2a38      	cmp	r2, #56	; 0x38
 80003b2:	dc67      	bgt.n	8000484 <__aeabi_dadd+0x26c>
 80003b4:	2a1f      	cmp	r2, #31
 80003b6:	dc00      	bgt.n	80003ba <__aeabi_dadd+0x1a2>
 80003b8:	e15f      	b.n	800067a <__aeabi_dadd+0x462>
 80003ba:	4647      	mov	r7, r8
 80003bc:	3a20      	subs	r2, #32
 80003be:	40d7      	lsrs	r7, r2
 80003c0:	4662      	mov	r2, ip
 80003c2:	2a20      	cmp	r2, #32
 80003c4:	d005      	beq.n	80003d2 <__aeabi_dadd+0x1ba>
 80003c6:	4664      	mov	r4, ip
 80003c8:	2240      	movs	r2, #64	; 0x40
 80003ca:	1b12      	subs	r2, r2, r4
 80003cc:	4644      	mov	r4, r8
 80003ce:	4094      	lsls	r4, r2
 80003d0:	4321      	orrs	r1, r4
 80003d2:	1e4a      	subs	r2, r1, #1
 80003d4:	4191      	sbcs	r1, r2
 80003d6:	000c      	movs	r4, r1
 80003d8:	433c      	orrs	r4, r7
 80003da:	e057      	b.n	800048c <__aeabi_dadd+0x274>
 80003dc:	003a      	movs	r2, r7
 80003de:	430a      	orrs	r2, r1
 80003e0:	d100      	bne.n	80003e4 <__aeabi_dadd+0x1cc>
 80003e2:	e105      	b.n	80005f0 <__aeabi_dadd+0x3d8>
 80003e4:	0022      	movs	r2, r4
 80003e6:	3a01      	subs	r2, #1
 80003e8:	2c01      	cmp	r4, #1
 80003ea:	d100      	bne.n	80003ee <__aeabi_dadd+0x1d6>
 80003ec:	e182      	b.n	80006f4 <__aeabi_dadd+0x4dc>
 80003ee:	4c64      	ldr	r4, [pc, #400]	; (8000580 <__aeabi_dadd+0x368>)
 80003f0:	45a4      	cmp	ip, r4
 80003f2:	d05b      	beq.n	80004ac <__aeabi_dadd+0x294>
 80003f4:	4694      	mov	ip, r2
 80003f6:	e741      	b.n	800027c <__aeabi_dadd+0x64>
 80003f8:	4c63      	ldr	r4, [pc, #396]	; (8000588 <__aeabi_dadd+0x370>)
 80003fa:	1c77      	adds	r7, r6, #1
 80003fc:	4227      	tst	r7, r4
 80003fe:	d000      	beq.n	8000402 <__aeabi_dadd+0x1ea>
 8000400:	e0c4      	b.n	800058c <__aeabi_dadd+0x374>
 8000402:	0004      	movs	r4, r0
 8000404:	431c      	orrs	r4, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d000      	beq.n	800040c <__aeabi_dadd+0x1f4>
 800040a:	e169      	b.n	80006e0 <__aeabi_dadd+0x4c8>
 800040c:	2c00      	cmp	r4, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_dadd+0x1fa>
 8000410:	e1bf      	b.n	8000792 <__aeabi_dadd+0x57a>
 8000412:	4644      	mov	r4, r8
 8000414:	430c      	orrs	r4, r1
 8000416:	d000      	beq.n	800041a <__aeabi_dadd+0x202>
 8000418:	e1d0      	b.n	80007bc <__aeabi_dadd+0x5a4>
 800041a:	0742      	lsls	r2, r0, #29
 800041c:	08db      	lsrs	r3, r3, #3
 800041e:	4313      	orrs	r3, r2
 8000420:	08c0      	lsrs	r0, r0, #3
 8000422:	e029      	b.n	8000478 <__aeabi_dadd+0x260>
 8000424:	003a      	movs	r2, r7
 8000426:	430a      	orrs	r2, r1
 8000428:	d100      	bne.n	800042c <__aeabi_dadd+0x214>
 800042a:	e170      	b.n	800070e <__aeabi_dadd+0x4f6>
 800042c:	4662      	mov	r2, ip
 800042e:	4664      	mov	r4, ip
 8000430:	3a01      	subs	r2, #1
 8000432:	2c01      	cmp	r4, #1
 8000434:	d100      	bne.n	8000438 <__aeabi_dadd+0x220>
 8000436:	e0e0      	b.n	80005fa <__aeabi_dadd+0x3e2>
 8000438:	4c51      	ldr	r4, [pc, #324]	; (8000580 <__aeabi_dadd+0x368>)
 800043a:	45a4      	cmp	ip, r4
 800043c:	d100      	bne.n	8000440 <__aeabi_dadd+0x228>
 800043e:	e161      	b.n	8000704 <__aeabi_dadd+0x4ec>
 8000440:	4694      	mov	ip, r2
 8000442:	e7b4      	b.n	80003ae <__aeabi_dadd+0x196>
 8000444:	003a      	movs	r2, r7
 8000446:	391f      	subs	r1, #31
 8000448:	40ca      	lsrs	r2, r1
 800044a:	0011      	movs	r1, r2
 800044c:	2b20      	cmp	r3, #32
 800044e:	d003      	beq.n	8000458 <__aeabi_dadd+0x240>
 8000450:	2240      	movs	r2, #64	; 0x40
 8000452:	1ad3      	subs	r3, r2, r3
 8000454:	409f      	lsls	r7, r3
 8000456:	433c      	orrs	r4, r7
 8000458:	1e63      	subs	r3, r4, #1
 800045a:	419c      	sbcs	r4, r3
 800045c:	2700      	movs	r7, #0
 800045e:	2600      	movs	r6, #0
 8000460:	430c      	orrs	r4, r1
 8000462:	0763      	lsls	r3, r4, #29
 8000464:	d000      	beq.n	8000468 <__aeabi_dadd+0x250>
 8000466:	e753      	b.n	8000310 <__aeabi_dadd+0xf8>
 8000468:	46b4      	mov	ip, r6
 800046a:	08e4      	lsrs	r4, r4, #3
 800046c:	077b      	lsls	r3, r7, #29
 800046e:	4323      	orrs	r3, r4
 8000470:	08f8      	lsrs	r0, r7, #3
 8000472:	4a43      	ldr	r2, [pc, #268]	; (8000580 <__aeabi_dadd+0x368>)
 8000474:	4594      	cmp	ip, r2
 8000476:	d01d      	beq.n	80004b4 <__aeabi_dadd+0x29c>
 8000478:	4662      	mov	r2, ip
 800047a:	0307      	lsls	r7, r0, #12
 800047c:	0552      	lsls	r2, r2, #21
 800047e:	0b3f      	lsrs	r7, r7, #12
 8000480:	0d52      	lsrs	r2, r2, #21
 8000482:	e760      	b.n	8000346 <__aeabi_dadd+0x12e>
 8000484:	4644      	mov	r4, r8
 8000486:	430c      	orrs	r4, r1
 8000488:	1e62      	subs	r2, r4, #1
 800048a:	4194      	sbcs	r4, r2
 800048c:	18e4      	adds	r4, r4, r3
 800048e:	429c      	cmp	r4, r3
 8000490:	419b      	sbcs	r3, r3
 8000492:	425f      	negs	r7, r3
 8000494:	183f      	adds	r7, r7, r0
 8000496:	023b      	lsls	r3, r7, #8
 8000498:	d5e3      	bpl.n	8000462 <__aeabi_dadd+0x24a>
 800049a:	4b39      	ldr	r3, [pc, #228]	; (8000580 <__aeabi_dadd+0x368>)
 800049c:	3601      	adds	r6, #1
 800049e:	429e      	cmp	r6, r3
 80004a0:	d000      	beq.n	80004a4 <__aeabi_dadd+0x28c>
 80004a2:	e0b5      	b.n	8000610 <__aeabi_dadd+0x3f8>
 80004a4:	0032      	movs	r2, r6
 80004a6:	2700      	movs	r7, #0
 80004a8:	2300      	movs	r3, #0
 80004aa:	e74c      	b.n	8000346 <__aeabi_dadd+0x12e>
 80004ac:	0742      	lsls	r2, r0, #29
 80004ae:	08db      	lsrs	r3, r3, #3
 80004b0:	4313      	orrs	r3, r2
 80004b2:	08c0      	lsrs	r0, r0, #3
 80004b4:	001a      	movs	r2, r3
 80004b6:	4302      	orrs	r2, r0
 80004b8:	d100      	bne.n	80004bc <__aeabi_dadd+0x2a4>
 80004ba:	e1e1      	b.n	8000880 <__aeabi_dadd+0x668>
 80004bc:	2780      	movs	r7, #128	; 0x80
 80004be:	033f      	lsls	r7, r7, #12
 80004c0:	4307      	orrs	r7, r0
 80004c2:	033f      	lsls	r7, r7, #12
 80004c4:	4a2e      	ldr	r2, [pc, #184]	; (8000580 <__aeabi_dadd+0x368>)
 80004c6:	0b3f      	lsrs	r7, r7, #12
 80004c8:	e73d      	b.n	8000346 <__aeabi_dadd+0x12e>
 80004ca:	0020      	movs	r0, r4
 80004cc:	f001 fbe8 	bl	8001ca0 <__clzsi2>
 80004d0:	0001      	movs	r1, r0
 80004d2:	3118      	adds	r1, #24
 80004d4:	291f      	cmp	r1, #31
 80004d6:	dc00      	bgt.n	80004da <__aeabi_dadd+0x2c2>
 80004d8:	e6fc      	b.n	80002d4 <__aeabi_dadd+0xbc>
 80004da:	3808      	subs	r0, #8
 80004dc:	4084      	lsls	r4, r0
 80004de:	0027      	movs	r7, r4
 80004e0:	2400      	movs	r4, #0
 80004e2:	42b1      	cmp	r1, r6
 80004e4:	db00      	blt.n	80004e8 <__aeabi_dadd+0x2d0>
 80004e6:	e6ff      	b.n	80002e8 <__aeabi_dadd+0xd0>
 80004e8:	4a26      	ldr	r2, [pc, #152]	; (8000584 <__aeabi_dadd+0x36c>)
 80004ea:	1a76      	subs	r6, r6, r1
 80004ec:	4017      	ands	r7, r2
 80004ee:	e70d      	b.n	800030c <__aeabi_dadd+0xf4>
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	d02f      	beq.n	8000554 <__aeabi_dadd+0x33c>
 80004f4:	464a      	mov	r2, r9
 80004f6:	1b92      	subs	r2, r2, r6
 80004f8:	4694      	mov	ip, r2
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_dadd+0x2e8>
 80004fe:	e0ad      	b.n	800065c <__aeabi_dadd+0x444>
 8000500:	4a1f      	ldr	r2, [pc, #124]	; (8000580 <__aeabi_dadd+0x368>)
 8000502:	4591      	cmp	r9, r2
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x2f0>
 8000506:	e10f      	b.n	8000728 <__aeabi_dadd+0x510>
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	0412      	lsls	r2, r2, #16
 800050c:	4310      	orrs	r0, r2
 800050e:	4662      	mov	r2, ip
 8000510:	2a38      	cmp	r2, #56	; 0x38
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x2fe>
 8000514:	e10f      	b.n	8000736 <__aeabi_dadd+0x51e>
 8000516:	2a1f      	cmp	r2, #31
 8000518:	dd00      	ble.n	800051c <__aeabi_dadd+0x304>
 800051a:	e180      	b.n	800081e <__aeabi_dadd+0x606>
 800051c:	4664      	mov	r4, ip
 800051e:	2220      	movs	r2, #32
 8000520:	001e      	movs	r6, r3
 8000522:	1b12      	subs	r2, r2, r4
 8000524:	4667      	mov	r7, ip
 8000526:	0004      	movs	r4, r0
 8000528:	4093      	lsls	r3, r2
 800052a:	4094      	lsls	r4, r2
 800052c:	40fe      	lsrs	r6, r7
 800052e:	1e5a      	subs	r2, r3, #1
 8000530:	4193      	sbcs	r3, r2
 8000532:	40f8      	lsrs	r0, r7
 8000534:	4334      	orrs	r4, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	4480      	add	r8, r0
 800053a:	1864      	adds	r4, r4, r1
 800053c:	428c      	cmp	r4, r1
 800053e:	41bf      	sbcs	r7, r7
 8000540:	427f      	negs	r7, r7
 8000542:	464e      	mov	r6, r9
 8000544:	4447      	add	r7, r8
 8000546:	e7a6      	b.n	8000496 <__aeabi_dadd+0x27e>
 8000548:	4642      	mov	r2, r8
 800054a:	430a      	orrs	r2, r1
 800054c:	0011      	movs	r1, r2
 800054e:	1e4a      	subs	r2, r1, #1
 8000550:	4191      	sbcs	r1, r2
 8000552:	e6ad      	b.n	80002b0 <__aeabi_dadd+0x98>
 8000554:	4c0c      	ldr	r4, [pc, #48]	; (8000588 <__aeabi_dadd+0x370>)
 8000556:	1c72      	adds	r2, r6, #1
 8000558:	4222      	tst	r2, r4
 800055a:	d000      	beq.n	800055e <__aeabi_dadd+0x346>
 800055c:	e0a1      	b.n	80006a2 <__aeabi_dadd+0x48a>
 800055e:	0002      	movs	r2, r0
 8000560:	431a      	orrs	r2, r3
 8000562:	2e00      	cmp	r6, #0
 8000564:	d000      	beq.n	8000568 <__aeabi_dadd+0x350>
 8000566:	e0fa      	b.n	800075e <__aeabi_dadd+0x546>
 8000568:	2a00      	cmp	r2, #0
 800056a:	d100      	bne.n	800056e <__aeabi_dadd+0x356>
 800056c:	e145      	b.n	80007fa <__aeabi_dadd+0x5e2>
 800056e:	003a      	movs	r2, r7
 8000570:	430a      	orrs	r2, r1
 8000572:	d000      	beq.n	8000576 <__aeabi_dadd+0x35e>
 8000574:	e146      	b.n	8000804 <__aeabi_dadd+0x5ec>
 8000576:	0742      	lsls	r2, r0, #29
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	4313      	orrs	r3, r2
 800057c:	08c0      	lsrs	r0, r0, #3
 800057e:	e77b      	b.n	8000478 <__aeabi_dadd+0x260>
 8000580:	000007ff 	.word	0x000007ff
 8000584:	ff7fffff 	.word	0xff7fffff
 8000588:	000007fe 	.word	0x000007fe
 800058c:	4647      	mov	r7, r8
 800058e:	1a5c      	subs	r4, r3, r1
 8000590:	1bc2      	subs	r2, r0, r7
 8000592:	42a3      	cmp	r3, r4
 8000594:	41bf      	sbcs	r7, r7
 8000596:	427f      	negs	r7, r7
 8000598:	46b9      	mov	r9, r7
 800059a:	0017      	movs	r7, r2
 800059c:	464a      	mov	r2, r9
 800059e:	1abf      	subs	r7, r7, r2
 80005a0:	023a      	lsls	r2, r7, #8
 80005a2:	d500      	bpl.n	80005a6 <__aeabi_dadd+0x38e>
 80005a4:	e08d      	b.n	80006c2 <__aeabi_dadd+0x4aa>
 80005a6:	0023      	movs	r3, r4
 80005a8:	433b      	orrs	r3, r7
 80005aa:	d000      	beq.n	80005ae <__aeabi_dadd+0x396>
 80005ac:	e68a      	b.n	80002c4 <__aeabi_dadd+0xac>
 80005ae:	2000      	movs	r0, #0
 80005b0:	2500      	movs	r5, #0
 80005b2:	e761      	b.n	8000478 <__aeabi_dadd+0x260>
 80005b4:	4cb4      	ldr	r4, [pc, #720]	; (8000888 <__aeabi_dadd+0x670>)
 80005b6:	45a1      	cmp	r9, r4
 80005b8:	d100      	bne.n	80005bc <__aeabi_dadd+0x3a4>
 80005ba:	e0ad      	b.n	8000718 <__aeabi_dadd+0x500>
 80005bc:	2480      	movs	r4, #128	; 0x80
 80005be:	0424      	lsls	r4, r4, #16
 80005c0:	4320      	orrs	r0, r4
 80005c2:	4664      	mov	r4, ip
 80005c4:	2c38      	cmp	r4, #56	; 0x38
 80005c6:	dc3d      	bgt.n	8000644 <__aeabi_dadd+0x42c>
 80005c8:	4662      	mov	r2, ip
 80005ca:	2c1f      	cmp	r4, #31
 80005cc:	dd00      	ble.n	80005d0 <__aeabi_dadd+0x3b8>
 80005ce:	e0b7      	b.n	8000740 <__aeabi_dadd+0x528>
 80005d0:	2520      	movs	r5, #32
 80005d2:	001e      	movs	r6, r3
 80005d4:	1b2d      	subs	r5, r5, r4
 80005d6:	0004      	movs	r4, r0
 80005d8:	40ab      	lsls	r3, r5
 80005da:	40ac      	lsls	r4, r5
 80005dc:	40d6      	lsrs	r6, r2
 80005de:	40d0      	lsrs	r0, r2
 80005e0:	4642      	mov	r2, r8
 80005e2:	1e5d      	subs	r5, r3, #1
 80005e4:	41ab      	sbcs	r3, r5
 80005e6:	4334      	orrs	r4, r6
 80005e8:	1a12      	subs	r2, r2, r0
 80005ea:	4690      	mov	r8, r2
 80005ec:	4323      	orrs	r3, r4
 80005ee:	e02c      	b.n	800064a <__aeabi_dadd+0x432>
 80005f0:	0742      	lsls	r2, r0, #29
 80005f2:	08db      	lsrs	r3, r3, #3
 80005f4:	4313      	orrs	r3, r2
 80005f6:	08c0      	lsrs	r0, r0, #3
 80005f8:	e73b      	b.n	8000472 <__aeabi_dadd+0x25a>
 80005fa:	185c      	adds	r4, r3, r1
 80005fc:	429c      	cmp	r4, r3
 80005fe:	419b      	sbcs	r3, r3
 8000600:	4440      	add	r0, r8
 8000602:	425b      	negs	r3, r3
 8000604:	18c7      	adds	r7, r0, r3
 8000606:	2601      	movs	r6, #1
 8000608:	023b      	lsls	r3, r7, #8
 800060a:	d400      	bmi.n	800060e <__aeabi_dadd+0x3f6>
 800060c:	e729      	b.n	8000462 <__aeabi_dadd+0x24a>
 800060e:	2602      	movs	r6, #2
 8000610:	4a9e      	ldr	r2, [pc, #632]	; (800088c <__aeabi_dadd+0x674>)
 8000612:	0863      	lsrs	r3, r4, #1
 8000614:	4017      	ands	r7, r2
 8000616:	2201      	movs	r2, #1
 8000618:	4014      	ands	r4, r2
 800061a:	431c      	orrs	r4, r3
 800061c:	07fb      	lsls	r3, r7, #31
 800061e:	431c      	orrs	r4, r3
 8000620:	087f      	lsrs	r7, r7, #1
 8000622:	e673      	b.n	800030c <__aeabi_dadd+0xf4>
 8000624:	4644      	mov	r4, r8
 8000626:	3a20      	subs	r2, #32
 8000628:	40d4      	lsrs	r4, r2
 800062a:	4662      	mov	r2, ip
 800062c:	2a20      	cmp	r2, #32
 800062e:	d005      	beq.n	800063c <__aeabi_dadd+0x424>
 8000630:	4667      	mov	r7, ip
 8000632:	2240      	movs	r2, #64	; 0x40
 8000634:	1bd2      	subs	r2, r2, r7
 8000636:	4647      	mov	r7, r8
 8000638:	4097      	lsls	r7, r2
 800063a:	4339      	orrs	r1, r7
 800063c:	1e4a      	subs	r2, r1, #1
 800063e:	4191      	sbcs	r1, r2
 8000640:	4321      	orrs	r1, r4
 8000642:	e635      	b.n	80002b0 <__aeabi_dadd+0x98>
 8000644:	4303      	orrs	r3, r0
 8000646:	1e58      	subs	r0, r3, #1
 8000648:	4183      	sbcs	r3, r0
 800064a:	1acc      	subs	r4, r1, r3
 800064c:	42a1      	cmp	r1, r4
 800064e:	41bf      	sbcs	r7, r7
 8000650:	4643      	mov	r3, r8
 8000652:	427f      	negs	r7, r7
 8000654:	4655      	mov	r5, sl
 8000656:	464e      	mov	r6, r9
 8000658:	1bdf      	subs	r7, r3, r7
 800065a:	e62e      	b.n	80002ba <__aeabi_dadd+0xa2>
 800065c:	0002      	movs	r2, r0
 800065e:	431a      	orrs	r2, r3
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x44c>
 8000662:	e0bd      	b.n	80007e0 <__aeabi_dadd+0x5c8>
 8000664:	4662      	mov	r2, ip
 8000666:	4664      	mov	r4, ip
 8000668:	3a01      	subs	r2, #1
 800066a:	2c01      	cmp	r4, #1
 800066c:	d100      	bne.n	8000670 <__aeabi_dadd+0x458>
 800066e:	e0e5      	b.n	800083c <__aeabi_dadd+0x624>
 8000670:	4c85      	ldr	r4, [pc, #532]	; (8000888 <__aeabi_dadd+0x670>)
 8000672:	45a4      	cmp	ip, r4
 8000674:	d058      	beq.n	8000728 <__aeabi_dadd+0x510>
 8000676:	4694      	mov	ip, r2
 8000678:	e749      	b.n	800050e <__aeabi_dadd+0x2f6>
 800067a:	4664      	mov	r4, ip
 800067c:	2220      	movs	r2, #32
 800067e:	1b12      	subs	r2, r2, r4
 8000680:	4644      	mov	r4, r8
 8000682:	4094      	lsls	r4, r2
 8000684:	000f      	movs	r7, r1
 8000686:	46a1      	mov	r9, r4
 8000688:	4664      	mov	r4, ip
 800068a:	4091      	lsls	r1, r2
 800068c:	40e7      	lsrs	r7, r4
 800068e:	464c      	mov	r4, r9
 8000690:	1e4a      	subs	r2, r1, #1
 8000692:	4191      	sbcs	r1, r2
 8000694:	433c      	orrs	r4, r7
 8000696:	4642      	mov	r2, r8
 8000698:	430c      	orrs	r4, r1
 800069a:	4661      	mov	r1, ip
 800069c:	40ca      	lsrs	r2, r1
 800069e:	1880      	adds	r0, r0, r2
 80006a0:	e6f4      	b.n	800048c <__aeabi_dadd+0x274>
 80006a2:	4c79      	ldr	r4, [pc, #484]	; (8000888 <__aeabi_dadd+0x670>)
 80006a4:	42a2      	cmp	r2, r4
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0x492>
 80006a8:	e6fd      	b.n	80004a6 <__aeabi_dadd+0x28e>
 80006aa:	1859      	adds	r1, r3, r1
 80006ac:	4299      	cmp	r1, r3
 80006ae:	419b      	sbcs	r3, r3
 80006b0:	4440      	add	r0, r8
 80006b2:	425f      	negs	r7, r3
 80006b4:	19c7      	adds	r7, r0, r7
 80006b6:	07fc      	lsls	r4, r7, #31
 80006b8:	0849      	lsrs	r1, r1, #1
 80006ba:	0016      	movs	r6, r2
 80006bc:	430c      	orrs	r4, r1
 80006be:	087f      	lsrs	r7, r7, #1
 80006c0:	e6cf      	b.n	8000462 <__aeabi_dadd+0x24a>
 80006c2:	1acc      	subs	r4, r1, r3
 80006c4:	42a1      	cmp	r1, r4
 80006c6:	41bf      	sbcs	r7, r7
 80006c8:	4643      	mov	r3, r8
 80006ca:	427f      	negs	r7, r7
 80006cc:	1a18      	subs	r0, r3, r0
 80006ce:	4655      	mov	r5, sl
 80006d0:	1bc7      	subs	r7, r0, r7
 80006d2:	e5f7      	b.n	80002c4 <__aeabi_dadd+0xac>
 80006d4:	08c9      	lsrs	r1, r1, #3
 80006d6:	077b      	lsls	r3, r7, #29
 80006d8:	4655      	mov	r5, sl
 80006da:	430b      	orrs	r3, r1
 80006dc:	08f8      	lsrs	r0, r7, #3
 80006de:	e6c8      	b.n	8000472 <__aeabi_dadd+0x25a>
 80006e0:	2c00      	cmp	r4, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x4ce>
 80006e4:	e081      	b.n	80007ea <__aeabi_dadd+0x5d2>
 80006e6:	4643      	mov	r3, r8
 80006e8:	430b      	orrs	r3, r1
 80006ea:	d115      	bne.n	8000718 <__aeabi_dadd+0x500>
 80006ec:	2080      	movs	r0, #128	; 0x80
 80006ee:	2500      	movs	r5, #0
 80006f0:	0300      	lsls	r0, r0, #12
 80006f2:	e6e3      	b.n	80004bc <__aeabi_dadd+0x2a4>
 80006f4:	1a5c      	subs	r4, r3, r1
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	419b      	sbcs	r3, r3
 80006fa:	1bc7      	subs	r7, r0, r7
 80006fc:	425b      	negs	r3, r3
 80006fe:	2601      	movs	r6, #1
 8000700:	1aff      	subs	r7, r7, r3
 8000702:	e5da      	b.n	80002ba <__aeabi_dadd+0xa2>
 8000704:	0742      	lsls	r2, r0, #29
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	4313      	orrs	r3, r2
 800070a:	08c0      	lsrs	r0, r0, #3
 800070c:	e6d2      	b.n	80004b4 <__aeabi_dadd+0x29c>
 800070e:	0742      	lsls	r2, r0, #29
 8000710:	08db      	lsrs	r3, r3, #3
 8000712:	4313      	orrs	r3, r2
 8000714:	08c0      	lsrs	r0, r0, #3
 8000716:	e6ac      	b.n	8000472 <__aeabi_dadd+0x25a>
 8000718:	4643      	mov	r3, r8
 800071a:	4642      	mov	r2, r8
 800071c:	08c9      	lsrs	r1, r1, #3
 800071e:	075b      	lsls	r3, r3, #29
 8000720:	4655      	mov	r5, sl
 8000722:	430b      	orrs	r3, r1
 8000724:	08d0      	lsrs	r0, r2, #3
 8000726:	e6c5      	b.n	80004b4 <__aeabi_dadd+0x29c>
 8000728:	4643      	mov	r3, r8
 800072a:	4642      	mov	r2, r8
 800072c:	075b      	lsls	r3, r3, #29
 800072e:	08c9      	lsrs	r1, r1, #3
 8000730:	430b      	orrs	r3, r1
 8000732:	08d0      	lsrs	r0, r2, #3
 8000734:	e6be      	b.n	80004b4 <__aeabi_dadd+0x29c>
 8000736:	4303      	orrs	r3, r0
 8000738:	001c      	movs	r4, r3
 800073a:	1e63      	subs	r3, r4, #1
 800073c:	419c      	sbcs	r4, r3
 800073e:	e6fc      	b.n	800053a <__aeabi_dadd+0x322>
 8000740:	0002      	movs	r2, r0
 8000742:	3c20      	subs	r4, #32
 8000744:	40e2      	lsrs	r2, r4
 8000746:	0014      	movs	r4, r2
 8000748:	4662      	mov	r2, ip
 800074a:	2a20      	cmp	r2, #32
 800074c:	d003      	beq.n	8000756 <__aeabi_dadd+0x53e>
 800074e:	2540      	movs	r5, #64	; 0x40
 8000750:	1aad      	subs	r5, r5, r2
 8000752:	40a8      	lsls	r0, r5
 8000754:	4303      	orrs	r3, r0
 8000756:	1e58      	subs	r0, r3, #1
 8000758:	4183      	sbcs	r3, r0
 800075a:	4323      	orrs	r3, r4
 800075c:	e775      	b.n	800064a <__aeabi_dadd+0x432>
 800075e:	2a00      	cmp	r2, #0
 8000760:	d0e2      	beq.n	8000728 <__aeabi_dadd+0x510>
 8000762:	003a      	movs	r2, r7
 8000764:	430a      	orrs	r2, r1
 8000766:	d0cd      	beq.n	8000704 <__aeabi_dadd+0x4ec>
 8000768:	0742      	lsls	r2, r0, #29
 800076a:	08db      	lsrs	r3, r3, #3
 800076c:	4313      	orrs	r3, r2
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	08c0      	lsrs	r0, r0, #3
 8000772:	0312      	lsls	r2, r2, #12
 8000774:	4210      	tst	r0, r2
 8000776:	d006      	beq.n	8000786 <__aeabi_dadd+0x56e>
 8000778:	08fc      	lsrs	r4, r7, #3
 800077a:	4214      	tst	r4, r2
 800077c:	d103      	bne.n	8000786 <__aeabi_dadd+0x56e>
 800077e:	0020      	movs	r0, r4
 8000780:	08cb      	lsrs	r3, r1, #3
 8000782:	077a      	lsls	r2, r7, #29
 8000784:	4313      	orrs	r3, r2
 8000786:	0f5a      	lsrs	r2, r3, #29
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	0752      	lsls	r2, r2, #29
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	4313      	orrs	r3, r2
 8000790:	e690      	b.n	80004b4 <__aeabi_dadd+0x29c>
 8000792:	4643      	mov	r3, r8
 8000794:	430b      	orrs	r3, r1
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x582>
 8000798:	e709      	b.n	80005ae <__aeabi_dadd+0x396>
 800079a:	4643      	mov	r3, r8
 800079c:	4642      	mov	r2, r8
 800079e:	08c9      	lsrs	r1, r1, #3
 80007a0:	075b      	lsls	r3, r3, #29
 80007a2:	4655      	mov	r5, sl
 80007a4:	430b      	orrs	r3, r1
 80007a6:	08d0      	lsrs	r0, r2, #3
 80007a8:	e666      	b.n	8000478 <__aeabi_dadd+0x260>
 80007aa:	1acc      	subs	r4, r1, r3
 80007ac:	42a1      	cmp	r1, r4
 80007ae:	4189      	sbcs	r1, r1
 80007b0:	1a3f      	subs	r7, r7, r0
 80007b2:	4249      	negs	r1, r1
 80007b4:	4655      	mov	r5, sl
 80007b6:	2601      	movs	r6, #1
 80007b8:	1a7f      	subs	r7, r7, r1
 80007ba:	e57e      	b.n	80002ba <__aeabi_dadd+0xa2>
 80007bc:	4642      	mov	r2, r8
 80007be:	1a5c      	subs	r4, r3, r1
 80007c0:	1a87      	subs	r7, r0, r2
 80007c2:	42a3      	cmp	r3, r4
 80007c4:	4192      	sbcs	r2, r2
 80007c6:	4252      	negs	r2, r2
 80007c8:	1abf      	subs	r7, r7, r2
 80007ca:	023a      	lsls	r2, r7, #8
 80007cc:	d53d      	bpl.n	800084a <__aeabi_dadd+0x632>
 80007ce:	1acc      	subs	r4, r1, r3
 80007d0:	42a1      	cmp	r1, r4
 80007d2:	4189      	sbcs	r1, r1
 80007d4:	4643      	mov	r3, r8
 80007d6:	4249      	negs	r1, r1
 80007d8:	1a1f      	subs	r7, r3, r0
 80007da:	4655      	mov	r5, sl
 80007dc:	1a7f      	subs	r7, r7, r1
 80007de:	e595      	b.n	800030c <__aeabi_dadd+0xf4>
 80007e0:	077b      	lsls	r3, r7, #29
 80007e2:	08c9      	lsrs	r1, r1, #3
 80007e4:	430b      	orrs	r3, r1
 80007e6:	08f8      	lsrs	r0, r7, #3
 80007e8:	e643      	b.n	8000472 <__aeabi_dadd+0x25a>
 80007ea:	4644      	mov	r4, r8
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	430c      	orrs	r4, r1
 80007f0:	d130      	bne.n	8000854 <__aeabi_dadd+0x63c>
 80007f2:	0742      	lsls	r2, r0, #29
 80007f4:	4313      	orrs	r3, r2
 80007f6:	08c0      	lsrs	r0, r0, #3
 80007f8:	e65c      	b.n	80004b4 <__aeabi_dadd+0x29c>
 80007fa:	077b      	lsls	r3, r7, #29
 80007fc:	08c9      	lsrs	r1, r1, #3
 80007fe:	430b      	orrs	r3, r1
 8000800:	08f8      	lsrs	r0, r7, #3
 8000802:	e639      	b.n	8000478 <__aeabi_dadd+0x260>
 8000804:	185c      	adds	r4, r3, r1
 8000806:	429c      	cmp	r4, r3
 8000808:	419b      	sbcs	r3, r3
 800080a:	4440      	add	r0, r8
 800080c:	425b      	negs	r3, r3
 800080e:	18c7      	adds	r7, r0, r3
 8000810:	023b      	lsls	r3, r7, #8
 8000812:	d400      	bmi.n	8000816 <__aeabi_dadd+0x5fe>
 8000814:	e625      	b.n	8000462 <__aeabi_dadd+0x24a>
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <__aeabi_dadd+0x674>)
 8000818:	2601      	movs	r6, #1
 800081a:	401f      	ands	r7, r3
 800081c:	e621      	b.n	8000462 <__aeabi_dadd+0x24a>
 800081e:	0004      	movs	r4, r0
 8000820:	3a20      	subs	r2, #32
 8000822:	40d4      	lsrs	r4, r2
 8000824:	4662      	mov	r2, ip
 8000826:	2a20      	cmp	r2, #32
 8000828:	d004      	beq.n	8000834 <__aeabi_dadd+0x61c>
 800082a:	2240      	movs	r2, #64	; 0x40
 800082c:	4666      	mov	r6, ip
 800082e:	1b92      	subs	r2, r2, r6
 8000830:	4090      	lsls	r0, r2
 8000832:	4303      	orrs	r3, r0
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	4193      	sbcs	r3, r2
 8000838:	431c      	orrs	r4, r3
 800083a:	e67e      	b.n	800053a <__aeabi_dadd+0x322>
 800083c:	185c      	adds	r4, r3, r1
 800083e:	428c      	cmp	r4, r1
 8000840:	4189      	sbcs	r1, r1
 8000842:	4440      	add	r0, r8
 8000844:	4249      	negs	r1, r1
 8000846:	1847      	adds	r7, r0, r1
 8000848:	e6dd      	b.n	8000606 <__aeabi_dadd+0x3ee>
 800084a:	0023      	movs	r3, r4
 800084c:	433b      	orrs	r3, r7
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x63a>
 8000850:	e6ad      	b.n	80005ae <__aeabi_dadd+0x396>
 8000852:	e606      	b.n	8000462 <__aeabi_dadd+0x24a>
 8000854:	0744      	lsls	r4, r0, #29
 8000856:	4323      	orrs	r3, r4
 8000858:	2480      	movs	r4, #128	; 0x80
 800085a:	08c0      	lsrs	r0, r0, #3
 800085c:	0324      	lsls	r4, r4, #12
 800085e:	4220      	tst	r0, r4
 8000860:	d008      	beq.n	8000874 <__aeabi_dadd+0x65c>
 8000862:	4642      	mov	r2, r8
 8000864:	08d6      	lsrs	r6, r2, #3
 8000866:	4226      	tst	r6, r4
 8000868:	d104      	bne.n	8000874 <__aeabi_dadd+0x65c>
 800086a:	4655      	mov	r5, sl
 800086c:	0030      	movs	r0, r6
 800086e:	08cb      	lsrs	r3, r1, #3
 8000870:	0751      	lsls	r1, r2, #29
 8000872:	430b      	orrs	r3, r1
 8000874:	0f5a      	lsrs	r2, r3, #29
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	0752      	lsls	r2, r2, #29
 800087c:	4313      	orrs	r3, r2
 800087e:	e619      	b.n	80004b4 <__aeabi_dadd+0x29c>
 8000880:	2300      	movs	r3, #0
 8000882:	4a01      	ldr	r2, [pc, #4]	; (8000888 <__aeabi_dadd+0x670>)
 8000884:	001f      	movs	r7, r3
 8000886:	e55e      	b.n	8000346 <__aeabi_dadd+0x12e>
 8000888:	000007ff 	.word	0x000007ff
 800088c:	ff7fffff 	.word	0xff7fffff

08000890 <__aeabi_ddiv>:
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	4657      	mov	r7, sl
 8000894:	464e      	mov	r6, r9
 8000896:	4645      	mov	r5, r8
 8000898:	46de      	mov	lr, fp
 800089a:	b5e0      	push	{r5, r6, r7, lr}
 800089c:	4681      	mov	r9, r0
 800089e:	0005      	movs	r5, r0
 80008a0:	030c      	lsls	r4, r1, #12
 80008a2:	0048      	lsls	r0, r1, #1
 80008a4:	4692      	mov	sl, r2
 80008a6:	001f      	movs	r7, r3
 80008a8:	b085      	sub	sp, #20
 80008aa:	0b24      	lsrs	r4, r4, #12
 80008ac:	0d40      	lsrs	r0, r0, #21
 80008ae:	0fce      	lsrs	r6, r1, #31
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_ddiv+0x26>
 80008b4:	e156      	b.n	8000b64 <__aeabi_ddiv+0x2d4>
 80008b6:	4bd4      	ldr	r3, [pc, #848]	; (8000c08 <__aeabi_ddiv+0x378>)
 80008b8:	4298      	cmp	r0, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_ddiv+0x2e>
 80008bc:	e172      	b.n	8000ba4 <__aeabi_ddiv+0x314>
 80008be:	0f6b      	lsrs	r3, r5, #29
 80008c0:	00e4      	lsls	r4, r4, #3
 80008c2:	431c      	orrs	r4, r3
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	041b      	lsls	r3, r3, #16
 80008c8:	4323      	orrs	r3, r4
 80008ca:	4698      	mov	r8, r3
 80008cc:	4bcf      	ldr	r3, [pc, #828]	; (8000c0c <__aeabi_ddiv+0x37c>)
 80008ce:	00ed      	lsls	r5, r5, #3
 80008d0:	469b      	mov	fp, r3
 80008d2:	2300      	movs	r3, #0
 80008d4:	4699      	mov	r9, r3
 80008d6:	4483      	add	fp, r0
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	033c      	lsls	r4, r7, #12
 80008dc:	007b      	lsls	r3, r7, #1
 80008de:	4650      	mov	r0, sl
 80008e0:	0b24      	lsrs	r4, r4, #12
 80008e2:	0d5b      	lsrs	r3, r3, #21
 80008e4:	0fff      	lsrs	r7, r7, #31
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_ddiv+0x5c>
 80008ea:	e11f      	b.n	8000b2c <__aeabi_ddiv+0x29c>
 80008ec:	4ac6      	ldr	r2, [pc, #792]	; (8000c08 <__aeabi_ddiv+0x378>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d100      	bne.n	80008f4 <__aeabi_ddiv+0x64>
 80008f2:	e162      	b.n	8000bba <__aeabi_ddiv+0x32a>
 80008f4:	49c5      	ldr	r1, [pc, #788]	; (8000c0c <__aeabi_ddiv+0x37c>)
 80008f6:	0f42      	lsrs	r2, r0, #29
 80008f8:	468c      	mov	ip, r1
 80008fa:	00e4      	lsls	r4, r4, #3
 80008fc:	4659      	mov	r1, fp
 80008fe:	4314      	orrs	r4, r2
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	4463      	add	r3, ip
 8000904:	0412      	lsls	r2, r2, #16
 8000906:	1acb      	subs	r3, r1, r3
 8000908:	4314      	orrs	r4, r2
 800090a:	469b      	mov	fp, r3
 800090c:	00c2      	lsls	r2, r0, #3
 800090e:	2000      	movs	r0, #0
 8000910:	0033      	movs	r3, r6
 8000912:	407b      	eors	r3, r7
 8000914:	469a      	mov	sl, r3
 8000916:	464b      	mov	r3, r9
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d827      	bhi.n	800096c <__aeabi_ddiv+0xdc>
 800091c:	49bc      	ldr	r1, [pc, #752]	; (8000c10 <__aeabi_ddiv+0x380>)
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	58cb      	ldr	r3, [r1, r3]
 8000922:	469f      	mov	pc, r3
 8000924:	46b2      	mov	sl, r6
 8000926:	9b00      	ldr	r3, [sp, #0]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d016      	beq.n	800095a <__aeabi_ddiv+0xca>
 800092c:	2b03      	cmp	r3, #3
 800092e:	d100      	bne.n	8000932 <__aeabi_ddiv+0xa2>
 8000930:	e28e      	b.n	8000e50 <__aeabi_ddiv+0x5c0>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d000      	beq.n	8000938 <__aeabi_ddiv+0xa8>
 8000936:	e0d9      	b.n	8000aec <__aeabi_ddiv+0x25c>
 8000938:	2300      	movs	r3, #0
 800093a:	2400      	movs	r4, #0
 800093c:	2500      	movs	r5, #0
 800093e:	4652      	mov	r2, sl
 8000940:	051b      	lsls	r3, r3, #20
 8000942:	4323      	orrs	r3, r4
 8000944:	07d2      	lsls	r2, r2, #31
 8000946:	4313      	orrs	r3, r2
 8000948:	0028      	movs	r0, r5
 800094a:	0019      	movs	r1, r3
 800094c:	b005      	add	sp, #20
 800094e:	bcf0      	pop	{r4, r5, r6, r7}
 8000950:	46bb      	mov	fp, r7
 8000952:	46b2      	mov	sl, r6
 8000954:	46a9      	mov	r9, r5
 8000956:	46a0      	mov	r8, r4
 8000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095a:	2400      	movs	r4, #0
 800095c:	2500      	movs	r5, #0
 800095e:	4baa      	ldr	r3, [pc, #680]	; (8000c08 <__aeabi_ddiv+0x378>)
 8000960:	e7ed      	b.n	800093e <__aeabi_ddiv+0xae>
 8000962:	46ba      	mov	sl, r7
 8000964:	46a0      	mov	r8, r4
 8000966:	0015      	movs	r5, r2
 8000968:	9000      	str	r0, [sp, #0]
 800096a:	e7dc      	b.n	8000926 <__aeabi_ddiv+0x96>
 800096c:	4544      	cmp	r4, r8
 800096e:	d200      	bcs.n	8000972 <__aeabi_ddiv+0xe2>
 8000970:	e1c7      	b.n	8000d02 <__aeabi_ddiv+0x472>
 8000972:	d100      	bne.n	8000976 <__aeabi_ddiv+0xe6>
 8000974:	e1c2      	b.n	8000cfc <__aeabi_ddiv+0x46c>
 8000976:	2301      	movs	r3, #1
 8000978:	425b      	negs	r3, r3
 800097a:	469c      	mov	ip, r3
 800097c:	002e      	movs	r6, r5
 800097e:	4640      	mov	r0, r8
 8000980:	2500      	movs	r5, #0
 8000982:	44e3      	add	fp, ip
 8000984:	0223      	lsls	r3, r4, #8
 8000986:	0e14      	lsrs	r4, r2, #24
 8000988:	431c      	orrs	r4, r3
 800098a:	0c1b      	lsrs	r3, r3, #16
 800098c:	4699      	mov	r9, r3
 800098e:	0423      	lsls	r3, r4, #16
 8000990:	0c1f      	lsrs	r7, r3, #16
 8000992:	0212      	lsls	r2, r2, #8
 8000994:	4649      	mov	r1, r9
 8000996:	9200      	str	r2, [sp, #0]
 8000998:	9701      	str	r7, [sp, #4]
 800099a:	f7ff fc37 	bl	800020c <__aeabi_uidivmod>
 800099e:	0002      	movs	r2, r0
 80009a0:	437a      	muls	r2, r7
 80009a2:	040b      	lsls	r3, r1, #16
 80009a4:	0c31      	lsrs	r1, r6, #16
 80009a6:	4680      	mov	r8, r0
 80009a8:	4319      	orrs	r1, r3
 80009aa:	428a      	cmp	r2, r1
 80009ac:	d907      	bls.n	80009be <__aeabi_ddiv+0x12e>
 80009ae:	2301      	movs	r3, #1
 80009b0:	425b      	negs	r3, r3
 80009b2:	469c      	mov	ip, r3
 80009b4:	1909      	adds	r1, r1, r4
 80009b6:	44e0      	add	r8, ip
 80009b8:	428c      	cmp	r4, r1
 80009ba:	d800      	bhi.n	80009be <__aeabi_ddiv+0x12e>
 80009bc:	e207      	b.n	8000dce <__aeabi_ddiv+0x53e>
 80009be:	1a88      	subs	r0, r1, r2
 80009c0:	4649      	mov	r1, r9
 80009c2:	f7ff fc23 	bl	800020c <__aeabi_uidivmod>
 80009c6:	0409      	lsls	r1, r1, #16
 80009c8:	468c      	mov	ip, r1
 80009ca:	0431      	lsls	r1, r6, #16
 80009cc:	4666      	mov	r6, ip
 80009ce:	9a01      	ldr	r2, [sp, #4]
 80009d0:	0c09      	lsrs	r1, r1, #16
 80009d2:	4342      	muls	r2, r0
 80009d4:	0003      	movs	r3, r0
 80009d6:	4331      	orrs	r1, r6
 80009d8:	428a      	cmp	r2, r1
 80009da:	d904      	bls.n	80009e6 <__aeabi_ddiv+0x156>
 80009dc:	1909      	adds	r1, r1, r4
 80009de:	3b01      	subs	r3, #1
 80009e0:	428c      	cmp	r4, r1
 80009e2:	d800      	bhi.n	80009e6 <__aeabi_ddiv+0x156>
 80009e4:	e1ed      	b.n	8000dc2 <__aeabi_ddiv+0x532>
 80009e6:	1a88      	subs	r0, r1, r2
 80009e8:	4642      	mov	r2, r8
 80009ea:	0412      	lsls	r2, r2, #16
 80009ec:	431a      	orrs	r2, r3
 80009ee:	4690      	mov	r8, r2
 80009f0:	4641      	mov	r1, r8
 80009f2:	9b00      	ldr	r3, [sp, #0]
 80009f4:	040e      	lsls	r6, r1, #16
 80009f6:	0c1b      	lsrs	r3, r3, #16
 80009f8:	001f      	movs	r7, r3
 80009fa:	9302      	str	r3, [sp, #8]
 80009fc:	9b00      	ldr	r3, [sp, #0]
 80009fe:	0c36      	lsrs	r6, r6, #16
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	0c19      	lsrs	r1, r3, #16
 8000a04:	000b      	movs	r3, r1
 8000a06:	4373      	muls	r3, r6
 8000a08:	0c12      	lsrs	r2, r2, #16
 8000a0a:	437e      	muls	r6, r7
 8000a0c:	9103      	str	r1, [sp, #12]
 8000a0e:	4351      	muls	r1, r2
 8000a10:	437a      	muls	r2, r7
 8000a12:	0c1f      	lsrs	r7, r3, #16
 8000a14:	46bc      	mov	ip, r7
 8000a16:	1876      	adds	r6, r6, r1
 8000a18:	4466      	add	r6, ip
 8000a1a:	42b1      	cmp	r1, r6
 8000a1c:	d903      	bls.n	8000a26 <__aeabi_ddiv+0x196>
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	0249      	lsls	r1, r1, #9
 8000a22:	468c      	mov	ip, r1
 8000a24:	4462      	add	r2, ip
 8000a26:	0c31      	lsrs	r1, r6, #16
 8000a28:	188a      	adds	r2, r1, r2
 8000a2a:	0431      	lsls	r1, r6, #16
 8000a2c:	041e      	lsls	r6, r3, #16
 8000a2e:	0c36      	lsrs	r6, r6, #16
 8000a30:	198e      	adds	r6, r1, r6
 8000a32:	4290      	cmp	r0, r2
 8000a34:	d302      	bcc.n	8000a3c <__aeabi_ddiv+0x1ac>
 8000a36:	d112      	bne.n	8000a5e <__aeabi_ddiv+0x1ce>
 8000a38:	42b5      	cmp	r5, r6
 8000a3a:	d210      	bcs.n	8000a5e <__aeabi_ddiv+0x1ce>
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	1e59      	subs	r1, r3, #1
 8000a40:	9b00      	ldr	r3, [sp, #0]
 8000a42:	469c      	mov	ip, r3
 8000a44:	4465      	add	r5, ip
 8000a46:	001f      	movs	r7, r3
 8000a48:	429d      	cmp	r5, r3
 8000a4a:	419b      	sbcs	r3, r3
 8000a4c:	425b      	negs	r3, r3
 8000a4e:	191b      	adds	r3, r3, r4
 8000a50:	18c0      	adds	r0, r0, r3
 8000a52:	4284      	cmp	r4, r0
 8000a54:	d200      	bcs.n	8000a58 <__aeabi_ddiv+0x1c8>
 8000a56:	e1a0      	b.n	8000d9a <__aeabi_ddiv+0x50a>
 8000a58:	d100      	bne.n	8000a5c <__aeabi_ddiv+0x1cc>
 8000a5a:	e19b      	b.n	8000d94 <__aeabi_ddiv+0x504>
 8000a5c:	4688      	mov	r8, r1
 8000a5e:	1bae      	subs	r6, r5, r6
 8000a60:	42b5      	cmp	r5, r6
 8000a62:	41ad      	sbcs	r5, r5
 8000a64:	1a80      	subs	r0, r0, r2
 8000a66:	426d      	negs	r5, r5
 8000a68:	1b40      	subs	r0, r0, r5
 8000a6a:	4284      	cmp	r4, r0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_ddiv+0x1e0>
 8000a6e:	e1d5      	b.n	8000e1c <__aeabi_ddiv+0x58c>
 8000a70:	4649      	mov	r1, r9
 8000a72:	f7ff fbcb 	bl	800020c <__aeabi_uidivmod>
 8000a76:	9a01      	ldr	r2, [sp, #4]
 8000a78:	040b      	lsls	r3, r1, #16
 8000a7a:	4342      	muls	r2, r0
 8000a7c:	0c31      	lsrs	r1, r6, #16
 8000a7e:	0005      	movs	r5, r0
 8000a80:	4319      	orrs	r1, r3
 8000a82:	428a      	cmp	r2, r1
 8000a84:	d900      	bls.n	8000a88 <__aeabi_ddiv+0x1f8>
 8000a86:	e16c      	b.n	8000d62 <__aeabi_ddiv+0x4d2>
 8000a88:	1a88      	subs	r0, r1, r2
 8000a8a:	4649      	mov	r1, r9
 8000a8c:	f7ff fbbe 	bl	800020c <__aeabi_uidivmod>
 8000a90:	9a01      	ldr	r2, [sp, #4]
 8000a92:	0436      	lsls	r6, r6, #16
 8000a94:	4342      	muls	r2, r0
 8000a96:	0409      	lsls	r1, r1, #16
 8000a98:	0c36      	lsrs	r6, r6, #16
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	430e      	orrs	r6, r1
 8000a9e:	42b2      	cmp	r2, r6
 8000aa0:	d900      	bls.n	8000aa4 <__aeabi_ddiv+0x214>
 8000aa2:	e153      	b.n	8000d4c <__aeabi_ddiv+0x4bc>
 8000aa4:	9803      	ldr	r0, [sp, #12]
 8000aa6:	1ab6      	subs	r6, r6, r2
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	042d      	lsls	r5, r5, #16
 8000aac:	431d      	orrs	r5, r3
 8000aae:	9f02      	ldr	r7, [sp, #8]
 8000ab0:	042b      	lsls	r3, r5, #16
 8000ab2:	0c1b      	lsrs	r3, r3, #16
 8000ab4:	435a      	muls	r2, r3
 8000ab6:	437b      	muls	r3, r7
 8000ab8:	469c      	mov	ip, r3
 8000aba:	0c29      	lsrs	r1, r5, #16
 8000abc:	4348      	muls	r0, r1
 8000abe:	0c13      	lsrs	r3, r2, #16
 8000ac0:	4484      	add	ip, r0
 8000ac2:	4463      	add	r3, ip
 8000ac4:	4379      	muls	r1, r7
 8000ac6:	4298      	cmp	r0, r3
 8000ac8:	d903      	bls.n	8000ad2 <__aeabi_ddiv+0x242>
 8000aca:	2080      	movs	r0, #128	; 0x80
 8000acc:	0240      	lsls	r0, r0, #9
 8000ace:	4684      	mov	ip, r0
 8000ad0:	4461      	add	r1, ip
 8000ad2:	0c18      	lsrs	r0, r3, #16
 8000ad4:	0412      	lsls	r2, r2, #16
 8000ad6:	041b      	lsls	r3, r3, #16
 8000ad8:	0c12      	lsrs	r2, r2, #16
 8000ada:	1841      	adds	r1, r0, r1
 8000adc:	189b      	adds	r3, r3, r2
 8000ade:	428e      	cmp	r6, r1
 8000ae0:	d200      	bcs.n	8000ae4 <__aeabi_ddiv+0x254>
 8000ae2:	e0ff      	b.n	8000ce4 <__aeabi_ddiv+0x454>
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_ddiv+0x258>
 8000ae6:	e0fa      	b.n	8000cde <__aeabi_ddiv+0x44e>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	431d      	orrs	r5, r3
 8000aec:	4a49      	ldr	r2, [pc, #292]	; (8000c14 <__aeabi_ddiv+0x384>)
 8000aee:	445a      	add	r2, fp
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	dc00      	bgt.n	8000af6 <__aeabi_ddiv+0x266>
 8000af4:	e0aa      	b.n	8000c4c <__aeabi_ddiv+0x3bc>
 8000af6:	076b      	lsls	r3, r5, #29
 8000af8:	d000      	beq.n	8000afc <__aeabi_ddiv+0x26c>
 8000afa:	e13d      	b.n	8000d78 <__aeabi_ddiv+0x4e8>
 8000afc:	08ed      	lsrs	r5, r5, #3
 8000afe:	4643      	mov	r3, r8
 8000b00:	01db      	lsls	r3, r3, #7
 8000b02:	d506      	bpl.n	8000b12 <__aeabi_ddiv+0x282>
 8000b04:	4642      	mov	r2, r8
 8000b06:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <__aeabi_ddiv+0x388>)
 8000b08:	401a      	ands	r2, r3
 8000b0a:	4690      	mov	r8, r2
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	00d2      	lsls	r2, r2, #3
 8000b10:	445a      	add	r2, fp
 8000b12:	4b42      	ldr	r3, [pc, #264]	; (8000c1c <__aeabi_ddiv+0x38c>)
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dd00      	ble.n	8000b1a <__aeabi_ddiv+0x28a>
 8000b18:	e71f      	b.n	800095a <__aeabi_ddiv+0xca>
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	075b      	lsls	r3, r3, #29
 8000b1e:	431d      	orrs	r5, r3
 8000b20:	4643      	mov	r3, r8
 8000b22:	0552      	lsls	r2, r2, #21
 8000b24:	025c      	lsls	r4, r3, #9
 8000b26:	0b24      	lsrs	r4, r4, #12
 8000b28:	0d53      	lsrs	r3, r2, #21
 8000b2a:	e708      	b.n	800093e <__aeabi_ddiv+0xae>
 8000b2c:	4652      	mov	r2, sl
 8000b2e:	4322      	orrs	r2, r4
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x2a4>
 8000b32:	e07b      	b.n	8000c2c <__aeabi_ddiv+0x39c>
 8000b34:	2c00      	cmp	r4, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_ddiv+0x2aa>
 8000b38:	e0fa      	b.n	8000d30 <__aeabi_ddiv+0x4a0>
 8000b3a:	0020      	movs	r0, r4
 8000b3c:	f001 f8b0 	bl	8001ca0 <__clzsi2>
 8000b40:	0002      	movs	r2, r0
 8000b42:	3a0b      	subs	r2, #11
 8000b44:	231d      	movs	r3, #29
 8000b46:	0001      	movs	r1, r0
 8000b48:	1a9b      	subs	r3, r3, r2
 8000b4a:	4652      	mov	r2, sl
 8000b4c:	3908      	subs	r1, #8
 8000b4e:	40da      	lsrs	r2, r3
 8000b50:	408c      	lsls	r4, r1
 8000b52:	4314      	orrs	r4, r2
 8000b54:	4652      	mov	r2, sl
 8000b56:	408a      	lsls	r2, r1
 8000b58:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <__aeabi_ddiv+0x390>)
 8000b5a:	4458      	add	r0, fp
 8000b5c:	469b      	mov	fp, r3
 8000b5e:	4483      	add	fp, r0
 8000b60:	2000      	movs	r0, #0
 8000b62:	e6d5      	b.n	8000910 <__aeabi_ddiv+0x80>
 8000b64:	464b      	mov	r3, r9
 8000b66:	4323      	orrs	r3, r4
 8000b68:	4698      	mov	r8, r3
 8000b6a:	d044      	beq.n	8000bf6 <__aeabi_ddiv+0x366>
 8000b6c:	2c00      	cmp	r4, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_ddiv+0x2e2>
 8000b70:	e0ce      	b.n	8000d10 <__aeabi_ddiv+0x480>
 8000b72:	0020      	movs	r0, r4
 8000b74:	f001 f894 	bl	8001ca0 <__clzsi2>
 8000b78:	0001      	movs	r1, r0
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	390b      	subs	r1, #11
 8000b7e:	231d      	movs	r3, #29
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	4649      	mov	r1, r9
 8000b84:	0010      	movs	r0, r2
 8000b86:	40d9      	lsrs	r1, r3
 8000b88:	3808      	subs	r0, #8
 8000b8a:	4084      	lsls	r4, r0
 8000b8c:	000b      	movs	r3, r1
 8000b8e:	464d      	mov	r5, r9
 8000b90:	4323      	orrs	r3, r4
 8000b92:	4698      	mov	r8, r3
 8000b94:	4085      	lsls	r5, r0
 8000b96:	4823      	ldr	r0, [pc, #140]	; (8000c24 <__aeabi_ddiv+0x394>)
 8000b98:	1a83      	subs	r3, r0, r2
 8000b9a:	469b      	mov	fp, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	4699      	mov	r9, r3
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	e69a      	b.n	80008da <__aeabi_ddiv+0x4a>
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	4323      	orrs	r3, r4
 8000ba8:	4698      	mov	r8, r3
 8000baa:	d11d      	bne.n	8000be8 <__aeabi_ddiv+0x358>
 8000bac:	2308      	movs	r3, #8
 8000bae:	4699      	mov	r9, r3
 8000bb0:	3b06      	subs	r3, #6
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	4683      	mov	fp, r0
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	e68f      	b.n	80008da <__aeabi_ddiv+0x4a>
 8000bba:	4652      	mov	r2, sl
 8000bbc:	4322      	orrs	r2, r4
 8000bbe:	d109      	bne.n	8000bd4 <__aeabi_ddiv+0x344>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	4649      	mov	r1, r9
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <__aeabi_ddiv+0x398>)
 8000bc8:	4689      	mov	r9, r1
 8000bca:	469c      	mov	ip, r3
 8000bcc:	2400      	movs	r4, #0
 8000bce:	2002      	movs	r0, #2
 8000bd0:	44e3      	add	fp, ip
 8000bd2:	e69d      	b.n	8000910 <__aeabi_ddiv+0x80>
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <__aeabi_ddiv+0x398>)
 8000bdc:	4691      	mov	r9, r2
 8000bde:	469c      	mov	ip, r3
 8000be0:	4652      	mov	r2, sl
 8000be2:	2003      	movs	r0, #3
 8000be4:	44e3      	add	fp, ip
 8000be6:	e693      	b.n	8000910 <__aeabi_ddiv+0x80>
 8000be8:	230c      	movs	r3, #12
 8000bea:	4699      	mov	r9, r3
 8000bec:	3b09      	subs	r3, #9
 8000bee:	46a0      	mov	r8, r4
 8000bf0:	4683      	mov	fp, r0
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	e671      	b.n	80008da <__aeabi_ddiv+0x4a>
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	4699      	mov	r9, r3
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	469b      	mov	fp, r3
 8000bfe:	3301      	adds	r3, #1
 8000c00:	2500      	movs	r5, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	e669      	b.n	80008da <__aeabi_ddiv+0x4a>
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	000007ff 	.word	0x000007ff
 8000c0c:	fffffc01 	.word	0xfffffc01
 8000c10:	080045cc 	.word	0x080045cc
 8000c14:	000003ff 	.word	0x000003ff
 8000c18:	feffffff 	.word	0xfeffffff
 8000c1c:	000007fe 	.word	0x000007fe
 8000c20:	000003f3 	.word	0x000003f3
 8000c24:	fffffc0d 	.word	0xfffffc0d
 8000c28:	fffff801 	.word	0xfffff801
 8000c2c:	4649      	mov	r1, r9
 8000c2e:	2301      	movs	r3, #1
 8000c30:	4319      	orrs	r1, r3
 8000c32:	4689      	mov	r9, r1
 8000c34:	2400      	movs	r4, #0
 8000c36:	2001      	movs	r0, #1
 8000c38:	e66a      	b.n	8000910 <__aeabi_ddiv+0x80>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2480      	movs	r4, #128	; 0x80
 8000c3e:	469a      	mov	sl, r3
 8000c40:	2500      	movs	r5, #0
 8000c42:	4b8a      	ldr	r3, [pc, #552]	; (8000e6c <__aeabi_ddiv+0x5dc>)
 8000c44:	0324      	lsls	r4, r4, #12
 8000c46:	e67a      	b.n	800093e <__aeabi_ddiv+0xae>
 8000c48:	2501      	movs	r5, #1
 8000c4a:	426d      	negs	r5, r5
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	2b38      	cmp	r3, #56	; 0x38
 8000c52:	dd00      	ble.n	8000c56 <__aeabi_ddiv+0x3c6>
 8000c54:	e670      	b.n	8000938 <__aeabi_ddiv+0xa8>
 8000c56:	2b1f      	cmp	r3, #31
 8000c58:	dc00      	bgt.n	8000c5c <__aeabi_ddiv+0x3cc>
 8000c5a:	e0bf      	b.n	8000ddc <__aeabi_ddiv+0x54c>
 8000c5c:	211f      	movs	r1, #31
 8000c5e:	4249      	negs	r1, r1
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	4641      	mov	r1, r8
 8000c64:	40d1      	lsrs	r1, r2
 8000c66:	000a      	movs	r2, r1
 8000c68:	2b20      	cmp	r3, #32
 8000c6a:	d004      	beq.n	8000c76 <__aeabi_ddiv+0x3e6>
 8000c6c:	4641      	mov	r1, r8
 8000c6e:	4b80      	ldr	r3, [pc, #512]	; (8000e70 <__aeabi_ddiv+0x5e0>)
 8000c70:	445b      	add	r3, fp
 8000c72:	4099      	lsls	r1, r3
 8000c74:	430d      	orrs	r5, r1
 8000c76:	1e6b      	subs	r3, r5, #1
 8000c78:	419d      	sbcs	r5, r3
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	432a      	orrs	r2, r5
 8000c7e:	001d      	movs	r5, r3
 8000c80:	2400      	movs	r4, #0
 8000c82:	4015      	ands	r5, r2
 8000c84:	4213      	tst	r3, r2
 8000c86:	d100      	bne.n	8000c8a <__aeabi_ddiv+0x3fa>
 8000c88:	e0d4      	b.n	8000e34 <__aeabi_ddiv+0x5a4>
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4011      	ands	r1, r2
 8000c90:	2904      	cmp	r1, #4
 8000c92:	d100      	bne.n	8000c96 <__aeabi_ddiv+0x406>
 8000c94:	e0cb      	b.n	8000e2e <__aeabi_ddiv+0x59e>
 8000c96:	1d11      	adds	r1, r2, #4
 8000c98:	4291      	cmp	r1, r2
 8000c9a:	4192      	sbcs	r2, r2
 8000c9c:	4252      	negs	r2, r2
 8000c9e:	189b      	adds	r3, r3, r2
 8000ca0:	000a      	movs	r2, r1
 8000ca2:	0219      	lsls	r1, r3, #8
 8000ca4:	d400      	bmi.n	8000ca8 <__aeabi_ddiv+0x418>
 8000ca6:	e0c2      	b.n	8000e2e <__aeabi_ddiv+0x59e>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	e646      	b.n	800093e <__aeabi_ddiv+0xae>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	4641      	mov	r1, r8
 8000cb4:	031b      	lsls	r3, r3, #12
 8000cb6:	4219      	tst	r1, r3
 8000cb8:	d008      	beq.n	8000ccc <__aeabi_ddiv+0x43c>
 8000cba:	421c      	tst	r4, r3
 8000cbc:	d106      	bne.n	8000ccc <__aeabi_ddiv+0x43c>
 8000cbe:	431c      	orrs	r4, r3
 8000cc0:	0324      	lsls	r4, r4, #12
 8000cc2:	46ba      	mov	sl, r7
 8000cc4:	0015      	movs	r5, r2
 8000cc6:	4b69      	ldr	r3, [pc, #420]	; (8000e6c <__aeabi_ddiv+0x5dc>)
 8000cc8:	0b24      	lsrs	r4, r4, #12
 8000cca:	e638      	b.n	800093e <__aeabi_ddiv+0xae>
 8000ccc:	2480      	movs	r4, #128	; 0x80
 8000cce:	4643      	mov	r3, r8
 8000cd0:	0324      	lsls	r4, r4, #12
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	0324      	lsls	r4, r4, #12
 8000cd6:	46b2      	mov	sl, r6
 8000cd8:	4b64      	ldr	r3, [pc, #400]	; (8000e6c <__aeabi_ddiv+0x5dc>)
 8000cda:	0b24      	lsrs	r4, r4, #12
 8000cdc:	e62f      	b.n	800093e <__aeabi_ddiv+0xae>
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_ddiv+0x454>
 8000ce2:	e703      	b.n	8000aec <__aeabi_ddiv+0x25c>
 8000ce4:	19a6      	adds	r6, r4, r6
 8000ce6:	1e68      	subs	r0, r5, #1
 8000ce8:	42a6      	cmp	r6, r4
 8000cea:	d200      	bcs.n	8000cee <__aeabi_ddiv+0x45e>
 8000cec:	e08d      	b.n	8000e0a <__aeabi_ddiv+0x57a>
 8000cee:	428e      	cmp	r6, r1
 8000cf0:	d200      	bcs.n	8000cf4 <__aeabi_ddiv+0x464>
 8000cf2:	e0a3      	b.n	8000e3c <__aeabi_ddiv+0x5ac>
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_ddiv+0x468>
 8000cf6:	e0b3      	b.n	8000e60 <__aeabi_ddiv+0x5d0>
 8000cf8:	0005      	movs	r5, r0
 8000cfa:	e6f5      	b.n	8000ae8 <__aeabi_ddiv+0x258>
 8000cfc:	42aa      	cmp	r2, r5
 8000cfe:	d900      	bls.n	8000d02 <__aeabi_ddiv+0x472>
 8000d00:	e639      	b.n	8000976 <__aeabi_ddiv+0xe6>
 8000d02:	4643      	mov	r3, r8
 8000d04:	07de      	lsls	r6, r3, #31
 8000d06:	0858      	lsrs	r0, r3, #1
 8000d08:	086b      	lsrs	r3, r5, #1
 8000d0a:	431e      	orrs	r6, r3
 8000d0c:	07ed      	lsls	r5, r5, #31
 8000d0e:	e639      	b.n	8000984 <__aeabi_ddiv+0xf4>
 8000d10:	4648      	mov	r0, r9
 8000d12:	f000 ffc5 	bl	8001ca0 <__clzsi2>
 8000d16:	0001      	movs	r1, r0
 8000d18:	0002      	movs	r2, r0
 8000d1a:	3115      	adds	r1, #21
 8000d1c:	3220      	adds	r2, #32
 8000d1e:	291c      	cmp	r1, #28
 8000d20:	dc00      	bgt.n	8000d24 <__aeabi_ddiv+0x494>
 8000d22:	e72c      	b.n	8000b7e <__aeabi_ddiv+0x2ee>
 8000d24:	464b      	mov	r3, r9
 8000d26:	3808      	subs	r0, #8
 8000d28:	4083      	lsls	r3, r0
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	4698      	mov	r8, r3
 8000d2e:	e732      	b.n	8000b96 <__aeabi_ddiv+0x306>
 8000d30:	f000 ffb6 	bl	8001ca0 <__clzsi2>
 8000d34:	0003      	movs	r3, r0
 8000d36:	001a      	movs	r2, r3
 8000d38:	3215      	adds	r2, #21
 8000d3a:	3020      	adds	r0, #32
 8000d3c:	2a1c      	cmp	r2, #28
 8000d3e:	dc00      	bgt.n	8000d42 <__aeabi_ddiv+0x4b2>
 8000d40:	e700      	b.n	8000b44 <__aeabi_ddiv+0x2b4>
 8000d42:	4654      	mov	r4, sl
 8000d44:	3b08      	subs	r3, #8
 8000d46:	2200      	movs	r2, #0
 8000d48:	409c      	lsls	r4, r3
 8000d4a:	e705      	b.n	8000b58 <__aeabi_ddiv+0x2c8>
 8000d4c:	1936      	adds	r6, r6, r4
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	42b4      	cmp	r4, r6
 8000d52:	d900      	bls.n	8000d56 <__aeabi_ddiv+0x4c6>
 8000d54:	e6a6      	b.n	8000aa4 <__aeabi_ddiv+0x214>
 8000d56:	42b2      	cmp	r2, r6
 8000d58:	d800      	bhi.n	8000d5c <__aeabi_ddiv+0x4cc>
 8000d5a:	e6a3      	b.n	8000aa4 <__aeabi_ddiv+0x214>
 8000d5c:	1e83      	subs	r3, r0, #2
 8000d5e:	1936      	adds	r6, r6, r4
 8000d60:	e6a0      	b.n	8000aa4 <__aeabi_ddiv+0x214>
 8000d62:	1909      	adds	r1, r1, r4
 8000d64:	3d01      	subs	r5, #1
 8000d66:	428c      	cmp	r4, r1
 8000d68:	d900      	bls.n	8000d6c <__aeabi_ddiv+0x4dc>
 8000d6a:	e68d      	b.n	8000a88 <__aeabi_ddiv+0x1f8>
 8000d6c:	428a      	cmp	r2, r1
 8000d6e:	d800      	bhi.n	8000d72 <__aeabi_ddiv+0x4e2>
 8000d70:	e68a      	b.n	8000a88 <__aeabi_ddiv+0x1f8>
 8000d72:	1e85      	subs	r5, r0, #2
 8000d74:	1909      	adds	r1, r1, r4
 8000d76:	e687      	b.n	8000a88 <__aeabi_ddiv+0x1f8>
 8000d78:	230f      	movs	r3, #15
 8000d7a:	402b      	ands	r3, r5
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x4f2>
 8000d80:	e6bc      	b.n	8000afc <__aeabi_ddiv+0x26c>
 8000d82:	2305      	movs	r3, #5
 8000d84:	425b      	negs	r3, r3
 8000d86:	42ab      	cmp	r3, r5
 8000d88:	419b      	sbcs	r3, r3
 8000d8a:	3504      	adds	r5, #4
 8000d8c:	425b      	negs	r3, r3
 8000d8e:	08ed      	lsrs	r5, r5, #3
 8000d90:	4498      	add	r8, r3
 8000d92:	e6b4      	b.n	8000afe <__aeabi_ddiv+0x26e>
 8000d94:	42af      	cmp	r7, r5
 8000d96:	d900      	bls.n	8000d9a <__aeabi_ddiv+0x50a>
 8000d98:	e660      	b.n	8000a5c <__aeabi_ddiv+0x1cc>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	d804      	bhi.n	8000da8 <__aeabi_ddiv+0x518>
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_ddiv+0x512>
 8000da0:	e65c      	b.n	8000a5c <__aeabi_ddiv+0x1cc>
 8000da2:	42ae      	cmp	r6, r5
 8000da4:	d800      	bhi.n	8000da8 <__aeabi_ddiv+0x518>
 8000da6:	e659      	b.n	8000a5c <__aeabi_ddiv+0x1cc>
 8000da8:	2302      	movs	r3, #2
 8000daa:	425b      	negs	r3, r3
 8000dac:	469c      	mov	ip, r3
 8000dae:	9b00      	ldr	r3, [sp, #0]
 8000db0:	44e0      	add	r8, ip
 8000db2:	469c      	mov	ip, r3
 8000db4:	4465      	add	r5, ip
 8000db6:	429d      	cmp	r5, r3
 8000db8:	419b      	sbcs	r3, r3
 8000dba:	425b      	negs	r3, r3
 8000dbc:	191b      	adds	r3, r3, r4
 8000dbe:	18c0      	adds	r0, r0, r3
 8000dc0:	e64d      	b.n	8000a5e <__aeabi_ddiv+0x1ce>
 8000dc2:	428a      	cmp	r2, r1
 8000dc4:	d800      	bhi.n	8000dc8 <__aeabi_ddiv+0x538>
 8000dc6:	e60e      	b.n	80009e6 <__aeabi_ddiv+0x156>
 8000dc8:	1e83      	subs	r3, r0, #2
 8000dca:	1909      	adds	r1, r1, r4
 8000dcc:	e60b      	b.n	80009e6 <__aeabi_ddiv+0x156>
 8000dce:	428a      	cmp	r2, r1
 8000dd0:	d800      	bhi.n	8000dd4 <__aeabi_ddiv+0x544>
 8000dd2:	e5f4      	b.n	80009be <__aeabi_ddiv+0x12e>
 8000dd4:	1e83      	subs	r3, r0, #2
 8000dd6:	4698      	mov	r8, r3
 8000dd8:	1909      	adds	r1, r1, r4
 8000dda:	e5f0      	b.n	80009be <__aeabi_ddiv+0x12e>
 8000ddc:	4925      	ldr	r1, [pc, #148]	; (8000e74 <__aeabi_ddiv+0x5e4>)
 8000dde:	0028      	movs	r0, r5
 8000de0:	4459      	add	r1, fp
 8000de2:	408d      	lsls	r5, r1
 8000de4:	4642      	mov	r2, r8
 8000de6:	408a      	lsls	r2, r1
 8000de8:	1e69      	subs	r1, r5, #1
 8000dea:	418d      	sbcs	r5, r1
 8000dec:	4641      	mov	r1, r8
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	40d9      	lsrs	r1, r3
 8000df2:	4302      	orrs	r2, r0
 8000df4:	432a      	orrs	r2, r5
 8000df6:	000b      	movs	r3, r1
 8000df8:	0751      	lsls	r1, r2, #29
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_ddiv+0x56e>
 8000dfc:	e751      	b.n	8000ca2 <__aeabi_ddiv+0x412>
 8000dfe:	210f      	movs	r1, #15
 8000e00:	4011      	ands	r1, r2
 8000e02:	2904      	cmp	r1, #4
 8000e04:	d000      	beq.n	8000e08 <__aeabi_ddiv+0x578>
 8000e06:	e746      	b.n	8000c96 <__aeabi_ddiv+0x406>
 8000e08:	e74b      	b.n	8000ca2 <__aeabi_ddiv+0x412>
 8000e0a:	0005      	movs	r5, r0
 8000e0c:	428e      	cmp	r6, r1
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_ddiv+0x582>
 8000e10:	e66a      	b.n	8000ae8 <__aeabi_ddiv+0x258>
 8000e12:	9a00      	ldr	r2, [sp, #0]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d000      	beq.n	8000e1a <__aeabi_ddiv+0x58a>
 8000e18:	e666      	b.n	8000ae8 <__aeabi_ddiv+0x258>
 8000e1a:	e667      	b.n	8000aec <__aeabi_ddiv+0x25c>
 8000e1c:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <__aeabi_ddiv+0x5e8>)
 8000e1e:	445a      	add	r2, fp
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	dc00      	bgt.n	8000e26 <__aeabi_ddiv+0x596>
 8000e24:	e710      	b.n	8000c48 <__aeabi_ddiv+0x3b8>
 8000e26:	2301      	movs	r3, #1
 8000e28:	2500      	movs	r5, #0
 8000e2a:	4498      	add	r8, r3
 8000e2c:	e667      	b.n	8000afe <__aeabi_ddiv+0x26e>
 8000e2e:	075d      	lsls	r5, r3, #29
 8000e30:	025b      	lsls	r3, r3, #9
 8000e32:	0b1c      	lsrs	r4, r3, #12
 8000e34:	08d2      	lsrs	r2, r2, #3
 8000e36:	2300      	movs	r3, #0
 8000e38:	4315      	orrs	r5, r2
 8000e3a:	e580      	b.n	800093e <__aeabi_ddiv+0xae>
 8000e3c:	9800      	ldr	r0, [sp, #0]
 8000e3e:	3d02      	subs	r5, #2
 8000e40:	0042      	lsls	r2, r0, #1
 8000e42:	4282      	cmp	r2, r0
 8000e44:	41bf      	sbcs	r7, r7
 8000e46:	427f      	negs	r7, r7
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	1936      	adds	r6, r6, r4
 8000e4c:	9200      	str	r2, [sp, #0]
 8000e4e:	e7dd      	b.n	8000e0c <__aeabi_ddiv+0x57c>
 8000e50:	2480      	movs	r4, #128	; 0x80
 8000e52:	4643      	mov	r3, r8
 8000e54:	0324      	lsls	r4, r4, #12
 8000e56:	431c      	orrs	r4, r3
 8000e58:	0324      	lsls	r4, r4, #12
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__aeabi_ddiv+0x5dc>)
 8000e5c:	0b24      	lsrs	r4, r4, #12
 8000e5e:	e56e      	b.n	800093e <__aeabi_ddiv+0xae>
 8000e60:	9a00      	ldr	r2, [sp, #0]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d3ea      	bcc.n	8000e3c <__aeabi_ddiv+0x5ac>
 8000e66:	0005      	movs	r5, r0
 8000e68:	e7d3      	b.n	8000e12 <__aeabi_ddiv+0x582>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	000007ff 	.word	0x000007ff
 8000e70:	0000043e 	.word	0x0000043e
 8000e74:	0000041e 	.word	0x0000041e
 8000e78:	000003ff 	.word	0x000003ff

08000e7c <__aeabi_dmul>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	464e      	mov	r6, r9
 8000e82:	4645      	mov	r5, r8
 8000e84:	46de      	mov	lr, fp
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	4698      	mov	r8, r3
 8000e8a:	030c      	lsls	r4, r1, #12
 8000e8c:	004b      	lsls	r3, r1, #1
 8000e8e:	0006      	movs	r6, r0
 8000e90:	4692      	mov	sl, r2
 8000e92:	b087      	sub	sp, #28
 8000e94:	0b24      	lsrs	r4, r4, #12
 8000e96:	0d5b      	lsrs	r3, r3, #21
 8000e98:	0fcf      	lsrs	r7, r1, #31
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dmul+0x24>
 8000e9e:	e15c      	b.n	800115a <__aeabi_dmul+0x2de>
 8000ea0:	4ad9      	ldr	r2, [pc, #868]	; (8001208 <__aeabi_dmul+0x38c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dmul+0x2c>
 8000ea6:	e175      	b.n	8001194 <__aeabi_dmul+0x318>
 8000ea8:	0f42      	lsrs	r2, r0, #29
 8000eaa:	00e4      	lsls	r4, r4, #3
 8000eac:	4314      	orrs	r4, r2
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	0412      	lsls	r2, r2, #16
 8000eb2:	4314      	orrs	r4, r2
 8000eb4:	4ad5      	ldr	r2, [pc, #852]	; (800120c <__aeabi_dmul+0x390>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4694      	mov	ip, r2
 8000eba:	4463      	add	r3, ip
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	4699      	mov	r9, r3
 8000ec2:	469b      	mov	fp, r3
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	031e      	lsls	r6, r3, #12
 8000eca:	0fd2      	lsrs	r2, r2, #31
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4650      	mov	r0, sl
 8000ed0:	4690      	mov	r8, r2
 8000ed2:	0b36      	lsrs	r6, r6, #12
 8000ed4:	0d5b      	lsrs	r3, r3, #21
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dmul+0x5e>
 8000ed8:	e120      	b.n	800111c <__aeabi_dmul+0x2a0>
 8000eda:	4acb      	ldr	r2, [pc, #812]	; (8001208 <__aeabi_dmul+0x38c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dmul+0x66>
 8000ee0:	e162      	b.n	80011a8 <__aeabi_dmul+0x32c>
 8000ee2:	49ca      	ldr	r1, [pc, #808]	; (800120c <__aeabi_dmul+0x390>)
 8000ee4:	0f42      	lsrs	r2, r0, #29
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	9900      	ldr	r1, [sp, #0]
 8000eea:	4463      	add	r3, ip
 8000eec:	00f6      	lsls	r6, r6, #3
 8000eee:	468c      	mov	ip, r1
 8000ef0:	4316      	orrs	r6, r2
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	449c      	add	ip, r3
 8000ef6:	0412      	lsls	r2, r2, #16
 8000ef8:	4663      	mov	r3, ip
 8000efa:	4316      	orrs	r6, r2
 8000efc:	00c2      	lsls	r2, r0, #3
 8000efe:	2000      	movs	r0, #0
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	9900      	ldr	r1, [sp, #0]
 8000f04:	4643      	mov	r3, r8
 8000f06:	3101      	adds	r1, #1
 8000f08:	468c      	mov	ip, r1
 8000f0a:	4649      	mov	r1, r9
 8000f0c:	407b      	eors	r3, r7
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	290f      	cmp	r1, #15
 8000f12:	d826      	bhi.n	8000f62 <__aeabi_dmul+0xe6>
 8000f14:	4bbe      	ldr	r3, [pc, #760]	; (8001210 <__aeabi_dmul+0x394>)
 8000f16:	0089      	lsls	r1, r1, #2
 8000f18:	5859      	ldr	r1, [r3, r1]
 8000f1a:	468f      	mov	pc, r1
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	0034      	movs	r4, r6
 8000f22:	0015      	movs	r5, r2
 8000f24:	4683      	mov	fp, r0
 8000f26:	465b      	mov	r3, fp
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d016      	beq.n	8000f5a <__aeabi_dmul+0xde>
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dmul+0xb6>
 8000f30:	e203      	b.n	800133a <__aeabi_dmul+0x4be>
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d000      	beq.n	8000f38 <__aeabi_dmul+0xbc>
 8000f36:	e0cd      	b.n	80010d4 <__aeabi_dmul+0x258>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	9b01      	ldr	r3, [sp, #4]
 8000f40:	0512      	lsls	r2, r2, #20
 8000f42:	4322      	orrs	r2, r4
 8000f44:	07db      	lsls	r3, r3, #31
 8000f46:	431a      	orrs	r2, r3
 8000f48:	0028      	movs	r0, r5
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	b007      	add	sp, #28
 8000f4e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f50:	46bb      	mov	fp, r7
 8000f52:	46b2      	mov	sl, r6
 8000f54:	46a9      	mov	r9, r5
 8000f56:	46a0      	mov	r8, r4
 8000f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f5a:	2400      	movs	r4, #0
 8000f5c:	2500      	movs	r5, #0
 8000f5e:	4aaa      	ldr	r2, [pc, #680]	; (8001208 <__aeabi_dmul+0x38c>)
 8000f60:	e7ed      	b.n	8000f3e <__aeabi_dmul+0xc2>
 8000f62:	0c28      	lsrs	r0, r5, #16
 8000f64:	042d      	lsls	r5, r5, #16
 8000f66:	0c2d      	lsrs	r5, r5, #16
 8000f68:	002b      	movs	r3, r5
 8000f6a:	0c11      	lsrs	r1, r2, #16
 8000f6c:	0412      	lsls	r2, r2, #16
 8000f6e:	0c12      	lsrs	r2, r2, #16
 8000f70:	4353      	muls	r3, r2
 8000f72:	4698      	mov	r8, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	002f      	movs	r7, r5
 8000f78:	4343      	muls	r3, r0
 8000f7a:	4699      	mov	r9, r3
 8000f7c:	434f      	muls	r7, r1
 8000f7e:	444f      	add	r7, r9
 8000f80:	46bb      	mov	fp, r7
 8000f82:	4647      	mov	r7, r8
 8000f84:	000b      	movs	r3, r1
 8000f86:	0c3f      	lsrs	r7, r7, #16
 8000f88:	46ba      	mov	sl, r7
 8000f8a:	4343      	muls	r3, r0
 8000f8c:	44da      	add	sl, fp
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	45d1      	cmp	r9, sl
 8000f92:	d904      	bls.n	8000f9e <__aeabi_dmul+0x122>
 8000f94:	2780      	movs	r7, #128	; 0x80
 8000f96:	027f      	lsls	r7, r7, #9
 8000f98:	46b9      	mov	r9, r7
 8000f9a:	444b      	add	r3, r9
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	4653      	mov	r3, sl
 8000fa0:	0c1b      	lsrs	r3, r3, #16
 8000fa2:	469b      	mov	fp, r3
 8000fa4:	4653      	mov	r3, sl
 8000fa6:	041f      	lsls	r7, r3, #16
 8000fa8:	4643      	mov	r3, r8
 8000faa:	041b      	lsls	r3, r3, #16
 8000fac:	0c1b      	lsrs	r3, r3, #16
 8000fae:	4698      	mov	r8, r3
 8000fb0:	003b      	movs	r3, r7
 8000fb2:	4443      	add	r3, r8
 8000fb4:	9304      	str	r3, [sp, #16]
 8000fb6:	0c33      	lsrs	r3, r6, #16
 8000fb8:	0436      	lsls	r6, r6, #16
 8000fba:	0c36      	lsrs	r6, r6, #16
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	0033      	movs	r3, r6
 8000fc0:	4343      	muls	r3, r0
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	4643      	mov	r3, r8
 8000fc6:	4343      	muls	r3, r0
 8000fc8:	002f      	movs	r7, r5
 8000fca:	469a      	mov	sl, r3
 8000fcc:	4643      	mov	r3, r8
 8000fce:	4377      	muls	r7, r6
 8000fd0:	435d      	muls	r5, r3
 8000fd2:	0c38      	lsrs	r0, r7, #16
 8000fd4:	444d      	add	r5, r9
 8000fd6:	1945      	adds	r5, r0, r5
 8000fd8:	45a9      	cmp	r9, r5
 8000fda:	d903      	bls.n	8000fe4 <__aeabi_dmul+0x168>
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	025b      	lsls	r3, r3, #9
 8000fe0:	4699      	mov	r9, r3
 8000fe2:	44ca      	add	sl, r9
 8000fe4:	043f      	lsls	r7, r7, #16
 8000fe6:	0c28      	lsrs	r0, r5, #16
 8000fe8:	0c3f      	lsrs	r7, r7, #16
 8000fea:	042d      	lsls	r5, r5, #16
 8000fec:	19ed      	adds	r5, r5, r7
 8000fee:	0c27      	lsrs	r7, r4, #16
 8000ff0:	0424      	lsls	r4, r4, #16
 8000ff2:	0c24      	lsrs	r4, r4, #16
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	0020      	movs	r0, r4
 8000ff8:	4350      	muls	r0, r2
 8000ffa:	437a      	muls	r2, r7
 8000ffc:	4691      	mov	r9, r2
 8000ffe:	003a      	movs	r2, r7
 8001000:	4453      	add	r3, sl
 8001002:	9305      	str	r3, [sp, #20]
 8001004:	0c03      	lsrs	r3, r0, #16
 8001006:	469a      	mov	sl, r3
 8001008:	434a      	muls	r2, r1
 800100a:	4361      	muls	r1, r4
 800100c:	4449      	add	r1, r9
 800100e:	4451      	add	r1, sl
 8001010:	44ab      	add	fp, r5
 8001012:	4589      	cmp	r9, r1
 8001014:	d903      	bls.n	800101e <__aeabi_dmul+0x1a2>
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	025b      	lsls	r3, r3, #9
 800101a:	4699      	mov	r9, r3
 800101c:	444a      	add	r2, r9
 800101e:	0400      	lsls	r0, r0, #16
 8001020:	0c0b      	lsrs	r3, r1, #16
 8001022:	0c00      	lsrs	r0, r0, #16
 8001024:	0409      	lsls	r1, r1, #16
 8001026:	1809      	adds	r1, r1, r0
 8001028:	0020      	movs	r0, r4
 800102a:	4699      	mov	r9, r3
 800102c:	4643      	mov	r3, r8
 800102e:	4370      	muls	r0, r6
 8001030:	435c      	muls	r4, r3
 8001032:	437e      	muls	r6, r7
 8001034:	435f      	muls	r7, r3
 8001036:	0c03      	lsrs	r3, r0, #16
 8001038:	4698      	mov	r8, r3
 800103a:	19a4      	adds	r4, r4, r6
 800103c:	4444      	add	r4, r8
 800103e:	444a      	add	r2, r9
 8001040:	9703      	str	r7, [sp, #12]
 8001042:	42a6      	cmp	r6, r4
 8001044:	d904      	bls.n	8001050 <__aeabi_dmul+0x1d4>
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	4698      	mov	r8, r3
 800104c:	4447      	add	r7, r8
 800104e:	9703      	str	r7, [sp, #12]
 8001050:	0423      	lsls	r3, r4, #16
 8001052:	9e02      	ldr	r6, [sp, #8]
 8001054:	469a      	mov	sl, r3
 8001056:	9b05      	ldr	r3, [sp, #20]
 8001058:	445e      	add	r6, fp
 800105a:	4698      	mov	r8, r3
 800105c:	42ae      	cmp	r6, r5
 800105e:	41ad      	sbcs	r5, r5
 8001060:	1876      	adds	r6, r6, r1
 8001062:	428e      	cmp	r6, r1
 8001064:	4189      	sbcs	r1, r1
 8001066:	0400      	lsls	r0, r0, #16
 8001068:	0c00      	lsrs	r0, r0, #16
 800106a:	4450      	add	r0, sl
 800106c:	4440      	add	r0, r8
 800106e:	426d      	negs	r5, r5
 8001070:	1947      	adds	r7, r0, r5
 8001072:	46b8      	mov	r8, r7
 8001074:	4693      	mov	fp, r2
 8001076:	4249      	negs	r1, r1
 8001078:	4689      	mov	r9, r1
 800107a:	44c3      	add	fp, r8
 800107c:	44d9      	add	r9, fp
 800107e:	4298      	cmp	r0, r3
 8001080:	4180      	sbcs	r0, r0
 8001082:	45a8      	cmp	r8, r5
 8001084:	41ad      	sbcs	r5, r5
 8001086:	4593      	cmp	fp, r2
 8001088:	4192      	sbcs	r2, r2
 800108a:	4589      	cmp	r9, r1
 800108c:	4189      	sbcs	r1, r1
 800108e:	426d      	negs	r5, r5
 8001090:	4240      	negs	r0, r0
 8001092:	4328      	orrs	r0, r5
 8001094:	0c24      	lsrs	r4, r4, #16
 8001096:	4252      	negs	r2, r2
 8001098:	4249      	negs	r1, r1
 800109a:	430a      	orrs	r2, r1
 800109c:	9b03      	ldr	r3, [sp, #12]
 800109e:	1900      	adds	r0, r0, r4
 80010a0:	1880      	adds	r0, r0, r2
 80010a2:	18c7      	adds	r7, r0, r3
 80010a4:	464b      	mov	r3, r9
 80010a6:	0ddc      	lsrs	r4, r3, #23
 80010a8:	9b04      	ldr	r3, [sp, #16]
 80010aa:	0275      	lsls	r5, r6, #9
 80010ac:	431d      	orrs	r5, r3
 80010ae:	1e6a      	subs	r2, r5, #1
 80010b0:	4195      	sbcs	r5, r2
 80010b2:	464b      	mov	r3, r9
 80010b4:	0df6      	lsrs	r6, r6, #23
 80010b6:	027f      	lsls	r7, r7, #9
 80010b8:	4335      	orrs	r5, r6
 80010ba:	025a      	lsls	r2, r3, #9
 80010bc:	433c      	orrs	r4, r7
 80010be:	4315      	orrs	r5, r2
 80010c0:	01fb      	lsls	r3, r7, #7
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dmul+0x24a>
 80010c4:	e11c      	b.n	8001300 <__aeabi_dmul+0x484>
 80010c6:	2101      	movs	r1, #1
 80010c8:	086a      	lsrs	r2, r5, #1
 80010ca:	400d      	ands	r5, r1
 80010cc:	4315      	orrs	r5, r2
 80010ce:	07e2      	lsls	r2, r4, #31
 80010d0:	4315      	orrs	r5, r2
 80010d2:	0864      	lsrs	r4, r4, #1
 80010d4:	494f      	ldr	r1, [pc, #316]	; (8001214 <__aeabi_dmul+0x398>)
 80010d6:	4461      	add	r1, ip
 80010d8:	2900      	cmp	r1, #0
 80010da:	dc00      	bgt.n	80010de <__aeabi_dmul+0x262>
 80010dc:	e0b0      	b.n	8001240 <__aeabi_dmul+0x3c4>
 80010de:	076b      	lsls	r3, r5, #29
 80010e0:	d009      	beq.n	80010f6 <__aeabi_dmul+0x27a>
 80010e2:	220f      	movs	r2, #15
 80010e4:	402a      	ands	r2, r5
 80010e6:	2a04      	cmp	r2, #4
 80010e8:	d005      	beq.n	80010f6 <__aeabi_dmul+0x27a>
 80010ea:	1d2a      	adds	r2, r5, #4
 80010ec:	42aa      	cmp	r2, r5
 80010ee:	41ad      	sbcs	r5, r5
 80010f0:	426d      	negs	r5, r5
 80010f2:	1964      	adds	r4, r4, r5
 80010f4:	0015      	movs	r5, r2
 80010f6:	01e3      	lsls	r3, r4, #7
 80010f8:	d504      	bpl.n	8001104 <__aeabi_dmul+0x288>
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	4a46      	ldr	r2, [pc, #280]	; (8001218 <__aeabi_dmul+0x39c>)
 80010fe:	00c9      	lsls	r1, r1, #3
 8001100:	4014      	ands	r4, r2
 8001102:	4461      	add	r1, ip
 8001104:	4a45      	ldr	r2, [pc, #276]	; (800121c <__aeabi_dmul+0x3a0>)
 8001106:	4291      	cmp	r1, r2
 8001108:	dd00      	ble.n	800110c <__aeabi_dmul+0x290>
 800110a:	e726      	b.n	8000f5a <__aeabi_dmul+0xde>
 800110c:	0762      	lsls	r2, r4, #29
 800110e:	08ed      	lsrs	r5, r5, #3
 8001110:	0264      	lsls	r4, r4, #9
 8001112:	0549      	lsls	r1, r1, #21
 8001114:	4315      	orrs	r5, r2
 8001116:	0b24      	lsrs	r4, r4, #12
 8001118:	0d4a      	lsrs	r2, r1, #21
 800111a:	e710      	b.n	8000f3e <__aeabi_dmul+0xc2>
 800111c:	4652      	mov	r2, sl
 800111e:	4332      	orrs	r2, r6
 8001120:	d100      	bne.n	8001124 <__aeabi_dmul+0x2a8>
 8001122:	e07f      	b.n	8001224 <__aeabi_dmul+0x3a8>
 8001124:	2e00      	cmp	r6, #0
 8001126:	d100      	bne.n	800112a <__aeabi_dmul+0x2ae>
 8001128:	e0dc      	b.n	80012e4 <__aeabi_dmul+0x468>
 800112a:	0030      	movs	r0, r6
 800112c:	f000 fdb8 	bl	8001ca0 <__clzsi2>
 8001130:	0002      	movs	r2, r0
 8001132:	3a0b      	subs	r2, #11
 8001134:	231d      	movs	r3, #29
 8001136:	0001      	movs	r1, r0
 8001138:	1a9b      	subs	r3, r3, r2
 800113a:	4652      	mov	r2, sl
 800113c:	3908      	subs	r1, #8
 800113e:	40da      	lsrs	r2, r3
 8001140:	408e      	lsls	r6, r1
 8001142:	4316      	orrs	r6, r2
 8001144:	4652      	mov	r2, sl
 8001146:	408a      	lsls	r2, r1
 8001148:	9b00      	ldr	r3, [sp, #0]
 800114a:	4935      	ldr	r1, [pc, #212]	; (8001220 <__aeabi_dmul+0x3a4>)
 800114c:	1a18      	subs	r0, r3, r0
 800114e:	0003      	movs	r3, r0
 8001150:	468c      	mov	ip, r1
 8001152:	4463      	add	r3, ip
 8001154:	2000      	movs	r0, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	e6d3      	b.n	8000f02 <__aeabi_dmul+0x86>
 800115a:	0025      	movs	r5, r4
 800115c:	4305      	orrs	r5, r0
 800115e:	d04a      	beq.n	80011f6 <__aeabi_dmul+0x37a>
 8001160:	2c00      	cmp	r4, #0
 8001162:	d100      	bne.n	8001166 <__aeabi_dmul+0x2ea>
 8001164:	e0b0      	b.n	80012c8 <__aeabi_dmul+0x44c>
 8001166:	0020      	movs	r0, r4
 8001168:	f000 fd9a 	bl	8001ca0 <__clzsi2>
 800116c:	0001      	movs	r1, r0
 800116e:	0002      	movs	r2, r0
 8001170:	390b      	subs	r1, #11
 8001172:	231d      	movs	r3, #29
 8001174:	0010      	movs	r0, r2
 8001176:	1a5b      	subs	r3, r3, r1
 8001178:	0031      	movs	r1, r6
 800117a:	0035      	movs	r5, r6
 800117c:	3808      	subs	r0, #8
 800117e:	4084      	lsls	r4, r0
 8001180:	40d9      	lsrs	r1, r3
 8001182:	4085      	lsls	r5, r0
 8001184:	430c      	orrs	r4, r1
 8001186:	4826      	ldr	r0, [pc, #152]	; (8001220 <__aeabi_dmul+0x3a4>)
 8001188:	1a83      	subs	r3, r0, r2
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2300      	movs	r3, #0
 800118e:	4699      	mov	r9, r3
 8001190:	469b      	mov	fp, r3
 8001192:	e697      	b.n	8000ec4 <__aeabi_dmul+0x48>
 8001194:	0005      	movs	r5, r0
 8001196:	4325      	orrs	r5, r4
 8001198:	d126      	bne.n	80011e8 <__aeabi_dmul+0x36c>
 800119a:	2208      	movs	r2, #8
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2302      	movs	r3, #2
 80011a0:	2400      	movs	r4, #0
 80011a2:	4691      	mov	r9, r2
 80011a4:	469b      	mov	fp, r3
 80011a6:	e68d      	b.n	8000ec4 <__aeabi_dmul+0x48>
 80011a8:	4652      	mov	r2, sl
 80011aa:	9b00      	ldr	r3, [sp, #0]
 80011ac:	4332      	orrs	r2, r6
 80011ae:	d110      	bne.n	80011d2 <__aeabi_dmul+0x356>
 80011b0:	4915      	ldr	r1, [pc, #84]	; (8001208 <__aeabi_dmul+0x38c>)
 80011b2:	2600      	movs	r6, #0
 80011b4:	468c      	mov	ip, r1
 80011b6:	4463      	add	r3, ip
 80011b8:	4649      	mov	r1, r9
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2302      	movs	r3, #2
 80011be:	4319      	orrs	r1, r3
 80011c0:	4689      	mov	r9, r1
 80011c2:	2002      	movs	r0, #2
 80011c4:	e69d      	b.n	8000f02 <__aeabi_dmul+0x86>
 80011c6:	465b      	mov	r3, fp
 80011c8:	9701      	str	r7, [sp, #4]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d000      	beq.n	80011d0 <__aeabi_dmul+0x354>
 80011ce:	e6ad      	b.n	8000f2c <__aeabi_dmul+0xb0>
 80011d0:	e6c3      	b.n	8000f5a <__aeabi_dmul+0xde>
 80011d2:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <__aeabi_dmul+0x38c>)
 80011d4:	2003      	movs	r0, #3
 80011d6:	4694      	mov	ip, r2
 80011d8:	4463      	add	r3, ip
 80011da:	464a      	mov	r2, r9
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2303      	movs	r3, #3
 80011e0:	431a      	orrs	r2, r3
 80011e2:	4691      	mov	r9, r2
 80011e4:	4652      	mov	r2, sl
 80011e6:	e68c      	b.n	8000f02 <__aeabi_dmul+0x86>
 80011e8:	220c      	movs	r2, #12
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2303      	movs	r3, #3
 80011ee:	0005      	movs	r5, r0
 80011f0:	4691      	mov	r9, r2
 80011f2:	469b      	mov	fp, r3
 80011f4:	e666      	b.n	8000ec4 <__aeabi_dmul+0x48>
 80011f6:	2304      	movs	r3, #4
 80011f8:	4699      	mov	r9, r3
 80011fa:	2300      	movs	r3, #0
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	2400      	movs	r4, #0
 8001202:	469b      	mov	fp, r3
 8001204:	e65e      	b.n	8000ec4 <__aeabi_dmul+0x48>
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	000007ff 	.word	0x000007ff
 800120c:	fffffc01 	.word	0xfffffc01
 8001210:	0800460c 	.word	0x0800460c
 8001214:	000003ff 	.word	0x000003ff
 8001218:	feffffff 	.word	0xfeffffff
 800121c:	000007fe 	.word	0x000007fe
 8001220:	fffffc0d 	.word	0xfffffc0d
 8001224:	4649      	mov	r1, r9
 8001226:	2301      	movs	r3, #1
 8001228:	4319      	orrs	r1, r3
 800122a:	4689      	mov	r9, r1
 800122c:	2600      	movs	r6, #0
 800122e:	2001      	movs	r0, #1
 8001230:	e667      	b.n	8000f02 <__aeabi_dmul+0x86>
 8001232:	2300      	movs	r3, #0
 8001234:	2480      	movs	r4, #128	; 0x80
 8001236:	2500      	movs	r5, #0
 8001238:	4a43      	ldr	r2, [pc, #268]	; (8001348 <__aeabi_dmul+0x4cc>)
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	0324      	lsls	r4, r4, #12
 800123e:	e67e      	b.n	8000f3e <__aeabi_dmul+0xc2>
 8001240:	2001      	movs	r0, #1
 8001242:	1a40      	subs	r0, r0, r1
 8001244:	2838      	cmp	r0, #56	; 0x38
 8001246:	dd00      	ble.n	800124a <__aeabi_dmul+0x3ce>
 8001248:	e676      	b.n	8000f38 <__aeabi_dmul+0xbc>
 800124a:	281f      	cmp	r0, #31
 800124c:	dd5b      	ble.n	8001306 <__aeabi_dmul+0x48a>
 800124e:	221f      	movs	r2, #31
 8001250:	0023      	movs	r3, r4
 8001252:	4252      	negs	r2, r2
 8001254:	1a51      	subs	r1, r2, r1
 8001256:	40cb      	lsrs	r3, r1
 8001258:	0019      	movs	r1, r3
 800125a:	2820      	cmp	r0, #32
 800125c:	d003      	beq.n	8001266 <__aeabi_dmul+0x3ea>
 800125e:	4a3b      	ldr	r2, [pc, #236]	; (800134c <__aeabi_dmul+0x4d0>)
 8001260:	4462      	add	r2, ip
 8001262:	4094      	lsls	r4, r2
 8001264:	4325      	orrs	r5, r4
 8001266:	1e6a      	subs	r2, r5, #1
 8001268:	4195      	sbcs	r5, r2
 800126a:	002a      	movs	r2, r5
 800126c:	430a      	orrs	r2, r1
 800126e:	2107      	movs	r1, #7
 8001270:	000d      	movs	r5, r1
 8001272:	2400      	movs	r4, #0
 8001274:	4015      	ands	r5, r2
 8001276:	4211      	tst	r1, r2
 8001278:	d05b      	beq.n	8001332 <__aeabi_dmul+0x4b6>
 800127a:	210f      	movs	r1, #15
 800127c:	2400      	movs	r4, #0
 800127e:	4011      	ands	r1, r2
 8001280:	2904      	cmp	r1, #4
 8001282:	d053      	beq.n	800132c <__aeabi_dmul+0x4b0>
 8001284:	1d11      	adds	r1, r2, #4
 8001286:	4291      	cmp	r1, r2
 8001288:	4192      	sbcs	r2, r2
 800128a:	4252      	negs	r2, r2
 800128c:	18a4      	adds	r4, r4, r2
 800128e:	000a      	movs	r2, r1
 8001290:	0223      	lsls	r3, r4, #8
 8001292:	d54b      	bpl.n	800132c <__aeabi_dmul+0x4b0>
 8001294:	2201      	movs	r2, #1
 8001296:	2400      	movs	r4, #0
 8001298:	2500      	movs	r5, #0
 800129a:	e650      	b.n	8000f3e <__aeabi_dmul+0xc2>
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	031b      	lsls	r3, r3, #12
 80012a0:	421c      	tst	r4, r3
 80012a2:	d009      	beq.n	80012b8 <__aeabi_dmul+0x43c>
 80012a4:	421e      	tst	r6, r3
 80012a6:	d107      	bne.n	80012b8 <__aeabi_dmul+0x43c>
 80012a8:	4333      	orrs	r3, r6
 80012aa:	031c      	lsls	r4, r3, #12
 80012ac:	4643      	mov	r3, r8
 80012ae:	0015      	movs	r5, r2
 80012b0:	0b24      	lsrs	r4, r4, #12
 80012b2:	4a25      	ldr	r2, [pc, #148]	; (8001348 <__aeabi_dmul+0x4cc>)
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	e642      	b.n	8000f3e <__aeabi_dmul+0xc2>
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	4314      	orrs	r4, r2
 80012be:	0324      	lsls	r4, r4, #12
 80012c0:	4a21      	ldr	r2, [pc, #132]	; (8001348 <__aeabi_dmul+0x4cc>)
 80012c2:	0b24      	lsrs	r4, r4, #12
 80012c4:	9701      	str	r7, [sp, #4]
 80012c6:	e63a      	b.n	8000f3e <__aeabi_dmul+0xc2>
 80012c8:	f000 fcea 	bl	8001ca0 <__clzsi2>
 80012cc:	0001      	movs	r1, r0
 80012ce:	0002      	movs	r2, r0
 80012d0:	3115      	adds	r1, #21
 80012d2:	3220      	adds	r2, #32
 80012d4:	291c      	cmp	r1, #28
 80012d6:	dc00      	bgt.n	80012da <__aeabi_dmul+0x45e>
 80012d8:	e74b      	b.n	8001172 <__aeabi_dmul+0x2f6>
 80012da:	0034      	movs	r4, r6
 80012dc:	3808      	subs	r0, #8
 80012de:	2500      	movs	r5, #0
 80012e0:	4084      	lsls	r4, r0
 80012e2:	e750      	b.n	8001186 <__aeabi_dmul+0x30a>
 80012e4:	f000 fcdc 	bl	8001ca0 <__clzsi2>
 80012e8:	0003      	movs	r3, r0
 80012ea:	001a      	movs	r2, r3
 80012ec:	3215      	adds	r2, #21
 80012ee:	3020      	adds	r0, #32
 80012f0:	2a1c      	cmp	r2, #28
 80012f2:	dc00      	bgt.n	80012f6 <__aeabi_dmul+0x47a>
 80012f4:	e71e      	b.n	8001134 <__aeabi_dmul+0x2b8>
 80012f6:	4656      	mov	r6, sl
 80012f8:	3b08      	subs	r3, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	409e      	lsls	r6, r3
 80012fe:	e723      	b.n	8001148 <__aeabi_dmul+0x2cc>
 8001300:	9b00      	ldr	r3, [sp, #0]
 8001302:	469c      	mov	ip, r3
 8001304:	e6e6      	b.n	80010d4 <__aeabi_dmul+0x258>
 8001306:	4912      	ldr	r1, [pc, #72]	; (8001350 <__aeabi_dmul+0x4d4>)
 8001308:	0022      	movs	r2, r4
 800130a:	4461      	add	r1, ip
 800130c:	002e      	movs	r6, r5
 800130e:	408d      	lsls	r5, r1
 8001310:	408a      	lsls	r2, r1
 8001312:	40c6      	lsrs	r6, r0
 8001314:	1e69      	subs	r1, r5, #1
 8001316:	418d      	sbcs	r5, r1
 8001318:	4332      	orrs	r2, r6
 800131a:	432a      	orrs	r2, r5
 800131c:	40c4      	lsrs	r4, r0
 800131e:	0753      	lsls	r3, r2, #29
 8001320:	d0b6      	beq.n	8001290 <__aeabi_dmul+0x414>
 8001322:	210f      	movs	r1, #15
 8001324:	4011      	ands	r1, r2
 8001326:	2904      	cmp	r1, #4
 8001328:	d1ac      	bne.n	8001284 <__aeabi_dmul+0x408>
 800132a:	e7b1      	b.n	8001290 <__aeabi_dmul+0x414>
 800132c:	0765      	lsls	r5, r4, #29
 800132e:	0264      	lsls	r4, r4, #9
 8001330:	0b24      	lsrs	r4, r4, #12
 8001332:	08d2      	lsrs	r2, r2, #3
 8001334:	4315      	orrs	r5, r2
 8001336:	2200      	movs	r2, #0
 8001338:	e601      	b.n	8000f3e <__aeabi_dmul+0xc2>
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	0312      	lsls	r2, r2, #12
 800133e:	4314      	orrs	r4, r2
 8001340:	0324      	lsls	r4, r4, #12
 8001342:	4a01      	ldr	r2, [pc, #4]	; (8001348 <__aeabi_dmul+0x4cc>)
 8001344:	0b24      	lsrs	r4, r4, #12
 8001346:	e5fa      	b.n	8000f3e <__aeabi_dmul+0xc2>
 8001348:	000007ff 	.word	0x000007ff
 800134c:	0000043e 	.word	0x0000043e
 8001350:	0000041e 	.word	0x0000041e

08001354 <__aeabi_dsub>:
 8001354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001356:	4657      	mov	r7, sl
 8001358:	464e      	mov	r6, r9
 800135a:	4645      	mov	r5, r8
 800135c:	46de      	mov	lr, fp
 800135e:	b5e0      	push	{r5, r6, r7, lr}
 8001360:	001e      	movs	r6, r3
 8001362:	0017      	movs	r7, r2
 8001364:	004a      	lsls	r2, r1, #1
 8001366:	030b      	lsls	r3, r1, #12
 8001368:	0d52      	lsrs	r2, r2, #21
 800136a:	0a5b      	lsrs	r3, r3, #9
 800136c:	4690      	mov	r8, r2
 800136e:	0f42      	lsrs	r2, r0, #29
 8001370:	431a      	orrs	r2, r3
 8001372:	0fcd      	lsrs	r5, r1, #31
 8001374:	4ccd      	ldr	r4, [pc, #820]	; (80016ac <__aeabi_dsub+0x358>)
 8001376:	0331      	lsls	r1, r6, #12
 8001378:	00c3      	lsls	r3, r0, #3
 800137a:	4694      	mov	ip, r2
 800137c:	0070      	lsls	r0, r6, #1
 800137e:	0f7a      	lsrs	r2, r7, #29
 8001380:	0a49      	lsrs	r1, r1, #9
 8001382:	00ff      	lsls	r7, r7, #3
 8001384:	469a      	mov	sl, r3
 8001386:	46b9      	mov	r9, r7
 8001388:	0d40      	lsrs	r0, r0, #21
 800138a:	0ff6      	lsrs	r6, r6, #31
 800138c:	4311      	orrs	r1, r2
 800138e:	42a0      	cmp	r0, r4
 8001390:	d100      	bne.n	8001394 <__aeabi_dsub+0x40>
 8001392:	e0b1      	b.n	80014f8 <__aeabi_dsub+0x1a4>
 8001394:	2201      	movs	r2, #1
 8001396:	4056      	eors	r6, r2
 8001398:	46b3      	mov	fp, r6
 800139a:	42b5      	cmp	r5, r6
 800139c:	d100      	bne.n	80013a0 <__aeabi_dsub+0x4c>
 800139e:	e088      	b.n	80014b2 <__aeabi_dsub+0x15e>
 80013a0:	4642      	mov	r2, r8
 80013a2:	1a12      	subs	r2, r2, r0
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	dc00      	bgt.n	80013aa <__aeabi_dsub+0x56>
 80013a8:	e0ae      	b.n	8001508 <__aeabi_dsub+0x1b4>
 80013aa:	2800      	cmp	r0, #0
 80013ac:	d100      	bne.n	80013b0 <__aeabi_dsub+0x5c>
 80013ae:	e0c1      	b.n	8001534 <__aeabi_dsub+0x1e0>
 80013b0:	48be      	ldr	r0, [pc, #760]	; (80016ac <__aeabi_dsub+0x358>)
 80013b2:	4580      	cmp	r8, r0
 80013b4:	d100      	bne.n	80013b8 <__aeabi_dsub+0x64>
 80013b6:	e151      	b.n	800165c <__aeabi_dsub+0x308>
 80013b8:	2080      	movs	r0, #128	; 0x80
 80013ba:	0400      	lsls	r0, r0, #16
 80013bc:	4301      	orrs	r1, r0
 80013be:	2a38      	cmp	r2, #56	; 0x38
 80013c0:	dd00      	ble.n	80013c4 <__aeabi_dsub+0x70>
 80013c2:	e17b      	b.n	80016bc <__aeabi_dsub+0x368>
 80013c4:	2a1f      	cmp	r2, #31
 80013c6:	dd00      	ble.n	80013ca <__aeabi_dsub+0x76>
 80013c8:	e1ee      	b.n	80017a8 <__aeabi_dsub+0x454>
 80013ca:	2020      	movs	r0, #32
 80013cc:	003e      	movs	r6, r7
 80013ce:	1a80      	subs	r0, r0, r2
 80013d0:	000c      	movs	r4, r1
 80013d2:	40d6      	lsrs	r6, r2
 80013d4:	40d1      	lsrs	r1, r2
 80013d6:	4087      	lsls	r7, r0
 80013d8:	4662      	mov	r2, ip
 80013da:	4084      	lsls	r4, r0
 80013dc:	1a52      	subs	r2, r2, r1
 80013de:	1e78      	subs	r0, r7, #1
 80013e0:	4187      	sbcs	r7, r0
 80013e2:	4694      	mov	ip, r2
 80013e4:	4334      	orrs	r4, r6
 80013e6:	4327      	orrs	r7, r4
 80013e8:	1bdc      	subs	r4, r3, r7
 80013ea:	42a3      	cmp	r3, r4
 80013ec:	419b      	sbcs	r3, r3
 80013ee:	4662      	mov	r2, ip
 80013f0:	425b      	negs	r3, r3
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	4699      	mov	r9, r3
 80013f6:	464b      	mov	r3, r9
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	d400      	bmi.n	80013fe <__aeabi_dsub+0xaa>
 80013fc:	e118      	b.n	8001630 <__aeabi_dsub+0x2dc>
 80013fe:	464b      	mov	r3, r9
 8001400:	0258      	lsls	r0, r3, #9
 8001402:	0a43      	lsrs	r3, r0, #9
 8001404:	4699      	mov	r9, r3
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d100      	bne.n	800140e <__aeabi_dsub+0xba>
 800140c:	e137      	b.n	800167e <__aeabi_dsub+0x32a>
 800140e:	4648      	mov	r0, r9
 8001410:	f000 fc46 	bl	8001ca0 <__clzsi2>
 8001414:	0001      	movs	r1, r0
 8001416:	3908      	subs	r1, #8
 8001418:	2320      	movs	r3, #32
 800141a:	0022      	movs	r2, r4
 800141c:	4648      	mov	r0, r9
 800141e:	1a5b      	subs	r3, r3, r1
 8001420:	40da      	lsrs	r2, r3
 8001422:	4088      	lsls	r0, r1
 8001424:	408c      	lsls	r4, r1
 8001426:	4643      	mov	r3, r8
 8001428:	4310      	orrs	r0, r2
 800142a:	4588      	cmp	r8, r1
 800142c:	dd00      	ble.n	8001430 <__aeabi_dsub+0xdc>
 800142e:	e136      	b.n	800169e <__aeabi_dsub+0x34a>
 8001430:	1ac9      	subs	r1, r1, r3
 8001432:	1c4b      	adds	r3, r1, #1
 8001434:	2b1f      	cmp	r3, #31
 8001436:	dd00      	ble.n	800143a <__aeabi_dsub+0xe6>
 8001438:	e0ea      	b.n	8001610 <__aeabi_dsub+0x2bc>
 800143a:	2220      	movs	r2, #32
 800143c:	0026      	movs	r6, r4
 800143e:	1ad2      	subs	r2, r2, r3
 8001440:	0001      	movs	r1, r0
 8001442:	4094      	lsls	r4, r2
 8001444:	40de      	lsrs	r6, r3
 8001446:	40d8      	lsrs	r0, r3
 8001448:	2300      	movs	r3, #0
 800144a:	4091      	lsls	r1, r2
 800144c:	1e62      	subs	r2, r4, #1
 800144e:	4194      	sbcs	r4, r2
 8001450:	4681      	mov	r9, r0
 8001452:	4698      	mov	r8, r3
 8001454:	4331      	orrs	r1, r6
 8001456:	430c      	orrs	r4, r1
 8001458:	0763      	lsls	r3, r4, #29
 800145a:	d009      	beq.n	8001470 <__aeabi_dsub+0x11c>
 800145c:	230f      	movs	r3, #15
 800145e:	4023      	ands	r3, r4
 8001460:	2b04      	cmp	r3, #4
 8001462:	d005      	beq.n	8001470 <__aeabi_dsub+0x11c>
 8001464:	1d23      	adds	r3, r4, #4
 8001466:	42a3      	cmp	r3, r4
 8001468:	41a4      	sbcs	r4, r4
 800146a:	4264      	negs	r4, r4
 800146c:	44a1      	add	r9, r4
 800146e:	001c      	movs	r4, r3
 8001470:	464b      	mov	r3, r9
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	d400      	bmi.n	8001478 <__aeabi_dsub+0x124>
 8001476:	e0de      	b.n	8001636 <__aeabi_dsub+0x2e2>
 8001478:	4641      	mov	r1, r8
 800147a:	4b8c      	ldr	r3, [pc, #560]	; (80016ac <__aeabi_dsub+0x358>)
 800147c:	3101      	adds	r1, #1
 800147e:	4299      	cmp	r1, r3
 8001480:	d100      	bne.n	8001484 <__aeabi_dsub+0x130>
 8001482:	e0e7      	b.n	8001654 <__aeabi_dsub+0x300>
 8001484:	464b      	mov	r3, r9
 8001486:	488a      	ldr	r0, [pc, #552]	; (80016b0 <__aeabi_dsub+0x35c>)
 8001488:	08e4      	lsrs	r4, r4, #3
 800148a:	4003      	ands	r3, r0
 800148c:	0018      	movs	r0, r3
 800148e:	0549      	lsls	r1, r1, #21
 8001490:	075b      	lsls	r3, r3, #29
 8001492:	0240      	lsls	r0, r0, #9
 8001494:	4323      	orrs	r3, r4
 8001496:	0d4a      	lsrs	r2, r1, #21
 8001498:	0b04      	lsrs	r4, r0, #12
 800149a:	0512      	lsls	r2, r2, #20
 800149c:	07ed      	lsls	r5, r5, #31
 800149e:	4322      	orrs	r2, r4
 80014a0:	432a      	orrs	r2, r5
 80014a2:	0018      	movs	r0, r3
 80014a4:	0011      	movs	r1, r2
 80014a6:	bcf0      	pop	{r4, r5, r6, r7}
 80014a8:	46bb      	mov	fp, r7
 80014aa:	46b2      	mov	sl, r6
 80014ac:	46a9      	mov	r9, r5
 80014ae:	46a0      	mov	r8, r4
 80014b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014b2:	4642      	mov	r2, r8
 80014b4:	1a12      	subs	r2, r2, r0
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	dd52      	ble.n	8001560 <__aeabi_dsub+0x20c>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_dsub+0x16c>
 80014be:	e09c      	b.n	80015fa <__aeabi_dsub+0x2a6>
 80014c0:	45a0      	cmp	r8, r4
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dsub+0x172>
 80014c4:	e0ca      	b.n	800165c <__aeabi_dsub+0x308>
 80014c6:	2080      	movs	r0, #128	; 0x80
 80014c8:	0400      	lsls	r0, r0, #16
 80014ca:	4301      	orrs	r1, r0
 80014cc:	2a38      	cmp	r2, #56	; 0x38
 80014ce:	dd00      	ble.n	80014d2 <__aeabi_dsub+0x17e>
 80014d0:	e149      	b.n	8001766 <__aeabi_dsub+0x412>
 80014d2:	2a1f      	cmp	r2, #31
 80014d4:	dc00      	bgt.n	80014d8 <__aeabi_dsub+0x184>
 80014d6:	e197      	b.n	8001808 <__aeabi_dsub+0x4b4>
 80014d8:	0010      	movs	r0, r2
 80014da:	000e      	movs	r6, r1
 80014dc:	3820      	subs	r0, #32
 80014de:	40c6      	lsrs	r6, r0
 80014e0:	2a20      	cmp	r2, #32
 80014e2:	d004      	beq.n	80014ee <__aeabi_dsub+0x19a>
 80014e4:	2040      	movs	r0, #64	; 0x40
 80014e6:	1a82      	subs	r2, r0, r2
 80014e8:	4091      	lsls	r1, r2
 80014ea:	430f      	orrs	r7, r1
 80014ec:	46b9      	mov	r9, r7
 80014ee:	464c      	mov	r4, r9
 80014f0:	1e62      	subs	r2, r4, #1
 80014f2:	4194      	sbcs	r4, r2
 80014f4:	4334      	orrs	r4, r6
 80014f6:	e13a      	b.n	800176e <__aeabi_dsub+0x41a>
 80014f8:	000a      	movs	r2, r1
 80014fa:	433a      	orrs	r2, r7
 80014fc:	d028      	beq.n	8001550 <__aeabi_dsub+0x1fc>
 80014fe:	46b3      	mov	fp, r6
 8001500:	42b5      	cmp	r5, r6
 8001502:	d02b      	beq.n	800155c <__aeabi_dsub+0x208>
 8001504:	4a6b      	ldr	r2, [pc, #428]	; (80016b4 <__aeabi_dsub+0x360>)
 8001506:	4442      	add	r2, r8
 8001508:	2a00      	cmp	r2, #0
 800150a:	d05d      	beq.n	80015c8 <__aeabi_dsub+0x274>
 800150c:	4642      	mov	r2, r8
 800150e:	4644      	mov	r4, r8
 8001510:	1a82      	subs	r2, r0, r2
 8001512:	2c00      	cmp	r4, #0
 8001514:	d000      	beq.n	8001518 <__aeabi_dsub+0x1c4>
 8001516:	e0f5      	b.n	8001704 <__aeabi_dsub+0x3b0>
 8001518:	4665      	mov	r5, ip
 800151a:	431d      	orrs	r5, r3
 800151c:	d100      	bne.n	8001520 <__aeabi_dsub+0x1cc>
 800151e:	e19c      	b.n	800185a <__aeabi_dsub+0x506>
 8001520:	1e55      	subs	r5, r2, #1
 8001522:	2a01      	cmp	r2, #1
 8001524:	d100      	bne.n	8001528 <__aeabi_dsub+0x1d4>
 8001526:	e1fb      	b.n	8001920 <__aeabi_dsub+0x5cc>
 8001528:	4c60      	ldr	r4, [pc, #384]	; (80016ac <__aeabi_dsub+0x358>)
 800152a:	42a2      	cmp	r2, r4
 800152c:	d100      	bne.n	8001530 <__aeabi_dsub+0x1dc>
 800152e:	e1bd      	b.n	80018ac <__aeabi_dsub+0x558>
 8001530:	002a      	movs	r2, r5
 8001532:	e0f0      	b.n	8001716 <__aeabi_dsub+0x3c2>
 8001534:	0008      	movs	r0, r1
 8001536:	4338      	orrs	r0, r7
 8001538:	d100      	bne.n	800153c <__aeabi_dsub+0x1e8>
 800153a:	e0c3      	b.n	80016c4 <__aeabi_dsub+0x370>
 800153c:	1e50      	subs	r0, r2, #1
 800153e:	2a01      	cmp	r2, #1
 8001540:	d100      	bne.n	8001544 <__aeabi_dsub+0x1f0>
 8001542:	e1a8      	b.n	8001896 <__aeabi_dsub+0x542>
 8001544:	4c59      	ldr	r4, [pc, #356]	; (80016ac <__aeabi_dsub+0x358>)
 8001546:	42a2      	cmp	r2, r4
 8001548:	d100      	bne.n	800154c <__aeabi_dsub+0x1f8>
 800154a:	e087      	b.n	800165c <__aeabi_dsub+0x308>
 800154c:	0002      	movs	r2, r0
 800154e:	e736      	b.n	80013be <__aeabi_dsub+0x6a>
 8001550:	2201      	movs	r2, #1
 8001552:	4056      	eors	r6, r2
 8001554:	46b3      	mov	fp, r6
 8001556:	42b5      	cmp	r5, r6
 8001558:	d000      	beq.n	800155c <__aeabi_dsub+0x208>
 800155a:	e721      	b.n	80013a0 <__aeabi_dsub+0x4c>
 800155c:	4a55      	ldr	r2, [pc, #340]	; (80016b4 <__aeabi_dsub+0x360>)
 800155e:	4442      	add	r2, r8
 8001560:	2a00      	cmp	r2, #0
 8001562:	d100      	bne.n	8001566 <__aeabi_dsub+0x212>
 8001564:	e0b5      	b.n	80016d2 <__aeabi_dsub+0x37e>
 8001566:	4642      	mov	r2, r8
 8001568:	4644      	mov	r4, r8
 800156a:	1a82      	subs	r2, r0, r2
 800156c:	2c00      	cmp	r4, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_dsub+0x21e>
 8001570:	e138      	b.n	80017e4 <__aeabi_dsub+0x490>
 8001572:	4e4e      	ldr	r6, [pc, #312]	; (80016ac <__aeabi_dsub+0x358>)
 8001574:	42b0      	cmp	r0, r6
 8001576:	d100      	bne.n	800157a <__aeabi_dsub+0x226>
 8001578:	e1de      	b.n	8001938 <__aeabi_dsub+0x5e4>
 800157a:	2680      	movs	r6, #128	; 0x80
 800157c:	4664      	mov	r4, ip
 800157e:	0436      	lsls	r6, r6, #16
 8001580:	4334      	orrs	r4, r6
 8001582:	46a4      	mov	ip, r4
 8001584:	2a38      	cmp	r2, #56	; 0x38
 8001586:	dd00      	ble.n	800158a <__aeabi_dsub+0x236>
 8001588:	e196      	b.n	80018b8 <__aeabi_dsub+0x564>
 800158a:	2a1f      	cmp	r2, #31
 800158c:	dd00      	ble.n	8001590 <__aeabi_dsub+0x23c>
 800158e:	e224      	b.n	80019da <__aeabi_dsub+0x686>
 8001590:	2620      	movs	r6, #32
 8001592:	1ab4      	subs	r4, r6, r2
 8001594:	46a2      	mov	sl, r4
 8001596:	4664      	mov	r4, ip
 8001598:	4656      	mov	r6, sl
 800159a:	40b4      	lsls	r4, r6
 800159c:	46a1      	mov	r9, r4
 800159e:	001c      	movs	r4, r3
 80015a0:	464e      	mov	r6, r9
 80015a2:	40d4      	lsrs	r4, r2
 80015a4:	4326      	orrs	r6, r4
 80015a6:	0034      	movs	r4, r6
 80015a8:	4656      	mov	r6, sl
 80015aa:	40b3      	lsls	r3, r6
 80015ac:	1e5e      	subs	r6, r3, #1
 80015ae:	41b3      	sbcs	r3, r6
 80015b0:	431c      	orrs	r4, r3
 80015b2:	4663      	mov	r3, ip
 80015b4:	40d3      	lsrs	r3, r2
 80015b6:	18c9      	adds	r1, r1, r3
 80015b8:	19e4      	adds	r4, r4, r7
 80015ba:	42bc      	cmp	r4, r7
 80015bc:	41bf      	sbcs	r7, r7
 80015be:	427f      	negs	r7, r7
 80015c0:	46b9      	mov	r9, r7
 80015c2:	4680      	mov	r8, r0
 80015c4:	4489      	add	r9, r1
 80015c6:	e0d8      	b.n	800177a <__aeabi_dsub+0x426>
 80015c8:	4640      	mov	r0, r8
 80015ca:	4c3b      	ldr	r4, [pc, #236]	; (80016b8 <__aeabi_dsub+0x364>)
 80015cc:	3001      	adds	r0, #1
 80015ce:	4220      	tst	r0, r4
 80015d0:	d000      	beq.n	80015d4 <__aeabi_dsub+0x280>
 80015d2:	e0b4      	b.n	800173e <__aeabi_dsub+0x3ea>
 80015d4:	4640      	mov	r0, r8
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d000      	beq.n	80015dc <__aeabi_dsub+0x288>
 80015da:	e144      	b.n	8001866 <__aeabi_dsub+0x512>
 80015dc:	4660      	mov	r0, ip
 80015de:	4318      	orrs	r0, r3
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dsub+0x290>
 80015e2:	e190      	b.n	8001906 <__aeabi_dsub+0x5b2>
 80015e4:	0008      	movs	r0, r1
 80015e6:	4338      	orrs	r0, r7
 80015e8:	d000      	beq.n	80015ec <__aeabi_dsub+0x298>
 80015ea:	e1aa      	b.n	8001942 <__aeabi_dsub+0x5ee>
 80015ec:	4661      	mov	r1, ip
 80015ee:	08db      	lsrs	r3, r3, #3
 80015f0:	0749      	lsls	r1, r1, #29
 80015f2:	430b      	orrs	r3, r1
 80015f4:	4661      	mov	r1, ip
 80015f6:	08cc      	lsrs	r4, r1, #3
 80015f8:	e027      	b.n	800164a <__aeabi_dsub+0x2f6>
 80015fa:	0008      	movs	r0, r1
 80015fc:	4338      	orrs	r0, r7
 80015fe:	d061      	beq.n	80016c4 <__aeabi_dsub+0x370>
 8001600:	1e50      	subs	r0, r2, #1
 8001602:	2a01      	cmp	r2, #1
 8001604:	d100      	bne.n	8001608 <__aeabi_dsub+0x2b4>
 8001606:	e139      	b.n	800187c <__aeabi_dsub+0x528>
 8001608:	42a2      	cmp	r2, r4
 800160a:	d027      	beq.n	800165c <__aeabi_dsub+0x308>
 800160c:	0002      	movs	r2, r0
 800160e:	e75d      	b.n	80014cc <__aeabi_dsub+0x178>
 8001610:	0002      	movs	r2, r0
 8001612:	391f      	subs	r1, #31
 8001614:	40ca      	lsrs	r2, r1
 8001616:	0011      	movs	r1, r2
 8001618:	2b20      	cmp	r3, #32
 800161a:	d003      	beq.n	8001624 <__aeabi_dsub+0x2d0>
 800161c:	2240      	movs	r2, #64	; 0x40
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	4098      	lsls	r0, r3
 8001622:	4304      	orrs	r4, r0
 8001624:	1e63      	subs	r3, r4, #1
 8001626:	419c      	sbcs	r4, r3
 8001628:	2300      	movs	r3, #0
 800162a:	4699      	mov	r9, r3
 800162c:	4698      	mov	r8, r3
 800162e:	430c      	orrs	r4, r1
 8001630:	0763      	lsls	r3, r4, #29
 8001632:	d000      	beq.n	8001636 <__aeabi_dsub+0x2e2>
 8001634:	e712      	b.n	800145c <__aeabi_dsub+0x108>
 8001636:	464b      	mov	r3, r9
 8001638:	464a      	mov	r2, r9
 800163a:	08e4      	lsrs	r4, r4, #3
 800163c:	075b      	lsls	r3, r3, #29
 800163e:	4323      	orrs	r3, r4
 8001640:	08d4      	lsrs	r4, r2, #3
 8001642:	4642      	mov	r2, r8
 8001644:	4919      	ldr	r1, [pc, #100]	; (80016ac <__aeabi_dsub+0x358>)
 8001646:	428a      	cmp	r2, r1
 8001648:	d00e      	beq.n	8001668 <__aeabi_dsub+0x314>
 800164a:	0324      	lsls	r4, r4, #12
 800164c:	0552      	lsls	r2, r2, #21
 800164e:	0b24      	lsrs	r4, r4, #12
 8001650:	0d52      	lsrs	r2, r2, #21
 8001652:	e722      	b.n	800149a <__aeabi_dsub+0x146>
 8001654:	000a      	movs	r2, r1
 8001656:	2400      	movs	r4, #0
 8001658:	2300      	movs	r3, #0
 800165a:	e71e      	b.n	800149a <__aeabi_dsub+0x146>
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	4662      	mov	r2, ip
 8001660:	0752      	lsls	r2, r2, #29
 8001662:	4313      	orrs	r3, r2
 8001664:	4662      	mov	r2, ip
 8001666:	08d4      	lsrs	r4, r2, #3
 8001668:	001a      	movs	r2, r3
 800166a:	4322      	orrs	r2, r4
 800166c:	d100      	bne.n	8001670 <__aeabi_dsub+0x31c>
 800166e:	e1fc      	b.n	8001a6a <__aeabi_dsub+0x716>
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0312      	lsls	r2, r2, #12
 8001674:	4314      	orrs	r4, r2
 8001676:	0324      	lsls	r4, r4, #12
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <__aeabi_dsub+0x358>)
 800167a:	0b24      	lsrs	r4, r4, #12
 800167c:	e70d      	b.n	800149a <__aeabi_dsub+0x146>
 800167e:	0020      	movs	r0, r4
 8001680:	f000 fb0e 	bl	8001ca0 <__clzsi2>
 8001684:	0001      	movs	r1, r0
 8001686:	3118      	adds	r1, #24
 8001688:	291f      	cmp	r1, #31
 800168a:	dc00      	bgt.n	800168e <__aeabi_dsub+0x33a>
 800168c:	e6c4      	b.n	8001418 <__aeabi_dsub+0xc4>
 800168e:	3808      	subs	r0, #8
 8001690:	4084      	lsls	r4, r0
 8001692:	4643      	mov	r3, r8
 8001694:	0020      	movs	r0, r4
 8001696:	2400      	movs	r4, #0
 8001698:	4588      	cmp	r8, r1
 800169a:	dc00      	bgt.n	800169e <__aeabi_dsub+0x34a>
 800169c:	e6c8      	b.n	8001430 <__aeabi_dsub+0xdc>
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__aeabi_dsub+0x35c>)
 80016a0:	1a5b      	subs	r3, r3, r1
 80016a2:	4010      	ands	r0, r2
 80016a4:	4698      	mov	r8, r3
 80016a6:	4681      	mov	r9, r0
 80016a8:	e6d6      	b.n	8001458 <__aeabi_dsub+0x104>
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	000007ff 	.word	0x000007ff
 80016b0:	ff7fffff 	.word	0xff7fffff
 80016b4:	fffff801 	.word	0xfffff801
 80016b8:	000007fe 	.word	0x000007fe
 80016bc:	430f      	orrs	r7, r1
 80016be:	1e7a      	subs	r2, r7, #1
 80016c0:	4197      	sbcs	r7, r2
 80016c2:	e691      	b.n	80013e8 <__aeabi_dsub+0x94>
 80016c4:	4661      	mov	r1, ip
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	0749      	lsls	r1, r1, #29
 80016ca:	430b      	orrs	r3, r1
 80016cc:	4661      	mov	r1, ip
 80016ce:	08cc      	lsrs	r4, r1, #3
 80016d0:	e7b8      	b.n	8001644 <__aeabi_dsub+0x2f0>
 80016d2:	4640      	mov	r0, r8
 80016d4:	4cd3      	ldr	r4, [pc, #844]	; (8001a24 <__aeabi_dsub+0x6d0>)
 80016d6:	3001      	adds	r0, #1
 80016d8:	4220      	tst	r0, r4
 80016da:	d000      	beq.n	80016de <__aeabi_dsub+0x38a>
 80016dc:	e0a2      	b.n	8001824 <__aeabi_dsub+0x4d0>
 80016de:	4640      	mov	r0, r8
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d000      	beq.n	80016e6 <__aeabi_dsub+0x392>
 80016e4:	e101      	b.n	80018ea <__aeabi_dsub+0x596>
 80016e6:	4660      	mov	r0, ip
 80016e8:	4318      	orrs	r0, r3
 80016ea:	d100      	bne.n	80016ee <__aeabi_dsub+0x39a>
 80016ec:	e15e      	b.n	80019ac <__aeabi_dsub+0x658>
 80016ee:	0008      	movs	r0, r1
 80016f0:	4338      	orrs	r0, r7
 80016f2:	d000      	beq.n	80016f6 <__aeabi_dsub+0x3a2>
 80016f4:	e15f      	b.n	80019b6 <__aeabi_dsub+0x662>
 80016f6:	4661      	mov	r1, ip
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	0749      	lsls	r1, r1, #29
 80016fc:	430b      	orrs	r3, r1
 80016fe:	4661      	mov	r1, ip
 8001700:	08cc      	lsrs	r4, r1, #3
 8001702:	e7a2      	b.n	800164a <__aeabi_dsub+0x2f6>
 8001704:	4dc8      	ldr	r5, [pc, #800]	; (8001a28 <__aeabi_dsub+0x6d4>)
 8001706:	42a8      	cmp	r0, r5
 8001708:	d100      	bne.n	800170c <__aeabi_dsub+0x3b8>
 800170a:	e0cf      	b.n	80018ac <__aeabi_dsub+0x558>
 800170c:	2580      	movs	r5, #128	; 0x80
 800170e:	4664      	mov	r4, ip
 8001710:	042d      	lsls	r5, r5, #16
 8001712:	432c      	orrs	r4, r5
 8001714:	46a4      	mov	ip, r4
 8001716:	2a38      	cmp	r2, #56	; 0x38
 8001718:	dc56      	bgt.n	80017c8 <__aeabi_dsub+0x474>
 800171a:	2a1f      	cmp	r2, #31
 800171c:	dd00      	ble.n	8001720 <__aeabi_dsub+0x3cc>
 800171e:	e0d1      	b.n	80018c4 <__aeabi_dsub+0x570>
 8001720:	2520      	movs	r5, #32
 8001722:	001e      	movs	r6, r3
 8001724:	1aad      	subs	r5, r5, r2
 8001726:	4664      	mov	r4, ip
 8001728:	40ab      	lsls	r3, r5
 800172a:	40ac      	lsls	r4, r5
 800172c:	40d6      	lsrs	r6, r2
 800172e:	1e5d      	subs	r5, r3, #1
 8001730:	41ab      	sbcs	r3, r5
 8001732:	4334      	orrs	r4, r6
 8001734:	4323      	orrs	r3, r4
 8001736:	4664      	mov	r4, ip
 8001738:	40d4      	lsrs	r4, r2
 800173a:	1b09      	subs	r1, r1, r4
 800173c:	e049      	b.n	80017d2 <__aeabi_dsub+0x47e>
 800173e:	4660      	mov	r0, ip
 8001740:	1bdc      	subs	r4, r3, r7
 8001742:	1a46      	subs	r6, r0, r1
 8001744:	42a3      	cmp	r3, r4
 8001746:	4180      	sbcs	r0, r0
 8001748:	4240      	negs	r0, r0
 800174a:	4681      	mov	r9, r0
 800174c:	0030      	movs	r0, r6
 800174e:	464e      	mov	r6, r9
 8001750:	1b80      	subs	r0, r0, r6
 8001752:	4681      	mov	r9, r0
 8001754:	0200      	lsls	r0, r0, #8
 8001756:	d476      	bmi.n	8001846 <__aeabi_dsub+0x4f2>
 8001758:	464b      	mov	r3, r9
 800175a:	4323      	orrs	r3, r4
 800175c:	d000      	beq.n	8001760 <__aeabi_dsub+0x40c>
 800175e:	e652      	b.n	8001406 <__aeabi_dsub+0xb2>
 8001760:	2400      	movs	r4, #0
 8001762:	2500      	movs	r5, #0
 8001764:	e771      	b.n	800164a <__aeabi_dsub+0x2f6>
 8001766:	4339      	orrs	r1, r7
 8001768:	000c      	movs	r4, r1
 800176a:	1e62      	subs	r2, r4, #1
 800176c:	4194      	sbcs	r4, r2
 800176e:	18e4      	adds	r4, r4, r3
 8001770:	429c      	cmp	r4, r3
 8001772:	419b      	sbcs	r3, r3
 8001774:	425b      	negs	r3, r3
 8001776:	4463      	add	r3, ip
 8001778:	4699      	mov	r9, r3
 800177a:	464b      	mov	r3, r9
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	d400      	bmi.n	8001782 <__aeabi_dsub+0x42e>
 8001780:	e756      	b.n	8001630 <__aeabi_dsub+0x2dc>
 8001782:	2301      	movs	r3, #1
 8001784:	469c      	mov	ip, r3
 8001786:	4ba8      	ldr	r3, [pc, #672]	; (8001a28 <__aeabi_dsub+0x6d4>)
 8001788:	44e0      	add	r8, ip
 800178a:	4598      	cmp	r8, r3
 800178c:	d038      	beq.n	8001800 <__aeabi_dsub+0x4ac>
 800178e:	464b      	mov	r3, r9
 8001790:	48a6      	ldr	r0, [pc, #664]	; (8001a2c <__aeabi_dsub+0x6d8>)
 8001792:	2201      	movs	r2, #1
 8001794:	4003      	ands	r3, r0
 8001796:	0018      	movs	r0, r3
 8001798:	0863      	lsrs	r3, r4, #1
 800179a:	4014      	ands	r4, r2
 800179c:	431c      	orrs	r4, r3
 800179e:	07c3      	lsls	r3, r0, #31
 80017a0:	431c      	orrs	r4, r3
 80017a2:	0843      	lsrs	r3, r0, #1
 80017a4:	4699      	mov	r9, r3
 80017a6:	e657      	b.n	8001458 <__aeabi_dsub+0x104>
 80017a8:	0010      	movs	r0, r2
 80017aa:	000e      	movs	r6, r1
 80017ac:	3820      	subs	r0, #32
 80017ae:	40c6      	lsrs	r6, r0
 80017b0:	2a20      	cmp	r2, #32
 80017b2:	d004      	beq.n	80017be <__aeabi_dsub+0x46a>
 80017b4:	2040      	movs	r0, #64	; 0x40
 80017b6:	1a82      	subs	r2, r0, r2
 80017b8:	4091      	lsls	r1, r2
 80017ba:	430f      	orrs	r7, r1
 80017bc:	46b9      	mov	r9, r7
 80017be:	464f      	mov	r7, r9
 80017c0:	1e7a      	subs	r2, r7, #1
 80017c2:	4197      	sbcs	r7, r2
 80017c4:	4337      	orrs	r7, r6
 80017c6:	e60f      	b.n	80013e8 <__aeabi_dsub+0x94>
 80017c8:	4662      	mov	r2, ip
 80017ca:	431a      	orrs	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	4193      	sbcs	r3, r2
 80017d2:	1afc      	subs	r4, r7, r3
 80017d4:	42a7      	cmp	r7, r4
 80017d6:	41bf      	sbcs	r7, r7
 80017d8:	427f      	negs	r7, r7
 80017da:	1bcb      	subs	r3, r1, r7
 80017dc:	4699      	mov	r9, r3
 80017de:	465d      	mov	r5, fp
 80017e0:	4680      	mov	r8, r0
 80017e2:	e608      	b.n	80013f6 <__aeabi_dsub+0xa2>
 80017e4:	4666      	mov	r6, ip
 80017e6:	431e      	orrs	r6, r3
 80017e8:	d100      	bne.n	80017ec <__aeabi_dsub+0x498>
 80017ea:	e0be      	b.n	800196a <__aeabi_dsub+0x616>
 80017ec:	1e56      	subs	r6, r2, #1
 80017ee:	2a01      	cmp	r2, #1
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dsub+0x4a0>
 80017f2:	e109      	b.n	8001a08 <__aeabi_dsub+0x6b4>
 80017f4:	4c8c      	ldr	r4, [pc, #560]	; (8001a28 <__aeabi_dsub+0x6d4>)
 80017f6:	42a2      	cmp	r2, r4
 80017f8:	d100      	bne.n	80017fc <__aeabi_dsub+0x4a8>
 80017fa:	e119      	b.n	8001a30 <__aeabi_dsub+0x6dc>
 80017fc:	0032      	movs	r2, r6
 80017fe:	e6c1      	b.n	8001584 <__aeabi_dsub+0x230>
 8001800:	4642      	mov	r2, r8
 8001802:	2400      	movs	r4, #0
 8001804:	2300      	movs	r3, #0
 8001806:	e648      	b.n	800149a <__aeabi_dsub+0x146>
 8001808:	2020      	movs	r0, #32
 800180a:	000c      	movs	r4, r1
 800180c:	1a80      	subs	r0, r0, r2
 800180e:	003e      	movs	r6, r7
 8001810:	4087      	lsls	r7, r0
 8001812:	4084      	lsls	r4, r0
 8001814:	40d6      	lsrs	r6, r2
 8001816:	1e78      	subs	r0, r7, #1
 8001818:	4187      	sbcs	r7, r0
 800181a:	40d1      	lsrs	r1, r2
 800181c:	4334      	orrs	r4, r6
 800181e:	433c      	orrs	r4, r7
 8001820:	448c      	add	ip, r1
 8001822:	e7a4      	b.n	800176e <__aeabi_dsub+0x41a>
 8001824:	4a80      	ldr	r2, [pc, #512]	; (8001a28 <__aeabi_dsub+0x6d4>)
 8001826:	4290      	cmp	r0, r2
 8001828:	d100      	bne.n	800182c <__aeabi_dsub+0x4d8>
 800182a:	e0e9      	b.n	8001a00 <__aeabi_dsub+0x6ac>
 800182c:	19df      	adds	r7, r3, r7
 800182e:	429f      	cmp	r7, r3
 8001830:	419b      	sbcs	r3, r3
 8001832:	4461      	add	r1, ip
 8001834:	425b      	negs	r3, r3
 8001836:	18c9      	adds	r1, r1, r3
 8001838:	07cc      	lsls	r4, r1, #31
 800183a:	087f      	lsrs	r7, r7, #1
 800183c:	084b      	lsrs	r3, r1, #1
 800183e:	4699      	mov	r9, r3
 8001840:	4680      	mov	r8, r0
 8001842:	433c      	orrs	r4, r7
 8001844:	e6f4      	b.n	8001630 <__aeabi_dsub+0x2dc>
 8001846:	1afc      	subs	r4, r7, r3
 8001848:	42a7      	cmp	r7, r4
 800184a:	41bf      	sbcs	r7, r7
 800184c:	4663      	mov	r3, ip
 800184e:	427f      	negs	r7, r7
 8001850:	1ac9      	subs	r1, r1, r3
 8001852:	1bcb      	subs	r3, r1, r7
 8001854:	4699      	mov	r9, r3
 8001856:	465d      	mov	r5, fp
 8001858:	e5d5      	b.n	8001406 <__aeabi_dsub+0xb2>
 800185a:	08ff      	lsrs	r7, r7, #3
 800185c:	074b      	lsls	r3, r1, #29
 800185e:	465d      	mov	r5, fp
 8001860:	433b      	orrs	r3, r7
 8001862:	08cc      	lsrs	r4, r1, #3
 8001864:	e6ee      	b.n	8001644 <__aeabi_dsub+0x2f0>
 8001866:	4662      	mov	r2, ip
 8001868:	431a      	orrs	r2, r3
 800186a:	d000      	beq.n	800186e <__aeabi_dsub+0x51a>
 800186c:	e082      	b.n	8001974 <__aeabi_dsub+0x620>
 800186e:	000b      	movs	r3, r1
 8001870:	433b      	orrs	r3, r7
 8001872:	d11b      	bne.n	80018ac <__aeabi_dsub+0x558>
 8001874:	2480      	movs	r4, #128	; 0x80
 8001876:	2500      	movs	r5, #0
 8001878:	0324      	lsls	r4, r4, #12
 800187a:	e6f9      	b.n	8001670 <__aeabi_dsub+0x31c>
 800187c:	19dc      	adds	r4, r3, r7
 800187e:	429c      	cmp	r4, r3
 8001880:	419b      	sbcs	r3, r3
 8001882:	4461      	add	r1, ip
 8001884:	4689      	mov	r9, r1
 8001886:	425b      	negs	r3, r3
 8001888:	4499      	add	r9, r3
 800188a:	464b      	mov	r3, r9
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	d444      	bmi.n	800191a <__aeabi_dsub+0x5c6>
 8001890:	2301      	movs	r3, #1
 8001892:	4698      	mov	r8, r3
 8001894:	e6cc      	b.n	8001630 <__aeabi_dsub+0x2dc>
 8001896:	1bdc      	subs	r4, r3, r7
 8001898:	4662      	mov	r2, ip
 800189a:	42a3      	cmp	r3, r4
 800189c:	419b      	sbcs	r3, r3
 800189e:	1a51      	subs	r1, r2, r1
 80018a0:	425b      	negs	r3, r3
 80018a2:	1acb      	subs	r3, r1, r3
 80018a4:	4699      	mov	r9, r3
 80018a6:	2301      	movs	r3, #1
 80018a8:	4698      	mov	r8, r3
 80018aa:	e5a4      	b.n	80013f6 <__aeabi_dsub+0xa2>
 80018ac:	08ff      	lsrs	r7, r7, #3
 80018ae:	074b      	lsls	r3, r1, #29
 80018b0:	465d      	mov	r5, fp
 80018b2:	433b      	orrs	r3, r7
 80018b4:	08cc      	lsrs	r4, r1, #3
 80018b6:	e6d7      	b.n	8001668 <__aeabi_dsub+0x314>
 80018b8:	4662      	mov	r2, ip
 80018ba:	431a      	orrs	r2, r3
 80018bc:	0014      	movs	r4, r2
 80018be:	1e63      	subs	r3, r4, #1
 80018c0:	419c      	sbcs	r4, r3
 80018c2:	e679      	b.n	80015b8 <__aeabi_dsub+0x264>
 80018c4:	0015      	movs	r5, r2
 80018c6:	4664      	mov	r4, ip
 80018c8:	3d20      	subs	r5, #32
 80018ca:	40ec      	lsrs	r4, r5
 80018cc:	46a0      	mov	r8, r4
 80018ce:	2a20      	cmp	r2, #32
 80018d0:	d005      	beq.n	80018de <__aeabi_dsub+0x58a>
 80018d2:	2540      	movs	r5, #64	; 0x40
 80018d4:	4664      	mov	r4, ip
 80018d6:	1aaa      	subs	r2, r5, r2
 80018d8:	4094      	lsls	r4, r2
 80018da:	4323      	orrs	r3, r4
 80018dc:	469a      	mov	sl, r3
 80018de:	4654      	mov	r4, sl
 80018e0:	1e63      	subs	r3, r4, #1
 80018e2:	419c      	sbcs	r4, r3
 80018e4:	4643      	mov	r3, r8
 80018e6:	4323      	orrs	r3, r4
 80018e8:	e773      	b.n	80017d2 <__aeabi_dsub+0x47e>
 80018ea:	4662      	mov	r2, ip
 80018ec:	431a      	orrs	r2, r3
 80018ee:	d023      	beq.n	8001938 <__aeabi_dsub+0x5e4>
 80018f0:	000a      	movs	r2, r1
 80018f2:	433a      	orrs	r2, r7
 80018f4:	d000      	beq.n	80018f8 <__aeabi_dsub+0x5a4>
 80018f6:	e0a0      	b.n	8001a3a <__aeabi_dsub+0x6e6>
 80018f8:	4662      	mov	r2, ip
 80018fa:	08db      	lsrs	r3, r3, #3
 80018fc:	0752      	lsls	r2, r2, #29
 80018fe:	4313      	orrs	r3, r2
 8001900:	4662      	mov	r2, ip
 8001902:	08d4      	lsrs	r4, r2, #3
 8001904:	e6b0      	b.n	8001668 <__aeabi_dsub+0x314>
 8001906:	000b      	movs	r3, r1
 8001908:	433b      	orrs	r3, r7
 800190a:	d100      	bne.n	800190e <__aeabi_dsub+0x5ba>
 800190c:	e728      	b.n	8001760 <__aeabi_dsub+0x40c>
 800190e:	08ff      	lsrs	r7, r7, #3
 8001910:	074b      	lsls	r3, r1, #29
 8001912:	465d      	mov	r5, fp
 8001914:	433b      	orrs	r3, r7
 8001916:	08cc      	lsrs	r4, r1, #3
 8001918:	e697      	b.n	800164a <__aeabi_dsub+0x2f6>
 800191a:	2302      	movs	r3, #2
 800191c:	4698      	mov	r8, r3
 800191e:	e736      	b.n	800178e <__aeabi_dsub+0x43a>
 8001920:	1afc      	subs	r4, r7, r3
 8001922:	42a7      	cmp	r7, r4
 8001924:	41bf      	sbcs	r7, r7
 8001926:	4663      	mov	r3, ip
 8001928:	427f      	negs	r7, r7
 800192a:	1ac9      	subs	r1, r1, r3
 800192c:	1bcb      	subs	r3, r1, r7
 800192e:	4699      	mov	r9, r3
 8001930:	2301      	movs	r3, #1
 8001932:	465d      	mov	r5, fp
 8001934:	4698      	mov	r8, r3
 8001936:	e55e      	b.n	80013f6 <__aeabi_dsub+0xa2>
 8001938:	074b      	lsls	r3, r1, #29
 800193a:	08ff      	lsrs	r7, r7, #3
 800193c:	433b      	orrs	r3, r7
 800193e:	08cc      	lsrs	r4, r1, #3
 8001940:	e692      	b.n	8001668 <__aeabi_dsub+0x314>
 8001942:	1bdc      	subs	r4, r3, r7
 8001944:	4660      	mov	r0, ip
 8001946:	42a3      	cmp	r3, r4
 8001948:	41b6      	sbcs	r6, r6
 800194a:	1a40      	subs	r0, r0, r1
 800194c:	4276      	negs	r6, r6
 800194e:	1b80      	subs	r0, r0, r6
 8001950:	4681      	mov	r9, r0
 8001952:	0200      	lsls	r0, r0, #8
 8001954:	d560      	bpl.n	8001a18 <__aeabi_dsub+0x6c4>
 8001956:	1afc      	subs	r4, r7, r3
 8001958:	42a7      	cmp	r7, r4
 800195a:	41bf      	sbcs	r7, r7
 800195c:	4663      	mov	r3, ip
 800195e:	427f      	negs	r7, r7
 8001960:	1ac9      	subs	r1, r1, r3
 8001962:	1bcb      	subs	r3, r1, r7
 8001964:	4699      	mov	r9, r3
 8001966:	465d      	mov	r5, fp
 8001968:	e576      	b.n	8001458 <__aeabi_dsub+0x104>
 800196a:	08ff      	lsrs	r7, r7, #3
 800196c:	074b      	lsls	r3, r1, #29
 800196e:	433b      	orrs	r3, r7
 8001970:	08cc      	lsrs	r4, r1, #3
 8001972:	e667      	b.n	8001644 <__aeabi_dsub+0x2f0>
 8001974:	000a      	movs	r2, r1
 8001976:	08db      	lsrs	r3, r3, #3
 8001978:	433a      	orrs	r2, r7
 800197a:	d100      	bne.n	800197e <__aeabi_dsub+0x62a>
 800197c:	e66f      	b.n	800165e <__aeabi_dsub+0x30a>
 800197e:	4662      	mov	r2, ip
 8001980:	0752      	lsls	r2, r2, #29
 8001982:	4313      	orrs	r3, r2
 8001984:	4662      	mov	r2, ip
 8001986:	08d4      	lsrs	r4, r2, #3
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	0312      	lsls	r2, r2, #12
 800198c:	4214      	tst	r4, r2
 800198e:	d007      	beq.n	80019a0 <__aeabi_dsub+0x64c>
 8001990:	08c8      	lsrs	r0, r1, #3
 8001992:	4210      	tst	r0, r2
 8001994:	d104      	bne.n	80019a0 <__aeabi_dsub+0x64c>
 8001996:	465d      	mov	r5, fp
 8001998:	0004      	movs	r4, r0
 800199a:	08fb      	lsrs	r3, r7, #3
 800199c:	0749      	lsls	r1, r1, #29
 800199e:	430b      	orrs	r3, r1
 80019a0:	0f5a      	lsrs	r2, r3, #29
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	0752      	lsls	r2, r2, #29
 80019a8:	4313      	orrs	r3, r2
 80019aa:	e65d      	b.n	8001668 <__aeabi_dsub+0x314>
 80019ac:	074b      	lsls	r3, r1, #29
 80019ae:	08ff      	lsrs	r7, r7, #3
 80019b0:	433b      	orrs	r3, r7
 80019b2:	08cc      	lsrs	r4, r1, #3
 80019b4:	e649      	b.n	800164a <__aeabi_dsub+0x2f6>
 80019b6:	19dc      	adds	r4, r3, r7
 80019b8:	429c      	cmp	r4, r3
 80019ba:	419b      	sbcs	r3, r3
 80019bc:	4461      	add	r1, ip
 80019be:	4689      	mov	r9, r1
 80019c0:	425b      	negs	r3, r3
 80019c2:	4499      	add	r9, r3
 80019c4:	464b      	mov	r3, r9
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	d400      	bmi.n	80019cc <__aeabi_dsub+0x678>
 80019ca:	e631      	b.n	8001630 <__aeabi_dsub+0x2dc>
 80019cc:	464a      	mov	r2, r9
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <__aeabi_dsub+0x6d8>)
 80019d0:	401a      	ands	r2, r3
 80019d2:	2301      	movs	r3, #1
 80019d4:	4691      	mov	r9, r2
 80019d6:	4698      	mov	r8, r3
 80019d8:	e62a      	b.n	8001630 <__aeabi_dsub+0x2dc>
 80019da:	0016      	movs	r6, r2
 80019dc:	4664      	mov	r4, ip
 80019de:	3e20      	subs	r6, #32
 80019e0:	40f4      	lsrs	r4, r6
 80019e2:	46a0      	mov	r8, r4
 80019e4:	2a20      	cmp	r2, #32
 80019e6:	d005      	beq.n	80019f4 <__aeabi_dsub+0x6a0>
 80019e8:	2640      	movs	r6, #64	; 0x40
 80019ea:	4664      	mov	r4, ip
 80019ec:	1ab2      	subs	r2, r6, r2
 80019ee:	4094      	lsls	r4, r2
 80019f0:	4323      	orrs	r3, r4
 80019f2:	469a      	mov	sl, r3
 80019f4:	4654      	mov	r4, sl
 80019f6:	1e63      	subs	r3, r4, #1
 80019f8:	419c      	sbcs	r4, r3
 80019fa:	4643      	mov	r3, r8
 80019fc:	431c      	orrs	r4, r3
 80019fe:	e5db      	b.n	80015b8 <__aeabi_dsub+0x264>
 8001a00:	0002      	movs	r2, r0
 8001a02:	2400      	movs	r4, #0
 8001a04:	2300      	movs	r3, #0
 8001a06:	e548      	b.n	800149a <__aeabi_dsub+0x146>
 8001a08:	19dc      	adds	r4, r3, r7
 8001a0a:	42bc      	cmp	r4, r7
 8001a0c:	41bf      	sbcs	r7, r7
 8001a0e:	4461      	add	r1, ip
 8001a10:	4689      	mov	r9, r1
 8001a12:	427f      	negs	r7, r7
 8001a14:	44b9      	add	r9, r7
 8001a16:	e738      	b.n	800188a <__aeabi_dsub+0x536>
 8001a18:	464b      	mov	r3, r9
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x6cc>
 8001a1e:	e69f      	b.n	8001760 <__aeabi_dsub+0x40c>
 8001a20:	e606      	b.n	8001630 <__aeabi_dsub+0x2dc>
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	000007fe 	.word	0x000007fe
 8001a28:	000007ff 	.word	0x000007ff
 8001a2c:	ff7fffff 	.word	0xff7fffff
 8001a30:	08ff      	lsrs	r7, r7, #3
 8001a32:	074b      	lsls	r3, r1, #29
 8001a34:	433b      	orrs	r3, r7
 8001a36:	08cc      	lsrs	r4, r1, #3
 8001a38:	e616      	b.n	8001668 <__aeabi_dsub+0x314>
 8001a3a:	4662      	mov	r2, ip
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	0752      	lsls	r2, r2, #29
 8001a40:	4313      	orrs	r3, r2
 8001a42:	4662      	mov	r2, ip
 8001a44:	08d4      	lsrs	r4, r2, #3
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	0312      	lsls	r2, r2, #12
 8001a4a:	4214      	tst	r4, r2
 8001a4c:	d007      	beq.n	8001a5e <__aeabi_dsub+0x70a>
 8001a4e:	08c8      	lsrs	r0, r1, #3
 8001a50:	4210      	tst	r0, r2
 8001a52:	d104      	bne.n	8001a5e <__aeabi_dsub+0x70a>
 8001a54:	465d      	mov	r5, fp
 8001a56:	0004      	movs	r4, r0
 8001a58:	08fb      	lsrs	r3, r7, #3
 8001a5a:	0749      	lsls	r1, r1, #29
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	0f5a      	lsrs	r2, r3, #29
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	0752      	lsls	r2, r2, #29
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	e5fe      	b.n	8001668 <__aeabi_dsub+0x314>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	4a01      	ldr	r2, [pc, #4]	; (8001a74 <__aeabi_dsub+0x720>)
 8001a6e:	001c      	movs	r4, r3
 8001a70:	e513      	b.n	800149a <__aeabi_dsub+0x146>
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff

08001a78 <__aeabi_d2iz>:
 8001a78:	000a      	movs	r2, r1
 8001a7a:	b530      	push	{r4, r5, lr}
 8001a7c:	4c13      	ldr	r4, [pc, #76]	; (8001acc <__aeabi_d2iz+0x54>)
 8001a7e:	0053      	lsls	r3, r2, #1
 8001a80:	0309      	lsls	r1, r1, #12
 8001a82:	0005      	movs	r5, r0
 8001a84:	0b09      	lsrs	r1, r1, #12
 8001a86:	2000      	movs	r0, #0
 8001a88:	0d5b      	lsrs	r3, r3, #21
 8001a8a:	0fd2      	lsrs	r2, r2, #31
 8001a8c:	42a3      	cmp	r3, r4
 8001a8e:	dd04      	ble.n	8001a9a <__aeabi_d2iz+0x22>
 8001a90:	480f      	ldr	r0, [pc, #60]	; (8001ad0 <__aeabi_d2iz+0x58>)
 8001a92:	4283      	cmp	r3, r0
 8001a94:	dd02      	ble.n	8001a9c <__aeabi_d2iz+0x24>
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <__aeabi_d2iz+0x5c>)
 8001a98:	18d0      	adds	r0, r2, r3
 8001a9a:	bd30      	pop	{r4, r5, pc}
 8001a9c:	2080      	movs	r0, #128	; 0x80
 8001a9e:	0340      	lsls	r0, r0, #13
 8001aa0:	4301      	orrs	r1, r0
 8001aa2:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <__aeabi_d2iz+0x60>)
 8001aa4:	1ac0      	subs	r0, r0, r3
 8001aa6:	281f      	cmp	r0, #31
 8001aa8:	dd08      	ble.n	8001abc <__aeabi_d2iz+0x44>
 8001aaa:	480c      	ldr	r0, [pc, #48]	; (8001adc <__aeabi_d2iz+0x64>)
 8001aac:	1ac3      	subs	r3, r0, r3
 8001aae:	40d9      	lsrs	r1, r3
 8001ab0:	000b      	movs	r3, r1
 8001ab2:	4258      	negs	r0, r3
 8001ab4:	2a00      	cmp	r2, #0
 8001ab6:	d1f0      	bne.n	8001a9a <__aeabi_d2iz+0x22>
 8001ab8:	0018      	movs	r0, r3
 8001aba:	e7ee      	b.n	8001a9a <__aeabi_d2iz+0x22>
 8001abc:	4c08      	ldr	r4, [pc, #32]	; (8001ae0 <__aeabi_d2iz+0x68>)
 8001abe:	40c5      	lsrs	r5, r0
 8001ac0:	46a4      	mov	ip, r4
 8001ac2:	4463      	add	r3, ip
 8001ac4:	4099      	lsls	r1, r3
 8001ac6:	000b      	movs	r3, r1
 8001ac8:	432b      	orrs	r3, r5
 8001aca:	e7f2      	b.n	8001ab2 <__aeabi_d2iz+0x3a>
 8001acc:	000003fe 	.word	0x000003fe
 8001ad0:	0000041d 	.word	0x0000041d
 8001ad4:	7fffffff 	.word	0x7fffffff
 8001ad8:	00000433 	.word	0x00000433
 8001adc:	00000413 	.word	0x00000413
 8001ae0:	fffffbed 	.word	0xfffffbed

08001ae4 <__aeabi_i2d>:
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	d016      	beq.n	8001b18 <__aeabi_i2d+0x34>
 8001aea:	17c3      	asrs	r3, r0, #31
 8001aec:	18c5      	adds	r5, r0, r3
 8001aee:	405d      	eors	r5, r3
 8001af0:	0fc4      	lsrs	r4, r0, #31
 8001af2:	0028      	movs	r0, r5
 8001af4:	f000 f8d4 	bl	8001ca0 <__clzsi2>
 8001af8:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <__aeabi_i2d+0x5c>)
 8001afa:	1a12      	subs	r2, r2, r0
 8001afc:	280a      	cmp	r0, #10
 8001afe:	dc16      	bgt.n	8001b2e <__aeabi_i2d+0x4a>
 8001b00:	0003      	movs	r3, r0
 8001b02:	002e      	movs	r6, r5
 8001b04:	3315      	adds	r3, #21
 8001b06:	409e      	lsls	r6, r3
 8001b08:	230b      	movs	r3, #11
 8001b0a:	1a18      	subs	r0, r3, r0
 8001b0c:	40c5      	lsrs	r5, r0
 8001b0e:	0552      	lsls	r2, r2, #21
 8001b10:	032d      	lsls	r5, r5, #12
 8001b12:	0b2d      	lsrs	r5, r5, #12
 8001b14:	0d53      	lsrs	r3, r2, #21
 8001b16:	e003      	b.n	8001b20 <__aeabi_i2d+0x3c>
 8001b18:	2400      	movs	r4, #0
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2500      	movs	r5, #0
 8001b1e:	2600      	movs	r6, #0
 8001b20:	051b      	lsls	r3, r3, #20
 8001b22:	432b      	orrs	r3, r5
 8001b24:	07e4      	lsls	r4, r4, #31
 8001b26:	4323      	orrs	r3, r4
 8001b28:	0030      	movs	r0, r6
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	bd70      	pop	{r4, r5, r6, pc}
 8001b2e:	380b      	subs	r0, #11
 8001b30:	4085      	lsls	r5, r0
 8001b32:	0552      	lsls	r2, r2, #21
 8001b34:	032d      	lsls	r5, r5, #12
 8001b36:	2600      	movs	r6, #0
 8001b38:	0b2d      	lsrs	r5, r5, #12
 8001b3a:	0d53      	lsrs	r3, r2, #21
 8001b3c:	e7f0      	b.n	8001b20 <__aeabi_i2d+0x3c>
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	0000041e 	.word	0x0000041e

08001b44 <__aeabi_ui2d>:
 8001b44:	b510      	push	{r4, lr}
 8001b46:	1e04      	subs	r4, r0, #0
 8001b48:	d010      	beq.n	8001b6c <__aeabi_ui2d+0x28>
 8001b4a:	f000 f8a9 	bl	8001ca0 <__clzsi2>
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <__aeabi_ui2d+0x48>)
 8001b50:	1a1b      	subs	r3, r3, r0
 8001b52:	280a      	cmp	r0, #10
 8001b54:	dc11      	bgt.n	8001b7a <__aeabi_ui2d+0x36>
 8001b56:	220b      	movs	r2, #11
 8001b58:	0021      	movs	r1, r4
 8001b5a:	1a12      	subs	r2, r2, r0
 8001b5c:	40d1      	lsrs	r1, r2
 8001b5e:	3015      	adds	r0, #21
 8001b60:	030a      	lsls	r2, r1, #12
 8001b62:	055b      	lsls	r3, r3, #21
 8001b64:	4084      	lsls	r4, r0
 8001b66:	0b12      	lsrs	r2, r2, #12
 8001b68:	0d5b      	lsrs	r3, r3, #21
 8001b6a:	e001      	b.n	8001b70 <__aeabi_ui2d+0x2c>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2200      	movs	r2, #0
 8001b70:	051b      	lsls	r3, r3, #20
 8001b72:	4313      	orrs	r3, r2
 8001b74:	0020      	movs	r0, r4
 8001b76:	0019      	movs	r1, r3
 8001b78:	bd10      	pop	{r4, pc}
 8001b7a:	0022      	movs	r2, r4
 8001b7c:	380b      	subs	r0, #11
 8001b7e:	4082      	lsls	r2, r0
 8001b80:	055b      	lsls	r3, r3, #21
 8001b82:	0312      	lsls	r2, r2, #12
 8001b84:	2400      	movs	r4, #0
 8001b86:	0b12      	lsrs	r2, r2, #12
 8001b88:	0d5b      	lsrs	r3, r3, #21
 8001b8a:	e7f1      	b.n	8001b70 <__aeabi_ui2d+0x2c>
 8001b8c:	0000041e 	.word	0x0000041e

08001b90 <__aeabi_d2f>:
 8001b90:	0002      	movs	r2, r0
 8001b92:	004b      	lsls	r3, r1, #1
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	0d5b      	lsrs	r3, r3, #21
 8001b98:	030c      	lsls	r4, r1, #12
 8001b9a:	4e3d      	ldr	r6, [pc, #244]	; (8001c90 <__aeabi_d2f+0x100>)
 8001b9c:	0a64      	lsrs	r4, r4, #9
 8001b9e:	0f40      	lsrs	r0, r0, #29
 8001ba0:	1c5f      	adds	r7, r3, #1
 8001ba2:	0fc9      	lsrs	r1, r1, #31
 8001ba4:	4304      	orrs	r4, r0
 8001ba6:	00d5      	lsls	r5, r2, #3
 8001ba8:	4237      	tst	r7, r6
 8001baa:	d00a      	beq.n	8001bc2 <__aeabi_d2f+0x32>
 8001bac:	4839      	ldr	r0, [pc, #228]	; (8001c94 <__aeabi_d2f+0x104>)
 8001bae:	181e      	adds	r6, r3, r0
 8001bb0:	2efe      	cmp	r6, #254	; 0xfe
 8001bb2:	dd16      	ble.n	8001be2 <__aeabi_d2f+0x52>
 8001bb4:	20ff      	movs	r0, #255	; 0xff
 8001bb6:	2400      	movs	r4, #0
 8001bb8:	05c0      	lsls	r0, r0, #23
 8001bba:	4320      	orrs	r0, r4
 8001bbc:	07c9      	lsls	r1, r1, #31
 8001bbe:	4308      	orrs	r0, r1
 8001bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d106      	bne.n	8001bd4 <__aeabi_d2f+0x44>
 8001bc6:	432c      	orrs	r4, r5
 8001bc8:	d026      	beq.n	8001c18 <__aeabi_d2f+0x88>
 8001bca:	2205      	movs	r2, #5
 8001bcc:	0192      	lsls	r2, r2, #6
 8001bce:	0a54      	lsrs	r4, r2, #9
 8001bd0:	b2d8      	uxtb	r0, r3
 8001bd2:	e7f1      	b.n	8001bb8 <__aeabi_d2f+0x28>
 8001bd4:	4325      	orrs	r5, r4
 8001bd6:	d0ed      	beq.n	8001bb4 <__aeabi_d2f+0x24>
 8001bd8:	2080      	movs	r0, #128	; 0x80
 8001bda:	03c0      	lsls	r0, r0, #15
 8001bdc:	4304      	orrs	r4, r0
 8001bde:	20ff      	movs	r0, #255	; 0xff
 8001be0:	e7ea      	b.n	8001bb8 <__aeabi_d2f+0x28>
 8001be2:	2e00      	cmp	r6, #0
 8001be4:	dd1b      	ble.n	8001c1e <__aeabi_d2f+0x8e>
 8001be6:	0192      	lsls	r2, r2, #6
 8001be8:	1e53      	subs	r3, r2, #1
 8001bea:	419a      	sbcs	r2, r3
 8001bec:	00e4      	lsls	r4, r4, #3
 8001bee:	0f6d      	lsrs	r5, r5, #29
 8001bf0:	4322      	orrs	r2, r4
 8001bf2:	432a      	orrs	r2, r5
 8001bf4:	0753      	lsls	r3, r2, #29
 8001bf6:	d048      	beq.n	8001c8a <__aeabi_d2f+0xfa>
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d000      	beq.n	8001c02 <__aeabi_d2f+0x72>
 8001c00:	3204      	adds	r2, #4
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	04db      	lsls	r3, r3, #19
 8001c06:	4013      	ands	r3, r2
 8001c08:	d03f      	beq.n	8001c8a <__aeabi_d2f+0xfa>
 8001c0a:	1c70      	adds	r0, r6, #1
 8001c0c:	2efe      	cmp	r6, #254	; 0xfe
 8001c0e:	d0d1      	beq.n	8001bb4 <__aeabi_d2f+0x24>
 8001c10:	0192      	lsls	r2, r2, #6
 8001c12:	0a54      	lsrs	r4, r2, #9
 8001c14:	b2c0      	uxtb	r0, r0
 8001c16:	e7cf      	b.n	8001bb8 <__aeabi_d2f+0x28>
 8001c18:	2000      	movs	r0, #0
 8001c1a:	2400      	movs	r4, #0
 8001c1c:	e7cc      	b.n	8001bb8 <__aeabi_d2f+0x28>
 8001c1e:	0032      	movs	r2, r6
 8001c20:	3217      	adds	r2, #23
 8001c22:	db22      	blt.n	8001c6a <__aeabi_d2f+0xda>
 8001c24:	2080      	movs	r0, #128	; 0x80
 8001c26:	0400      	lsls	r0, r0, #16
 8001c28:	4320      	orrs	r0, r4
 8001c2a:	241e      	movs	r4, #30
 8001c2c:	1ba4      	subs	r4, r4, r6
 8001c2e:	2c1f      	cmp	r4, #31
 8001c30:	dd1d      	ble.n	8001c6e <__aeabi_d2f+0xde>
 8001c32:	2202      	movs	r2, #2
 8001c34:	4252      	negs	r2, r2
 8001c36:	1b96      	subs	r6, r2, r6
 8001c38:	0002      	movs	r2, r0
 8001c3a:	40f2      	lsrs	r2, r6
 8001c3c:	0016      	movs	r6, r2
 8001c3e:	2c20      	cmp	r4, #32
 8001c40:	d004      	beq.n	8001c4c <__aeabi_d2f+0xbc>
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <__aeabi_d2f+0x108>)
 8001c44:	4694      	mov	ip, r2
 8001c46:	4463      	add	r3, ip
 8001c48:	4098      	lsls	r0, r3
 8001c4a:	4305      	orrs	r5, r0
 8001c4c:	002a      	movs	r2, r5
 8001c4e:	1e53      	subs	r3, r2, #1
 8001c50:	419a      	sbcs	r2, r3
 8001c52:	4332      	orrs	r2, r6
 8001c54:	2600      	movs	r6, #0
 8001c56:	0753      	lsls	r3, r2, #29
 8001c58:	d1ce      	bne.n	8001bf8 <__aeabi_d2f+0x68>
 8001c5a:	2480      	movs	r4, #128	; 0x80
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	04e4      	lsls	r4, r4, #19
 8001c60:	2001      	movs	r0, #1
 8001c62:	4023      	ands	r3, r4
 8001c64:	4222      	tst	r2, r4
 8001c66:	d1d3      	bne.n	8001c10 <__aeabi_d2f+0x80>
 8001c68:	e7b0      	b.n	8001bcc <__aeabi_d2f+0x3c>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e7ad      	b.n	8001bca <__aeabi_d2f+0x3a>
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <__aeabi_d2f+0x10c>)
 8001c70:	4694      	mov	ip, r2
 8001c72:	002a      	movs	r2, r5
 8001c74:	40e2      	lsrs	r2, r4
 8001c76:	0014      	movs	r4, r2
 8001c78:	002a      	movs	r2, r5
 8001c7a:	4463      	add	r3, ip
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	4098      	lsls	r0, r3
 8001c80:	1e55      	subs	r5, r2, #1
 8001c82:	41aa      	sbcs	r2, r5
 8001c84:	4302      	orrs	r2, r0
 8001c86:	4322      	orrs	r2, r4
 8001c88:	e7e4      	b.n	8001c54 <__aeabi_d2f+0xc4>
 8001c8a:	0033      	movs	r3, r6
 8001c8c:	e79e      	b.n	8001bcc <__aeabi_d2f+0x3c>
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	000007fe 	.word	0x000007fe
 8001c94:	fffffc80 	.word	0xfffffc80
 8001c98:	fffffca2 	.word	0xfffffca2
 8001c9c:	fffffc82 	.word	0xfffffc82

08001ca0 <__clzsi2>:
 8001ca0:	211c      	movs	r1, #28
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	4298      	cmp	r0, r3
 8001ca8:	d301      	bcc.n	8001cae <__clzsi2+0xe>
 8001caa:	0c00      	lsrs	r0, r0, #16
 8001cac:	3910      	subs	r1, #16
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	4298      	cmp	r0, r3
 8001cb2:	d301      	bcc.n	8001cb8 <__clzsi2+0x18>
 8001cb4:	0a00      	lsrs	r0, r0, #8
 8001cb6:	3908      	subs	r1, #8
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	4298      	cmp	r0, r3
 8001cbc:	d301      	bcc.n	8001cc2 <__clzsi2+0x22>
 8001cbe:	0900      	lsrs	r0, r0, #4
 8001cc0:	3904      	subs	r1, #4
 8001cc2:	a202      	add	r2, pc, #8	; (adr r2, 8001ccc <__clzsi2+0x2c>)
 8001cc4:	5c10      	ldrb	r0, [r2, r0]
 8001cc6:	1840      	adds	r0, r0, r1
 8001cc8:	4770      	bx	lr
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	02020304 	.word	0x02020304
 8001cd0:	01010101 	.word	0x01010101
	...

08001cdc <I2C_DEVICE_Check>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_DEVICE_Check (void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af02      	add	r7, sp, #8

buff_tx[0] = 0xD0;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <I2C_DEVICE_Check+0x34>)
 8001ce4:	22d0      	movs	r2, #208	; 0xd0
 8001ce6:	701a      	strb	r2, [r3, #0]


HAL_I2C_Master_Transmit(&hi2c1, dev_addr, &buff_tx[0], 1, 10000);
 8001ce8:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <I2C_DEVICE_Check+0x34>)
 8001cea:	480a      	ldr	r0, [pc, #40]	; (8001d14 <I2C_DEVICE_Check+0x38>)
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <I2C_DEVICE_Check+0x3c>)
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	21ee      	movs	r1, #238	; 0xee
 8001cf4:	f001 f8ec 	bl	8002ed0 <HAL_I2C_Master_Transmit>
HAL_I2C_Master_Receive(&hi2c1, dev_addr+1, &devname, 1, 10000);
 8001cf8:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <I2C_DEVICE_Check+0x40>)
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <I2C_DEVICE_Check+0x38>)
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <I2C_DEVICE_Check+0x3c>)
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2301      	movs	r3, #1
 8001d02:	21ef      	movs	r1, #239	; 0xef
 8001d04:	f001 f9ec 	bl	80030e0 <HAL_I2C_Master_Receive>
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	200000dc 	.word	0x200000dc
 8001d14:	20000088 	.word	0x20000088
 8001d18:	00002710 	.word	0x00002710
 8001d1c:	200000de 	.word	0x200000de

08001d20 <I2C_DEVICE_Init>:

void I2C_DEVICE_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af02      	add	r7, sp, #8
	buff_tx[0] = 0xF5;
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <I2C_DEVICE_Init+0x44>)
 8001d28:	22f5      	movs	r2, #245	; 0xf5
 8001d2a:	701a      	strb	r2, [r3, #0]
	buff_tx[1] = 0x10;
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <I2C_DEVICE_Init+0x44>)
 8001d2e:	2210      	movs	r2, #16
 8001d30:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, dev_addr, &buff_tx[0], 2, 10000);
 8001d32:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <I2C_DEVICE_Init+0x44>)
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <I2C_DEVICE_Init+0x48>)
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <I2C_DEVICE_Init+0x4c>)
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	21ee      	movs	r1, #238	; 0xee
 8001d3e:	f001 f8c7 	bl	8002ed0 <HAL_I2C_Master_Transmit>

	buff_tx[0] = 0xF4;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <I2C_DEVICE_Init+0x44>)
 8001d44:	22f4      	movs	r2, #244	; 0xf4
 8001d46:	701a      	strb	r2, [r3, #0]
	buff_tx[1] = 0x57;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <I2C_DEVICE_Init+0x44>)
 8001d4a:	2257      	movs	r2, #87	; 0x57
 8001d4c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, dev_addr, &buff_tx[0], 2, 10000);
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <I2C_DEVICE_Init+0x44>)
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <I2C_DEVICE_Init+0x48>)
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <I2C_DEVICE_Init+0x4c>)
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2302      	movs	r3, #2
 8001d58:	21ee      	movs	r1, #238	; 0xee
 8001d5a:	f001 f8b9 	bl	8002ed0 <HAL_I2C_Master_Transmit>
}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200000dc 	.word	0x200000dc
 8001d68:	20000088 	.word	0x20000088
 8001d6c:	00002710 	.word	0x00002710

08001d70 <I2C_DEVICE_cali>:

void I2C_DEVICE_cali (void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af02      	add	r7, sp, #8
	strt_add = 0x88;
 8001d76:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <I2C_DEVICE_cali+0x168>)
 8001d78:	2288      	movs	r2, #136	; 0x88
 8001d7a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, dev_addr, &strt_add, 1, 10000);
 8001d7c:	4a56      	ldr	r2, [pc, #344]	; (8001ed8 <I2C_DEVICE_cali+0x168>)
 8001d7e:	4857      	ldr	r0, [pc, #348]	; (8001edc <I2C_DEVICE_cali+0x16c>)
 8001d80:	4b57      	ldr	r3, [pc, #348]	; (8001ee0 <I2C_DEVICE_cali+0x170>)
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2301      	movs	r3, #1
 8001d86:	21ee      	movs	r1, #238	; 0xee
 8001d88:	f001 f8a2 	bl	8002ed0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, dev_addr+1, &buff_rx[0], 24, 10000);
 8001d8c:	4a55      	ldr	r2, [pc, #340]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001d8e:	4853      	ldr	r0, [pc, #332]	; (8001edc <I2C_DEVICE_cali+0x16c>)
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <I2C_DEVICE_cali+0x170>)
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2318      	movs	r3, #24
 8001d96:	21ef      	movs	r1, #239	; 0xef
 8001d98:	f001 f9a2 	bl	80030e0 <HAL_I2C_Master_Receive>

	dig_T1 = ((buff_rx[1]<<8) + buff_rx[0]);
 8001d9c:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	18d3      	adds	r3, r2, r3
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <I2C_DEVICE_cali+0x178>)
 8001db2:	801a      	strh	r2, [r3, #0]
	dig_T2 = ((buff_rx[3]<<8) + buff_rx[2]);
 8001db4:	4b4b      	ldr	r3, [pc, #300]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001db6:	78db      	ldrb	r3, [r3, #3]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001dc0:	789b      	ldrb	r3, [r3, #2]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	18d3      	adds	r3, r2, r3
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	4b48      	ldr	r3, [pc, #288]	; (8001eec <I2C_DEVICE_cali+0x17c>)
 8001dcc:	801a      	strh	r2, [r3, #0]
	dig_T3 = ((buff_rx[5]<<8) + buff_rx[4]);
 8001dce:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001dd0:	795b      	ldrb	r3, [r3, #5]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001dda:	791b      	ldrb	r3, [r3, #4]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	18d3      	adds	r3, r2, r3
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <I2C_DEVICE_cali+0x180>)
 8001de6:	801a      	strh	r2, [r3, #0]
	dig_P1 = ((buff_rx[7]<<8) + buff_rx[6]);
 8001de8:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001dea:	79db      	ldrb	r3, [r3, #7]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001df4:	799b      	ldrb	r3, [r3, #6]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	18d3      	adds	r3, r2, r3
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <I2C_DEVICE_cali+0x184>)
 8001dfe:	801a      	strh	r2, [r3, #0]
	dig_P2 = ((buff_rx[9]<<8) + buff_rx[8]);
 8001e00:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e02:	7a5b      	ldrb	r3, [r3, #9]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e0c:	7a1b      	ldrb	r3, [r3, #8]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	18d3      	adds	r3, r2, r3
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <I2C_DEVICE_cali+0x188>)
 8001e18:	801a      	strh	r2, [r3, #0]
	dig_P3 = ((buff_rx[11]<<8) + buff_rx[10]);
 8001e1a:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e1c:	7adb      	ldrb	r3, [r3, #11]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e26:	7a9b      	ldrb	r3, [r3, #10]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	18d3      	adds	r3, r2, r3
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	4b32      	ldr	r3, [pc, #200]	; (8001efc <I2C_DEVICE_cali+0x18c>)
 8001e32:	801a      	strh	r2, [r3, #0]
	dig_P4 = ((buff_rx[13]<<8) + buff_rx[12]);
 8001e34:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e36:	7b5b      	ldrb	r3, [r3, #13]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e40:	7b1b      	ldrb	r3, [r3, #12]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	18d3      	adds	r3, r2, r3
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <I2C_DEVICE_cali+0x190>)
 8001e4c:	801a      	strh	r2, [r3, #0]
	dig_P5 = ((buff_rx[15]<<8) + buff_rx[14]);
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e50:	7bdb      	ldrb	r3, [r3, #15]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e5a:	7b9b      	ldrb	r3, [r3, #14]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	18d3      	adds	r3, r2, r3
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	b21a      	sxth	r2, r3
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <I2C_DEVICE_cali+0x194>)
 8001e66:	801a      	strh	r2, [r3, #0]
	dig_P6 = ((buff_rx[17]<<8) + buff_rx[16]);
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e6a:	7c5b      	ldrb	r3, [r3, #17]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e74:	7c1b      	ldrb	r3, [r3, #16]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	18d3      	adds	r3, r2, r3
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	b21a      	sxth	r2, r3
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <I2C_DEVICE_cali+0x198>)
 8001e80:	801a      	strh	r2, [r3, #0]
	dig_P7 = ((buff_rx[19]<<8) + buff_rx[18]);
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e84:	7cdb      	ldrb	r3, [r3, #19]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e8e:	7c9b      	ldrb	r3, [r3, #18]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	18d3      	adds	r3, r2, r3
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b21a      	sxth	r2, r3
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <I2C_DEVICE_cali+0x19c>)
 8001e9a:	801a      	strh	r2, [r3, #0]
	dig_P8 = ((buff_rx[21]<<8) + buff_rx[20]);
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001e9e:	7d5b      	ldrb	r3, [r3, #21]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001ea8:	7d1b      	ldrb	r3, [r3, #20]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	18d3      	adds	r3, r2, r3
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b21a      	sxth	r2, r3
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <I2C_DEVICE_cali+0x1a0>)
 8001eb4:	801a      	strh	r2, [r3, #0]
	dig_P9 = ((buff_rx[23]<<8) + buff_rx[22]);
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001eb8:	7ddb      	ldrb	r3, [r3, #23]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <I2C_DEVICE_cali+0x174>)
 8001ec2:	7d9b      	ldrb	r3, [r3, #22]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	18d3      	adds	r3, r2, r3
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <I2C_DEVICE_cali+0x1a4>)
 8001ece:	801a      	strh	r2, [r3, #0]

}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	2000005c 	.word	0x2000005c
 8001edc:	20000088 	.word	0x20000088
 8001ee0:	00002710 	.word	0x00002710
 8001ee4:	2000002c 	.word	0x2000002c
 8001ee8:	2000005e 	.word	0x2000005e
 8001eec:	20000062 	.word	0x20000062
 8001ef0:	20000064 	.word	0x20000064
 8001ef4:	20000060 	.word	0x20000060
 8001ef8:	20000066 	.word	0x20000066
 8001efc:	20000068 	.word	0x20000068
 8001f00:	2000006a 	.word	0x2000006a
 8001f04:	2000006c 	.word	0x2000006c
 8001f08:	2000006e 	.word	0x2000006e
 8001f0c:	20000070 	.word	0x20000070
 8001f10:	20000072 	.word	0x20000072
 8001f14:	20000074 	.word	0x20000074

08001f18 <BMP280_calc_values>:

void BMP280_calc_values(void)
{
 8001f18:	b5b0      	push	{r4, r5, r7, lr}
 8001f1a:	b092      	sub	sp, #72	; 0x48
 8001f1c:	af02      	add	r7, sp, #8
uint8_t status;
strt_add=0xF7;
 8001f1e:	4bf2      	ldr	r3, [pc, #968]	; (80022e8 <BMP280_calc_values+0x3d0>)
 8001f20:	22f7      	movs	r2, #247	; 0xf7
 8001f22:	701a      	strb	r2, [r3, #0]

do
{
buff_tx[0] = 0xF3;
 8001f24:	4bf1      	ldr	r3, [pc, #964]	; (80022ec <BMP280_calc_values+0x3d4>)
 8001f26:	22f3      	movs	r2, #243	; 0xf3
 8001f28:	701a      	strb	r2, [r3, #0]

HAL_I2C_Master_Transmit(&hi2c1, dev_addr, &buff_tx[0], 1, 10000);
 8001f2a:	4af0      	ldr	r2, [pc, #960]	; (80022ec <BMP280_calc_values+0x3d4>)
 8001f2c:	48f0      	ldr	r0, [pc, #960]	; (80022f0 <BMP280_calc_values+0x3d8>)
 8001f2e:	4bf1      	ldr	r3, [pc, #964]	; (80022f4 <BMP280_calc_values+0x3dc>)
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2301      	movs	r3, #1
 8001f34:	21ee      	movs	r1, #238	; 0xee
 8001f36:	f000 ffcb 	bl	8002ed0 <HAL_I2C_Master_Transmit>
HAL_I2C_Master_Receive(&hi2c1, dev_addr + 1, &statusvalue, 1, 10000);
 8001f3a:	4aef      	ldr	r2, [pc, #956]	; (80022f8 <BMP280_calc_values+0x3e0>)
 8001f3c:	48ec      	ldr	r0, [pc, #944]	; (80022f0 <BMP280_calc_values+0x3d8>)
 8001f3e:	4bed      	ldr	r3, [pc, #948]	; (80022f4 <BMP280_calc_values+0x3dc>)
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2301      	movs	r3, #1
 8001f44:	21ef      	movs	r1, #239	; 0xef
 8001f46:	f001 f8cb 	bl	80030e0 <HAL_I2C_Master_Receive>

status=statusvalue;
 8001f4a:	2137      	movs	r1, #55	; 0x37
 8001f4c:	2408      	movs	r4, #8
 8001f4e:	190b      	adds	r3, r1, r4
 8001f50:	19db      	adds	r3, r3, r7
 8001f52:	4ae9      	ldr	r2, [pc, #932]	; (80022f8 <BMP280_calc_values+0x3e0>)
 8001f54:	7812      	ldrb	r2, [r2, #0]
 8001f56:	701a      	strb	r2, [r3, #0]


}
while(((statusvalue&0x08)==8)||((status&0x01)==1));
 8001f58:	4be7      	ldr	r3, [pc, #924]	; (80022f8 <BMP280_calc_values+0x3e0>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	2308      	movs	r3, #8
 8001f60:	4013      	ands	r3, r2
 8001f62:	d1df      	bne.n	8001f24 <BMP280_calc_values+0xc>
 8001f64:	190b      	adds	r3, r1, r4
 8001f66:	19db      	adds	r3, r3, r7
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d1d9      	bne.n	8001f24 <BMP280_calc_values+0xc>

HAL_I2C_Master_Transmit(&hi2c1, dev_addr, &strt_add, 1, 10000);
 8001f70:	4add      	ldr	r2, [pc, #884]	; (80022e8 <BMP280_calc_values+0x3d0>)
 8001f72:	48df      	ldr	r0, [pc, #892]	; (80022f0 <BMP280_calc_values+0x3d8>)
 8001f74:	4bdf      	ldr	r3, [pc, #892]	; (80022f4 <BMP280_calc_values+0x3dc>)
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2301      	movs	r3, #1
 8001f7a:	21ee      	movs	r1, #238	; 0xee
 8001f7c:	f000 ffa8 	bl	8002ed0 <HAL_I2C_Master_Transmit>
HAL_I2C_Master_Receive(&hi2c1, dev_addr + 1, &buff_rx1[0], 6, 10000);
 8001f80:	4ade      	ldr	r2, [pc, #888]	; (80022fc <BMP280_calc_values+0x3e4>)
 8001f82:	48db      	ldr	r0, [pc, #876]	; (80022f0 <BMP280_calc_values+0x3d8>)
 8001f84:	4bdb      	ldr	r3, [pc, #876]	; (80022f4 <BMP280_calc_values+0x3dc>)
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2306      	movs	r3, #6
 8001f8a:	21ef      	movs	r1, #239	; 0xef
 8001f8c:	f001 f8a8 	bl	80030e0 <HAL_I2C_Master_Receive>

volatile uint32_t temp[3];
temp[2]=buff_rx1[3];
 8001f90:	4bda      	ldr	r3, [pc, #872]	; (80022fc <BMP280_calc_values+0x3e4>)
 8001f92:	78db      	ldrb	r3, [r3, #3]
 8001f94:	001a      	movs	r2, r3
 8001f96:	210c      	movs	r1, #12
 8001f98:	190b      	adds	r3, r1, r4
 8001f9a:	19db      	adds	r3, r3, r7
 8001f9c:	609a      	str	r2, [r3, #8]
temp[1]=buff_rx1[4];
 8001f9e:	4bd7      	ldr	r3, [pc, #860]	; (80022fc <BMP280_calc_values+0x3e4>)
 8001fa0:	791b      	ldrb	r3, [r3, #4]
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	190b      	adds	r3, r1, r4
 8001fa6:	19db      	adds	r3, r3, r7
 8001fa8:	605a      	str	r2, [r3, #4]
temp[0]=buff_rx1[5];
 8001faa:	4bd4      	ldr	r3, [pc, #848]	; (80022fc <BMP280_calc_values+0x3e4>)
 8001fac:	795b      	ldrb	r3, [r3, #5]
 8001fae:	001a      	movs	r2, r3
 8001fb0:	0020      	movs	r0, r4
 8001fb2:	180b      	adds	r3, r1, r0
 8001fb4:	19db      	adds	r3, r3, r7
 8001fb6:	601a      	str	r2, [r3, #0]
temperature_raw= (temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8001fb8:	180b      	adds	r3, r1, r0
 8001fba:	19db      	adds	r3, r3, r7
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	031a      	lsls	r2, r3, #12
 8001fc0:	180b      	adds	r3, r1, r0
 8001fc2:	19db      	adds	r3, r3, r7
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	18d2      	adds	r2, r2, r3
 8001fca:	180b      	adds	r3, r1, r0
 8001fcc:	19db      	adds	r3, r3, r7
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	18d3      	adds	r3, r2, r3
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	4bca      	ldr	r3, [pc, #808]	; (8002300 <BMP280_calc_values+0x3e8>)
 8001fd8:	601a      	str	r2, [r3, #0]

temp[2]=buff_rx1[0];
 8001fda:	4bc8      	ldr	r3, [pc, #800]	; (80022fc <BMP280_calc_values+0x3e4>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	001a      	movs	r2, r3
 8001fe0:	180b      	adds	r3, r1, r0
 8001fe2:	19db      	adds	r3, r3, r7
 8001fe4:	609a      	str	r2, [r3, #8]
temp[1]=buff_rx1[1];
 8001fe6:	4bc5      	ldr	r3, [pc, #788]	; (80022fc <BMP280_calc_values+0x3e4>)
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	001a      	movs	r2, r3
 8001fec:	180b      	adds	r3, r1, r0
 8001fee:	19db      	adds	r3, r3, r7
 8001ff0:	605a      	str	r2, [r3, #4]
temp[0]=buff_rx1[2];
 8001ff2:	4bc2      	ldr	r3, [pc, #776]	; (80022fc <BMP280_calc_values+0x3e4>)
 8001ff4:	789b      	ldrb	r3, [r3, #2]
 8001ff6:	001a      	movs	r2, r3
 8001ff8:	180b      	adds	r3, r1, r0
 8001ffa:	19db      	adds	r3, r3, r7
 8001ffc:	601a      	str	r2, [r3, #0]
pressure_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8001ffe:	180b      	adds	r3, r1, r0
 8002000:	19db      	adds	r3, r3, r7
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	031a      	lsls	r2, r3, #12
 8002006:	180b      	adds	r3, r1, r0
 8002008:	19db      	adds	r3, r3, r7
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	18d2      	adds	r2, r2, r3
 8002010:	180b      	adds	r3, r1, r0
 8002012:	19db      	adds	r3, r3, r7
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	001a      	movs	r2, r3
 800201c:	4bb9      	ldr	r3, [pc, #740]	; (8002304 <BMP280_calc_values+0x3ec>)
 800201e:	601a      	str	r2, [r3, #0]

double var1, var2;
var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8002020:	4bb7      	ldr	r3, [pc, #732]	; (8002300 <BMP280_calc_values+0x3e8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0018      	movs	r0, r3
 8002026:	f7ff fd5d 	bl	8001ae4 <__aeabi_i2d>
 800202a:	2200      	movs	r2, #0
 800202c:	4bb6      	ldr	r3, [pc, #728]	; (8002308 <BMP280_calc_values+0x3f0>)
 800202e:	f7fe fc2f 	bl	8000890 <__aeabi_ddiv>
 8002032:	0002      	movs	r2, r0
 8002034:	000b      	movs	r3, r1
 8002036:	0014      	movs	r4, r2
 8002038:	001d      	movs	r5, r3
 800203a:	4bb4      	ldr	r3, [pc, #720]	; (800230c <BMP280_calc_values+0x3f4>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	0018      	movs	r0, r3
 8002040:	f7ff fd80 	bl	8001b44 <__aeabi_ui2d>
 8002044:	2200      	movs	r2, #0
 8002046:	4bb2      	ldr	r3, [pc, #712]	; (8002310 <BMP280_calc_values+0x3f8>)
 8002048:	f7fe fc22 	bl	8000890 <__aeabi_ddiv>
 800204c:	0002      	movs	r2, r0
 800204e:	000b      	movs	r3, r1
 8002050:	0020      	movs	r0, r4
 8002052:	0029      	movs	r1, r5
 8002054:	f7ff f97e 	bl	8001354 <__aeabi_dsub>
 8002058:	0002      	movs	r2, r0
 800205a:	000b      	movs	r3, r1
 800205c:	0014      	movs	r4, r2
 800205e:	001d      	movs	r5, r3
 8002060:	4bac      	ldr	r3, [pc, #688]	; (8002314 <BMP280_calc_values+0x3fc>)
 8002062:	2200      	movs	r2, #0
 8002064:	5e9b      	ldrsh	r3, [r3, r2]
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff fd3c 	bl	8001ae4 <__aeabi_i2d>
 800206c:	0002      	movs	r2, r0
 800206e:	000b      	movs	r3, r1
 8002070:	0020      	movs	r0, r4
 8002072:	0029      	movs	r1, r5
 8002074:	f7fe ff02 	bl	8000e7c <__aeabi_dmul>
 8002078:	0002      	movs	r2, r0
 800207a:	000b      	movs	r3, r1
 800207c:	633a      	str	r2, [r7, #48]	; 0x30
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
var2=((((double)temperature_raw)/131072.0 - ((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8002080:	4b9f      	ldr	r3, [pc, #636]	; (8002300 <BMP280_calc_values+0x3e8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0018      	movs	r0, r3
 8002086:	f7ff fd2d 	bl	8001ae4 <__aeabi_i2d>
 800208a:	2200      	movs	r2, #0
 800208c:	2382      	movs	r3, #130	; 0x82
 800208e:	05db      	lsls	r3, r3, #23
 8002090:	f7fe fbfe 	bl	8000890 <__aeabi_ddiv>
 8002094:	0002      	movs	r2, r0
 8002096:	000b      	movs	r3, r1
 8002098:	0014      	movs	r4, r2
 800209a:	001d      	movs	r5, r3
 800209c:	4b9b      	ldr	r3, [pc, #620]	; (800230c <BMP280_calc_values+0x3f4>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7ff fd4f 	bl	8001b44 <__aeabi_ui2d>
 80020a6:	2200      	movs	r2, #0
 80020a8:	4b9b      	ldr	r3, [pc, #620]	; (8002318 <BMP280_calc_values+0x400>)
 80020aa:	f7fe fbf1 	bl	8000890 <__aeabi_ddiv>
 80020ae:	0002      	movs	r2, r0
 80020b0:	000b      	movs	r3, r1
 80020b2:	0020      	movs	r0, r4
 80020b4:	0029      	movs	r1, r5
 80020b6:	f7ff f94d 	bl	8001354 <__aeabi_dsub>
 80020ba:	0002      	movs	r2, r0
 80020bc:	000b      	movs	r3, r1
 80020be:	0014      	movs	r4, r2
 80020c0:	001d      	movs	r5, r3
 80020c2:	4b8f      	ldr	r3, [pc, #572]	; (8002300 <BMP280_calc_values+0x3e8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff fd0c 	bl	8001ae4 <__aeabi_i2d>
 80020cc:	2200      	movs	r2, #0
 80020ce:	2382      	movs	r3, #130	; 0x82
 80020d0:	05db      	lsls	r3, r3, #23
 80020d2:	f7fe fbdd 	bl	8000890 <__aeabi_ddiv>
 80020d6:	0002      	movs	r2, r0
 80020d8:	000b      	movs	r3, r1
 80020da:	603a      	str	r2, [r7, #0]
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	4b8b      	ldr	r3, [pc, #556]	; (800230c <BMP280_calc_values+0x3f4>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f7ff fd2e 	bl	8001b44 <__aeabi_ui2d>
 80020e8:	2200      	movs	r2, #0
 80020ea:	4b8b      	ldr	r3, [pc, #556]	; (8002318 <BMP280_calc_values+0x400>)
 80020ec:	f7fe fbd0 	bl	8000890 <__aeabi_ddiv>
 80020f0:	0002      	movs	r2, r0
 80020f2:	000b      	movs	r3, r1
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f7ff f92c 	bl	8001354 <__aeabi_dsub>
 80020fc:	0002      	movs	r2, r0
 80020fe:	000b      	movs	r3, r1
 8002100:	0020      	movs	r0, r4
 8002102:	0029      	movs	r1, r5
 8002104:	f7fe feba 	bl	8000e7c <__aeabi_dmul>
 8002108:	0002      	movs	r2, r0
 800210a:	000b      	movs	r3, r1
 800210c:	0014      	movs	r4, r2
 800210e:	001d      	movs	r5, r3
 8002110:	4b82      	ldr	r3, [pc, #520]	; (800231c <BMP280_calc_values+0x404>)
 8002112:	2200      	movs	r2, #0
 8002114:	5e9b      	ldrsh	r3, [r3, r2]
 8002116:	0018      	movs	r0, r3
 8002118:	f7ff fce4 	bl	8001ae4 <__aeabi_i2d>
 800211c:	0002      	movs	r2, r0
 800211e:	000b      	movs	r3, r1
 8002120:	0020      	movs	r0, r4
 8002122:	0029      	movs	r1, r5
 8002124:	f7fe feaa 	bl	8000e7c <__aeabi_dmul>
 8002128:	0002      	movs	r2, r0
 800212a:	000b      	movs	r3, r1
 800212c:	62ba      	str	r2, [r7, #40]	; 0x28
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
double t_fine = (int32_t)(var1+var2);
 8002130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002136:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002138:	f7fe f86e 	bl	8000218 <__aeabi_dadd>
 800213c:	0002      	movs	r2, r0
 800213e:	000b      	movs	r3, r1
 8002140:	0010      	movs	r0, r2
 8002142:	0019      	movs	r1, r3
 8002144:	f7ff fc98 	bl	8001a78 <__aeabi_d2iz>
 8002148:	0003      	movs	r3, r0
 800214a:	0018      	movs	r0, r3
 800214c:	f7ff fcca 	bl	8001ae4 <__aeabi_i2d>
 8002150:	0002      	movs	r2, r0
 8002152:	000b      	movs	r3, r1
 8002154:	623a      	str	r2, [r7, #32]
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
volatile float T = (var1+var2)/5120.0;
 8002158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800215e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002160:	f7fe f85a 	bl	8000218 <__aeabi_dadd>
 8002164:	0002      	movs	r2, r0
 8002166:	000b      	movs	r3, r1
 8002168:	0010      	movs	r0, r2
 800216a:	0019      	movs	r1, r3
 800216c:	2200      	movs	r2, #0
 800216e:	4b6c      	ldr	r3, [pc, #432]	; (8002320 <BMP280_calc_values+0x408>)
 8002170:	f7fe fb8e 	bl	8000890 <__aeabi_ddiv>
 8002174:	0002      	movs	r2, r0
 8002176:	000b      	movs	r3, r1
 8002178:	0010      	movs	r0, r2
 800217a:	0019      	movs	r1, r3
 800217c:	f7ff fd08 	bl	8001b90 <__aeabi_d2f>
 8002180:	1c03      	adds	r3, r0, #0
 8002182:	613b      	str	r3, [r7, #16]

var1=((double)t_fine/2.0)-64000.0;
 8002184:	2200      	movs	r2, #0
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	05db      	lsls	r3, r3, #23
 800218a:	6a38      	ldr	r0, [r7, #32]
 800218c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800218e:	f7fe fb7f 	bl	8000890 <__aeabi_ddiv>
 8002192:	0002      	movs	r2, r0
 8002194:	000b      	movs	r3, r1
 8002196:	0010      	movs	r0, r2
 8002198:	0019      	movs	r1, r3
 800219a:	2200      	movs	r2, #0
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <BMP280_calc_values+0x40c>)
 800219e:	f7ff f8d9 	bl	8001354 <__aeabi_dsub>
 80021a2:	0002      	movs	r2, r0
 80021a4:	000b      	movs	r3, r1
 80021a6:	633a      	str	r2, [r7, #48]	; 0x30
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
var2=var1*var1*((double)dig_P6)/32768.0;
 80021aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021b2:	f7fe fe63 	bl	8000e7c <__aeabi_dmul>
 80021b6:	0002      	movs	r2, r0
 80021b8:	000b      	movs	r3, r1
 80021ba:	0014      	movs	r4, r2
 80021bc:	001d      	movs	r5, r3
 80021be:	4b5a      	ldr	r3, [pc, #360]	; (8002328 <BMP280_calc_values+0x410>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	5e9b      	ldrsh	r3, [r3, r2]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7ff fc8d 	bl	8001ae4 <__aeabi_i2d>
 80021ca:	0002      	movs	r2, r0
 80021cc:	000b      	movs	r3, r1
 80021ce:	0020      	movs	r0, r4
 80021d0:	0029      	movs	r1, r5
 80021d2:	f7fe fe53 	bl	8000e7c <__aeabi_dmul>
 80021d6:	0002      	movs	r2, r0
 80021d8:	000b      	movs	r3, r1
 80021da:	0010      	movs	r0, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	2200      	movs	r2, #0
 80021e0:	4b52      	ldr	r3, [pc, #328]	; (800232c <BMP280_calc_values+0x414>)
 80021e2:	f7fe fb55 	bl	8000890 <__aeabi_ddiv>
 80021e6:	0002      	movs	r2, r0
 80021e8:	000b      	movs	r3, r1
 80021ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
var2=var2+var1*((double)dig_P5)*2.0;
 80021ee:	4b50      	ldr	r3, [pc, #320]	; (8002330 <BMP280_calc_values+0x418>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	5e9b      	ldrsh	r3, [r3, r2]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff fc75 	bl	8001ae4 <__aeabi_i2d>
 80021fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fe:	f7fe fe3d 	bl	8000e7c <__aeabi_dmul>
 8002202:	0002      	movs	r2, r0
 8002204:	000b      	movs	r3, r1
 8002206:	0010      	movs	r0, r2
 8002208:	0019      	movs	r1, r3
 800220a:	0002      	movs	r2, r0
 800220c:	000b      	movs	r3, r1
 800220e:	f7fe f803 	bl	8000218 <__aeabi_dadd>
 8002212:	0002      	movs	r2, r0
 8002214:	000b      	movs	r3, r1
 8002216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800221a:	f7fd fffd 	bl	8000218 <__aeabi_dadd>
 800221e:	0002      	movs	r2, r0
 8002220:	000b      	movs	r3, r1
 8002222:	62ba      	str	r2, [r7, #40]	; 0x28
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
var2=(var2/4.0)+(((double)dig_P4)*65536.0);
 8002226:	2200      	movs	r2, #0
 8002228:	4b42      	ldr	r3, [pc, #264]	; (8002334 <BMP280_calc_values+0x41c>)
 800222a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800222c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800222e:	f7fe fb2f 	bl	8000890 <__aeabi_ddiv>
 8002232:	0002      	movs	r2, r0
 8002234:	000b      	movs	r3, r1
 8002236:	0014      	movs	r4, r2
 8002238:	001d      	movs	r5, r3
 800223a:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <BMP280_calc_values+0x420>)
 800223c:	2200      	movs	r2, #0
 800223e:	5e9b      	ldrsh	r3, [r3, r2]
 8002240:	0018      	movs	r0, r3
 8002242:	f7ff fc4f 	bl	8001ae4 <__aeabi_i2d>
 8002246:	2200      	movs	r2, #0
 8002248:	4b3c      	ldr	r3, [pc, #240]	; (800233c <BMP280_calc_values+0x424>)
 800224a:	f7fe fe17 	bl	8000e7c <__aeabi_dmul>
 800224e:	0002      	movs	r2, r0
 8002250:	000b      	movs	r3, r1
 8002252:	0020      	movs	r0, r4
 8002254:	0029      	movs	r1, r5
 8002256:	f7fd ffdf 	bl	8000218 <__aeabi_dadd>
 800225a:	0002      	movs	r2, r0
 800225c:	000b      	movs	r3, r1
 800225e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
var1=(((double)dig_P3)*var1*var1/524288.0+((double)dig_P2)*var1)/524288.0;
 8002262:	4b37      	ldr	r3, [pc, #220]	; (8002340 <BMP280_calc_values+0x428>)
 8002264:	2200      	movs	r2, #0
 8002266:	5e9b      	ldrsh	r3, [r3, r2]
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff fc3b 	bl	8001ae4 <__aeabi_i2d>
 800226e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	f7fe fe03 	bl	8000e7c <__aeabi_dmul>
 8002276:	0002      	movs	r2, r0
 8002278:	000b      	movs	r3, r1
 800227a:	0010      	movs	r0, r2
 800227c:	0019      	movs	r1, r3
 800227e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	f7fe fdfb 	bl	8000e7c <__aeabi_dmul>
 8002286:	0002      	movs	r2, r0
 8002288:	000b      	movs	r3, r1
 800228a:	0010      	movs	r0, r2
 800228c:	0019      	movs	r1, r3
 800228e:	2200      	movs	r2, #0
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <BMP280_calc_values+0x42c>)
 8002292:	f7fe fafd 	bl	8000890 <__aeabi_ddiv>
 8002296:	0002      	movs	r2, r0
 8002298:	000b      	movs	r3, r1
 800229a:	0014      	movs	r4, r2
 800229c:	001d      	movs	r5, r3
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <BMP280_calc_values+0x430>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	5e9b      	ldrsh	r3, [r3, r2]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f7ff fc1d 	bl	8001ae4 <__aeabi_i2d>
 80022aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	f7fe fde5 	bl	8000e7c <__aeabi_dmul>
 80022b2:	0002      	movs	r2, r0
 80022b4:	000b      	movs	r3, r1
 80022b6:	0020      	movs	r0, r4
 80022b8:	0029      	movs	r1, r5
 80022ba:	f7fd ffad 	bl	8000218 <__aeabi_dadd>
 80022be:	0002      	movs	r2, r0
 80022c0:	000b      	movs	r3, r1
 80022c2:	0010      	movs	r0, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	2200      	movs	r2, #0
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <BMP280_calc_values+0x42c>)
 80022ca:	f7fe fae1 	bl	8000890 <__aeabi_ddiv>
 80022ce:	0002      	movs	r2, r0
 80022d0:	000b      	movs	r3, r1
 80022d2:	633a      	str	r2, [r7, #48]	; 0x30
 80022d4:	637b      	str	r3, [r7, #52]	; 0x34
var1=(1.0+var1/32768.0)*((double)dig_P1);
 80022d6:	2200      	movs	r2, #0
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <BMP280_calc_values+0x414>)
 80022da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80022de:	f7fe fad7 	bl	8000890 <__aeabi_ddiv>
 80022e2:	0002      	movs	r2, r0
 80022e4:	000b      	movs	r3, r1
 80022e6:	e031      	b.n	800234c <BMP280_calc_values+0x434>
 80022e8:	2000005c 	.word	0x2000005c
 80022ec:	200000dc 	.word	0x200000dc
 80022f0:	20000088 	.word	0x20000088
 80022f4:	00002710 	.word	0x00002710
 80022f8:	20000028 	.word	0x20000028
 80022fc:	20000044 	.word	0x20000044
 8002300:	20000078 	.word	0x20000078
 8002304:	2000007c 	.word	0x2000007c
 8002308:	40d00000 	.word	0x40d00000
 800230c:	2000005e 	.word	0x2000005e
 8002310:	40900000 	.word	0x40900000
 8002314:	20000062 	.word	0x20000062
 8002318:	40c00000 	.word	0x40c00000
 800231c:	20000064 	.word	0x20000064
 8002320:	40b40000 	.word	0x40b40000
 8002324:	40ef4000 	.word	0x40ef4000
 8002328:	2000006e 	.word	0x2000006e
 800232c:	40e00000 	.word	0x40e00000
 8002330:	2000006c 	.word	0x2000006c
 8002334:	40100000 	.word	0x40100000
 8002338:	2000006a 	.word	0x2000006a
 800233c:	40f00000 	.word	0x40f00000
 8002340:	20000068 	.word	0x20000068
 8002344:	41200000 	.word	0x41200000
 8002348:	20000066 	.word	0x20000066
 800234c:	0010      	movs	r0, r2
 800234e:	0019      	movs	r1, r3
 8002350:	2200      	movs	r2, #0
 8002352:	4b5f      	ldr	r3, [pc, #380]	; (80024d0 <BMP280_calc_values+0x5b8>)
 8002354:	f7fd ff60 	bl	8000218 <__aeabi_dadd>
 8002358:	0002      	movs	r2, r0
 800235a:	000b      	movs	r3, r1
 800235c:	0014      	movs	r4, r2
 800235e:	001d      	movs	r5, r3
 8002360:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <BMP280_calc_values+0x5bc>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	0018      	movs	r0, r3
 8002366:	f7ff fbed 	bl	8001b44 <__aeabi_ui2d>
 800236a:	0002      	movs	r2, r0
 800236c:	000b      	movs	r3, r1
 800236e:	0020      	movs	r0, r4
 8002370:	0029      	movs	r1, r5
 8002372:	f7fe fd83 	bl	8000e7c <__aeabi_dmul>
 8002376:	0002      	movs	r2, r0
 8002378:	000b      	movs	r3, r1
 800237a:	633a      	str	r2, [r7, #48]	; 0x30
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
volatile double p=1048576.0-(double)pressure_raw;
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <BMP280_calc_values+0x5c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0018      	movs	r0, r3
 8002384:	f7ff fbae 	bl	8001ae4 <__aeabi_i2d>
 8002388:	0002      	movs	r2, r0
 800238a:	000b      	movs	r3, r1
 800238c:	2000      	movs	r0, #0
 800238e:	4953      	ldr	r1, [pc, #332]	; (80024dc <BMP280_calc_values+0x5c4>)
 8002390:	f7fe ffe0 	bl	8001354 <__aeabi_dsub>
 8002394:	0002      	movs	r2, r0
 8002396:	000b      	movs	r3, r1
 8002398:	60ba      	str	r2, [r7, #8]
 800239a:	60fb      	str	r3, [r7, #12]
p=(p-(var2/4096.0))*6250.0/var1;
 800239c:	68bc      	ldr	r4, [r7, #8]
 800239e:	68fd      	ldr	r5, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	4b4f      	ldr	r3, [pc, #316]	; (80024e0 <BMP280_calc_values+0x5c8>)
 80023a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023a8:	f7fe fa72 	bl	8000890 <__aeabi_ddiv>
 80023ac:	0002      	movs	r2, r0
 80023ae:	000b      	movs	r3, r1
 80023b0:	0020      	movs	r0, r4
 80023b2:	0029      	movs	r1, r5
 80023b4:	f7fe ffce 	bl	8001354 <__aeabi_dsub>
 80023b8:	0002      	movs	r2, r0
 80023ba:	000b      	movs	r3, r1
 80023bc:	0010      	movs	r0, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	2200      	movs	r2, #0
 80023c2:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <BMP280_calc_values+0x5cc>)
 80023c4:	f7fe fd5a 	bl	8000e7c <__aeabi_dmul>
 80023c8:	0002      	movs	r2, r0
 80023ca:	000b      	movs	r3, r1
 80023cc:	0010      	movs	r0, r2
 80023ce:	0019      	movs	r1, r3
 80023d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d4:	f7fe fa5c 	bl	8000890 <__aeabi_ddiv>
 80023d8:	0002      	movs	r2, r0
 80023da:	000b      	movs	r3, r1
 80023dc:	60ba      	str	r2, [r7, #8]
 80023de:	60fb      	str	r3, [r7, #12]
var1=((double)dig_P9)*p*p/2147483648.0;
 80023e0:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <BMP280_calc_values+0x5d0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	5e9b      	ldrsh	r3, [r3, r2]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f7ff fb7c 	bl	8001ae4 <__aeabi_i2d>
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f7fe fd44 	bl	8000e7c <__aeabi_dmul>
 80023f4:	0002      	movs	r2, r0
 80023f6:	000b      	movs	r3, r1
 80023f8:	0010      	movs	r0, r2
 80023fa:	0019      	movs	r1, r3
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f7fe fd3c 	bl	8000e7c <__aeabi_dmul>
 8002404:	0002      	movs	r2, r0
 8002406:	000b      	movs	r3, r1
 8002408:	0010      	movs	r0, r2
 800240a:	0019      	movs	r1, r3
 800240c:	2200      	movs	r2, #0
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <BMP280_calc_values+0x5d4>)
 8002410:	f7fe fa3e 	bl	8000890 <__aeabi_ddiv>
 8002414:	0002      	movs	r2, r0
 8002416:	000b      	movs	r3, r1
 8002418:	633a      	str	r2, [r7, #48]	; 0x30
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
var2=p*((double)dig_P8)/32768.0;
 800241c:	4b34      	ldr	r3, [pc, #208]	; (80024f0 <BMP280_calc_values+0x5d8>)
 800241e:	2200      	movs	r2, #0
 8002420:	5e9b      	ldrsh	r3, [r3, r2]
 8002422:	0018      	movs	r0, r3
 8002424:	f7ff fb5e 	bl	8001ae4 <__aeabi_i2d>
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f7fe fd26 	bl	8000e7c <__aeabi_dmul>
 8002430:	0002      	movs	r2, r0
 8002432:	000b      	movs	r3, r1
 8002434:	0010      	movs	r0, r2
 8002436:	0019      	movs	r1, r3
 8002438:	2200      	movs	r2, #0
 800243a:	4b2e      	ldr	r3, [pc, #184]	; (80024f4 <BMP280_calc_values+0x5dc>)
 800243c:	f7fe fa28 	bl	8000890 <__aeabi_ddiv>
 8002440:	0002      	movs	r2, r0
 8002442:	000b      	movs	r3, r1
 8002444:	62ba      	str	r2, [r7, #40]	; 0x28
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
p=p+(var1+var2+((double)dig_P7))/16.0;
 8002448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800244e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002450:	f7fd fee2 	bl	8000218 <__aeabi_dadd>
 8002454:	0002      	movs	r2, r0
 8002456:	000b      	movs	r3, r1
 8002458:	0014      	movs	r4, r2
 800245a:	001d      	movs	r5, r3
 800245c:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <BMP280_calc_values+0x5e0>)
 800245e:	2200      	movs	r2, #0
 8002460:	5e9b      	ldrsh	r3, [r3, r2]
 8002462:	0018      	movs	r0, r3
 8002464:	f7ff fb3e 	bl	8001ae4 <__aeabi_i2d>
 8002468:	0002      	movs	r2, r0
 800246a:	000b      	movs	r3, r1
 800246c:	0020      	movs	r0, r4
 800246e:	0029      	movs	r1, r5
 8002470:	f7fd fed2 	bl	8000218 <__aeabi_dadd>
 8002474:	0002      	movs	r2, r0
 8002476:	000b      	movs	r3, r1
 8002478:	0010      	movs	r0, r2
 800247a:	0019      	movs	r1, r3
 800247c:	2200      	movs	r2, #0
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <BMP280_calc_values+0x5e4>)
 8002480:	f7fe fa06 	bl	8000890 <__aeabi_ddiv>
 8002484:	0002      	movs	r2, r0
 8002486:	000b      	movs	r3, r1
 8002488:	0010      	movs	r0, r2
 800248a:	0019      	movs	r1, r3
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f7fd fec2 	bl	8000218 <__aeabi_dadd>
 8002494:	0002      	movs	r2, r0
 8002496:	000b      	movs	r3, r1
 8002498:	60ba      	str	r2, [r7, #8]
 800249a:	60fb      	str	r3, [r7, #12]

//altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f)); //altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;

p= p/133.322; // pa to mmHg conversion
 800249c:	68b8      	ldr	r0, [r7, #8]
 800249e:	68f9      	ldr	r1, [r7, #12]
 80024a0:	4a17      	ldr	r2, [pc, #92]	; (8002500 <BMP280_calc_values+0x5e8>)
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <BMP280_calc_values+0x5ec>)
 80024a4:	f7fe f9f4 	bl	8000890 <__aeabi_ddiv>
 80024a8:	0002      	movs	r2, r0
 80024aa:	000b      	movs	r3, r1
 80024ac:	60ba      	str	r2, [r7, #8]
 80024ae:	60fb      	str	r3, [r7, #12]
temperature=T;
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <BMP280_calc_values+0x5f0>)
 80024b4:	601a      	str	r2, [r3, #0]
pressure=p;
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	0010      	movs	r0, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	f7ff fb67 	bl	8001b90 <__aeabi_d2f>
 80024c2:	1c02      	adds	r2, r0, #0
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <BMP280_calc_values+0x5f4>)
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b010      	add	sp, #64	; 0x40
 80024ce:	bdb0      	pop	{r4, r5, r7, pc}
 80024d0:	3ff00000 	.word	0x3ff00000
 80024d4:	20000060 	.word	0x20000060
 80024d8:	2000007c 	.word	0x2000007c
 80024dc:	41300000 	.word	0x41300000
 80024e0:	40b00000 	.word	0x40b00000
 80024e4:	40b86a00 	.word	0x40b86a00
 80024e8:	20000074 	.word	0x20000074
 80024ec:	41e00000 	.word	0x41e00000
 80024f0:	20000072 	.word	0x20000072
 80024f4:	40e00000 	.word	0x40e00000
 80024f8:	20000070 	.word	0x20000070
 80024fc:	40300000 	.word	0x40300000
 8002500:	d2f1a9fc 	.word	0xd2f1a9fc
 8002504:	4060aa4d 	.word	0x4060aa4d
 8002508:	20000080 	.word	0x20000080
 800250c:	20000084 	.word	0x20000084

08002510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002514:	f000 f984 	bl	8002820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002518:	f000 f812 	bl	8002540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800251c:	f000 f898 	bl	8002650 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002520:	f000 f856 	bl	80025d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  I2C_DEVICE_Check();
 8002524:	f7ff fbda 	bl	8001cdc <I2C_DEVICE_Check>
  I2C_DEVICE_Init();
 8002528:	f7ff fbfa 	bl	8001d20 <I2C_DEVICE_Init>
  I2C_DEVICE_cali ();
 800252c:	f7ff fc20 	bl	8001d70 <I2C_DEVICE_cali>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 8002530:	23fa      	movs	r3, #250	; 0xfa
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	0018      	movs	r0, r3
 8002536:	f000 f9f9 	bl	800292c <HAL_Delay>
	  BMP280_calc_values();
 800253a:	f7ff fced 	bl	8001f18 <BMP280_calc_values>
	  HAL_Delay(500);
 800253e:	e7f7      	b.n	8002530 <main+0x20>

08002540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b093      	sub	sp, #76	; 0x4c
 8002544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002546:	2414      	movs	r4, #20
 8002548:	193b      	adds	r3, r7, r4
 800254a:	0018      	movs	r0, r3
 800254c:	2334      	movs	r3, #52	; 0x34
 800254e:	001a      	movs	r2, r3
 8002550:	2100      	movs	r1, #0
 8002552:	f002 f827 	bl	80045a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	0018      	movs	r0, r3
 800255a:	2310      	movs	r3, #16
 800255c:	001a      	movs	r2, r3
 800255e:	2100      	movs	r1, #0
 8002560:	f002 f820 	bl	80045a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	0018      	movs	r0, r3
 800256a:	f001 f9e9 	bl	8003940 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800256e:	193b      	adds	r3, r7, r4
 8002570:	2202      	movs	r2, #2
 8002572:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002574:	193b      	adds	r3, r7, r4
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	0052      	lsls	r2, r2, #1
 800257a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800257c:	193b      	adds	r3, r7, r4
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002582:	193b      	adds	r3, r7, r4
 8002584:	2240      	movs	r2, #64	; 0x40
 8002586:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002588:	193b      	adds	r3, r7, r4
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800258e:	193b      	adds	r3, r7, r4
 8002590:	0018      	movs	r0, r3
 8002592:	f001 fa15 	bl	80039c0 <HAL_RCC_OscConfig>
 8002596:	1e03      	subs	r3, r0, #0
 8002598:	d001      	beq.n	800259e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800259a:	f000 f86f 	bl	800267c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	2207      	movs	r2, #7
 80025a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	2200      	movs	r2, #0
 80025a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2100      	movs	r1, #0
 80025ba:	0018      	movs	r0, r3
 80025bc:	f001 fd10 	bl	8003fe0 <HAL_RCC_ClockConfig>
 80025c0:	1e03      	subs	r3, r0, #0
 80025c2:	d001      	beq.n	80025c8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80025c4:	f000 f85a 	bl	800267c <Error_Handler>
  }
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b013      	add	sp, #76	; 0x4c
 80025ce:	bd90      	pop	{r4, r7, pc}

080025d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <MX_I2C1_Init+0x74>)
 80025d6:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <MX_I2C1_Init+0x78>)
 80025d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <MX_I2C1_Init+0x74>)
 80025dc:	4a1b      	ldr	r2, [pc, #108]	; (800264c <MX_I2C1_Init+0x7c>)
 80025de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <MX_I2C1_Init+0x74>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025e6:	4b17      	ldr	r3, [pc, #92]	; (8002644 <MX_I2C1_Init+0x74>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <MX_I2C1_Init+0x74>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_I2C1_Init+0x74>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <MX_I2C1_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_I2C1_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <MX_I2C1_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_I2C1_Init+0x74>)
 800260c:	0018      	movs	r0, r3
 800260e:	f000 fbc9 	bl	8002da4 <HAL_I2C_Init>
 8002612:	1e03      	subs	r3, r0, #0
 8002614:	d001      	beq.n	800261a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002616:	f000 f831 	bl	800267c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <MX_I2C1_Init+0x74>)
 800261c:	2100      	movs	r1, #0
 800261e:	0018      	movs	r0, r3
 8002620:	f001 f8f6 	bl	8003810 <HAL_I2CEx_ConfigAnalogFilter>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d001      	beq.n	800262c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002628:	f000 f828 	bl	800267c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <MX_I2C1_Init+0x74>)
 800262e:	2100      	movs	r1, #0
 8002630:	0018      	movs	r0, r3
 8002632:	f001 f939 	bl	80038a8 <HAL_I2CEx_ConfigDigitalFilter>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d001      	beq.n	800263e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800263a:	f000 f81f 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000088 	.word	0x20000088
 8002648:	40005400 	.word	0x40005400
 800264c:	00303d5b 	.word	0x00303d5b

08002650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <MX_GPIO_Init+0x28>)
 8002658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <MX_GPIO_Init+0x28>)
 800265c:	2102      	movs	r1, #2
 800265e:	430a      	orrs	r2, r1
 8002660:	635a      	str	r2, [r3, #52]	; 0x34
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <MX_GPIO_Init+0x28>)
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	2202      	movs	r2, #2
 8002668:	4013      	ands	r3, r2
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	46bd      	mov	sp, r7
 8002672:	b002      	add	sp, #8
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40021000 	.word	0x40021000

0800267c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002680:	b672      	cpsid	i
}
 8002682:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002684:	e7fe      	b.n	8002684 <Error_Handler+0x8>
	...

08002688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_MspInit+0x44>)
 8002690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_MspInit+0x44>)
 8002694:	2101      	movs	r1, #1
 8002696:	430a      	orrs	r2, r1
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_MspInit+0x44>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2201      	movs	r2, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_MspInit+0x44>)
 80026a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_MspInit+0x44>)
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	0549      	lsls	r1, r1, #21
 80026b0:	430a      	orrs	r2, r1
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_MspInit+0x44>)
 80026b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	055b      	lsls	r3, r3, #21
 80026bc:	4013      	ands	r3, r2
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b002      	add	sp, #8
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	40021000 	.word	0x40021000

080026d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b091      	sub	sp, #68	; 0x44
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	232c      	movs	r3, #44	; 0x2c
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	0018      	movs	r0, r3
 80026de:	2314      	movs	r3, #20
 80026e0:	001a      	movs	r2, r3
 80026e2:	2100      	movs	r1, #0
 80026e4:	f001 ff5e 	bl	80045a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026e8:	2410      	movs	r4, #16
 80026ea:	193b      	adds	r3, r7, r4
 80026ec:	0018      	movs	r0, r3
 80026ee:	231c      	movs	r3, #28
 80026f0:	001a      	movs	r2, r3
 80026f2:	2100      	movs	r1, #0
 80026f4:	f001 ff56 	bl	80045a4 <memset>
  if(hi2c->Instance==I2C1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a22      	ldr	r2, [pc, #136]	; (8002788 <HAL_I2C_MspInit+0xb8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d13e      	bne.n	8002780 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002702:	193b      	adds	r3, r7, r4
 8002704:	2220      	movs	r2, #32
 8002706:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002708:	193b      	adds	r3, r7, r4
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800270e:	193b      	adds	r3, r7, r4
 8002710:	0018      	movs	r0, r3
 8002712:	f001 fdef 	bl	80042f4 <HAL_RCCEx_PeriphCLKConfig>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800271a:	f7ff ffaf 	bl	800267c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_I2C_MspInit+0xbc>)
 8002720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_I2C_MspInit+0xbc>)
 8002724:	2102      	movs	r1, #2
 8002726:	430a      	orrs	r2, r1
 8002728:	635a      	str	r2, [r3, #52]	; 0x34
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_I2C_MspInit+0xbc>)
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	2202      	movs	r2, #2
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	187b      	adds	r3, r7, r1
 800273a:	22c0      	movs	r2, #192	; 0xc0
 800273c:	0092      	lsls	r2, r2, #2
 800273e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002740:	187b      	adds	r3, r7, r1
 8002742:	2212      	movs	r2, #18
 8002744:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	187b      	adds	r3, r7, r1
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	187b      	adds	r3, r7, r1
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002752:	187b      	adds	r3, r7, r1
 8002754:	2206      	movs	r2, #6
 8002756:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	187b      	adds	r3, r7, r1
 800275a:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <HAL_I2C_MspInit+0xc0>)
 800275c:	0019      	movs	r1, r3
 800275e:	0010      	movs	r0, r2
 8002760:	f000 f9bc 	bl	8002adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_I2C_MspInit+0xbc>)
 8002766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_I2C_MspInit+0xbc>)
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	0389      	lsls	r1, r1, #14
 800276e:	430a      	orrs	r2, r1
 8002770:	63da      	str	r2, [r3, #60]	; 0x3c
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_I2C_MspInit+0xbc>)
 8002774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	039b      	lsls	r3, r3, #14
 800277a:	4013      	ands	r3, r2
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b011      	add	sp, #68	; 0x44
 8002786:	bd90      	pop	{r4, r7, pc}
 8002788:	40005400 	.word	0x40005400
 800278c:	40021000 	.word	0x40021000
 8002790:	50000400 	.word	0x50000400

08002794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002798:	e7fe      	b.n	8002798 <NMI_Handler+0x4>

0800279a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800279e:	e7fe      	b.n	800279e <HardFault_Handler+0x4>

080027a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b8:	f000 f89c 	bl	80028f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027d0:	f7ff fff7 	bl	80027c2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d4:	480c      	ldr	r0, [pc, #48]	; (8002808 <LoopForever+0x6>)
  ldr r1, =_edata
 80027d6:	490d      	ldr	r1, [pc, #52]	; (800280c <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <LoopForever+0xe>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027ec:	4c0a      	ldr	r4, [pc, #40]	; (8002818 <LoopForever+0x16>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027fa:	f001 feaf 	bl	800455c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80027fe:	f7ff fe87 	bl	8002510 <main>

08002802 <LoopForever>:

LoopForever:
  b LoopForever
 8002802:	e7fe      	b.n	8002802 <LoopForever>
  ldr   r0, =_estack
 8002804:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800280c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002810:	08004694 	.word	0x08004694
  ldr r2, =_sbss
 8002814:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002818:	200000e4 	.word	0x200000e4

0800281c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC1_IRQHandler>
	...

08002820 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_Init+0x3c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_Init+0x3c>)
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	0049      	lsls	r1, r1, #1
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800283a:	2000      	movs	r0, #0
 800283c:	f000 f810 	bl	8002860 <HAL_InitTick>
 8002840:	1e03      	subs	r3, r0, #0
 8002842:	d003      	beq.n	800284c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002844:	1dfb      	adds	r3, r7, #7
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e001      	b.n	8002850 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800284c:	f7ff ff1c 	bl	8002688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002850:	1dfb      	adds	r3, r7, #7
 8002852:	781b      	ldrb	r3, [r3, #0]
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	b002      	add	sp, #8
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40022000 	.word	0x40022000

08002860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002868:	230f      	movs	r3, #15
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_InitTick+0x88>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d02b      	beq.n	80028d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002878:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_InitTick+0x8c>)
 800287a:	681c      	ldr	r4, [r3, #0]
 800287c:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_InitTick+0x88>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	0019      	movs	r1, r3
 8002882:	23fa      	movs	r3, #250	; 0xfa
 8002884:	0098      	lsls	r0, r3, #2
 8002886:	f7fd fc3b 	bl	8000100 <__udivsi3>
 800288a:	0003      	movs	r3, r0
 800288c:	0019      	movs	r1, r3
 800288e:	0020      	movs	r0, r4
 8002890:	f7fd fc36 	bl	8000100 <__udivsi3>
 8002894:	0003      	movs	r3, r0
 8002896:	0018      	movs	r0, r3
 8002898:	f000 f913 	bl	8002ac2 <HAL_SYSTICK_Config>
 800289c:	1e03      	subs	r3, r0, #0
 800289e:	d112      	bne.n	80028c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d80a      	bhi.n	80028bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	2301      	movs	r3, #1
 80028aa:	425b      	negs	r3, r3
 80028ac:	2200      	movs	r2, #0
 80028ae:	0018      	movs	r0, r3
 80028b0:	f000 f8f2 	bl	8002a98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_InitTick+0x90>)
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e00d      	b.n	80028d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80028bc:	230f      	movs	r3, #15
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
 80028c4:	e008      	b.n	80028d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028c6:	230f      	movs	r3, #15
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e003      	b.n	80028d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028d0:	230f      	movs	r3, #15
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80028d8:	230f      	movs	r3, #15
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	781b      	ldrb	r3, [r3, #0]
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b005      	add	sp, #20
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	20000008 	.word	0x20000008
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000004 	.word	0x20000004

080028f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_IncTick+0x1c>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	001a      	movs	r2, r3
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_IncTick+0x20>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	18d2      	adds	r2, r2, r3
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_IncTick+0x20>)
 8002906:	601a      	str	r2, [r3, #0]
}
 8002908:	46c0      	nop			; (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	20000008 	.word	0x20000008
 8002914:	200000e0 	.word	0x200000e0

08002918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  return uwTick;
 800291c:	4b02      	ldr	r3, [pc, #8]	; (8002928 <HAL_GetTick+0x10>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	200000e0 	.word	0x200000e0

0800292c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff fff0 	bl	8002918 <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3301      	adds	r3, #1
 8002944:	d005      	beq.n	8002952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_Delay+0x44>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	001a      	movs	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	189b      	adds	r3, r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	f7ff ffe0 	bl	8002918 <HAL_GetTick>
 8002958:	0002      	movs	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	429a      	cmp	r2, r3
 8002962:	d8f7      	bhi.n	8002954 <HAL_Delay+0x28>
  {
  }
}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b004      	add	sp, #16
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	20000008 	.word	0x20000008

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	0002      	movs	r2, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b7f      	cmp	r3, #127	; 0x7f
 8002988:	d828      	bhi.n	80029dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800298a:	4a2f      	ldr	r2, [pc, #188]	; (8002a48 <__NVIC_SetPriority+0xd4>)
 800298c:	1dfb      	adds	r3, r7, #7
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	b25b      	sxtb	r3, r3
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	33c0      	adds	r3, #192	; 0xc0
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	589b      	ldr	r3, [r3, r2]
 800299a:	1dfa      	adds	r2, r7, #7
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	0011      	movs	r1, r2
 80029a0:	2203      	movs	r2, #3
 80029a2:	400a      	ands	r2, r1
 80029a4:	00d2      	lsls	r2, r2, #3
 80029a6:	21ff      	movs	r1, #255	; 0xff
 80029a8:	4091      	lsls	r1, r2
 80029aa:	000a      	movs	r2, r1
 80029ac:	43d2      	mvns	r2, r2
 80029ae:	401a      	ands	r2, r3
 80029b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	019b      	lsls	r3, r3, #6
 80029b6:	22ff      	movs	r2, #255	; 0xff
 80029b8:	401a      	ands	r2, r3
 80029ba:	1dfb      	adds	r3, r7, #7
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	0018      	movs	r0, r3
 80029c0:	2303      	movs	r3, #3
 80029c2:	4003      	ands	r3, r0
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029c8:	481f      	ldr	r0, [pc, #124]	; (8002a48 <__NVIC_SetPriority+0xd4>)
 80029ca:	1dfb      	adds	r3, r7, #7
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	b25b      	sxtb	r3, r3
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	430a      	orrs	r2, r1
 80029d4:	33c0      	adds	r3, #192	; 0xc0
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029da:	e031      	b.n	8002a40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <__NVIC_SetPriority+0xd8>)
 80029de:	1dfb      	adds	r3, r7, #7
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	0019      	movs	r1, r3
 80029e4:	230f      	movs	r3, #15
 80029e6:	400b      	ands	r3, r1
 80029e8:	3b08      	subs	r3, #8
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3306      	adds	r3, #6
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	18d3      	adds	r3, r2, r3
 80029f2:	3304      	adds	r3, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1dfa      	adds	r2, r7, #7
 80029f8:	7812      	ldrb	r2, [r2, #0]
 80029fa:	0011      	movs	r1, r2
 80029fc:	2203      	movs	r2, #3
 80029fe:	400a      	ands	r2, r1
 8002a00:	00d2      	lsls	r2, r2, #3
 8002a02:	21ff      	movs	r1, #255	; 0xff
 8002a04:	4091      	lsls	r1, r2
 8002a06:	000a      	movs	r2, r1
 8002a08:	43d2      	mvns	r2, r2
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	019b      	lsls	r3, r3, #6
 8002a12:	22ff      	movs	r2, #255	; 0xff
 8002a14:	401a      	ands	r2, r3
 8002a16:	1dfb      	adds	r3, r7, #7
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	4003      	ands	r3, r0
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a24:	4809      	ldr	r0, [pc, #36]	; (8002a4c <__NVIC_SetPriority+0xd8>)
 8002a26:	1dfb      	adds	r3, r7, #7
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	001c      	movs	r4, r3
 8002a2c:	230f      	movs	r3, #15
 8002a2e:	4023      	ands	r3, r4
 8002a30:	3b08      	subs	r3, #8
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	430a      	orrs	r2, r1
 8002a36:	3306      	adds	r3, #6
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	18c3      	adds	r3, r0, r3
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	601a      	str	r2, [r3, #0]
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b003      	add	sp, #12
 8002a46:	bd90      	pop	{r4, r7, pc}
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	1e5a      	subs	r2, r3, #1
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	045b      	lsls	r3, r3, #17
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d301      	bcc.n	8002a68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a64:	2301      	movs	r3, #1
 8002a66:	e010      	b.n	8002a8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <SysTick_Config+0x44>)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	3a01      	subs	r2, #1
 8002a6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a70:	2301      	movs	r3, #1
 8002a72:	425b      	negs	r3, r3
 8002a74:	2103      	movs	r1, #3
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7ff ff7c 	bl	8002974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <SysTick_Config+0x44>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a82:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <SysTick_Config+0x44>)
 8002a84:	2207      	movs	r2, #7
 8002a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b002      	add	sp, #8
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	e000e010 	.word	0xe000e010

08002a98 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	210f      	movs	r1, #15
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	1c02      	adds	r2, r0, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	b25b      	sxtb	r3, r3
 8002ab2:	0011      	movs	r1, r2
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f7ff ff5d 	bl	8002974 <__NVIC_SetPriority>
}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b004      	add	sp, #16
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7ff ffbf 	bl	8002a50 <SysTick_Config>
 8002ad2:	0003      	movs	r3, r0
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aea:	e147      	b.n	8002d7c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4091      	lsls	r1, r2
 8002af6:	000a      	movs	r2, r1
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d100      	bne.n	8002b04 <HAL_GPIO_Init+0x28>
 8002b02:	e138      	b.n	8002d76 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d005      	beq.n	8002b1c <HAL_GPIO_Init+0x40>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2203      	movs	r2, #3
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d130      	bne.n	8002b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	0013      	movs	r3, r2
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	0013      	movs	r3, r2
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b52:	2201      	movs	r2, #1
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	409a      	lsls	r2, r3
 8002b58:	0013      	movs	r3, r2
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	2201      	movs	r2, #1
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	0013      	movs	r3, r2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2203      	movs	r2, #3
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d017      	beq.n	8002bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	409a      	lsls	r2, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	409a      	lsls	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d123      	bne.n	8002c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	58d3      	ldr	r3, [r2, r3]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	4013      	ands	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	409a      	lsls	r2, r3
 8002be0:	0013      	movs	r3, r2
 8002be2:	43da      	mvns	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2107      	movs	r1, #7
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	0013      	movs	r3, r2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3208      	adds	r2, #8
 8002c08:	0092      	lsls	r2, r2, #2
 8002c0a:	6939      	ldr	r1, [r7, #16]
 8002c0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	409a      	lsls	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	23c0      	movs	r3, #192	; 0xc0
 8002c48:	029b      	lsls	r3, r3, #10
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d100      	bne.n	8002c50 <HAL_GPIO_Init+0x174>
 8002c4e:	e092      	b.n	8002d76 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002c50:	4a50      	ldr	r2, [pc, #320]	; (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3318      	adds	r3, #24
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	589b      	ldr	r3, [r3, r2]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2203      	movs	r2, #3
 8002c62:	4013      	ands	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	220f      	movs	r2, #15
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	0013      	movs	r3, r2
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	23a0      	movs	r3, #160	; 0xa0
 8002c78:	05db      	lsls	r3, r3, #23
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d013      	beq.n	8002ca6 <HAL_GPIO_Init+0x1ca>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a45      	ldr	r2, [pc, #276]	; (8002d98 <HAL_GPIO_Init+0x2bc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00d      	beq.n	8002ca2 <HAL_GPIO_Init+0x1c6>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a44      	ldr	r2, [pc, #272]	; (8002d9c <HAL_GPIO_Init+0x2c0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <HAL_GPIO_Init+0x1c2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a43      	ldr	r2, [pc, #268]	; (8002da0 <HAL_GPIO_Init+0x2c4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d101      	bne.n	8002c9a <HAL_GPIO_Init+0x1be>
 8002c96:	2303      	movs	r3, #3
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x1cc>
 8002c9a:	2305      	movs	r3, #5
 8002c9c:	e004      	b.n	8002ca8 <HAL_GPIO_Init+0x1cc>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e002      	b.n	8002ca8 <HAL_GPIO_Init+0x1cc>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_GPIO_Init+0x1cc>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	2103      	movs	r1, #3
 8002cac:	400a      	ands	r2, r1
 8002cae:	00d2      	lsls	r2, r2, #3
 8002cb0:	4093      	lsls	r3, r2
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002cb8:	4936      	ldr	r1, [pc, #216]	; (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	3318      	adds	r3, #24
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cc6:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	035b      	lsls	r3, r3, #13
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cea:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002cf0:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	039b      	lsls	r3, r3, #14
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d14:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002d1c:	2384      	movs	r3, #132	; 0x84
 8002d1e:	58d3      	ldr	r3, [r2, r3]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	029b      	lsls	r3, r3, #10
 8002d34:	4013      	ands	r3, r2
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d40:	4914      	ldr	r1, [pc, #80]	; (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002d42:	2284      	movs	r2, #132	; 0x84
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002d48:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	58d3      	ldr	r3, [r2, r3]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	43da      	mvns	r2, r3
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	025b      	lsls	r3, r3, #9
 8002d62:	4013      	ands	r3, r2
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d6e:	4909      	ldr	r1, [pc, #36]	; (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	40da      	lsrs	r2, r3
 8002d84:	1e13      	subs	r3, r2, #0
 8002d86:	d000      	beq.n	8002d8a <HAL_GPIO_Init+0x2ae>
 8002d88:	e6b0      	b.n	8002aec <HAL_GPIO_Init+0x10>
  }
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b006      	add	sp, #24
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021800 	.word	0x40021800
 8002d98:	50000400 	.word	0x50000400
 8002d9c:	50000800 	.word	0x50000800
 8002da0:	50000c00 	.word	0x50000c00

08002da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e082      	b.n	8002ebc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2241      	movs	r2, #65	; 0x41
 8002dba:	5c9b      	ldrb	r3, [r3, r2]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7ff fc7f 	bl	80026d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2241      	movs	r2, #65	; 0x41
 8002dd6:	2124      	movs	r1, #36	; 0x24
 8002dd8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2101      	movs	r1, #1
 8002de6:	438a      	bics	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4934      	ldr	r1, [pc, #208]	; (8002ec4 <HAL_I2C_Init+0x120>)
 8002df4:	400a      	ands	r2, r1
 8002df6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4931      	ldr	r1, [pc, #196]	; (8002ec8 <HAL_I2C_Init+0x124>)
 8002e04:	400a      	ands	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	0209      	lsls	r1, r1, #8
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	e007      	b.n	8002e32 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2184      	movs	r1, #132	; 0x84
 8002e2c:	0209      	lsls	r1, r1, #8
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d104      	bne.n	8002e44 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	491f      	ldr	r1, [pc, #124]	; (8002ecc <HAL_I2C_Init+0x128>)
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	491a      	ldr	r1, [pc, #104]	; (8002ec8 <HAL_I2C_Init+0x124>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69d9      	ldr	r1, [r3, #28]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1a      	ldr	r2, [r3, #32]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2241      	movs	r2, #65	; 0x41
 8002ea8:	2120      	movs	r1, #32
 8002eaa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2242      	movs	r2, #66	; 0x42
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	f0ffffff 	.word	0xf0ffffff
 8002ec8:	ffff7fff 	.word	0xffff7fff
 8002ecc:	02008000 	.word	0x02008000

08002ed0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	0008      	movs	r0, r1
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	0019      	movs	r1, r3
 8002ede:	230a      	movs	r3, #10
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	1c02      	adds	r2, r0, #0
 8002ee4:	801a      	strh	r2, [r3, #0]
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	1c0a      	adds	r2, r1, #0
 8002eec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2241      	movs	r2, #65	; 0x41
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d000      	beq.n	8002efc <HAL_I2C_Master_Transmit+0x2c>
 8002efa:	e0e7      	b.n	80030cc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2240      	movs	r2, #64	; 0x40
 8002f00:	5c9b      	ldrb	r3, [r3, r2]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_I2C_Master_Transmit+0x3a>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e0e1      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1fe>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2240      	movs	r2, #64	; 0x40
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f12:	f7ff fd01 	bl	8002918 <HAL_GetTick>
 8002f16:	0003      	movs	r3, r0
 8002f18:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	0219      	lsls	r1, r3, #8
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2319      	movs	r3, #25
 8002f26:	2201      	movs	r2, #1
 8002f28:	f000 fa04 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002f2c:	1e03      	subs	r3, r0, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0cc      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2241      	movs	r2, #65	; 0x41
 8002f38:	2121      	movs	r1, #33	; 0x21
 8002f3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2242      	movs	r2, #66	; 0x42
 8002f40:	2110      	movs	r1, #16
 8002f42:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2208      	movs	r2, #8
 8002f54:	18ba      	adds	r2, r7, r2
 8002f56:	8812      	ldrh	r2, [r2, #0]
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2bff      	cmp	r3, #255	; 0xff
 8002f68:	d911      	bls.n	8002f8e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	22ff      	movs	r2, #255	; 0xff
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	045c      	lsls	r4, r3, #17
 8002f7a:	230a      	movs	r3, #10
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	8819      	ldrh	r1, [r3, #0]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	4b55      	ldr	r3, [pc, #340]	; (80030d8 <HAL_I2C_Master_Transmit+0x208>)
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	0023      	movs	r3, r4
 8002f88:	f000 fc08 	bl	800379c <I2C_TransferConfig>
 8002f8c:	e075      	b.n	800307a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	049c      	lsls	r4, r3, #18
 8002fa2:	230a      	movs	r3, #10
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	8819      	ldrh	r1, [r3, #0]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	4b4b      	ldr	r3, [pc, #300]	; (80030d8 <HAL_I2C_Master_Transmit+0x208>)
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	0023      	movs	r3, r4
 8002fb0:	f000 fbf4 	bl	800379c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002fb4:	e061      	b.n	800307a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 f9f8 	bl	80033b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fc2:	1e03      	subs	r3, r0, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e081      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d03a      	beq.n	800307a <HAL_I2C_Master_Transmit+0x1aa>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	d136      	bne.n	800307a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800300c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	0013      	movs	r3, r2
 8003016:	2200      	movs	r2, #0
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	f000 f98b 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 800301e:	1e03      	subs	r3, r0, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e053      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	2bff      	cmp	r3, #255	; 0xff
 800302e:	d911      	bls.n	8003054 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	22ff      	movs	r2, #255	; 0xff
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	b2da      	uxtb	r2, r3
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	045c      	lsls	r4, r3, #17
 8003040:	230a      	movs	r3, #10
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	8819      	ldrh	r1, [r3, #0]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	2300      	movs	r3, #0
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	0023      	movs	r3, r4
 800304e:	f000 fba5 	bl	800379c <I2C_TransferConfig>
 8003052:	e012      	b.n	800307a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	b2da      	uxtb	r2, r3
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	049c      	lsls	r4, r3, #18
 8003068:	230a      	movs	r3, #10
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	8819      	ldrh	r1, [r3, #0]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	2300      	movs	r3, #0
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	0023      	movs	r3, r4
 8003076:	f000 fb91 	bl	800379c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d198      	bne.n	8002fb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f9d0 	bl	8003430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003090:	1e03      	subs	r3, r0, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e01a      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2220      	movs	r2, #32
 800309e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	490c      	ldr	r1, [pc, #48]	; (80030dc <HAL_I2C_Master_Transmit+0x20c>)
 80030ac:	400a      	ands	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2241      	movs	r2, #65	; 0x41
 80030b4:	2120      	movs	r1, #32
 80030b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2242      	movs	r2, #66	; 0x42
 80030bc:	2100      	movs	r1, #0
 80030be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2240      	movs	r2, #64	; 0x40
 80030c4:	2100      	movs	r1, #0
 80030c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e000      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80030cc:	2302      	movs	r3, #2
  }
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b007      	add	sp, #28
 80030d4:	bd90      	pop	{r4, r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	80002000 	.word	0x80002000
 80030dc:	fe00e800 	.word	0xfe00e800

080030e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	0008      	movs	r0, r1
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	0019      	movs	r1, r3
 80030ee:	230a      	movs	r3, #10
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	1c02      	adds	r2, r0, #0
 80030f4:	801a      	strh	r2, [r3, #0]
 80030f6:	2308      	movs	r3, #8
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	1c0a      	adds	r2, r1, #0
 80030fc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2241      	movs	r2, #65	; 0x41
 8003102:	5c9b      	ldrb	r3, [r3, r2]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b20      	cmp	r3, #32
 8003108:	d000      	beq.n	800310c <HAL_I2C_Master_Receive+0x2c>
 800310a:	e0e8      	b.n	80032de <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2240      	movs	r2, #64	; 0x40
 8003110:	5c9b      	ldrb	r3, [r3, r2]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_I2C_Master_Receive+0x3a>
 8003116:	2302      	movs	r3, #2
 8003118:	e0e2      	b.n	80032e0 <HAL_I2C_Master_Receive+0x200>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2240      	movs	r2, #64	; 0x40
 800311e:	2101      	movs	r1, #1
 8003120:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003122:	f7ff fbf9 	bl	8002918 <HAL_GetTick>
 8003126:	0003      	movs	r3, r0
 8003128:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	0219      	lsls	r1, r3, #8
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2319      	movs	r3, #25
 8003136:	2201      	movs	r2, #1
 8003138:	f000 f8fc 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 800313c:	1e03      	subs	r3, r0, #0
 800313e:	d001      	beq.n	8003144 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0cd      	b.n	80032e0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2241      	movs	r2, #65	; 0x41
 8003148:	2122      	movs	r1, #34	; 0x22
 800314a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2242      	movs	r2, #66	; 0x42
 8003150:	2110      	movs	r1, #16
 8003152:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2208      	movs	r2, #8
 8003164:	18ba      	adds	r2, r7, r2
 8003166:	8812      	ldrh	r2, [r2, #0]
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	2bff      	cmp	r3, #255	; 0xff
 8003178:	d911      	bls.n	800319e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	22ff      	movs	r2, #255	; 0xff
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003184:	b2da      	uxtb	r2, r3
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	045c      	lsls	r4, r3, #17
 800318a:	230a      	movs	r3, #10
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	8819      	ldrh	r1, [r3, #0]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	4b55      	ldr	r3, [pc, #340]	; (80032e8 <HAL_I2C_Master_Receive+0x208>)
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	0023      	movs	r3, r4
 8003198:	f000 fb00 	bl	800379c <I2C_TransferConfig>
 800319c:	e076      	b.n	800328c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	049c      	lsls	r4, r3, #18
 80031b2:	230a      	movs	r3, #10
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	8819      	ldrh	r1, [r3, #0]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	4b4b      	ldr	r3, [pc, #300]	; (80032e8 <HAL_I2C_Master_Receive+0x208>)
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	0023      	movs	r3, r4
 80031c0:	f000 faec 	bl	800379c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80031c4:	e062      	b.n	800328c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	0018      	movs	r0, r3
 80031ce:	f000 f96b 	bl	80034a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031d2:	1e03      	subs	r3, r0, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e082      	b.n	80032e0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d03a      	beq.n	800328c <HAL_I2C_Master_Receive+0x1ac>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d136      	bne.n	800328c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800321e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	0013      	movs	r3, r2
 8003228:	2200      	movs	r2, #0
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	f000 f882 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8003230:	1e03      	subs	r3, r0, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e053      	b.n	80032e0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	2bff      	cmp	r3, #255	; 0xff
 8003240:	d911      	bls.n	8003266 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	b2da      	uxtb	r2, r3
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	045c      	lsls	r4, r3, #17
 8003252:	230a      	movs	r3, #10
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	8819      	ldrh	r1, [r3, #0]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	2300      	movs	r3, #0
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	0023      	movs	r3, r4
 8003260:	f000 fa9c 	bl	800379c <I2C_TransferConfig>
 8003264:	e012      	b.n	800328c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	b2da      	uxtb	r2, r3
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	049c      	lsls	r4, r3, #18
 800327a:	230a      	movs	r3, #10
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	8819      	ldrh	r1, [r3, #0]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	2300      	movs	r3, #0
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	0023      	movs	r3, r4
 8003288:	f000 fa88 	bl	800379c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d197      	bne.n	80031c6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	0018      	movs	r0, r3
 800329e:	f000 f8c7 	bl	8003430 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e01a      	b.n	80032e0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2220      	movs	r2, #32
 80032b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	490b      	ldr	r1, [pc, #44]	; (80032ec <HAL_I2C_Master_Receive+0x20c>)
 80032be:	400a      	ands	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2241      	movs	r2, #65	; 0x41
 80032c6:	2120      	movs	r1, #32
 80032c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2242      	movs	r2, #66	; 0x42
 80032ce:	2100      	movs	r1, #0
 80032d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2240      	movs	r2, #64	; 0x40
 80032d6:	2100      	movs	r1, #0
 80032d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	e000      	b.n	80032e0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80032de:	2302      	movs	r3, #2
  }
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b007      	add	sp, #28
 80032e6:	bd90      	pop	{r4, r7, pc}
 80032e8:	80002400 	.word	0x80002400
 80032ec:	fe00e800 	.word	0xfe00e800

080032f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2202      	movs	r2, #2
 8003300:	4013      	ands	r3, r2
 8003302:	2b02      	cmp	r3, #2
 8003304:	d103      	bne.n	800330e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2200      	movs	r2, #0
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	2201      	movs	r2, #1
 8003316:	4013      	ands	r3, r2
 8003318:	2b01      	cmp	r3, #1
 800331a:	d007      	beq.n	800332c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2101      	movs	r1, #1
 8003328:	430a      	orrs	r2, r1
 800332a:	619a      	str	r2, [r3, #24]
  }
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b002      	add	sp, #8
 8003332:	bd80      	pop	{r7, pc}

08003334 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003344:	e021      	b.n	800338a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	d01e      	beq.n	800338a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334c:	f7ff fae4 	bl	8002918 <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d302      	bcc.n	8003362 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d113      	bne.n	800338a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	2220      	movs	r2, #32
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2241      	movs	r2, #65	; 0x41
 8003372:	2120      	movs	r1, #32
 8003374:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2242      	movs	r2, #66	; 0x42
 800337a:	2100      	movs	r1, #0
 800337c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2240      	movs	r2, #64	; 0x40
 8003382:	2100      	movs	r1, #0
 8003384:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	4013      	ands	r3, r2
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	425a      	negs	r2, r3
 800339a:	4153      	adcs	r3, r2
 800339c:	b2db      	uxtb	r3, r3
 800339e:	001a      	movs	r2, r3
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d0ce      	beq.n	8003346 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b004      	add	sp, #16
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033be:	e02b      	b.n	8003418 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f8e8 	bl	800359c <I2C_IsErrorOccurred>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d001      	beq.n	80033d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e029      	b.n	8003428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	3301      	adds	r3, #1
 80033d8:	d01e      	beq.n	8003418 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7ff fa9d 	bl	8002918 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d113      	bne.n	8003418 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	2220      	movs	r2, #32
 80033f6:	431a      	orrs	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2241      	movs	r2, #65	; 0x41
 8003400:	2120      	movs	r1, #32
 8003402:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2242      	movs	r2, #66	; 0x42
 8003408:	2100      	movs	r1, #0
 800340a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2240      	movs	r2, #64	; 0x40
 8003410:	2100      	movs	r1, #0
 8003412:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e007      	b.n	8003428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2202      	movs	r2, #2
 8003420:	4013      	ands	r3, r2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d1cc      	bne.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b004      	add	sp, #16
 800342e:	bd80      	pop	{r7, pc}

08003430 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800343c:	e028      	b.n	8003490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	0018      	movs	r0, r3
 8003446:	f000 f8a9 	bl	800359c <I2C_IsErrorOccurred>
 800344a:	1e03      	subs	r3, r0, #0
 800344c:	d001      	beq.n	8003452 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e026      	b.n	80034a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7ff fa61 	bl	8002918 <HAL_GetTick>
 8003456:	0002      	movs	r2, r0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d113      	bne.n	8003490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	2220      	movs	r2, #32
 800346e:	431a      	orrs	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2241      	movs	r2, #65	; 0x41
 8003478:	2120      	movs	r1, #32
 800347a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2242      	movs	r2, #66	; 0x42
 8003480:	2100      	movs	r1, #0
 8003482:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2240      	movs	r2, #64	; 0x40
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e007      	b.n	80034a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2220      	movs	r2, #32
 8003498:	4013      	ands	r3, r2
 800349a:	2b20      	cmp	r3, #32
 800349c:	d1cf      	bne.n	800343e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b004      	add	sp, #16
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034b4:	e064      	b.n	8003580 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	0018      	movs	r0, r3
 80034be:	f000 f86d 	bl	800359c <I2C_IsErrorOccurred>
 80034c2:	1e03      	subs	r3, r0, #0
 80034c4:	d001      	beq.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e062      	b.n	8003590 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2220      	movs	r2, #32
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d138      	bne.n	800354a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2204      	movs	r2, #4
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d105      	bne.n	80034f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e04e      	b.n	8003590 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2210      	movs	r2, #16
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d107      	bne.n	8003510 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2210      	movs	r2, #16
 8003506:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2204      	movs	r2, #4
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
 800350e:	e002      	b.n	8003516 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2220      	movs	r2, #32
 800351c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	491b      	ldr	r1, [pc, #108]	; (8003598 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800352a:	400a      	ands	r2, r1
 800352c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2241      	movs	r2, #65	; 0x41
 8003532:	2120      	movs	r1, #32
 8003534:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2242      	movs	r2, #66	; 0x42
 800353a:	2100      	movs	r1, #0
 800353c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2240      	movs	r2, #64	; 0x40
 8003542:	2100      	movs	r1, #0
 8003544:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e022      	b.n	8003590 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7ff f9e5 	bl	8002918 <HAL_GetTick>
 800354e:	0002      	movs	r2, r0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10f      	bne.n	8003580 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	2220      	movs	r2, #32
 8003566:	431a      	orrs	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2241      	movs	r2, #65	; 0x41
 8003570:	2120      	movs	r1, #32
 8003572:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	2100      	movs	r1, #0
 800357a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e007      	b.n	8003590 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2204      	movs	r2, #4
 8003588:	4013      	ands	r3, r2
 800358a:	2b04      	cmp	r3, #4
 800358c:	d193      	bne.n	80034b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	0018      	movs	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	b004      	add	sp, #16
 8003596:	bd80      	pop	{r7, pc}
 8003598:	fe00e800 	.word	0xfe00e800

0800359c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b08b      	sub	sp, #44	; 0x2c
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a8:	2327      	movs	r3, #39	; 0x27
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2210      	movs	r2, #16
 80035c4:	4013      	ands	r3, r2
 80035c6:	d100      	bne.n	80035ca <I2C_IsErrorOccurred+0x2e>
 80035c8:	e082      	b.n	80036d0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2210      	movs	r2, #16
 80035d0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035d2:	e060      	b.n	8003696 <I2C_IsErrorOccurred+0xfa>
 80035d4:	2427      	movs	r4, #39	; 0x27
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	193a      	adds	r2, r7, r4
 80035da:	7812      	ldrb	r2, [r2, #0]
 80035dc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	3301      	adds	r3, #1
 80035e2:	d058      	beq.n	8003696 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035e4:	f7ff f998 	bl	8002918 <HAL_GetTick>
 80035e8:	0002      	movs	r2, r0
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d306      	bcc.n	8003602 <I2C_IsErrorOccurred+0x66>
 80035f4:	193b      	adds	r3, r7, r4
 80035f6:	193a      	adds	r2, r7, r4
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d149      	bne.n	8003696 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	01db      	lsls	r3, r3, #7
 800360c:	4013      	ands	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003610:	2013      	movs	r0, #19
 8003612:	183b      	adds	r3, r7, r0
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	2142      	movs	r1, #66	; 0x42
 8003618:	5c52      	ldrb	r2, [r2, r1]
 800361a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	401a      	ands	r2, r3
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	429a      	cmp	r2, r3
 800362e:	d126      	bne.n	800367e <I2C_IsErrorOccurred+0xe2>
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	01db      	lsls	r3, r3, #7
 8003636:	429a      	cmp	r2, r3
 8003638:	d021      	beq.n	800367e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800363a:	183b      	adds	r3, r7, r0
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b20      	cmp	r3, #32
 8003640:	d01d      	beq.n	800367e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	01c9      	lsls	r1, r1, #7
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003654:	f7ff f960 	bl	8002918 <HAL_GetTick>
 8003658:	0003      	movs	r3, r0
 800365a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800365c:	e00f      	b.n	800367e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800365e:	f7ff f95b 	bl	8002918 <HAL_GetTick>
 8003662:	0002      	movs	r2, r0
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b19      	cmp	r3, #25
 800366a:	d908      	bls.n	800367e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	2220      	movs	r2, #32
 8003670:	4313      	orrs	r3, r2
 8003672:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003674:	2327      	movs	r3, #39	; 0x27
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]

              break;
 800367c:	e00b      	b.n	8003696 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2220      	movs	r2, #32
 8003686:	4013      	ands	r3, r2
 8003688:	2127      	movs	r1, #39	; 0x27
 800368a:	187a      	adds	r2, r7, r1
 800368c:	1879      	adds	r1, r7, r1
 800368e:	7809      	ldrb	r1, [r1, #0]
 8003690:	7011      	strb	r1, [r2, #0]
 8003692:	2b20      	cmp	r3, #32
 8003694:	d1e3      	bne.n	800365e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2220      	movs	r2, #32
 800369e:	4013      	ands	r3, r2
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d004      	beq.n	80036ae <I2C_IsErrorOccurred+0x112>
 80036a4:	2327      	movs	r3, #39	; 0x27
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d092      	beq.n	80035d4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036ae:	2327      	movs	r3, #39	; 0x27
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d103      	bne.n	80036c0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2220      	movs	r2, #32
 80036be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	2204      	movs	r2, #4
 80036c4:	4313      	orrs	r3, r2
 80036c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036c8:	2327      	movs	r3, #39	; 0x27
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4013      	ands	r3, r2
 80036e0:	d00c      	beq.n	80036fc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	2201      	movs	r2, #1
 80036e6:	4313      	orrs	r3, r2
 80036e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	0052      	lsls	r2, r2, #1
 80036f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036f4:	2327      	movs	r3, #39	; 0x27
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4013      	ands	r3, r2
 8003704:	d00c      	beq.n	8003720 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	2208      	movs	r2, #8
 800370a:	4313      	orrs	r3, r2
 800370c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	00d2      	lsls	r2, r2, #3
 8003716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003718:	2327      	movs	r3, #39	; 0x27
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4013      	ands	r3, r2
 8003728:	d00c      	beq.n	8003744 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	2202      	movs	r2, #2
 800372e:	4313      	orrs	r3, r2
 8003730:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800373c:	2327      	movs	r3, #39	; 0x27
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003744:	2327      	movs	r3, #39	; 0x27
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01d      	beq.n	800378a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	0018      	movs	r0, r3
 8003752:	f7ff fdcd 	bl	80032f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	490d      	ldr	r1, [pc, #52]	; (8003798 <I2C_IsErrorOccurred+0x1fc>)
 8003762:	400a      	ands	r2, r1
 8003764:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	431a      	orrs	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2241      	movs	r2, #65	; 0x41
 8003776:	2120      	movs	r1, #32
 8003778:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2242      	movs	r2, #66	; 0x42
 800377e:	2100      	movs	r1, #0
 8003780:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2240      	movs	r2, #64	; 0x40
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800378a:	2327      	movs	r3, #39	; 0x27
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	781b      	ldrb	r3, [r3, #0]
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b00b      	add	sp, #44	; 0x2c
 8003796:	bd90      	pop	{r4, r7, pc}
 8003798:	fe00e800 	.word	0xfe00e800

0800379c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	0008      	movs	r0, r1
 80037a6:	0011      	movs	r1, r2
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	240a      	movs	r4, #10
 80037ac:	193b      	adds	r3, r7, r4
 80037ae:	1c02      	adds	r2, r0, #0
 80037b0:	801a      	strh	r2, [r3, #0]
 80037b2:	2009      	movs	r0, #9
 80037b4:	183b      	adds	r3, r7, r0
 80037b6:	1c0a      	adds	r2, r1, #0
 80037b8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ba:	193b      	adds	r3, r7, r4
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	059b      	lsls	r3, r3, #22
 80037c0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037c2:	183b      	adds	r3, r7, r0
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	0419      	lsls	r1, r3, #16
 80037c8:	23ff      	movs	r3, #255	; 0xff
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ce:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	4313      	orrs	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e6:	0d51      	lsrs	r1, r2, #21
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	00d2      	lsls	r2, r2, #3
 80037ec:	400a      	ands	r2, r1
 80037ee:	4907      	ldr	r1, [pc, #28]	; (800380c <I2C_TransferConfig+0x70>)
 80037f0:	430a      	orrs	r2, r1
 80037f2:	43d2      	mvns	r2, r2
 80037f4:	401a      	ands	r2, r3
 80037f6:	0011      	movs	r1, r2
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	46bd      	mov	sp, r7
 8003806:	b007      	add	sp, #28
 8003808:	bd90      	pop	{r4, r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	03ff63ff 	.word	0x03ff63ff

08003810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2241      	movs	r2, #65	; 0x41
 800381e:	5c9b      	ldrb	r3, [r3, r2]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	d138      	bne.n	8003898 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	5c9b      	ldrb	r3, [r3, r2]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003830:	2302      	movs	r3, #2
 8003832:	e032      	b.n	800389a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	2101      	movs	r1, #1
 800383a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2241      	movs	r2, #65	; 0x41
 8003840:	2124      	movs	r1, #36	; 0x24
 8003842:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2101      	movs	r1, #1
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4911      	ldr	r1, [pc, #68]	; (80038a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003860:	400a      	ands	r2, r1
 8003862:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6819      	ldr	r1, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2101      	movs	r1, #1
 8003880:	430a      	orrs	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2241      	movs	r2, #65	; 0x41
 8003888:	2120      	movs	r1, #32
 800388a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	2100      	movs	r1, #0
 8003892:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	b002      	add	sp, #8
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	ffffefff 	.word	0xffffefff

080038a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2241      	movs	r2, #65	; 0x41
 80038b6:	5c9b      	ldrb	r3, [r3, r2]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d139      	bne.n	8003932 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2240      	movs	r2, #64	; 0x40
 80038c2:	5c9b      	ldrb	r3, [r3, r2]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e033      	b.n	8003934 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	2101      	movs	r1, #1
 80038d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2241      	movs	r2, #65	; 0x41
 80038d8:	2124      	movs	r1, #36	; 0x24
 80038da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2101      	movs	r1, #1
 80038e8:	438a      	bics	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a11      	ldr	r2, [pc, #68]	; (800393c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2101      	movs	r1, #1
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2241      	movs	r2, #65	; 0x41
 8003922:	2120      	movs	r1, #32
 8003924:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2240      	movs	r2, #64	; 0x40
 800392a:	2100      	movs	r1, #0
 800392c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
  }
}
 8003934:	0018      	movs	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	b004      	add	sp, #16
 800393a:	bd80      	pop	{r7, pc}
 800393c:	fffff0ff 	.word	0xfffff0ff

08003940 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800394e:	4013      	ands	r3, r2
 8003950:	0019      	movs	r1, r3
 8003952:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d11f      	bne.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003964:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	0013      	movs	r3, r2
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	189b      	adds	r3, r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4912      	ldr	r1, [pc, #72]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003972:	0018      	movs	r0, r3
 8003974:	f7fc fbc4 	bl	8000100 <__udivsi3>
 8003978:	0003      	movs	r3, r0
 800397a:	3301      	adds	r3, #1
 800397c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800397e:	e008      	b.n	8003992 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3b01      	subs	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e001      	b.n	8003992 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e009      	b.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	401a      	ands	r2, r3
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d0ed      	beq.n	8003980 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	40007000 	.word	0x40007000
 80039b4:	fffff9ff 	.word	0xfffff9ff
 80039b8:	20000000 	.word	0x20000000
 80039bc:	000f4240 	.word	0x000f4240

080039c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e2f3      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	4013      	ands	r3, r2
 80039da:	d100      	bne.n	80039de <HAL_RCC_OscConfig+0x1e>
 80039dc:	e07c      	b.n	8003ad8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039de:	4bc3      	ldr	r3, [pc, #780]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2238      	movs	r2, #56	; 0x38
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e8:	4bc0      	ldr	r3, [pc, #768]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2203      	movs	r2, #3
 80039ee:	4013      	ands	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d102      	bne.n	80039fe <HAL_RCC_OscConfig+0x3e>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d002      	beq.n	8003a04 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	4bb9      	ldr	r3, [pc, #740]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	029b      	lsls	r3, r3, #10
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d062      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x116>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d15e      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e2ce      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	025b      	lsls	r3, r3, #9
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_OscConfig+0x78>
 8003a28:	4bb0      	ldr	r3, [pc, #704]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4baf      	ldr	r3, [pc, #700]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003a2e:	2180      	movs	r1, #128	; 0x80
 8003a30:	0249      	lsls	r1, r1, #9
 8003a32:	430a      	orrs	r2, r1
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e020      	b.n	8003a7a <HAL_RCC_OscConfig+0xba>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	23a0      	movs	r3, #160	; 0xa0
 8003a3e:	02db      	lsls	r3, r3, #11
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d10e      	bne.n	8003a62 <HAL_RCC_OscConfig+0xa2>
 8003a44:	4ba9      	ldr	r3, [pc, #676]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4ba8      	ldr	r3, [pc, #672]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003a4a:	2180      	movs	r1, #128	; 0x80
 8003a4c:	02c9      	lsls	r1, r1, #11
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	4ba6      	ldr	r3, [pc, #664]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4ba5      	ldr	r3, [pc, #660]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003a58:	2180      	movs	r1, #128	; 0x80
 8003a5a:	0249      	lsls	r1, r1, #9
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e00b      	b.n	8003a7a <HAL_RCC_OscConfig+0xba>
 8003a62:	4ba2      	ldr	r3, [pc, #648]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4ba1      	ldr	r3, [pc, #644]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003a68:	49a1      	ldr	r1, [pc, #644]	; (8003cf0 <HAL_RCC_OscConfig+0x330>)
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	4b9f      	ldr	r3, [pc, #636]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b9e      	ldr	r3, [pc, #632]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003a74:	499f      	ldr	r1, [pc, #636]	; (8003cf4 <HAL_RCC_OscConfig+0x334>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d014      	beq.n	8003aac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fe ff49 	bl	8002918 <HAL_GetTick>
 8003a86:	0003      	movs	r3, r0
 8003a88:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fe ff44 	bl	8002918 <HAL_GetTick>
 8003a90:	0002      	movs	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e28d      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a9e:	4b93      	ldr	r3, [pc, #588]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	029b      	lsls	r3, r3, #10
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0xcc>
 8003aaa:	e015      	b.n	8003ad8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fe ff34 	bl	8002918 <HAL_GetTick>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab6:	f7fe ff2f 	bl	8002918 <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b64      	cmp	r3, #100	; 0x64
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e278      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ac8:	4b88      	ldr	r3, [pc, #544]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	029b      	lsls	r3, r3, #10
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0xf6>
 8003ad4:	e000      	b.n	8003ad8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2202      	movs	r2, #2
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d100      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x124>
 8003ae2:	e099      	b.n	8003c18 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ae4:	4b81      	ldr	r3, [pc, #516]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2238      	movs	r2, #56	; 0x38
 8003aea:	4013      	ands	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aee:	4b7f      	ldr	r3, [pc, #508]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2203      	movs	r2, #3
 8003af4:	4013      	ands	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d102      	bne.n	8003b04 <HAL_RCC_OscConfig+0x144>
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d002      	beq.n	8003b0a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d135      	bne.n	8003b76 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b0a:	4b78      	ldr	r3, [pc, #480]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4013      	ands	r3, r2
 8003b14:	d005      	beq.n	8003b22 <HAL_RCC_OscConfig+0x162>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e24b      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b22:	4b72      	ldr	r3, [pc, #456]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4a74      	ldr	r2, [pc, #464]	; (8003cf8 <HAL_RCC_OscConfig+0x338>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	021a      	lsls	r2, r3, #8
 8003b32:	4b6e      	ldr	r3, [pc, #440]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003b34:	430a      	orrs	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d112      	bne.n	8003b64 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b3e:	4b6b      	ldr	r3, [pc, #428]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a6e      	ldr	r2, [pc, #440]	; (8003cfc <HAL_RCC_OscConfig+0x33c>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	4b67      	ldr	r3, [pc, #412]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b52:	4b66      	ldr	r3, [pc, #408]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	0adb      	lsrs	r3, r3, #11
 8003b58:	2207      	movs	r2, #7
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	4a68      	ldr	r2, [pc, #416]	; (8003d00 <HAL_RCC_OscConfig+0x340>)
 8003b5e:	40da      	lsrs	r2, r3
 8003b60:	4b68      	ldr	r3, [pc, #416]	; (8003d04 <HAL_RCC_OscConfig+0x344>)
 8003b62:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b64:	4b68      	ldr	r3, [pc, #416]	; (8003d08 <HAL_RCC_OscConfig+0x348>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7fe fe79 	bl	8002860 <HAL_InitTick>
 8003b6e:	1e03      	subs	r3, r0, #0
 8003b70:	d051      	beq.n	8003c16 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e221      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d030      	beq.n	8003be0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b7e:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a5e      	ldr	r2, [pc, #376]	; (8003cfc <HAL_RCC_OscConfig+0x33c>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	4b57      	ldr	r3, [pc, #348]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003b92:	4b56      	ldr	r3, [pc, #344]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b55      	ldr	r3, [pc, #340]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003b98:	2180      	movs	r1, #128	; 0x80
 8003b9a:	0049      	lsls	r1, r1, #1
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fe feba 	bl	8002918 <HAL_GetTick>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003baa:	f7fe feb5 	bl	8002918 <HAL_GetTick>
 8003bae:	0002      	movs	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1fe      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bbc:	4b4b      	ldr	r3, [pc, #300]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b48      	ldr	r3, [pc, #288]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4a4a      	ldr	r2, [pc, #296]	; (8003cf8 <HAL_RCC_OscConfig+0x338>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	0019      	movs	r1, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	021a      	lsls	r2, r3, #8
 8003bd8:	4b44      	ldr	r3, [pc, #272]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	e01b      	b.n	8003c18 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003be0:	4b42      	ldr	r3, [pc, #264]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b41      	ldr	r3, [pc, #260]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003be6:	4949      	ldr	r1, [pc, #292]	; (8003d0c <HAL_RCC_OscConfig+0x34c>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fe fe94 	bl	8002918 <HAL_GetTick>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf6:	f7fe fe8f 	bl	8002918 <HAL_GetTick>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e1d8      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c08:	4b38      	ldr	r3, [pc, #224]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4013      	ands	r3, r2
 8003c12:	d1f0      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x236>
 8003c14:	e000      	b.n	8003c18 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d047      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c22:	4b32      	ldr	r3, [pc, #200]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2238      	movs	r2, #56	; 0x38
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b18      	cmp	r3, #24
 8003c2c:	d10a      	bne.n	8003c44 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c2e:	4b2f      	ldr	r3, [pc, #188]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c32:	2202      	movs	r2, #2
 8003c34:	4013      	ands	r3, r2
 8003c36:	d03c      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x2f2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d138      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e1ba      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d019      	beq.n	8003c80 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003c4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c50:	4b26      	ldr	r3, [pc, #152]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003c52:	2101      	movs	r1, #1
 8003c54:	430a      	orrs	r2, r1
 8003c56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fe5e 	bl	8002918 <HAL_GetTick>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fe fe59 	bl	8002918 <HAL_GetTick>
 8003c66:	0002      	movs	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1a2      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c78:	2202      	movs	r2, #2
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d0f1      	beq.n	8003c62 <HAL_RCC_OscConfig+0x2a2>
 8003c7e:	e018      	b.n	8003cb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c84:	4b19      	ldr	r3, [pc, #100]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003c86:	2101      	movs	r1, #1
 8003c88:	438a      	bics	r2, r1
 8003c8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fe44 	bl	8002918 <HAL_GetTick>
 8003c90:	0003      	movs	r3, r0
 8003c92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c96:	f7fe fe3f 	bl	8002918 <HAL_GetTick>
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e188      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca8:	4b10      	ldr	r3, [pc, #64]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cac:	2202      	movs	r2, #2
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d1f1      	bne.n	8003c96 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d100      	bne.n	8003cbe <HAL_RCC_OscConfig+0x2fe>
 8003cbc:	e0c6      	b.n	8003e4c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cbe:	231f      	movs	r3, #31
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2238      	movs	r2, #56	; 0x38
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d11e      	bne.n	8003d10 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_RCC_OscConfig+0x32c>)
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d100      	bne.n	8003cde <HAL_RCC_OscConfig+0x31e>
 8003cdc:	e0b6      	b.n	8003e4c <HAL_RCC_OscConfig+0x48c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d000      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x328>
 8003ce6:	e0b1      	b.n	8003e4c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e166      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	fffeffff 	.word	0xfffeffff
 8003cf4:	fffbffff 	.word	0xfffbffff
 8003cf8:	ffff80ff 	.word	0xffff80ff
 8003cfc:	ffffc7ff 	.word	0xffffc7ff
 8003d00:	00f42400 	.word	0x00f42400
 8003d04:	20000000 	.word	0x20000000
 8003d08:	20000004 	.word	0x20000004
 8003d0c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d10:	4bac      	ldr	r3, [pc, #688]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	055b      	lsls	r3, r3, #21
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCC_OscConfig+0x360>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x362>
 8003d20:	2300      	movs	r3, #0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d011      	beq.n	8003d4a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d26:	4ba7      	ldr	r3, [pc, #668]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d2a:	4ba6      	ldr	r3, [pc, #664]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003d2c:	2180      	movs	r1, #128	; 0x80
 8003d2e:	0549      	lsls	r1, r1, #21
 8003d30:	430a      	orrs	r2, r1
 8003d32:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d34:	4ba3      	ldr	r3, [pc, #652]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	055b      	lsls	r3, r3, #21
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d42:	231f      	movs	r3, #31
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	2201      	movs	r2, #1
 8003d48:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4a:	4b9f      	ldr	r3, [pc, #636]	; (8003fc8 <HAL_RCC_OscConfig+0x608>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4013      	ands	r3, r2
 8003d54:	d11a      	bne.n	8003d8c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d56:	4b9c      	ldr	r3, [pc, #624]	; (8003fc8 <HAL_RCC_OscConfig+0x608>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b9b      	ldr	r3, [pc, #620]	; (8003fc8 <HAL_RCC_OscConfig+0x608>)
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	0049      	lsls	r1, r1, #1
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d64:	f7fe fdd8 	bl	8002918 <HAL_GetTick>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6e:	f7fe fdd3 	bl	8002918 <HAL_GetTick>
 8003d72:	0002      	movs	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e11c      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	4b91      	ldr	r3, [pc, #580]	; (8003fc8 <HAL_RCC_OscConfig+0x608>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x3e2>
 8003d94:	4b8b      	ldr	r3, [pc, #556]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d98:	4b8a      	ldr	r3, [pc, #552]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003da0:	e01c      	b.n	8003ddc <HAL_RCC_OscConfig+0x41c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b05      	cmp	r3, #5
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x404>
 8003daa:	4b86      	ldr	r3, [pc, #536]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003dac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dae:	4b85      	ldr	r3, [pc, #532]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003db0:	2104      	movs	r1, #4
 8003db2:	430a      	orrs	r2, r1
 8003db4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003db6:	4b83      	ldr	r3, [pc, #524]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003db8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dba:	4b82      	ldr	r3, [pc, #520]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0x41c>
 8003dc4:	4b7f      	ldr	r3, [pc, #508]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003dc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dc8:	4b7e      	ldr	r3, [pc, #504]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003dca:	2101      	movs	r1, #1
 8003dcc:	438a      	bics	r2, r1
 8003dce:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dd0:	4b7c      	ldr	r3, [pc, #496]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003dd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dd4:	4b7b      	ldr	r3, [pc, #492]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003dd6:	2104      	movs	r1, #4
 8003dd8:	438a      	bics	r2, r1
 8003dda:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d014      	beq.n	8003e0e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe fd98 	bl	8002918 <HAL_GetTick>
 8003de8:	0003      	movs	r3, r0
 8003dea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dec:	e009      	b.n	8003e02 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fe fd93 	bl	8002918 <HAL_GetTick>
 8003df2:	0002      	movs	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	4a74      	ldr	r2, [pc, #464]	; (8003fcc <HAL_RCC_OscConfig+0x60c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0db      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e02:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	2202      	movs	r2, #2
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x42e>
 8003e0c:	e013      	b.n	8003e36 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fe fd83 	bl	8002918 <HAL_GetTick>
 8003e12:	0003      	movs	r3, r0
 8003e14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e16:	e009      	b.n	8003e2c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e18:	f7fe fd7e 	bl	8002918 <HAL_GetTick>
 8003e1c:	0002      	movs	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	4a6a      	ldr	r2, [pc, #424]	; (8003fcc <HAL_RCC_OscConfig+0x60c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e0c6      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e2c:	4b65      	ldr	r3, [pc, #404]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	2202      	movs	r2, #2
 8003e32:	4013      	ands	r3, r2
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e36:	231f      	movs	r3, #31
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d105      	bne.n	8003e4c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e40:	4b60      	ldr	r3, [pc, #384]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e44:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003e46:	4962      	ldr	r1, [pc, #392]	; (8003fd0 <HAL_RCC_OscConfig+0x610>)
 8003e48:	400a      	ands	r2, r1
 8003e4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d100      	bne.n	8003e56 <HAL_RCC_OscConfig+0x496>
 8003e54:	e0b0      	b.n	8003fb8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e56:	4b5b      	ldr	r3, [pc, #364]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2238      	movs	r2, #56	; 0x38
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b10      	cmp	r3, #16
 8003e60:	d100      	bne.n	8003e64 <HAL_RCC_OscConfig+0x4a4>
 8003e62:	e078      	b.n	8003f56 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d153      	bne.n	8003f14 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6c:	4b55      	ldr	r3, [pc, #340]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b54      	ldr	r3, [pc, #336]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003e72:	4958      	ldr	r1, [pc, #352]	; (8003fd4 <HAL_RCC_OscConfig+0x614>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe fd4e 	bl	8002918 <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fe fd49 	bl	8002918 <HAL_GetTick>
 8003e86:	0002      	movs	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e092      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e94:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	049b      	lsls	r3, r3, #18
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea0:	4b48      	ldr	r3, [pc, #288]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4a4c      	ldr	r2, [pc, #304]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	0019      	movs	r1, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	4b3e      	ldr	r3, [pc, #248]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ece:	4b3d      	ldr	r3, [pc, #244]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b3c      	ldr	r3, [pc, #240]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	0449      	lsls	r1, r1, #17
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003edc:	4b39      	ldr	r3, [pc, #228]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003ee2:	2180      	movs	r1, #128	; 0x80
 8003ee4:	0549      	lsls	r1, r1, #21
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eea:	f7fe fd15 	bl	8002918 <HAL_GetTick>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7fe fd10 	bl	8002918 <HAL_GetTick>
 8003ef8:	0002      	movs	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e059      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f06:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	049b      	lsls	r3, r3, #18
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x534>
 8003f12:	e051      	b.n	8003fb8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f14:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003f1a:	492e      	ldr	r1, [pc, #184]	; (8003fd4 <HAL_RCC_OscConfig+0x614>)
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fe fcfa 	bl	8002918 <HAL_GetTick>
 8003f24:	0003      	movs	r3, r0
 8003f26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2a:	f7fe fcf5 	bl	8002918 <HAL_GetTick>
 8003f2e:	0002      	movs	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e03e      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3c:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	049b      	lsls	r3, r3, #18
 8003f44:	4013      	ands	r3, r2
 8003f46:	d1f0      	bne.n	8003f2a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003f48:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003f4e:	4923      	ldr	r1, [pc, #140]	; (8003fdc <HAL_RCC_OscConfig+0x61c>)
 8003f50:	400a      	ands	r2, r1
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	e030      	b.n	8003fb8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e02b      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003f62:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <HAL_RCC_OscConfig+0x604>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d11e      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2270      	movs	r2, #112	; 0x70
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d117      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	23fe      	movs	r3, #254	; 0xfe
 8003f88:	01db      	lsls	r3, r3, #7
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d10e      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	23f8      	movs	r3, #248	; 0xf8
 8003f9a:	039b      	lsls	r3, r3, #14
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	0f5b      	lsrs	r3, r3, #29
 8003faa:	075a      	lsls	r2, r3, #29
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b008      	add	sp, #32
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	00001388 	.word	0x00001388
 8003fd0:	efffffff 	.word	0xefffffff
 8003fd4:	feffffff 	.word	0xfeffffff
 8003fd8:	1fc1808c 	.word	0x1fc1808c
 8003fdc:	effefffc 	.word	0xeffefffc

08003fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0e9      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b76      	ldr	r3, [pc, #472]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2207      	movs	r2, #7
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d91e      	bls.n	8004040 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b73      	ldr	r3, [pc, #460]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2207      	movs	r2, #7
 8004008:	4393      	bics	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	4b70      	ldr	r3, [pc, #448]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004014:	f7fe fc80 	bl	8002918 <HAL_GetTick>
 8004018:	0003      	movs	r3, r0
 800401a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800401c:	e009      	b.n	8004032 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401e:	f7fe fc7b 	bl	8002918 <HAL_GetTick>
 8004022:	0002      	movs	r2, r0
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	4a6a      	ldr	r2, [pc, #424]	; (80041d4 <HAL_RCC_ClockConfig+0x1f4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e0ca      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004032:	4b67      	ldr	r3, [pc, #412]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2207      	movs	r2, #7
 8004038:	4013      	ands	r3, r2
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d1ee      	bne.n	800401e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2202      	movs	r2, #2
 8004046:	4013      	ands	r3, r2
 8004048:	d015      	beq.n	8004076 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2204      	movs	r2, #4
 8004050:	4013      	ands	r3, r2
 8004052:	d006      	beq.n	8004062 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004054:	4b60      	ldr	r3, [pc, #384]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	4b5f      	ldr	r3, [pc, #380]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 800405a:	21e0      	movs	r1, #224	; 0xe0
 800405c:	01c9      	lsls	r1, r1, #7
 800405e:	430a      	orrs	r2, r1
 8004060:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004062:	4b5d      	ldr	r3, [pc, #372]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	4a5d      	ldr	r2, [pc, #372]	; (80041dc <HAL_RCC_ClockConfig+0x1fc>)
 8004068:	4013      	ands	r3, r2
 800406a:	0019      	movs	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004072:	430a      	orrs	r2, r1
 8004074:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2201      	movs	r2, #1
 800407c:	4013      	ands	r3, r2
 800407e:	d057      	beq.n	8004130 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d107      	bne.n	8004098 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004088:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	029b      	lsls	r3, r3, #10
 8004090:	4013      	ands	r3, r2
 8004092:	d12b      	bne.n	80040ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e097      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a0:	4b4d      	ldr	r3, [pc, #308]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	049b      	lsls	r3, r3, #18
 80040a8:	4013      	ands	r3, r2
 80040aa:	d11f      	bne.n	80040ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e08b      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b8:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4013      	ands	r3, r2
 80040c2:	d113      	bne.n	80040ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e07f      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d106      	bne.n	80040de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d0:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	2202      	movs	r2, #2
 80040d6:	4013      	ands	r3, r2
 80040d8:	d108      	bne.n	80040ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e074      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040de:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	2202      	movs	r2, #2
 80040e4:	4013      	ands	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e06d      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040ec:	4b3a      	ldr	r3, [pc, #232]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2207      	movs	r2, #7
 80040f2:	4393      	bics	r3, r2
 80040f4:	0019      	movs	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	4b37      	ldr	r3, [pc, #220]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 80040fc:	430a      	orrs	r2, r1
 80040fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004100:	f7fe fc0a 	bl	8002918 <HAL_GetTick>
 8004104:	0003      	movs	r3, r0
 8004106:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004108:	e009      	b.n	800411e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410a:	f7fe fc05 	bl	8002918 <HAL_GetTick>
 800410e:	0002      	movs	r2, r0
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	4a2f      	ldr	r2, [pc, #188]	; (80041d4 <HAL_RCC_ClockConfig+0x1f4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e054      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2238      	movs	r2, #56	; 0x38
 8004124:	401a      	ands	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	429a      	cmp	r2, r3
 800412e:	d1ec      	bne.n	800410a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004130:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2207      	movs	r2, #7
 8004136:	4013      	ands	r3, r2
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d21e      	bcs.n	800417c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2207      	movs	r2, #7
 8004144:	4393      	bics	r3, r2
 8004146:	0019      	movs	r1, r3
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004150:	f7fe fbe2 	bl	8002918 <HAL_GetTick>
 8004154:	0003      	movs	r3, r0
 8004156:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004158:	e009      	b.n	800416e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415a:	f7fe fbdd 	bl	8002918 <HAL_GetTick>
 800415e:	0002      	movs	r2, r0
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_RCC_ClockConfig+0x1f4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e02c      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800416e:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2207      	movs	r2, #7
 8004174:	4013      	ands	r3, r2
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d1ee      	bne.n	800415a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2204      	movs	r2, #4
 8004182:	4013      	ands	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <HAL_RCC_ClockConfig+0x200>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800419a:	f000 f829 	bl	80041f0 <HAL_RCC_GetSysClockFreq>
 800419e:	0001      	movs	r1, r0
 80041a0:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	0a1b      	lsrs	r3, r3, #8
 80041a6:	220f      	movs	r2, #15
 80041a8:	401a      	ands	r2, r3
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <HAL_RCC_ClockConfig+0x204>)
 80041ac:	0092      	lsls	r2, r2, #2
 80041ae:	58d3      	ldr	r3, [r2, r3]
 80041b0:	221f      	movs	r2, #31
 80041b2:	4013      	ands	r3, r2
 80041b4:	000a      	movs	r2, r1
 80041b6:	40da      	lsrs	r2, r3
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_ClockConfig+0x208>)
 80041ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_ClockConfig+0x20c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7fe fb4d 	bl	8002860 <HAL_InitTick>
 80041c6:	0003      	movs	r3, r0
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b004      	add	sp, #16
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40022000 	.word	0x40022000
 80041d4:	00001388 	.word	0x00001388
 80041d8:	40021000 	.word	0x40021000
 80041dc:	fffff0ff 	.word	0xfffff0ff
 80041e0:	ffff8fff 	.word	0xffff8fff
 80041e4:	0800464c 	.word	0x0800464c
 80041e8:	20000000 	.word	0x20000000
 80041ec:	20000004 	.word	0x20000004

080041f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041f6:	4b3c      	ldr	r3, [pc, #240]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2238      	movs	r2, #56	; 0x38
 80041fc:	4013      	ands	r3, r2
 80041fe:	d10f      	bne.n	8004220 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004200:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0adb      	lsrs	r3, r3, #11
 8004206:	2207      	movs	r2, #7
 8004208:	4013      	ands	r3, r2
 800420a:	2201      	movs	r2, #1
 800420c:	409a      	lsls	r2, r3
 800420e:	0013      	movs	r3, r2
 8004210:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004212:	6839      	ldr	r1, [r7, #0]
 8004214:	4835      	ldr	r0, [pc, #212]	; (80042ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8004216:	f7fb ff73 	bl	8000100 <__udivsi3>
 800421a:	0003      	movs	r3, r0
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	e05d      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004220:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2238      	movs	r2, #56	; 0x38
 8004226:	4013      	ands	r3, r2
 8004228:	2b08      	cmp	r3, #8
 800422a:	d102      	bne.n	8004232 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800422c:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x100>)
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	e054      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004232:	4b2d      	ldr	r3, [pc, #180]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2238      	movs	r2, #56	; 0x38
 8004238:	4013      	ands	r3, r2
 800423a:	2b10      	cmp	r3, #16
 800423c:	d138      	bne.n	80042b0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800423e:	4b2a      	ldr	r3, [pc, #168]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2203      	movs	r2, #3
 8004244:	4013      	ands	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004248:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	2207      	movs	r2, #7
 8004250:	4013      	ands	r3, r2
 8004252:	3301      	adds	r3, #1
 8004254:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b03      	cmp	r3, #3
 800425a:	d10d      	bne.n	8004278 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4824      	ldr	r0, [pc, #144]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004260:	f7fb ff4e 	bl	8000100 <__udivsi3>
 8004264:	0003      	movs	r3, r0
 8004266:	0019      	movs	r1, r3
 8004268:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	227f      	movs	r2, #127	; 0x7f
 8004270:	4013      	ands	r3, r2
 8004272:	434b      	muls	r3, r1
 8004274:	617b      	str	r3, [r7, #20]
        break;
 8004276:	e00d      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	481c      	ldr	r0, [pc, #112]	; (80042ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800427c:	f7fb ff40 	bl	8000100 <__udivsi3>
 8004280:	0003      	movs	r3, r0
 8004282:	0019      	movs	r1, r3
 8004284:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	0a1b      	lsrs	r3, r3, #8
 800428a:	227f      	movs	r2, #127	; 0x7f
 800428c:	4013      	ands	r3, r2
 800428e:	434b      	muls	r3, r1
 8004290:	617b      	str	r3, [r7, #20]
        break;
 8004292:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004294:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0f5b      	lsrs	r3, r3, #29
 800429a:	2207      	movs	r2, #7
 800429c:	4013      	ands	r3, r2
 800429e:	3301      	adds	r3, #1
 80042a0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	6978      	ldr	r0, [r7, #20]
 80042a6:	f7fb ff2b 	bl	8000100 <__udivsi3>
 80042aa:	0003      	movs	r3, r0
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	e015      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80042b0:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2238      	movs	r2, #56	; 0x38
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d103      	bne.n	80042c4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	e00b      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042c4:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2238      	movs	r2, #56	; 0x38
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b18      	cmp	r3, #24
 80042ce:	d103      	bne.n	80042d8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80042d0:	23fa      	movs	r3, #250	; 0xfa
 80042d2:	01db      	lsls	r3, r3, #7
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	e001      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042dc:	693b      	ldr	r3, [r7, #16]
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b006      	add	sp, #24
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	40021000 	.word	0x40021000
 80042ec:	00f42400 	.word	0x00f42400
 80042f0:	007a1200 	.word	0x007a1200

080042f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80042fc:	2313      	movs	r3, #19
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004304:	2312      	movs	r3, #18
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	029b      	lsls	r3, r3, #10
 8004314:	4013      	ands	r3, r2
 8004316:	d100      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004318:	e0a3      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800431a:	2011      	movs	r0, #17
 800431c:	183b      	adds	r3, r7, r0
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004322:	4b86      	ldr	r3, [pc, #536]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	055b      	lsls	r3, r3, #21
 800432a:	4013      	ands	r3, r2
 800432c:	d110      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	4b83      	ldr	r3, [pc, #524]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004332:	4b82      	ldr	r3, [pc, #520]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	0549      	lsls	r1, r1, #21
 8004338:	430a      	orrs	r2, r1
 800433a:	63da      	str	r2, [r3, #60]	; 0x3c
 800433c:	4b7f      	ldr	r3, [pc, #508]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800433e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	055b      	lsls	r3, r3, #21
 8004344:	4013      	ands	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800434a:	183b      	adds	r3, r7, r0
 800434c:	2201      	movs	r2, #1
 800434e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004350:	4b7b      	ldr	r3, [pc, #492]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b7a      	ldr	r3, [pc, #488]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004356:	2180      	movs	r1, #128	; 0x80
 8004358:	0049      	lsls	r1, r1, #1
 800435a:	430a      	orrs	r2, r1
 800435c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800435e:	f7fe fadb 	bl	8002918 <HAL_GetTick>
 8004362:	0003      	movs	r3, r0
 8004364:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004366:	e00b      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004368:	f7fe fad6 	bl	8002918 <HAL_GetTick>
 800436c:	0002      	movs	r2, r0
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d904      	bls.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004376:	2313      	movs	r3, #19
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	2203      	movs	r2, #3
 800437c:	701a      	strb	r2, [r3, #0]
        break;
 800437e:	e005      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004380:	4b6f      	ldr	r3, [pc, #444]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4013      	ands	r3, r2
 800438a:	d0ed      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800438c:	2313      	movs	r3, #19
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d154      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004396:	4b69      	ldr	r3, [pc, #420]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004398:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800439a:	23c0      	movs	r3, #192	; 0xc0
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4013      	ands	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d019      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d014      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043b2:	4b62      	ldr	r3, [pc, #392]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b6:	4a63      	ldr	r2, [pc, #396]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043bc:	4b5f      	ldr	r3, [pc, #380]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043c0:	4b5e      	ldr	r3, [pc, #376]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043c2:	2180      	movs	r1, #128	; 0x80
 80043c4:	0249      	lsls	r1, r1, #9
 80043c6:	430a      	orrs	r2, r1
 80043c8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ca:	4b5c      	ldr	r3, [pc, #368]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043ce:	4b5b      	ldr	r3, [pc, #364]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043d0:	495d      	ldr	r1, [pc, #372]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043d2:	400a      	ands	r2, r1
 80043d4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043d6:	4b59      	ldr	r3, [pc, #356]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2201      	movs	r2, #1
 80043e0:	4013      	ands	r3, r2
 80043e2:	d016      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fe fa98 	bl	8002918 <HAL_GetTick>
 80043e8:	0003      	movs	r3, r0
 80043ea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ec:	e00c      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fe fa93 	bl	8002918 <HAL_GetTick>
 80043f2:	0002      	movs	r2, r0
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	4a54      	ldr	r2, [pc, #336]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d904      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80043fe:	2313      	movs	r3, #19
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	2203      	movs	r2, #3
 8004404:	701a      	strb	r2, [r3, #0]
            break;
 8004406:	e004      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004408:	4b4c      	ldr	r3, [pc, #304]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	2202      	movs	r2, #2
 800440e:	4013      	ands	r3, r2
 8004410:	d0ed      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004412:	2313      	movs	r3, #19
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800441c:	4b47      	ldr	r3, [pc, #284]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800441e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004420:	4a48      	ldr	r2, [pc, #288]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004422:	4013      	ands	r3, r2
 8004424:	0019      	movs	r1, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	4b44      	ldr	r3, [pc, #272]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800442c:	430a      	orrs	r2, r1
 800442e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004430:	e00c      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004432:	2312      	movs	r3, #18
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	2213      	movs	r2, #19
 8004438:	18ba      	adds	r2, r7, r2
 800443a:	7812      	ldrb	r2, [r2, #0]
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e005      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004440:	2312      	movs	r3, #18
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	2213      	movs	r2, #19
 8004446:	18ba      	adds	r2, r7, r2
 8004448:	7812      	ldrb	r2, [r2, #0]
 800444a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800444c:	2311      	movs	r3, #17
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d105      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004456:	4b39      	ldr	r3, [pc, #228]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800445a:	4b38      	ldr	r3, [pc, #224]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800445c:	493c      	ldr	r1, [pc, #240]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800445e:	400a      	ands	r2, r1
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2201      	movs	r2, #1
 8004468:	4013      	ands	r3, r2
 800446a:	d009      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800446c:	4b33      	ldr	r3, [pc, #204]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	2203      	movs	r2, #3
 8004472:	4393      	bics	r3, r2
 8004474:	0019      	movs	r1, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	4b30      	ldr	r3, [pc, #192]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800447c:	430a      	orrs	r2, r1
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2202      	movs	r2, #2
 8004486:	4013      	ands	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800448a:	4b2c      	ldr	r3, [pc, #176]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800448c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448e:	220c      	movs	r2, #12
 8004490:	4393      	bics	r3, r2
 8004492:	0019      	movs	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	4b28      	ldr	r3, [pc, #160]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800449a:	430a      	orrs	r2, r1
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2220      	movs	r2, #32
 80044a4:	4013      	ands	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044a8:	4b24      	ldr	r3, [pc, #144]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	4a29      	ldr	r2, [pc, #164]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	0019      	movs	r1, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	4b21      	ldr	r3, [pc, #132]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044b8:	430a      	orrs	r2, r1
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	01db      	lsls	r3, r3, #7
 80044c4:	4013      	ands	r3, r2
 80044c6:	d015      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044c8:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	0899      	lsrs	r1, r3, #2
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	4b19      	ldr	r3, [pc, #100]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044d6:	430a      	orrs	r2, r1
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695a      	ldr	r2, [r3, #20]
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	05db      	lsls	r3, r3, #23
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d106      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80044e6:	4b15      	ldr	r3, [pc, #84]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	4b14      	ldr	r3, [pc, #80]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044ec:	2180      	movs	r1, #128	; 0x80
 80044ee:	0249      	lsls	r1, r1, #9
 80044f0:	430a      	orrs	r2, r1
 80044f2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	4013      	ands	r3, r2
 80044fe:	d016      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004506:	4013      	ands	r3, r2
 8004508:	0019      	movs	r1, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004510:	430a      	orrs	r2, r1
 8004512:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	01db      	lsls	r3, r3, #7
 800451c:	429a      	cmp	r2, r3
 800451e:	d106      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004526:	2180      	movs	r1, #128	; 0x80
 8004528:	0249      	lsls	r1, r1, #9
 800452a:	430a      	orrs	r2, r1
 800452c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800452e:	2312      	movs	r3, #18
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	781b      	ldrb	r3, [r3, #0]
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b006      	add	sp, #24
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40021000 	.word	0x40021000
 8004540:	40007000 	.word	0x40007000
 8004544:	fffffcff 	.word	0xfffffcff
 8004548:	fffeffff 	.word	0xfffeffff
 800454c:	00001388 	.word	0x00001388
 8004550:	efffffff 	.word	0xefffffff
 8004554:	ffffcfff 	.word	0xffffcfff
 8004558:	ffff3fff 	.word	0xffff3fff

0800455c <__libc_init_array>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	2600      	movs	r6, #0
 8004560:	4d0c      	ldr	r5, [pc, #48]	; (8004594 <__libc_init_array+0x38>)
 8004562:	4c0d      	ldr	r4, [pc, #52]	; (8004598 <__libc_init_array+0x3c>)
 8004564:	1b64      	subs	r4, r4, r5
 8004566:	10a4      	asrs	r4, r4, #2
 8004568:	42a6      	cmp	r6, r4
 800456a:	d109      	bne.n	8004580 <__libc_init_array+0x24>
 800456c:	2600      	movs	r6, #0
 800456e:	f000 f821 	bl	80045b4 <_init>
 8004572:	4d0a      	ldr	r5, [pc, #40]	; (800459c <__libc_init_array+0x40>)
 8004574:	4c0a      	ldr	r4, [pc, #40]	; (80045a0 <__libc_init_array+0x44>)
 8004576:	1b64      	subs	r4, r4, r5
 8004578:	10a4      	asrs	r4, r4, #2
 800457a:	42a6      	cmp	r6, r4
 800457c:	d105      	bne.n	800458a <__libc_init_array+0x2e>
 800457e:	bd70      	pop	{r4, r5, r6, pc}
 8004580:	00b3      	lsls	r3, r6, #2
 8004582:	58eb      	ldr	r3, [r5, r3]
 8004584:	4798      	blx	r3
 8004586:	3601      	adds	r6, #1
 8004588:	e7ee      	b.n	8004568 <__libc_init_array+0xc>
 800458a:	00b3      	lsls	r3, r6, #2
 800458c:	58eb      	ldr	r3, [r5, r3]
 800458e:	4798      	blx	r3
 8004590:	3601      	adds	r6, #1
 8004592:	e7f2      	b.n	800457a <__libc_init_array+0x1e>
 8004594:	0800468c 	.word	0x0800468c
 8004598:	0800468c 	.word	0x0800468c
 800459c:	0800468c 	.word	0x0800468c
 80045a0:	08004690 	.word	0x08004690

080045a4 <memset>:
 80045a4:	0003      	movs	r3, r0
 80045a6:	1882      	adds	r2, r0, r2
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d100      	bne.n	80045ae <memset+0xa>
 80045ac:	4770      	bx	lr
 80045ae:	7019      	strb	r1, [r3, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	e7f9      	b.n	80045a8 <memset+0x4>

080045b4 <_init>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ba:	bc08      	pop	{r3}
 80045bc:	469e      	mov	lr, r3
 80045be:	4770      	bx	lr

080045c0 <_fini>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr

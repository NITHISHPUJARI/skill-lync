
UART_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002484  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800253c  0800253c  0001253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025ac  080025ac  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080025ac  080025ac  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025ac  080025ac  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025b0  080025b0  000125b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080025b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000018  080025cc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080025cc  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d94  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d4  00000000  00000000  00026dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  000285a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  00028c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013fea  00000000  00000000  00029240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e3d  00000000  00000000  0003d22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d925  00000000  00000000  00046067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c398c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001638  00000000  00000000  000c39dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002524 	.word	0x08002524

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	08002524 	.word	0x08002524

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f000 f993 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 f815 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 f8a9 	bl	8000550 <MX_GPIO_Init>
  MX_USART2_Init();
 80003fe:	f000 f859 	bl	80004b4 <MX_USART2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_USART_TransmitReceive(&husart2, usart_tx, usart_rx, sizeof(usart_tx), 2000);
 8000402:	4a05      	ldr	r2, [pc, #20]	; (8000418 <main+0x2c>)
 8000404:	4905      	ldr	r1, [pc, #20]	; (800041c <main+0x30>)
 8000406:	4806      	ldr	r0, [pc, #24]	; (8000420 <main+0x34>)
 8000408:	23fa      	movs	r3, #250	; 0xfa
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	230c      	movs	r3, #12
 8000410:	f001 faac 	bl	800196c <HAL_USART_TransmitReceive>
 8000414:	e7f5      	b.n	8000402 <main+0x16>
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	20000094 	.word	0x20000094
 800041c:	20000000 	.word	0x20000000
 8000420:	20000034 	.word	0x20000034

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b093      	sub	sp, #76	; 0x4c
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	2414      	movs	r4, #20
 800042c:	193b      	adds	r3, r7, r4
 800042e:	0018      	movs	r0, r3
 8000430:	2334      	movs	r3, #52	; 0x34
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f002 f86d 	bl	8002514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	0018      	movs	r0, r3
 800043e:	2310      	movs	r3, #16
 8000440:	001a      	movs	r2, r3
 8000442:	2100      	movs	r1, #0
 8000444:	f002 f866 	bl	8002514 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fc03 	bl	8000c58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2202      	movs	r2, #2
 8000456:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2280      	movs	r2, #128	; 0x80
 800045c:	0052      	lsls	r2, r2, #1
 800045e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000460:	193b      	adds	r3, r7, r4
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000466:	193b      	adds	r3, r7, r4
 8000468:	2240      	movs	r2, #64	; 0x40
 800046a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000472:	193b      	adds	r3, r7, r4
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fc3b 	bl	8000cf0 <HAL_RCC_OscConfig>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800047e:	f000 f87d 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2207      	movs	r2, #7
 8000486:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2100      	movs	r1, #0
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 ff36 	bl	8001310 <HAL_RCC_ClockConfig>
 80004a4:	1e03      	subs	r3, r0, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004a8:	f000 f868 	bl	800057c <Error_Handler>
  }
}
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b013      	add	sp, #76	; 0x4c
 80004b2:	bd90      	pop	{r4, r7, pc}

080004b4 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80004b8:	4b23      	ldr	r3, [pc, #140]	; (8000548 <MX_USART2_Init+0x94>)
 80004ba:	4a24      	ldr	r2, [pc, #144]	; (800054c <MX_USART2_Init+0x98>)
 80004bc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80004be:	4b22      	ldr	r3, [pc, #136]	; (8000548 <MX_USART2_Init+0x94>)
 80004c0:	22e1      	movs	r2, #225	; 0xe1
 80004c2:	0252      	lsls	r2, r2, #9
 80004c4:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80004c6:	4b20      	ldr	r3, [pc, #128]	; (8000548 <MX_USART2_Init+0x94>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <MX_USART2_Init+0x94>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80004d2:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <MX_USART2_Init+0x94>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <MX_USART2_Init+0x94>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80004de:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <MX_USART2_Init+0x94>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <MX_USART2_Init+0x94>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <MX_USART2_Init+0x94>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <MX_USART2_Init+0x94>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	; 0x24
  husart2.SlaveMode = USART_SLAVEMODE_DISABLE;
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <MX_USART2_Init+0x94>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <MX_USART2_Init+0x94>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 f9e4 	bl	80018cc <HAL_USART_Init>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8000508:	f000 f838 	bl	800057c <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_USART2_Init+0x94>)
 800050e:	2100      	movs	r1, #0
 8000510:	0018      	movs	r0, r3
 8000512:	f001 feff 	bl	8002314 <HAL_USARTEx_SetTxFifoThreshold>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 800051a:	f000 f82f 	bl	800057c <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <MX_USART2_Init+0x94>)
 8000520:	2100      	movs	r1, #0
 8000522:	0018      	movs	r0, r3
 8000524:	f001 ff36 	bl	8002394 <HAL_USARTEx_SetRxFifoThreshold>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 800052c:	f000 f826 	bl	800057c <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MX_USART2_Init+0x94>)
 8000532:	0018      	movs	r0, r3
 8000534:	f001 feb4 	bl	80022a0 <HAL_USARTEx_DisableFifoMode>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_USART2_Init+0x8c>
  {
    Error_Handler();
 800053c:	f000 f81e 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	20000034 	.word	0x20000034
 800054c:	40004400 	.word	0x40004400

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MX_GPIO_Init+0x28>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <MX_GPIO_Init+0x28>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <MX_GPIO_Init+0x28>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_MspInit+0x44>)
 8000590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_MspInit+0x44>)
 8000594:	2101      	movs	r1, #1
 8000596:	430a      	orrs	r2, r1
 8000598:	641a      	str	r2, [r3, #64]	; 0x40
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_MspInit+0x44>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	2201      	movs	r2, #1
 80005a0:	4013      	ands	r3, r2
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <HAL_MspInit+0x44>)
 80005a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_MspInit+0x44>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	0549      	lsls	r1, r1, #21
 80005b0:	430a      	orrs	r2, r1
 80005b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_MspInit+0x44>)
 80005b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	055b      	lsls	r3, r3, #21
 80005bc:	4013      	ands	r3, r2
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b091      	sub	sp, #68	; 0x44
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	232c      	movs	r3, #44	; 0x2c
 80005da:	18fb      	adds	r3, r7, r3
 80005dc:	0018      	movs	r0, r3
 80005de:	2314      	movs	r3, #20
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f001 ff96 	bl	8002514 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e8:	2410      	movs	r4, #16
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	0018      	movs	r0, r3
 80005ee:	231c      	movs	r3, #28
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f001 ff8e 	bl	8002514 <memset>
  if(husart->Instance==USART2)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <HAL_USART_MspInit+0xb8>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d13e      	bne.n	8000680 <HAL_USART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2202      	movs	r2, #2
 8000606:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060e:	193b      	adds	r3, r7, r4
 8000610:	0018      	movs	r0, r3
 8000612:	f001 f827 	bl	8001664 <HAL_RCCEx_PeriphCLKConfig>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 800061a:	f7ff ffaf 	bl	800057c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <HAL_USART_MspInit+0xbc>)
 8000620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <HAL_USART_MspInit+0xbc>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	0289      	lsls	r1, r1, #10
 8000628:	430a      	orrs	r2, r1
 800062a:	63da      	str	r2, [r3, #60]	; 0x3c
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_USART_MspInit+0xbc>)
 800062e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	029b      	lsls	r3, r3, #10
 8000634:	4013      	ands	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <HAL_USART_MspInit+0xbc>)
 800063c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_USART_MspInit+0xbc>)
 8000640:	2101      	movs	r1, #1
 8000642:	430a      	orrs	r2, r1
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <HAL_USART_MspInit+0xbc>)
 8000648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800064a:	2201      	movs	r2, #1
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_CK
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000652:	212c      	movs	r1, #44	; 0x2c
 8000654:	187b      	adds	r3, r7, r1
 8000656:	220e      	movs	r2, #14
 8000658:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2202      	movs	r2, #2
 800065e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2201      	movs	r2, #1
 8000670:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	187a      	adds	r2, r7, r1
 8000674:	23a0      	movs	r3, #160	; 0xa0
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f000 f988 	bl	8000990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b011      	add	sp, #68	; 0x44
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	40004400 	.word	0x40004400
 800068c:	40021000 	.word	0x40021000

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <NMI_Handler+0x4>

08000696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <HardFault_Handler+0x4>

0800069c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 f89c 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006cc:	f7ff fff7 	bl	80006be <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	; (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	; (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f6:	f001 fee9 	bl	80024cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006fa:	f7ff fe77 	bl	80003ec <main>

080006fe <LoopForever>:

LoopForever:
  b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   r0, =_estack
 8000700:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800070c:	080025b4 	.word	0x080025b4
  ldr r2, =_sbss
 8000710:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000714:	200000a4 	.word	0x200000a4

08000718 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_IRQHandler>
	...

0800071c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <HAL_Init+0x3c>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_Init+0x3c>)
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	0049      	lsls	r1, r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000736:	2000      	movs	r0, #0
 8000738:	f000 f810 	bl	800075c <HAL_InitTick>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d003      	beq.n	8000748 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e001      	b.n	800074c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000748:	f7ff ff1e 	bl	8000588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000764:	230f      	movs	r3, #15
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <HAL_InitTick+0x88>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d02b      	beq.n	80007cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <HAL_InitTick+0x8c>)
 8000776:	681c      	ldr	r4, [r3, #0]
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <HAL_InitTick+0x88>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	0019      	movs	r1, r3
 800077e:	23fa      	movs	r3, #250	; 0xfa
 8000780:	0098      	lsls	r0, r3, #2
 8000782:	f7ff fcbd 	bl	8000100 <__udivsi3>
 8000786:	0003      	movs	r3, r0
 8000788:	0019      	movs	r1, r3
 800078a:	0020      	movs	r0, r4
 800078c:	f7ff fcb8 	bl	8000100 <__udivsi3>
 8000790:	0003      	movs	r3, r0
 8000792:	0018      	movs	r0, r3
 8000794:	f000 f8ef 	bl	8000976 <HAL_SYSTICK_Config>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d112      	bne.n	80007c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d80a      	bhi.n	80007b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	2301      	movs	r3, #1
 80007a6:	425b      	negs	r3, r3
 80007a8:	2200      	movs	r2, #0
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 f8ce 	bl	800094c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_InitTick+0x90>)
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	e00d      	b.n	80007d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007b8:	230f      	movs	r3, #15
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
 80007c0:	e008      	b.n	80007d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007c2:	230f      	movs	r3, #15
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	2201      	movs	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	e003      	b.n	80007d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007cc:	230f      	movs	r3, #15
 80007ce:	18fb      	adds	r3, r7, r3
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007d4:	230f      	movs	r3, #15
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	781b      	ldrb	r3, [r3, #0]
}
 80007da:	0018      	movs	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	b005      	add	sp, #20
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	20000014 	.word	0x20000014
 80007e8:	2000000c 	.word	0x2000000c
 80007ec:	20000010 	.word	0x20000010

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x1c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	001a      	movs	r2, r3
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_IncTick+0x20>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	18d2      	adds	r2, r2, r3
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <HAL_IncTick+0x20>)
 8000802:	601a      	str	r2, [r3, #0]
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	20000014 	.word	0x20000014
 8000810:	200000a0 	.word	0x200000a0

08000814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <HAL_GetTick+0x10>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	0018      	movs	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	200000a0 	.word	0x200000a0

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	0002      	movs	r2, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b7f      	cmp	r3, #127	; 0x7f
 800083c:	d828      	bhi.n	8000890 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083e:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <__NVIC_SetPriority+0xd4>)
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	33c0      	adds	r3, #192	; 0xc0
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	589b      	ldr	r3, [r3, r2]
 800084e:	1dfa      	adds	r2, r7, #7
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	0011      	movs	r1, r2
 8000854:	2203      	movs	r2, #3
 8000856:	400a      	ands	r2, r1
 8000858:	00d2      	lsls	r2, r2, #3
 800085a:	21ff      	movs	r1, #255	; 0xff
 800085c:	4091      	lsls	r1, r2
 800085e:	000a      	movs	r2, r1
 8000860:	43d2      	mvns	r2, r2
 8000862:	401a      	ands	r2, r3
 8000864:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	019b      	lsls	r3, r3, #6
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	401a      	ands	r2, r3
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	0018      	movs	r0, r3
 8000874:	2303      	movs	r3, #3
 8000876:	4003      	ands	r3, r0
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087c:	481f      	ldr	r0, [pc, #124]	; (80008fc <__NVIC_SetPriority+0xd4>)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b25b      	sxtb	r3, r3
 8000884:	089b      	lsrs	r3, r3, #2
 8000886:	430a      	orrs	r2, r1
 8000888:	33c0      	adds	r3, #192	; 0xc0
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800088e:	e031      	b.n	80008f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <__NVIC_SetPriority+0xd8>)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	0019      	movs	r1, r3
 8000898:	230f      	movs	r3, #15
 800089a:	400b      	ands	r3, r1
 800089c:	3b08      	subs	r3, #8
 800089e:	089b      	lsrs	r3, r3, #2
 80008a0:	3306      	adds	r3, #6
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	3304      	adds	r3, #4
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1dfa      	adds	r2, r7, #7
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	0011      	movs	r1, r2
 80008b0:	2203      	movs	r2, #3
 80008b2:	400a      	ands	r2, r1
 80008b4:	00d2      	lsls	r2, r2, #3
 80008b6:	21ff      	movs	r1, #255	; 0xff
 80008b8:	4091      	lsls	r1, r2
 80008ba:	000a      	movs	r2, r1
 80008bc:	43d2      	mvns	r2, r2
 80008be:	401a      	ands	r2, r3
 80008c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	22ff      	movs	r2, #255	; 0xff
 80008c8:	401a      	ands	r2, r3
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	0018      	movs	r0, r3
 80008d0:	2303      	movs	r3, #3
 80008d2:	4003      	ands	r3, r0
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <__NVIC_SetPriority+0xd8>)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	001c      	movs	r4, r3
 80008e0:	230f      	movs	r3, #15
 80008e2:	4023      	ands	r3, r4
 80008e4:	3b08      	subs	r3, #8
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	430a      	orrs	r2, r1
 80008ea:	3306      	adds	r3, #6
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	18c3      	adds	r3, r0, r3
 80008f0:	3304      	adds	r3, #4
 80008f2:	601a      	str	r2, [r3, #0]
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b003      	add	sp, #12
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	1e5a      	subs	r2, r3, #1
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	045b      	lsls	r3, r3, #17
 8000914:	429a      	cmp	r2, r3
 8000916:	d301      	bcc.n	800091c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000918:	2301      	movs	r3, #1
 800091a:	e010      	b.n	800093e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <SysTick_Config+0x44>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	3a01      	subs	r2, #1
 8000922:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000924:	2301      	movs	r3, #1
 8000926:	425b      	negs	r3, r3
 8000928:	2103      	movs	r1, #3
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff ff7c 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <SysTick_Config+0x44>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SysTick_Config+0x44>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	0018      	movs	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	210f      	movs	r1, #15
 8000958:	187b      	adds	r3, r7, r1
 800095a:	1c02      	adds	r2, r0, #0
 800095c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	187b      	adds	r3, r7, r1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b25b      	sxtb	r3, r3
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff ff5d 	bl	8000828 <__NVIC_SetPriority>
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b004      	add	sp, #16
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ffbf 	bl	8000904 <SysTick_Config>
 8000986:	0003      	movs	r3, r0
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099e:	e147      	b.n	8000c30 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	4091      	lsls	r1, r2
 80009aa:	000a      	movs	r2, r1
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d100      	bne.n	80009b8 <HAL_GPIO_Init+0x28>
 80009b6:	e138      	b.n	8000c2a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2203      	movs	r2, #3
 80009be:	4013      	ands	r3, r2
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d005      	beq.n	80009d0 <HAL_GPIO_Init+0x40>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2203      	movs	r2, #3
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d130      	bne.n	8000a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	2203      	movs	r2, #3
 80009dc:	409a      	lsls	r2, r3
 80009de:	0013      	movs	r3, r2
 80009e0:	43da      	mvns	r2, r3
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68da      	ldr	r2, [r3, #12]
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	409a      	lsls	r2, r3
 80009f2:	0013      	movs	r3, r2
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a06:	2201      	movs	r2, #1
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	091b      	lsrs	r3, r3, #4
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	401a      	ands	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2203      	movs	r2, #3
 8000a38:	4013      	ands	r3, r2
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d017      	beq.n	8000a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	2203      	movs	r2, #3
 8000a74:	4013      	ands	r3, r2
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d123      	bne.n	8000ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	08da      	lsrs	r2, r3, #3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3208      	adds	r2, #8
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	58d3      	ldr	r3, [r2, r3]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	2207      	movs	r2, #7
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	220f      	movs	r2, #15
 8000a92:	409a      	lsls	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	43da      	mvns	r2, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	691a      	ldr	r2, [r3, #16]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	2107      	movs	r1, #7
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	0013      	movs	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	08da      	lsrs	r2, r3, #3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3208      	adds	r2, #8
 8000abc:	0092      	lsls	r2, r2, #2
 8000abe:	6939      	ldr	r1, [r7, #16]
 8000ac0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2203      	movs	r2, #3
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2203      	movs	r2, #3
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	23c0      	movs	r3, #192	; 0xc0
 8000afc:	029b      	lsls	r3, r3, #10
 8000afe:	4013      	ands	r3, r2
 8000b00:	d100      	bne.n	8000b04 <HAL_GPIO_Init+0x174>
 8000b02:	e092      	b.n	8000c2a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000b04:	4a50      	ldr	r2, [pc, #320]	; (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3318      	adds	r3, #24
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	589b      	ldr	r3, [r3, r2]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	2203      	movs	r2, #3
 8000b16:	4013      	ands	r3, r2
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	220f      	movs	r2, #15
 8000b1c:	409a      	lsls	r2, r3
 8000b1e:	0013      	movs	r3, r2
 8000b20:	43da      	mvns	r2, r3
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	23a0      	movs	r3, #160	; 0xa0
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d013      	beq.n	8000b5a <HAL_GPIO_Init+0x1ca>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a45      	ldr	r2, [pc, #276]	; (8000c4c <HAL_GPIO_Init+0x2bc>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d00d      	beq.n	8000b56 <HAL_GPIO_Init+0x1c6>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a44      	ldr	r2, [pc, #272]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d007      	beq.n	8000b52 <HAL_GPIO_Init+0x1c2>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a43      	ldr	r2, [pc, #268]	; (8000c54 <HAL_GPIO_Init+0x2c4>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d101      	bne.n	8000b4e <HAL_GPIO_Init+0x1be>
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e006      	b.n	8000b5c <HAL_GPIO_Init+0x1cc>
 8000b4e:	2305      	movs	r3, #5
 8000b50:	e004      	b.n	8000b5c <HAL_GPIO_Init+0x1cc>
 8000b52:	2302      	movs	r3, #2
 8000b54:	e002      	b.n	8000b5c <HAL_GPIO_Init+0x1cc>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <HAL_GPIO_Init+0x1cc>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	2103      	movs	r1, #3
 8000b60:	400a      	ands	r2, r1
 8000b62:	00d2      	lsls	r2, r2, #3
 8000b64:	4093      	lsls	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000b6c:	4936      	ldr	r1, [pc, #216]	; (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	3318      	adds	r3, #24
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	43da      	mvns	r2, r3
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	035b      	lsls	r3, r3, #13
 8000b92:	4013      	ands	r3, r2
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43da      	mvns	r2, r3
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	039b      	lsls	r3, r3, #14
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bce:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000bd0:	2384      	movs	r3, #132	; 0x84
 8000bd2:	58d3      	ldr	r3, [r2, r3]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43da      	mvns	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	029b      	lsls	r3, r3, #10
 8000be8:	4013      	ands	r3, r2
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bf4:	4914      	ldr	r1, [pc, #80]	; (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000bf6:	2284      	movs	r2, #132	; 0x84
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000bfc:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	58d3      	ldr	r3, [r2, r3]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43da      	mvns	r2, r3
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	025b      	lsls	r3, r3, #9
 8000c16:	4013      	ands	r3, r2
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c22:	4909      	ldr	r1, [pc, #36]	; (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	40da      	lsrs	r2, r3
 8000c38:	1e13      	subs	r3, r2, #0
 8000c3a:	d000      	beq.n	8000c3e <HAL_GPIO_Init+0x2ae>
 8000c3c:	e6b0      	b.n	80009a0 <HAL_GPIO_Init+0x10>
  }
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b006      	add	sp, #24
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021800 	.word	0x40021800
 8000c4c:	50000400 	.word	0x50000400
 8000c50:	50000800 	.word	0x50000800
 8000c54:	50000c00 	.word	0x50000c00

08000c58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	0019      	movs	r1, r3
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d11f      	bne.n	8000cbc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	0013      	movs	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	189b      	adds	r3, r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4912      	ldr	r1, [pc, #72]	; (8000cd4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fa38 	bl	8000100 <__udivsi3>
 8000c90:	0003      	movs	r3, r0
 8000c92:	3301      	adds	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c96:	e008      	b.n	8000caa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	e001      	b.n	8000caa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e009      	b.n	8000cbe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000cac:	695a      	ldr	r2, [r3, #20]
 8000cae:	2380      	movs	r3, #128	; 0x80
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d0ed      	beq.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	40007000 	.word	0x40007000
 8000ccc:	fffff9ff 	.word	0xfffff9ff
 8000cd0:	2000000c 	.word	0x2000000c
 8000cd4:	000f4240 	.word	0x000f4240

08000cd8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <LL_RCC_GetAPB1Prescaler+0x14>)
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	23e0      	movs	r3, #224	; 0xe0
 8000ce2:	01db      	lsls	r3, r3, #7
 8000ce4:	4013      	ands	r3, r2
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e2f3      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2201      	movs	r2, #1
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d100      	bne.n	8000d0e <HAL_RCC_OscConfig+0x1e>
 8000d0c:	e07c      	b.n	8000e08 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d0e:	4bc3      	ldr	r3, [pc, #780]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2238      	movs	r2, #56	; 0x38
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d18:	4bc0      	ldr	r3, [pc, #768]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	2b10      	cmp	r3, #16
 8000d26:	d102      	bne.n	8000d2e <HAL_RCC_OscConfig+0x3e>
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d002      	beq.n	8000d34 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d10b      	bne.n	8000d4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d34:	4bb9      	ldr	r3, [pc, #740]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	029b      	lsls	r3, r3, #10
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d062      	beq.n	8000e06 <HAL_RCC_OscConfig+0x116>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d15e      	bne.n	8000e06 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e2ce      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	025b      	lsls	r3, r3, #9
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d107      	bne.n	8000d68 <HAL_RCC_OscConfig+0x78>
 8000d58:	4bb0      	ldr	r3, [pc, #704]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4baf      	ldr	r3, [pc, #700]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	0249      	lsls	r1, r1, #9
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e020      	b.n	8000daa <HAL_RCC_OscConfig+0xba>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	02db      	lsls	r3, r3, #11
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d10e      	bne.n	8000d92 <HAL_RCC_OscConfig+0xa2>
 8000d74:	4ba9      	ldr	r3, [pc, #676]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4ba8      	ldr	r3, [pc, #672]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	02c9      	lsls	r1, r1, #11
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	4ba6      	ldr	r3, [pc, #664]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4ba5      	ldr	r3, [pc, #660]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	0249      	lsls	r1, r1, #9
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e00b      	b.n	8000daa <HAL_RCC_OscConfig+0xba>
 8000d92:	4ba2      	ldr	r3, [pc, #648]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4ba1      	ldr	r3, [pc, #644]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000d98:	49a1      	ldr	r1, [pc, #644]	; (8001020 <HAL_RCC_OscConfig+0x330>)
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	4b9f      	ldr	r3, [pc, #636]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b9e      	ldr	r3, [pc, #632]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000da4:	499f      	ldr	r1, [pc, #636]	; (8001024 <HAL_RCC_OscConfig+0x334>)
 8000da6:	400a      	ands	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d014      	beq.n	8000ddc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db2:	f7ff fd2f 	bl	8000814 <HAL_GetTick>
 8000db6:	0003      	movs	r3, r0
 8000db8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dbc:	f7ff fd2a 	bl	8000814 <HAL_GetTick>
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b64      	cmp	r3, #100	; 0x64
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e28d      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dce:	4b93      	ldr	r3, [pc, #588]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	029b      	lsls	r3, r3, #10
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d0f0      	beq.n	8000dbc <HAL_RCC_OscConfig+0xcc>
 8000dda:	e015      	b.n	8000e08 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fd1a 	bl	8000814 <HAL_GetTick>
 8000de0:	0003      	movs	r3, r0
 8000de2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000de4:	e008      	b.n	8000df8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de6:	f7ff fd15 	bl	8000814 <HAL_GetTick>
 8000dea:	0002      	movs	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b64      	cmp	r3, #100	; 0x64
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e278      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000df8:	4b88      	ldr	r3, [pc, #544]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	029b      	lsls	r3, r3, #10
 8000e00:	4013      	ands	r3, r2
 8000e02:	d1f0      	bne.n	8000de6 <HAL_RCC_OscConfig+0xf6>
 8000e04:	e000      	b.n	8000e08 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d100      	bne.n	8000e14 <HAL_RCC_OscConfig+0x124>
 8000e12:	e099      	b.n	8000f48 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e14:	4b81      	ldr	r3, [pc, #516]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2238      	movs	r2, #56	; 0x38
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e1e:	4b7f      	ldr	r3, [pc, #508]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	2203      	movs	r2, #3
 8000e24:	4013      	ands	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	2b10      	cmp	r3, #16
 8000e2c:	d102      	bne.n	8000e34 <HAL_RCC_OscConfig+0x144>
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d002      	beq.n	8000e3a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d135      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e3a:	4b78      	ldr	r3, [pc, #480]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4013      	ands	r3, r2
 8000e44:	d005      	beq.n	8000e52 <HAL_RCC_OscConfig+0x162>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e24b      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e52:	4b72      	ldr	r3, [pc, #456]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	4a74      	ldr	r2, [pc, #464]	; (8001028 <HAL_RCC_OscConfig+0x338>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	021a      	lsls	r2, r3, #8
 8000e62:	4b6e      	ldr	r3, [pc, #440]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000e64:	430a      	orrs	r2, r1
 8000e66:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d112      	bne.n	8000e94 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e6e:	4b6b      	ldr	r3, [pc, #428]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a6e      	ldr	r2, [pc, #440]	; (800102c <HAL_RCC_OscConfig+0x33c>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	0019      	movs	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	4b67      	ldr	r3, [pc, #412]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e82:	4b66      	ldr	r3, [pc, #408]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	0adb      	lsrs	r3, r3, #11
 8000e88:	2207      	movs	r2, #7
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	4a68      	ldr	r2, [pc, #416]	; (8001030 <HAL_RCC_OscConfig+0x340>)
 8000e8e:	40da      	lsrs	r2, r3
 8000e90:	4b68      	ldr	r3, [pc, #416]	; (8001034 <HAL_RCC_OscConfig+0x344>)
 8000e92:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e94:	4b68      	ldr	r3, [pc, #416]	; (8001038 <HAL_RCC_OscConfig+0x348>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff fc5f 	bl	800075c <HAL_InitTick>
 8000e9e:	1e03      	subs	r3, r0, #0
 8000ea0:	d051      	beq.n	8000f46 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e221      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d030      	beq.n	8000f10 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000eae:	4b5b      	ldr	r3, [pc, #364]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a5e      	ldr	r2, [pc, #376]	; (800102c <HAL_RCC_OscConfig+0x33c>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	4b57      	ldr	r3, [pc, #348]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000ec2:	4b56      	ldr	r3, [pc, #344]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b55      	ldr	r3, [pc, #340]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	0049      	lsls	r1, r1, #1
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fca0 	bl	8000814 <HAL_GetTick>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eda:	f7ff fc9b 	bl	8000814 <HAL_GetTick>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e1fe      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000eec:	4b4b      	ldr	r3, [pc, #300]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d0f0      	beq.n	8000eda <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef8:	4b48      	ldr	r3, [pc, #288]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4a4a      	ldr	r2, [pc, #296]	; (8001028 <HAL_RCC_OscConfig+0x338>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	0019      	movs	r1, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	021a      	lsls	r2, r3, #8
 8000f08:	4b44      	ldr	r3, [pc, #272]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	e01b      	b.n	8000f48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000f10:	4b42      	ldr	r3, [pc, #264]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b41      	ldr	r3, [pc, #260]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000f16:	4949      	ldr	r1, [pc, #292]	; (800103c <HAL_RCC_OscConfig+0x34c>)
 8000f18:	400a      	ands	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fc7a 	bl	8000814 <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f26:	f7ff fc75 	bl	8000814 <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e1d8      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f38:	4b38      	ldr	r3, [pc, #224]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4013      	ands	r3, r2
 8000f42:	d1f0      	bne.n	8000f26 <HAL_RCC_OscConfig+0x236>
 8000f44:	e000      	b.n	8000f48 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d047      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f52:	4b32      	ldr	r3, [pc, #200]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2238      	movs	r2, #56	; 0x38
 8000f58:	4013      	ands	r3, r2
 8000f5a:	2b18      	cmp	r3, #24
 8000f5c:	d10a      	bne.n	8000f74 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	2202      	movs	r2, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	d03c      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x2f2>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d138      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e1ba      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d019      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f7c:	4b27      	ldr	r3, [pc, #156]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	430a      	orrs	r2, r1
 8000f86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f88:	f7ff fc44 	bl	8000814 <HAL_GetTick>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f92:	f7ff fc3f 	bl	8000814 <HAL_GetTick>
 8000f96:	0002      	movs	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e1a2      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa8:	2202      	movs	r2, #2
 8000faa:	4013      	ands	r3, r2
 8000fac:	d0f1      	beq.n	8000f92 <HAL_RCC_OscConfig+0x2a2>
 8000fae:	e018      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	438a      	bics	r2, r1
 8000fba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fc2a 	bl	8000814 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc6:	f7ff fc25 	bl	8000814 <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e188      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fdc:	2202      	movs	r2, #2
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d1f1      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d100      	bne.n	8000fee <HAL_RCC_OscConfig+0x2fe>
 8000fec:	e0c6      	b.n	800117c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fee:	231f      	movs	r3, #31
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2238      	movs	r2, #56	; 0x38
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b20      	cmp	r3, #32
 8001000:	d11e      	bne.n	8001040 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_RCC_OscConfig+0x32c>)
 8001004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001006:	2202      	movs	r2, #2
 8001008:	4013      	ands	r3, r2
 800100a:	d100      	bne.n	800100e <HAL_RCC_OscConfig+0x31e>
 800100c:	e0b6      	b.n	800117c <HAL_RCC_OscConfig+0x48c>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d000      	beq.n	8001018 <HAL_RCC_OscConfig+0x328>
 8001016:	e0b1      	b.n	800117c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e166      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
 800101c:	40021000 	.word	0x40021000
 8001020:	fffeffff 	.word	0xfffeffff
 8001024:	fffbffff 	.word	0xfffbffff
 8001028:	ffff80ff 	.word	0xffff80ff
 800102c:	ffffc7ff 	.word	0xffffc7ff
 8001030:	00f42400 	.word	0x00f42400
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000010 	.word	0x20000010
 800103c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001040:	4bac      	ldr	r3, [pc, #688]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	055b      	lsls	r3, r3, #21
 8001048:	4013      	ands	r3, r2
 800104a:	d101      	bne.n	8001050 <HAL_RCC_OscConfig+0x360>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_RCC_OscConfig+0x362>
 8001050:	2300      	movs	r3, #0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d011      	beq.n	800107a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4ba7      	ldr	r3, [pc, #668]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800105a:	4ba6      	ldr	r3, [pc, #664]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	0549      	lsls	r1, r1, #21
 8001060:	430a      	orrs	r2, r1
 8001062:	63da      	str	r2, [r3, #60]	; 0x3c
 8001064:	4ba3      	ldr	r3, [pc, #652]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	055b      	lsls	r3, r3, #21
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001072:	231f      	movs	r3, #31
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800107a:	4b9f      	ldr	r3, [pc, #636]	; (80012f8 <HAL_RCC_OscConfig+0x608>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4013      	ands	r3, r2
 8001084:	d11a      	bne.n	80010bc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001086:	4b9c      	ldr	r3, [pc, #624]	; (80012f8 <HAL_RCC_OscConfig+0x608>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b9b      	ldr	r3, [pc, #620]	; (80012f8 <HAL_RCC_OscConfig+0x608>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	0049      	lsls	r1, r1, #1
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001094:	f7ff fbbe 	bl	8000814 <HAL_GetTick>
 8001098:	0003      	movs	r3, r0
 800109a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109e:	f7ff fbb9 	bl	8000814 <HAL_GetTick>
 80010a2:	0002      	movs	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e11c      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010b0:	4b91      	ldr	r3, [pc, #580]	; (80012f8 <HAL_RCC_OscConfig+0x608>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4013      	ands	r3, r2
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d106      	bne.n	80010d2 <HAL_RCC_OscConfig+0x3e2>
 80010c4:	4b8b      	ldr	r3, [pc, #556]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80010c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010c8:	4b8a      	ldr	r3, [pc, #552]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	430a      	orrs	r2, r1
 80010ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80010d0:	e01c      	b.n	800110c <HAL_RCC_OscConfig+0x41c>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x404>
 80010da:	4b86      	ldr	r3, [pc, #536]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80010dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010de:	4b85      	ldr	r3, [pc, #532]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80010e0:	2104      	movs	r1, #4
 80010e2:	430a      	orrs	r2, r1
 80010e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80010e6:	4b83      	ldr	r3, [pc, #524]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80010e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010ea:	4b82      	ldr	r3, [pc, #520]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80010f2:	e00b      	b.n	800110c <HAL_RCC_OscConfig+0x41c>
 80010f4:	4b7f      	ldr	r3, [pc, #508]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80010f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010f8:	4b7e      	ldr	r3, [pc, #504]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	438a      	bics	r2, r1
 80010fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001100:	4b7c      	ldr	r3, [pc, #496]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001102:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001104:	4b7b      	ldr	r3, [pc, #492]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001106:	2104      	movs	r1, #4
 8001108:	438a      	bics	r2, r1
 800110a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d014      	beq.n	800113e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fb7e 	bl	8000814 <HAL_GetTick>
 8001118:	0003      	movs	r3, r0
 800111a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800111c:	e009      	b.n	8001132 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f7ff fb79 	bl	8000814 <HAL_GetTick>
 8001122:	0002      	movs	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	4a74      	ldr	r2, [pc, #464]	; (80012fc <HAL_RCC_OscConfig+0x60c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e0db      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001132:	4b70      	ldr	r3, [pc, #448]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	2202      	movs	r2, #2
 8001138:	4013      	ands	r3, r2
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x42e>
 800113c:	e013      	b.n	8001166 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113e:	f7ff fb69 	bl	8000814 <HAL_GetTick>
 8001142:	0003      	movs	r3, r0
 8001144:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001146:	e009      	b.n	800115c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001148:	f7ff fb64 	bl	8000814 <HAL_GetTick>
 800114c:	0002      	movs	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	4a6a      	ldr	r2, [pc, #424]	; (80012fc <HAL_RCC_OscConfig+0x60c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e0c6      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800115c:	4b65      	ldr	r3, [pc, #404]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 800115e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001160:	2202      	movs	r2, #2
 8001162:	4013      	ands	r3, r2
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001166:	231f      	movs	r3, #31
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d105      	bne.n	800117c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001170:	4b60      	ldr	r3, [pc, #384]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001174:	4b5f      	ldr	r3, [pc, #380]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001176:	4962      	ldr	r1, [pc, #392]	; (8001300 <HAL_RCC_OscConfig+0x610>)
 8001178:	400a      	ands	r2, r1
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x496>
 8001184:	e0b0      	b.n	80012e8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001186:	4b5b      	ldr	r3, [pc, #364]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2238      	movs	r2, #56	; 0x38
 800118c:	4013      	ands	r3, r2
 800118e:	2b10      	cmp	r3, #16
 8001190:	d100      	bne.n	8001194 <HAL_RCC_OscConfig+0x4a4>
 8001192:	e078      	b.n	8001286 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d153      	bne.n	8001244 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119c:	4b55      	ldr	r3, [pc, #340]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80011a2:	4958      	ldr	r1, [pc, #352]	; (8001304 <HAL_RCC_OscConfig+0x614>)
 80011a4:	400a      	ands	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fb34 	bl	8000814 <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b2:	f7ff fb2f 	bl	8000814 <HAL_GetTick>
 80011b6:	0002      	movs	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e092      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011c4:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	049b      	lsls	r3, r3, #18
 80011cc:	4013      	ands	r3, r2
 80011ce:	d1f0      	bne.n	80011b2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d0:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_RCC_OscConfig+0x618>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	0019      	movs	r1, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1a      	ldr	r2, [r3, #32]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	431a      	orrs	r2, r3
 80011f8:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 80011fa:	430a      	orrs	r2, r1
 80011fc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0449      	lsls	r1, r1, #17
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	0549      	lsls	r1, r1, #21
 8001216:	430a      	orrs	r2, r1
 8001218:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff fafb 	bl	8000814 <HAL_GetTick>
 800121e:	0003      	movs	r3, r0
 8001220:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001224:	f7ff faf6 	bl	8000814 <HAL_GetTick>
 8001228:	0002      	movs	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e059      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	049b      	lsls	r3, r3, #18
 800123e:	4013      	ands	r3, r2
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x534>
 8001242:	e051      	b.n	80012e8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 800124a:	492e      	ldr	r1, [pc, #184]	; (8001304 <HAL_RCC_OscConfig+0x614>)
 800124c:	400a      	ands	r2, r1
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fae0 	bl	8000814 <HAL_GetTick>
 8001254:	0003      	movs	r3, r0
 8001256:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125a:	f7ff fadb 	bl	8000814 <HAL_GetTick>
 800125e:	0002      	movs	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e03e      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	049b      	lsls	r3, r3, #18
 8001274:	4013      	ands	r3, r2
 8001276:	d1f0      	bne.n	800125a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 800127e:	4923      	ldr	r1, [pc, #140]	; (800130c <HAL_RCC_OscConfig+0x61c>)
 8001280:	400a      	ands	r2, r1
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	e030      	b.n	80012e8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e02b      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_RCC_OscConfig+0x604>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2203      	movs	r2, #3
 800129c:	401a      	ands	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d11e      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2270      	movs	r2, #112	; 0x70
 80012aa:	401a      	ands	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d117      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	23fe      	movs	r3, #254	; 0xfe
 80012b8:	01db      	lsls	r3, r3, #7
 80012ba:	401a      	ands	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d10e      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	23f8      	movs	r3, #248	; 0xf8
 80012ca:	039b      	lsls	r3, r3, #14
 80012cc:	401a      	ands	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d106      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	0f5b      	lsrs	r3, r3, #29
 80012da:	075a      	lsls	r2, r3, #29
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b008      	add	sp, #32
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40007000 	.word	0x40007000
 80012fc:	00001388 	.word	0x00001388
 8001300:	efffffff 	.word	0xefffffff
 8001304:	feffffff 	.word	0xfeffffff
 8001308:	1fc1808c 	.word	0x1fc1808c
 800130c:	effefffc 	.word	0xeffefffc

08001310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0e9      	b.n	80014f8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001324:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_ClockConfig+0x1f0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2207      	movs	r2, #7
 800132a:	4013      	ands	r3, r2
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d91e      	bls.n	8001370 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b73      	ldr	r3, [pc, #460]	; (8001500 <HAL_RCC_ClockConfig+0x1f0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2207      	movs	r2, #7
 8001338:	4393      	bics	r3, r2
 800133a:	0019      	movs	r1, r3
 800133c:	4b70      	ldr	r3, [pc, #448]	; (8001500 <HAL_RCC_ClockConfig+0x1f0>)
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001344:	f7ff fa66 	bl	8000814 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800134c:	e009      	b.n	8001362 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134e:	f7ff fa61 	bl	8000814 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4a6a      	ldr	r2, [pc, #424]	; (8001504 <HAL_RCC_ClockConfig+0x1f4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e0ca      	b.n	80014f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001362:	4b67      	ldr	r3, [pc, #412]	; (8001500 <HAL_RCC_ClockConfig+0x1f0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2207      	movs	r2, #7
 8001368:	4013      	ands	r3, r2
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d1ee      	bne.n	800134e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2202      	movs	r2, #2
 8001376:	4013      	ands	r3, r2
 8001378:	d015      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2204      	movs	r2, #4
 8001380:	4013      	ands	r3, r2
 8001382:	d006      	beq.n	8001392 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001384:	4b60      	ldr	r3, [pc, #384]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 800138a:	21e0      	movs	r1, #224	; 0xe0
 800138c:	01c9      	lsls	r1, r1, #7
 800138e:	430a      	orrs	r2, r1
 8001390:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001392:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	4a5d      	ldr	r2, [pc, #372]	; (800150c <HAL_RCC_ClockConfig+0x1fc>)
 8001398:	4013      	ands	r3, r2
 800139a:	0019      	movs	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	4b59      	ldr	r3, [pc, #356]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 80013a2:	430a      	orrs	r2, r1
 80013a4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2201      	movs	r2, #1
 80013ac:	4013      	ands	r3, r2
 80013ae:	d057      	beq.n	8001460 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d107      	bne.n	80013c8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b8:	4b53      	ldr	r3, [pc, #332]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	d12b      	bne.n	800141c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e097      	b.n	80014f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d107      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d0:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	049b      	lsls	r3, r3, #18
 80013d8:	4013      	ands	r3, r2
 80013da:	d11f      	bne.n	800141c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e08b      	b.n	80014f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d107      	bne.n	80013f8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e8:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4013      	ands	r3, r2
 80013f2:	d113      	bne.n	800141c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e07f      	b.n	80014f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d106      	bne.n	800140e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001400:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	2202      	movs	r2, #2
 8001406:	4013      	ands	r3, r2
 8001408:	d108      	bne.n	800141c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e074      	b.n	80014f8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800140e:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 8001410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e06d      	b.n	80014f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800141c:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2207      	movs	r2, #7
 8001422:	4393      	bics	r3, r2
 8001424:	0019      	movs	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 800142c:	430a      	orrs	r2, r1
 800142e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001430:	f7ff f9f0 	bl	8000814 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001438:	e009      	b.n	800144e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143a:	f7ff f9eb 	bl	8000814 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <HAL_RCC_ClockConfig+0x1f4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e054      	b.n	80014f8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2238      	movs	r2, #56	; 0x38
 8001454:	401a      	ands	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	429a      	cmp	r2, r3
 800145e:	d1ec      	bne.n	800143a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <HAL_RCC_ClockConfig+0x1f0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2207      	movs	r2, #7
 8001466:	4013      	ands	r3, r2
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d21e      	bcs.n	80014ac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_RCC_ClockConfig+0x1f0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2207      	movs	r2, #7
 8001474:	4393      	bics	r3, r2
 8001476:	0019      	movs	r1, r3
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_RCC_ClockConfig+0x1f0>)
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001480:	f7ff f9c8 	bl	8000814 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001488:	e009      	b.n	800149e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800148a:	f7ff f9c3 	bl	8000814 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_RCC_ClockConfig+0x1f4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e02c      	b.n	80014f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_RCC_ClockConfig+0x1f0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2207      	movs	r2, #7
 80014a4:	4013      	ands	r3, r2
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d1ee      	bne.n	800148a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2204      	movs	r2, #4
 80014b2:	4013      	ands	r3, r2
 80014b4:	d009      	beq.n	80014ca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_RCC_ClockConfig+0x200>)
 80014bc:	4013      	ands	r3, r2
 80014be:	0019      	movs	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 80014c6:	430a      	orrs	r2, r1
 80014c8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80014ca:	f000 f829 	bl	8001520 <HAL_RCC_GetSysClockFreq>
 80014ce:	0001      	movs	r1, r0
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_RCC_ClockConfig+0x1f8>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	220f      	movs	r2, #15
 80014d8:	401a      	ands	r2, r3
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_RCC_ClockConfig+0x204>)
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	58d3      	ldr	r3, [r2, r3]
 80014e0:	221f      	movs	r2, #31
 80014e2:	4013      	ands	r3, r2
 80014e4:	000a      	movs	r2, r1
 80014e6:	40da      	lsrs	r2, r3
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_ClockConfig+0x208>)
 80014ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_RCC_ClockConfig+0x20c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff f933 	bl	800075c <HAL_InitTick>
 80014f6:	0003      	movs	r3, r0
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b004      	add	sp, #16
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40022000 	.word	0x40022000
 8001504:	00001388 	.word	0x00001388
 8001508:	40021000 	.word	0x40021000
 800150c:	fffff0ff 	.word	0xfffff0ff
 8001510:	ffff8fff 	.word	0xffff8fff
 8001514:	0800253c 	.word	0x0800253c
 8001518:	2000000c 	.word	0x2000000c
 800151c:	20000010 	.word	0x20000010

08001520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001526:	4b3c      	ldr	r3, [pc, #240]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2238      	movs	r2, #56	; 0x38
 800152c:	4013      	ands	r3, r2
 800152e:	d10f      	bne.n	8001550 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001530:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0adb      	lsrs	r3, r3, #11
 8001536:	2207      	movs	r2, #7
 8001538:	4013      	ands	r3, r2
 800153a:	2201      	movs	r2, #1
 800153c:	409a      	lsls	r2, r3
 800153e:	0013      	movs	r3, r2
 8001540:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	4835      	ldr	r0, [pc, #212]	; (800161c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001546:	f7fe fddb 	bl	8000100 <__udivsi3>
 800154a:	0003      	movs	r3, r0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	e05d      	b.n	800160c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2238      	movs	r2, #56	; 0x38
 8001556:	4013      	ands	r3, r2
 8001558:	2b08      	cmp	r3, #8
 800155a:	d102      	bne.n	8001562 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_RCC_GetSysClockFreq+0x100>)
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	e054      	b.n	800160c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2238      	movs	r2, #56	; 0x38
 8001568:	4013      	ands	r3, r2
 800156a:	2b10      	cmp	r3, #16
 800156c:	d138      	bne.n	80015e0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2203      	movs	r2, #3
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf8>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	2207      	movs	r2, #7
 8001580:	4013      	ands	r3, r2
 8001582:	3301      	adds	r3, #1
 8001584:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d10d      	bne.n	80015a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	4824      	ldr	r0, [pc, #144]	; (8001620 <HAL_RCC_GetSysClockFreq+0x100>)
 8001590:	f7fe fdb6 	bl	8000100 <__udivsi3>
 8001594:	0003      	movs	r3, r0
 8001596:	0019      	movs	r1, r3
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf8>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	227f      	movs	r2, #127	; 0x7f
 80015a0:	4013      	ands	r3, r2
 80015a2:	434b      	muls	r3, r1
 80015a4:	617b      	str	r3, [r7, #20]
        break;
 80015a6:	e00d      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	481c      	ldr	r0, [pc, #112]	; (800161c <HAL_RCC_GetSysClockFreq+0xfc>)
 80015ac:	f7fe fda8 	bl	8000100 <__udivsi3>
 80015b0:	0003      	movs	r3, r0
 80015b2:	0019      	movs	r1, r3
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	227f      	movs	r2, #127	; 0x7f
 80015bc:	4013      	ands	r3, r2
 80015be:	434b      	muls	r3, r1
 80015c0:	617b      	str	r3, [r7, #20]
        break;
 80015c2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0f5b      	lsrs	r3, r3, #29
 80015ca:	2207      	movs	r2, #7
 80015cc:	4013      	ands	r3, r2
 80015ce:	3301      	adds	r3, #1
 80015d0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	6978      	ldr	r0, [r7, #20]
 80015d6:	f7fe fd93 	bl	8000100 <__udivsi3>
 80015da:	0003      	movs	r3, r0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	e015      	b.n	800160c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2238      	movs	r2, #56	; 0x38
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d103      	bne.n	80015f4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	e00b      	b.n	800160c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2238      	movs	r2, #56	; 0x38
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b18      	cmp	r3, #24
 80015fe:	d103      	bne.n	8001608 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001600:	23fa      	movs	r3, #250	; 0xfa
 8001602:	01db      	lsls	r3, r3, #7
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	e001      	b.n	800160c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800160c:	693b      	ldr	r3, [r7, #16]
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	b006      	add	sp, #24
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	40021000 	.word	0x40021000
 800161c:	00f42400 	.word	0x00f42400
 8001620:	007a1200 	.word	0x007a1200

08001624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001628:	4b02      	ldr	r3, [pc, #8]	; (8001634 <HAL_RCC_GetHCLKFreq+0x10>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	2000000c 	.word	0x2000000c

08001638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800163c:	f7ff fff2 	bl	8001624 <HAL_RCC_GetHCLKFreq>
 8001640:	0004      	movs	r4, r0
 8001642:	f7ff fb49 	bl	8000cd8 <LL_RCC_GetAPB1Prescaler>
 8001646:	0003      	movs	r3, r0
 8001648:	0b1a      	lsrs	r2, r3, #12
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_RCC_GetPCLK1Freq+0x28>)
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	58d3      	ldr	r3, [r2, r3]
 8001650:	221f      	movs	r2, #31
 8001652:	4013      	ands	r3, r2
 8001654:	40dc      	lsrs	r4, r3
 8001656:	0023      	movs	r3, r4
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bdb0      	pop	{r4, r5, r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	0800257c 	.word	0x0800257c

08001664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800166c:	2313      	movs	r3, #19
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001674:	2312      	movs	r3, #18
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	4013      	ands	r3, r2
 8001686:	d100      	bne.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001688:	e0a3      	b.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168a:	2011      	movs	r0, #17
 800168c:	183b      	adds	r3, r7, r0
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b86      	ldr	r3, [pc, #536]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	055b      	lsls	r3, r3, #21
 800169a:	4013      	ands	r3, r2
 800169c:	d110      	bne.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b83      	ldr	r3, [pc, #524]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80016a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016a2:	4b82      	ldr	r3, [pc, #520]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0549      	lsls	r1, r1, #21
 80016a8:	430a      	orrs	r2, r1
 80016aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ac:	4b7f      	ldr	r3, [pc, #508]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80016ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	055b      	lsls	r3, r3, #21
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ba:	183b      	adds	r3, r7, r0
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c0:	4b7b      	ldr	r3, [pc, #492]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b7a      	ldr	r3, [pc, #488]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	0049      	lsls	r1, r1, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016ce:	f7ff f8a1 	bl	8000814 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016d6:	e00b      	b.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d8:	f7ff f89c 	bl	8000814 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d904      	bls.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80016e6:	2313      	movs	r3, #19
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	2203      	movs	r2, #3
 80016ec:	701a      	strb	r2, [r3, #0]
        break;
 80016ee:	e005      	b.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016f0:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	d0ed      	beq.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80016fc:	2313      	movs	r3, #19
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d154      	bne.n	80017b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001706:	4b69      	ldr	r3, [pc, #420]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001708:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800170a:	23c0      	movs	r3, #192	; 0xc0
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4013      	ands	r3, r2
 8001710:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d019      	beq.n	800174c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	429a      	cmp	r2, r3
 8001720:	d014      	beq.n	800174c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001722:	4b62      	ldr	r3, [pc, #392]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	4a63      	ldr	r2, [pc, #396]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001728:	4013      	ands	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800172c:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800172e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001730:	4b5e      	ldr	r3, [pc, #376]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0249      	lsls	r1, r1, #9
 8001736:	430a      	orrs	r2, r1
 8001738:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800173c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800173e:	4b5b      	ldr	r3, [pc, #364]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001740:	495d      	ldr	r1, [pc, #372]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001742:	400a      	ands	r2, r1
 8001744:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001746:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2201      	movs	r2, #1
 8001750:	4013      	ands	r3, r2
 8001752:	d016      	beq.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff f85e 	bl	8000814 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800175c:	e00c      	b.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff f859 	bl	8000814 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4a54      	ldr	r2, [pc, #336]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d904      	bls.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800176e:	2313      	movs	r3, #19
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	2203      	movs	r2, #3
 8001774:	701a      	strb	r2, [r3, #0]
            break;
 8001776:	e004      	b.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001778:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800177a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177c:	2202      	movs	r2, #2
 800177e:	4013      	ands	r3, r2
 8001780:	d0ed      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001782:	2313      	movs	r3, #19
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10a      	bne.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800178c:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800178e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001790:	4a48      	ldr	r2, [pc, #288]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001792:	4013      	ands	r3, r2
 8001794:	0019      	movs	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	4b44      	ldr	r3, [pc, #272]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800179c:	430a      	orrs	r2, r1
 800179e:	65da      	str	r2, [r3, #92]	; 0x5c
 80017a0:	e00c      	b.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80017a2:	2312      	movs	r3, #18
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	2213      	movs	r2, #19
 80017a8:	18ba      	adds	r2, r7, r2
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	e005      	b.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80017b0:	2312      	movs	r3, #18
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	2213      	movs	r2, #19
 80017b6:	18ba      	adds	r2, r7, r2
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017bc:	2311      	movs	r3, #17
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d105      	bne.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80017c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ca:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80017cc:	493c      	ldr	r1, [pc, #240]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80017ce:	400a      	ands	r2, r1
 80017d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4013      	ands	r3, r2
 80017da:	d009      	beq.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017dc:	4b33      	ldr	r3, [pc, #204]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80017de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e0:	2203      	movs	r2, #3
 80017e2:	4393      	bics	r3, r2
 80017e4:	0019      	movs	r1, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4b30      	ldr	r3, [pc, #192]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80017ec:	430a      	orrs	r2, r1
 80017ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2202      	movs	r2, #2
 80017f6:	4013      	ands	r3, r2
 80017f8:	d009      	beq.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017fa:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80017fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fe:	220c      	movs	r2, #12
 8001800:	4393      	bics	r3, r2
 8001802:	0019      	movs	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800180a:	430a      	orrs	r2, r1
 800180c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2220      	movs	r2, #32
 8001814:	4013      	ands	r3, r2
 8001816:	d009      	beq.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800181a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181c:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800181e:	4013      	ands	r3, r2
 8001820:	0019      	movs	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001828:	430a      	orrs	r2, r1
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	01db      	lsls	r3, r3, #7
 8001834:	4013      	ands	r3, r2
 8001836:	d015      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	0899      	lsrs	r1, r3, #2
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001846:	430a      	orrs	r2, r1
 8001848:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	05db      	lsls	r3, r3, #23
 8001852:	429a      	cmp	r2, r3
 8001854:	d106      	bne.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	0249      	lsls	r1, r1, #9
 8001860:	430a      	orrs	r2, r1
 8001862:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4013      	ands	r3, r2
 800186e:	d016      	beq.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001876:	4013      	ands	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001880:	430a      	orrs	r2, r1
 8001882:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	01db      	lsls	r3, r3, #7
 800188c:	429a      	cmp	r2, r3
 800188e:	d106      	bne.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	0249      	lsls	r1, r1, #9
 800189a:	430a      	orrs	r2, r1
 800189c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800189e:	2312      	movs	r3, #18
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	781b      	ldrb	r3, [r3, #0]
}
 80018a4:	0018      	movs	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b006      	add	sp, #24
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40007000 	.word	0x40007000
 80018b4:	fffffcff 	.word	0xfffffcff
 80018b8:	fffeffff 	.word	0xfffeffff
 80018bc:	00001388 	.word	0x00001388
 80018c0:	efffffff 	.word	0xefffffff
 80018c4:	ffffcfff 	.word	0xffffcfff
 80018c8:	ffff3fff 	.word	0xffff3fff

080018cc <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e03f      	b.n	800195e <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2259      	movs	r2, #89	; 0x59
 80018e2:	5c9b      	ldrb	r3, [r3, r2]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d107      	bne.n	80018fa <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2258      	movs	r2, #88	; 0x58
 80018ee:	2100      	movs	r1, #0
 80018f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7fe fe6b 	bl	80005d0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2259      	movs	r2, #89	; 0x59
 80018fe:	2102      	movs	r1, #2
 8001900:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	438a      	bics	r2, r1
 8001910:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0018      	movs	r0, r3
 8001916:	f000 f9e3 	bl	8001ce0 <USART_SetConfig>
 800191a:	0003      	movs	r3, r0
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e01c      	b.n	800195e <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <HAL_USART_Init+0x9c>)
 8001930:	400a      	ands	r2, r1
 8001932:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	212a      	movs	r1, #42	; 0x2a
 8001940:	438a      	bics	r2, r1
 8001942:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2101      	movs	r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	0018      	movs	r0, r3
 8001958:	f000 fc5e 	bl	8002218 <USART_CheckIdleState>
 800195c:	0003      	movs	r3, r0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	ffffbfff 	.word	0xffffbfff

0800196c <HAL_USART_TransmitReceive>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_TransmitReceive(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint8_t *pRxData,
                                            uint16_t Size, uint32_t Timeout)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08e      	sub	sp, #56	; 0x38
 8001970:	af02      	add	r7, sp, #8
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	001a      	movs	r2, r3
 800197a:	1cbb      	adds	r3, r7, #2
 800197c:	801a      	strh	r2, [r3, #0]
  const uint16_t *ptxdata16bits;
  uint16_t uhMask;
  uint16_t rxdatacount;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2259      	movs	r2, #89	; 0x59
 8001982:	5c9b      	ldrb	r3, [r3, r2]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d000      	beq.n	800198c <HAL_USART_TransmitReceive+0x20>
 800198a:	e16b      	b.n	8001c64 <HAL_USART_TransmitReceive+0x2f8>
  {
    if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_USART_TransmitReceive+0x34>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_USART_TransmitReceive+0x34>
 8001998:	1cbb      	adds	r3, r7, #2
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_USART_TransmitReceive+0x38>
    {
      return  HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e160      	b.n	8001c66 <HAL_USART_TransmitReceive+0x2fa>
    }

    /* In case of 9bits/No Parity transfer, pTxData and pRxData buffers provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR/retrieved from RDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	015b      	lsls	r3, r3, #5
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d10d      	bne.n	80019cc <HAL_USART_TransmitReceive+0x60>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_USART_TransmitReceive+0x60>
    {
      if (((((uint32_t)pTxData) & 1U) != 0U) || ((((uint32_t)pRxData) & 1U) != 0U))
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2201      	movs	r2, #1
 80019bc:	4013      	ands	r3, r2
 80019be:	d103      	bne.n	80019c8 <HAL_USART_TransmitReceive+0x5c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	d001      	beq.n	80019cc <HAL_USART_TransmitReceive+0x60>
      {
        return  HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e14c      	b.n	8001c66 <HAL_USART_TransmitReceive+0x2fa>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2258      	movs	r2, #88	; 0x58
 80019d0:	5c9b      	ldrb	r3, [r3, r2]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_USART_TransmitReceive+0x6e>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e145      	b.n	8001c66 <HAL_USART_TransmitReceive+0x2fa>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2258      	movs	r2, #88	; 0x58
 80019de:	2101      	movs	r1, #1
 80019e0:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_RX;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2259      	movs	r2, #89	; 0x59
 80019ec:	2122      	movs	r1, #34	; 0x22
 80019ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019f0:	f7fe ff10 	bl	8000814 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	61bb      	str	r3, [r7, #24]

    husart->RxXferSize = Size;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1cba      	adds	r2, r7, #2
 80019fc:	8812      	ldrh	r2, [r2, #0]
 80019fe:	869a      	strh	r2, [r3, #52]	; 0x34
    husart->TxXferSize = Size;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1cba      	adds	r2, r7, #2
 8001a04:	8812      	ldrh	r2, [r2, #0]
 8001a06:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1cba      	adds	r2, r7, #2
 8001a0c:	8812      	ldrh	r2, [r2, #0]
 8001a0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    husart->RxXferCount = Size;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1cba      	adds	r2, r7, #2
 8001a14:	8812      	ldrh	r2, [r2, #0]
 8001a16:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	015b      	lsls	r3, r3, #5
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d10b      	bne.n	8001a3c <HAL_USART_TransmitReceive+0xd0>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <HAL_USART_TransmitReceive+0xc8>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4a90      	ldr	r2, [pc, #576]	; (8001c70 <HAL_USART_TransmitReceive+0x304>)
 8001a30:	871a      	strh	r2, [r3, #56]	; 0x38
 8001a32:	e028      	b.n	8001a86 <HAL_USART_TransmitReceive+0x11a>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	22ff      	movs	r2, #255	; 0xff
 8001a38:	871a      	strh	r2, [r3, #56]	; 0x38
 8001a3a:	e024      	b.n	8001a86 <HAL_USART_TransmitReceive+0x11a>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10b      	bne.n	8001a5c <HAL_USART_TransmitReceive+0xf0>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d103      	bne.n	8001a54 <HAL_USART_TransmitReceive+0xe8>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	22ff      	movs	r2, #255	; 0xff
 8001a50:	871a      	strh	r2, [r3, #56]	; 0x38
 8001a52:	e018      	b.n	8001a86 <HAL_USART_TransmitReceive+0x11a>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	227f      	movs	r2, #127	; 0x7f
 8001a58:	871a      	strh	r2, [r3, #56]	; 0x38
 8001a5a:	e014      	b.n	8001a86 <HAL_USART_TransmitReceive+0x11a>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	055b      	lsls	r3, r3, #21
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d10b      	bne.n	8001a80 <HAL_USART_TransmitReceive+0x114>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d103      	bne.n	8001a78 <HAL_USART_TransmitReceive+0x10c>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	227f      	movs	r2, #127	; 0x7f
 8001a74:	871a      	strh	r2, [r3, #56]	; 0x38
 8001a76:	e006      	b.n	8001a86 <HAL_USART_TransmitReceive+0x11a>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	223f      	movs	r2, #63	; 0x3f
 8001a7c:	871a      	strh	r2, [r3, #56]	; 0x38
 8001a7e:	e002      	b.n	8001a86 <HAL_USART_TransmitReceive+0x11a>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	871a      	strh	r2, [r3, #56]	; 0x38
    uhMask = husart->Mask;
 8001a86:	2316      	movs	r3, #22
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8001a8e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	015b      	lsls	r3, r3, #5
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_USART_TransmitReceive+0x14a>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d108      	bne.n	8001ab6 <HAL_USART_TransmitReceive+0x14a>
    {
      prxdata8bits  = NULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      ptxdata8bits  = NULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
      ptxdata16bits = (const uint16_t *) pTxData;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	623b      	str	r3, [r7, #32]
      prxdata16bits = (uint16_t *) pRxData;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab4:	e007      	b.n	8001ac6 <HAL_USART_TransmitReceive+0x15a>
    }
    else
    {
      prxdata8bits  = pRxData;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      ptxdata8bits  = pTxData;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
      ptxdata16bits = NULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
      prxdata16bits = NULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if ((husart->TxXferCount == 0x01U) || (husart->SlaveMode == USART_SLAVEMODE_ENABLE))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d003      	beq.n	8001ad8 <HAL_USART_TransmitReceive+0x16c>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d132      	bne.n	8001b3e <HAL_USART_TransmitReceive+0x1d2>
    {
      /* Wait until TXE flag is set to send data */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	f000 f8c5 	bl	8001c74 <USART_WaitOnFlagUntilTimeout>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_USART_TransmitReceive+0x186>
      {
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e0b9      	b.n	8001c66 <HAL_USART_TransmitReceive+0x2fa>
      }
      if (ptxdata8bits == NULL)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10d      	bne.n	8001b14 <HAL_USART_TransmitReceive+0x1a8>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & uhMask);
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	2216      	movs	r2, #22
 8001afe:	18ba      	adds	r2, r7, r2
 8001b00:	8812      	ldrh	r2, [r2, #0]
 8001b02:	4013      	ands	r3, r2
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	623b      	str	r3, [r7, #32]
 8001b12:	e00d      	b.n	8001b30 <HAL_USART_TransmitReceive+0x1c4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & (uint8_t)(uhMask & 0xFFU));
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2216      	movs	r2, #22
 8001b1a:	18ba      	adds	r2, r7, r2
 8001b1c:	8812      	ldrh	r2, [r2, #0]
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	4013      	ands	r3, r2
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      husart->TxXferCount--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    }

    /* Check the remain data to be sent */
    /* rxdatacount is a temporary variable for MISRAC2012-Rule-13.5 */
    rxdatacount = husart->RxXferCount;
 8001b3e:	231e      	movs	r3, #30
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001b46:	801a      	strh	r2, [r3, #0]
    while ((husart->TxXferCount > 0U) || (rxdatacount > 0U))
 8001b48:	e076      	b.n	8001c38 <HAL_USART_TransmitReceive+0x2cc>
    {
      if (husart->TxXferCount > 0U)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d032      	beq.n	8001bba <HAL_USART_TransmitReceive+0x24e>
      {
        /* Wait until TXE flag is set to send data */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	f000 f887 	bl	8001c74 <USART_WaitOnFlagUntilTimeout>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_USART_TransmitReceive+0x202>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e07b      	b.n	8001c66 <HAL_USART_TransmitReceive+0x2fa>
        }
        if (ptxdata8bits == NULL)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10d      	bne.n	8001b90 <HAL_USART_TransmitReceive+0x224>
        {
          husart->Instance->TDR = (uint16_t)(*ptxdata16bits & uhMask);
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	2216      	movs	r2, #22
 8001b7a:	18ba      	adds	r2, r7, r2
 8001b7c:	8812      	ldrh	r2, [r2, #0]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
          ptxdata16bits++;
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	623b      	str	r3, [r7, #32]
 8001b8e:	e00d      	b.n	8001bac <HAL_USART_TransmitReceive+0x240>
        }
        else
        {
          husart->Instance->TDR = (uint8_t)(*ptxdata8bits & (uint8_t)(uhMask & 0xFFU));
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2216      	movs	r2, #22
 8001b96:	18ba      	adds	r2, r7, r2
 8001b98:	8812      	ldrh	r2, [r2, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
          ptxdata8bits++;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	3301      	adds	r3, #1
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
        }

        husart->TxXferCount--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      if (husart->RxXferCount > 0U)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d034      	beq.n	8001c2e <HAL_USART_TransmitReceive+0x2c2>
      {
        /* Wait for RXNE Flag */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	0013      	movs	r3, r2
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	f000 f84f 	bl	8001c74 <USART_WaitOnFlagUntilTimeout>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_USART_TransmitReceive+0x272>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e043      	b.n	8001c66 <HAL_USART_TransmitReceive+0x2fa>
        }

        if (prxdata8bits == NULL)
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10e      	bne.n	8001c02 <HAL_USART_TransmitReceive+0x296>
        {
          *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2216      	movs	r2, #22
 8001bee:	18ba      	adds	r2, r7, r2
 8001bf0:	8812      	ldrh	r2, [r2, #0]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	801a      	strh	r2, [r3, #0]
          prxdata16bits++;
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c00:	e00e      	b.n	8001c20 <HAL_USART_TransmitReceive+0x2b4>
        }
        else
        {
          *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2216      	movs	r2, #22
 8001c0c:	18ba      	adds	r2, r7, r2
 8001c0e:	8812      	ldrh	r2, [r2, #0]
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	4013      	ands	r3, r2
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	701a      	strb	r2, [r3, #0]
          prxdata8bits++;
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        husart->RxXferCount--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      rxdatacount = husart->RxXferCount;
 8001c2e:	231e      	movs	r3, #30
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001c36:	801a      	strh	r2, [r3, #0]
    while ((husart->TxXferCount > 0U) || (rxdatacount > 0U))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d000      	beq.n	8001c44 <HAL_USART_TransmitReceive+0x2d8>
 8001c42:	e782      	b.n	8001b4a <HAL_USART_TransmitReceive+0x1de>
 8001c44:	231e      	movs	r3, #30
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d000      	beq.n	8001c50 <HAL_USART_TransmitReceive+0x2e4>
 8001c4e:	e77c      	b.n	8001b4a <HAL_USART_TransmitReceive+0x1de>
    }

    /* At end of TxRx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2259      	movs	r2, #89	; 0x59
 8001c54:	2101      	movs	r1, #1
 8001c56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2258      	movs	r2, #88	; 0x58
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e000      	b.n	8001c66 <HAL_USART_TransmitReceive+0x2fa>
  }
  else
  {
    return HAL_BUSY;
 8001c64:	2302      	movs	r3, #2
  }
}
 8001c66:	0018      	movs	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b00c      	add	sp, #48	; 0x30
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	000001ff 	.word	0x000001ff

08001c74 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	1dfb      	adds	r3, r7, #7
 8001c82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001c84:	e017      	b.n	8001cb6 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	d014      	beq.n	8001cb6 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8c:	f7fe fdc2 	bl	8000814 <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d302      	bcc.n	8001ca2 <USART_WaitOnFlagUntilTimeout+0x2e>
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2259      	movs	r2, #89	; 0x59
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2258      	movs	r2, #88	; 0x58
 8001cae:	2100      	movs	r1, #0
 8001cb0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e00f      	b.n	8001cd6 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	425a      	negs	r2, r3
 8001cc6:	4153      	adcs	r3, r2
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	001a      	movs	r2, r3
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d0d8      	beq.n	8001c86 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b004      	add	sp, #16
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8001ce8:	231e      	movs	r3, #30
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	2280      	movs	r2, #128	; 0x80
 8001d06:	0212      	lsls	r2, r2, #8
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4ab1      	ldr	r2, [pc, #708]	; (8001fd8 <USART_SetConfig+0x2f8>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4aa2      	ldr	r2, [pc, #648]	; (8001fdc <USART_SetConfig+0x2fc>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	220f      	movs	r2, #15
 8001d6a:	4393      	bics	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a98      	ldr	r2, [pc, #608]	; (8001fe0 <USART_SetConfig+0x300>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d127      	bne.n	8001dd4 <USART_SetConfig+0xf4>
 8001d84:	4b97      	ldr	r3, [pc, #604]	; (8001fe4 <USART_SetConfig+0x304>)
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	2203      	movs	r2, #3
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d017      	beq.n	8001dc0 <USART_SetConfig+0xe0>
 8001d90:	d81b      	bhi.n	8001dca <USART_SetConfig+0xea>
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d00a      	beq.n	8001dac <USART_SetConfig+0xcc>
 8001d96:	d818      	bhi.n	8001dca <USART_SetConfig+0xea>
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <USART_SetConfig+0xc2>
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d00a      	beq.n	8001db6 <USART_SetConfig+0xd6>
 8001da0:	e013      	b.n	8001dca <USART_SetConfig+0xea>
 8001da2:	231f      	movs	r3, #31
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e058      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001dac:	231f      	movs	r3, #31
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2202      	movs	r2, #2
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	e053      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001db6:	231f      	movs	r3, #31
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2204      	movs	r2, #4
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	e04e      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001dc0:	231f      	movs	r3, #31
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e049      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001dca:	231f      	movs	r3, #31
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2210      	movs	r2, #16
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e044      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a83      	ldr	r2, [pc, #524]	; (8001fe8 <USART_SetConfig+0x308>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d127      	bne.n	8001e2e <USART_SetConfig+0x14e>
 8001dde:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <USART_SetConfig+0x304>)
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	220c      	movs	r2, #12
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d017      	beq.n	8001e1a <USART_SetConfig+0x13a>
 8001dea:	d81b      	bhi.n	8001e24 <USART_SetConfig+0x144>
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d00a      	beq.n	8001e06 <USART_SetConfig+0x126>
 8001df0:	d818      	bhi.n	8001e24 <USART_SetConfig+0x144>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <USART_SetConfig+0x11c>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d00a      	beq.n	8001e10 <USART_SetConfig+0x130>
 8001dfa:	e013      	b.n	8001e24 <USART_SetConfig+0x144>
 8001dfc:	231f      	movs	r3, #31
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e02b      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001e06:	231f      	movs	r3, #31
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	e026      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001e10:	231f      	movs	r3, #31
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	2204      	movs	r2, #4
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e021      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001e1a:	231f      	movs	r3, #31
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	2208      	movs	r2, #8
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e01c      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001e24:	231f      	movs	r3, #31
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2210      	movs	r2, #16
 8001e2a:	701a      	strb	r2, [r3, #0]
 8001e2c:	e017      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a6e      	ldr	r2, [pc, #440]	; (8001fec <USART_SetConfig+0x30c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d104      	bne.n	8001e42 <USART_SetConfig+0x162>
 8001e38:	231f      	movs	r3, #31
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	e00d      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6a      	ldr	r2, [pc, #424]	; (8001ff0 <USART_SetConfig+0x310>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d104      	bne.n	8001e56 <USART_SetConfig+0x176>
 8001e4c:	231f      	movs	r3, #31
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
 8001e54:	e003      	b.n	8001e5e <USART_SetConfig+0x17e>
 8001e56:	231f      	movs	r3, #31
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8001e5e:	231f      	movs	r3, #31
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d100      	bne.n	8001e6a <USART_SetConfig+0x18a>
 8001e68:	e139      	b.n	80020de <USART_SetConfig+0x3fe>
 8001e6a:	dd00      	ble.n	8001e6e <USART_SetConfig+0x18e>
 8001e6c:	e195      	b.n	800219a <USART_SetConfig+0x4ba>
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d100      	bne.n	8001e74 <USART_SetConfig+0x194>
 8001e72:	e0d3      	b.n	800201c <USART_SetConfig+0x33c>
 8001e74:	dd00      	ble.n	8001e78 <USART_SetConfig+0x198>
 8001e76:	e190      	b.n	800219a <USART_SetConfig+0x4ba>
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <USART_SetConfig+0x1a4>
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d100      	bne.n	8001e82 <USART_SetConfig+0x1a2>
 8001e80:	e061      	b.n	8001f46 <USART_SetConfig+0x266>
 8001e82:	e18a      	b.n	800219a <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e84:	f7ff fbd8 	bl	8001638 <HAL_RCC_GetPCLK1Freq>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d044      	beq.n	8001f1e <USART_SetConfig+0x23e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d03e      	beq.n	8001f1a <USART_SetConfig+0x23a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d038      	beq.n	8001f16 <USART_SetConfig+0x236>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d032      	beq.n	8001f12 <USART_SetConfig+0x232>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d02c      	beq.n	8001f0e <USART_SetConfig+0x22e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d026      	beq.n	8001f0a <USART_SetConfig+0x22a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d020      	beq.n	8001f06 <USART_SetConfig+0x226>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	2b07      	cmp	r3, #7
 8001eca:	d01a      	beq.n	8001f02 <USART_SetConfig+0x222>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d014      	beq.n	8001efe <USART_SetConfig+0x21e>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	2b09      	cmp	r3, #9
 8001eda:	d00e      	beq.n	8001efa <USART_SetConfig+0x21a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2b0a      	cmp	r3, #10
 8001ee2:	d008      	beq.n	8001ef6 <USART_SetConfig+0x216>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	2b0b      	cmp	r3, #11
 8001eea:	d102      	bne.n	8001ef2 <USART_SetConfig+0x212>
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	e016      	b.n	8001f20 <USART_SetConfig+0x240>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e014      	b.n	8001f20 <USART_SetConfig+0x240>
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	e012      	b.n	8001f20 <USART_SetConfig+0x240>
 8001efa:	2340      	movs	r3, #64	; 0x40
 8001efc:	e010      	b.n	8001f20 <USART_SetConfig+0x240>
 8001efe:	2320      	movs	r3, #32
 8001f00:	e00e      	b.n	8001f20 <USART_SetConfig+0x240>
 8001f02:	2310      	movs	r3, #16
 8001f04:	e00c      	b.n	8001f20 <USART_SetConfig+0x240>
 8001f06:	230c      	movs	r3, #12
 8001f08:	e00a      	b.n	8001f20 <USART_SetConfig+0x240>
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	e008      	b.n	8001f20 <USART_SetConfig+0x240>
 8001f0e:	2308      	movs	r3, #8
 8001f10:	e006      	b.n	8001f20 <USART_SetConfig+0x240>
 8001f12:	2306      	movs	r3, #6
 8001f14:	e004      	b.n	8001f20 <USART_SetConfig+0x240>
 8001f16:	2304      	movs	r3, #4
 8001f18:	e002      	b.n	8001f20 <USART_SetConfig+0x240>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e000      	b.n	8001f20 <USART_SetConfig+0x240>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	0019      	movs	r1, r3
 8001f22:	6938      	ldr	r0, [r7, #16]
 8001f24:	f7fe f8ec 	bl	8000100 <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	005a      	lsls	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	18d2      	adds	r2, r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	0019      	movs	r1, r3
 8001f3a:	0010      	movs	r0, r2
 8001f3c:	f7fe f8e0 	bl	8000100 <__udivsi3>
 8001f40:	0003      	movs	r3, r0
 8001f42:	61bb      	str	r3, [r7, #24]
      break;
 8001f44:	e12e      	b.n	80021a4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d052      	beq.n	8001ff4 <USART_SetConfig+0x314>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d03e      	beq.n	8001fd4 <USART_SetConfig+0x2f4>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d038      	beq.n	8001fd0 <USART_SetConfig+0x2f0>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d032      	beq.n	8001fcc <USART_SetConfig+0x2ec>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d02c      	beq.n	8001fc8 <USART_SetConfig+0x2e8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d026      	beq.n	8001fc4 <USART_SetConfig+0x2e4>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d020      	beq.n	8001fc0 <USART_SetConfig+0x2e0>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	2b07      	cmp	r3, #7
 8001f84:	d01a      	beq.n	8001fbc <USART_SetConfig+0x2dc>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d014      	beq.n	8001fb8 <USART_SetConfig+0x2d8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	d00e      	beq.n	8001fb4 <USART_SetConfig+0x2d4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	2b0a      	cmp	r3, #10
 8001f9c:	d008      	beq.n	8001fb0 <USART_SetConfig+0x2d0>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	2b0b      	cmp	r3, #11
 8001fa4:	d102      	bne.n	8001fac <USART_SetConfig+0x2cc>
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	e024      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e022      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	e020      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fb4:	2340      	movs	r3, #64	; 0x40
 8001fb6:	e01e      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fb8:	2320      	movs	r3, #32
 8001fba:	e01c      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fbc:	2310      	movs	r3, #16
 8001fbe:	e01a      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	e018      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fc4:	230a      	movs	r3, #10
 8001fc6:	e016      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fc8:	2308      	movs	r3, #8
 8001fca:	e014      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fcc:	2306      	movs	r3, #6
 8001fce:	e012      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e010      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e00e      	b.n	8001ff6 <USART_SetConfig+0x316>
 8001fd8:	cfff69f3 	.word	0xcfff69f3
 8001fdc:	ffffc0f6 	.word	0xffffc0f6
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40004400 	.word	0x40004400
 8001fec:	40004800 	.word	0x40004800
 8001ff0:	40004c00 	.word	0x40004c00
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	4886      	ldr	r0, [pc, #536]	; (8002214 <USART_SetConfig+0x534>)
 8001ffa:	f7fe f881 	bl	8000100 <__udivsi3>
 8001ffe:	0003      	movs	r3, r0
 8002000:	005a      	lsls	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	18d2      	adds	r2, r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	0019      	movs	r1, r3
 8002010:	0010      	movs	r0, r2
 8002012:	f7fe f875 	bl	8000100 <__udivsi3>
 8002016:	0003      	movs	r3, r0
 8002018:	61bb      	str	r3, [r7, #24]
      break;
 800201a:	e0c3      	b.n	80021a4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800201c:	f7ff fa80 	bl	8001520 <HAL_RCC_GetSysClockFreq>
 8002020:	0003      	movs	r3, r0
 8002022:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	2b00      	cmp	r3, #0
 800202a:	d044      	beq.n	80020b6 <USART_SetConfig+0x3d6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	2b01      	cmp	r3, #1
 8002032:	d03e      	beq.n	80020b2 <USART_SetConfig+0x3d2>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	2b02      	cmp	r3, #2
 800203a:	d038      	beq.n	80020ae <USART_SetConfig+0x3ce>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	2b03      	cmp	r3, #3
 8002042:	d032      	beq.n	80020aa <USART_SetConfig+0x3ca>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2b04      	cmp	r3, #4
 800204a:	d02c      	beq.n	80020a6 <USART_SetConfig+0x3c6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	2b05      	cmp	r3, #5
 8002052:	d026      	beq.n	80020a2 <USART_SetConfig+0x3c2>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2b06      	cmp	r3, #6
 800205a:	d020      	beq.n	800209e <USART_SetConfig+0x3be>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	2b07      	cmp	r3, #7
 8002062:	d01a      	beq.n	800209a <USART_SetConfig+0x3ba>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	2b08      	cmp	r3, #8
 800206a:	d014      	beq.n	8002096 <USART_SetConfig+0x3b6>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	2b09      	cmp	r3, #9
 8002072:	d00e      	beq.n	8002092 <USART_SetConfig+0x3b2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2b0a      	cmp	r3, #10
 800207a:	d008      	beq.n	800208e <USART_SetConfig+0x3ae>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	2b0b      	cmp	r3, #11
 8002082:	d102      	bne.n	800208a <USART_SetConfig+0x3aa>
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	e016      	b.n	80020b8 <USART_SetConfig+0x3d8>
 800208a:	2301      	movs	r3, #1
 800208c:	e014      	b.n	80020b8 <USART_SetConfig+0x3d8>
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	e012      	b.n	80020b8 <USART_SetConfig+0x3d8>
 8002092:	2340      	movs	r3, #64	; 0x40
 8002094:	e010      	b.n	80020b8 <USART_SetConfig+0x3d8>
 8002096:	2320      	movs	r3, #32
 8002098:	e00e      	b.n	80020b8 <USART_SetConfig+0x3d8>
 800209a:	2310      	movs	r3, #16
 800209c:	e00c      	b.n	80020b8 <USART_SetConfig+0x3d8>
 800209e:	230c      	movs	r3, #12
 80020a0:	e00a      	b.n	80020b8 <USART_SetConfig+0x3d8>
 80020a2:	230a      	movs	r3, #10
 80020a4:	e008      	b.n	80020b8 <USART_SetConfig+0x3d8>
 80020a6:	2308      	movs	r3, #8
 80020a8:	e006      	b.n	80020b8 <USART_SetConfig+0x3d8>
 80020aa:	2306      	movs	r3, #6
 80020ac:	e004      	b.n	80020b8 <USART_SetConfig+0x3d8>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e002      	b.n	80020b8 <USART_SetConfig+0x3d8>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e000      	b.n	80020b8 <USART_SetConfig+0x3d8>
 80020b6:	2301      	movs	r3, #1
 80020b8:	0019      	movs	r1, r3
 80020ba:	6938      	ldr	r0, [r7, #16]
 80020bc:	f7fe f820 	bl	8000100 <__udivsi3>
 80020c0:	0003      	movs	r3, r0
 80020c2:	005a      	lsls	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	085b      	lsrs	r3, r3, #1
 80020ca:	18d2      	adds	r2, r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	0019      	movs	r1, r3
 80020d2:	0010      	movs	r0, r2
 80020d4:	f7fe f814 	bl	8000100 <__udivsi3>
 80020d8:	0003      	movs	r3, r0
 80020da:	61bb      	str	r3, [r7, #24]
      break;
 80020dc:	e062      	b.n	80021a4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d044      	beq.n	8002170 <USART_SetConfig+0x490>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d03e      	beq.n	800216c <USART_SetConfig+0x48c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d038      	beq.n	8002168 <USART_SetConfig+0x488>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d032      	beq.n	8002164 <USART_SetConfig+0x484>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	2b04      	cmp	r3, #4
 8002104:	d02c      	beq.n	8002160 <USART_SetConfig+0x480>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	2b05      	cmp	r3, #5
 800210c:	d026      	beq.n	800215c <USART_SetConfig+0x47c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	2b06      	cmp	r3, #6
 8002114:	d020      	beq.n	8002158 <USART_SetConfig+0x478>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2b07      	cmp	r3, #7
 800211c:	d01a      	beq.n	8002154 <USART_SetConfig+0x474>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	2b08      	cmp	r3, #8
 8002124:	d014      	beq.n	8002150 <USART_SetConfig+0x470>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	2b09      	cmp	r3, #9
 800212c:	d00e      	beq.n	800214c <USART_SetConfig+0x46c>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	2b0a      	cmp	r3, #10
 8002134:	d008      	beq.n	8002148 <USART_SetConfig+0x468>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	2b0b      	cmp	r3, #11
 800213c:	d102      	bne.n	8002144 <USART_SetConfig+0x464>
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	e016      	b.n	8002172 <USART_SetConfig+0x492>
 8002144:	2301      	movs	r3, #1
 8002146:	e014      	b.n	8002172 <USART_SetConfig+0x492>
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	e012      	b.n	8002172 <USART_SetConfig+0x492>
 800214c:	2340      	movs	r3, #64	; 0x40
 800214e:	e010      	b.n	8002172 <USART_SetConfig+0x492>
 8002150:	2320      	movs	r3, #32
 8002152:	e00e      	b.n	8002172 <USART_SetConfig+0x492>
 8002154:	2310      	movs	r3, #16
 8002156:	e00c      	b.n	8002172 <USART_SetConfig+0x492>
 8002158:	230c      	movs	r3, #12
 800215a:	e00a      	b.n	8002172 <USART_SetConfig+0x492>
 800215c:	230a      	movs	r3, #10
 800215e:	e008      	b.n	8002172 <USART_SetConfig+0x492>
 8002160:	2308      	movs	r3, #8
 8002162:	e006      	b.n	8002172 <USART_SetConfig+0x492>
 8002164:	2306      	movs	r3, #6
 8002166:	e004      	b.n	8002172 <USART_SetConfig+0x492>
 8002168:	2304      	movs	r3, #4
 800216a:	e002      	b.n	8002172 <USART_SetConfig+0x492>
 800216c:	2302      	movs	r3, #2
 800216e:	e000      	b.n	8002172 <USART_SetConfig+0x492>
 8002170:	2301      	movs	r3, #1
 8002172:	0019      	movs	r1, r3
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	0218      	lsls	r0, r3, #8
 8002178:	f7fd ffc2 	bl	8000100 <__udivsi3>
 800217c:	0003      	movs	r3, r0
 800217e:	005a      	lsls	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	18d2      	adds	r2, r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	0019      	movs	r1, r3
 800218e:	0010      	movs	r0, r2
 8002190:	f7fd ffb6 	bl	8000100 <__udivsi3>
 8002194:	0003      	movs	r3, r0
 8002196:	61bb      	str	r3, [r7, #24]
      break;
 8002198:	e004      	b.n	80021a4 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800219a:	231e      	movs	r3, #30
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
      break;
 80021a2:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2b0f      	cmp	r3, #15
 80021a8:	d91c      	bls.n	80021e4 <USART_SetConfig+0x504>
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	025b      	lsls	r3, r3, #9
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d217      	bcs.n	80021e4 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	200e      	movs	r0, #14
 80021ba:	183b      	adds	r3, r7, r0
 80021bc:	210f      	movs	r1, #15
 80021be:	438a      	bics	r2, r1
 80021c0:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	085b      	lsrs	r3, r3, #1
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2207      	movs	r2, #7
 80021ca:	4013      	ands	r3, r2
 80021cc:	b299      	uxth	r1, r3
 80021ce:	183b      	adds	r3, r7, r0
 80021d0:	183a      	adds	r2, r7, r0
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	183a      	adds	r2, r7, r0
 80021de:	8812      	ldrh	r2, [r2, #0]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	e003      	b.n	80021ec <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 80021e4:	231e      	movs	r3, #30
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8002204:	231e      	movs	r3, #30
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b008      	add	sp, #32
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	00f42400 	.word	0x00f42400

08002218 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af02      	add	r7, sp, #8
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002226:	f7fe faf5 	bl	8000814 <HAL_GetTick>
 800222a:	0003      	movs	r3, r0
 800222c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2208      	movs	r2, #8
 8002236:	4013      	ands	r3, r2
 8002238:	2b08      	cmp	r3, #8
 800223a:	d10e      	bne.n	800225a <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	0399      	lsls	r1, r3, #14
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	23fa      	movs	r3, #250	; 0xfa
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	0013      	movs	r3, r2
 800224c:	2200      	movs	r2, #0
 800224e:	f7ff fd11 	bl	8001c74 <USART_WaitOnFlagUntilTimeout>
 8002252:	1e03      	subs	r3, r0, #0
 8002254:	d001      	beq.n	800225a <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e01e      	b.n	8002298 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2204      	movs	r2, #4
 8002262:	4013      	ands	r3, r2
 8002264:	2b04      	cmp	r3, #4
 8002266:	d10e      	bne.n	8002286 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	03d9      	lsls	r1, r3, #15
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	23fa      	movs	r3, #250	; 0xfa
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	0013      	movs	r3, r2
 8002278:	2200      	movs	r2, #0
 800227a:	f7ff fcfb 	bl	8001c74 <USART_WaitOnFlagUntilTimeout>
 800227e:	1e03      	subs	r3, r0, #0
 8002280:	d001      	beq.n	8002286 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e008      	b.n	8002298 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2259      	movs	r2, #89	; 0x59
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2258      	movs	r2, #88	; 0x58
 8002292:	2100      	movs	r1, #0
 8002294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b004      	add	sp, #16
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2258      	movs	r2, #88	; 0x58
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_USARTEx_DisableFifoMode+0x16>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e027      	b.n	8002306 <HAL_USARTEx_DisableFifoMode+0x66>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2258      	movs	r2, #88	; 0x58
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2259      	movs	r2, #89	; 0x59
 80022c2:	2102      	movs	r1, #2
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	438a      	bics	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <HAL_USARTEx_DisableFifoMode+0x70>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2259      	movs	r2, #89	; 0x59
 80022f8:	2101      	movs	r1, #1
 80022fa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2258      	movs	r2, #88	; 0x58
 8002300:	2100      	movs	r1, #0
 8002302:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b004      	add	sp, #16
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	dfffffff 	.word	0xdfffffff

08002314 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2258      	movs	r2, #88	; 0x58
 8002322:	5c9b      	ldrb	r3, [r3, r2]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8002328:	2302      	movs	r3, #2
 800232a:	e02e      	b.n	800238a <HAL_USARTEx_SetTxFifoThreshold+0x76>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2258      	movs	r2, #88	; 0x58
 8002330:	2101      	movs	r1, #1
 8002332:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2259      	movs	r2, #89	; 0x59
 8002338:	2102      	movs	r1, #2
 800233a:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2101      	movs	r1, #1
 8002350:	438a      	bics	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	08d9      	lsrs	r1, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	0018      	movs	r0, r3
 800236c:	f000 f854 	bl	8002418 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2259      	movs	r2, #89	; 0x59
 800237c:	2101      	movs	r1, #1
 800237e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2258      	movs	r2, #88	; 0x58
 8002384:	2100      	movs	r1, #0
 8002386:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b004      	add	sp, #16
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2258      	movs	r2, #88	; 0x58
 80023a2:	5c9b      	ldrb	r3, [r3, r2]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_USARTEx_SetRxFifoThreshold+0x18>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e02f      	b.n	800240c <HAL_USARTEx_SetRxFifoThreshold+0x78>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2258      	movs	r2, #88	; 0x58
 80023b0:	2101      	movs	r1, #1
 80023b2:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2259      	movs	r2, #89	; 0x59
 80023b8:	2102      	movs	r1, #2
 80023ba:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2101      	movs	r1, #1
 80023d0:	438a      	bics	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <HAL_USARTEx_SetRxFifoThreshold+0x80>)
 80023dc:	4013      	ands	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 f813 	bl	8002418 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2259      	movs	r2, #89	; 0x59
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2258      	movs	r2, #88	; 0x58
 8002406:	2100      	movs	r1, #0
 8002408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}
 8002414:	f1ffffff 	.word	0xf1ffffff

08002418 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8002418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002434:	e041      	b.n	80024ba <USARTEx_SetNbDataToProcess+0xa2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002436:	260f      	movs	r6, #15
 8002438:	19bb      	adds	r3, r7, r6
 800243a:	2208      	movs	r2, #8
 800243c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800243e:	200e      	movs	r0, #14
 8002440:	183b      	adds	r3, r7, r0
 8002442:	2208      	movs	r2, #8
 8002444:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800244c:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800244e:	b2da      	uxtb	r2, r3
 8002450:	240d      	movs	r4, #13
 8002452:	193b      	adds	r3, r7, r4
 8002454:	2107      	movs	r1, #7
 8002456:	400a      	ands	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8002460:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8002462:	b2da      	uxtb	r2, r3
 8002464:	250c      	movs	r5, #12
 8002466:	197b      	adds	r3, r7, r5
 8002468:	2107      	movs	r1, #7
 800246a:	400a      	ands	r2, r1
 800246c:	701a      	strb	r2, [r3, #0]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800246e:	183b      	adds	r3, r7, r0
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	197a      	adds	r2, r7, r5
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	4913      	ldr	r1, [pc, #76]	; (80024c4 <USARTEx_SetNbDataToProcess+0xac>)
 8002478:	5c8a      	ldrb	r2, [r1, r2]
 800247a:	435a      	muls	r2, r3
 800247c:	0010      	movs	r0, r2
                                (uint16_t)denominator[tx_fifo_threshold];
 800247e:	197b      	adds	r3, r7, r5
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <USARTEx_SetNbDataToProcess+0xb0>)
 8002484:	5cd3      	ldrb	r3, [r2, r3]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002486:	0019      	movs	r1, r3
 8002488:	f7fd fec4 	bl	8000214 <__divsi3>
 800248c:	0003      	movs	r3, r0
 800248e:	b29a      	uxth	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002494:	19bb      	adds	r3, r7, r6
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	193a      	adds	r2, r7, r4
 800249a:	7812      	ldrb	r2, [r2, #0]
 800249c:	4909      	ldr	r1, [pc, #36]	; (80024c4 <USARTEx_SetNbDataToProcess+0xac>)
 800249e:	5c8a      	ldrb	r2, [r1, r2]
 80024a0:	435a      	muls	r2, r3
 80024a2:	0010      	movs	r0, r2
                                (uint16_t)denominator[rx_fifo_threshold];
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <USARTEx_SetNbDataToProcess+0xb0>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80024ac:	0019      	movs	r1, r3
 80024ae:	f7fd feb1 	bl	8000214 <__divsi3>
 80024b2:	0003      	movs	r3, r0
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b005      	add	sp, #20
 80024c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	0800259c 	.word	0x0800259c
 80024c8:	080025a4 	.word	0x080025a4

080024cc <__libc_init_array>:
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	2600      	movs	r6, #0
 80024d0:	4d0c      	ldr	r5, [pc, #48]	; (8002504 <__libc_init_array+0x38>)
 80024d2:	4c0d      	ldr	r4, [pc, #52]	; (8002508 <__libc_init_array+0x3c>)
 80024d4:	1b64      	subs	r4, r4, r5
 80024d6:	10a4      	asrs	r4, r4, #2
 80024d8:	42a6      	cmp	r6, r4
 80024da:	d109      	bne.n	80024f0 <__libc_init_array+0x24>
 80024dc:	2600      	movs	r6, #0
 80024de:	f000 f821 	bl	8002524 <_init>
 80024e2:	4d0a      	ldr	r5, [pc, #40]	; (800250c <__libc_init_array+0x40>)
 80024e4:	4c0a      	ldr	r4, [pc, #40]	; (8002510 <__libc_init_array+0x44>)
 80024e6:	1b64      	subs	r4, r4, r5
 80024e8:	10a4      	asrs	r4, r4, #2
 80024ea:	42a6      	cmp	r6, r4
 80024ec:	d105      	bne.n	80024fa <__libc_init_array+0x2e>
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
 80024f0:	00b3      	lsls	r3, r6, #2
 80024f2:	58eb      	ldr	r3, [r5, r3]
 80024f4:	4798      	blx	r3
 80024f6:	3601      	adds	r6, #1
 80024f8:	e7ee      	b.n	80024d8 <__libc_init_array+0xc>
 80024fa:	00b3      	lsls	r3, r6, #2
 80024fc:	58eb      	ldr	r3, [r5, r3]
 80024fe:	4798      	blx	r3
 8002500:	3601      	adds	r6, #1
 8002502:	e7f2      	b.n	80024ea <__libc_init_array+0x1e>
 8002504:	080025ac 	.word	0x080025ac
 8002508:	080025ac 	.word	0x080025ac
 800250c:	080025ac 	.word	0x080025ac
 8002510:	080025b0 	.word	0x080025b0

08002514 <memset>:
 8002514:	0003      	movs	r3, r0
 8002516:	1882      	adds	r2, r0, r2
 8002518:	4293      	cmp	r3, r2
 800251a:	d100      	bne.n	800251e <memset+0xa>
 800251c:	4770      	bx	lr
 800251e:	7019      	strb	r1, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	e7f9      	b.n	8002518 <memset+0x4>

08002524 <_init>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr

08002530 <_fini>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002536:	bc08      	pop	{r3}
 8002538:	469e      	mov	lr, r3
 800253a:	4770      	bx	lr


UART_rxtx_Int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003afc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c3c  08003c3c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003c3c  08003c3c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c3c  08003c3c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c40  08003c40  00013c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000018  08003c5c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003c5c  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9f0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c57  00000000  00000000  0002ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002d688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000144d5  00000000  00000000  0002e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0ce  00000000  00000000  00042b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fe2a  00000000  00000000  0004dbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cda1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c08  00000000  00000000  000cda70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003b9c 	.word	0x08003b9c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	08003b9c 	.word	0x08003b9c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <HAL_UART_RxCpltCallback+0x28>)
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d106      	bne.n	800040a <HAL_UART_RxCpltCallback+0x1e>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_SET);
 80003fc:	23a0      	movs	r3, #160	; 0xa0
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	2201      	movs	r2, #1
 8000402:	2120      	movs	r1, #32
 8000404:	0018      	movs	r0, r3
 8000406:	f000 fdd1 	bl	8000fac <HAL_GPIO_WritePin>
	}
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b002      	add	sp, #8
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	20000034 	.word	0x20000034

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041c:	f000 fa0e 	bl	800083c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000420:	f000 f830 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000424:	f000 f8c4 	bl	80005b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000428:	f000 f874 	bl	8000514 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, uart_rx_it, sizeof(uart_rx_it));
 800042c:	4911      	ldr	r1, [pc, #68]	; (8000474 <main+0x5c>)
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <main+0x60>)
 8000430:	220a      	movs	r2, #10
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fd1e 	bl	8001e74 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000438:	23a0      	movs	r3, #160	; 0xa0
 800043a:	05db      	lsls	r3, r3, #23
 800043c:	2200      	movs	r2, #0
 800043e:	2120      	movs	r1, #32
 8000440:	0018      	movs	r0, r3
 8000442:	f000 fdb3 	bl	8000fac <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000446:	2064      	movs	r0, #100	; 0x64
 8000448:	f000 fa7e 	bl	8000948 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	01db      	lsls	r3, r3, #7
 8000450:	4a0a      	ldr	r2, [pc, #40]	; (800047c <main+0x64>)
 8000452:	0019      	movs	r1, r3
 8000454:	0010      	movs	r0, r2
 8000456:	f000 fdc6 	bl	8000fe6 <HAL_GPIO_TogglePin>

	  HAL_UART_Transmit(&huart2, uart_tx, sizeof(uart_tx), 100);
 800045a:	4909      	ldr	r1, [pc, #36]	; (8000480 <main+0x68>)
 800045c:	4806      	ldr	r0, [pc, #24]	; (8000478 <main+0x60>)
 800045e:	2364      	movs	r3, #100	; 0x64
 8000460:	220c      	movs	r2, #12
 8000462:	f001 fc6b 	bl	8001d3c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000466:	23fa      	movs	r3, #250	; 0xfa
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	0018      	movs	r0, r3
 800046c:	f000 fa6c 	bl	8000948 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000470:	e7e2      	b.n	8000438 <main+0x20>
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	200000c8 	.word	0x200000c8
 8000478:	20000034 	.word	0x20000034
 800047c:	50000400 	.word	0x50000400
 8000480:	20000000 	.word	0x20000000

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b093      	sub	sp, #76	; 0x4c
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	2414      	movs	r4, #20
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	2334      	movs	r3, #52	; 0x34
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f003 fb79 	bl	8003b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	0018      	movs	r0, r3
 800049e:	2310      	movs	r3, #16
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f003 fb72 	bl	8003b8c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fdb5 	bl	800101c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2202      	movs	r2, #2
 80004b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2280      	movs	r2, #128	; 0x80
 80004bc:	0052      	lsls	r2, r2, #1
 80004be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2240      	movs	r2, #64	; 0x40
 80004ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fded 	bl	80010b4 <HAL_RCC_OscConfig>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004de:	f000 f8c7 	bl	8000670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2207      	movs	r2, #7
 80004e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2100      	movs	r1, #0
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 f8e8 	bl	80016d4 <HAL_RCC_ClockConfig>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000508:	f000 f8b2 	bl	8000670 <Error_Handler>
  }
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b013      	add	sp, #76	; 0x4c
 8000512:	bd90      	pop	{r4, r7, pc}

08000514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 800051a:	4a24      	ldr	r2, [pc, #144]	; (80005ac <MX_USART2_UART_Init+0x98>)
 800051c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800051e:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 8000520:	22e1      	movs	r2, #225	; 0xe1
 8000522:	0252      	lsls	r2, r2, #9
 8000524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 8000558:	2200      	movs	r2, #0
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 800055e:	0018      	movs	r0, r3
 8000560:	f001 fb96 	bl	8001c90 <HAL_UART_Init>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000568:	f000 f882 	bl	8000670 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 800056e:	2100      	movs	r1, #0
 8000570:	0018      	movs	r0, r3
 8000572:	f003 fa07 	bl	8003984 <HAL_UARTEx_SetTxFifoThreshold>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800057a:	f000 f879 	bl	8000670 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 8000580:	2100      	movs	r1, #0
 8000582:	0018      	movs	r0, r3
 8000584:	f003 fa3e 	bl	8003a04 <HAL_UARTEx_SetRxFifoThreshold>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800058c:	f000 f870 	bl	8000670 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <MX_USART2_UART_Init+0x94>)
 8000592:	0018      	movs	r0, r3
 8000594:	f003 f9bc 	bl	8003910 <HAL_UARTEx_DisableFifoMode>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800059c:	f000 f868 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	20000034 	.word	0x20000034
 80005ac:	40004400 	.word	0x40004400

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b089      	sub	sp, #36	; 0x24
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	240c      	movs	r4, #12
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2314      	movs	r3, #20
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f003 fae3 	bl	8003b8c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	430a      	orrs	r2, r1
 80005d0:	635a      	str	r2, [r3, #52]	; 0x34
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d6:	2201      	movs	r2, #1
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005e4:	2102      	movs	r1, #2
 80005e6:	430a      	orrs	r2, r1
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_GPIO_Init+0xb8>)
 80005ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ee:	2202      	movs	r2, #2
 80005f0:	4013      	ands	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005f6:	23a0      	movs	r3, #160	; 0xa0
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	2200      	movs	r2, #0
 80005fc:	2120      	movs	r1, #32
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 fcd4 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	01db      	lsls	r3, r3, #7
 8000608:	4818      	ldr	r0, [pc, #96]	; (800066c <MX_GPIO_Init+0xbc>)
 800060a:	2200      	movs	r2, #0
 800060c:	0019      	movs	r1, r3
 800060e:	f000 fccd 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2220      	movs	r2, #32
 8000616:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2201      	movs	r2, #1
 800061c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	193a      	adds	r2, r7, r4
 800062c:	23a0      	movs	r3, #160	; 0xa0
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fb56 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000638:	0021      	movs	r1, r4
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2280      	movs	r2, #128	; 0x80
 800063e:	01d2      	lsls	r2, r2, #7
 8000640:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2201      	movs	r2, #1
 8000646:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	187b      	adds	r3, r7, r1
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <MX_GPIO_Init+0xbc>)
 8000658:	0019      	movs	r1, r3
 800065a:	0010      	movs	r0, r2
 800065c:	f000 fb42 	bl	8000ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b009      	add	sp, #36	; 0x24
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	40021000 	.word	0x40021000
 800066c:	50000400 	.word	0x50000400

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x44>)
 8000684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <HAL_MspInit+0x44>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	641a      	str	r2, [r3, #64]	; 0x40
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_MspInit+0x44>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_MspInit+0x44>)
 800069c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_MspInit+0x44>)
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	0549      	lsls	r1, r1, #21
 80006a4:	430a      	orrs	r2, r1
 80006a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_MspInit+0x44>)
 80006aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	055b      	lsls	r3, r3, #21
 80006b0:	4013      	ands	r3, r2
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b002      	add	sp, #8
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b091      	sub	sp, #68	; 0x44
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	232c      	movs	r3, #44	; 0x2c
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	0018      	movs	r0, r3
 80006d2:	2314      	movs	r3, #20
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f003 fa58 	bl	8003b8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006dc:	2410      	movs	r4, #16
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	0018      	movs	r0, r3
 80006e2:	231c      	movs	r3, #28
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f003 fa50 	bl	8003b8c <memset>
  if(huart->Instance==USART2)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a26      	ldr	r2, [pc, #152]	; (800078c <HAL_UART_MspInit+0xc8>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d146      	bne.n	8000784 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2202      	movs	r2, #2
 80006fa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	193b      	adds	r3, r7, r4
 8000704:	0018      	movs	r0, r3
 8000706:	f001 f98f 	bl	8001a28 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800070e:	f7ff ffaf 	bl	8000670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <HAL_UART_MspInit+0xcc>)
 8000714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <HAL_UART_MspInit+0xcc>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0289      	lsls	r1, r1, #10
 800071c:	430a      	orrs	r2, r1
 800071e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <HAL_UART_MspInit+0xcc>)
 8000722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	029b      	lsls	r3, r3, #10
 8000728:	4013      	ands	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <HAL_UART_MspInit+0xcc>)
 8000730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_UART_MspInit+0xcc>)
 8000734:	2101      	movs	r1, #1
 8000736:	430a      	orrs	r2, r1
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <HAL_UART_MspInit+0xcc>)
 800073c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073e:	2201      	movs	r2, #1
 8000740:	4013      	ands	r3, r2
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000746:	212c      	movs	r1, #44	; 0x2c
 8000748:	187b      	adds	r3, r7, r1
 800074a:	220c      	movs	r2, #12
 800074c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2202      	movs	r2, #2
 8000752:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2201      	movs	r2, #1
 8000764:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	187a      	adds	r2, r7, r1
 8000768:	23a0      	movs	r3, #160	; 0xa0
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fab8 	bl	8000ce4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	201c      	movs	r0, #28
 800077a:	f000 f9b5 	bl	8000ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800077e:	201c      	movs	r0, #28
 8000780:	f000 f9c7 	bl	8000b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b011      	add	sp, #68	; 0x44
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	40004400 	.word	0x40004400
 8000790:	40021000 	.word	0x40021000

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f8aa 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <USART2_IRQHandler+0x14>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 fbaa 	bl	8001f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	20000034 	.word	0x20000034

080007dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ec:	f7ff fff6 	bl	80007dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	; (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	; (8000834 <LoopForever+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000816:	f003 f995 	bl	8003b44 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800081a:	f7ff fdfd 	bl	8000418 <main>

0800081e <LoopForever>:

LoopForever:
  b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   r0, =_estack
 8000820:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800082c:	08003c44 	.word	0x08003c44
  ldr r2, =_sbss
 8000830:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000834:	200000d8 	.word	0x200000d8

08000838 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_IRQHandler>
	...

0800083c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_Init+0x3c>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <HAL_Init+0x3c>)
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	0049      	lsls	r1, r1, #1
 8000852:	430a      	orrs	r2, r1
 8000854:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000856:	2000      	movs	r0, #0
 8000858:	f000 f810 	bl	800087c <HAL_InitTick>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d003      	beq.n	8000868 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	e001      	b.n	800086c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff ff08 	bl	800067c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781b      	ldrb	r3, [r3, #0]
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40022000 	.word	0x40022000

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000884:	230f      	movs	r3, #15
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <HAL_InitTick+0x88>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d02b      	beq.n	80008ec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <HAL_InitTick+0x8c>)
 8000896:	681c      	ldr	r4, [r3, #0]
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <HAL_InitTick+0x88>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	0019      	movs	r1, r3
 800089e:	23fa      	movs	r3, #250	; 0xfa
 80008a0:	0098      	lsls	r0, r3, #2
 80008a2:	f7ff fc2d 	bl	8000100 <__udivsi3>
 80008a6:	0003      	movs	r3, r0
 80008a8:	0019      	movs	r1, r3
 80008aa:	0020      	movs	r0, r4
 80008ac:	f7ff fc28 	bl	8000100 <__udivsi3>
 80008b0:	0003      	movs	r3, r0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 f93d 	bl	8000b32 <HAL_SYSTICK_Config>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d112      	bne.n	80008e2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d80a      	bhi.n	80008d8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	2301      	movs	r3, #1
 80008c6:	425b      	negs	r3, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 f90c 	bl	8000ae8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_InitTick+0x90>)
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	e00d      	b.n	80008f4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008d8:	230f      	movs	r3, #15
 80008da:	18fb      	adds	r3, r7, r3
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	e008      	b.n	80008f4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e2:	230f      	movs	r3, #15
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	e003      	b.n	80008f4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ec:	230f      	movs	r3, #15
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008f4:	230f      	movs	r3, #15
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	781b      	ldrb	r3, [r3, #0]
}
 80008fa:	0018      	movs	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b005      	add	sp, #20
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	20000014 	.word	0x20000014
 8000908:	2000000c 	.word	0x2000000c
 800090c:	20000010 	.word	0x20000010

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_IncTick+0x1c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	001a      	movs	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	18d2      	adds	r2, r2, r3
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <HAL_IncTick+0x20>)
 8000922:	601a      	str	r2, [r3, #0]
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	20000014 	.word	0x20000014
 8000930:	200000d4 	.word	0x200000d4

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <HAL_GetTick+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	200000d4 	.word	0x200000d4

08000948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff fff0 	bl	8000934 <HAL_GetTick>
 8000954:	0003      	movs	r3, r0
 8000956:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3301      	adds	r3, #1
 8000960:	d005      	beq.n	800096e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_Delay+0x44>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	001a      	movs	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	189b      	adds	r3, r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	f7ff ffe0 	bl	8000934 <HAL_GetTick>
 8000974:	0002      	movs	r2, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8f7      	bhi.n	8000970 <HAL_Delay+0x28>
  {
  }
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b004      	add	sp, #16
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	20000014 	.word	0x20000014

08000990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	0002      	movs	r2, r0
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b7f      	cmp	r3, #127	; 0x7f
 80009a2:	d809      	bhi.n	80009b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	001a      	movs	r2, r3
 80009aa:	231f      	movs	r3, #31
 80009ac:	401a      	ands	r2, r3
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_EnableIRQ+0x30>)
 80009b0:	2101      	movs	r1, #1
 80009b2:	4091      	lsls	r1, r2
 80009b4:	000a      	movs	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	0002      	movs	r2, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b7f      	cmp	r3, #127	; 0x7f
 80009d8:	d828      	bhi.n	8000a2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009da:	4a2f      	ldr	r2, [pc, #188]	; (8000a98 <__NVIC_SetPriority+0xd4>)
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	33c0      	adds	r3, #192	; 0xc0
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	589b      	ldr	r3, [r3, r2]
 80009ea:	1dfa      	adds	r2, r7, #7
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	0011      	movs	r1, r2
 80009f0:	2203      	movs	r2, #3
 80009f2:	400a      	ands	r2, r1
 80009f4:	00d2      	lsls	r2, r2, #3
 80009f6:	21ff      	movs	r1, #255	; 0xff
 80009f8:	4091      	lsls	r1, r2
 80009fa:	000a      	movs	r2, r1
 80009fc:	43d2      	mvns	r2, r2
 80009fe:	401a      	ands	r2, r3
 8000a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	019b      	lsls	r3, r3, #6
 8000a06:	22ff      	movs	r2, #255	; 0xff
 8000a08:	401a      	ands	r2, r3
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2303      	movs	r3, #3
 8000a12:	4003      	ands	r3, r0
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a18:	481f      	ldr	r0, [pc, #124]	; (8000a98 <__NVIC_SetPriority+0xd4>)
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	430a      	orrs	r2, r1
 8000a24:	33c0      	adds	r3, #192	; 0xc0
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a2a:	e031      	b.n	8000a90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <__NVIC_SetPriority+0xd8>)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	0019      	movs	r1, r3
 8000a34:	230f      	movs	r3, #15
 8000a36:	400b      	ands	r3, r1
 8000a38:	3b08      	subs	r3, #8
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3306      	adds	r3, #6
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	18d3      	adds	r3, r2, r3
 8000a42:	3304      	adds	r3, #4
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	1dfa      	adds	r2, r7, #7
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	400a      	ands	r2, r1
 8000a50:	00d2      	lsls	r2, r2, #3
 8000a52:	21ff      	movs	r1, #255	; 0xff
 8000a54:	4091      	lsls	r1, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	019b      	lsls	r3, r3, #6
 8000a62:	22ff      	movs	r2, #255	; 0xff
 8000a64:	401a      	ands	r2, r3
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	4003      	ands	r3, r0
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <__NVIC_SetPriority+0xd8>)
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	001c      	movs	r4, r3
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	4023      	ands	r3, r4
 8000a80:	3b08      	subs	r3, #8
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	430a      	orrs	r2, r1
 8000a86:	3306      	adds	r3, #6
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	18c3      	adds	r3, r0, r3
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	601a      	str	r2, [r3, #0]
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b003      	add	sp, #12
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1e5a      	subs	r2, r3, #1
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	045b      	lsls	r3, r3, #17
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d301      	bcc.n	8000ab8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e010      	b.n	8000ada <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <SysTick_Config+0x44>)
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	3a01      	subs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	425b      	negs	r3, r3
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff ff7c 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x44>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x44>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	210f      	movs	r1, #15
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	1c02      	adds	r2, r0, #0
 8000af8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff ff5d 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	0002      	movs	r2, r0
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff ff33 	bl	8000990 <__NVIC_EnableIRQ>
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff ffaf 	bl	8000aa0 <SysTick_Config>
 8000b42:	0003      	movs	r3, r0
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b002      	add	sp, #8
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e050      	b.n	8000c00 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2225      	movs	r2, #37	; 0x25
 8000b62:	5c9b      	ldrb	r3, [r3, r2]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d008      	beq.n	8000b7c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2224      	movs	r2, #36	; 0x24
 8000b74:	2100      	movs	r1, #0
 8000b76:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e041      	b.n	8000c00 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	210e      	movs	r1, #14
 8000b88:	438a      	bics	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	491c      	ldr	r1, [pc, #112]	; (8000c08 <HAL_DMA_Abort+0xbc>)
 8000b98:	400a      	ands	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	438a      	bics	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_DMA_Abort+0xc0>)
 8000bae:	6859      	ldr	r1, [r3, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	221c      	movs	r2, #28
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2201      	movs	r2, #1
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_DMA_Abort+0xc0>)
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000bca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00c      	beq.n	8000bee <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bde:	490a      	ldr	r1, [pc, #40]	; (8000c08 <HAL_DMA_Abort+0xbc>)
 8000be0:	400a      	ands	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000bec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2225      	movs	r2, #37	; 0x25
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2224      	movs	r2, #36	; 0x24
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	fffffeff 	.word	0xfffffeff
 8000c0c:	40020000 	.word	0x40020000

08000c10 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c18:	210f      	movs	r1, #15
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2225      	movs	r2, #37	; 0x25
 8000c24:	5c9b      	ldrb	r3, [r3, r2]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d006      	beq.n	8000c3a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2204      	movs	r2, #4
 8000c30:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
 8000c38:	e049      	b.n	8000cce <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	210e      	movs	r1, #14
 8000c46:	438a      	bics	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	438a      	bics	r2, r1
 8000c58:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c64:	491d      	ldr	r1, [pc, #116]	; (8000cdc <HAL_DMA_Abort_IT+0xcc>)
 8000c66:	400a      	ands	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_DMA_Abort_IT+0xd0>)
 8000c6c:	6859      	ldr	r1, [r3, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	221c      	movs	r2, #28
 8000c74:	4013      	ands	r3, r2
 8000c76:	2201      	movs	r2, #1
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DMA_Abort_IT+0xd0>)
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000c88:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00c      	beq.n	8000cac <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c9c:	490f      	ldr	r1, [pc, #60]	; (8000cdc <HAL_DMA_Abort_IT+0xcc>)
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000caa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2225      	movs	r2, #37	; 0x25
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2224      	movs	r2, #36	; 0x24
 8000cb8:	2100      	movs	r1, #0
 8000cba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d004      	beq.n	8000cce <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	0010      	movs	r0, r2
 8000ccc:	4798      	blx	r3
    }
  }
  return status;
 8000cce:	230f      	movs	r3, #15
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	781b      	ldrb	r3, [r3, #0]
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b004      	add	sp, #16
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	fffffeff 	.word	0xfffffeff
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf2:	e147      	b.n	8000f84 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d100      	bne.n	8000d0c <HAL_GPIO_Init+0x28>
 8000d0a:	e138      	b.n	8000f7e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2203      	movs	r2, #3
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d005      	beq.n	8000d24 <HAL_GPIO_Init+0x40>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	409a      	lsls	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	409a      	lsls	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	2201      	movs	r2, #1
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d017      	beq.n	8000dc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d123      	bne.n	8000e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	58d3      	ldr	r3, [r2, r3]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2207      	movs	r2, #7
 8000de0:	4013      	ands	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	2107      	movs	r1, #7
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	6939      	ldr	r1, [r7, #16]
 8000e14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2203      	movs	r2, #3
 8000e34:	401a      	ands	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	23c0      	movs	r3, #192	; 0xc0
 8000e50:	029b      	lsls	r3, r3, #10
 8000e52:	4013      	ands	r3, r2
 8000e54:	d100      	bne.n	8000e58 <HAL_GPIO_Init+0x174>
 8000e56:	e092      	b.n	8000f7e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e58:	4a50      	ldr	r2, [pc, #320]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3318      	adds	r3, #24
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	589b      	ldr	r3, [r3, r2]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2203      	movs	r2, #3
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	220f      	movs	r2, #15
 8000e70:	409a      	lsls	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	43da      	mvns	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	23a0      	movs	r3, #160	; 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x1ca>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a45      	ldr	r2, [pc, #276]	; (8000fa0 <HAL_GPIO_Init+0x2bc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x1c6>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a44      	ldr	r2, [pc, #272]	; (8000fa4 <HAL_GPIO_Init+0x2c0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x1c2>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a43      	ldr	r2, [pc, #268]	; (8000fa8 <HAL_GPIO_Init+0x2c4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x1be>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	00d2      	lsls	r2, r2, #3
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ec0:	4936      	ldr	r1, [pc, #216]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3318      	adds	r3, #24
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	035b      	lsls	r3, r3, #13
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	039b      	lsls	r3, r3, #14
 8000f10:	4013      	ands	r3, r2
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f24:	2384      	movs	r3, #132	; 0x84
 8000f26:	58d3      	ldr	r3, [r2, r3]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	029b      	lsls	r3, r3, #10
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f48:	4914      	ldr	r1, [pc, #80]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f4a:	2284      	movs	r2, #132	; 0x84
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	58d3      	ldr	r3, [r2, r3]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	025b      	lsls	r3, r3, #9
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f76:	4909      	ldr	r1, [pc, #36]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	40da      	lsrs	r2, r3
 8000f8c:	1e13      	subs	r3, r2, #0
 8000f8e:	d000      	beq.n	8000f92 <HAL_GPIO_Init+0x2ae>
 8000f90:	e6b0      	b.n	8000cf4 <HAL_GPIO_Init+0x10>
  }
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b006      	add	sp, #24
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	50000400 	.word	0x50000400
 8000fa4:	50000800 	.word	0x50000800
 8000fa8:	50000c00 	.word	0x50000c00

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	0008      	movs	r0, r1
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	1cbb      	adds	r3, r7, #2
 8000fba:	1c02      	adds	r2, r0, #0
 8000fbc:	801a      	strh	r2, [r3, #0]
 8000fbe:	1c7b      	adds	r3, r7, #1
 8000fc0:	1c0a      	adds	r2, r1, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc4:	1c7b      	adds	r3, r7, #1
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fcc:	1cbb      	adds	r3, r7, #2
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd6:	1cbb      	adds	r3, r7, #2
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	000a      	movs	r2, r1
 8000ff0:	1cbb      	adds	r3, r7, #2
 8000ff2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ffa:	1cbb      	adds	r3, r7, #2
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4013      	ands	r3, r2
 8001002:	041a      	lsls	r2, r3, #16
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	1cb9      	adds	r1, r7, #2
 800100a:	8809      	ldrh	r1, [r1, #0]
 800100c:	400b      	ands	r3, r1
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b004      	add	sp, #16
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800102a:	4013      	ands	r3, r2
 800102c:	0019      	movs	r1, r3
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	429a      	cmp	r2, r3
 800103e:	d11f      	bne.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	0013      	movs	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	189b      	adds	r3, r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4912      	ldr	r1, [pc, #72]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff f856 	bl	8000100 <__udivsi3>
 8001054:	0003      	movs	r3, r0
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800105a:	e008      	b.n	800106e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3b01      	subs	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	e001      	b.n	800106e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e009      	b.n	8001082 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	401a      	ands	r2, r3
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	429a      	cmp	r2, r3
 800107e:	d0ed      	beq.n	800105c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b004      	add	sp, #16
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40007000 	.word	0x40007000
 8001090:	fffff9ff 	.word	0xfffff9ff
 8001094:	2000000c 	.word	0x2000000c
 8001098:	000f4240 	.word	0x000f4240

0800109c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	23e0      	movs	r3, #224	; 0xe0
 80010a6:	01db      	lsls	r3, r3, #7
 80010a8:	4013      	ands	r3, r2
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e2f3      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2201      	movs	r2, #1
 80010cc:	4013      	ands	r3, r2
 80010ce:	d100      	bne.n	80010d2 <HAL_RCC_OscConfig+0x1e>
 80010d0:	e07c      	b.n	80011cc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010d2:	4bc3      	ldr	r3, [pc, #780]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2238      	movs	r2, #56	; 0x38
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010dc:	4bc0      	ldr	r3, [pc, #768]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2203      	movs	r2, #3
 80010e2:	4013      	ands	r3, r2
 80010e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	2b10      	cmp	r3, #16
 80010ea:	d102      	bne.n	80010f2 <HAL_RCC_OscConfig+0x3e>
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d002      	beq.n	80010f8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d10b      	bne.n	8001110 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	4bb9      	ldr	r3, [pc, #740]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	029b      	lsls	r3, r3, #10
 8001100:	4013      	ands	r3, r2
 8001102:	d062      	beq.n	80011ca <HAL_RCC_OscConfig+0x116>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d15e      	bne.n	80011ca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e2ce      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	025b      	lsls	r3, r3, #9
 8001118:	429a      	cmp	r2, r3
 800111a:	d107      	bne.n	800112c <HAL_RCC_OscConfig+0x78>
 800111c:	4bb0      	ldr	r3, [pc, #704]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4baf      	ldr	r3, [pc, #700]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001122:	2180      	movs	r1, #128	; 0x80
 8001124:	0249      	lsls	r1, r1, #9
 8001126:	430a      	orrs	r2, r1
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e020      	b.n	800116e <HAL_RCC_OscConfig+0xba>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	23a0      	movs	r3, #160	; 0xa0
 8001132:	02db      	lsls	r3, r3, #11
 8001134:	429a      	cmp	r2, r3
 8001136:	d10e      	bne.n	8001156 <HAL_RCC_OscConfig+0xa2>
 8001138:	4ba9      	ldr	r3, [pc, #676]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4ba8      	ldr	r3, [pc, #672]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	02c9      	lsls	r1, r1, #11
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	4ba6      	ldr	r3, [pc, #664]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4ba5      	ldr	r3, [pc, #660]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	0249      	lsls	r1, r1, #9
 8001150:	430a      	orrs	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e00b      	b.n	800116e <HAL_RCC_OscConfig+0xba>
 8001156:	4ba2      	ldr	r3, [pc, #648]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4ba1      	ldr	r3, [pc, #644]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 800115c:	49a1      	ldr	r1, [pc, #644]	; (80013e4 <HAL_RCC_OscConfig+0x330>)
 800115e:	400a      	ands	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	4b9f      	ldr	r3, [pc, #636]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b9e      	ldr	r3, [pc, #632]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001168:	499f      	ldr	r1, [pc, #636]	; (80013e8 <HAL_RCC_OscConfig+0x334>)
 800116a:	400a      	ands	r2, r1
 800116c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d014      	beq.n	80011a0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001176:	f7ff fbdd 	bl	8000934 <HAL_GetTick>
 800117a:	0003      	movs	r3, r0
 800117c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fbd8 	bl	8000934 <HAL_GetTick>
 8001184:	0002      	movs	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e28d      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001192:	4b93      	ldr	r3, [pc, #588]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	029b      	lsls	r3, r3, #10
 800119a:	4013      	ands	r3, r2
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0xcc>
 800119e:	e015      	b.n	80011cc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a0:	f7ff fbc8 	bl	8000934 <HAL_GetTick>
 80011a4:	0003      	movs	r3, r0
 80011a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011aa:	f7ff fbc3 	bl	8000934 <HAL_GetTick>
 80011ae:	0002      	movs	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b64      	cmp	r3, #100	; 0x64
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e278      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011bc:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	029b      	lsls	r3, r3, #10
 80011c4:	4013      	ands	r3, r2
 80011c6:	d1f0      	bne.n	80011aa <HAL_RCC_OscConfig+0xf6>
 80011c8:	e000      	b.n	80011cc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2202      	movs	r2, #2
 80011d2:	4013      	ands	r3, r2
 80011d4:	d100      	bne.n	80011d8 <HAL_RCC_OscConfig+0x124>
 80011d6:	e099      	b.n	800130c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d8:	4b81      	ldr	r3, [pc, #516]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2238      	movs	r2, #56	; 0x38
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e2:	4b7f      	ldr	r3, [pc, #508]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2203      	movs	r2, #3
 80011e8:	4013      	ands	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d102      	bne.n	80011f8 <HAL_RCC_OscConfig+0x144>
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d002      	beq.n	80011fe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d135      	bne.n	800126a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011fe:	4b78      	ldr	r3, [pc, #480]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4013      	ands	r3, r2
 8001208:	d005      	beq.n	8001216 <HAL_RCC_OscConfig+0x162>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e24b      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b72      	ldr	r3, [pc, #456]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a74      	ldr	r2, [pc, #464]	; (80013ec <HAL_RCC_OscConfig+0x338>)
 800121c:	4013      	ands	r3, r2
 800121e:	0019      	movs	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	021a      	lsls	r2, r3, #8
 8001226:	4b6e      	ldr	r3, [pc, #440]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001228:	430a      	orrs	r2, r1
 800122a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d112      	bne.n	8001258 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001232:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a6e      	ldr	r2, [pc, #440]	; (80013f0 <HAL_RCC_OscConfig+0x33c>)
 8001238:	4013      	ands	r3, r2
 800123a:	0019      	movs	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001242:	430a      	orrs	r2, r1
 8001244:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001246:	4b66      	ldr	r3, [pc, #408]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	0adb      	lsrs	r3, r3, #11
 800124c:	2207      	movs	r2, #7
 800124e:	4013      	ands	r3, r2
 8001250:	4a68      	ldr	r2, [pc, #416]	; (80013f4 <HAL_RCC_OscConfig+0x340>)
 8001252:	40da      	lsrs	r2, r3
 8001254:	4b68      	ldr	r3, [pc, #416]	; (80013f8 <HAL_RCC_OscConfig+0x344>)
 8001256:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001258:	4b68      	ldr	r3, [pc, #416]	; (80013fc <HAL_RCC_OscConfig+0x348>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff fb0d 	bl	800087c <HAL_InitTick>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d051      	beq.n	800130a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e221      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d030      	beq.n	80012d4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001272:	4b5b      	ldr	r3, [pc, #364]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a5e      	ldr	r2, [pc, #376]	; (80013f0 <HAL_RCC_OscConfig+0x33c>)
 8001278:	4013      	ands	r3, r2
 800127a:	0019      	movs	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001286:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	0049      	lsls	r1, r1, #1
 8001290:	430a      	orrs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff fb4e 	bl	8000934 <HAL_GetTick>
 8001298:	0003      	movs	r3, r0
 800129a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fb49 	bl	8000934 <HAL_GetTick>
 80012a2:	0002      	movs	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e1fe      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b0:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4013      	ands	r3, r2
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4b48      	ldr	r3, [pc, #288]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a4a      	ldr	r2, [pc, #296]	; (80013ec <HAL_RCC_OscConfig+0x338>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	0019      	movs	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	021a      	lsls	r2, r3, #8
 80012cc:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80012ce:	430a      	orrs	r2, r1
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	e01b      	b.n	800130c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80012d4:	4b42      	ldr	r3, [pc, #264]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80012da:	4949      	ldr	r1, [pc, #292]	; (8001400 <HAL_RCC_OscConfig+0x34c>)
 80012dc:	400a      	ands	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fb28 	bl	8000934 <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff fb23 	bl	8000934 <HAL_GetTick>
 80012ee:	0002      	movs	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e1d8      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012fc:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4013      	ands	r3, r2
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x236>
 8001308:	e000      	b.n	800130c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800130a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2208      	movs	r2, #8
 8001312:	4013      	ands	r3, r2
 8001314:	d047      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2238      	movs	r2, #56	; 0x38
 800131c:	4013      	ands	r3, r2
 800131e:	2b18      	cmp	r3, #24
 8001320:	d10a      	bne.n	8001338 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001326:	2202      	movs	r2, #2
 8001328:	4013      	ands	r3, r2
 800132a:	d03c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2f2>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d138      	bne.n	80013a6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e1ba      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d019      	beq.n	8001374 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001342:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001346:	2101      	movs	r1, #1
 8001348:	430a      	orrs	r2, r1
 800134a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff faf2 	bl	8000934 <HAL_GetTick>
 8001350:	0003      	movs	r3, r0
 8001352:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff faed 	bl	8000934 <HAL_GetTick>
 800135a:	0002      	movs	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1a2      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 800136a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136c:	2202      	movs	r2, #2
 800136e:	4013      	ands	r3, r2
 8001370:	d0f1      	beq.n	8001356 <HAL_RCC_OscConfig+0x2a2>
 8001372:	e018      	b.n	80013a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 8001376:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 800137a:	2101      	movs	r1, #1
 800137c:	438a      	bics	r2, r1
 800137e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fad8 	bl	8000934 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138a:	f7ff fad3 	bl	8000934 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e188      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 800139e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a0:	2202      	movs	r2, #2
 80013a2:	4013      	ands	r3, r2
 80013a4:	d1f1      	bne.n	800138a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2204      	movs	r2, #4
 80013ac:	4013      	ands	r3, r2
 80013ae:	d100      	bne.n	80013b2 <HAL_RCC_OscConfig+0x2fe>
 80013b0:	e0c6      	b.n	8001540 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b2:	231f      	movs	r3, #31
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2238      	movs	r2, #56	; 0x38
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d11e      	bne.n	8001404 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_RCC_OscConfig+0x32c>)
 80013c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ca:	2202      	movs	r2, #2
 80013cc:	4013      	ands	r3, r2
 80013ce:	d100      	bne.n	80013d2 <HAL_RCC_OscConfig+0x31e>
 80013d0:	e0b6      	b.n	8001540 <HAL_RCC_OscConfig+0x48c>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d000      	beq.n	80013dc <HAL_RCC_OscConfig+0x328>
 80013da:	e0b1      	b.n	8001540 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e166      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
 80013e0:	40021000 	.word	0x40021000
 80013e4:	fffeffff 	.word	0xfffeffff
 80013e8:	fffbffff 	.word	0xfffbffff
 80013ec:	ffff80ff 	.word	0xffff80ff
 80013f0:	ffffc7ff 	.word	0xffffc7ff
 80013f4:	00f42400 	.word	0x00f42400
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	20000010 	.word	0x20000010
 8001400:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001404:	4bac      	ldr	r3, [pc, #688]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 8001406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	055b      	lsls	r3, r3, #21
 800140c:	4013      	ands	r3, r2
 800140e:	d101      	bne.n	8001414 <HAL_RCC_OscConfig+0x360>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <HAL_RCC_OscConfig+0x362>
 8001414:	2300      	movs	r3, #0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d011      	beq.n	800143e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4ba7      	ldr	r3, [pc, #668]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 800141c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800141e:	4ba6      	ldr	r3, [pc, #664]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	0549      	lsls	r1, r1, #21
 8001424:	430a      	orrs	r2, r1
 8001426:	63da      	str	r2, [r3, #60]	; 0x3c
 8001428:	4ba3      	ldr	r3, [pc, #652]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 800142a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	055b      	lsls	r3, r3, #21
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001436:	231f      	movs	r3, #31
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800143e:	4b9f      	ldr	r3, [pc, #636]	; (80016bc <HAL_RCC_OscConfig+0x608>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4013      	ands	r3, r2
 8001448:	d11a      	bne.n	8001480 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800144a:	4b9c      	ldr	r3, [pc, #624]	; (80016bc <HAL_RCC_OscConfig+0x608>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b9b      	ldr	r3, [pc, #620]	; (80016bc <HAL_RCC_OscConfig+0x608>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0049      	lsls	r1, r1, #1
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001458:	f7ff fa6c 	bl	8000934 <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001462:	f7ff fa67 	bl	8000934 <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e11c      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001474:	4b91      	ldr	r3, [pc, #580]	; (80016bc <HAL_RCC_OscConfig+0x608>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4013      	ands	r3, r2
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d106      	bne.n	8001496 <HAL_RCC_OscConfig+0x3e2>
 8001488:	4b8b      	ldr	r3, [pc, #556]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 800148a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800148c:	4b8a      	ldr	r3, [pc, #552]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 800148e:	2101      	movs	r1, #1
 8001490:	430a      	orrs	r2, r1
 8001492:	65da      	str	r2, [r3, #92]	; 0x5c
 8001494:	e01c      	b.n	80014d0 <HAL_RCC_OscConfig+0x41c>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b05      	cmp	r3, #5
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x404>
 800149e:	4b86      	ldr	r3, [pc, #536]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80014a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014a2:	4b85      	ldr	r3, [pc, #532]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80014a4:	2104      	movs	r1, #4
 80014a6:	430a      	orrs	r2, r1
 80014a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80014aa:	4b83      	ldr	r3, [pc, #524]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80014ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014ae:	4b82      	ldr	r3, [pc, #520]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	430a      	orrs	r2, r1
 80014b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0x41c>
 80014b8:	4b7f      	ldr	r3, [pc, #508]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80014ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014bc:	4b7e      	ldr	r3, [pc, #504]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80014be:	2101      	movs	r1, #1
 80014c0:	438a      	bics	r2, r1
 80014c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80014c4:	4b7c      	ldr	r3, [pc, #496]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80014c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014c8:	4b7b      	ldr	r3, [pc, #492]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80014ca:	2104      	movs	r1, #4
 80014cc:	438a      	bics	r2, r1
 80014ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d014      	beq.n	8001502 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fa2c 	bl	8000934 <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014e0:	e009      	b.n	80014f6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f7ff fa27 	bl	8000934 <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	4a74      	ldr	r2, [pc, #464]	; (80016c0 <HAL_RCC_OscConfig+0x60c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e0db      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014f6:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80014f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fa:	2202      	movs	r2, #2
 80014fc:	4013      	ands	r3, r2
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x42e>
 8001500:	e013      	b.n	800152a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff fa17 	bl	8000934 <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800150a:	e009      	b.n	8001520 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fa12 	bl	8000934 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	4a6a      	ldr	r2, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x60c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0c6      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001520:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800152a:	231f      	movs	r3, #31
 800152c:	18fb      	adds	r3, r7, r3
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d105      	bne.n	8001540 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001534:	4b60      	ldr	r3, [pc, #384]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 8001536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001538:	4b5f      	ldr	r3, [pc, #380]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 800153a:	4962      	ldr	r1, [pc, #392]	; (80016c4 <HAL_RCC_OscConfig+0x610>)
 800153c:	400a      	ands	r2, r1
 800153e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d100      	bne.n	800154a <HAL_RCC_OscConfig+0x496>
 8001548:	e0b0      	b.n	80016ac <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800154a:	4b5b      	ldr	r3, [pc, #364]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2238      	movs	r2, #56	; 0x38
 8001550:	4013      	ands	r3, r2
 8001552:	2b10      	cmp	r3, #16
 8001554:	d100      	bne.n	8001558 <HAL_RCC_OscConfig+0x4a4>
 8001556:	e078      	b.n	800164a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d153      	bne.n	8001608 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001560:	4b55      	ldr	r3, [pc, #340]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b54      	ldr	r3, [pc, #336]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 8001566:	4958      	ldr	r1, [pc, #352]	; (80016c8 <HAL_RCC_OscConfig+0x614>)
 8001568:	400a      	ands	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff f9e2 	bl	8000934 <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff f9dd 	bl	8000934 <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e092      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001588:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	049b      	lsls	r3, r3, #18
 8001590:	4013      	ands	r3, r2
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001594:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4a4c      	ldr	r2, [pc, #304]	; (80016cc <HAL_RCC_OscConfig+0x618>)
 800159a:	4013      	ands	r3, r2
 800159c:	0019      	movs	r1, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1a      	ldr	r2, [r3, #32]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	431a      	orrs	r2, r3
 80015bc:	4b3e      	ldr	r3, [pc, #248]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80015be:	430a      	orrs	r2, r1
 80015c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0449      	lsls	r1, r1, #17
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	0549      	lsls	r1, r1, #21
 80015da:	430a      	orrs	r2, r1
 80015dc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff f9a9 	bl	8000934 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff f9a4 	bl	8000934 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e059      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fa:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	049b      	lsls	r3, r3, #18
 8001602:	4013      	ands	r3, r2
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x534>
 8001606:	e051      	b.n	80016ac <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 800160e:	492e      	ldr	r1, [pc, #184]	; (80016c8 <HAL_RCC_OscConfig+0x614>)
 8001610:	400a      	ands	r2, r1
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff f98e 	bl	8000934 <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff f989 	bl	8000934 <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e03e      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	049b      	lsls	r3, r3, #18
 8001638:	4013      	ands	r3, r2
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 8001642:	4923      	ldr	r1, [pc, #140]	; (80016d0 <HAL_RCC_OscConfig+0x61c>)
 8001644:	400a      	ands	r2, r1
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	e030      	b.n	80016ac <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e02b      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_RCC_OscConfig+0x604>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2203      	movs	r2, #3
 8001660:	401a      	ands	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	429a      	cmp	r2, r3
 8001668:	d11e      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2270      	movs	r2, #112	; 0x70
 800166e:	401a      	ands	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d117      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	23fe      	movs	r3, #254	; 0xfe
 800167c:	01db      	lsls	r3, r3, #7
 800167e:	401a      	ands	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d10e      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	23f8      	movs	r3, #248	; 0xf8
 800168e:	039b      	lsls	r3, r3, #14
 8001690:	401a      	ands	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d106      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	0f5b      	lsrs	r3, r3, #29
 800169e:	075a      	lsls	r2, r3, #29
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b008      	add	sp, #32
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40007000 	.word	0x40007000
 80016c0:	00001388 	.word	0x00001388
 80016c4:	efffffff 	.word	0xefffffff
 80016c8:	feffffff 	.word	0xfeffffff
 80016cc:	1fc1808c 	.word	0x1fc1808c
 80016d0:	effefffc 	.word	0xeffefffc

080016d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0e9      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e8:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <HAL_RCC_ClockConfig+0x1f0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2207      	movs	r2, #7
 80016ee:	4013      	ands	r3, r2
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d91e      	bls.n	8001734 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b73      	ldr	r3, [pc, #460]	; (80018c4 <HAL_RCC_ClockConfig+0x1f0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2207      	movs	r2, #7
 80016fc:	4393      	bics	r3, r2
 80016fe:	0019      	movs	r1, r3
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001708:	f7ff f914 	bl	8000934 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001710:	e009      	b.n	8001726 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001712:	f7ff f90f 	bl	8000934 <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	4a6a      	ldr	r2, [pc, #424]	; (80018c8 <HAL_RCC_ClockConfig+0x1f4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e0ca      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001726:	4b67      	ldr	r3, [pc, #412]	; (80018c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2207      	movs	r2, #7
 800172c:	4013      	ands	r3, r2
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d1ee      	bne.n	8001712 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2202      	movs	r2, #2
 800173a:	4013      	ands	r3, r2
 800173c:	d015      	beq.n	800176a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2204      	movs	r2, #4
 8001744:	4013      	ands	r3, r2
 8001746:	d006      	beq.n	8001756 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001748:	4b60      	ldr	r3, [pc, #384]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 800174e:	21e0      	movs	r1, #224	; 0xe0
 8001750:	01c9      	lsls	r1, r1, #7
 8001752:	430a      	orrs	r2, r1
 8001754:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001756:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	4a5d      	ldr	r2, [pc, #372]	; (80018d0 <HAL_RCC_ClockConfig+0x1fc>)
 800175c:	4013      	ands	r3, r2
 800175e:	0019      	movs	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 8001766:	430a      	orrs	r2, r1
 8001768:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	4013      	ands	r3, r2
 8001772:	d057      	beq.n	8001824 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d107      	bne.n	800178c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	029b      	lsls	r3, r3, #10
 8001784:	4013      	ands	r3, r2
 8001786:	d12b      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e097      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d107      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001794:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	049b      	lsls	r3, r3, #18
 800179c:	4013      	ands	r3, r2
 800179e:	d11f      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e08b      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ac:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4013      	ands	r3, r2
 80017b6:	d113      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e07f      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 80017c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c8:	2202      	movs	r2, #2
 80017ca:	4013      	ands	r3, r2
 80017cc:	d108      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e074      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d2:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	2202      	movs	r2, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e06d      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017e0:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2207      	movs	r2, #7
 80017e6:	4393      	bics	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 80017f0:	430a      	orrs	r2, r1
 80017f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017f4:	f7ff f89e 	bl	8000934 <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fc:	e009      	b.n	8001812 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fe:	f7ff f899 	bl	8000934 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	4a2f      	ldr	r2, [pc, #188]	; (80018c8 <HAL_RCC_ClockConfig+0x1f4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e054      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2238      	movs	r2, #56	; 0x38
 8001818:	401a      	ands	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	429a      	cmp	r2, r3
 8001822:	d1ec      	bne.n	80017fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001824:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2207      	movs	r2, #7
 800182a:	4013      	ands	r3, r2
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d21e      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2207      	movs	r2, #7
 8001838:	4393      	bics	r3, r2
 800183a:	0019      	movs	r1, r3
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_RCC_ClockConfig+0x1f0>)
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001844:	f7ff f876 	bl	8000934 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800184c:	e009      	b.n	8001862 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184e:	f7ff f871 	bl	8000934 <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <HAL_RCC_ClockConfig+0x1f4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e02c      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2207      	movs	r2, #7
 8001868:	4013      	ands	r3, r2
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d1ee      	bne.n	800184e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2204      	movs	r2, #4
 8001876:	4013      	ands	r3, r2
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <HAL_RCC_ClockConfig+0x200>)
 8001880:	4013      	ands	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800188e:	f000 f829 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 8001892:	0001      	movs	r1, r0
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	220f      	movs	r2, #15
 800189c:	401a      	ands	r2, r3
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_RCC_ClockConfig+0x204>)
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	58d3      	ldr	r3, [r2, r3]
 80018a4:	221f      	movs	r2, #31
 80018a6:	4013      	ands	r3, r2
 80018a8:	000a      	movs	r2, r1
 80018aa:	40da      	lsrs	r2, r3
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x208>)
 80018ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x20c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7fe ffe1 	bl	800087c <HAL_InitTick>
 80018ba:	0003      	movs	r3, r0
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b004      	add	sp, #16
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40022000 	.word	0x40022000
 80018c8:	00001388 	.word	0x00001388
 80018cc:	40021000 	.word	0x40021000
 80018d0:	fffff0ff 	.word	0xfffff0ff
 80018d4:	ffff8fff 	.word	0xffff8fff
 80018d8:	08003bb4 	.word	0x08003bb4
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	20000010 	.word	0x20000010

080018e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ea:	4b3c      	ldr	r3, [pc, #240]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2238      	movs	r2, #56	; 0x38
 80018f0:	4013      	ands	r3, r2
 80018f2:	d10f      	bne.n	8001914 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018f4:	4b39      	ldr	r3, [pc, #228]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0adb      	lsrs	r3, r3, #11
 80018fa:	2207      	movs	r2, #7
 80018fc:	4013      	ands	r3, r2
 80018fe:	2201      	movs	r2, #1
 8001900:	409a      	lsls	r2, r3
 8001902:	0013      	movs	r3, r2
 8001904:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	4835      	ldr	r0, [pc, #212]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800190a:	f7fe fbf9 	bl	8000100 <__udivsi3>
 800190e:	0003      	movs	r3, r0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	e05d      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2238      	movs	r2, #56	; 0x38
 800191a:	4013      	ands	r3, r2
 800191c:	2b08      	cmp	r3, #8
 800191e:	d102      	bne.n	8001926 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001920:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	e054      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001926:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2238      	movs	r2, #56	; 0x38
 800192c:	4013      	ands	r3, r2
 800192e:	2b10      	cmp	r3, #16
 8001930:	d138      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2203      	movs	r2, #3
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	2207      	movs	r2, #7
 8001944:	4013      	ands	r3, r2
 8001946:	3301      	adds	r3, #1
 8001948:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d10d      	bne.n	800196c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	4824      	ldr	r0, [pc, #144]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001954:	f7fe fbd4 	bl	8000100 <__udivsi3>
 8001958:	0003      	movs	r3, r0
 800195a:	0019      	movs	r1, r3
 800195c:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	227f      	movs	r2, #127	; 0x7f
 8001964:	4013      	ands	r3, r2
 8001966:	434b      	muls	r3, r1
 8001968:	617b      	str	r3, [r7, #20]
        break;
 800196a:	e00d      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	481c      	ldr	r0, [pc, #112]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001970:	f7fe fbc6 	bl	8000100 <__udivsi3>
 8001974:	0003      	movs	r3, r0
 8001976:	0019      	movs	r1, r3
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	227f      	movs	r2, #127	; 0x7f
 8001980:	4013      	ands	r3, r2
 8001982:	434b      	muls	r3, r1
 8001984:	617b      	str	r3, [r7, #20]
        break;
 8001986:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0f5b      	lsrs	r3, r3, #29
 800198e:	2207      	movs	r2, #7
 8001990:	4013      	ands	r3, r2
 8001992:	3301      	adds	r3, #1
 8001994:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	6978      	ldr	r0, [r7, #20]
 800199a:	f7fe fbb1 	bl	8000100 <__udivsi3>
 800199e:	0003      	movs	r3, r0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	e015      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2238      	movs	r2, #56	; 0x38
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d103      	bne.n	80019b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2238      	movs	r2, #56	; 0x38
 80019be:	4013      	ands	r3, r2
 80019c0:	2b18      	cmp	r3, #24
 80019c2:	d103      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019c4:	23fa      	movs	r3, #250	; 0xfa
 80019c6:	01db      	lsls	r3, r3, #7
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e001      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019d0:	693b      	ldr	r3, [r7, #16]
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b006      	add	sp, #24
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	40021000 	.word	0x40021000
 80019e0:	00f42400 	.word	0x00f42400
 80019e4:	007a1200 	.word	0x007a1200

080019e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ec:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	2000000c 	.word	0x2000000c

080019fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019fc:	b5b0      	push	{r4, r5, r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a00:	f7ff fff2 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a04:	0004      	movs	r4, r0
 8001a06:	f7ff fb49 	bl	800109c <LL_RCC_GetAPB1Prescaler>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	0b1a      	lsrs	r2, r3, #12
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	58d3      	ldr	r3, [r2, r3]
 8001a14:	221f      	movs	r2, #31
 8001a16:	4013      	ands	r3, r2
 8001a18:	40dc      	lsrs	r4, r3
 8001a1a:	0023      	movs	r3, r4
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bdb0      	pop	{r4, r5, r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	08003bf4 	.word	0x08003bf4

08001a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a30:	2313      	movs	r3, #19
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a38:	2312      	movs	r3, #18
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a4c:	e0a3      	b.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4e:	2011      	movs	r0, #17
 8001a50:	183b      	adds	r3, r7, r0
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a56:	4b86      	ldr	r3, [pc, #536]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	055b      	lsls	r3, r3, #21
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d110      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b83      	ldr	r3, [pc, #524]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a66:	4b82      	ldr	r3, [pc, #520]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	0549      	lsls	r1, r1, #21
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a70:	4b7f      	ldr	r3, [pc, #508]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	055b      	lsls	r3, r3, #21
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7e:	183b      	adds	r3, r7, r0
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a84:	4b7b      	ldr	r3, [pc, #492]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b7a      	ldr	r3, [pc, #488]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	0049      	lsls	r1, r1, #1
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a92:	f7fe ff4f 	bl	8000934 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9c:	f7fe ff4a 	bl	8000934 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d904      	bls.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001aaa:	2313      	movs	r3, #19
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	2203      	movs	r2, #3
 8001ab0:	701a      	strb	r2, [r3, #0]
        break;
 8001ab2:	e005      	b.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ab4:	4b6f      	ldr	r3, [pc, #444]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4013      	ands	r3, r2
 8001abe:	d0ed      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ac0:	2313      	movs	r3, #19
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d154      	bne.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001aca:	4b69      	ldr	r3, [pc, #420]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001acc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ace:	23c0      	movs	r3, #192	; 0xc0
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d019      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d014      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ae6:	4b62      	ldr	r3, [pc, #392]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aea:	4a63      	ldr	r2, [pc, #396]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001af0:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001af2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001af4:	4b5e      	ldr	r3, [pc, #376]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	0249      	lsls	r1, r1, #9
 8001afa:	430a      	orrs	r2, r1
 8001afc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001afe:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b02:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b04:	495d      	ldr	r1, [pc, #372]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b06:	400a      	ands	r2, r1
 8001b08:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b0a:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d016      	beq.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7fe ff0c 	bl	8000934 <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b20:	e00c      	b.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7fe ff07 	bl	8000934 <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	4a54      	ldr	r2, [pc, #336]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d904      	bls.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001b32:	2313      	movs	r3, #19
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	2203      	movs	r2, #3
 8001b38:	701a      	strb	r2, [r3, #0]
            break;
 8001b3a:	e004      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d0ed      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001b46:	2313      	movs	r3, #19
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b50:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	4a48      	ldr	r2, [pc, #288]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b60:	430a      	orrs	r2, r1
 8001b62:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b64:	e00c      	b.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b66:	2312      	movs	r3, #18
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	2213      	movs	r2, #19
 8001b6c:	18ba      	adds	r2, r7, r2
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e005      	b.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b74:	2312      	movs	r3, #18
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2213      	movs	r2, #19
 8001b7a:	18ba      	adds	r2, r7, r2
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b80:	2311      	movs	r3, #17
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d105      	bne.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8a:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b90:	493c      	ldr	r1, [pc, #240]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b92:	400a      	ands	r2, r1
 8001b94:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d009      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ba0:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	4393      	bics	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	4393      	bics	r3, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d009      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be0:	4a29      	ldr	r2, [pc, #164]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	01db      	lsls	r3, r3, #7
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d015      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	0899      	lsrs	r1, r3, #2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	05db      	lsls	r3, r3, #23
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d106      	bne.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	0249      	lsls	r1, r1, #9
 8001c24:	430a      	orrs	r2, r1
 8001c26:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	4013      	ands	r3, r2
 8001c32:	d016      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	01db      	lsls	r3, r3, #7
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d106      	bne.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c5a:	2180      	movs	r1, #128	; 0x80
 8001c5c:	0249      	lsls	r1, r1, #9
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001c62:	2312      	movs	r3, #18
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	781b      	ldrb	r3, [r3, #0]
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b006      	add	sp, #24
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40007000 	.word	0x40007000
 8001c78:	fffffcff 	.word	0xfffffcff
 8001c7c:	fffeffff 	.word	0xfffeffff
 8001c80:	00001388 	.word	0x00001388
 8001c84:	efffffff 	.word	0xefffffff
 8001c88:	ffffcfff 	.word	0xffffcfff
 8001c8c:	ffff3fff 	.word	0xffff3fff

08001c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e046      	b.n	8001d30 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2288      	movs	r2, #136	; 0x88
 8001ca6:	589b      	ldr	r3, [r3, r2]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2284      	movs	r2, #132	; 0x84
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f7fe fd04 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2288      	movs	r2, #136	; 0x88
 8001cc0:	2124      	movs	r1, #36	; 0x24
 8001cc2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 fc66 	bl	80025a8 <UART_SetConfig>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e024      	b.n	8001d30 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 fdfd 	bl	80028f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	490d      	ldr	r1, [pc, #52]	; (8001d38 <HAL_UART_Init+0xa8>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	212a      	movs	r1, #42	; 0x2a
 8001d12:	438a      	bics	r2, r1
 8001d14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f000 fe95 	bl	8002a58 <UART_CheckIdleState>
 8001d2e:	0003      	movs	r3, r0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	ffffb7ff 	.word	0xffffb7ff

08001d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	1dbb      	adds	r3, r7, #6
 8001d4a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2288      	movs	r2, #136	; 0x88
 8001d50:	589b      	ldr	r3, [r3, r2]
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d000      	beq.n	8001d58 <HAL_UART_Transmit+0x1c>
 8001d56:	e088      	b.n	8001e6a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_UART_Transmit+0x2a>
 8001d5e:	1dbb      	adds	r3, r7, #6
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e080      	b.n	8001e6c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	015b      	lsls	r3, r3, #5
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d109      	bne.n	8001d8a <HAL_UART_Transmit+0x4e>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2201      	movs	r2, #1
 8001d82:	4013      	ands	r3, r2
 8001d84:	d001      	beq.n	8001d8a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e070      	b.n	8001e6c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2290      	movs	r2, #144	; 0x90
 8001d8e:	2100      	movs	r1, #0
 8001d90:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2288      	movs	r2, #136	; 0x88
 8001d96:	2121      	movs	r1, #33	; 0x21
 8001d98:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d9a:	f7fe fdcb 	bl	8000934 <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1dba      	adds	r2, r7, #6
 8001da6:	2154      	movs	r1, #84	; 0x54
 8001da8:	8812      	ldrh	r2, [r2, #0]
 8001daa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1dba      	adds	r2, r7, #6
 8001db0:	2156      	movs	r1, #86	; 0x56
 8001db2:	8812      	ldrh	r2, [r2, #0]
 8001db4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	015b      	lsls	r3, r3, #5
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d108      	bne.n	8001dd4 <HAL_UART_Transmit+0x98>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d104      	bne.n	8001dd4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	e003      	b.n	8001ddc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ddc:	e02c      	b.n	8001e38 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	0013      	movs	r3, r2
 8001de8:	2200      	movs	r2, #0
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	f000 fe82 	bl	8002af4 <UART_WaitOnFlagUntilTimeout>
 8001df0:	1e03      	subs	r3, r0, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e039      	b.n	8001e6c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10b      	bne.n	8001e16 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	001a      	movs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	05d2      	lsls	r2, r2, #23
 8001e0a:	0dd2      	lsrs	r2, r2, #23
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	3302      	adds	r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	e007      	b.n	8001e26 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	3301      	adds	r3, #1
 8001e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2256      	movs	r2, #86	; 0x56
 8001e2a:	5a9b      	ldrh	r3, [r3, r2]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b299      	uxth	r1, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2256      	movs	r2, #86	; 0x56
 8001e36:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2256      	movs	r2, #86	; 0x56
 8001e3c:	5a9b      	ldrh	r3, [r3, r2]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1cc      	bne.n	8001dde <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2140      	movs	r1, #64	; 0x40
 8001e52:	f000 fe4f 	bl	8002af4 <UART_WaitOnFlagUntilTimeout>
 8001e56:	1e03      	subs	r3, r0, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e006      	b.n	8001e6c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2288      	movs	r2, #136	; 0x88
 8001e62:	2120      	movs	r1, #32
 8001e64:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8001e6a:	2302      	movs	r3, #2
  }
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b008      	add	sp, #32
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	1dbb      	adds	r3, r7, #6
 8001e80:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	228c      	movs	r2, #140	; 0x8c
 8001e86:	589b      	ldr	r3, [r3, r2]
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d145      	bne.n	8001f18 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_UART_Receive_IT+0x26>
 8001e92:	1dbb      	adds	r3, r7, #6
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e03d      	b.n	8001f1a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	015b      	lsls	r3, r3, #5
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d109      	bne.n	8001ebe <HAL_UART_Receive_IT+0x4a>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d001      	beq.n	8001ebe <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e02d      	b.n	8001f1a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d019      	beq.n	8001f06 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ed6:	613b      	str	r3, [r7, #16]
  return(result);
 8001ed8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	2301      	movs	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f383 8810 	msr	PRIMASK, r3
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	04c9      	lsls	r1, r1, #19
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f383 8810 	msr	PRIMASK, r3
}
 8001f04:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f06:	1dbb      	adds	r3, r7, #6
 8001f08:	881a      	ldrh	r2, [r3, #0]
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 feb8 	bl	8002c84 <UART_Start_Receive_IT>
 8001f14:	0003      	movs	r3, r0
 8001f16:	e000      	b.n	8001f1a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001f18:	2302      	movs	r3, #2
  }
}
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b008      	add	sp, #32
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f24:	b5b0      	push	{r4, r5, r7, lr}
 8001f26:	b0aa      	sub	sp, #168	; 0xa8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	22a4      	movs	r2, #164	; 0xa4
 8001f34:	18b9      	adds	r1, r7, r2
 8001f36:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	20a0      	movs	r0, #160	; 0xa0
 8001f40:	1839      	adds	r1, r7, r0
 8001f42:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	249c      	movs	r4, #156	; 0x9c
 8001f4c:	1939      	adds	r1, r7, r4
 8001f4e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001f50:	0011      	movs	r1, r2
 8001f52:	18bb      	adds	r3, r7, r2
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4aa2      	ldr	r2, [pc, #648]	; (80021e0 <HAL_UART_IRQHandler+0x2bc>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2298      	movs	r2, #152	; 0x98
 8001f5c:	18bd      	adds	r5, r7, r2
 8001f5e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001f60:	18bb      	adds	r3, r7, r2
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d11a      	bne.n	8001f9e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d015      	beq.n	8001f9e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001f72:	183b      	adds	r3, r7, r0
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2220      	movs	r2, #32
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d105      	bne.n	8001f88 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001f7c:	193b      	adds	r3, r7, r4
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	055b      	lsls	r3, r3, #21
 8001f84:	4013      	ands	r3, r2
 8001f86:	d00a      	beq.n	8001f9e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d100      	bne.n	8001f92 <HAL_UART_IRQHandler+0x6e>
 8001f90:	e2dc      	b.n	800254c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	0010      	movs	r0, r2
 8001f9a:	4798      	blx	r3
      }
      return;
 8001f9c:	e2d6      	b.n	800254c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001f9e:	2398      	movs	r3, #152	; 0x98
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <HAL_UART_IRQHandler+0x86>
 8001fa8:	e122      	b.n	80021f0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001faa:	239c      	movs	r3, #156	; 0x9c
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a8c      	ldr	r2, [pc, #560]	; (80021e4 <HAL_UART_IRQHandler+0x2c0>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d106      	bne.n	8001fc4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001fb6:	23a0      	movs	r3, #160	; 0xa0
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a8a      	ldr	r2, [pc, #552]	; (80021e8 <HAL_UART_IRQHandler+0x2c4>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d100      	bne.n	8001fc4 <HAL_UART_IRQHandler+0xa0>
 8001fc2:	e115      	b.n	80021f0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001fc4:	23a4      	movs	r3, #164	; 0xa4
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d012      	beq.n	8001ff6 <HAL_UART_IRQHandler+0xd2>
 8001fd0:	23a0      	movs	r3, #160	; 0xa0
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2290      	movs	r2, #144	; 0x90
 8001fea:	589b      	ldr	r3, [r3, r2]
 8001fec:	2201      	movs	r2, #1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2190      	movs	r1, #144	; 0x90
 8001ff4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ff6:	23a4      	movs	r3, #164	; 0xa4
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d011      	beq.n	8002026 <HAL_UART_IRQHandler+0x102>
 8002002:	239c      	movs	r3, #156	; 0x9c
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	d00b      	beq.n	8002026 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2202      	movs	r2, #2
 8002014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2290      	movs	r2, #144	; 0x90
 800201a:	589b      	ldr	r3, [r3, r2]
 800201c:	2204      	movs	r2, #4
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2190      	movs	r1, #144	; 0x90
 8002024:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002026:	23a4      	movs	r3, #164	; 0xa4
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2204      	movs	r2, #4
 800202e:	4013      	ands	r3, r2
 8002030:	d011      	beq.n	8002056 <HAL_UART_IRQHandler+0x132>
 8002032:	239c      	movs	r3, #156	; 0x9c
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d00b      	beq.n	8002056 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2204      	movs	r2, #4
 8002044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2290      	movs	r2, #144	; 0x90
 800204a:	589b      	ldr	r3, [r3, r2]
 800204c:	2202      	movs	r2, #2
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2190      	movs	r1, #144	; 0x90
 8002054:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002056:	23a4      	movs	r3, #164	; 0xa4
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2208      	movs	r2, #8
 800205e:	4013      	ands	r3, r2
 8002060:	d017      	beq.n	8002092 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002062:	23a0      	movs	r3, #160	; 0xa0
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2220      	movs	r2, #32
 800206a:	4013      	ands	r3, r2
 800206c:	d105      	bne.n	800207a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800206e:	239c      	movs	r3, #156	; 0x9c
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a5b      	ldr	r2, [pc, #364]	; (80021e4 <HAL_UART_IRQHandler+0x2c0>)
 8002076:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002078:	d00b      	beq.n	8002092 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2208      	movs	r2, #8
 8002080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2290      	movs	r2, #144	; 0x90
 8002086:	589b      	ldr	r3, [r3, r2]
 8002088:	2208      	movs	r2, #8
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2190      	movs	r1, #144	; 0x90
 8002090:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002092:	23a4      	movs	r3, #164	; 0xa4
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	4013      	ands	r3, r2
 800209e:	d013      	beq.n	80020c8 <HAL_UART_IRQHandler+0x1a4>
 80020a0:	23a0      	movs	r3, #160	; 0xa0
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	04db      	lsls	r3, r3, #19
 80020aa:	4013      	ands	r3, r2
 80020ac:	d00c      	beq.n	80020c8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2280      	movs	r2, #128	; 0x80
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2290      	movs	r2, #144	; 0x90
 80020bc:	589b      	ldr	r3, [r3, r2]
 80020be:	2220      	movs	r2, #32
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2190      	movs	r1, #144	; 0x90
 80020c6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2290      	movs	r2, #144	; 0x90
 80020cc:	589b      	ldr	r3, [r3, r2]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d100      	bne.n	80020d4 <HAL_UART_IRQHandler+0x1b0>
 80020d2:	e23d      	b.n	8002550 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80020d4:	23a4      	movs	r3, #164	; 0xa4
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2220      	movs	r2, #32
 80020dc:	4013      	ands	r3, r2
 80020de:	d015      	beq.n	800210c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80020e0:	23a0      	movs	r3, #160	; 0xa0
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2220      	movs	r2, #32
 80020e8:	4013      	ands	r3, r2
 80020ea:	d106      	bne.n	80020fa <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80020ec:	239c      	movs	r3, #156	; 0x9c
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	055b      	lsls	r3, r3, #21
 80020f6:	4013      	ands	r3, r2
 80020f8:	d008      	beq.n	800210c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d004      	beq.n	800210c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	0010      	movs	r0, r2
 800210a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2290      	movs	r2, #144	; 0x90
 8002110:	589b      	ldr	r3, [r3, r2]
 8002112:	2194      	movs	r1, #148	; 0x94
 8002114:	187a      	adds	r2, r7, r1
 8002116:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	4013      	ands	r3, r2
 8002122:	2b40      	cmp	r3, #64	; 0x40
 8002124:	d004      	beq.n	8002130 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002126:	187b      	adds	r3, r7, r1
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2228      	movs	r2, #40	; 0x28
 800212c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800212e:	d04c      	beq.n	80021ca <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 feca 	bl	8002ecc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2240      	movs	r2, #64	; 0x40
 8002140:	4013      	ands	r3, r2
 8002142:	2b40      	cmp	r3, #64	; 0x40
 8002144:	d13c      	bne.n	80021c0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002146:	f3ef 8310 	mrs	r3, PRIMASK
 800214a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800214c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800214e:	2090      	movs	r0, #144	; 0x90
 8002150:	183a      	adds	r2, r7, r0
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	2301      	movs	r3, #1
 8002156:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800215a:	f383 8810 	msr	PRIMASK, r3
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2140      	movs	r1, #64	; 0x40
 800216c:	438a      	bics	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	183b      	adds	r3, r7, r0
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002178:	f383 8810 	msr	PRIMASK, r3
}
 800217c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	589b      	ldr	r3, [r3, r2]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d016      	beq.n	80021b6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	589b      	ldr	r3, [r3, r2]
 800218e:	4a17      	ldr	r2, [pc, #92]	; (80021ec <HAL_UART_IRQHandler+0x2c8>)
 8002190:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	589b      	ldr	r3, [r3, r2]
 8002198:	0018      	movs	r0, r3
 800219a:	f7fe fd39 	bl	8000c10 <HAL_DMA_Abort_IT>
 800219e:	1e03      	subs	r3, r0, #0
 80021a0:	d01c      	beq.n	80021dc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	589b      	ldr	r3, [r3, r2]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	5852      	ldr	r2, [r2, r1]
 80021b0:	0010      	movs	r0, r2
 80021b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b4:	e012      	b.n	80021dc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f000 f9e1 	bl	8002580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021be:	e00d      	b.n	80021dc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f9dc 	bl	8002580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c8:	e008      	b.n	80021dc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 f9d7 	bl	8002580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2290      	movs	r2, #144	; 0x90
 80021d6:	2100      	movs	r1, #0
 80021d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80021da:	e1b9      	b.n	8002550 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021dc:	46c0      	nop			; (mov r8, r8)
    return;
 80021de:	e1b7      	b.n	8002550 <HAL_UART_IRQHandler+0x62c>
 80021e0:	0000080f 	.word	0x0000080f
 80021e4:	10000001 	.word	0x10000001
 80021e8:	04000120 	.word	0x04000120
 80021ec:	08002f99 	.word	0x08002f99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d000      	beq.n	80021fa <HAL_UART_IRQHandler+0x2d6>
 80021f8:	e13e      	b.n	8002478 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80021fa:	23a4      	movs	r3, #164	; 0xa4
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2210      	movs	r2, #16
 8002202:	4013      	ands	r3, r2
 8002204:	d100      	bne.n	8002208 <HAL_UART_IRQHandler+0x2e4>
 8002206:	e137      	b.n	8002478 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002208:	23a0      	movs	r3, #160	; 0xa0
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2210      	movs	r2, #16
 8002210:	4013      	ands	r3, r2
 8002212:	d100      	bne.n	8002216 <HAL_UART_IRQHandler+0x2f2>
 8002214:	e130      	b.n	8002478 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2210      	movs	r2, #16
 800221c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2240      	movs	r2, #64	; 0x40
 8002226:	4013      	ands	r3, r2
 8002228:	2b40      	cmp	r3, #64	; 0x40
 800222a:	d000      	beq.n	800222e <HAL_UART_IRQHandler+0x30a>
 800222c:	e0a4      	b.n	8002378 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	589b      	ldr	r3, [r3, r2]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	217e      	movs	r1, #126	; 0x7e
 800223a:	187b      	adds	r3, r7, r1
 800223c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800223e:	187b      	adds	r3, r7, r1
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d100      	bne.n	8002248 <HAL_UART_IRQHandler+0x324>
 8002246:	e185      	b.n	8002554 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	225c      	movs	r2, #92	; 0x5c
 800224c:	5a9b      	ldrh	r3, [r3, r2]
 800224e:	187a      	adds	r2, r7, r1
 8002250:	8812      	ldrh	r2, [r2, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d300      	bcc.n	8002258 <HAL_UART_IRQHandler+0x334>
 8002256:	e17d      	b.n	8002554 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	187a      	adds	r2, r7, r1
 800225c:	215e      	movs	r1, #94	; 0x5e
 800225e:	8812      	ldrh	r2, [r2, #0]
 8002260:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	589b      	ldr	r3, [r3, r2]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2220      	movs	r2, #32
 800226e:	4013      	ands	r3, r2
 8002270:	d170      	bne.n	8002354 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002272:	f3ef 8310 	mrs	r3, PRIMASK
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800227a:	67bb      	str	r3, [r7, #120]	; 0x78
 800227c:	2301      	movs	r3, #1
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	f383 8810 	msr	PRIMASK, r3
}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	49b4      	ldr	r1, [pc, #720]	; (8002564 <HAL_UART_IRQHandler+0x640>)
 8002294:	400a      	ands	r2, r1
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229e:	f383 8810 	msr	PRIMASK, r3
}
 80022a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a4:	f3ef 8310 	mrs	r3, PRIMASK
 80022a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80022aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ac:	677b      	str	r3, [r7, #116]	; 0x74
 80022ae:	2301      	movs	r3, #1
 80022b0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b4:	f383 8810 	msr	PRIMASK, r3
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	438a      	bics	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022cc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d0:	f383 8810 	msr	PRIMASK, r3
}
 80022d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d6:	f3ef 8310 	mrs	r3, PRIMASK
 80022da:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80022dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022de:	673b      	str	r3, [r7, #112]	; 0x70
 80022e0:	2301      	movs	r3, #1
 80022e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e6:	f383 8810 	msr	PRIMASK, r3
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2140      	movs	r1, #64	; 0x40
 80022f8:	438a      	bics	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022fe:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002302:	f383 8810 	msr	PRIMASK, r3
}
 8002306:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	228c      	movs	r2, #140	; 0x8c
 800230c:	2120      	movs	r1, #32
 800230e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002316:	f3ef 8310 	mrs	r3, PRIMASK
 800231a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800231c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800231e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002320:	2301      	movs	r3, #1
 8002322:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002326:	f383 8810 	msr	PRIMASK, r3
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2110      	movs	r1, #16
 8002338:	438a      	bics	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002342:	f383 8810 	msr	PRIMASK, r3
}
 8002346:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	589b      	ldr	r3, [r3, r2]
 800234e:	0018      	movs	r0, r3
 8002350:	f7fe fbfc 	bl	8000b4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	225c      	movs	r2, #92	; 0x5c
 800235e:	5a9a      	ldrh	r2, [r3, r2]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	215e      	movs	r1, #94	; 0x5e
 8002364:	5a5b      	ldrh	r3, [r3, r1]
 8002366:	b29b      	uxth	r3, r3
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	b29a      	uxth	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0011      	movs	r1, r2
 8002370:	0018      	movs	r0, r3
 8002372:	f000 f90d 	bl	8002590 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002376:	e0ed      	b.n	8002554 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	225c      	movs	r2, #92	; 0x5c
 800237c:	5a99      	ldrh	r1, [r3, r2]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	225e      	movs	r2, #94	; 0x5e
 8002382:	5a9b      	ldrh	r3, [r3, r2]
 8002384:	b29a      	uxth	r2, r3
 8002386:	208e      	movs	r0, #142	; 0x8e
 8002388:	183b      	adds	r3, r7, r0
 800238a:	1a8a      	subs	r2, r1, r2
 800238c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	225e      	movs	r2, #94	; 0x5e
 8002392:	5a9b      	ldrh	r3, [r3, r2]
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d100      	bne.n	800239c <HAL_UART_IRQHandler+0x478>
 800239a:	e0dd      	b.n	8002558 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800239c:	183b      	adds	r3, r7, r0
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <HAL_UART_IRQHandler+0x482>
 80023a4:	e0d8      	b.n	8002558 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a6:	f3ef 8310 	mrs	r3, PRIMASK
 80023aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80023ac:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80023ae:	2488      	movs	r4, #136	; 0x88
 80023b0:	193a      	adds	r2, r7, r4
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	2301      	movs	r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f383 8810 	msr	PRIMASK, r3
}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4967      	ldr	r1, [pc, #412]	; (8002568 <HAL_UART_IRQHandler+0x644>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	193b      	adds	r3, r7, r4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f383 8810 	msr	PRIMASK, r3
}
 80023dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023de:	f3ef 8310 	mrs	r3, PRIMASK
 80023e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80023e4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80023e6:	2484      	movs	r4, #132	; 0x84
 80023e8:	193a      	adds	r2, r7, r4
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	2301      	movs	r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f383 8810 	msr	PRIMASK, r3
}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	495a      	ldr	r1, [pc, #360]	; (800256c <HAL_UART_IRQHandler+0x648>)
 8002404:	400a      	ands	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	193b      	adds	r3, r7, r4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f383 8810 	msr	PRIMASK, r3
}
 8002414:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	228c      	movs	r2, #140	; 0x8c
 800241a:	2120      	movs	r1, #32
 800241c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800242a:	f3ef 8310 	mrs	r3, PRIMASK
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002432:	2480      	movs	r4, #128	; 0x80
 8002434:	193a      	adds	r2, r7, r4
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	2301      	movs	r3, #1
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	f383 8810 	msr	PRIMASK, r3
}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2110      	movs	r1, #16
 8002450:	438a      	bics	r2, r1
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	193b      	adds	r3, r7, r4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	f383 8810 	msr	PRIMASK, r3
}
 8002460:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002468:	183b      	adds	r3, r7, r0
 800246a:	881a      	ldrh	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0011      	movs	r1, r2
 8002470:	0018      	movs	r0, r3
 8002472:	f000 f88d 	bl	8002590 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002476:	e06f      	b.n	8002558 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002478:	23a4      	movs	r3, #164	; 0xa4
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	035b      	lsls	r3, r3, #13
 8002482:	4013      	ands	r3, r2
 8002484:	d010      	beq.n	80024a8 <HAL_UART_IRQHandler+0x584>
 8002486:	239c      	movs	r3, #156	; 0x9c
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	03db      	lsls	r3, r3, #15
 8002490:	4013      	ands	r3, r2
 8002492:	d009      	beq.n	80024a8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	0352      	lsls	r2, r2, #13
 800249c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f001 fa1d 	bl	80038e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80024a6:	e05a      	b.n	800255e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80024a8:	23a4      	movs	r3, #164	; 0xa4
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	4013      	ands	r3, r2
 80024b2:	d016      	beq.n	80024e2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80024b4:	23a0      	movs	r3, #160	; 0xa0
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	4013      	ands	r3, r2
 80024be:	d106      	bne.n	80024ce <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80024c0:	239c      	movs	r3, #156	; 0x9c
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	4013      	ands	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d042      	beq.n	800255c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	0010      	movs	r0, r2
 80024de:	4798      	blx	r3
    }
    return;
 80024e0:	e03c      	b.n	800255c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024e2:	23a4      	movs	r3, #164	; 0xa4
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2240      	movs	r2, #64	; 0x40
 80024ea:	4013      	ands	r3, r2
 80024ec:	d00a      	beq.n	8002504 <HAL_UART_IRQHandler+0x5e0>
 80024ee:	23a0      	movs	r3, #160	; 0xa0
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2240      	movs	r2, #64	; 0x40
 80024f6:	4013      	ands	r3, r2
 80024f8:	d004      	beq.n	8002504 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 fd62 	bl	8002fc6 <UART_EndTransmit_IT>
    return;
 8002502:	e02c      	b.n	800255e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002504:	23a4      	movs	r3, #164	; 0xa4
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	4013      	ands	r3, r2
 8002510:	d00b      	beq.n	800252a <HAL_UART_IRQHandler+0x606>
 8002512:	23a0      	movs	r3, #160	; 0xa0
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	05db      	lsls	r3, r3, #23
 800251c:	4013      	ands	r3, r2
 800251e:	d004      	beq.n	800252a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	0018      	movs	r0, r3
 8002524:	f001 f9ec 	bl	8003900 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002528:	e019      	b.n	800255e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800252a:	23a4      	movs	r3, #164	; 0xa4
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	045b      	lsls	r3, r3, #17
 8002534:	4013      	ands	r3, r2
 8002536:	d012      	beq.n	800255e <HAL_UART_IRQHandler+0x63a>
 8002538:	23a0      	movs	r3, #160	; 0xa0
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	da0d      	bge.n	800255e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f001 f9d3 	bl	80038f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800254a:	e008      	b.n	800255e <HAL_UART_IRQHandler+0x63a>
      return;
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	e006      	b.n	800255e <HAL_UART_IRQHandler+0x63a>
    return;
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	e004      	b.n	800255e <HAL_UART_IRQHandler+0x63a>
      return;
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	e002      	b.n	800255e <HAL_UART_IRQHandler+0x63a>
      return;
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	e000      	b.n	800255e <HAL_UART_IRQHandler+0x63a>
    return;
 800255c:	46c0      	nop			; (mov r8, r8)
  }
}
 800255e:	46bd      	mov	sp, r7
 8002560:	b02a      	add	sp, #168	; 0xa8
 8002562:	bdb0      	pop	{r4, r5, r7, pc}
 8002564:	fffffeff 	.word	0xfffffeff
 8002568:	fffffedf 	.word	0xfffffedf
 800256c:	effffffe 	.word	0xeffffffe

08002570 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	000a      	movs	r2, r1
 800259a:	1cbb      	adds	r3, r7, #2
 800259c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b002      	add	sp, #8
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025b0:	231a      	movs	r3, #26
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4abc      	ldr	r2, [pc, #752]	; (80028c8 <UART_SetConfig+0x320>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4ab7      	ldr	r2, [pc, #732]	; (80028cc <UART_SetConfig+0x324>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	4313      	orrs	r3, r2
 800260c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4aae      	ldr	r2, [pc, #696]	; (80028d0 <UART_SetConfig+0x328>)
 8002616:	4013      	ands	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	430a      	orrs	r2, r1
 8002622:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	220f      	movs	r2, #15
 800262c:	4393      	bics	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4aa4      	ldr	r2, [pc, #656]	; (80028d4 <UART_SetConfig+0x32c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d127      	bne.n	8002696 <UART_SetConfig+0xee>
 8002646:	4ba4      	ldr	r3, [pc, #656]	; (80028d8 <UART_SetConfig+0x330>)
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	2203      	movs	r2, #3
 800264c:	4013      	ands	r3, r2
 800264e:	2b03      	cmp	r3, #3
 8002650:	d017      	beq.n	8002682 <UART_SetConfig+0xda>
 8002652:	d81b      	bhi.n	800268c <UART_SetConfig+0xe4>
 8002654:	2b02      	cmp	r3, #2
 8002656:	d00a      	beq.n	800266e <UART_SetConfig+0xc6>
 8002658:	d818      	bhi.n	800268c <UART_SetConfig+0xe4>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <UART_SetConfig+0xbc>
 800265e:	2b01      	cmp	r3, #1
 8002660:	d00a      	beq.n	8002678 <UART_SetConfig+0xd0>
 8002662:	e013      	b.n	800268c <UART_SetConfig+0xe4>
 8002664:	231b      	movs	r3, #27
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e058      	b.n	8002720 <UART_SetConfig+0x178>
 800266e:	231b      	movs	r3, #27
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e053      	b.n	8002720 <UART_SetConfig+0x178>
 8002678:	231b      	movs	r3, #27
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	2204      	movs	r2, #4
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e04e      	b.n	8002720 <UART_SetConfig+0x178>
 8002682:	231b      	movs	r3, #27
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2208      	movs	r2, #8
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	e049      	b.n	8002720 <UART_SetConfig+0x178>
 800268c:	231b      	movs	r3, #27
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	2210      	movs	r2, #16
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e044      	b.n	8002720 <UART_SetConfig+0x178>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a90      	ldr	r2, [pc, #576]	; (80028dc <UART_SetConfig+0x334>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d127      	bne.n	80026f0 <UART_SetConfig+0x148>
 80026a0:	4b8d      	ldr	r3, [pc, #564]	; (80028d8 <UART_SetConfig+0x330>)
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	220c      	movs	r2, #12
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d017      	beq.n	80026dc <UART_SetConfig+0x134>
 80026ac:	d81b      	bhi.n	80026e6 <UART_SetConfig+0x13e>
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d00a      	beq.n	80026c8 <UART_SetConfig+0x120>
 80026b2:	d818      	bhi.n	80026e6 <UART_SetConfig+0x13e>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <UART_SetConfig+0x116>
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d00a      	beq.n	80026d2 <UART_SetConfig+0x12a>
 80026bc:	e013      	b.n	80026e6 <UART_SetConfig+0x13e>
 80026be:	231b      	movs	r3, #27
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e02b      	b.n	8002720 <UART_SetConfig+0x178>
 80026c8:	231b      	movs	r3, #27
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2202      	movs	r2, #2
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e026      	b.n	8002720 <UART_SetConfig+0x178>
 80026d2:	231b      	movs	r3, #27
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2204      	movs	r2, #4
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e021      	b.n	8002720 <UART_SetConfig+0x178>
 80026dc:	231b      	movs	r3, #27
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	2208      	movs	r2, #8
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e01c      	b.n	8002720 <UART_SetConfig+0x178>
 80026e6:	231b      	movs	r3, #27
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2210      	movs	r2, #16
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e017      	b.n	8002720 <UART_SetConfig+0x178>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a7a      	ldr	r2, [pc, #488]	; (80028e0 <UART_SetConfig+0x338>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d104      	bne.n	8002704 <UART_SetConfig+0x15c>
 80026fa:	231b      	movs	r3, #27
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e00d      	b.n	8002720 <UART_SetConfig+0x178>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a76      	ldr	r2, [pc, #472]	; (80028e4 <UART_SetConfig+0x33c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d104      	bne.n	8002718 <UART_SetConfig+0x170>
 800270e:	231b      	movs	r3, #27
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	e003      	b.n	8002720 <UART_SetConfig+0x178>
 8002718:	231b      	movs	r3, #27
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2210      	movs	r2, #16
 800271e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	429a      	cmp	r2, r3
 800272a:	d000      	beq.n	800272e <UART_SetConfig+0x186>
 800272c:	e065      	b.n	80027fa <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800272e:	231b      	movs	r3, #27
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d015      	beq.n	8002764 <UART_SetConfig+0x1bc>
 8002738:	dc18      	bgt.n	800276c <UART_SetConfig+0x1c4>
 800273a:	2b04      	cmp	r3, #4
 800273c:	d00d      	beq.n	800275a <UART_SetConfig+0x1b2>
 800273e:	dc15      	bgt.n	800276c <UART_SetConfig+0x1c4>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <UART_SetConfig+0x1a2>
 8002744:	2b02      	cmp	r3, #2
 8002746:	d005      	beq.n	8002754 <UART_SetConfig+0x1ac>
 8002748:	e010      	b.n	800276c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800274a:	f7ff f957 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 800274e:	0003      	movs	r3, r0
 8002750:	617b      	str	r3, [r7, #20]
        break;
 8002752:	e012      	b.n	800277a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002754:	4b64      	ldr	r3, [pc, #400]	; (80028e8 <UART_SetConfig+0x340>)
 8002756:	617b      	str	r3, [r7, #20]
        break;
 8002758:	e00f      	b.n	800277a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800275a:	f7ff f8c3 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 800275e:	0003      	movs	r3, r0
 8002760:	617b      	str	r3, [r7, #20]
        break;
 8002762:	e00a      	b.n	800277a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	617b      	str	r3, [r7, #20]
        break;
 800276a:	e006      	b.n	800277a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002770:	231a      	movs	r3, #26
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
        break;
 8002778:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d100      	bne.n	8002782 <UART_SetConfig+0x1da>
 8002780:	e08d      	b.n	800289e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002786:	4b59      	ldr	r3, [pc, #356]	; (80028ec <UART_SetConfig+0x344>)
 8002788:	0052      	lsls	r2, r2, #1
 800278a:	5ad3      	ldrh	r3, [r2, r3]
 800278c:	0019      	movs	r1, r3
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7fd fcb6 	bl	8000100 <__udivsi3>
 8002794:	0003      	movs	r3, r0
 8002796:	005a      	lsls	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	18d2      	adds	r2, r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	0019      	movs	r1, r3
 80027a6:	0010      	movs	r0, r2
 80027a8:	f7fd fcaa 	bl	8000100 <__udivsi3>
 80027ac:	0003      	movs	r3, r0
 80027ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	d91c      	bls.n	80027f0 <UART_SetConfig+0x248>
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	025b      	lsls	r3, r3, #9
 80027bc:	429a      	cmp	r2, r3
 80027be:	d217      	bcs.n	80027f0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	200e      	movs	r0, #14
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	210f      	movs	r1, #15
 80027ca:	438a      	bics	r2, r1
 80027cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2207      	movs	r2, #7
 80027d6:	4013      	ands	r3, r2
 80027d8:	b299      	uxth	r1, r3
 80027da:	183b      	adds	r3, r7, r0
 80027dc:	183a      	adds	r2, r7, r0
 80027de:	8812      	ldrh	r2, [r2, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	183a      	adds	r2, r7, r0
 80027ea:	8812      	ldrh	r2, [r2, #0]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	e056      	b.n	800289e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80027f0:	231a      	movs	r3, #26
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e051      	b.n	800289e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027fa:	231b      	movs	r3, #27
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b08      	cmp	r3, #8
 8002802:	d015      	beq.n	8002830 <UART_SetConfig+0x288>
 8002804:	dc18      	bgt.n	8002838 <UART_SetConfig+0x290>
 8002806:	2b04      	cmp	r3, #4
 8002808:	d00d      	beq.n	8002826 <UART_SetConfig+0x27e>
 800280a:	dc15      	bgt.n	8002838 <UART_SetConfig+0x290>
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <UART_SetConfig+0x26e>
 8002810:	2b02      	cmp	r3, #2
 8002812:	d005      	beq.n	8002820 <UART_SetConfig+0x278>
 8002814:	e010      	b.n	8002838 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002816:	f7ff f8f1 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 800281a:	0003      	movs	r3, r0
 800281c:	617b      	str	r3, [r7, #20]
        break;
 800281e:	e012      	b.n	8002846 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002820:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <UART_SetConfig+0x340>)
 8002822:	617b      	str	r3, [r7, #20]
        break;
 8002824:	e00f      	b.n	8002846 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002826:	f7ff f85d 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 800282a:	0003      	movs	r3, r0
 800282c:	617b      	str	r3, [r7, #20]
        break;
 800282e:	e00a      	b.n	8002846 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	617b      	str	r3, [r7, #20]
        break;
 8002836:	e006      	b.n	8002846 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800283c:	231a      	movs	r3, #26
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
        break;
 8002844:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d028      	beq.n	800289e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002850:	4b26      	ldr	r3, [pc, #152]	; (80028ec <UART_SetConfig+0x344>)
 8002852:	0052      	lsls	r2, r2, #1
 8002854:	5ad3      	ldrh	r3, [r2, r3]
 8002856:	0019      	movs	r1, r3
 8002858:	6978      	ldr	r0, [r7, #20]
 800285a:	f7fd fc51 	bl	8000100 <__udivsi3>
 800285e:	0003      	movs	r3, r0
 8002860:	001a      	movs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	18d2      	adds	r2, r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	0019      	movs	r1, r3
 8002870:	0010      	movs	r0, r2
 8002872:	f7fd fc45 	bl	8000100 <__udivsi3>
 8002876:	0003      	movs	r3, r0
 8002878:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b0f      	cmp	r3, #15
 800287e:	d90a      	bls.n	8002896 <UART_SetConfig+0x2ee>
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	025b      	lsls	r3, r3, #9
 8002886:	429a      	cmp	r2, r3
 8002888:	d205      	bcs.n	8002896 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	b29a      	uxth	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60da      	str	r2, [r3, #12]
 8002894:	e003      	b.n	800289e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002896:	231a      	movs	r3, #26
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	226a      	movs	r2, #106	; 0x6a
 80028a2:	2101      	movs	r1, #1
 80028a4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2268      	movs	r2, #104	; 0x68
 80028aa:	2101      	movs	r1, #1
 80028ac:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80028ba:	231a      	movs	r3, #26
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	781b      	ldrb	r3, [r3, #0]
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b008      	add	sp, #32
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	cfff69f3 	.word	0xcfff69f3
 80028cc:	ffffcfff 	.word	0xffffcfff
 80028d0:	11fff4ff 	.word	0x11fff4ff
 80028d4:	40013800 	.word	0x40013800
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40004400 	.word	0x40004400
 80028e0:	40004800 	.word	0x40004800
 80028e4:	40004c00 	.word	0x40004c00
 80028e8:	00f42400 	.word	0x00f42400
 80028ec:	08003c14 	.word	0x08003c14

080028f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	2201      	movs	r2, #1
 80028fe:	4013      	ands	r3, r2
 8002900:	d00b      	beq.n	800291a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a4a      	ldr	r2, [pc, #296]	; (8002a34 <UART_AdvFeatureConfig+0x144>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	2202      	movs	r2, #2
 8002920:	4013      	ands	r3, r2
 8002922:	d00b      	beq.n	800293c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a43      	ldr	r2, [pc, #268]	; (8002a38 <UART_AdvFeatureConfig+0x148>)
 800292c:	4013      	ands	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	2204      	movs	r2, #4
 8002942:	4013      	ands	r3, r2
 8002944:	d00b      	beq.n	800295e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a3b      	ldr	r2, [pc, #236]	; (8002a3c <UART_AdvFeatureConfig+0x14c>)
 800294e:	4013      	ands	r3, r2
 8002950:	0019      	movs	r1, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	2208      	movs	r2, #8
 8002964:	4013      	ands	r3, r2
 8002966:	d00b      	beq.n	8002980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a34      	ldr	r2, [pc, #208]	; (8002a40 <UART_AdvFeatureConfig+0x150>)
 8002970:	4013      	ands	r3, r2
 8002972:	0019      	movs	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	2210      	movs	r2, #16
 8002986:	4013      	ands	r3, r2
 8002988:	d00b      	beq.n	80029a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a2c      	ldr	r2, [pc, #176]	; (8002a44 <UART_AdvFeatureConfig+0x154>)
 8002992:	4013      	ands	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	2220      	movs	r2, #32
 80029a8:	4013      	ands	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4a25      	ldr	r2, [pc, #148]	; (8002a48 <UART_AdvFeatureConfig+0x158>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	2240      	movs	r2, #64	; 0x40
 80029ca:	4013      	ands	r3, r2
 80029cc:	d01d      	beq.n	8002a0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <UART_AdvFeatureConfig+0x15c>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	035b      	lsls	r3, r3, #13
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d10b      	bne.n	8002a0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a15      	ldr	r2, [pc, #84]	; (8002a50 <UART_AdvFeatureConfig+0x160>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	0019      	movs	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	4013      	ands	r3, r2
 8002a12:	d00b      	beq.n	8002a2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <UART_AdvFeatureConfig+0x164>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	0019      	movs	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	605a      	str	r2, [r3, #4]
  }
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	fffdffff 	.word	0xfffdffff
 8002a38:	fffeffff 	.word	0xfffeffff
 8002a3c:	fffbffff 	.word	0xfffbffff
 8002a40:	ffff7fff 	.word	0xffff7fff
 8002a44:	ffffefff 	.word	0xffffefff
 8002a48:	ffffdfff 	.word	0xffffdfff
 8002a4c:	ffefffff 	.word	0xffefffff
 8002a50:	ff9fffff 	.word	0xff9fffff
 8002a54:	fff7ffff 	.word	0xfff7ffff

08002a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2290      	movs	r2, #144	; 0x90
 8002a64:	2100      	movs	r1, #0
 8002a66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a68:	f7fd ff64 	bl	8000934 <HAL_GetTick>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2208      	movs	r2, #8
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d10c      	bne.n	8002a98 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	0391      	lsls	r1, r2, #14
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4a1a      	ldr	r2, [pc, #104]	; (8002af0 <UART_CheckIdleState+0x98>)
 8002a88:	9200      	str	r2, [sp, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f000 f832 	bl	8002af4 <UART_WaitOnFlagUntilTimeout>
 8002a90:	1e03      	subs	r3, r0, #0
 8002a92:	d001      	beq.n	8002a98 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e026      	b.n	8002ae6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d10c      	bne.n	8002ac0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2280      	movs	r2, #128	; 0x80
 8002aaa:	03d1      	lsls	r1, r2, #15
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <UART_CheckIdleState+0x98>)
 8002ab0:	9200      	str	r2, [sp, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f000 f81e 	bl	8002af4 <UART_WaitOnFlagUntilTimeout>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d001      	beq.n	8002ac0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e012      	b.n	8002ae6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2288      	movs	r2, #136	; 0x88
 8002ac4:	2120      	movs	r1, #32
 8002ac6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	228c      	movs	r2, #140	; 0x8c
 8002acc:	2120      	movs	r1, #32
 8002ace:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2284      	movs	r2, #132	; 0x84
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b004      	add	sp, #16
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	01ffffff 	.word	0x01ffffff

08002af4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b094      	sub	sp, #80	; 0x50
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	1dfb      	adds	r3, r7, #7
 8002b02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b04:	e0a7      	b.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b08:	3301      	adds	r3, #1
 8002b0a:	d100      	bne.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002b0c:	e0a3      	b.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0e:	f7fd ff11 	bl	8000934 <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d302      	bcc.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d13f      	bne.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b24:	f3ef 8310 	mrs	r3, PRIMASK
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b2e:	2301      	movs	r3, #1
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	f383 8810 	msr	PRIMASK, r3
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	494e      	ldr	r1, [pc, #312]	; (8002c80 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002b46:	400a      	ands	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	f383 8810 	msr	PRIMASK, r3
}
 8002b54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b56:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b60:	2301      	movs	r3, #1
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2101      	movs	r1, #1
 8002b78:	438a      	bics	r2, r1
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b82:	f383 8810 	msr	PRIMASK, r3
}
 8002b86:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2288      	movs	r2, #136	; 0x88
 8002b8c:	2120      	movs	r1, #32
 8002b8e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	228c      	movs	r2, #140	; 0x8c
 8002b94:	2120      	movs	r1, #32
 8002b96:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2284      	movs	r2, #132	; 0x84
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e069      	b.n	8002c78 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2204      	movs	r2, #4
 8002bac:	4013      	ands	r3, r2
 8002bae:	d052      	beq.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	401a      	ands	r2, r3
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d148      	bne.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2280      	movs	r2, #128	; 0x80
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bce:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd2:	613b      	str	r3, [r7, #16]
  return(result);
 8002bd4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd8:	2301      	movs	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f383 8810 	msr	PRIMASK, r3
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4924      	ldr	r1, [pc, #144]	; (8002c80 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f383 8810 	msr	PRIMASK, r3
}
 8002bfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c00:	f3ef 8310 	mrs	r3, PRIMASK
 8002c04:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c06:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f383 8810 	msr	PRIMASK, r3
}
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	438a      	bics	r2, r1
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	f383 8810 	msr	PRIMASK, r3
}
 8002c30:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2288      	movs	r2, #136	; 0x88
 8002c36:	2120      	movs	r1, #32
 8002c38:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	228c      	movs	r2, #140	; 0x8c
 8002c3e:	2120      	movs	r1, #32
 8002c40:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2290      	movs	r2, #144	; 0x90
 8002c46:	2120      	movs	r1, #32
 8002c48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2284      	movs	r2, #132	; 0x84
 8002c4e:	2100      	movs	r1, #0
 8002c50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e010      	b.n	8002c78 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	425a      	negs	r2, r3
 8002c66:	4153      	adcs	r3, r2
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	1dfb      	adds	r3, r7, #7
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d100      	bne.n	8002c76 <UART_WaitOnFlagUntilTimeout+0x182>
 8002c74:	e747      	b.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b014      	add	sp, #80	; 0x50
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	fffffe5f 	.word	0xfffffe5f

08002c84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b098      	sub	sp, #96	; 0x60
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	1dbb      	adds	r3, r7, #6
 8002c90:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1dba      	adds	r2, r7, #6
 8002c9c:	215c      	movs	r1, #92	; 0x5c
 8002c9e:	8812      	ldrh	r2, [r2, #0]
 8002ca0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1dba      	adds	r2, r7, #6
 8002ca6:	215e      	movs	r1, #94	; 0x5e
 8002ca8:	8812      	ldrh	r2, [r2, #0]
 8002caa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	015b      	lsls	r3, r3, #5
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d10d      	bne.n	8002cda <UART_Start_Receive_IT+0x56>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <UART_Start_Receive_IT+0x4c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2260      	movs	r2, #96	; 0x60
 8002cca:	497b      	ldr	r1, [pc, #492]	; (8002eb8 <UART_Start_Receive_IT+0x234>)
 8002ccc:	5299      	strh	r1, [r3, r2]
 8002cce:	e02e      	b.n	8002d2e <UART_Start_Receive_IT+0xaa>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2260      	movs	r2, #96	; 0x60
 8002cd4:	21ff      	movs	r1, #255	; 0xff
 8002cd6:	5299      	strh	r1, [r3, r2]
 8002cd8:	e029      	b.n	8002d2e <UART_Start_Receive_IT+0xaa>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <UART_Start_Receive_IT+0x7a>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d104      	bne.n	8002cf4 <UART_Start_Receive_IT+0x70>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2260      	movs	r2, #96	; 0x60
 8002cee:	21ff      	movs	r1, #255	; 0xff
 8002cf0:	5299      	strh	r1, [r3, r2]
 8002cf2:	e01c      	b.n	8002d2e <UART_Start_Receive_IT+0xaa>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2260      	movs	r2, #96	; 0x60
 8002cf8:	217f      	movs	r1, #127	; 0x7f
 8002cfa:	5299      	strh	r1, [r3, r2]
 8002cfc:	e017      	b.n	8002d2e <UART_Start_Receive_IT+0xaa>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	055b      	lsls	r3, r3, #21
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d10d      	bne.n	8002d26 <UART_Start_Receive_IT+0xa2>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <UART_Start_Receive_IT+0x98>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2260      	movs	r2, #96	; 0x60
 8002d16:	217f      	movs	r1, #127	; 0x7f
 8002d18:	5299      	strh	r1, [r3, r2]
 8002d1a:	e008      	b.n	8002d2e <UART_Start_Receive_IT+0xaa>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2260      	movs	r2, #96	; 0x60
 8002d20:	213f      	movs	r1, #63	; 0x3f
 8002d22:	5299      	strh	r1, [r3, r2]
 8002d24:	e003      	b.n	8002d2e <UART_Start_Receive_IT+0xaa>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2260      	movs	r2, #96	; 0x60
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2290      	movs	r2, #144	; 0x90
 8002d32:	2100      	movs	r1, #0
 8002d34:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	228c      	movs	r2, #140	; 0x8c
 8002d3a:	2122      	movs	r1, #34	; 0x22
 8002d3c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d42:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8002d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d48:	2301      	movs	r3, #1
 8002d4a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2101      	movs	r1, #1
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d66:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6a:	f383 8810 	msr	PRIMASK, r3
}
 8002d6e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	059b      	lsls	r3, r3, #22
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d150      	bne.n	8002e1e <UART_Start_Receive_IT+0x19a>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2268      	movs	r2, #104	; 0x68
 8002d80:	5a9b      	ldrh	r3, [r3, r2]
 8002d82:	1dba      	adds	r2, r7, #6
 8002d84:	8812      	ldrh	r2, [r2, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d349      	bcc.n	8002e1e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	015b      	lsls	r3, r3, #5
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d107      	bne.n	8002da6 <UART_Start_Receive_IT+0x122>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d103      	bne.n	8002da6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4a46      	ldr	r2, [pc, #280]	; (8002ebc <UART_Start_Receive_IT+0x238>)
 8002da2:	675a      	str	r2, [r3, #116]	; 0x74
 8002da4:	e002      	b.n	8002dac <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a45      	ldr	r2, [pc, #276]	; (8002ec0 <UART_Start_Receive_IT+0x23c>)
 8002daa:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d019      	beq.n	8002de8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db4:	f3ef 8310 	mrs	r3, PRIMASK
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	f383 8810 	msr	PRIMASK, r3
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0049      	lsls	r1, r1, #1
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de2:	f383 8810 	msr	PRIMASK, r3
}
 8002de6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002df0:	657b      	str	r3, [r7, #84]	; 0x54
 8002df2:	2301      	movs	r3, #1
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	f383 8810 	msr	PRIMASK, r3
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	0549      	lsls	r1, r1, #21
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	f383 8810 	msr	PRIMASK, r3
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	e047      	b.n	8002eae <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	015b      	lsls	r3, r3, #5
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d107      	bne.n	8002e3a <UART_Start_Receive_IT+0x1b6>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <UART_Start_Receive_IT+0x240>)
 8002e36:	675a      	str	r2, [r3, #116]	; 0x74
 8002e38:	e002      	b.n	8002e40 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <UART_Start_Receive_IT+0x244>)
 8002e3e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d019      	beq.n	8002e7c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e48:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e4e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e52:	2301      	movs	r3, #1
 8002e54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	f383 8810 	msr	PRIMASK, r3
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2190      	movs	r1, #144	; 0x90
 8002e6a:	0049      	lsls	r1, r1, #1
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	f383 8810 	msr	PRIMASK, r3
}
 8002e7a:	e018      	b.n	8002eae <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e80:	613b      	str	r3, [r7, #16]
  return(result);
 8002e82:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002e84:	653b      	str	r3, [r7, #80]	; 0x50
 8002e86:	2301      	movs	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f383 8810 	msr	PRIMASK, r3
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2120      	movs	r1, #32
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f383 8810 	msr	PRIMASK, r3
}
 8002eac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b018      	add	sp, #96	; 0x60
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	000001ff 	.word	0x000001ff
 8002ebc:	080035f5 	.word	0x080035f5
 8002ec0:	08003309 	.word	0x08003309
 8002ec4:	08003195 	.word	0x08003195
 8002ec8:	08003021 	.word	0x08003021

08002ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08e      	sub	sp, #56	; 0x38
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed8:	617b      	str	r3, [r7, #20]
  return(result);
 8002eda:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f383 8810 	msr	PRIMASK, r3
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4926      	ldr	r1, [pc, #152]	; (8002f90 <UART_EndRxTransfer+0xc4>)
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f383 8810 	msr	PRIMASK, r3
}
 8002f04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f06:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0a:	623b      	str	r3, [r7, #32]
  return(result);
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f10:	2301      	movs	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	f383 8810 	msr	PRIMASK, r3
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	491b      	ldr	r1, [pc, #108]	; (8002f94 <UART_EndRxTransfer+0xc8>)
 8002f28:	400a      	ands	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d118      	bne.n	8002f72 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f40:	f3ef 8310 	mrs	r3, PRIMASK
 8002f44:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f46:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f383 8810 	msr	PRIMASK, r3
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2110      	movs	r1, #16
 8002f62:	438a      	bics	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f383 8810 	msr	PRIMASK, r3
}
 8002f70:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	228c      	movs	r2, #140	; 0x8c
 8002f76:	2120      	movs	r1, #32
 8002f78:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b00e      	add	sp, #56	; 0x38
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	fffffedf 	.word	0xfffffedf
 8002f94:	effffffe 	.word	0xeffffffe

08002f98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	225e      	movs	r2, #94	; 0x5e
 8002faa:	2100      	movs	r1, #0
 8002fac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2256      	movs	r2, #86	; 0x56
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f7ff fae1 	bl	8002580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b004      	add	sp, #16
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fce:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	2301      	movs	r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f383 8810 	msr	PRIMASK, r3
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2140      	movs	r1, #64	; 0x40
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f383 8810 	msr	PRIMASK, r3
}
 8002ffe:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2288      	movs	r2, #136	; 0x88
 8003004:	2120      	movs	r1, #32
 8003006:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f7ff faad 	bl	8002570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	b006      	add	sp, #24
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b090      	sub	sp, #64	; 0x40
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003028:	203e      	movs	r0, #62	; 0x3e
 800302a:	183b      	adds	r3, r7, r0
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	2160      	movs	r1, #96	; 0x60
 8003030:	5a52      	ldrh	r2, [r2, r1]
 8003032:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	228c      	movs	r2, #140	; 0x8c
 8003038:	589b      	ldr	r3, [r3, r2]
 800303a:	2b22      	cmp	r3, #34	; 0x22
 800303c:	d000      	beq.n	8003040 <UART_RxISR_8BIT+0x20>
 800303e:	e09a      	b.n	8003176 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003046:	213c      	movs	r1, #60	; 0x3c
 8003048:	187b      	adds	r3, r7, r1
 800304a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800304c:	187b      	adds	r3, r7, r1
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	183b      	adds	r3, r7, r0
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b2d9      	uxtb	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	400a      	ands	r2, r1
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	225e      	movs	r2, #94	; 0x5e
 8003070:	5a9b      	ldrh	r3, [r3, r2]
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b299      	uxth	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	225e      	movs	r2, #94	; 0x5e
 800307c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	225e      	movs	r2, #94	; 0x5e
 8003082:	5a9b      	ldrh	r3, [r3, r2]
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d000      	beq.n	800308c <UART_RxISR_8BIT+0x6c>
 800308a:	e07c      	b.n	8003186 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308c:	f3ef 8310 	mrs	r3, PRIMASK
 8003090:	61bb      	str	r3, [r7, #24]
  return(result);
 8003092:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003094:	63bb      	str	r3, [r7, #56]	; 0x38
 8003096:	2301      	movs	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4938      	ldr	r1, [pc, #224]	; (8003190 <UART_RxISR_8BIT+0x170>)
 80030ae:	400a      	ands	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030be:	f3ef 8310 	mrs	r3, PRIMASK
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
 80030c8:	2301      	movs	r3, #1
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	f383 8810 	msr	PRIMASK, r3
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	438a      	bics	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	f383 8810 	msr	PRIMASK, r3
}
 80030ee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	228c      	movs	r2, #140	; 0x8c
 80030f4:	2120      	movs	r1, #32
 80030f6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d12f      	bne.n	800316c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003112:	f3ef 8310 	mrs	r3, PRIMASK
 8003116:	60fb      	str	r3, [r7, #12]
  return(result);
 8003118:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800311a:	633b      	str	r3, [r7, #48]	; 0x30
 800311c:	2301      	movs	r3, #1
 800311e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f383 8810 	msr	PRIMASK, r3
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2110      	movs	r1, #16
 8003134:	438a      	bics	r2, r1
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	2210      	movs	r2, #16
 800314c:	4013      	ands	r3, r2
 800314e:	2b10      	cmp	r3, #16
 8003150:	d103      	bne.n	800315a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2210      	movs	r2, #16
 8003158:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	225c      	movs	r2, #92	; 0x5c
 800315e:	5a9a      	ldrh	r2, [r3, r2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	0011      	movs	r1, r2
 8003164:	0018      	movs	r0, r3
 8003166:	f7ff fa13 	bl	8002590 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800316a:	e00c      	b.n	8003186 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0018      	movs	r0, r3
 8003170:	f7fd f93c 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003174:	e007      	b.n	8003186 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2108      	movs	r1, #8
 8003182:	430a      	orrs	r2, r1
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	b010      	add	sp, #64	; 0x40
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	fffffedf 	.word	0xfffffedf

08003194 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b090      	sub	sp, #64	; 0x40
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800319c:	203e      	movs	r0, #62	; 0x3e
 800319e:	183b      	adds	r3, r7, r0
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	2160      	movs	r1, #96	; 0x60
 80031a4:	5a52      	ldrh	r2, [r2, r1]
 80031a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	228c      	movs	r2, #140	; 0x8c
 80031ac:	589b      	ldr	r3, [r3, r2]
 80031ae:	2b22      	cmp	r3, #34	; 0x22
 80031b0:	d000      	beq.n	80031b4 <UART_RxISR_16BIT+0x20>
 80031b2:	e09a      	b.n	80032ea <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ba:	213c      	movs	r1, #60	; 0x3c
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	183a      	adds	r2, r7, r0
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	8812      	ldrh	r2, [r2, #0]
 80031ce:	4013      	ands	r3, r2
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	1c9a      	adds	r2, r3, #2
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	225e      	movs	r2, #94	; 0x5e
 80031e4:	5a9b      	ldrh	r3, [r3, r2]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b299      	uxth	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	225e      	movs	r2, #94	; 0x5e
 80031f0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	225e      	movs	r2, #94	; 0x5e
 80031f6:	5a9b      	ldrh	r3, [r3, r2]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d000      	beq.n	8003200 <UART_RxISR_16BIT+0x6c>
 80031fe:	e07c      	b.n	80032fa <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003200:	f3ef 8310 	mrs	r3, PRIMASK
 8003204:	617b      	str	r3, [r7, #20]
  return(result);
 8003206:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
 800320a:	2301      	movs	r3, #1
 800320c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f383 8810 	msr	PRIMASK, r3
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4938      	ldr	r1, [pc, #224]	; (8003304 <UART_RxISR_16BIT+0x170>)
 8003222:	400a      	ands	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003228:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f383 8810 	msr	PRIMASK, r3
}
 8003230:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003232:	f3ef 8310 	mrs	r3, PRIMASK
 8003236:	623b      	str	r3, [r7, #32]
  return(result);
 8003238:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323a:	633b      	str	r3, [r7, #48]	; 0x30
 800323c:	2301      	movs	r3, #1
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	f383 8810 	msr	PRIMASK, r3
}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2101      	movs	r1, #1
 8003254:	438a      	bics	r2, r1
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	f383 8810 	msr	PRIMASK, r3
}
 8003262:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	228c      	movs	r2, #140	; 0x8c
 8003268:	2120      	movs	r1, #32
 800326a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d12f      	bne.n	80032e0 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003286:	f3ef 8310 	mrs	r3, PRIMASK
 800328a:	60bb      	str	r3, [r7, #8]
  return(result);
 800328c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003290:	2301      	movs	r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f383 8810 	msr	PRIMASK, r3
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2110      	movs	r1, #16
 80032a8:	438a      	bics	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	2210      	movs	r2, #16
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d103      	bne.n	80032ce <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2210      	movs	r2, #16
 80032cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	225c      	movs	r2, #92	; 0x5c
 80032d2:	5a9a      	ldrh	r2, [r3, r2]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	0011      	movs	r1, r2
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff f959 	bl	8002590 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032de:	e00c      	b.n	80032fa <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7fd f882 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 80032e8:	e007      	b.n	80032fa <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2108      	movs	r1, #8
 80032f6:	430a      	orrs	r2, r1
 80032f8:	619a      	str	r2, [r3, #24]
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b010      	add	sp, #64	; 0x40
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	fffffedf 	.word	0xfffffedf

08003308 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b09c      	sub	sp, #112	; 0x70
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003310:	236a      	movs	r3, #106	; 0x6a
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	2160      	movs	r1, #96	; 0x60
 8003318:	5a52      	ldrh	r2, [r2, r1]
 800331a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	228c      	movs	r2, #140	; 0x8c
 8003338:	589b      	ldr	r3, [r3, r2]
 800333a:	2b22      	cmp	r3, #34	; 0x22
 800333c:	d000      	beq.n	8003340 <UART_RxISR_8BIT_FIFOEN+0x38>
 800333e:	e144      	b.n	80035ca <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003340:	235e      	movs	r3, #94	; 0x5e
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	2168      	movs	r1, #104	; 0x68
 8003348:	5a52      	ldrh	r2, [r2, r1]
 800334a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800334c:	e0eb      	b.n	8003526 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003354:	215c      	movs	r1, #92	; 0x5c
 8003356:	187b      	adds	r3, r7, r1
 8003358:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800335a:	187b      	adds	r3, r7, r1
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	236a      	movs	r3, #106	; 0x6a
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b2d9      	uxtb	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	400a      	ands	r2, r1
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	225e      	movs	r2, #94	; 0x5e
 8003380:	5a9b      	ldrh	r3, [r3, r2]
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b299      	uxth	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	225e      	movs	r2, #94	; 0x5e
 800338c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003398:	2207      	movs	r2, #7
 800339a:	4013      	ands	r3, r2
 800339c:	d049      	beq.n	8003432 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800339e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a0:	2201      	movs	r2, #1
 80033a2:	4013      	ands	r3, r2
 80033a4:	d010      	beq.n	80033c8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80033a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4013      	ands	r3, r2
 80033ae:	d00b      	beq.n	80033c8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2290      	movs	r2, #144	; 0x90
 80033bc:	589b      	ldr	r3, [r3, r2]
 80033be:	2201      	movs	r2, #1
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2190      	movs	r1, #144	; 0x90
 80033c6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ca:	2202      	movs	r2, #2
 80033cc:	4013      	ands	r3, r2
 80033ce:	d00f      	beq.n	80033f0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80033d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033d2:	2201      	movs	r2, #1
 80033d4:	4013      	ands	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2202      	movs	r2, #2
 80033de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2290      	movs	r2, #144	; 0x90
 80033e4:	589b      	ldr	r3, [r3, r2]
 80033e6:	2204      	movs	r2, #4
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2190      	movs	r1, #144	; 0x90
 80033ee:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f2:	2204      	movs	r2, #4
 80033f4:	4013      	ands	r3, r2
 80033f6:	d00f      	beq.n	8003418 <UART_RxISR_8BIT_FIFOEN+0x110>
 80033f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033fa:	2201      	movs	r2, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	d00b      	beq.n	8003418 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2204      	movs	r2, #4
 8003406:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2290      	movs	r2, #144	; 0x90
 800340c:	589b      	ldr	r3, [r3, r2]
 800340e:	2202      	movs	r2, #2
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2190      	movs	r1, #144	; 0x90
 8003416:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2290      	movs	r2, #144	; 0x90
 800341c:	589b      	ldr	r3, [r3, r2]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff f8ab 	bl	8002580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2290      	movs	r2, #144	; 0x90
 800342e:	2100      	movs	r1, #0
 8003430:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	225e      	movs	r2, #94	; 0x5e
 8003436:	5a9b      	ldrh	r3, [r3, r2]
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d173      	bne.n	8003526 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343e:	f3ef 8310 	mrs	r3, PRIMASK
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003446:	65bb      	str	r3, [r7, #88]	; 0x58
 8003448:	2301      	movs	r3, #1
 800344a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4961      	ldr	r1, [pc, #388]	; (80035e4 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003460:	400a      	ands	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346a:	f383 8810 	msr	PRIMASK, r3
}
 800346e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003470:	f3ef 8310 	mrs	r3, PRIMASK
 8003474:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003478:	657b      	str	r3, [r7, #84]	; 0x54
 800347a:	2301      	movs	r3, #1
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003480:	f383 8810 	msr	PRIMASK, r3
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4955      	ldr	r1, [pc, #340]	; (80035e8 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003492:	400a      	ands	r2, r1
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003498:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	228c      	movs	r2, #140	; 0x8c
 80034a6:	2120      	movs	r1, #32
 80034a8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d12f      	bne.n	800351e <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c4:	f3ef 8310 	mrs	r3, PRIMASK
 80034c8:	623b      	str	r3, [r7, #32]
  return(result);
 80034ca:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034cc:	653b      	str	r3, [r7, #80]	; 0x50
 80034ce:	2301      	movs	r3, #1
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	f383 8810 	msr	PRIMASK, r3
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2110      	movs	r1, #16
 80034e6:	438a      	bics	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	f383 8810 	msr	PRIMASK, r3
}
 80034f4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2210      	movs	r2, #16
 80034fe:	4013      	ands	r3, r2
 8003500:	2b10      	cmp	r3, #16
 8003502:	d103      	bne.n	800350c <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2210      	movs	r2, #16
 800350a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	225c      	movs	r2, #92	; 0x5c
 8003510:	5a9a      	ldrh	r2, [r3, r2]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0011      	movs	r1, r2
 8003516:	0018      	movs	r0, r3
 8003518:	f7ff f83a 	bl	8002590 <HAL_UARTEx_RxEventCallback>
 800351c:	e003      	b.n	8003526 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	0018      	movs	r0, r3
 8003522:	f7fc ff63 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003526:	235e      	movs	r3, #94	; 0x5e
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d004      	beq.n	800353a <UART_RxISR_8BIT_FIFOEN+0x232>
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	2220      	movs	r2, #32
 8003534:	4013      	ands	r3, r2
 8003536:	d000      	beq.n	800353a <UART_RxISR_8BIT_FIFOEN+0x232>
 8003538:	e709      	b.n	800334e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800353a:	204e      	movs	r0, #78	; 0x4e
 800353c:	183b      	adds	r3, r7, r0
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	215e      	movs	r1, #94	; 0x5e
 8003542:	5a52      	ldrh	r2, [r2, r1]
 8003544:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003546:	0001      	movs	r1, r0
 8003548:	187b      	adds	r3, r7, r1
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d044      	beq.n	80035da <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2268      	movs	r2, #104	; 0x68
 8003554:	5a9b      	ldrh	r3, [r3, r2]
 8003556:	187a      	adds	r2, r7, r1
 8003558:	8812      	ldrh	r2, [r2, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d23d      	bcs.n	80035da <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355e:	f3ef 8310 	mrs	r3, PRIMASK
 8003562:	60bb      	str	r3, [r7, #8]
  return(result);
 8003564:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003566:	64bb      	str	r3, [r7, #72]	; 0x48
 8003568:	2301      	movs	r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	491b      	ldr	r1, [pc, #108]	; (80035ec <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8003580:	400a      	ands	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f383 8810 	msr	PRIMASK, r3
}
 800358e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8003594:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003596:	f3ef 8310 	mrs	r3, PRIMASK
 800359a:	617b      	str	r3, [r7, #20]
  return(result);
 800359c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800359e:	647b      	str	r3, [r7, #68]	; 0x44
 80035a0:	2301      	movs	r3, #1
 80035a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2120      	movs	r1, #32
 80035b8:	430a      	orrs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f383 8810 	msr	PRIMASK, r3
}
 80035c6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035c8:	e007      	b.n	80035da <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2108      	movs	r1, #8
 80035d6:	430a      	orrs	r2, r1
 80035d8:	619a      	str	r2, [r3, #24]
}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	46bd      	mov	sp, r7
 80035de:	b01c      	add	sp, #112	; 0x70
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	fffffeff 	.word	0xfffffeff
 80035e8:	effffffe 	.word	0xeffffffe
 80035ec:	efffffff 	.word	0xefffffff
 80035f0:	08003021 	.word	0x08003021

080035f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b09e      	sub	sp, #120	; 0x78
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80035fc:	2372      	movs	r3, #114	; 0x72
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	2160      	movs	r1, #96	; 0x60
 8003604:	5a52      	ldrh	r2, [r2, r1]
 8003606:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	228c      	movs	r2, #140	; 0x8c
 8003624:	589b      	ldr	r3, [r3, r2]
 8003626:	2b22      	cmp	r3, #34	; 0x22
 8003628:	d000      	beq.n	800362c <UART_RxISR_16BIT_FIFOEN+0x38>
 800362a:	e144      	b.n	80038b6 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800362c:	2366      	movs	r3, #102	; 0x66
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	2168      	movs	r1, #104	; 0x68
 8003634:	5a52      	ldrh	r2, [r2, r1]
 8003636:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003638:	e0eb      	b.n	8003812 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003640:	2164      	movs	r1, #100	; 0x64
 8003642:	187b      	adds	r3, r7, r1
 8003644:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800364c:	187b      	adds	r3, r7, r1
 800364e:	2272      	movs	r2, #114	; 0x72
 8003650:	18ba      	adds	r2, r7, r2
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	8812      	ldrh	r2, [r2, #0]
 8003656:	4013      	ands	r3, r2
 8003658:	b29a      	uxth	r2, r3
 800365a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800365c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003662:	1c9a      	adds	r2, r3, #2
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	225e      	movs	r2, #94	; 0x5e
 800366c:	5a9b      	ldrh	r3, [r3, r2]
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b299      	uxth	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	225e      	movs	r2, #94	; 0x5e
 8003678:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003684:	2207      	movs	r2, #7
 8003686:	4013      	ands	r3, r2
 8003688:	d049      	beq.n	800371e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800368a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368c:	2201      	movs	r2, #1
 800368e:	4013      	ands	r3, r2
 8003690:	d010      	beq.n	80036b4 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8003692:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4013      	ands	r3, r2
 800369a:	d00b      	beq.n	80036b4 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2290      	movs	r2, #144	; 0x90
 80036a8:	589b      	ldr	r3, [r3, r2]
 80036aa:	2201      	movs	r2, #1
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2190      	movs	r1, #144	; 0x90
 80036b2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b6:	2202      	movs	r2, #2
 80036b8:	4013      	ands	r3, r2
 80036ba:	d00f      	beq.n	80036dc <UART_RxISR_16BIT_FIFOEN+0xe8>
 80036bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036be:	2201      	movs	r2, #1
 80036c0:	4013      	ands	r3, r2
 80036c2:	d00b      	beq.n	80036dc <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2202      	movs	r2, #2
 80036ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2290      	movs	r2, #144	; 0x90
 80036d0:	589b      	ldr	r3, [r3, r2]
 80036d2:	2204      	movs	r2, #4
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2190      	movs	r1, #144	; 0x90
 80036da:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036de:	2204      	movs	r2, #4
 80036e0:	4013      	ands	r3, r2
 80036e2:	d00f      	beq.n	8003704 <UART_RxISR_16BIT_FIFOEN+0x110>
 80036e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e6:	2201      	movs	r2, #1
 80036e8:	4013      	ands	r3, r2
 80036ea:	d00b      	beq.n	8003704 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2204      	movs	r2, #4
 80036f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2290      	movs	r2, #144	; 0x90
 80036f8:	589b      	ldr	r3, [r3, r2]
 80036fa:	2202      	movs	r2, #2
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2190      	movs	r1, #144	; 0x90
 8003702:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2290      	movs	r2, #144	; 0x90
 8003708:	589b      	ldr	r3, [r3, r2]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	0018      	movs	r0, r3
 8003712:	f7fe ff35 	bl	8002580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2290      	movs	r2, #144	; 0x90
 800371a:	2100      	movs	r1, #0
 800371c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	225e      	movs	r2, #94	; 0x5e
 8003722:	5a9b      	ldrh	r3, [r3, r2]
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d173      	bne.n	8003812 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372a:	f3ef 8310 	mrs	r3, PRIMASK
 800372e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003732:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003734:	2301      	movs	r3, #1
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373a:	f383 8810 	msr	PRIMASK, r3
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4961      	ldr	r1, [pc, #388]	; (80038d0 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800374c:	400a      	ands	r2, r1
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003752:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	f383 8810 	msr	PRIMASK, r3
}
 800375a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375c:	f3ef 8310 	mrs	r3, PRIMASK
 8003760:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003764:	65bb      	str	r3, [r7, #88]	; 0x58
 8003766:	2301      	movs	r3, #1
 8003768:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4955      	ldr	r1, [pc, #340]	; (80038d4 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800377e:	400a      	ands	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003784:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	228c      	movs	r2, #140	; 0x8c
 8003792:	2120      	movs	r1, #32
 8003794:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d12f      	bne.n	800380a <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b0:	f3ef 8310 	mrs	r3, PRIMASK
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b8:	657b      	str	r3, [r7, #84]	; 0x54
 80037ba:	2301      	movs	r3, #1
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	f383 8810 	msr	PRIMASK, r3
}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2110      	movs	r1, #16
 80037d2:	438a      	bics	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	f383 8810 	msr	PRIMASK, r3
}
 80037e0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	2210      	movs	r2, #16
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d103      	bne.n	80037f8 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2210      	movs	r2, #16
 80037f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	225c      	movs	r2, #92	; 0x5c
 80037fc:	5a9a      	ldrh	r2, [r3, r2]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	0011      	movs	r1, r2
 8003802:	0018      	movs	r0, r3
 8003804:	f7fe fec4 	bl	8002590 <HAL_UARTEx_RxEventCallback>
 8003808:	e003      	b.n	8003812 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	0018      	movs	r0, r3
 800380e:	f7fc fded 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003812:	2366      	movs	r3, #102	; 0x66
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <UART_RxISR_16BIT_FIFOEN+0x232>
 800381c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800381e:	2220      	movs	r2, #32
 8003820:	4013      	ands	r3, r2
 8003822:	d000      	beq.n	8003826 <UART_RxISR_16BIT_FIFOEN+0x232>
 8003824:	e709      	b.n	800363a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003826:	2052      	movs	r0, #82	; 0x52
 8003828:	183b      	adds	r3, r7, r0
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	215e      	movs	r1, #94	; 0x5e
 800382e:	5a52      	ldrh	r2, [r2, r1]
 8003830:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003832:	0001      	movs	r1, r0
 8003834:	187b      	adds	r3, r7, r1
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d044      	beq.n	80038c6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2268      	movs	r2, #104	; 0x68
 8003840:	5a9b      	ldrh	r3, [r3, r2]
 8003842:	187a      	adds	r2, r7, r1
 8003844:	8812      	ldrh	r2, [r2, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d23d      	bcs.n	80038c6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384a:	f3ef 8310 	mrs	r3, PRIMASK
 800384e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003850:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	2301      	movs	r3, #1
 8003856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f383 8810 	msr	PRIMASK, r3
}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	491b      	ldr	r1, [pc, #108]	; (80038d8 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800386c:	400a      	ands	r2, r1
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003872:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f383 8810 	msr	PRIMASK, r3
}
 800387a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a17      	ldr	r2, [pc, #92]	; (80038dc <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8003880:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003882:	f3ef 8310 	mrs	r3, PRIMASK
 8003886:	61bb      	str	r3, [r7, #24]
  return(result);
 8003888:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800388a:	64bb      	str	r3, [r7, #72]	; 0x48
 800388c:	2301      	movs	r3, #1
 800388e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f383 8810 	msr	PRIMASK, r3
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2120      	movs	r1, #32
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f383 8810 	msr	PRIMASK, r3
}
 80038b2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038b4:	e007      	b.n	80038c6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2108      	movs	r1, #8
 80038c2:	430a      	orrs	r2, r1
 80038c4:	619a      	str	r2, [r3, #24]
}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b01e      	add	sp, #120	; 0x78
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	fffffeff 	.word	0xfffffeff
 80038d4:	effffffe 	.word	0xeffffffe
 80038d8:	efffffff 	.word	0xefffffff
 80038dc:	08003195 	.word	0x08003195

080038e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038e8:	46c0      	nop			; (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	b002      	add	sp, #8
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2284      	movs	r2, #132	; 0x84
 800391c:	5c9b      	ldrb	r3, [r3, r2]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_UARTEx_DisableFifoMode+0x16>
 8003922:	2302      	movs	r3, #2
 8003924:	e027      	b.n	8003976 <HAL_UARTEx_DisableFifoMode+0x66>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2284      	movs	r2, #132	; 0x84
 800392a:	2101      	movs	r1, #1
 800392c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2288      	movs	r2, #136	; 0x88
 8003932:	2124      	movs	r1, #36	; 0x24
 8003934:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2101      	movs	r1, #1
 800394a:	438a      	bics	r2, r1
 800394c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003952:	4013      	ands	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2288      	movs	r2, #136	; 0x88
 8003968:	2120      	movs	r1, #32
 800396a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2284      	movs	r2, #132	; 0x84
 8003970:	2100      	movs	r1, #0
 8003972:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b004      	add	sp, #16
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	dfffffff 	.word	0xdfffffff

08003984 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2284      	movs	r2, #132	; 0x84
 8003992:	5c9b      	ldrb	r3, [r3, r2]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003998:	2302      	movs	r3, #2
 800399a:	e02e      	b.n	80039fa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2284      	movs	r2, #132	; 0x84
 80039a0:	2101      	movs	r1, #1
 80039a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2288      	movs	r2, #136	; 0x88
 80039a8:	2124      	movs	r1, #36	; 0x24
 80039aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2101      	movs	r1, #1
 80039c0:	438a      	bics	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	08d9      	lsrs	r1, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	0018      	movs	r0, r3
 80039dc:	f000 f854 	bl	8003a88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2288      	movs	r2, #136	; 0x88
 80039ec:	2120      	movs	r1, #32
 80039ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2284      	movs	r2, #132	; 0x84
 80039f4:	2100      	movs	r1, #0
 80039f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b004      	add	sp, #16
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2284      	movs	r2, #132	; 0x84
 8003a12:	5c9b      	ldrb	r3, [r3, r2]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e02f      	b.n	8003a7c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2284      	movs	r2, #132	; 0x84
 8003a20:	2101      	movs	r1, #1
 8003a22:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2288      	movs	r2, #136	; 0x88
 8003a28:	2124      	movs	r1, #36	; 0x24
 8003a2a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2101      	movs	r1, #1
 8003a40:	438a      	bics	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	0019      	movs	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 f813 	bl	8003a88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2288      	movs	r2, #136	; 0x88
 8003a6e:	2120      	movs	r1, #32
 8003a70:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2284      	movs	r2, #132	; 0x84
 8003a76:	2100      	movs	r1, #0
 8003a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b004      	add	sp, #16
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	f1ffffff 	.word	0xf1ffffff

08003a88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d108      	bne.n	8003aaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	226a      	movs	r2, #106	; 0x6a
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2268      	movs	r2, #104	; 0x68
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003aa8:	e043      	b.n	8003b32 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003aaa:	260f      	movs	r6, #15
 8003aac:	19bb      	adds	r3, r7, r6
 8003aae:	2208      	movs	r2, #8
 8003ab0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ab2:	200e      	movs	r0, #14
 8003ab4:	183b      	adds	r3, r7, r0
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	0e5b      	lsrs	r3, r3, #25
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	240d      	movs	r4, #13
 8003ac6:	193b      	adds	r3, r7, r4
 8003ac8:	2107      	movs	r1, #7
 8003aca:	400a      	ands	r2, r1
 8003acc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	0f5b      	lsrs	r3, r3, #29
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	250c      	movs	r5, #12
 8003ada:	197b      	adds	r3, r7, r5
 8003adc:	2107      	movs	r1, #7
 8003ade:	400a      	ands	r2, r1
 8003ae0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ae2:	183b      	adds	r3, r7, r0
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	197a      	adds	r2, r7, r5
 8003ae8:	7812      	ldrb	r2, [r2, #0]
 8003aea:	4914      	ldr	r1, [pc, #80]	; (8003b3c <UARTEx_SetNbDataToProcess+0xb4>)
 8003aec:	5c8a      	ldrb	r2, [r1, r2]
 8003aee:	435a      	muls	r2, r3
 8003af0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003af2:	197b      	adds	r3, r7, r5
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <UARTEx_SetNbDataToProcess+0xb8>)
 8003af8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003afa:	0019      	movs	r1, r3
 8003afc:	f7fc fb8a 	bl	8000214 <__divsi3>
 8003b00:	0003      	movs	r3, r0
 8003b02:	b299      	uxth	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	226a      	movs	r2, #106	; 0x6a
 8003b08:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b0a:	19bb      	adds	r3, r7, r6
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	193a      	adds	r2, r7, r4
 8003b10:	7812      	ldrb	r2, [r2, #0]
 8003b12:	490a      	ldr	r1, [pc, #40]	; (8003b3c <UARTEx_SetNbDataToProcess+0xb4>)
 8003b14:	5c8a      	ldrb	r2, [r1, r2]
 8003b16:	435a      	muls	r2, r3
 8003b18:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b1a:	193b      	adds	r3, r7, r4
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b20:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b22:	0019      	movs	r1, r3
 8003b24:	f7fc fb76 	bl	8000214 <__divsi3>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	b299      	uxth	r1, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2268      	movs	r2, #104	; 0x68
 8003b30:	5299      	strh	r1, [r3, r2]
}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b005      	add	sp, #20
 8003b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	08003c2c 	.word	0x08003c2c
 8003b40:	08003c34 	.word	0x08003c34

08003b44 <__libc_init_array>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	2600      	movs	r6, #0
 8003b48:	4d0c      	ldr	r5, [pc, #48]	; (8003b7c <__libc_init_array+0x38>)
 8003b4a:	4c0d      	ldr	r4, [pc, #52]	; (8003b80 <__libc_init_array+0x3c>)
 8003b4c:	1b64      	subs	r4, r4, r5
 8003b4e:	10a4      	asrs	r4, r4, #2
 8003b50:	42a6      	cmp	r6, r4
 8003b52:	d109      	bne.n	8003b68 <__libc_init_array+0x24>
 8003b54:	2600      	movs	r6, #0
 8003b56:	f000 f821 	bl	8003b9c <_init>
 8003b5a:	4d0a      	ldr	r5, [pc, #40]	; (8003b84 <__libc_init_array+0x40>)
 8003b5c:	4c0a      	ldr	r4, [pc, #40]	; (8003b88 <__libc_init_array+0x44>)
 8003b5e:	1b64      	subs	r4, r4, r5
 8003b60:	10a4      	asrs	r4, r4, #2
 8003b62:	42a6      	cmp	r6, r4
 8003b64:	d105      	bne.n	8003b72 <__libc_init_array+0x2e>
 8003b66:	bd70      	pop	{r4, r5, r6, pc}
 8003b68:	00b3      	lsls	r3, r6, #2
 8003b6a:	58eb      	ldr	r3, [r5, r3]
 8003b6c:	4798      	blx	r3
 8003b6e:	3601      	adds	r6, #1
 8003b70:	e7ee      	b.n	8003b50 <__libc_init_array+0xc>
 8003b72:	00b3      	lsls	r3, r6, #2
 8003b74:	58eb      	ldr	r3, [r5, r3]
 8003b76:	4798      	blx	r3
 8003b78:	3601      	adds	r6, #1
 8003b7a:	e7f2      	b.n	8003b62 <__libc_init_array+0x1e>
 8003b7c:	08003c3c 	.word	0x08003c3c
 8003b80:	08003c3c 	.word	0x08003c3c
 8003b84:	08003c3c 	.word	0x08003c3c
 8003b88:	08003c40 	.word	0x08003c40

08003b8c <memset>:
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	1882      	adds	r2, r0, r2
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d100      	bne.n	8003b96 <memset+0xa>
 8003b94:	4770      	bx	lr
 8003b96:	7019      	strb	r1, [r3, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	e7f9      	b.n	8003b90 <memset+0x4>

08003b9c <_init>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr

08003ba8 <_fini>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr


Temp_internal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003780  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f8  080038f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038f8  080038f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f8  080038f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  0800390c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  0800390c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005087  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117d  00000000  00000000  000250bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  00026238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000558  00000000  00000000  00026828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001459c  00000000  00000000  00026d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000064de  00000000  00000000  0003b31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000838a6  00000000  00000000  000417fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c50a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001560  00000000  00000000  000c50f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003820 	.word	0x08003820

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003820 	.word	0x08003820

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_dadd>:
 8000218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021a:	464f      	mov	r7, r9
 800021c:	4646      	mov	r6, r8
 800021e:	46d6      	mov	lr, sl
 8000220:	000d      	movs	r5, r1
 8000222:	0004      	movs	r4, r0
 8000224:	b5c0      	push	{r6, r7, lr}
 8000226:	001f      	movs	r7, r3
 8000228:	0011      	movs	r1, r2
 800022a:	0328      	lsls	r0, r5, #12
 800022c:	0f62      	lsrs	r2, r4, #29
 800022e:	0a40      	lsrs	r0, r0, #9
 8000230:	4310      	orrs	r0, r2
 8000232:	007a      	lsls	r2, r7, #1
 8000234:	0d52      	lsrs	r2, r2, #21
 8000236:	00e3      	lsls	r3, r4, #3
 8000238:	033c      	lsls	r4, r7, #12
 800023a:	4691      	mov	r9, r2
 800023c:	0a64      	lsrs	r4, r4, #9
 800023e:	0ffa      	lsrs	r2, r7, #31
 8000240:	0f4f      	lsrs	r7, r1, #29
 8000242:	006e      	lsls	r6, r5, #1
 8000244:	4327      	orrs	r7, r4
 8000246:	4692      	mov	sl, r2
 8000248:	46b8      	mov	r8, r7
 800024a:	0d76      	lsrs	r6, r6, #21
 800024c:	0fed      	lsrs	r5, r5, #31
 800024e:	00c9      	lsls	r1, r1, #3
 8000250:	4295      	cmp	r5, r2
 8000252:	d100      	bne.n	8000256 <__aeabi_dadd+0x3e>
 8000254:	e099      	b.n	800038a <__aeabi_dadd+0x172>
 8000256:	464c      	mov	r4, r9
 8000258:	1b34      	subs	r4, r6, r4
 800025a:	46a4      	mov	ip, r4
 800025c:	2c00      	cmp	r4, #0
 800025e:	dc00      	bgt.n	8000262 <__aeabi_dadd+0x4a>
 8000260:	e07c      	b.n	800035c <__aeabi_dadd+0x144>
 8000262:	464a      	mov	r2, r9
 8000264:	2a00      	cmp	r2, #0
 8000266:	d100      	bne.n	800026a <__aeabi_dadd+0x52>
 8000268:	e0b8      	b.n	80003dc <__aeabi_dadd+0x1c4>
 800026a:	4ac5      	ldr	r2, [pc, #788]	; (8000580 <__aeabi_dadd+0x368>)
 800026c:	4296      	cmp	r6, r2
 800026e:	d100      	bne.n	8000272 <__aeabi_dadd+0x5a>
 8000270:	e11c      	b.n	80004ac <__aeabi_dadd+0x294>
 8000272:	2280      	movs	r2, #128	; 0x80
 8000274:	003c      	movs	r4, r7
 8000276:	0412      	lsls	r2, r2, #16
 8000278:	4314      	orrs	r4, r2
 800027a:	46a0      	mov	r8, r4
 800027c:	4662      	mov	r2, ip
 800027e:	2a38      	cmp	r2, #56	; 0x38
 8000280:	dd00      	ble.n	8000284 <__aeabi_dadd+0x6c>
 8000282:	e161      	b.n	8000548 <__aeabi_dadd+0x330>
 8000284:	2a1f      	cmp	r2, #31
 8000286:	dd00      	ble.n	800028a <__aeabi_dadd+0x72>
 8000288:	e1cc      	b.n	8000624 <__aeabi_dadd+0x40c>
 800028a:	4664      	mov	r4, ip
 800028c:	2220      	movs	r2, #32
 800028e:	1b12      	subs	r2, r2, r4
 8000290:	4644      	mov	r4, r8
 8000292:	4094      	lsls	r4, r2
 8000294:	000f      	movs	r7, r1
 8000296:	46a1      	mov	r9, r4
 8000298:	4664      	mov	r4, ip
 800029a:	4091      	lsls	r1, r2
 800029c:	40e7      	lsrs	r7, r4
 800029e:	464c      	mov	r4, r9
 80002a0:	1e4a      	subs	r2, r1, #1
 80002a2:	4191      	sbcs	r1, r2
 80002a4:	433c      	orrs	r4, r7
 80002a6:	4642      	mov	r2, r8
 80002a8:	4321      	orrs	r1, r4
 80002aa:	4664      	mov	r4, ip
 80002ac:	40e2      	lsrs	r2, r4
 80002ae:	1a80      	subs	r0, r0, r2
 80002b0:	1a5c      	subs	r4, r3, r1
 80002b2:	42a3      	cmp	r3, r4
 80002b4:	419b      	sbcs	r3, r3
 80002b6:	425f      	negs	r7, r3
 80002b8:	1bc7      	subs	r7, r0, r7
 80002ba:	023b      	lsls	r3, r7, #8
 80002bc:	d400      	bmi.n	80002c0 <__aeabi_dadd+0xa8>
 80002be:	e0d0      	b.n	8000462 <__aeabi_dadd+0x24a>
 80002c0:	027f      	lsls	r7, r7, #9
 80002c2:	0a7f      	lsrs	r7, r7, #9
 80002c4:	2f00      	cmp	r7, #0
 80002c6:	d100      	bne.n	80002ca <__aeabi_dadd+0xb2>
 80002c8:	e0ff      	b.n	80004ca <__aeabi_dadd+0x2b2>
 80002ca:	0038      	movs	r0, r7
 80002cc:	f001 fc82 	bl	8001bd4 <__clzsi2>
 80002d0:	0001      	movs	r1, r0
 80002d2:	3908      	subs	r1, #8
 80002d4:	2320      	movs	r3, #32
 80002d6:	0022      	movs	r2, r4
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	408f      	lsls	r7, r1
 80002dc:	40da      	lsrs	r2, r3
 80002de:	408c      	lsls	r4, r1
 80002e0:	4317      	orrs	r7, r2
 80002e2:	42b1      	cmp	r1, r6
 80002e4:	da00      	bge.n	80002e8 <__aeabi_dadd+0xd0>
 80002e6:	e0ff      	b.n	80004e8 <__aeabi_dadd+0x2d0>
 80002e8:	1b89      	subs	r1, r1, r6
 80002ea:	1c4b      	adds	r3, r1, #1
 80002ec:	2b1f      	cmp	r3, #31
 80002ee:	dd00      	ble.n	80002f2 <__aeabi_dadd+0xda>
 80002f0:	e0a8      	b.n	8000444 <__aeabi_dadd+0x22c>
 80002f2:	2220      	movs	r2, #32
 80002f4:	0039      	movs	r1, r7
 80002f6:	1ad2      	subs	r2, r2, r3
 80002f8:	0020      	movs	r0, r4
 80002fa:	4094      	lsls	r4, r2
 80002fc:	4091      	lsls	r1, r2
 80002fe:	40d8      	lsrs	r0, r3
 8000300:	1e62      	subs	r2, r4, #1
 8000302:	4194      	sbcs	r4, r2
 8000304:	40df      	lsrs	r7, r3
 8000306:	2600      	movs	r6, #0
 8000308:	4301      	orrs	r1, r0
 800030a:	430c      	orrs	r4, r1
 800030c:	0763      	lsls	r3, r4, #29
 800030e:	d009      	beq.n	8000324 <__aeabi_dadd+0x10c>
 8000310:	230f      	movs	r3, #15
 8000312:	4023      	ands	r3, r4
 8000314:	2b04      	cmp	r3, #4
 8000316:	d005      	beq.n	8000324 <__aeabi_dadd+0x10c>
 8000318:	1d23      	adds	r3, r4, #4
 800031a:	42a3      	cmp	r3, r4
 800031c:	41a4      	sbcs	r4, r4
 800031e:	4264      	negs	r4, r4
 8000320:	193f      	adds	r7, r7, r4
 8000322:	001c      	movs	r4, r3
 8000324:	023b      	lsls	r3, r7, #8
 8000326:	d400      	bmi.n	800032a <__aeabi_dadd+0x112>
 8000328:	e09e      	b.n	8000468 <__aeabi_dadd+0x250>
 800032a:	4b95      	ldr	r3, [pc, #596]	; (8000580 <__aeabi_dadd+0x368>)
 800032c:	3601      	adds	r6, #1
 800032e:	429e      	cmp	r6, r3
 8000330:	d100      	bne.n	8000334 <__aeabi_dadd+0x11c>
 8000332:	e0b7      	b.n	80004a4 <__aeabi_dadd+0x28c>
 8000334:	4a93      	ldr	r2, [pc, #588]	; (8000584 <__aeabi_dadd+0x36c>)
 8000336:	08e4      	lsrs	r4, r4, #3
 8000338:	4017      	ands	r7, r2
 800033a:	077b      	lsls	r3, r7, #29
 800033c:	0571      	lsls	r1, r6, #21
 800033e:	027f      	lsls	r7, r7, #9
 8000340:	4323      	orrs	r3, r4
 8000342:	0b3f      	lsrs	r7, r7, #12
 8000344:	0d4a      	lsrs	r2, r1, #21
 8000346:	0512      	lsls	r2, r2, #20
 8000348:	433a      	orrs	r2, r7
 800034a:	07ed      	lsls	r5, r5, #31
 800034c:	432a      	orrs	r2, r5
 800034e:	0018      	movs	r0, r3
 8000350:	0011      	movs	r1, r2
 8000352:	bce0      	pop	{r5, r6, r7}
 8000354:	46ba      	mov	sl, r7
 8000356:	46b1      	mov	r9, r6
 8000358:	46a8      	mov	r8, r5
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	2c00      	cmp	r4, #0
 800035e:	d04b      	beq.n	80003f8 <__aeabi_dadd+0x1e0>
 8000360:	464c      	mov	r4, r9
 8000362:	1ba4      	subs	r4, r4, r6
 8000364:	46a4      	mov	ip, r4
 8000366:	2e00      	cmp	r6, #0
 8000368:	d000      	beq.n	800036c <__aeabi_dadd+0x154>
 800036a:	e123      	b.n	80005b4 <__aeabi_dadd+0x39c>
 800036c:	0004      	movs	r4, r0
 800036e:	431c      	orrs	r4, r3
 8000370:	d100      	bne.n	8000374 <__aeabi_dadd+0x15c>
 8000372:	e1af      	b.n	80006d4 <__aeabi_dadd+0x4bc>
 8000374:	4662      	mov	r2, ip
 8000376:	1e54      	subs	r4, r2, #1
 8000378:	2a01      	cmp	r2, #1
 800037a:	d100      	bne.n	800037e <__aeabi_dadd+0x166>
 800037c:	e215      	b.n	80007aa <__aeabi_dadd+0x592>
 800037e:	4d80      	ldr	r5, [pc, #512]	; (8000580 <__aeabi_dadd+0x368>)
 8000380:	45ac      	cmp	ip, r5
 8000382:	d100      	bne.n	8000386 <__aeabi_dadd+0x16e>
 8000384:	e1c8      	b.n	8000718 <__aeabi_dadd+0x500>
 8000386:	46a4      	mov	ip, r4
 8000388:	e11b      	b.n	80005c2 <__aeabi_dadd+0x3aa>
 800038a:	464a      	mov	r2, r9
 800038c:	1ab2      	subs	r2, r6, r2
 800038e:	4694      	mov	ip, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	dc00      	bgt.n	8000396 <__aeabi_dadd+0x17e>
 8000394:	e0ac      	b.n	80004f0 <__aeabi_dadd+0x2d8>
 8000396:	464a      	mov	r2, r9
 8000398:	2a00      	cmp	r2, #0
 800039a:	d043      	beq.n	8000424 <__aeabi_dadd+0x20c>
 800039c:	4a78      	ldr	r2, [pc, #480]	; (8000580 <__aeabi_dadd+0x368>)
 800039e:	4296      	cmp	r6, r2
 80003a0:	d100      	bne.n	80003a4 <__aeabi_dadd+0x18c>
 80003a2:	e1af      	b.n	8000704 <__aeabi_dadd+0x4ec>
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	003c      	movs	r4, r7
 80003a8:	0412      	lsls	r2, r2, #16
 80003aa:	4314      	orrs	r4, r2
 80003ac:	46a0      	mov	r8, r4
 80003ae:	4662      	mov	r2, ip
 80003b0:	2a38      	cmp	r2, #56	; 0x38
 80003b2:	dc67      	bgt.n	8000484 <__aeabi_dadd+0x26c>
 80003b4:	2a1f      	cmp	r2, #31
 80003b6:	dc00      	bgt.n	80003ba <__aeabi_dadd+0x1a2>
 80003b8:	e15f      	b.n	800067a <__aeabi_dadd+0x462>
 80003ba:	4647      	mov	r7, r8
 80003bc:	3a20      	subs	r2, #32
 80003be:	40d7      	lsrs	r7, r2
 80003c0:	4662      	mov	r2, ip
 80003c2:	2a20      	cmp	r2, #32
 80003c4:	d005      	beq.n	80003d2 <__aeabi_dadd+0x1ba>
 80003c6:	4664      	mov	r4, ip
 80003c8:	2240      	movs	r2, #64	; 0x40
 80003ca:	1b12      	subs	r2, r2, r4
 80003cc:	4644      	mov	r4, r8
 80003ce:	4094      	lsls	r4, r2
 80003d0:	4321      	orrs	r1, r4
 80003d2:	1e4a      	subs	r2, r1, #1
 80003d4:	4191      	sbcs	r1, r2
 80003d6:	000c      	movs	r4, r1
 80003d8:	433c      	orrs	r4, r7
 80003da:	e057      	b.n	800048c <__aeabi_dadd+0x274>
 80003dc:	003a      	movs	r2, r7
 80003de:	430a      	orrs	r2, r1
 80003e0:	d100      	bne.n	80003e4 <__aeabi_dadd+0x1cc>
 80003e2:	e105      	b.n	80005f0 <__aeabi_dadd+0x3d8>
 80003e4:	0022      	movs	r2, r4
 80003e6:	3a01      	subs	r2, #1
 80003e8:	2c01      	cmp	r4, #1
 80003ea:	d100      	bne.n	80003ee <__aeabi_dadd+0x1d6>
 80003ec:	e182      	b.n	80006f4 <__aeabi_dadd+0x4dc>
 80003ee:	4c64      	ldr	r4, [pc, #400]	; (8000580 <__aeabi_dadd+0x368>)
 80003f0:	45a4      	cmp	ip, r4
 80003f2:	d05b      	beq.n	80004ac <__aeabi_dadd+0x294>
 80003f4:	4694      	mov	ip, r2
 80003f6:	e741      	b.n	800027c <__aeabi_dadd+0x64>
 80003f8:	4c63      	ldr	r4, [pc, #396]	; (8000588 <__aeabi_dadd+0x370>)
 80003fa:	1c77      	adds	r7, r6, #1
 80003fc:	4227      	tst	r7, r4
 80003fe:	d000      	beq.n	8000402 <__aeabi_dadd+0x1ea>
 8000400:	e0c4      	b.n	800058c <__aeabi_dadd+0x374>
 8000402:	0004      	movs	r4, r0
 8000404:	431c      	orrs	r4, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d000      	beq.n	800040c <__aeabi_dadd+0x1f4>
 800040a:	e169      	b.n	80006e0 <__aeabi_dadd+0x4c8>
 800040c:	2c00      	cmp	r4, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_dadd+0x1fa>
 8000410:	e1bf      	b.n	8000792 <__aeabi_dadd+0x57a>
 8000412:	4644      	mov	r4, r8
 8000414:	430c      	orrs	r4, r1
 8000416:	d000      	beq.n	800041a <__aeabi_dadd+0x202>
 8000418:	e1d0      	b.n	80007bc <__aeabi_dadd+0x5a4>
 800041a:	0742      	lsls	r2, r0, #29
 800041c:	08db      	lsrs	r3, r3, #3
 800041e:	4313      	orrs	r3, r2
 8000420:	08c0      	lsrs	r0, r0, #3
 8000422:	e029      	b.n	8000478 <__aeabi_dadd+0x260>
 8000424:	003a      	movs	r2, r7
 8000426:	430a      	orrs	r2, r1
 8000428:	d100      	bne.n	800042c <__aeabi_dadd+0x214>
 800042a:	e170      	b.n	800070e <__aeabi_dadd+0x4f6>
 800042c:	4662      	mov	r2, ip
 800042e:	4664      	mov	r4, ip
 8000430:	3a01      	subs	r2, #1
 8000432:	2c01      	cmp	r4, #1
 8000434:	d100      	bne.n	8000438 <__aeabi_dadd+0x220>
 8000436:	e0e0      	b.n	80005fa <__aeabi_dadd+0x3e2>
 8000438:	4c51      	ldr	r4, [pc, #324]	; (8000580 <__aeabi_dadd+0x368>)
 800043a:	45a4      	cmp	ip, r4
 800043c:	d100      	bne.n	8000440 <__aeabi_dadd+0x228>
 800043e:	e161      	b.n	8000704 <__aeabi_dadd+0x4ec>
 8000440:	4694      	mov	ip, r2
 8000442:	e7b4      	b.n	80003ae <__aeabi_dadd+0x196>
 8000444:	003a      	movs	r2, r7
 8000446:	391f      	subs	r1, #31
 8000448:	40ca      	lsrs	r2, r1
 800044a:	0011      	movs	r1, r2
 800044c:	2b20      	cmp	r3, #32
 800044e:	d003      	beq.n	8000458 <__aeabi_dadd+0x240>
 8000450:	2240      	movs	r2, #64	; 0x40
 8000452:	1ad3      	subs	r3, r2, r3
 8000454:	409f      	lsls	r7, r3
 8000456:	433c      	orrs	r4, r7
 8000458:	1e63      	subs	r3, r4, #1
 800045a:	419c      	sbcs	r4, r3
 800045c:	2700      	movs	r7, #0
 800045e:	2600      	movs	r6, #0
 8000460:	430c      	orrs	r4, r1
 8000462:	0763      	lsls	r3, r4, #29
 8000464:	d000      	beq.n	8000468 <__aeabi_dadd+0x250>
 8000466:	e753      	b.n	8000310 <__aeabi_dadd+0xf8>
 8000468:	46b4      	mov	ip, r6
 800046a:	08e4      	lsrs	r4, r4, #3
 800046c:	077b      	lsls	r3, r7, #29
 800046e:	4323      	orrs	r3, r4
 8000470:	08f8      	lsrs	r0, r7, #3
 8000472:	4a43      	ldr	r2, [pc, #268]	; (8000580 <__aeabi_dadd+0x368>)
 8000474:	4594      	cmp	ip, r2
 8000476:	d01d      	beq.n	80004b4 <__aeabi_dadd+0x29c>
 8000478:	4662      	mov	r2, ip
 800047a:	0307      	lsls	r7, r0, #12
 800047c:	0552      	lsls	r2, r2, #21
 800047e:	0b3f      	lsrs	r7, r7, #12
 8000480:	0d52      	lsrs	r2, r2, #21
 8000482:	e760      	b.n	8000346 <__aeabi_dadd+0x12e>
 8000484:	4644      	mov	r4, r8
 8000486:	430c      	orrs	r4, r1
 8000488:	1e62      	subs	r2, r4, #1
 800048a:	4194      	sbcs	r4, r2
 800048c:	18e4      	adds	r4, r4, r3
 800048e:	429c      	cmp	r4, r3
 8000490:	419b      	sbcs	r3, r3
 8000492:	425f      	negs	r7, r3
 8000494:	183f      	adds	r7, r7, r0
 8000496:	023b      	lsls	r3, r7, #8
 8000498:	d5e3      	bpl.n	8000462 <__aeabi_dadd+0x24a>
 800049a:	4b39      	ldr	r3, [pc, #228]	; (8000580 <__aeabi_dadd+0x368>)
 800049c:	3601      	adds	r6, #1
 800049e:	429e      	cmp	r6, r3
 80004a0:	d000      	beq.n	80004a4 <__aeabi_dadd+0x28c>
 80004a2:	e0b5      	b.n	8000610 <__aeabi_dadd+0x3f8>
 80004a4:	0032      	movs	r2, r6
 80004a6:	2700      	movs	r7, #0
 80004a8:	2300      	movs	r3, #0
 80004aa:	e74c      	b.n	8000346 <__aeabi_dadd+0x12e>
 80004ac:	0742      	lsls	r2, r0, #29
 80004ae:	08db      	lsrs	r3, r3, #3
 80004b0:	4313      	orrs	r3, r2
 80004b2:	08c0      	lsrs	r0, r0, #3
 80004b4:	001a      	movs	r2, r3
 80004b6:	4302      	orrs	r2, r0
 80004b8:	d100      	bne.n	80004bc <__aeabi_dadd+0x2a4>
 80004ba:	e1e1      	b.n	8000880 <__aeabi_dadd+0x668>
 80004bc:	2780      	movs	r7, #128	; 0x80
 80004be:	033f      	lsls	r7, r7, #12
 80004c0:	4307      	orrs	r7, r0
 80004c2:	033f      	lsls	r7, r7, #12
 80004c4:	4a2e      	ldr	r2, [pc, #184]	; (8000580 <__aeabi_dadd+0x368>)
 80004c6:	0b3f      	lsrs	r7, r7, #12
 80004c8:	e73d      	b.n	8000346 <__aeabi_dadd+0x12e>
 80004ca:	0020      	movs	r0, r4
 80004cc:	f001 fb82 	bl	8001bd4 <__clzsi2>
 80004d0:	0001      	movs	r1, r0
 80004d2:	3118      	adds	r1, #24
 80004d4:	291f      	cmp	r1, #31
 80004d6:	dc00      	bgt.n	80004da <__aeabi_dadd+0x2c2>
 80004d8:	e6fc      	b.n	80002d4 <__aeabi_dadd+0xbc>
 80004da:	3808      	subs	r0, #8
 80004dc:	4084      	lsls	r4, r0
 80004de:	0027      	movs	r7, r4
 80004e0:	2400      	movs	r4, #0
 80004e2:	42b1      	cmp	r1, r6
 80004e4:	db00      	blt.n	80004e8 <__aeabi_dadd+0x2d0>
 80004e6:	e6ff      	b.n	80002e8 <__aeabi_dadd+0xd0>
 80004e8:	4a26      	ldr	r2, [pc, #152]	; (8000584 <__aeabi_dadd+0x36c>)
 80004ea:	1a76      	subs	r6, r6, r1
 80004ec:	4017      	ands	r7, r2
 80004ee:	e70d      	b.n	800030c <__aeabi_dadd+0xf4>
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	d02f      	beq.n	8000554 <__aeabi_dadd+0x33c>
 80004f4:	464a      	mov	r2, r9
 80004f6:	1b92      	subs	r2, r2, r6
 80004f8:	4694      	mov	ip, r2
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_dadd+0x2e8>
 80004fe:	e0ad      	b.n	800065c <__aeabi_dadd+0x444>
 8000500:	4a1f      	ldr	r2, [pc, #124]	; (8000580 <__aeabi_dadd+0x368>)
 8000502:	4591      	cmp	r9, r2
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x2f0>
 8000506:	e10f      	b.n	8000728 <__aeabi_dadd+0x510>
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	0412      	lsls	r2, r2, #16
 800050c:	4310      	orrs	r0, r2
 800050e:	4662      	mov	r2, ip
 8000510:	2a38      	cmp	r2, #56	; 0x38
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x2fe>
 8000514:	e10f      	b.n	8000736 <__aeabi_dadd+0x51e>
 8000516:	2a1f      	cmp	r2, #31
 8000518:	dd00      	ble.n	800051c <__aeabi_dadd+0x304>
 800051a:	e180      	b.n	800081e <__aeabi_dadd+0x606>
 800051c:	4664      	mov	r4, ip
 800051e:	2220      	movs	r2, #32
 8000520:	001e      	movs	r6, r3
 8000522:	1b12      	subs	r2, r2, r4
 8000524:	4667      	mov	r7, ip
 8000526:	0004      	movs	r4, r0
 8000528:	4093      	lsls	r3, r2
 800052a:	4094      	lsls	r4, r2
 800052c:	40fe      	lsrs	r6, r7
 800052e:	1e5a      	subs	r2, r3, #1
 8000530:	4193      	sbcs	r3, r2
 8000532:	40f8      	lsrs	r0, r7
 8000534:	4334      	orrs	r4, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	4480      	add	r8, r0
 800053a:	1864      	adds	r4, r4, r1
 800053c:	428c      	cmp	r4, r1
 800053e:	41bf      	sbcs	r7, r7
 8000540:	427f      	negs	r7, r7
 8000542:	464e      	mov	r6, r9
 8000544:	4447      	add	r7, r8
 8000546:	e7a6      	b.n	8000496 <__aeabi_dadd+0x27e>
 8000548:	4642      	mov	r2, r8
 800054a:	430a      	orrs	r2, r1
 800054c:	0011      	movs	r1, r2
 800054e:	1e4a      	subs	r2, r1, #1
 8000550:	4191      	sbcs	r1, r2
 8000552:	e6ad      	b.n	80002b0 <__aeabi_dadd+0x98>
 8000554:	4c0c      	ldr	r4, [pc, #48]	; (8000588 <__aeabi_dadd+0x370>)
 8000556:	1c72      	adds	r2, r6, #1
 8000558:	4222      	tst	r2, r4
 800055a:	d000      	beq.n	800055e <__aeabi_dadd+0x346>
 800055c:	e0a1      	b.n	80006a2 <__aeabi_dadd+0x48a>
 800055e:	0002      	movs	r2, r0
 8000560:	431a      	orrs	r2, r3
 8000562:	2e00      	cmp	r6, #0
 8000564:	d000      	beq.n	8000568 <__aeabi_dadd+0x350>
 8000566:	e0fa      	b.n	800075e <__aeabi_dadd+0x546>
 8000568:	2a00      	cmp	r2, #0
 800056a:	d100      	bne.n	800056e <__aeabi_dadd+0x356>
 800056c:	e145      	b.n	80007fa <__aeabi_dadd+0x5e2>
 800056e:	003a      	movs	r2, r7
 8000570:	430a      	orrs	r2, r1
 8000572:	d000      	beq.n	8000576 <__aeabi_dadd+0x35e>
 8000574:	e146      	b.n	8000804 <__aeabi_dadd+0x5ec>
 8000576:	0742      	lsls	r2, r0, #29
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	4313      	orrs	r3, r2
 800057c:	08c0      	lsrs	r0, r0, #3
 800057e:	e77b      	b.n	8000478 <__aeabi_dadd+0x260>
 8000580:	000007ff 	.word	0x000007ff
 8000584:	ff7fffff 	.word	0xff7fffff
 8000588:	000007fe 	.word	0x000007fe
 800058c:	4647      	mov	r7, r8
 800058e:	1a5c      	subs	r4, r3, r1
 8000590:	1bc2      	subs	r2, r0, r7
 8000592:	42a3      	cmp	r3, r4
 8000594:	41bf      	sbcs	r7, r7
 8000596:	427f      	negs	r7, r7
 8000598:	46b9      	mov	r9, r7
 800059a:	0017      	movs	r7, r2
 800059c:	464a      	mov	r2, r9
 800059e:	1abf      	subs	r7, r7, r2
 80005a0:	023a      	lsls	r2, r7, #8
 80005a2:	d500      	bpl.n	80005a6 <__aeabi_dadd+0x38e>
 80005a4:	e08d      	b.n	80006c2 <__aeabi_dadd+0x4aa>
 80005a6:	0023      	movs	r3, r4
 80005a8:	433b      	orrs	r3, r7
 80005aa:	d000      	beq.n	80005ae <__aeabi_dadd+0x396>
 80005ac:	e68a      	b.n	80002c4 <__aeabi_dadd+0xac>
 80005ae:	2000      	movs	r0, #0
 80005b0:	2500      	movs	r5, #0
 80005b2:	e761      	b.n	8000478 <__aeabi_dadd+0x260>
 80005b4:	4cb4      	ldr	r4, [pc, #720]	; (8000888 <__aeabi_dadd+0x670>)
 80005b6:	45a1      	cmp	r9, r4
 80005b8:	d100      	bne.n	80005bc <__aeabi_dadd+0x3a4>
 80005ba:	e0ad      	b.n	8000718 <__aeabi_dadd+0x500>
 80005bc:	2480      	movs	r4, #128	; 0x80
 80005be:	0424      	lsls	r4, r4, #16
 80005c0:	4320      	orrs	r0, r4
 80005c2:	4664      	mov	r4, ip
 80005c4:	2c38      	cmp	r4, #56	; 0x38
 80005c6:	dc3d      	bgt.n	8000644 <__aeabi_dadd+0x42c>
 80005c8:	4662      	mov	r2, ip
 80005ca:	2c1f      	cmp	r4, #31
 80005cc:	dd00      	ble.n	80005d0 <__aeabi_dadd+0x3b8>
 80005ce:	e0b7      	b.n	8000740 <__aeabi_dadd+0x528>
 80005d0:	2520      	movs	r5, #32
 80005d2:	001e      	movs	r6, r3
 80005d4:	1b2d      	subs	r5, r5, r4
 80005d6:	0004      	movs	r4, r0
 80005d8:	40ab      	lsls	r3, r5
 80005da:	40ac      	lsls	r4, r5
 80005dc:	40d6      	lsrs	r6, r2
 80005de:	40d0      	lsrs	r0, r2
 80005e0:	4642      	mov	r2, r8
 80005e2:	1e5d      	subs	r5, r3, #1
 80005e4:	41ab      	sbcs	r3, r5
 80005e6:	4334      	orrs	r4, r6
 80005e8:	1a12      	subs	r2, r2, r0
 80005ea:	4690      	mov	r8, r2
 80005ec:	4323      	orrs	r3, r4
 80005ee:	e02c      	b.n	800064a <__aeabi_dadd+0x432>
 80005f0:	0742      	lsls	r2, r0, #29
 80005f2:	08db      	lsrs	r3, r3, #3
 80005f4:	4313      	orrs	r3, r2
 80005f6:	08c0      	lsrs	r0, r0, #3
 80005f8:	e73b      	b.n	8000472 <__aeabi_dadd+0x25a>
 80005fa:	185c      	adds	r4, r3, r1
 80005fc:	429c      	cmp	r4, r3
 80005fe:	419b      	sbcs	r3, r3
 8000600:	4440      	add	r0, r8
 8000602:	425b      	negs	r3, r3
 8000604:	18c7      	adds	r7, r0, r3
 8000606:	2601      	movs	r6, #1
 8000608:	023b      	lsls	r3, r7, #8
 800060a:	d400      	bmi.n	800060e <__aeabi_dadd+0x3f6>
 800060c:	e729      	b.n	8000462 <__aeabi_dadd+0x24a>
 800060e:	2602      	movs	r6, #2
 8000610:	4a9e      	ldr	r2, [pc, #632]	; (800088c <__aeabi_dadd+0x674>)
 8000612:	0863      	lsrs	r3, r4, #1
 8000614:	4017      	ands	r7, r2
 8000616:	2201      	movs	r2, #1
 8000618:	4014      	ands	r4, r2
 800061a:	431c      	orrs	r4, r3
 800061c:	07fb      	lsls	r3, r7, #31
 800061e:	431c      	orrs	r4, r3
 8000620:	087f      	lsrs	r7, r7, #1
 8000622:	e673      	b.n	800030c <__aeabi_dadd+0xf4>
 8000624:	4644      	mov	r4, r8
 8000626:	3a20      	subs	r2, #32
 8000628:	40d4      	lsrs	r4, r2
 800062a:	4662      	mov	r2, ip
 800062c:	2a20      	cmp	r2, #32
 800062e:	d005      	beq.n	800063c <__aeabi_dadd+0x424>
 8000630:	4667      	mov	r7, ip
 8000632:	2240      	movs	r2, #64	; 0x40
 8000634:	1bd2      	subs	r2, r2, r7
 8000636:	4647      	mov	r7, r8
 8000638:	4097      	lsls	r7, r2
 800063a:	4339      	orrs	r1, r7
 800063c:	1e4a      	subs	r2, r1, #1
 800063e:	4191      	sbcs	r1, r2
 8000640:	4321      	orrs	r1, r4
 8000642:	e635      	b.n	80002b0 <__aeabi_dadd+0x98>
 8000644:	4303      	orrs	r3, r0
 8000646:	1e58      	subs	r0, r3, #1
 8000648:	4183      	sbcs	r3, r0
 800064a:	1acc      	subs	r4, r1, r3
 800064c:	42a1      	cmp	r1, r4
 800064e:	41bf      	sbcs	r7, r7
 8000650:	4643      	mov	r3, r8
 8000652:	427f      	negs	r7, r7
 8000654:	4655      	mov	r5, sl
 8000656:	464e      	mov	r6, r9
 8000658:	1bdf      	subs	r7, r3, r7
 800065a:	e62e      	b.n	80002ba <__aeabi_dadd+0xa2>
 800065c:	0002      	movs	r2, r0
 800065e:	431a      	orrs	r2, r3
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x44c>
 8000662:	e0bd      	b.n	80007e0 <__aeabi_dadd+0x5c8>
 8000664:	4662      	mov	r2, ip
 8000666:	4664      	mov	r4, ip
 8000668:	3a01      	subs	r2, #1
 800066a:	2c01      	cmp	r4, #1
 800066c:	d100      	bne.n	8000670 <__aeabi_dadd+0x458>
 800066e:	e0e5      	b.n	800083c <__aeabi_dadd+0x624>
 8000670:	4c85      	ldr	r4, [pc, #532]	; (8000888 <__aeabi_dadd+0x670>)
 8000672:	45a4      	cmp	ip, r4
 8000674:	d058      	beq.n	8000728 <__aeabi_dadd+0x510>
 8000676:	4694      	mov	ip, r2
 8000678:	e749      	b.n	800050e <__aeabi_dadd+0x2f6>
 800067a:	4664      	mov	r4, ip
 800067c:	2220      	movs	r2, #32
 800067e:	1b12      	subs	r2, r2, r4
 8000680:	4644      	mov	r4, r8
 8000682:	4094      	lsls	r4, r2
 8000684:	000f      	movs	r7, r1
 8000686:	46a1      	mov	r9, r4
 8000688:	4664      	mov	r4, ip
 800068a:	4091      	lsls	r1, r2
 800068c:	40e7      	lsrs	r7, r4
 800068e:	464c      	mov	r4, r9
 8000690:	1e4a      	subs	r2, r1, #1
 8000692:	4191      	sbcs	r1, r2
 8000694:	433c      	orrs	r4, r7
 8000696:	4642      	mov	r2, r8
 8000698:	430c      	orrs	r4, r1
 800069a:	4661      	mov	r1, ip
 800069c:	40ca      	lsrs	r2, r1
 800069e:	1880      	adds	r0, r0, r2
 80006a0:	e6f4      	b.n	800048c <__aeabi_dadd+0x274>
 80006a2:	4c79      	ldr	r4, [pc, #484]	; (8000888 <__aeabi_dadd+0x670>)
 80006a4:	42a2      	cmp	r2, r4
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0x492>
 80006a8:	e6fd      	b.n	80004a6 <__aeabi_dadd+0x28e>
 80006aa:	1859      	adds	r1, r3, r1
 80006ac:	4299      	cmp	r1, r3
 80006ae:	419b      	sbcs	r3, r3
 80006b0:	4440      	add	r0, r8
 80006b2:	425f      	negs	r7, r3
 80006b4:	19c7      	adds	r7, r0, r7
 80006b6:	07fc      	lsls	r4, r7, #31
 80006b8:	0849      	lsrs	r1, r1, #1
 80006ba:	0016      	movs	r6, r2
 80006bc:	430c      	orrs	r4, r1
 80006be:	087f      	lsrs	r7, r7, #1
 80006c0:	e6cf      	b.n	8000462 <__aeabi_dadd+0x24a>
 80006c2:	1acc      	subs	r4, r1, r3
 80006c4:	42a1      	cmp	r1, r4
 80006c6:	41bf      	sbcs	r7, r7
 80006c8:	4643      	mov	r3, r8
 80006ca:	427f      	negs	r7, r7
 80006cc:	1a18      	subs	r0, r3, r0
 80006ce:	4655      	mov	r5, sl
 80006d0:	1bc7      	subs	r7, r0, r7
 80006d2:	e5f7      	b.n	80002c4 <__aeabi_dadd+0xac>
 80006d4:	08c9      	lsrs	r1, r1, #3
 80006d6:	077b      	lsls	r3, r7, #29
 80006d8:	4655      	mov	r5, sl
 80006da:	430b      	orrs	r3, r1
 80006dc:	08f8      	lsrs	r0, r7, #3
 80006de:	e6c8      	b.n	8000472 <__aeabi_dadd+0x25a>
 80006e0:	2c00      	cmp	r4, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x4ce>
 80006e4:	e081      	b.n	80007ea <__aeabi_dadd+0x5d2>
 80006e6:	4643      	mov	r3, r8
 80006e8:	430b      	orrs	r3, r1
 80006ea:	d115      	bne.n	8000718 <__aeabi_dadd+0x500>
 80006ec:	2080      	movs	r0, #128	; 0x80
 80006ee:	2500      	movs	r5, #0
 80006f0:	0300      	lsls	r0, r0, #12
 80006f2:	e6e3      	b.n	80004bc <__aeabi_dadd+0x2a4>
 80006f4:	1a5c      	subs	r4, r3, r1
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	419b      	sbcs	r3, r3
 80006fa:	1bc7      	subs	r7, r0, r7
 80006fc:	425b      	negs	r3, r3
 80006fe:	2601      	movs	r6, #1
 8000700:	1aff      	subs	r7, r7, r3
 8000702:	e5da      	b.n	80002ba <__aeabi_dadd+0xa2>
 8000704:	0742      	lsls	r2, r0, #29
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	4313      	orrs	r3, r2
 800070a:	08c0      	lsrs	r0, r0, #3
 800070c:	e6d2      	b.n	80004b4 <__aeabi_dadd+0x29c>
 800070e:	0742      	lsls	r2, r0, #29
 8000710:	08db      	lsrs	r3, r3, #3
 8000712:	4313      	orrs	r3, r2
 8000714:	08c0      	lsrs	r0, r0, #3
 8000716:	e6ac      	b.n	8000472 <__aeabi_dadd+0x25a>
 8000718:	4643      	mov	r3, r8
 800071a:	4642      	mov	r2, r8
 800071c:	08c9      	lsrs	r1, r1, #3
 800071e:	075b      	lsls	r3, r3, #29
 8000720:	4655      	mov	r5, sl
 8000722:	430b      	orrs	r3, r1
 8000724:	08d0      	lsrs	r0, r2, #3
 8000726:	e6c5      	b.n	80004b4 <__aeabi_dadd+0x29c>
 8000728:	4643      	mov	r3, r8
 800072a:	4642      	mov	r2, r8
 800072c:	075b      	lsls	r3, r3, #29
 800072e:	08c9      	lsrs	r1, r1, #3
 8000730:	430b      	orrs	r3, r1
 8000732:	08d0      	lsrs	r0, r2, #3
 8000734:	e6be      	b.n	80004b4 <__aeabi_dadd+0x29c>
 8000736:	4303      	orrs	r3, r0
 8000738:	001c      	movs	r4, r3
 800073a:	1e63      	subs	r3, r4, #1
 800073c:	419c      	sbcs	r4, r3
 800073e:	e6fc      	b.n	800053a <__aeabi_dadd+0x322>
 8000740:	0002      	movs	r2, r0
 8000742:	3c20      	subs	r4, #32
 8000744:	40e2      	lsrs	r2, r4
 8000746:	0014      	movs	r4, r2
 8000748:	4662      	mov	r2, ip
 800074a:	2a20      	cmp	r2, #32
 800074c:	d003      	beq.n	8000756 <__aeabi_dadd+0x53e>
 800074e:	2540      	movs	r5, #64	; 0x40
 8000750:	1aad      	subs	r5, r5, r2
 8000752:	40a8      	lsls	r0, r5
 8000754:	4303      	orrs	r3, r0
 8000756:	1e58      	subs	r0, r3, #1
 8000758:	4183      	sbcs	r3, r0
 800075a:	4323      	orrs	r3, r4
 800075c:	e775      	b.n	800064a <__aeabi_dadd+0x432>
 800075e:	2a00      	cmp	r2, #0
 8000760:	d0e2      	beq.n	8000728 <__aeabi_dadd+0x510>
 8000762:	003a      	movs	r2, r7
 8000764:	430a      	orrs	r2, r1
 8000766:	d0cd      	beq.n	8000704 <__aeabi_dadd+0x4ec>
 8000768:	0742      	lsls	r2, r0, #29
 800076a:	08db      	lsrs	r3, r3, #3
 800076c:	4313      	orrs	r3, r2
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	08c0      	lsrs	r0, r0, #3
 8000772:	0312      	lsls	r2, r2, #12
 8000774:	4210      	tst	r0, r2
 8000776:	d006      	beq.n	8000786 <__aeabi_dadd+0x56e>
 8000778:	08fc      	lsrs	r4, r7, #3
 800077a:	4214      	tst	r4, r2
 800077c:	d103      	bne.n	8000786 <__aeabi_dadd+0x56e>
 800077e:	0020      	movs	r0, r4
 8000780:	08cb      	lsrs	r3, r1, #3
 8000782:	077a      	lsls	r2, r7, #29
 8000784:	4313      	orrs	r3, r2
 8000786:	0f5a      	lsrs	r2, r3, #29
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	0752      	lsls	r2, r2, #29
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	4313      	orrs	r3, r2
 8000790:	e690      	b.n	80004b4 <__aeabi_dadd+0x29c>
 8000792:	4643      	mov	r3, r8
 8000794:	430b      	orrs	r3, r1
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x582>
 8000798:	e709      	b.n	80005ae <__aeabi_dadd+0x396>
 800079a:	4643      	mov	r3, r8
 800079c:	4642      	mov	r2, r8
 800079e:	08c9      	lsrs	r1, r1, #3
 80007a0:	075b      	lsls	r3, r3, #29
 80007a2:	4655      	mov	r5, sl
 80007a4:	430b      	orrs	r3, r1
 80007a6:	08d0      	lsrs	r0, r2, #3
 80007a8:	e666      	b.n	8000478 <__aeabi_dadd+0x260>
 80007aa:	1acc      	subs	r4, r1, r3
 80007ac:	42a1      	cmp	r1, r4
 80007ae:	4189      	sbcs	r1, r1
 80007b0:	1a3f      	subs	r7, r7, r0
 80007b2:	4249      	negs	r1, r1
 80007b4:	4655      	mov	r5, sl
 80007b6:	2601      	movs	r6, #1
 80007b8:	1a7f      	subs	r7, r7, r1
 80007ba:	e57e      	b.n	80002ba <__aeabi_dadd+0xa2>
 80007bc:	4642      	mov	r2, r8
 80007be:	1a5c      	subs	r4, r3, r1
 80007c0:	1a87      	subs	r7, r0, r2
 80007c2:	42a3      	cmp	r3, r4
 80007c4:	4192      	sbcs	r2, r2
 80007c6:	4252      	negs	r2, r2
 80007c8:	1abf      	subs	r7, r7, r2
 80007ca:	023a      	lsls	r2, r7, #8
 80007cc:	d53d      	bpl.n	800084a <__aeabi_dadd+0x632>
 80007ce:	1acc      	subs	r4, r1, r3
 80007d0:	42a1      	cmp	r1, r4
 80007d2:	4189      	sbcs	r1, r1
 80007d4:	4643      	mov	r3, r8
 80007d6:	4249      	negs	r1, r1
 80007d8:	1a1f      	subs	r7, r3, r0
 80007da:	4655      	mov	r5, sl
 80007dc:	1a7f      	subs	r7, r7, r1
 80007de:	e595      	b.n	800030c <__aeabi_dadd+0xf4>
 80007e0:	077b      	lsls	r3, r7, #29
 80007e2:	08c9      	lsrs	r1, r1, #3
 80007e4:	430b      	orrs	r3, r1
 80007e6:	08f8      	lsrs	r0, r7, #3
 80007e8:	e643      	b.n	8000472 <__aeabi_dadd+0x25a>
 80007ea:	4644      	mov	r4, r8
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	430c      	orrs	r4, r1
 80007f0:	d130      	bne.n	8000854 <__aeabi_dadd+0x63c>
 80007f2:	0742      	lsls	r2, r0, #29
 80007f4:	4313      	orrs	r3, r2
 80007f6:	08c0      	lsrs	r0, r0, #3
 80007f8:	e65c      	b.n	80004b4 <__aeabi_dadd+0x29c>
 80007fa:	077b      	lsls	r3, r7, #29
 80007fc:	08c9      	lsrs	r1, r1, #3
 80007fe:	430b      	orrs	r3, r1
 8000800:	08f8      	lsrs	r0, r7, #3
 8000802:	e639      	b.n	8000478 <__aeabi_dadd+0x260>
 8000804:	185c      	adds	r4, r3, r1
 8000806:	429c      	cmp	r4, r3
 8000808:	419b      	sbcs	r3, r3
 800080a:	4440      	add	r0, r8
 800080c:	425b      	negs	r3, r3
 800080e:	18c7      	adds	r7, r0, r3
 8000810:	023b      	lsls	r3, r7, #8
 8000812:	d400      	bmi.n	8000816 <__aeabi_dadd+0x5fe>
 8000814:	e625      	b.n	8000462 <__aeabi_dadd+0x24a>
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <__aeabi_dadd+0x674>)
 8000818:	2601      	movs	r6, #1
 800081a:	401f      	ands	r7, r3
 800081c:	e621      	b.n	8000462 <__aeabi_dadd+0x24a>
 800081e:	0004      	movs	r4, r0
 8000820:	3a20      	subs	r2, #32
 8000822:	40d4      	lsrs	r4, r2
 8000824:	4662      	mov	r2, ip
 8000826:	2a20      	cmp	r2, #32
 8000828:	d004      	beq.n	8000834 <__aeabi_dadd+0x61c>
 800082a:	2240      	movs	r2, #64	; 0x40
 800082c:	4666      	mov	r6, ip
 800082e:	1b92      	subs	r2, r2, r6
 8000830:	4090      	lsls	r0, r2
 8000832:	4303      	orrs	r3, r0
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	4193      	sbcs	r3, r2
 8000838:	431c      	orrs	r4, r3
 800083a:	e67e      	b.n	800053a <__aeabi_dadd+0x322>
 800083c:	185c      	adds	r4, r3, r1
 800083e:	428c      	cmp	r4, r1
 8000840:	4189      	sbcs	r1, r1
 8000842:	4440      	add	r0, r8
 8000844:	4249      	negs	r1, r1
 8000846:	1847      	adds	r7, r0, r1
 8000848:	e6dd      	b.n	8000606 <__aeabi_dadd+0x3ee>
 800084a:	0023      	movs	r3, r4
 800084c:	433b      	orrs	r3, r7
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x63a>
 8000850:	e6ad      	b.n	80005ae <__aeabi_dadd+0x396>
 8000852:	e606      	b.n	8000462 <__aeabi_dadd+0x24a>
 8000854:	0744      	lsls	r4, r0, #29
 8000856:	4323      	orrs	r3, r4
 8000858:	2480      	movs	r4, #128	; 0x80
 800085a:	08c0      	lsrs	r0, r0, #3
 800085c:	0324      	lsls	r4, r4, #12
 800085e:	4220      	tst	r0, r4
 8000860:	d008      	beq.n	8000874 <__aeabi_dadd+0x65c>
 8000862:	4642      	mov	r2, r8
 8000864:	08d6      	lsrs	r6, r2, #3
 8000866:	4226      	tst	r6, r4
 8000868:	d104      	bne.n	8000874 <__aeabi_dadd+0x65c>
 800086a:	4655      	mov	r5, sl
 800086c:	0030      	movs	r0, r6
 800086e:	08cb      	lsrs	r3, r1, #3
 8000870:	0751      	lsls	r1, r2, #29
 8000872:	430b      	orrs	r3, r1
 8000874:	0f5a      	lsrs	r2, r3, #29
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	0752      	lsls	r2, r2, #29
 800087c:	4313      	orrs	r3, r2
 800087e:	e619      	b.n	80004b4 <__aeabi_dadd+0x29c>
 8000880:	2300      	movs	r3, #0
 8000882:	4a01      	ldr	r2, [pc, #4]	; (8000888 <__aeabi_dadd+0x670>)
 8000884:	001f      	movs	r7, r3
 8000886:	e55e      	b.n	8000346 <__aeabi_dadd+0x12e>
 8000888:	000007ff 	.word	0x000007ff
 800088c:	ff7fffff 	.word	0xff7fffff

08000890 <__aeabi_ddiv>:
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	4657      	mov	r7, sl
 8000894:	464e      	mov	r6, r9
 8000896:	4645      	mov	r5, r8
 8000898:	46de      	mov	lr, fp
 800089a:	b5e0      	push	{r5, r6, r7, lr}
 800089c:	4681      	mov	r9, r0
 800089e:	0005      	movs	r5, r0
 80008a0:	030c      	lsls	r4, r1, #12
 80008a2:	0048      	lsls	r0, r1, #1
 80008a4:	4692      	mov	sl, r2
 80008a6:	001f      	movs	r7, r3
 80008a8:	b085      	sub	sp, #20
 80008aa:	0b24      	lsrs	r4, r4, #12
 80008ac:	0d40      	lsrs	r0, r0, #21
 80008ae:	0fce      	lsrs	r6, r1, #31
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_ddiv+0x26>
 80008b4:	e156      	b.n	8000b64 <__aeabi_ddiv+0x2d4>
 80008b6:	4bd4      	ldr	r3, [pc, #848]	; (8000c08 <__aeabi_ddiv+0x378>)
 80008b8:	4298      	cmp	r0, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_ddiv+0x2e>
 80008bc:	e172      	b.n	8000ba4 <__aeabi_ddiv+0x314>
 80008be:	0f6b      	lsrs	r3, r5, #29
 80008c0:	00e4      	lsls	r4, r4, #3
 80008c2:	431c      	orrs	r4, r3
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	041b      	lsls	r3, r3, #16
 80008c8:	4323      	orrs	r3, r4
 80008ca:	4698      	mov	r8, r3
 80008cc:	4bcf      	ldr	r3, [pc, #828]	; (8000c0c <__aeabi_ddiv+0x37c>)
 80008ce:	00ed      	lsls	r5, r5, #3
 80008d0:	469b      	mov	fp, r3
 80008d2:	2300      	movs	r3, #0
 80008d4:	4699      	mov	r9, r3
 80008d6:	4483      	add	fp, r0
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	033c      	lsls	r4, r7, #12
 80008dc:	007b      	lsls	r3, r7, #1
 80008de:	4650      	mov	r0, sl
 80008e0:	0b24      	lsrs	r4, r4, #12
 80008e2:	0d5b      	lsrs	r3, r3, #21
 80008e4:	0fff      	lsrs	r7, r7, #31
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_ddiv+0x5c>
 80008ea:	e11f      	b.n	8000b2c <__aeabi_ddiv+0x29c>
 80008ec:	4ac6      	ldr	r2, [pc, #792]	; (8000c08 <__aeabi_ddiv+0x378>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d100      	bne.n	80008f4 <__aeabi_ddiv+0x64>
 80008f2:	e162      	b.n	8000bba <__aeabi_ddiv+0x32a>
 80008f4:	49c5      	ldr	r1, [pc, #788]	; (8000c0c <__aeabi_ddiv+0x37c>)
 80008f6:	0f42      	lsrs	r2, r0, #29
 80008f8:	468c      	mov	ip, r1
 80008fa:	00e4      	lsls	r4, r4, #3
 80008fc:	4659      	mov	r1, fp
 80008fe:	4314      	orrs	r4, r2
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	4463      	add	r3, ip
 8000904:	0412      	lsls	r2, r2, #16
 8000906:	1acb      	subs	r3, r1, r3
 8000908:	4314      	orrs	r4, r2
 800090a:	469b      	mov	fp, r3
 800090c:	00c2      	lsls	r2, r0, #3
 800090e:	2000      	movs	r0, #0
 8000910:	0033      	movs	r3, r6
 8000912:	407b      	eors	r3, r7
 8000914:	469a      	mov	sl, r3
 8000916:	464b      	mov	r3, r9
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d827      	bhi.n	800096c <__aeabi_ddiv+0xdc>
 800091c:	49bc      	ldr	r1, [pc, #752]	; (8000c10 <__aeabi_ddiv+0x380>)
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	58cb      	ldr	r3, [r1, r3]
 8000922:	469f      	mov	pc, r3
 8000924:	46b2      	mov	sl, r6
 8000926:	9b00      	ldr	r3, [sp, #0]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d016      	beq.n	800095a <__aeabi_ddiv+0xca>
 800092c:	2b03      	cmp	r3, #3
 800092e:	d100      	bne.n	8000932 <__aeabi_ddiv+0xa2>
 8000930:	e28e      	b.n	8000e50 <__aeabi_ddiv+0x5c0>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d000      	beq.n	8000938 <__aeabi_ddiv+0xa8>
 8000936:	e0d9      	b.n	8000aec <__aeabi_ddiv+0x25c>
 8000938:	2300      	movs	r3, #0
 800093a:	2400      	movs	r4, #0
 800093c:	2500      	movs	r5, #0
 800093e:	4652      	mov	r2, sl
 8000940:	051b      	lsls	r3, r3, #20
 8000942:	4323      	orrs	r3, r4
 8000944:	07d2      	lsls	r2, r2, #31
 8000946:	4313      	orrs	r3, r2
 8000948:	0028      	movs	r0, r5
 800094a:	0019      	movs	r1, r3
 800094c:	b005      	add	sp, #20
 800094e:	bcf0      	pop	{r4, r5, r6, r7}
 8000950:	46bb      	mov	fp, r7
 8000952:	46b2      	mov	sl, r6
 8000954:	46a9      	mov	r9, r5
 8000956:	46a0      	mov	r8, r4
 8000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095a:	2400      	movs	r4, #0
 800095c:	2500      	movs	r5, #0
 800095e:	4baa      	ldr	r3, [pc, #680]	; (8000c08 <__aeabi_ddiv+0x378>)
 8000960:	e7ed      	b.n	800093e <__aeabi_ddiv+0xae>
 8000962:	46ba      	mov	sl, r7
 8000964:	46a0      	mov	r8, r4
 8000966:	0015      	movs	r5, r2
 8000968:	9000      	str	r0, [sp, #0]
 800096a:	e7dc      	b.n	8000926 <__aeabi_ddiv+0x96>
 800096c:	4544      	cmp	r4, r8
 800096e:	d200      	bcs.n	8000972 <__aeabi_ddiv+0xe2>
 8000970:	e1c7      	b.n	8000d02 <__aeabi_ddiv+0x472>
 8000972:	d100      	bne.n	8000976 <__aeabi_ddiv+0xe6>
 8000974:	e1c2      	b.n	8000cfc <__aeabi_ddiv+0x46c>
 8000976:	2301      	movs	r3, #1
 8000978:	425b      	negs	r3, r3
 800097a:	469c      	mov	ip, r3
 800097c:	002e      	movs	r6, r5
 800097e:	4640      	mov	r0, r8
 8000980:	2500      	movs	r5, #0
 8000982:	44e3      	add	fp, ip
 8000984:	0223      	lsls	r3, r4, #8
 8000986:	0e14      	lsrs	r4, r2, #24
 8000988:	431c      	orrs	r4, r3
 800098a:	0c1b      	lsrs	r3, r3, #16
 800098c:	4699      	mov	r9, r3
 800098e:	0423      	lsls	r3, r4, #16
 8000990:	0c1f      	lsrs	r7, r3, #16
 8000992:	0212      	lsls	r2, r2, #8
 8000994:	4649      	mov	r1, r9
 8000996:	9200      	str	r2, [sp, #0]
 8000998:	9701      	str	r7, [sp, #4]
 800099a:	f7ff fc37 	bl	800020c <__aeabi_uidivmod>
 800099e:	0002      	movs	r2, r0
 80009a0:	437a      	muls	r2, r7
 80009a2:	040b      	lsls	r3, r1, #16
 80009a4:	0c31      	lsrs	r1, r6, #16
 80009a6:	4680      	mov	r8, r0
 80009a8:	4319      	orrs	r1, r3
 80009aa:	428a      	cmp	r2, r1
 80009ac:	d907      	bls.n	80009be <__aeabi_ddiv+0x12e>
 80009ae:	2301      	movs	r3, #1
 80009b0:	425b      	negs	r3, r3
 80009b2:	469c      	mov	ip, r3
 80009b4:	1909      	adds	r1, r1, r4
 80009b6:	44e0      	add	r8, ip
 80009b8:	428c      	cmp	r4, r1
 80009ba:	d800      	bhi.n	80009be <__aeabi_ddiv+0x12e>
 80009bc:	e207      	b.n	8000dce <__aeabi_ddiv+0x53e>
 80009be:	1a88      	subs	r0, r1, r2
 80009c0:	4649      	mov	r1, r9
 80009c2:	f7ff fc23 	bl	800020c <__aeabi_uidivmod>
 80009c6:	0409      	lsls	r1, r1, #16
 80009c8:	468c      	mov	ip, r1
 80009ca:	0431      	lsls	r1, r6, #16
 80009cc:	4666      	mov	r6, ip
 80009ce:	9a01      	ldr	r2, [sp, #4]
 80009d0:	0c09      	lsrs	r1, r1, #16
 80009d2:	4342      	muls	r2, r0
 80009d4:	0003      	movs	r3, r0
 80009d6:	4331      	orrs	r1, r6
 80009d8:	428a      	cmp	r2, r1
 80009da:	d904      	bls.n	80009e6 <__aeabi_ddiv+0x156>
 80009dc:	1909      	adds	r1, r1, r4
 80009de:	3b01      	subs	r3, #1
 80009e0:	428c      	cmp	r4, r1
 80009e2:	d800      	bhi.n	80009e6 <__aeabi_ddiv+0x156>
 80009e4:	e1ed      	b.n	8000dc2 <__aeabi_ddiv+0x532>
 80009e6:	1a88      	subs	r0, r1, r2
 80009e8:	4642      	mov	r2, r8
 80009ea:	0412      	lsls	r2, r2, #16
 80009ec:	431a      	orrs	r2, r3
 80009ee:	4690      	mov	r8, r2
 80009f0:	4641      	mov	r1, r8
 80009f2:	9b00      	ldr	r3, [sp, #0]
 80009f4:	040e      	lsls	r6, r1, #16
 80009f6:	0c1b      	lsrs	r3, r3, #16
 80009f8:	001f      	movs	r7, r3
 80009fa:	9302      	str	r3, [sp, #8]
 80009fc:	9b00      	ldr	r3, [sp, #0]
 80009fe:	0c36      	lsrs	r6, r6, #16
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	0c19      	lsrs	r1, r3, #16
 8000a04:	000b      	movs	r3, r1
 8000a06:	4373      	muls	r3, r6
 8000a08:	0c12      	lsrs	r2, r2, #16
 8000a0a:	437e      	muls	r6, r7
 8000a0c:	9103      	str	r1, [sp, #12]
 8000a0e:	4351      	muls	r1, r2
 8000a10:	437a      	muls	r2, r7
 8000a12:	0c1f      	lsrs	r7, r3, #16
 8000a14:	46bc      	mov	ip, r7
 8000a16:	1876      	adds	r6, r6, r1
 8000a18:	4466      	add	r6, ip
 8000a1a:	42b1      	cmp	r1, r6
 8000a1c:	d903      	bls.n	8000a26 <__aeabi_ddiv+0x196>
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	0249      	lsls	r1, r1, #9
 8000a22:	468c      	mov	ip, r1
 8000a24:	4462      	add	r2, ip
 8000a26:	0c31      	lsrs	r1, r6, #16
 8000a28:	188a      	adds	r2, r1, r2
 8000a2a:	0431      	lsls	r1, r6, #16
 8000a2c:	041e      	lsls	r6, r3, #16
 8000a2e:	0c36      	lsrs	r6, r6, #16
 8000a30:	198e      	adds	r6, r1, r6
 8000a32:	4290      	cmp	r0, r2
 8000a34:	d302      	bcc.n	8000a3c <__aeabi_ddiv+0x1ac>
 8000a36:	d112      	bne.n	8000a5e <__aeabi_ddiv+0x1ce>
 8000a38:	42b5      	cmp	r5, r6
 8000a3a:	d210      	bcs.n	8000a5e <__aeabi_ddiv+0x1ce>
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	1e59      	subs	r1, r3, #1
 8000a40:	9b00      	ldr	r3, [sp, #0]
 8000a42:	469c      	mov	ip, r3
 8000a44:	4465      	add	r5, ip
 8000a46:	001f      	movs	r7, r3
 8000a48:	429d      	cmp	r5, r3
 8000a4a:	419b      	sbcs	r3, r3
 8000a4c:	425b      	negs	r3, r3
 8000a4e:	191b      	adds	r3, r3, r4
 8000a50:	18c0      	adds	r0, r0, r3
 8000a52:	4284      	cmp	r4, r0
 8000a54:	d200      	bcs.n	8000a58 <__aeabi_ddiv+0x1c8>
 8000a56:	e1a0      	b.n	8000d9a <__aeabi_ddiv+0x50a>
 8000a58:	d100      	bne.n	8000a5c <__aeabi_ddiv+0x1cc>
 8000a5a:	e19b      	b.n	8000d94 <__aeabi_ddiv+0x504>
 8000a5c:	4688      	mov	r8, r1
 8000a5e:	1bae      	subs	r6, r5, r6
 8000a60:	42b5      	cmp	r5, r6
 8000a62:	41ad      	sbcs	r5, r5
 8000a64:	1a80      	subs	r0, r0, r2
 8000a66:	426d      	negs	r5, r5
 8000a68:	1b40      	subs	r0, r0, r5
 8000a6a:	4284      	cmp	r4, r0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_ddiv+0x1e0>
 8000a6e:	e1d5      	b.n	8000e1c <__aeabi_ddiv+0x58c>
 8000a70:	4649      	mov	r1, r9
 8000a72:	f7ff fbcb 	bl	800020c <__aeabi_uidivmod>
 8000a76:	9a01      	ldr	r2, [sp, #4]
 8000a78:	040b      	lsls	r3, r1, #16
 8000a7a:	4342      	muls	r2, r0
 8000a7c:	0c31      	lsrs	r1, r6, #16
 8000a7e:	0005      	movs	r5, r0
 8000a80:	4319      	orrs	r1, r3
 8000a82:	428a      	cmp	r2, r1
 8000a84:	d900      	bls.n	8000a88 <__aeabi_ddiv+0x1f8>
 8000a86:	e16c      	b.n	8000d62 <__aeabi_ddiv+0x4d2>
 8000a88:	1a88      	subs	r0, r1, r2
 8000a8a:	4649      	mov	r1, r9
 8000a8c:	f7ff fbbe 	bl	800020c <__aeabi_uidivmod>
 8000a90:	9a01      	ldr	r2, [sp, #4]
 8000a92:	0436      	lsls	r6, r6, #16
 8000a94:	4342      	muls	r2, r0
 8000a96:	0409      	lsls	r1, r1, #16
 8000a98:	0c36      	lsrs	r6, r6, #16
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	430e      	orrs	r6, r1
 8000a9e:	42b2      	cmp	r2, r6
 8000aa0:	d900      	bls.n	8000aa4 <__aeabi_ddiv+0x214>
 8000aa2:	e153      	b.n	8000d4c <__aeabi_ddiv+0x4bc>
 8000aa4:	9803      	ldr	r0, [sp, #12]
 8000aa6:	1ab6      	subs	r6, r6, r2
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	042d      	lsls	r5, r5, #16
 8000aac:	431d      	orrs	r5, r3
 8000aae:	9f02      	ldr	r7, [sp, #8]
 8000ab0:	042b      	lsls	r3, r5, #16
 8000ab2:	0c1b      	lsrs	r3, r3, #16
 8000ab4:	435a      	muls	r2, r3
 8000ab6:	437b      	muls	r3, r7
 8000ab8:	469c      	mov	ip, r3
 8000aba:	0c29      	lsrs	r1, r5, #16
 8000abc:	4348      	muls	r0, r1
 8000abe:	0c13      	lsrs	r3, r2, #16
 8000ac0:	4484      	add	ip, r0
 8000ac2:	4463      	add	r3, ip
 8000ac4:	4379      	muls	r1, r7
 8000ac6:	4298      	cmp	r0, r3
 8000ac8:	d903      	bls.n	8000ad2 <__aeabi_ddiv+0x242>
 8000aca:	2080      	movs	r0, #128	; 0x80
 8000acc:	0240      	lsls	r0, r0, #9
 8000ace:	4684      	mov	ip, r0
 8000ad0:	4461      	add	r1, ip
 8000ad2:	0c18      	lsrs	r0, r3, #16
 8000ad4:	0412      	lsls	r2, r2, #16
 8000ad6:	041b      	lsls	r3, r3, #16
 8000ad8:	0c12      	lsrs	r2, r2, #16
 8000ada:	1841      	adds	r1, r0, r1
 8000adc:	189b      	adds	r3, r3, r2
 8000ade:	428e      	cmp	r6, r1
 8000ae0:	d200      	bcs.n	8000ae4 <__aeabi_ddiv+0x254>
 8000ae2:	e0ff      	b.n	8000ce4 <__aeabi_ddiv+0x454>
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_ddiv+0x258>
 8000ae6:	e0fa      	b.n	8000cde <__aeabi_ddiv+0x44e>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	431d      	orrs	r5, r3
 8000aec:	4a49      	ldr	r2, [pc, #292]	; (8000c14 <__aeabi_ddiv+0x384>)
 8000aee:	445a      	add	r2, fp
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	dc00      	bgt.n	8000af6 <__aeabi_ddiv+0x266>
 8000af4:	e0aa      	b.n	8000c4c <__aeabi_ddiv+0x3bc>
 8000af6:	076b      	lsls	r3, r5, #29
 8000af8:	d000      	beq.n	8000afc <__aeabi_ddiv+0x26c>
 8000afa:	e13d      	b.n	8000d78 <__aeabi_ddiv+0x4e8>
 8000afc:	08ed      	lsrs	r5, r5, #3
 8000afe:	4643      	mov	r3, r8
 8000b00:	01db      	lsls	r3, r3, #7
 8000b02:	d506      	bpl.n	8000b12 <__aeabi_ddiv+0x282>
 8000b04:	4642      	mov	r2, r8
 8000b06:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <__aeabi_ddiv+0x388>)
 8000b08:	401a      	ands	r2, r3
 8000b0a:	4690      	mov	r8, r2
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	00d2      	lsls	r2, r2, #3
 8000b10:	445a      	add	r2, fp
 8000b12:	4b42      	ldr	r3, [pc, #264]	; (8000c1c <__aeabi_ddiv+0x38c>)
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dd00      	ble.n	8000b1a <__aeabi_ddiv+0x28a>
 8000b18:	e71f      	b.n	800095a <__aeabi_ddiv+0xca>
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	075b      	lsls	r3, r3, #29
 8000b1e:	431d      	orrs	r5, r3
 8000b20:	4643      	mov	r3, r8
 8000b22:	0552      	lsls	r2, r2, #21
 8000b24:	025c      	lsls	r4, r3, #9
 8000b26:	0b24      	lsrs	r4, r4, #12
 8000b28:	0d53      	lsrs	r3, r2, #21
 8000b2a:	e708      	b.n	800093e <__aeabi_ddiv+0xae>
 8000b2c:	4652      	mov	r2, sl
 8000b2e:	4322      	orrs	r2, r4
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x2a4>
 8000b32:	e07b      	b.n	8000c2c <__aeabi_ddiv+0x39c>
 8000b34:	2c00      	cmp	r4, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_ddiv+0x2aa>
 8000b38:	e0fa      	b.n	8000d30 <__aeabi_ddiv+0x4a0>
 8000b3a:	0020      	movs	r0, r4
 8000b3c:	f001 f84a 	bl	8001bd4 <__clzsi2>
 8000b40:	0002      	movs	r2, r0
 8000b42:	3a0b      	subs	r2, #11
 8000b44:	231d      	movs	r3, #29
 8000b46:	0001      	movs	r1, r0
 8000b48:	1a9b      	subs	r3, r3, r2
 8000b4a:	4652      	mov	r2, sl
 8000b4c:	3908      	subs	r1, #8
 8000b4e:	40da      	lsrs	r2, r3
 8000b50:	408c      	lsls	r4, r1
 8000b52:	4314      	orrs	r4, r2
 8000b54:	4652      	mov	r2, sl
 8000b56:	408a      	lsls	r2, r1
 8000b58:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <__aeabi_ddiv+0x390>)
 8000b5a:	4458      	add	r0, fp
 8000b5c:	469b      	mov	fp, r3
 8000b5e:	4483      	add	fp, r0
 8000b60:	2000      	movs	r0, #0
 8000b62:	e6d5      	b.n	8000910 <__aeabi_ddiv+0x80>
 8000b64:	464b      	mov	r3, r9
 8000b66:	4323      	orrs	r3, r4
 8000b68:	4698      	mov	r8, r3
 8000b6a:	d044      	beq.n	8000bf6 <__aeabi_ddiv+0x366>
 8000b6c:	2c00      	cmp	r4, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_ddiv+0x2e2>
 8000b70:	e0ce      	b.n	8000d10 <__aeabi_ddiv+0x480>
 8000b72:	0020      	movs	r0, r4
 8000b74:	f001 f82e 	bl	8001bd4 <__clzsi2>
 8000b78:	0001      	movs	r1, r0
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	390b      	subs	r1, #11
 8000b7e:	231d      	movs	r3, #29
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	4649      	mov	r1, r9
 8000b84:	0010      	movs	r0, r2
 8000b86:	40d9      	lsrs	r1, r3
 8000b88:	3808      	subs	r0, #8
 8000b8a:	4084      	lsls	r4, r0
 8000b8c:	000b      	movs	r3, r1
 8000b8e:	464d      	mov	r5, r9
 8000b90:	4323      	orrs	r3, r4
 8000b92:	4698      	mov	r8, r3
 8000b94:	4085      	lsls	r5, r0
 8000b96:	4823      	ldr	r0, [pc, #140]	; (8000c24 <__aeabi_ddiv+0x394>)
 8000b98:	1a83      	subs	r3, r0, r2
 8000b9a:	469b      	mov	fp, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	4699      	mov	r9, r3
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	e69a      	b.n	80008da <__aeabi_ddiv+0x4a>
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	4323      	orrs	r3, r4
 8000ba8:	4698      	mov	r8, r3
 8000baa:	d11d      	bne.n	8000be8 <__aeabi_ddiv+0x358>
 8000bac:	2308      	movs	r3, #8
 8000bae:	4699      	mov	r9, r3
 8000bb0:	3b06      	subs	r3, #6
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	4683      	mov	fp, r0
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	e68f      	b.n	80008da <__aeabi_ddiv+0x4a>
 8000bba:	4652      	mov	r2, sl
 8000bbc:	4322      	orrs	r2, r4
 8000bbe:	d109      	bne.n	8000bd4 <__aeabi_ddiv+0x344>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	4649      	mov	r1, r9
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <__aeabi_ddiv+0x398>)
 8000bc8:	4689      	mov	r9, r1
 8000bca:	469c      	mov	ip, r3
 8000bcc:	2400      	movs	r4, #0
 8000bce:	2002      	movs	r0, #2
 8000bd0:	44e3      	add	fp, ip
 8000bd2:	e69d      	b.n	8000910 <__aeabi_ddiv+0x80>
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <__aeabi_ddiv+0x398>)
 8000bdc:	4691      	mov	r9, r2
 8000bde:	469c      	mov	ip, r3
 8000be0:	4652      	mov	r2, sl
 8000be2:	2003      	movs	r0, #3
 8000be4:	44e3      	add	fp, ip
 8000be6:	e693      	b.n	8000910 <__aeabi_ddiv+0x80>
 8000be8:	230c      	movs	r3, #12
 8000bea:	4699      	mov	r9, r3
 8000bec:	3b09      	subs	r3, #9
 8000bee:	46a0      	mov	r8, r4
 8000bf0:	4683      	mov	fp, r0
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	e671      	b.n	80008da <__aeabi_ddiv+0x4a>
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	4699      	mov	r9, r3
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	469b      	mov	fp, r3
 8000bfe:	3301      	adds	r3, #1
 8000c00:	2500      	movs	r5, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	e669      	b.n	80008da <__aeabi_ddiv+0x4a>
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	000007ff 	.word	0x000007ff
 8000c0c:	fffffc01 	.word	0xfffffc01
 8000c10:	08003838 	.word	0x08003838
 8000c14:	000003ff 	.word	0x000003ff
 8000c18:	feffffff 	.word	0xfeffffff
 8000c1c:	000007fe 	.word	0x000007fe
 8000c20:	000003f3 	.word	0x000003f3
 8000c24:	fffffc0d 	.word	0xfffffc0d
 8000c28:	fffff801 	.word	0xfffff801
 8000c2c:	4649      	mov	r1, r9
 8000c2e:	2301      	movs	r3, #1
 8000c30:	4319      	orrs	r1, r3
 8000c32:	4689      	mov	r9, r1
 8000c34:	2400      	movs	r4, #0
 8000c36:	2001      	movs	r0, #1
 8000c38:	e66a      	b.n	8000910 <__aeabi_ddiv+0x80>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2480      	movs	r4, #128	; 0x80
 8000c3e:	469a      	mov	sl, r3
 8000c40:	2500      	movs	r5, #0
 8000c42:	4b8a      	ldr	r3, [pc, #552]	; (8000e6c <__aeabi_ddiv+0x5dc>)
 8000c44:	0324      	lsls	r4, r4, #12
 8000c46:	e67a      	b.n	800093e <__aeabi_ddiv+0xae>
 8000c48:	2501      	movs	r5, #1
 8000c4a:	426d      	negs	r5, r5
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	2b38      	cmp	r3, #56	; 0x38
 8000c52:	dd00      	ble.n	8000c56 <__aeabi_ddiv+0x3c6>
 8000c54:	e670      	b.n	8000938 <__aeabi_ddiv+0xa8>
 8000c56:	2b1f      	cmp	r3, #31
 8000c58:	dc00      	bgt.n	8000c5c <__aeabi_ddiv+0x3cc>
 8000c5a:	e0bf      	b.n	8000ddc <__aeabi_ddiv+0x54c>
 8000c5c:	211f      	movs	r1, #31
 8000c5e:	4249      	negs	r1, r1
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	4641      	mov	r1, r8
 8000c64:	40d1      	lsrs	r1, r2
 8000c66:	000a      	movs	r2, r1
 8000c68:	2b20      	cmp	r3, #32
 8000c6a:	d004      	beq.n	8000c76 <__aeabi_ddiv+0x3e6>
 8000c6c:	4641      	mov	r1, r8
 8000c6e:	4b80      	ldr	r3, [pc, #512]	; (8000e70 <__aeabi_ddiv+0x5e0>)
 8000c70:	445b      	add	r3, fp
 8000c72:	4099      	lsls	r1, r3
 8000c74:	430d      	orrs	r5, r1
 8000c76:	1e6b      	subs	r3, r5, #1
 8000c78:	419d      	sbcs	r5, r3
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	432a      	orrs	r2, r5
 8000c7e:	001d      	movs	r5, r3
 8000c80:	2400      	movs	r4, #0
 8000c82:	4015      	ands	r5, r2
 8000c84:	4213      	tst	r3, r2
 8000c86:	d100      	bne.n	8000c8a <__aeabi_ddiv+0x3fa>
 8000c88:	e0d4      	b.n	8000e34 <__aeabi_ddiv+0x5a4>
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4011      	ands	r1, r2
 8000c90:	2904      	cmp	r1, #4
 8000c92:	d100      	bne.n	8000c96 <__aeabi_ddiv+0x406>
 8000c94:	e0cb      	b.n	8000e2e <__aeabi_ddiv+0x59e>
 8000c96:	1d11      	adds	r1, r2, #4
 8000c98:	4291      	cmp	r1, r2
 8000c9a:	4192      	sbcs	r2, r2
 8000c9c:	4252      	negs	r2, r2
 8000c9e:	189b      	adds	r3, r3, r2
 8000ca0:	000a      	movs	r2, r1
 8000ca2:	0219      	lsls	r1, r3, #8
 8000ca4:	d400      	bmi.n	8000ca8 <__aeabi_ddiv+0x418>
 8000ca6:	e0c2      	b.n	8000e2e <__aeabi_ddiv+0x59e>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	e646      	b.n	800093e <__aeabi_ddiv+0xae>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	4641      	mov	r1, r8
 8000cb4:	031b      	lsls	r3, r3, #12
 8000cb6:	4219      	tst	r1, r3
 8000cb8:	d008      	beq.n	8000ccc <__aeabi_ddiv+0x43c>
 8000cba:	421c      	tst	r4, r3
 8000cbc:	d106      	bne.n	8000ccc <__aeabi_ddiv+0x43c>
 8000cbe:	431c      	orrs	r4, r3
 8000cc0:	0324      	lsls	r4, r4, #12
 8000cc2:	46ba      	mov	sl, r7
 8000cc4:	0015      	movs	r5, r2
 8000cc6:	4b69      	ldr	r3, [pc, #420]	; (8000e6c <__aeabi_ddiv+0x5dc>)
 8000cc8:	0b24      	lsrs	r4, r4, #12
 8000cca:	e638      	b.n	800093e <__aeabi_ddiv+0xae>
 8000ccc:	2480      	movs	r4, #128	; 0x80
 8000cce:	4643      	mov	r3, r8
 8000cd0:	0324      	lsls	r4, r4, #12
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	0324      	lsls	r4, r4, #12
 8000cd6:	46b2      	mov	sl, r6
 8000cd8:	4b64      	ldr	r3, [pc, #400]	; (8000e6c <__aeabi_ddiv+0x5dc>)
 8000cda:	0b24      	lsrs	r4, r4, #12
 8000cdc:	e62f      	b.n	800093e <__aeabi_ddiv+0xae>
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_ddiv+0x454>
 8000ce2:	e703      	b.n	8000aec <__aeabi_ddiv+0x25c>
 8000ce4:	19a6      	adds	r6, r4, r6
 8000ce6:	1e68      	subs	r0, r5, #1
 8000ce8:	42a6      	cmp	r6, r4
 8000cea:	d200      	bcs.n	8000cee <__aeabi_ddiv+0x45e>
 8000cec:	e08d      	b.n	8000e0a <__aeabi_ddiv+0x57a>
 8000cee:	428e      	cmp	r6, r1
 8000cf0:	d200      	bcs.n	8000cf4 <__aeabi_ddiv+0x464>
 8000cf2:	e0a3      	b.n	8000e3c <__aeabi_ddiv+0x5ac>
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_ddiv+0x468>
 8000cf6:	e0b3      	b.n	8000e60 <__aeabi_ddiv+0x5d0>
 8000cf8:	0005      	movs	r5, r0
 8000cfa:	e6f5      	b.n	8000ae8 <__aeabi_ddiv+0x258>
 8000cfc:	42aa      	cmp	r2, r5
 8000cfe:	d900      	bls.n	8000d02 <__aeabi_ddiv+0x472>
 8000d00:	e639      	b.n	8000976 <__aeabi_ddiv+0xe6>
 8000d02:	4643      	mov	r3, r8
 8000d04:	07de      	lsls	r6, r3, #31
 8000d06:	0858      	lsrs	r0, r3, #1
 8000d08:	086b      	lsrs	r3, r5, #1
 8000d0a:	431e      	orrs	r6, r3
 8000d0c:	07ed      	lsls	r5, r5, #31
 8000d0e:	e639      	b.n	8000984 <__aeabi_ddiv+0xf4>
 8000d10:	4648      	mov	r0, r9
 8000d12:	f000 ff5f 	bl	8001bd4 <__clzsi2>
 8000d16:	0001      	movs	r1, r0
 8000d18:	0002      	movs	r2, r0
 8000d1a:	3115      	adds	r1, #21
 8000d1c:	3220      	adds	r2, #32
 8000d1e:	291c      	cmp	r1, #28
 8000d20:	dc00      	bgt.n	8000d24 <__aeabi_ddiv+0x494>
 8000d22:	e72c      	b.n	8000b7e <__aeabi_ddiv+0x2ee>
 8000d24:	464b      	mov	r3, r9
 8000d26:	3808      	subs	r0, #8
 8000d28:	4083      	lsls	r3, r0
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	4698      	mov	r8, r3
 8000d2e:	e732      	b.n	8000b96 <__aeabi_ddiv+0x306>
 8000d30:	f000 ff50 	bl	8001bd4 <__clzsi2>
 8000d34:	0003      	movs	r3, r0
 8000d36:	001a      	movs	r2, r3
 8000d38:	3215      	adds	r2, #21
 8000d3a:	3020      	adds	r0, #32
 8000d3c:	2a1c      	cmp	r2, #28
 8000d3e:	dc00      	bgt.n	8000d42 <__aeabi_ddiv+0x4b2>
 8000d40:	e700      	b.n	8000b44 <__aeabi_ddiv+0x2b4>
 8000d42:	4654      	mov	r4, sl
 8000d44:	3b08      	subs	r3, #8
 8000d46:	2200      	movs	r2, #0
 8000d48:	409c      	lsls	r4, r3
 8000d4a:	e705      	b.n	8000b58 <__aeabi_ddiv+0x2c8>
 8000d4c:	1936      	adds	r6, r6, r4
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	42b4      	cmp	r4, r6
 8000d52:	d900      	bls.n	8000d56 <__aeabi_ddiv+0x4c6>
 8000d54:	e6a6      	b.n	8000aa4 <__aeabi_ddiv+0x214>
 8000d56:	42b2      	cmp	r2, r6
 8000d58:	d800      	bhi.n	8000d5c <__aeabi_ddiv+0x4cc>
 8000d5a:	e6a3      	b.n	8000aa4 <__aeabi_ddiv+0x214>
 8000d5c:	1e83      	subs	r3, r0, #2
 8000d5e:	1936      	adds	r6, r6, r4
 8000d60:	e6a0      	b.n	8000aa4 <__aeabi_ddiv+0x214>
 8000d62:	1909      	adds	r1, r1, r4
 8000d64:	3d01      	subs	r5, #1
 8000d66:	428c      	cmp	r4, r1
 8000d68:	d900      	bls.n	8000d6c <__aeabi_ddiv+0x4dc>
 8000d6a:	e68d      	b.n	8000a88 <__aeabi_ddiv+0x1f8>
 8000d6c:	428a      	cmp	r2, r1
 8000d6e:	d800      	bhi.n	8000d72 <__aeabi_ddiv+0x4e2>
 8000d70:	e68a      	b.n	8000a88 <__aeabi_ddiv+0x1f8>
 8000d72:	1e85      	subs	r5, r0, #2
 8000d74:	1909      	adds	r1, r1, r4
 8000d76:	e687      	b.n	8000a88 <__aeabi_ddiv+0x1f8>
 8000d78:	230f      	movs	r3, #15
 8000d7a:	402b      	ands	r3, r5
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x4f2>
 8000d80:	e6bc      	b.n	8000afc <__aeabi_ddiv+0x26c>
 8000d82:	2305      	movs	r3, #5
 8000d84:	425b      	negs	r3, r3
 8000d86:	42ab      	cmp	r3, r5
 8000d88:	419b      	sbcs	r3, r3
 8000d8a:	3504      	adds	r5, #4
 8000d8c:	425b      	negs	r3, r3
 8000d8e:	08ed      	lsrs	r5, r5, #3
 8000d90:	4498      	add	r8, r3
 8000d92:	e6b4      	b.n	8000afe <__aeabi_ddiv+0x26e>
 8000d94:	42af      	cmp	r7, r5
 8000d96:	d900      	bls.n	8000d9a <__aeabi_ddiv+0x50a>
 8000d98:	e660      	b.n	8000a5c <__aeabi_ddiv+0x1cc>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	d804      	bhi.n	8000da8 <__aeabi_ddiv+0x518>
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_ddiv+0x512>
 8000da0:	e65c      	b.n	8000a5c <__aeabi_ddiv+0x1cc>
 8000da2:	42ae      	cmp	r6, r5
 8000da4:	d800      	bhi.n	8000da8 <__aeabi_ddiv+0x518>
 8000da6:	e659      	b.n	8000a5c <__aeabi_ddiv+0x1cc>
 8000da8:	2302      	movs	r3, #2
 8000daa:	425b      	negs	r3, r3
 8000dac:	469c      	mov	ip, r3
 8000dae:	9b00      	ldr	r3, [sp, #0]
 8000db0:	44e0      	add	r8, ip
 8000db2:	469c      	mov	ip, r3
 8000db4:	4465      	add	r5, ip
 8000db6:	429d      	cmp	r5, r3
 8000db8:	419b      	sbcs	r3, r3
 8000dba:	425b      	negs	r3, r3
 8000dbc:	191b      	adds	r3, r3, r4
 8000dbe:	18c0      	adds	r0, r0, r3
 8000dc0:	e64d      	b.n	8000a5e <__aeabi_ddiv+0x1ce>
 8000dc2:	428a      	cmp	r2, r1
 8000dc4:	d800      	bhi.n	8000dc8 <__aeabi_ddiv+0x538>
 8000dc6:	e60e      	b.n	80009e6 <__aeabi_ddiv+0x156>
 8000dc8:	1e83      	subs	r3, r0, #2
 8000dca:	1909      	adds	r1, r1, r4
 8000dcc:	e60b      	b.n	80009e6 <__aeabi_ddiv+0x156>
 8000dce:	428a      	cmp	r2, r1
 8000dd0:	d800      	bhi.n	8000dd4 <__aeabi_ddiv+0x544>
 8000dd2:	e5f4      	b.n	80009be <__aeabi_ddiv+0x12e>
 8000dd4:	1e83      	subs	r3, r0, #2
 8000dd6:	4698      	mov	r8, r3
 8000dd8:	1909      	adds	r1, r1, r4
 8000dda:	e5f0      	b.n	80009be <__aeabi_ddiv+0x12e>
 8000ddc:	4925      	ldr	r1, [pc, #148]	; (8000e74 <__aeabi_ddiv+0x5e4>)
 8000dde:	0028      	movs	r0, r5
 8000de0:	4459      	add	r1, fp
 8000de2:	408d      	lsls	r5, r1
 8000de4:	4642      	mov	r2, r8
 8000de6:	408a      	lsls	r2, r1
 8000de8:	1e69      	subs	r1, r5, #1
 8000dea:	418d      	sbcs	r5, r1
 8000dec:	4641      	mov	r1, r8
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	40d9      	lsrs	r1, r3
 8000df2:	4302      	orrs	r2, r0
 8000df4:	432a      	orrs	r2, r5
 8000df6:	000b      	movs	r3, r1
 8000df8:	0751      	lsls	r1, r2, #29
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_ddiv+0x56e>
 8000dfc:	e751      	b.n	8000ca2 <__aeabi_ddiv+0x412>
 8000dfe:	210f      	movs	r1, #15
 8000e00:	4011      	ands	r1, r2
 8000e02:	2904      	cmp	r1, #4
 8000e04:	d000      	beq.n	8000e08 <__aeabi_ddiv+0x578>
 8000e06:	e746      	b.n	8000c96 <__aeabi_ddiv+0x406>
 8000e08:	e74b      	b.n	8000ca2 <__aeabi_ddiv+0x412>
 8000e0a:	0005      	movs	r5, r0
 8000e0c:	428e      	cmp	r6, r1
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_ddiv+0x582>
 8000e10:	e66a      	b.n	8000ae8 <__aeabi_ddiv+0x258>
 8000e12:	9a00      	ldr	r2, [sp, #0]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d000      	beq.n	8000e1a <__aeabi_ddiv+0x58a>
 8000e18:	e666      	b.n	8000ae8 <__aeabi_ddiv+0x258>
 8000e1a:	e667      	b.n	8000aec <__aeabi_ddiv+0x25c>
 8000e1c:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <__aeabi_ddiv+0x5e8>)
 8000e1e:	445a      	add	r2, fp
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	dc00      	bgt.n	8000e26 <__aeabi_ddiv+0x596>
 8000e24:	e710      	b.n	8000c48 <__aeabi_ddiv+0x3b8>
 8000e26:	2301      	movs	r3, #1
 8000e28:	2500      	movs	r5, #0
 8000e2a:	4498      	add	r8, r3
 8000e2c:	e667      	b.n	8000afe <__aeabi_ddiv+0x26e>
 8000e2e:	075d      	lsls	r5, r3, #29
 8000e30:	025b      	lsls	r3, r3, #9
 8000e32:	0b1c      	lsrs	r4, r3, #12
 8000e34:	08d2      	lsrs	r2, r2, #3
 8000e36:	2300      	movs	r3, #0
 8000e38:	4315      	orrs	r5, r2
 8000e3a:	e580      	b.n	800093e <__aeabi_ddiv+0xae>
 8000e3c:	9800      	ldr	r0, [sp, #0]
 8000e3e:	3d02      	subs	r5, #2
 8000e40:	0042      	lsls	r2, r0, #1
 8000e42:	4282      	cmp	r2, r0
 8000e44:	41bf      	sbcs	r7, r7
 8000e46:	427f      	negs	r7, r7
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	1936      	adds	r6, r6, r4
 8000e4c:	9200      	str	r2, [sp, #0]
 8000e4e:	e7dd      	b.n	8000e0c <__aeabi_ddiv+0x57c>
 8000e50:	2480      	movs	r4, #128	; 0x80
 8000e52:	4643      	mov	r3, r8
 8000e54:	0324      	lsls	r4, r4, #12
 8000e56:	431c      	orrs	r4, r3
 8000e58:	0324      	lsls	r4, r4, #12
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__aeabi_ddiv+0x5dc>)
 8000e5c:	0b24      	lsrs	r4, r4, #12
 8000e5e:	e56e      	b.n	800093e <__aeabi_ddiv+0xae>
 8000e60:	9a00      	ldr	r2, [sp, #0]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d3ea      	bcc.n	8000e3c <__aeabi_ddiv+0x5ac>
 8000e66:	0005      	movs	r5, r0
 8000e68:	e7d3      	b.n	8000e12 <__aeabi_ddiv+0x582>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	000007ff 	.word	0x000007ff
 8000e70:	0000043e 	.word	0x0000043e
 8000e74:	0000041e 	.word	0x0000041e
 8000e78:	000003ff 	.word	0x000003ff

08000e7c <__aeabi_dmul>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	464e      	mov	r6, r9
 8000e82:	4645      	mov	r5, r8
 8000e84:	46de      	mov	lr, fp
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	4698      	mov	r8, r3
 8000e8a:	030c      	lsls	r4, r1, #12
 8000e8c:	004b      	lsls	r3, r1, #1
 8000e8e:	0006      	movs	r6, r0
 8000e90:	4692      	mov	sl, r2
 8000e92:	b087      	sub	sp, #28
 8000e94:	0b24      	lsrs	r4, r4, #12
 8000e96:	0d5b      	lsrs	r3, r3, #21
 8000e98:	0fcf      	lsrs	r7, r1, #31
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dmul+0x24>
 8000e9e:	e15c      	b.n	800115a <__aeabi_dmul+0x2de>
 8000ea0:	4ad9      	ldr	r2, [pc, #868]	; (8001208 <__aeabi_dmul+0x38c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dmul+0x2c>
 8000ea6:	e175      	b.n	8001194 <__aeabi_dmul+0x318>
 8000ea8:	0f42      	lsrs	r2, r0, #29
 8000eaa:	00e4      	lsls	r4, r4, #3
 8000eac:	4314      	orrs	r4, r2
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	0412      	lsls	r2, r2, #16
 8000eb2:	4314      	orrs	r4, r2
 8000eb4:	4ad5      	ldr	r2, [pc, #852]	; (800120c <__aeabi_dmul+0x390>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4694      	mov	ip, r2
 8000eba:	4463      	add	r3, ip
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	4699      	mov	r9, r3
 8000ec2:	469b      	mov	fp, r3
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	031e      	lsls	r6, r3, #12
 8000eca:	0fd2      	lsrs	r2, r2, #31
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4650      	mov	r0, sl
 8000ed0:	4690      	mov	r8, r2
 8000ed2:	0b36      	lsrs	r6, r6, #12
 8000ed4:	0d5b      	lsrs	r3, r3, #21
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dmul+0x5e>
 8000ed8:	e120      	b.n	800111c <__aeabi_dmul+0x2a0>
 8000eda:	4acb      	ldr	r2, [pc, #812]	; (8001208 <__aeabi_dmul+0x38c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dmul+0x66>
 8000ee0:	e162      	b.n	80011a8 <__aeabi_dmul+0x32c>
 8000ee2:	49ca      	ldr	r1, [pc, #808]	; (800120c <__aeabi_dmul+0x390>)
 8000ee4:	0f42      	lsrs	r2, r0, #29
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	9900      	ldr	r1, [sp, #0]
 8000eea:	4463      	add	r3, ip
 8000eec:	00f6      	lsls	r6, r6, #3
 8000eee:	468c      	mov	ip, r1
 8000ef0:	4316      	orrs	r6, r2
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	449c      	add	ip, r3
 8000ef6:	0412      	lsls	r2, r2, #16
 8000ef8:	4663      	mov	r3, ip
 8000efa:	4316      	orrs	r6, r2
 8000efc:	00c2      	lsls	r2, r0, #3
 8000efe:	2000      	movs	r0, #0
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	9900      	ldr	r1, [sp, #0]
 8000f04:	4643      	mov	r3, r8
 8000f06:	3101      	adds	r1, #1
 8000f08:	468c      	mov	ip, r1
 8000f0a:	4649      	mov	r1, r9
 8000f0c:	407b      	eors	r3, r7
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	290f      	cmp	r1, #15
 8000f12:	d826      	bhi.n	8000f62 <__aeabi_dmul+0xe6>
 8000f14:	4bbe      	ldr	r3, [pc, #760]	; (8001210 <__aeabi_dmul+0x394>)
 8000f16:	0089      	lsls	r1, r1, #2
 8000f18:	5859      	ldr	r1, [r3, r1]
 8000f1a:	468f      	mov	pc, r1
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	0034      	movs	r4, r6
 8000f22:	0015      	movs	r5, r2
 8000f24:	4683      	mov	fp, r0
 8000f26:	465b      	mov	r3, fp
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d016      	beq.n	8000f5a <__aeabi_dmul+0xde>
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dmul+0xb6>
 8000f30:	e203      	b.n	800133a <__aeabi_dmul+0x4be>
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d000      	beq.n	8000f38 <__aeabi_dmul+0xbc>
 8000f36:	e0cd      	b.n	80010d4 <__aeabi_dmul+0x258>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	9b01      	ldr	r3, [sp, #4]
 8000f40:	0512      	lsls	r2, r2, #20
 8000f42:	4322      	orrs	r2, r4
 8000f44:	07db      	lsls	r3, r3, #31
 8000f46:	431a      	orrs	r2, r3
 8000f48:	0028      	movs	r0, r5
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	b007      	add	sp, #28
 8000f4e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f50:	46bb      	mov	fp, r7
 8000f52:	46b2      	mov	sl, r6
 8000f54:	46a9      	mov	r9, r5
 8000f56:	46a0      	mov	r8, r4
 8000f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f5a:	2400      	movs	r4, #0
 8000f5c:	2500      	movs	r5, #0
 8000f5e:	4aaa      	ldr	r2, [pc, #680]	; (8001208 <__aeabi_dmul+0x38c>)
 8000f60:	e7ed      	b.n	8000f3e <__aeabi_dmul+0xc2>
 8000f62:	0c28      	lsrs	r0, r5, #16
 8000f64:	042d      	lsls	r5, r5, #16
 8000f66:	0c2d      	lsrs	r5, r5, #16
 8000f68:	002b      	movs	r3, r5
 8000f6a:	0c11      	lsrs	r1, r2, #16
 8000f6c:	0412      	lsls	r2, r2, #16
 8000f6e:	0c12      	lsrs	r2, r2, #16
 8000f70:	4353      	muls	r3, r2
 8000f72:	4698      	mov	r8, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	002f      	movs	r7, r5
 8000f78:	4343      	muls	r3, r0
 8000f7a:	4699      	mov	r9, r3
 8000f7c:	434f      	muls	r7, r1
 8000f7e:	444f      	add	r7, r9
 8000f80:	46bb      	mov	fp, r7
 8000f82:	4647      	mov	r7, r8
 8000f84:	000b      	movs	r3, r1
 8000f86:	0c3f      	lsrs	r7, r7, #16
 8000f88:	46ba      	mov	sl, r7
 8000f8a:	4343      	muls	r3, r0
 8000f8c:	44da      	add	sl, fp
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	45d1      	cmp	r9, sl
 8000f92:	d904      	bls.n	8000f9e <__aeabi_dmul+0x122>
 8000f94:	2780      	movs	r7, #128	; 0x80
 8000f96:	027f      	lsls	r7, r7, #9
 8000f98:	46b9      	mov	r9, r7
 8000f9a:	444b      	add	r3, r9
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	4653      	mov	r3, sl
 8000fa0:	0c1b      	lsrs	r3, r3, #16
 8000fa2:	469b      	mov	fp, r3
 8000fa4:	4653      	mov	r3, sl
 8000fa6:	041f      	lsls	r7, r3, #16
 8000fa8:	4643      	mov	r3, r8
 8000faa:	041b      	lsls	r3, r3, #16
 8000fac:	0c1b      	lsrs	r3, r3, #16
 8000fae:	4698      	mov	r8, r3
 8000fb0:	003b      	movs	r3, r7
 8000fb2:	4443      	add	r3, r8
 8000fb4:	9304      	str	r3, [sp, #16]
 8000fb6:	0c33      	lsrs	r3, r6, #16
 8000fb8:	0436      	lsls	r6, r6, #16
 8000fba:	0c36      	lsrs	r6, r6, #16
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	0033      	movs	r3, r6
 8000fc0:	4343      	muls	r3, r0
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	4643      	mov	r3, r8
 8000fc6:	4343      	muls	r3, r0
 8000fc8:	002f      	movs	r7, r5
 8000fca:	469a      	mov	sl, r3
 8000fcc:	4643      	mov	r3, r8
 8000fce:	4377      	muls	r7, r6
 8000fd0:	435d      	muls	r5, r3
 8000fd2:	0c38      	lsrs	r0, r7, #16
 8000fd4:	444d      	add	r5, r9
 8000fd6:	1945      	adds	r5, r0, r5
 8000fd8:	45a9      	cmp	r9, r5
 8000fda:	d903      	bls.n	8000fe4 <__aeabi_dmul+0x168>
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	025b      	lsls	r3, r3, #9
 8000fe0:	4699      	mov	r9, r3
 8000fe2:	44ca      	add	sl, r9
 8000fe4:	043f      	lsls	r7, r7, #16
 8000fe6:	0c28      	lsrs	r0, r5, #16
 8000fe8:	0c3f      	lsrs	r7, r7, #16
 8000fea:	042d      	lsls	r5, r5, #16
 8000fec:	19ed      	adds	r5, r5, r7
 8000fee:	0c27      	lsrs	r7, r4, #16
 8000ff0:	0424      	lsls	r4, r4, #16
 8000ff2:	0c24      	lsrs	r4, r4, #16
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	0020      	movs	r0, r4
 8000ff8:	4350      	muls	r0, r2
 8000ffa:	437a      	muls	r2, r7
 8000ffc:	4691      	mov	r9, r2
 8000ffe:	003a      	movs	r2, r7
 8001000:	4453      	add	r3, sl
 8001002:	9305      	str	r3, [sp, #20]
 8001004:	0c03      	lsrs	r3, r0, #16
 8001006:	469a      	mov	sl, r3
 8001008:	434a      	muls	r2, r1
 800100a:	4361      	muls	r1, r4
 800100c:	4449      	add	r1, r9
 800100e:	4451      	add	r1, sl
 8001010:	44ab      	add	fp, r5
 8001012:	4589      	cmp	r9, r1
 8001014:	d903      	bls.n	800101e <__aeabi_dmul+0x1a2>
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	025b      	lsls	r3, r3, #9
 800101a:	4699      	mov	r9, r3
 800101c:	444a      	add	r2, r9
 800101e:	0400      	lsls	r0, r0, #16
 8001020:	0c0b      	lsrs	r3, r1, #16
 8001022:	0c00      	lsrs	r0, r0, #16
 8001024:	0409      	lsls	r1, r1, #16
 8001026:	1809      	adds	r1, r1, r0
 8001028:	0020      	movs	r0, r4
 800102a:	4699      	mov	r9, r3
 800102c:	4643      	mov	r3, r8
 800102e:	4370      	muls	r0, r6
 8001030:	435c      	muls	r4, r3
 8001032:	437e      	muls	r6, r7
 8001034:	435f      	muls	r7, r3
 8001036:	0c03      	lsrs	r3, r0, #16
 8001038:	4698      	mov	r8, r3
 800103a:	19a4      	adds	r4, r4, r6
 800103c:	4444      	add	r4, r8
 800103e:	444a      	add	r2, r9
 8001040:	9703      	str	r7, [sp, #12]
 8001042:	42a6      	cmp	r6, r4
 8001044:	d904      	bls.n	8001050 <__aeabi_dmul+0x1d4>
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	4698      	mov	r8, r3
 800104c:	4447      	add	r7, r8
 800104e:	9703      	str	r7, [sp, #12]
 8001050:	0423      	lsls	r3, r4, #16
 8001052:	9e02      	ldr	r6, [sp, #8]
 8001054:	469a      	mov	sl, r3
 8001056:	9b05      	ldr	r3, [sp, #20]
 8001058:	445e      	add	r6, fp
 800105a:	4698      	mov	r8, r3
 800105c:	42ae      	cmp	r6, r5
 800105e:	41ad      	sbcs	r5, r5
 8001060:	1876      	adds	r6, r6, r1
 8001062:	428e      	cmp	r6, r1
 8001064:	4189      	sbcs	r1, r1
 8001066:	0400      	lsls	r0, r0, #16
 8001068:	0c00      	lsrs	r0, r0, #16
 800106a:	4450      	add	r0, sl
 800106c:	4440      	add	r0, r8
 800106e:	426d      	negs	r5, r5
 8001070:	1947      	adds	r7, r0, r5
 8001072:	46b8      	mov	r8, r7
 8001074:	4693      	mov	fp, r2
 8001076:	4249      	negs	r1, r1
 8001078:	4689      	mov	r9, r1
 800107a:	44c3      	add	fp, r8
 800107c:	44d9      	add	r9, fp
 800107e:	4298      	cmp	r0, r3
 8001080:	4180      	sbcs	r0, r0
 8001082:	45a8      	cmp	r8, r5
 8001084:	41ad      	sbcs	r5, r5
 8001086:	4593      	cmp	fp, r2
 8001088:	4192      	sbcs	r2, r2
 800108a:	4589      	cmp	r9, r1
 800108c:	4189      	sbcs	r1, r1
 800108e:	426d      	negs	r5, r5
 8001090:	4240      	negs	r0, r0
 8001092:	4328      	orrs	r0, r5
 8001094:	0c24      	lsrs	r4, r4, #16
 8001096:	4252      	negs	r2, r2
 8001098:	4249      	negs	r1, r1
 800109a:	430a      	orrs	r2, r1
 800109c:	9b03      	ldr	r3, [sp, #12]
 800109e:	1900      	adds	r0, r0, r4
 80010a0:	1880      	adds	r0, r0, r2
 80010a2:	18c7      	adds	r7, r0, r3
 80010a4:	464b      	mov	r3, r9
 80010a6:	0ddc      	lsrs	r4, r3, #23
 80010a8:	9b04      	ldr	r3, [sp, #16]
 80010aa:	0275      	lsls	r5, r6, #9
 80010ac:	431d      	orrs	r5, r3
 80010ae:	1e6a      	subs	r2, r5, #1
 80010b0:	4195      	sbcs	r5, r2
 80010b2:	464b      	mov	r3, r9
 80010b4:	0df6      	lsrs	r6, r6, #23
 80010b6:	027f      	lsls	r7, r7, #9
 80010b8:	4335      	orrs	r5, r6
 80010ba:	025a      	lsls	r2, r3, #9
 80010bc:	433c      	orrs	r4, r7
 80010be:	4315      	orrs	r5, r2
 80010c0:	01fb      	lsls	r3, r7, #7
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dmul+0x24a>
 80010c4:	e11c      	b.n	8001300 <__aeabi_dmul+0x484>
 80010c6:	2101      	movs	r1, #1
 80010c8:	086a      	lsrs	r2, r5, #1
 80010ca:	400d      	ands	r5, r1
 80010cc:	4315      	orrs	r5, r2
 80010ce:	07e2      	lsls	r2, r4, #31
 80010d0:	4315      	orrs	r5, r2
 80010d2:	0864      	lsrs	r4, r4, #1
 80010d4:	494f      	ldr	r1, [pc, #316]	; (8001214 <__aeabi_dmul+0x398>)
 80010d6:	4461      	add	r1, ip
 80010d8:	2900      	cmp	r1, #0
 80010da:	dc00      	bgt.n	80010de <__aeabi_dmul+0x262>
 80010dc:	e0b0      	b.n	8001240 <__aeabi_dmul+0x3c4>
 80010de:	076b      	lsls	r3, r5, #29
 80010e0:	d009      	beq.n	80010f6 <__aeabi_dmul+0x27a>
 80010e2:	220f      	movs	r2, #15
 80010e4:	402a      	ands	r2, r5
 80010e6:	2a04      	cmp	r2, #4
 80010e8:	d005      	beq.n	80010f6 <__aeabi_dmul+0x27a>
 80010ea:	1d2a      	adds	r2, r5, #4
 80010ec:	42aa      	cmp	r2, r5
 80010ee:	41ad      	sbcs	r5, r5
 80010f0:	426d      	negs	r5, r5
 80010f2:	1964      	adds	r4, r4, r5
 80010f4:	0015      	movs	r5, r2
 80010f6:	01e3      	lsls	r3, r4, #7
 80010f8:	d504      	bpl.n	8001104 <__aeabi_dmul+0x288>
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	4a46      	ldr	r2, [pc, #280]	; (8001218 <__aeabi_dmul+0x39c>)
 80010fe:	00c9      	lsls	r1, r1, #3
 8001100:	4014      	ands	r4, r2
 8001102:	4461      	add	r1, ip
 8001104:	4a45      	ldr	r2, [pc, #276]	; (800121c <__aeabi_dmul+0x3a0>)
 8001106:	4291      	cmp	r1, r2
 8001108:	dd00      	ble.n	800110c <__aeabi_dmul+0x290>
 800110a:	e726      	b.n	8000f5a <__aeabi_dmul+0xde>
 800110c:	0762      	lsls	r2, r4, #29
 800110e:	08ed      	lsrs	r5, r5, #3
 8001110:	0264      	lsls	r4, r4, #9
 8001112:	0549      	lsls	r1, r1, #21
 8001114:	4315      	orrs	r5, r2
 8001116:	0b24      	lsrs	r4, r4, #12
 8001118:	0d4a      	lsrs	r2, r1, #21
 800111a:	e710      	b.n	8000f3e <__aeabi_dmul+0xc2>
 800111c:	4652      	mov	r2, sl
 800111e:	4332      	orrs	r2, r6
 8001120:	d100      	bne.n	8001124 <__aeabi_dmul+0x2a8>
 8001122:	e07f      	b.n	8001224 <__aeabi_dmul+0x3a8>
 8001124:	2e00      	cmp	r6, #0
 8001126:	d100      	bne.n	800112a <__aeabi_dmul+0x2ae>
 8001128:	e0dc      	b.n	80012e4 <__aeabi_dmul+0x468>
 800112a:	0030      	movs	r0, r6
 800112c:	f000 fd52 	bl	8001bd4 <__clzsi2>
 8001130:	0002      	movs	r2, r0
 8001132:	3a0b      	subs	r2, #11
 8001134:	231d      	movs	r3, #29
 8001136:	0001      	movs	r1, r0
 8001138:	1a9b      	subs	r3, r3, r2
 800113a:	4652      	mov	r2, sl
 800113c:	3908      	subs	r1, #8
 800113e:	40da      	lsrs	r2, r3
 8001140:	408e      	lsls	r6, r1
 8001142:	4316      	orrs	r6, r2
 8001144:	4652      	mov	r2, sl
 8001146:	408a      	lsls	r2, r1
 8001148:	9b00      	ldr	r3, [sp, #0]
 800114a:	4935      	ldr	r1, [pc, #212]	; (8001220 <__aeabi_dmul+0x3a4>)
 800114c:	1a18      	subs	r0, r3, r0
 800114e:	0003      	movs	r3, r0
 8001150:	468c      	mov	ip, r1
 8001152:	4463      	add	r3, ip
 8001154:	2000      	movs	r0, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	e6d3      	b.n	8000f02 <__aeabi_dmul+0x86>
 800115a:	0025      	movs	r5, r4
 800115c:	4305      	orrs	r5, r0
 800115e:	d04a      	beq.n	80011f6 <__aeabi_dmul+0x37a>
 8001160:	2c00      	cmp	r4, #0
 8001162:	d100      	bne.n	8001166 <__aeabi_dmul+0x2ea>
 8001164:	e0b0      	b.n	80012c8 <__aeabi_dmul+0x44c>
 8001166:	0020      	movs	r0, r4
 8001168:	f000 fd34 	bl	8001bd4 <__clzsi2>
 800116c:	0001      	movs	r1, r0
 800116e:	0002      	movs	r2, r0
 8001170:	390b      	subs	r1, #11
 8001172:	231d      	movs	r3, #29
 8001174:	0010      	movs	r0, r2
 8001176:	1a5b      	subs	r3, r3, r1
 8001178:	0031      	movs	r1, r6
 800117a:	0035      	movs	r5, r6
 800117c:	3808      	subs	r0, #8
 800117e:	4084      	lsls	r4, r0
 8001180:	40d9      	lsrs	r1, r3
 8001182:	4085      	lsls	r5, r0
 8001184:	430c      	orrs	r4, r1
 8001186:	4826      	ldr	r0, [pc, #152]	; (8001220 <__aeabi_dmul+0x3a4>)
 8001188:	1a83      	subs	r3, r0, r2
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2300      	movs	r3, #0
 800118e:	4699      	mov	r9, r3
 8001190:	469b      	mov	fp, r3
 8001192:	e697      	b.n	8000ec4 <__aeabi_dmul+0x48>
 8001194:	0005      	movs	r5, r0
 8001196:	4325      	orrs	r5, r4
 8001198:	d126      	bne.n	80011e8 <__aeabi_dmul+0x36c>
 800119a:	2208      	movs	r2, #8
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2302      	movs	r3, #2
 80011a0:	2400      	movs	r4, #0
 80011a2:	4691      	mov	r9, r2
 80011a4:	469b      	mov	fp, r3
 80011a6:	e68d      	b.n	8000ec4 <__aeabi_dmul+0x48>
 80011a8:	4652      	mov	r2, sl
 80011aa:	9b00      	ldr	r3, [sp, #0]
 80011ac:	4332      	orrs	r2, r6
 80011ae:	d110      	bne.n	80011d2 <__aeabi_dmul+0x356>
 80011b0:	4915      	ldr	r1, [pc, #84]	; (8001208 <__aeabi_dmul+0x38c>)
 80011b2:	2600      	movs	r6, #0
 80011b4:	468c      	mov	ip, r1
 80011b6:	4463      	add	r3, ip
 80011b8:	4649      	mov	r1, r9
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2302      	movs	r3, #2
 80011be:	4319      	orrs	r1, r3
 80011c0:	4689      	mov	r9, r1
 80011c2:	2002      	movs	r0, #2
 80011c4:	e69d      	b.n	8000f02 <__aeabi_dmul+0x86>
 80011c6:	465b      	mov	r3, fp
 80011c8:	9701      	str	r7, [sp, #4]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d000      	beq.n	80011d0 <__aeabi_dmul+0x354>
 80011ce:	e6ad      	b.n	8000f2c <__aeabi_dmul+0xb0>
 80011d0:	e6c3      	b.n	8000f5a <__aeabi_dmul+0xde>
 80011d2:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <__aeabi_dmul+0x38c>)
 80011d4:	2003      	movs	r0, #3
 80011d6:	4694      	mov	ip, r2
 80011d8:	4463      	add	r3, ip
 80011da:	464a      	mov	r2, r9
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2303      	movs	r3, #3
 80011e0:	431a      	orrs	r2, r3
 80011e2:	4691      	mov	r9, r2
 80011e4:	4652      	mov	r2, sl
 80011e6:	e68c      	b.n	8000f02 <__aeabi_dmul+0x86>
 80011e8:	220c      	movs	r2, #12
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2303      	movs	r3, #3
 80011ee:	0005      	movs	r5, r0
 80011f0:	4691      	mov	r9, r2
 80011f2:	469b      	mov	fp, r3
 80011f4:	e666      	b.n	8000ec4 <__aeabi_dmul+0x48>
 80011f6:	2304      	movs	r3, #4
 80011f8:	4699      	mov	r9, r3
 80011fa:	2300      	movs	r3, #0
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	2400      	movs	r4, #0
 8001202:	469b      	mov	fp, r3
 8001204:	e65e      	b.n	8000ec4 <__aeabi_dmul+0x48>
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	000007ff 	.word	0x000007ff
 800120c:	fffffc01 	.word	0xfffffc01
 8001210:	08003878 	.word	0x08003878
 8001214:	000003ff 	.word	0x000003ff
 8001218:	feffffff 	.word	0xfeffffff
 800121c:	000007fe 	.word	0x000007fe
 8001220:	fffffc0d 	.word	0xfffffc0d
 8001224:	4649      	mov	r1, r9
 8001226:	2301      	movs	r3, #1
 8001228:	4319      	orrs	r1, r3
 800122a:	4689      	mov	r9, r1
 800122c:	2600      	movs	r6, #0
 800122e:	2001      	movs	r0, #1
 8001230:	e667      	b.n	8000f02 <__aeabi_dmul+0x86>
 8001232:	2300      	movs	r3, #0
 8001234:	2480      	movs	r4, #128	; 0x80
 8001236:	2500      	movs	r5, #0
 8001238:	4a43      	ldr	r2, [pc, #268]	; (8001348 <__aeabi_dmul+0x4cc>)
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	0324      	lsls	r4, r4, #12
 800123e:	e67e      	b.n	8000f3e <__aeabi_dmul+0xc2>
 8001240:	2001      	movs	r0, #1
 8001242:	1a40      	subs	r0, r0, r1
 8001244:	2838      	cmp	r0, #56	; 0x38
 8001246:	dd00      	ble.n	800124a <__aeabi_dmul+0x3ce>
 8001248:	e676      	b.n	8000f38 <__aeabi_dmul+0xbc>
 800124a:	281f      	cmp	r0, #31
 800124c:	dd5b      	ble.n	8001306 <__aeabi_dmul+0x48a>
 800124e:	221f      	movs	r2, #31
 8001250:	0023      	movs	r3, r4
 8001252:	4252      	negs	r2, r2
 8001254:	1a51      	subs	r1, r2, r1
 8001256:	40cb      	lsrs	r3, r1
 8001258:	0019      	movs	r1, r3
 800125a:	2820      	cmp	r0, #32
 800125c:	d003      	beq.n	8001266 <__aeabi_dmul+0x3ea>
 800125e:	4a3b      	ldr	r2, [pc, #236]	; (800134c <__aeabi_dmul+0x4d0>)
 8001260:	4462      	add	r2, ip
 8001262:	4094      	lsls	r4, r2
 8001264:	4325      	orrs	r5, r4
 8001266:	1e6a      	subs	r2, r5, #1
 8001268:	4195      	sbcs	r5, r2
 800126a:	002a      	movs	r2, r5
 800126c:	430a      	orrs	r2, r1
 800126e:	2107      	movs	r1, #7
 8001270:	000d      	movs	r5, r1
 8001272:	2400      	movs	r4, #0
 8001274:	4015      	ands	r5, r2
 8001276:	4211      	tst	r1, r2
 8001278:	d05b      	beq.n	8001332 <__aeabi_dmul+0x4b6>
 800127a:	210f      	movs	r1, #15
 800127c:	2400      	movs	r4, #0
 800127e:	4011      	ands	r1, r2
 8001280:	2904      	cmp	r1, #4
 8001282:	d053      	beq.n	800132c <__aeabi_dmul+0x4b0>
 8001284:	1d11      	adds	r1, r2, #4
 8001286:	4291      	cmp	r1, r2
 8001288:	4192      	sbcs	r2, r2
 800128a:	4252      	negs	r2, r2
 800128c:	18a4      	adds	r4, r4, r2
 800128e:	000a      	movs	r2, r1
 8001290:	0223      	lsls	r3, r4, #8
 8001292:	d54b      	bpl.n	800132c <__aeabi_dmul+0x4b0>
 8001294:	2201      	movs	r2, #1
 8001296:	2400      	movs	r4, #0
 8001298:	2500      	movs	r5, #0
 800129a:	e650      	b.n	8000f3e <__aeabi_dmul+0xc2>
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	031b      	lsls	r3, r3, #12
 80012a0:	421c      	tst	r4, r3
 80012a2:	d009      	beq.n	80012b8 <__aeabi_dmul+0x43c>
 80012a4:	421e      	tst	r6, r3
 80012a6:	d107      	bne.n	80012b8 <__aeabi_dmul+0x43c>
 80012a8:	4333      	orrs	r3, r6
 80012aa:	031c      	lsls	r4, r3, #12
 80012ac:	4643      	mov	r3, r8
 80012ae:	0015      	movs	r5, r2
 80012b0:	0b24      	lsrs	r4, r4, #12
 80012b2:	4a25      	ldr	r2, [pc, #148]	; (8001348 <__aeabi_dmul+0x4cc>)
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	e642      	b.n	8000f3e <__aeabi_dmul+0xc2>
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	4314      	orrs	r4, r2
 80012be:	0324      	lsls	r4, r4, #12
 80012c0:	4a21      	ldr	r2, [pc, #132]	; (8001348 <__aeabi_dmul+0x4cc>)
 80012c2:	0b24      	lsrs	r4, r4, #12
 80012c4:	9701      	str	r7, [sp, #4]
 80012c6:	e63a      	b.n	8000f3e <__aeabi_dmul+0xc2>
 80012c8:	f000 fc84 	bl	8001bd4 <__clzsi2>
 80012cc:	0001      	movs	r1, r0
 80012ce:	0002      	movs	r2, r0
 80012d0:	3115      	adds	r1, #21
 80012d2:	3220      	adds	r2, #32
 80012d4:	291c      	cmp	r1, #28
 80012d6:	dc00      	bgt.n	80012da <__aeabi_dmul+0x45e>
 80012d8:	e74b      	b.n	8001172 <__aeabi_dmul+0x2f6>
 80012da:	0034      	movs	r4, r6
 80012dc:	3808      	subs	r0, #8
 80012de:	2500      	movs	r5, #0
 80012e0:	4084      	lsls	r4, r0
 80012e2:	e750      	b.n	8001186 <__aeabi_dmul+0x30a>
 80012e4:	f000 fc76 	bl	8001bd4 <__clzsi2>
 80012e8:	0003      	movs	r3, r0
 80012ea:	001a      	movs	r2, r3
 80012ec:	3215      	adds	r2, #21
 80012ee:	3020      	adds	r0, #32
 80012f0:	2a1c      	cmp	r2, #28
 80012f2:	dc00      	bgt.n	80012f6 <__aeabi_dmul+0x47a>
 80012f4:	e71e      	b.n	8001134 <__aeabi_dmul+0x2b8>
 80012f6:	4656      	mov	r6, sl
 80012f8:	3b08      	subs	r3, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	409e      	lsls	r6, r3
 80012fe:	e723      	b.n	8001148 <__aeabi_dmul+0x2cc>
 8001300:	9b00      	ldr	r3, [sp, #0]
 8001302:	469c      	mov	ip, r3
 8001304:	e6e6      	b.n	80010d4 <__aeabi_dmul+0x258>
 8001306:	4912      	ldr	r1, [pc, #72]	; (8001350 <__aeabi_dmul+0x4d4>)
 8001308:	0022      	movs	r2, r4
 800130a:	4461      	add	r1, ip
 800130c:	002e      	movs	r6, r5
 800130e:	408d      	lsls	r5, r1
 8001310:	408a      	lsls	r2, r1
 8001312:	40c6      	lsrs	r6, r0
 8001314:	1e69      	subs	r1, r5, #1
 8001316:	418d      	sbcs	r5, r1
 8001318:	4332      	orrs	r2, r6
 800131a:	432a      	orrs	r2, r5
 800131c:	40c4      	lsrs	r4, r0
 800131e:	0753      	lsls	r3, r2, #29
 8001320:	d0b6      	beq.n	8001290 <__aeabi_dmul+0x414>
 8001322:	210f      	movs	r1, #15
 8001324:	4011      	ands	r1, r2
 8001326:	2904      	cmp	r1, #4
 8001328:	d1ac      	bne.n	8001284 <__aeabi_dmul+0x408>
 800132a:	e7b1      	b.n	8001290 <__aeabi_dmul+0x414>
 800132c:	0765      	lsls	r5, r4, #29
 800132e:	0264      	lsls	r4, r4, #9
 8001330:	0b24      	lsrs	r4, r4, #12
 8001332:	08d2      	lsrs	r2, r2, #3
 8001334:	4315      	orrs	r5, r2
 8001336:	2200      	movs	r2, #0
 8001338:	e601      	b.n	8000f3e <__aeabi_dmul+0xc2>
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	0312      	lsls	r2, r2, #12
 800133e:	4314      	orrs	r4, r2
 8001340:	0324      	lsls	r4, r4, #12
 8001342:	4a01      	ldr	r2, [pc, #4]	; (8001348 <__aeabi_dmul+0x4cc>)
 8001344:	0b24      	lsrs	r4, r4, #12
 8001346:	e5fa      	b.n	8000f3e <__aeabi_dmul+0xc2>
 8001348:	000007ff 	.word	0x000007ff
 800134c:	0000043e 	.word	0x0000043e
 8001350:	0000041e 	.word	0x0000041e

08001354 <__aeabi_dsub>:
 8001354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001356:	4657      	mov	r7, sl
 8001358:	464e      	mov	r6, r9
 800135a:	4645      	mov	r5, r8
 800135c:	46de      	mov	lr, fp
 800135e:	b5e0      	push	{r5, r6, r7, lr}
 8001360:	001e      	movs	r6, r3
 8001362:	0017      	movs	r7, r2
 8001364:	004a      	lsls	r2, r1, #1
 8001366:	030b      	lsls	r3, r1, #12
 8001368:	0d52      	lsrs	r2, r2, #21
 800136a:	0a5b      	lsrs	r3, r3, #9
 800136c:	4690      	mov	r8, r2
 800136e:	0f42      	lsrs	r2, r0, #29
 8001370:	431a      	orrs	r2, r3
 8001372:	0fcd      	lsrs	r5, r1, #31
 8001374:	4ccd      	ldr	r4, [pc, #820]	; (80016ac <__aeabi_dsub+0x358>)
 8001376:	0331      	lsls	r1, r6, #12
 8001378:	00c3      	lsls	r3, r0, #3
 800137a:	4694      	mov	ip, r2
 800137c:	0070      	lsls	r0, r6, #1
 800137e:	0f7a      	lsrs	r2, r7, #29
 8001380:	0a49      	lsrs	r1, r1, #9
 8001382:	00ff      	lsls	r7, r7, #3
 8001384:	469a      	mov	sl, r3
 8001386:	46b9      	mov	r9, r7
 8001388:	0d40      	lsrs	r0, r0, #21
 800138a:	0ff6      	lsrs	r6, r6, #31
 800138c:	4311      	orrs	r1, r2
 800138e:	42a0      	cmp	r0, r4
 8001390:	d100      	bne.n	8001394 <__aeabi_dsub+0x40>
 8001392:	e0b1      	b.n	80014f8 <__aeabi_dsub+0x1a4>
 8001394:	2201      	movs	r2, #1
 8001396:	4056      	eors	r6, r2
 8001398:	46b3      	mov	fp, r6
 800139a:	42b5      	cmp	r5, r6
 800139c:	d100      	bne.n	80013a0 <__aeabi_dsub+0x4c>
 800139e:	e088      	b.n	80014b2 <__aeabi_dsub+0x15e>
 80013a0:	4642      	mov	r2, r8
 80013a2:	1a12      	subs	r2, r2, r0
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	dc00      	bgt.n	80013aa <__aeabi_dsub+0x56>
 80013a8:	e0ae      	b.n	8001508 <__aeabi_dsub+0x1b4>
 80013aa:	2800      	cmp	r0, #0
 80013ac:	d100      	bne.n	80013b0 <__aeabi_dsub+0x5c>
 80013ae:	e0c1      	b.n	8001534 <__aeabi_dsub+0x1e0>
 80013b0:	48be      	ldr	r0, [pc, #760]	; (80016ac <__aeabi_dsub+0x358>)
 80013b2:	4580      	cmp	r8, r0
 80013b4:	d100      	bne.n	80013b8 <__aeabi_dsub+0x64>
 80013b6:	e151      	b.n	800165c <__aeabi_dsub+0x308>
 80013b8:	2080      	movs	r0, #128	; 0x80
 80013ba:	0400      	lsls	r0, r0, #16
 80013bc:	4301      	orrs	r1, r0
 80013be:	2a38      	cmp	r2, #56	; 0x38
 80013c0:	dd00      	ble.n	80013c4 <__aeabi_dsub+0x70>
 80013c2:	e17b      	b.n	80016bc <__aeabi_dsub+0x368>
 80013c4:	2a1f      	cmp	r2, #31
 80013c6:	dd00      	ble.n	80013ca <__aeabi_dsub+0x76>
 80013c8:	e1ee      	b.n	80017a8 <__aeabi_dsub+0x454>
 80013ca:	2020      	movs	r0, #32
 80013cc:	003e      	movs	r6, r7
 80013ce:	1a80      	subs	r0, r0, r2
 80013d0:	000c      	movs	r4, r1
 80013d2:	40d6      	lsrs	r6, r2
 80013d4:	40d1      	lsrs	r1, r2
 80013d6:	4087      	lsls	r7, r0
 80013d8:	4662      	mov	r2, ip
 80013da:	4084      	lsls	r4, r0
 80013dc:	1a52      	subs	r2, r2, r1
 80013de:	1e78      	subs	r0, r7, #1
 80013e0:	4187      	sbcs	r7, r0
 80013e2:	4694      	mov	ip, r2
 80013e4:	4334      	orrs	r4, r6
 80013e6:	4327      	orrs	r7, r4
 80013e8:	1bdc      	subs	r4, r3, r7
 80013ea:	42a3      	cmp	r3, r4
 80013ec:	419b      	sbcs	r3, r3
 80013ee:	4662      	mov	r2, ip
 80013f0:	425b      	negs	r3, r3
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	4699      	mov	r9, r3
 80013f6:	464b      	mov	r3, r9
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	d400      	bmi.n	80013fe <__aeabi_dsub+0xaa>
 80013fc:	e118      	b.n	8001630 <__aeabi_dsub+0x2dc>
 80013fe:	464b      	mov	r3, r9
 8001400:	0258      	lsls	r0, r3, #9
 8001402:	0a43      	lsrs	r3, r0, #9
 8001404:	4699      	mov	r9, r3
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d100      	bne.n	800140e <__aeabi_dsub+0xba>
 800140c:	e137      	b.n	800167e <__aeabi_dsub+0x32a>
 800140e:	4648      	mov	r0, r9
 8001410:	f000 fbe0 	bl	8001bd4 <__clzsi2>
 8001414:	0001      	movs	r1, r0
 8001416:	3908      	subs	r1, #8
 8001418:	2320      	movs	r3, #32
 800141a:	0022      	movs	r2, r4
 800141c:	4648      	mov	r0, r9
 800141e:	1a5b      	subs	r3, r3, r1
 8001420:	40da      	lsrs	r2, r3
 8001422:	4088      	lsls	r0, r1
 8001424:	408c      	lsls	r4, r1
 8001426:	4643      	mov	r3, r8
 8001428:	4310      	orrs	r0, r2
 800142a:	4588      	cmp	r8, r1
 800142c:	dd00      	ble.n	8001430 <__aeabi_dsub+0xdc>
 800142e:	e136      	b.n	800169e <__aeabi_dsub+0x34a>
 8001430:	1ac9      	subs	r1, r1, r3
 8001432:	1c4b      	adds	r3, r1, #1
 8001434:	2b1f      	cmp	r3, #31
 8001436:	dd00      	ble.n	800143a <__aeabi_dsub+0xe6>
 8001438:	e0ea      	b.n	8001610 <__aeabi_dsub+0x2bc>
 800143a:	2220      	movs	r2, #32
 800143c:	0026      	movs	r6, r4
 800143e:	1ad2      	subs	r2, r2, r3
 8001440:	0001      	movs	r1, r0
 8001442:	4094      	lsls	r4, r2
 8001444:	40de      	lsrs	r6, r3
 8001446:	40d8      	lsrs	r0, r3
 8001448:	2300      	movs	r3, #0
 800144a:	4091      	lsls	r1, r2
 800144c:	1e62      	subs	r2, r4, #1
 800144e:	4194      	sbcs	r4, r2
 8001450:	4681      	mov	r9, r0
 8001452:	4698      	mov	r8, r3
 8001454:	4331      	orrs	r1, r6
 8001456:	430c      	orrs	r4, r1
 8001458:	0763      	lsls	r3, r4, #29
 800145a:	d009      	beq.n	8001470 <__aeabi_dsub+0x11c>
 800145c:	230f      	movs	r3, #15
 800145e:	4023      	ands	r3, r4
 8001460:	2b04      	cmp	r3, #4
 8001462:	d005      	beq.n	8001470 <__aeabi_dsub+0x11c>
 8001464:	1d23      	adds	r3, r4, #4
 8001466:	42a3      	cmp	r3, r4
 8001468:	41a4      	sbcs	r4, r4
 800146a:	4264      	negs	r4, r4
 800146c:	44a1      	add	r9, r4
 800146e:	001c      	movs	r4, r3
 8001470:	464b      	mov	r3, r9
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	d400      	bmi.n	8001478 <__aeabi_dsub+0x124>
 8001476:	e0de      	b.n	8001636 <__aeabi_dsub+0x2e2>
 8001478:	4641      	mov	r1, r8
 800147a:	4b8c      	ldr	r3, [pc, #560]	; (80016ac <__aeabi_dsub+0x358>)
 800147c:	3101      	adds	r1, #1
 800147e:	4299      	cmp	r1, r3
 8001480:	d100      	bne.n	8001484 <__aeabi_dsub+0x130>
 8001482:	e0e7      	b.n	8001654 <__aeabi_dsub+0x300>
 8001484:	464b      	mov	r3, r9
 8001486:	488a      	ldr	r0, [pc, #552]	; (80016b0 <__aeabi_dsub+0x35c>)
 8001488:	08e4      	lsrs	r4, r4, #3
 800148a:	4003      	ands	r3, r0
 800148c:	0018      	movs	r0, r3
 800148e:	0549      	lsls	r1, r1, #21
 8001490:	075b      	lsls	r3, r3, #29
 8001492:	0240      	lsls	r0, r0, #9
 8001494:	4323      	orrs	r3, r4
 8001496:	0d4a      	lsrs	r2, r1, #21
 8001498:	0b04      	lsrs	r4, r0, #12
 800149a:	0512      	lsls	r2, r2, #20
 800149c:	07ed      	lsls	r5, r5, #31
 800149e:	4322      	orrs	r2, r4
 80014a0:	432a      	orrs	r2, r5
 80014a2:	0018      	movs	r0, r3
 80014a4:	0011      	movs	r1, r2
 80014a6:	bcf0      	pop	{r4, r5, r6, r7}
 80014a8:	46bb      	mov	fp, r7
 80014aa:	46b2      	mov	sl, r6
 80014ac:	46a9      	mov	r9, r5
 80014ae:	46a0      	mov	r8, r4
 80014b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014b2:	4642      	mov	r2, r8
 80014b4:	1a12      	subs	r2, r2, r0
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	dd52      	ble.n	8001560 <__aeabi_dsub+0x20c>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_dsub+0x16c>
 80014be:	e09c      	b.n	80015fa <__aeabi_dsub+0x2a6>
 80014c0:	45a0      	cmp	r8, r4
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dsub+0x172>
 80014c4:	e0ca      	b.n	800165c <__aeabi_dsub+0x308>
 80014c6:	2080      	movs	r0, #128	; 0x80
 80014c8:	0400      	lsls	r0, r0, #16
 80014ca:	4301      	orrs	r1, r0
 80014cc:	2a38      	cmp	r2, #56	; 0x38
 80014ce:	dd00      	ble.n	80014d2 <__aeabi_dsub+0x17e>
 80014d0:	e149      	b.n	8001766 <__aeabi_dsub+0x412>
 80014d2:	2a1f      	cmp	r2, #31
 80014d4:	dc00      	bgt.n	80014d8 <__aeabi_dsub+0x184>
 80014d6:	e197      	b.n	8001808 <__aeabi_dsub+0x4b4>
 80014d8:	0010      	movs	r0, r2
 80014da:	000e      	movs	r6, r1
 80014dc:	3820      	subs	r0, #32
 80014de:	40c6      	lsrs	r6, r0
 80014e0:	2a20      	cmp	r2, #32
 80014e2:	d004      	beq.n	80014ee <__aeabi_dsub+0x19a>
 80014e4:	2040      	movs	r0, #64	; 0x40
 80014e6:	1a82      	subs	r2, r0, r2
 80014e8:	4091      	lsls	r1, r2
 80014ea:	430f      	orrs	r7, r1
 80014ec:	46b9      	mov	r9, r7
 80014ee:	464c      	mov	r4, r9
 80014f0:	1e62      	subs	r2, r4, #1
 80014f2:	4194      	sbcs	r4, r2
 80014f4:	4334      	orrs	r4, r6
 80014f6:	e13a      	b.n	800176e <__aeabi_dsub+0x41a>
 80014f8:	000a      	movs	r2, r1
 80014fa:	433a      	orrs	r2, r7
 80014fc:	d028      	beq.n	8001550 <__aeabi_dsub+0x1fc>
 80014fe:	46b3      	mov	fp, r6
 8001500:	42b5      	cmp	r5, r6
 8001502:	d02b      	beq.n	800155c <__aeabi_dsub+0x208>
 8001504:	4a6b      	ldr	r2, [pc, #428]	; (80016b4 <__aeabi_dsub+0x360>)
 8001506:	4442      	add	r2, r8
 8001508:	2a00      	cmp	r2, #0
 800150a:	d05d      	beq.n	80015c8 <__aeabi_dsub+0x274>
 800150c:	4642      	mov	r2, r8
 800150e:	4644      	mov	r4, r8
 8001510:	1a82      	subs	r2, r0, r2
 8001512:	2c00      	cmp	r4, #0
 8001514:	d000      	beq.n	8001518 <__aeabi_dsub+0x1c4>
 8001516:	e0f5      	b.n	8001704 <__aeabi_dsub+0x3b0>
 8001518:	4665      	mov	r5, ip
 800151a:	431d      	orrs	r5, r3
 800151c:	d100      	bne.n	8001520 <__aeabi_dsub+0x1cc>
 800151e:	e19c      	b.n	800185a <__aeabi_dsub+0x506>
 8001520:	1e55      	subs	r5, r2, #1
 8001522:	2a01      	cmp	r2, #1
 8001524:	d100      	bne.n	8001528 <__aeabi_dsub+0x1d4>
 8001526:	e1fb      	b.n	8001920 <__aeabi_dsub+0x5cc>
 8001528:	4c60      	ldr	r4, [pc, #384]	; (80016ac <__aeabi_dsub+0x358>)
 800152a:	42a2      	cmp	r2, r4
 800152c:	d100      	bne.n	8001530 <__aeabi_dsub+0x1dc>
 800152e:	e1bd      	b.n	80018ac <__aeabi_dsub+0x558>
 8001530:	002a      	movs	r2, r5
 8001532:	e0f0      	b.n	8001716 <__aeabi_dsub+0x3c2>
 8001534:	0008      	movs	r0, r1
 8001536:	4338      	orrs	r0, r7
 8001538:	d100      	bne.n	800153c <__aeabi_dsub+0x1e8>
 800153a:	e0c3      	b.n	80016c4 <__aeabi_dsub+0x370>
 800153c:	1e50      	subs	r0, r2, #1
 800153e:	2a01      	cmp	r2, #1
 8001540:	d100      	bne.n	8001544 <__aeabi_dsub+0x1f0>
 8001542:	e1a8      	b.n	8001896 <__aeabi_dsub+0x542>
 8001544:	4c59      	ldr	r4, [pc, #356]	; (80016ac <__aeabi_dsub+0x358>)
 8001546:	42a2      	cmp	r2, r4
 8001548:	d100      	bne.n	800154c <__aeabi_dsub+0x1f8>
 800154a:	e087      	b.n	800165c <__aeabi_dsub+0x308>
 800154c:	0002      	movs	r2, r0
 800154e:	e736      	b.n	80013be <__aeabi_dsub+0x6a>
 8001550:	2201      	movs	r2, #1
 8001552:	4056      	eors	r6, r2
 8001554:	46b3      	mov	fp, r6
 8001556:	42b5      	cmp	r5, r6
 8001558:	d000      	beq.n	800155c <__aeabi_dsub+0x208>
 800155a:	e721      	b.n	80013a0 <__aeabi_dsub+0x4c>
 800155c:	4a55      	ldr	r2, [pc, #340]	; (80016b4 <__aeabi_dsub+0x360>)
 800155e:	4442      	add	r2, r8
 8001560:	2a00      	cmp	r2, #0
 8001562:	d100      	bne.n	8001566 <__aeabi_dsub+0x212>
 8001564:	e0b5      	b.n	80016d2 <__aeabi_dsub+0x37e>
 8001566:	4642      	mov	r2, r8
 8001568:	4644      	mov	r4, r8
 800156a:	1a82      	subs	r2, r0, r2
 800156c:	2c00      	cmp	r4, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_dsub+0x21e>
 8001570:	e138      	b.n	80017e4 <__aeabi_dsub+0x490>
 8001572:	4e4e      	ldr	r6, [pc, #312]	; (80016ac <__aeabi_dsub+0x358>)
 8001574:	42b0      	cmp	r0, r6
 8001576:	d100      	bne.n	800157a <__aeabi_dsub+0x226>
 8001578:	e1de      	b.n	8001938 <__aeabi_dsub+0x5e4>
 800157a:	2680      	movs	r6, #128	; 0x80
 800157c:	4664      	mov	r4, ip
 800157e:	0436      	lsls	r6, r6, #16
 8001580:	4334      	orrs	r4, r6
 8001582:	46a4      	mov	ip, r4
 8001584:	2a38      	cmp	r2, #56	; 0x38
 8001586:	dd00      	ble.n	800158a <__aeabi_dsub+0x236>
 8001588:	e196      	b.n	80018b8 <__aeabi_dsub+0x564>
 800158a:	2a1f      	cmp	r2, #31
 800158c:	dd00      	ble.n	8001590 <__aeabi_dsub+0x23c>
 800158e:	e224      	b.n	80019da <__aeabi_dsub+0x686>
 8001590:	2620      	movs	r6, #32
 8001592:	1ab4      	subs	r4, r6, r2
 8001594:	46a2      	mov	sl, r4
 8001596:	4664      	mov	r4, ip
 8001598:	4656      	mov	r6, sl
 800159a:	40b4      	lsls	r4, r6
 800159c:	46a1      	mov	r9, r4
 800159e:	001c      	movs	r4, r3
 80015a0:	464e      	mov	r6, r9
 80015a2:	40d4      	lsrs	r4, r2
 80015a4:	4326      	orrs	r6, r4
 80015a6:	0034      	movs	r4, r6
 80015a8:	4656      	mov	r6, sl
 80015aa:	40b3      	lsls	r3, r6
 80015ac:	1e5e      	subs	r6, r3, #1
 80015ae:	41b3      	sbcs	r3, r6
 80015b0:	431c      	orrs	r4, r3
 80015b2:	4663      	mov	r3, ip
 80015b4:	40d3      	lsrs	r3, r2
 80015b6:	18c9      	adds	r1, r1, r3
 80015b8:	19e4      	adds	r4, r4, r7
 80015ba:	42bc      	cmp	r4, r7
 80015bc:	41bf      	sbcs	r7, r7
 80015be:	427f      	negs	r7, r7
 80015c0:	46b9      	mov	r9, r7
 80015c2:	4680      	mov	r8, r0
 80015c4:	4489      	add	r9, r1
 80015c6:	e0d8      	b.n	800177a <__aeabi_dsub+0x426>
 80015c8:	4640      	mov	r0, r8
 80015ca:	4c3b      	ldr	r4, [pc, #236]	; (80016b8 <__aeabi_dsub+0x364>)
 80015cc:	3001      	adds	r0, #1
 80015ce:	4220      	tst	r0, r4
 80015d0:	d000      	beq.n	80015d4 <__aeabi_dsub+0x280>
 80015d2:	e0b4      	b.n	800173e <__aeabi_dsub+0x3ea>
 80015d4:	4640      	mov	r0, r8
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d000      	beq.n	80015dc <__aeabi_dsub+0x288>
 80015da:	e144      	b.n	8001866 <__aeabi_dsub+0x512>
 80015dc:	4660      	mov	r0, ip
 80015de:	4318      	orrs	r0, r3
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dsub+0x290>
 80015e2:	e190      	b.n	8001906 <__aeabi_dsub+0x5b2>
 80015e4:	0008      	movs	r0, r1
 80015e6:	4338      	orrs	r0, r7
 80015e8:	d000      	beq.n	80015ec <__aeabi_dsub+0x298>
 80015ea:	e1aa      	b.n	8001942 <__aeabi_dsub+0x5ee>
 80015ec:	4661      	mov	r1, ip
 80015ee:	08db      	lsrs	r3, r3, #3
 80015f0:	0749      	lsls	r1, r1, #29
 80015f2:	430b      	orrs	r3, r1
 80015f4:	4661      	mov	r1, ip
 80015f6:	08cc      	lsrs	r4, r1, #3
 80015f8:	e027      	b.n	800164a <__aeabi_dsub+0x2f6>
 80015fa:	0008      	movs	r0, r1
 80015fc:	4338      	orrs	r0, r7
 80015fe:	d061      	beq.n	80016c4 <__aeabi_dsub+0x370>
 8001600:	1e50      	subs	r0, r2, #1
 8001602:	2a01      	cmp	r2, #1
 8001604:	d100      	bne.n	8001608 <__aeabi_dsub+0x2b4>
 8001606:	e139      	b.n	800187c <__aeabi_dsub+0x528>
 8001608:	42a2      	cmp	r2, r4
 800160a:	d027      	beq.n	800165c <__aeabi_dsub+0x308>
 800160c:	0002      	movs	r2, r0
 800160e:	e75d      	b.n	80014cc <__aeabi_dsub+0x178>
 8001610:	0002      	movs	r2, r0
 8001612:	391f      	subs	r1, #31
 8001614:	40ca      	lsrs	r2, r1
 8001616:	0011      	movs	r1, r2
 8001618:	2b20      	cmp	r3, #32
 800161a:	d003      	beq.n	8001624 <__aeabi_dsub+0x2d0>
 800161c:	2240      	movs	r2, #64	; 0x40
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	4098      	lsls	r0, r3
 8001622:	4304      	orrs	r4, r0
 8001624:	1e63      	subs	r3, r4, #1
 8001626:	419c      	sbcs	r4, r3
 8001628:	2300      	movs	r3, #0
 800162a:	4699      	mov	r9, r3
 800162c:	4698      	mov	r8, r3
 800162e:	430c      	orrs	r4, r1
 8001630:	0763      	lsls	r3, r4, #29
 8001632:	d000      	beq.n	8001636 <__aeabi_dsub+0x2e2>
 8001634:	e712      	b.n	800145c <__aeabi_dsub+0x108>
 8001636:	464b      	mov	r3, r9
 8001638:	464a      	mov	r2, r9
 800163a:	08e4      	lsrs	r4, r4, #3
 800163c:	075b      	lsls	r3, r3, #29
 800163e:	4323      	orrs	r3, r4
 8001640:	08d4      	lsrs	r4, r2, #3
 8001642:	4642      	mov	r2, r8
 8001644:	4919      	ldr	r1, [pc, #100]	; (80016ac <__aeabi_dsub+0x358>)
 8001646:	428a      	cmp	r2, r1
 8001648:	d00e      	beq.n	8001668 <__aeabi_dsub+0x314>
 800164a:	0324      	lsls	r4, r4, #12
 800164c:	0552      	lsls	r2, r2, #21
 800164e:	0b24      	lsrs	r4, r4, #12
 8001650:	0d52      	lsrs	r2, r2, #21
 8001652:	e722      	b.n	800149a <__aeabi_dsub+0x146>
 8001654:	000a      	movs	r2, r1
 8001656:	2400      	movs	r4, #0
 8001658:	2300      	movs	r3, #0
 800165a:	e71e      	b.n	800149a <__aeabi_dsub+0x146>
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	4662      	mov	r2, ip
 8001660:	0752      	lsls	r2, r2, #29
 8001662:	4313      	orrs	r3, r2
 8001664:	4662      	mov	r2, ip
 8001666:	08d4      	lsrs	r4, r2, #3
 8001668:	001a      	movs	r2, r3
 800166a:	4322      	orrs	r2, r4
 800166c:	d100      	bne.n	8001670 <__aeabi_dsub+0x31c>
 800166e:	e1fc      	b.n	8001a6a <__aeabi_dsub+0x716>
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0312      	lsls	r2, r2, #12
 8001674:	4314      	orrs	r4, r2
 8001676:	0324      	lsls	r4, r4, #12
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <__aeabi_dsub+0x358>)
 800167a:	0b24      	lsrs	r4, r4, #12
 800167c:	e70d      	b.n	800149a <__aeabi_dsub+0x146>
 800167e:	0020      	movs	r0, r4
 8001680:	f000 faa8 	bl	8001bd4 <__clzsi2>
 8001684:	0001      	movs	r1, r0
 8001686:	3118      	adds	r1, #24
 8001688:	291f      	cmp	r1, #31
 800168a:	dc00      	bgt.n	800168e <__aeabi_dsub+0x33a>
 800168c:	e6c4      	b.n	8001418 <__aeabi_dsub+0xc4>
 800168e:	3808      	subs	r0, #8
 8001690:	4084      	lsls	r4, r0
 8001692:	4643      	mov	r3, r8
 8001694:	0020      	movs	r0, r4
 8001696:	2400      	movs	r4, #0
 8001698:	4588      	cmp	r8, r1
 800169a:	dc00      	bgt.n	800169e <__aeabi_dsub+0x34a>
 800169c:	e6c8      	b.n	8001430 <__aeabi_dsub+0xdc>
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__aeabi_dsub+0x35c>)
 80016a0:	1a5b      	subs	r3, r3, r1
 80016a2:	4010      	ands	r0, r2
 80016a4:	4698      	mov	r8, r3
 80016a6:	4681      	mov	r9, r0
 80016a8:	e6d6      	b.n	8001458 <__aeabi_dsub+0x104>
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	000007ff 	.word	0x000007ff
 80016b0:	ff7fffff 	.word	0xff7fffff
 80016b4:	fffff801 	.word	0xfffff801
 80016b8:	000007fe 	.word	0x000007fe
 80016bc:	430f      	orrs	r7, r1
 80016be:	1e7a      	subs	r2, r7, #1
 80016c0:	4197      	sbcs	r7, r2
 80016c2:	e691      	b.n	80013e8 <__aeabi_dsub+0x94>
 80016c4:	4661      	mov	r1, ip
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	0749      	lsls	r1, r1, #29
 80016ca:	430b      	orrs	r3, r1
 80016cc:	4661      	mov	r1, ip
 80016ce:	08cc      	lsrs	r4, r1, #3
 80016d0:	e7b8      	b.n	8001644 <__aeabi_dsub+0x2f0>
 80016d2:	4640      	mov	r0, r8
 80016d4:	4cd3      	ldr	r4, [pc, #844]	; (8001a24 <__aeabi_dsub+0x6d0>)
 80016d6:	3001      	adds	r0, #1
 80016d8:	4220      	tst	r0, r4
 80016da:	d000      	beq.n	80016de <__aeabi_dsub+0x38a>
 80016dc:	e0a2      	b.n	8001824 <__aeabi_dsub+0x4d0>
 80016de:	4640      	mov	r0, r8
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d000      	beq.n	80016e6 <__aeabi_dsub+0x392>
 80016e4:	e101      	b.n	80018ea <__aeabi_dsub+0x596>
 80016e6:	4660      	mov	r0, ip
 80016e8:	4318      	orrs	r0, r3
 80016ea:	d100      	bne.n	80016ee <__aeabi_dsub+0x39a>
 80016ec:	e15e      	b.n	80019ac <__aeabi_dsub+0x658>
 80016ee:	0008      	movs	r0, r1
 80016f0:	4338      	orrs	r0, r7
 80016f2:	d000      	beq.n	80016f6 <__aeabi_dsub+0x3a2>
 80016f4:	e15f      	b.n	80019b6 <__aeabi_dsub+0x662>
 80016f6:	4661      	mov	r1, ip
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	0749      	lsls	r1, r1, #29
 80016fc:	430b      	orrs	r3, r1
 80016fe:	4661      	mov	r1, ip
 8001700:	08cc      	lsrs	r4, r1, #3
 8001702:	e7a2      	b.n	800164a <__aeabi_dsub+0x2f6>
 8001704:	4dc8      	ldr	r5, [pc, #800]	; (8001a28 <__aeabi_dsub+0x6d4>)
 8001706:	42a8      	cmp	r0, r5
 8001708:	d100      	bne.n	800170c <__aeabi_dsub+0x3b8>
 800170a:	e0cf      	b.n	80018ac <__aeabi_dsub+0x558>
 800170c:	2580      	movs	r5, #128	; 0x80
 800170e:	4664      	mov	r4, ip
 8001710:	042d      	lsls	r5, r5, #16
 8001712:	432c      	orrs	r4, r5
 8001714:	46a4      	mov	ip, r4
 8001716:	2a38      	cmp	r2, #56	; 0x38
 8001718:	dc56      	bgt.n	80017c8 <__aeabi_dsub+0x474>
 800171a:	2a1f      	cmp	r2, #31
 800171c:	dd00      	ble.n	8001720 <__aeabi_dsub+0x3cc>
 800171e:	e0d1      	b.n	80018c4 <__aeabi_dsub+0x570>
 8001720:	2520      	movs	r5, #32
 8001722:	001e      	movs	r6, r3
 8001724:	1aad      	subs	r5, r5, r2
 8001726:	4664      	mov	r4, ip
 8001728:	40ab      	lsls	r3, r5
 800172a:	40ac      	lsls	r4, r5
 800172c:	40d6      	lsrs	r6, r2
 800172e:	1e5d      	subs	r5, r3, #1
 8001730:	41ab      	sbcs	r3, r5
 8001732:	4334      	orrs	r4, r6
 8001734:	4323      	orrs	r3, r4
 8001736:	4664      	mov	r4, ip
 8001738:	40d4      	lsrs	r4, r2
 800173a:	1b09      	subs	r1, r1, r4
 800173c:	e049      	b.n	80017d2 <__aeabi_dsub+0x47e>
 800173e:	4660      	mov	r0, ip
 8001740:	1bdc      	subs	r4, r3, r7
 8001742:	1a46      	subs	r6, r0, r1
 8001744:	42a3      	cmp	r3, r4
 8001746:	4180      	sbcs	r0, r0
 8001748:	4240      	negs	r0, r0
 800174a:	4681      	mov	r9, r0
 800174c:	0030      	movs	r0, r6
 800174e:	464e      	mov	r6, r9
 8001750:	1b80      	subs	r0, r0, r6
 8001752:	4681      	mov	r9, r0
 8001754:	0200      	lsls	r0, r0, #8
 8001756:	d476      	bmi.n	8001846 <__aeabi_dsub+0x4f2>
 8001758:	464b      	mov	r3, r9
 800175a:	4323      	orrs	r3, r4
 800175c:	d000      	beq.n	8001760 <__aeabi_dsub+0x40c>
 800175e:	e652      	b.n	8001406 <__aeabi_dsub+0xb2>
 8001760:	2400      	movs	r4, #0
 8001762:	2500      	movs	r5, #0
 8001764:	e771      	b.n	800164a <__aeabi_dsub+0x2f6>
 8001766:	4339      	orrs	r1, r7
 8001768:	000c      	movs	r4, r1
 800176a:	1e62      	subs	r2, r4, #1
 800176c:	4194      	sbcs	r4, r2
 800176e:	18e4      	adds	r4, r4, r3
 8001770:	429c      	cmp	r4, r3
 8001772:	419b      	sbcs	r3, r3
 8001774:	425b      	negs	r3, r3
 8001776:	4463      	add	r3, ip
 8001778:	4699      	mov	r9, r3
 800177a:	464b      	mov	r3, r9
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	d400      	bmi.n	8001782 <__aeabi_dsub+0x42e>
 8001780:	e756      	b.n	8001630 <__aeabi_dsub+0x2dc>
 8001782:	2301      	movs	r3, #1
 8001784:	469c      	mov	ip, r3
 8001786:	4ba8      	ldr	r3, [pc, #672]	; (8001a28 <__aeabi_dsub+0x6d4>)
 8001788:	44e0      	add	r8, ip
 800178a:	4598      	cmp	r8, r3
 800178c:	d038      	beq.n	8001800 <__aeabi_dsub+0x4ac>
 800178e:	464b      	mov	r3, r9
 8001790:	48a6      	ldr	r0, [pc, #664]	; (8001a2c <__aeabi_dsub+0x6d8>)
 8001792:	2201      	movs	r2, #1
 8001794:	4003      	ands	r3, r0
 8001796:	0018      	movs	r0, r3
 8001798:	0863      	lsrs	r3, r4, #1
 800179a:	4014      	ands	r4, r2
 800179c:	431c      	orrs	r4, r3
 800179e:	07c3      	lsls	r3, r0, #31
 80017a0:	431c      	orrs	r4, r3
 80017a2:	0843      	lsrs	r3, r0, #1
 80017a4:	4699      	mov	r9, r3
 80017a6:	e657      	b.n	8001458 <__aeabi_dsub+0x104>
 80017a8:	0010      	movs	r0, r2
 80017aa:	000e      	movs	r6, r1
 80017ac:	3820      	subs	r0, #32
 80017ae:	40c6      	lsrs	r6, r0
 80017b0:	2a20      	cmp	r2, #32
 80017b2:	d004      	beq.n	80017be <__aeabi_dsub+0x46a>
 80017b4:	2040      	movs	r0, #64	; 0x40
 80017b6:	1a82      	subs	r2, r0, r2
 80017b8:	4091      	lsls	r1, r2
 80017ba:	430f      	orrs	r7, r1
 80017bc:	46b9      	mov	r9, r7
 80017be:	464f      	mov	r7, r9
 80017c0:	1e7a      	subs	r2, r7, #1
 80017c2:	4197      	sbcs	r7, r2
 80017c4:	4337      	orrs	r7, r6
 80017c6:	e60f      	b.n	80013e8 <__aeabi_dsub+0x94>
 80017c8:	4662      	mov	r2, ip
 80017ca:	431a      	orrs	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	4193      	sbcs	r3, r2
 80017d2:	1afc      	subs	r4, r7, r3
 80017d4:	42a7      	cmp	r7, r4
 80017d6:	41bf      	sbcs	r7, r7
 80017d8:	427f      	negs	r7, r7
 80017da:	1bcb      	subs	r3, r1, r7
 80017dc:	4699      	mov	r9, r3
 80017de:	465d      	mov	r5, fp
 80017e0:	4680      	mov	r8, r0
 80017e2:	e608      	b.n	80013f6 <__aeabi_dsub+0xa2>
 80017e4:	4666      	mov	r6, ip
 80017e6:	431e      	orrs	r6, r3
 80017e8:	d100      	bne.n	80017ec <__aeabi_dsub+0x498>
 80017ea:	e0be      	b.n	800196a <__aeabi_dsub+0x616>
 80017ec:	1e56      	subs	r6, r2, #1
 80017ee:	2a01      	cmp	r2, #1
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dsub+0x4a0>
 80017f2:	e109      	b.n	8001a08 <__aeabi_dsub+0x6b4>
 80017f4:	4c8c      	ldr	r4, [pc, #560]	; (8001a28 <__aeabi_dsub+0x6d4>)
 80017f6:	42a2      	cmp	r2, r4
 80017f8:	d100      	bne.n	80017fc <__aeabi_dsub+0x4a8>
 80017fa:	e119      	b.n	8001a30 <__aeabi_dsub+0x6dc>
 80017fc:	0032      	movs	r2, r6
 80017fe:	e6c1      	b.n	8001584 <__aeabi_dsub+0x230>
 8001800:	4642      	mov	r2, r8
 8001802:	2400      	movs	r4, #0
 8001804:	2300      	movs	r3, #0
 8001806:	e648      	b.n	800149a <__aeabi_dsub+0x146>
 8001808:	2020      	movs	r0, #32
 800180a:	000c      	movs	r4, r1
 800180c:	1a80      	subs	r0, r0, r2
 800180e:	003e      	movs	r6, r7
 8001810:	4087      	lsls	r7, r0
 8001812:	4084      	lsls	r4, r0
 8001814:	40d6      	lsrs	r6, r2
 8001816:	1e78      	subs	r0, r7, #1
 8001818:	4187      	sbcs	r7, r0
 800181a:	40d1      	lsrs	r1, r2
 800181c:	4334      	orrs	r4, r6
 800181e:	433c      	orrs	r4, r7
 8001820:	448c      	add	ip, r1
 8001822:	e7a4      	b.n	800176e <__aeabi_dsub+0x41a>
 8001824:	4a80      	ldr	r2, [pc, #512]	; (8001a28 <__aeabi_dsub+0x6d4>)
 8001826:	4290      	cmp	r0, r2
 8001828:	d100      	bne.n	800182c <__aeabi_dsub+0x4d8>
 800182a:	e0e9      	b.n	8001a00 <__aeabi_dsub+0x6ac>
 800182c:	19df      	adds	r7, r3, r7
 800182e:	429f      	cmp	r7, r3
 8001830:	419b      	sbcs	r3, r3
 8001832:	4461      	add	r1, ip
 8001834:	425b      	negs	r3, r3
 8001836:	18c9      	adds	r1, r1, r3
 8001838:	07cc      	lsls	r4, r1, #31
 800183a:	087f      	lsrs	r7, r7, #1
 800183c:	084b      	lsrs	r3, r1, #1
 800183e:	4699      	mov	r9, r3
 8001840:	4680      	mov	r8, r0
 8001842:	433c      	orrs	r4, r7
 8001844:	e6f4      	b.n	8001630 <__aeabi_dsub+0x2dc>
 8001846:	1afc      	subs	r4, r7, r3
 8001848:	42a7      	cmp	r7, r4
 800184a:	41bf      	sbcs	r7, r7
 800184c:	4663      	mov	r3, ip
 800184e:	427f      	negs	r7, r7
 8001850:	1ac9      	subs	r1, r1, r3
 8001852:	1bcb      	subs	r3, r1, r7
 8001854:	4699      	mov	r9, r3
 8001856:	465d      	mov	r5, fp
 8001858:	e5d5      	b.n	8001406 <__aeabi_dsub+0xb2>
 800185a:	08ff      	lsrs	r7, r7, #3
 800185c:	074b      	lsls	r3, r1, #29
 800185e:	465d      	mov	r5, fp
 8001860:	433b      	orrs	r3, r7
 8001862:	08cc      	lsrs	r4, r1, #3
 8001864:	e6ee      	b.n	8001644 <__aeabi_dsub+0x2f0>
 8001866:	4662      	mov	r2, ip
 8001868:	431a      	orrs	r2, r3
 800186a:	d000      	beq.n	800186e <__aeabi_dsub+0x51a>
 800186c:	e082      	b.n	8001974 <__aeabi_dsub+0x620>
 800186e:	000b      	movs	r3, r1
 8001870:	433b      	orrs	r3, r7
 8001872:	d11b      	bne.n	80018ac <__aeabi_dsub+0x558>
 8001874:	2480      	movs	r4, #128	; 0x80
 8001876:	2500      	movs	r5, #0
 8001878:	0324      	lsls	r4, r4, #12
 800187a:	e6f9      	b.n	8001670 <__aeabi_dsub+0x31c>
 800187c:	19dc      	adds	r4, r3, r7
 800187e:	429c      	cmp	r4, r3
 8001880:	419b      	sbcs	r3, r3
 8001882:	4461      	add	r1, ip
 8001884:	4689      	mov	r9, r1
 8001886:	425b      	negs	r3, r3
 8001888:	4499      	add	r9, r3
 800188a:	464b      	mov	r3, r9
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	d444      	bmi.n	800191a <__aeabi_dsub+0x5c6>
 8001890:	2301      	movs	r3, #1
 8001892:	4698      	mov	r8, r3
 8001894:	e6cc      	b.n	8001630 <__aeabi_dsub+0x2dc>
 8001896:	1bdc      	subs	r4, r3, r7
 8001898:	4662      	mov	r2, ip
 800189a:	42a3      	cmp	r3, r4
 800189c:	419b      	sbcs	r3, r3
 800189e:	1a51      	subs	r1, r2, r1
 80018a0:	425b      	negs	r3, r3
 80018a2:	1acb      	subs	r3, r1, r3
 80018a4:	4699      	mov	r9, r3
 80018a6:	2301      	movs	r3, #1
 80018a8:	4698      	mov	r8, r3
 80018aa:	e5a4      	b.n	80013f6 <__aeabi_dsub+0xa2>
 80018ac:	08ff      	lsrs	r7, r7, #3
 80018ae:	074b      	lsls	r3, r1, #29
 80018b0:	465d      	mov	r5, fp
 80018b2:	433b      	orrs	r3, r7
 80018b4:	08cc      	lsrs	r4, r1, #3
 80018b6:	e6d7      	b.n	8001668 <__aeabi_dsub+0x314>
 80018b8:	4662      	mov	r2, ip
 80018ba:	431a      	orrs	r2, r3
 80018bc:	0014      	movs	r4, r2
 80018be:	1e63      	subs	r3, r4, #1
 80018c0:	419c      	sbcs	r4, r3
 80018c2:	e679      	b.n	80015b8 <__aeabi_dsub+0x264>
 80018c4:	0015      	movs	r5, r2
 80018c6:	4664      	mov	r4, ip
 80018c8:	3d20      	subs	r5, #32
 80018ca:	40ec      	lsrs	r4, r5
 80018cc:	46a0      	mov	r8, r4
 80018ce:	2a20      	cmp	r2, #32
 80018d0:	d005      	beq.n	80018de <__aeabi_dsub+0x58a>
 80018d2:	2540      	movs	r5, #64	; 0x40
 80018d4:	4664      	mov	r4, ip
 80018d6:	1aaa      	subs	r2, r5, r2
 80018d8:	4094      	lsls	r4, r2
 80018da:	4323      	orrs	r3, r4
 80018dc:	469a      	mov	sl, r3
 80018de:	4654      	mov	r4, sl
 80018e0:	1e63      	subs	r3, r4, #1
 80018e2:	419c      	sbcs	r4, r3
 80018e4:	4643      	mov	r3, r8
 80018e6:	4323      	orrs	r3, r4
 80018e8:	e773      	b.n	80017d2 <__aeabi_dsub+0x47e>
 80018ea:	4662      	mov	r2, ip
 80018ec:	431a      	orrs	r2, r3
 80018ee:	d023      	beq.n	8001938 <__aeabi_dsub+0x5e4>
 80018f0:	000a      	movs	r2, r1
 80018f2:	433a      	orrs	r2, r7
 80018f4:	d000      	beq.n	80018f8 <__aeabi_dsub+0x5a4>
 80018f6:	e0a0      	b.n	8001a3a <__aeabi_dsub+0x6e6>
 80018f8:	4662      	mov	r2, ip
 80018fa:	08db      	lsrs	r3, r3, #3
 80018fc:	0752      	lsls	r2, r2, #29
 80018fe:	4313      	orrs	r3, r2
 8001900:	4662      	mov	r2, ip
 8001902:	08d4      	lsrs	r4, r2, #3
 8001904:	e6b0      	b.n	8001668 <__aeabi_dsub+0x314>
 8001906:	000b      	movs	r3, r1
 8001908:	433b      	orrs	r3, r7
 800190a:	d100      	bne.n	800190e <__aeabi_dsub+0x5ba>
 800190c:	e728      	b.n	8001760 <__aeabi_dsub+0x40c>
 800190e:	08ff      	lsrs	r7, r7, #3
 8001910:	074b      	lsls	r3, r1, #29
 8001912:	465d      	mov	r5, fp
 8001914:	433b      	orrs	r3, r7
 8001916:	08cc      	lsrs	r4, r1, #3
 8001918:	e697      	b.n	800164a <__aeabi_dsub+0x2f6>
 800191a:	2302      	movs	r3, #2
 800191c:	4698      	mov	r8, r3
 800191e:	e736      	b.n	800178e <__aeabi_dsub+0x43a>
 8001920:	1afc      	subs	r4, r7, r3
 8001922:	42a7      	cmp	r7, r4
 8001924:	41bf      	sbcs	r7, r7
 8001926:	4663      	mov	r3, ip
 8001928:	427f      	negs	r7, r7
 800192a:	1ac9      	subs	r1, r1, r3
 800192c:	1bcb      	subs	r3, r1, r7
 800192e:	4699      	mov	r9, r3
 8001930:	2301      	movs	r3, #1
 8001932:	465d      	mov	r5, fp
 8001934:	4698      	mov	r8, r3
 8001936:	e55e      	b.n	80013f6 <__aeabi_dsub+0xa2>
 8001938:	074b      	lsls	r3, r1, #29
 800193a:	08ff      	lsrs	r7, r7, #3
 800193c:	433b      	orrs	r3, r7
 800193e:	08cc      	lsrs	r4, r1, #3
 8001940:	e692      	b.n	8001668 <__aeabi_dsub+0x314>
 8001942:	1bdc      	subs	r4, r3, r7
 8001944:	4660      	mov	r0, ip
 8001946:	42a3      	cmp	r3, r4
 8001948:	41b6      	sbcs	r6, r6
 800194a:	1a40      	subs	r0, r0, r1
 800194c:	4276      	negs	r6, r6
 800194e:	1b80      	subs	r0, r0, r6
 8001950:	4681      	mov	r9, r0
 8001952:	0200      	lsls	r0, r0, #8
 8001954:	d560      	bpl.n	8001a18 <__aeabi_dsub+0x6c4>
 8001956:	1afc      	subs	r4, r7, r3
 8001958:	42a7      	cmp	r7, r4
 800195a:	41bf      	sbcs	r7, r7
 800195c:	4663      	mov	r3, ip
 800195e:	427f      	negs	r7, r7
 8001960:	1ac9      	subs	r1, r1, r3
 8001962:	1bcb      	subs	r3, r1, r7
 8001964:	4699      	mov	r9, r3
 8001966:	465d      	mov	r5, fp
 8001968:	e576      	b.n	8001458 <__aeabi_dsub+0x104>
 800196a:	08ff      	lsrs	r7, r7, #3
 800196c:	074b      	lsls	r3, r1, #29
 800196e:	433b      	orrs	r3, r7
 8001970:	08cc      	lsrs	r4, r1, #3
 8001972:	e667      	b.n	8001644 <__aeabi_dsub+0x2f0>
 8001974:	000a      	movs	r2, r1
 8001976:	08db      	lsrs	r3, r3, #3
 8001978:	433a      	orrs	r2, r7
 800197a:	d100      	bne.n	800197e <__aeabi_dsub+0x62a>
 800197c:	e66f      	b.n	800165e <__aeabi_dsub+0x30a>
 800197e:	4662      	mov	r2, ip
 8001980:	0752      	lsls	r2, r2, #29
 8001982:	4313      	orrs	r3, r2
 8001984:	4662      	mov	r2, ip
 8001986:	08d4      	lsrs	r4, r2, #3
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	0312      	lsls	r2, r2, #12
 800198c:	4214      	tst	r4, r2
 800198e:	d007      	beq.n	80019a0 <__aeabi_dsub+0x64c>
 8001990:	08c8      	lsrs	r0, r1, #3
 8001992:	4210      	tst	r0, r2
 8001994:	d104      	bne.n	80019a0 <__aeabi_dsub+0x64c>
 8001996:	465d      	mov	r5, fp
 8001998:	0004      	movs	r4, r0
 800199a:	08fb      	lsrs	r3, r7, #3
 800199c:	0749      	lsls	r1, r1, #29
 800199e:	430b      	orrs	r3, r1
 80019a0:	0f5a      	lsrs	r2, r3, #29
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	0752      	lsls	r2, r2, #29
 80019a8:	4313      	orrs	r3, r2
 80019aa:	e65d      	b.n	8001668 <__aeabi_dsub+0x314>
 80019ac:	074b      	lsls	r3, r1, #29
 80019ae:	08ff      	lsrs	r7, r7, #3
 80019b0:	433b      	orrs	r3, r7
 80019b2:	08cc      	lsrs	r4, r1, #3
 80019b4:	e649      	b.n	800164a <__aeabi_dsub+0x2f6>
 80019b6:	19dc      	adds	r4, r3, r7
 80019b8:	429c      	cmp	r4, r3
 80019ba:	419b      	sbcs	r3, r3
 80019bc:	4461      	add	r1, ip
 80019be:	4689      	mov	r9, r1
 80019c0:	425b      	negs	r3, r3
 80019c2:	4499      	add	r9, r3
 80019c4:	464b      	mov	r3, r9
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	d400      	bmi.n	80019cc <__aeabi_dsub+0x678>
 80019ca:	e631      	b.n	8001630 <__aeabi_dsub+0x2dc>
 80019cc:	464a      	mov	r2, r9
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <__aeabi_dsub+0x6d8>)
 80019d0:	401a      	ands	r2, r3
 80019d2:	2301      	movs	r3, #1
 80019d4:	4691      	mov	r9, r2
 80019d6:	4698      	mov	r8, r3
 80019d8:	e62a      	b.n	8001630 <__aeabi_dsub+0x2dc>
 80019da:	0016      	movs	r6, r2
 80019dc:	4664      	mov	r4, ip
 80019de:	3e20      	subs	r6, #32
 80019e0:	40f4      	lsrs	r4, r6
 80019e2:	46a0      	mov	r8, r4
 80019e4:	2a20      	cmp	r2, #32
 80019e6:	d005      	beq.n	80019f4 <__aeabi_dsub+0x6a0>
 80019e8:	2640      	movs	r6, #64	; 0x40
 80019ea:	4664      	mov	r4, ip
 80019ec:	1ab2      	subs	r2, r6, r2
 80019ee:	4094      	lsls	r4, r2
 80019f0:	4323      	orrs	r3, r4
 80019f2:	469a      	mov	sl, r3
 80019f4:	4654      	mov	r4, sl
 80019f6:	1e63      	subs	r3, r4, #1
 80019f8:	419c      	sbcs	r4, r3
 80019fa:	4643      	mov	r3, r8
 80019fc:	431c      	orrs	r4, r3
 80019fe:	e5db      	b.n	80015b8 <__aeabi_dsub+0x264>
 8001a00:	0002      	movs	r2, r0
 8001a02:	2400      	movs	r4, #0
 8001a04:	2300      	movs	r3, #0
 8001a06:	e548      	b.n	800149a <__aeabi_dsub+0x146>
 8001a08:	19dc      	adds	r4, r3, r7
 8001a0a:	42bc      	cmp	r4, r7
 8001a0c:	41bf      	sbcs	r7, r7
 8001a0e:	4461      	add	r1, ip
 8001a10:	4689      	mov	r9, r1
 8001a12:	427f      	negs	r7, r7
 8001a14:	44b9      	add	r9, r7
 8001a16:	e738      	b.n	800188a <__aeabi_dsub+0x536>
 8001a18:	464b      	mov	r3, r9
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x6cc>
 8001a1e:	e69f      	b.n	8001760 <__aeabi_dsub+0x40c>
 8001a20:	e606      	b.n	8001630 <__aeabi_dsub+0x2dc>
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	000007fe 	.word	0x000007fe
 8001a28:	000007ff 	.word	0x000007ff
 8001a2c:	ff7fffff 	.word	0xff7fffff
 8001a30:	08ff      	lsrs	r7, r7, #3
 8001a32:	074b      	lsls	r3, r1, #29
 8001a34:	433b      	orrs	r3, r7
 8001a36:	08cc      	lsrs	r4, r1, #3
 8001a38:	e616      	b.n	8001668 <__aeabi_dsub+0x314>
 8001a3a:	4662      	mov	r2, ip
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	0752      	lsls	r2, r2, #29
 8001a40:	4313      	orrs	r3, r2
 8001a42:	4662      	mov	r2, ip
 8001a44:	08d4      	lsrs	r4, r2, #3
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	0312      	lsls	r2, r2, #12
 8001a4a:	4214      	tst	r4, r2
 8001a4c:	d007      	beq.n	8001a5e <__aeabi_dsub+0x70a>
 8001a4e:	08c8      	lsrs	r0, r1, #3
 8001a50:	4210      	tst	r0, r2
 8001a52:	d104      	bne.n	8001a5e <__aeabi_dsub+0x70a>
 8001a54:	465d      	mov	r5, fp
 8001a56:	0004      	movs	r4, r0
 8001a58:	08fb      	lsrs	r3, r7, #3
 8001a5a:	0749      	lsls	r1, r1, #29
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	0f5a      	lsrs	r2, r3, #29
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	0752      	lsls	r2, r2, #29
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	e5fe      	b.n	8001668 <__aeabi_dsub+0x314>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	4a01      	ldr	r2, [pc, #4]	; (8001a74 <__aeabi_dsub+0x720>)
 8001a6e:	001c      	movs	r4, r3
 8001a70:	e513      	b.n	800149a <__aeabi_dsub+0x146>
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff

08001a78 <__aeabi_ui2d>:
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	1e04      	subs	r4, r0, #0
 8001a7c:	d010      	beq.n	8001aa0 <__aeabi_ui2d+0x28>
 8001a7e:	f000 f8a9 	bl	8001bd4 <__clzsi2>
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <__aeabi_ui2d+0x48>)
 8001a84:	1a1b      	subs	r3, r3, r0
 8001a86:	280a      	cmp	r0, #10
 8001a88:	dc11      	bgt.n	8001aae <__aeabi_ui2d+0x36>
 8001a8a:	220b      	movs	r2, #11
 8001a8c:	0021      	movs	r1, r4
 8001a8e:	1a12      	subs	r2, r2, r0
 8001a90:	40d1      	lsrs	r1, r2
 8001a92:	3015      	adds	r0, #21
 8001a94:	030a      	lsls	r2, r1, #12
 8001a96:	055b      	lsls	r3, r3, #21
 8001a98:	4084      	lsls	r4, r0
 8001a9a:	0b12      	lsrs	r2, r2, #12
 8001a9c:	0d5b      	lsrs	r3, r3, #21
 8001a9e:	e001      	b.n	8001aa4 <__aeabi_ui2d+0x2c>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	051b      	lsls	r3, r3, #20
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	0020      	movs	r0, r4
 8001aaa:	0019      	movs	r1, r3
 8001aac:	bd10      	pop	{r4, pc}
 8001aae:	0022      	movs	r2, r4
 8001ab0:	380b      	subs	r0, #11
 8001ab2:	4082      	lsls	r2, r0
 8001ab4:	055b      	lsls	r3, r3, #21
 8001ab6:	0312      	lsls	r2, r2, #12
 8001ab8:	2400      	movs	r4, #0
 8001aba:	0b12      	lsrs	r2, r2, #12
 8001abc:	0d5b      	lsrs	r3, r3, #21
 8001abe:	e7f1      	b.n	8001aa4 <__aeabi_ui2d+0x2c>
 8001ac0:	0000041e 	.word	0x0000041e

08001ac4 <__aeabi_d2f>:
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	004b      	lsls	r3, r1, #1
 8001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aca:	0d5b      	lsrs	r3, r3, #21
 8001acc:	030c      	lsls	r4, r1, #12
 8001ace:	4e3d      	ldr	r6, [pc, #244]	; (8001bc4 <__aeabi_d2f+0x100>)
 8001ad0:	0a64      	lsrs	r4, r4, #9
 8001ad2:	0f40      	lsrs	r0, r0, #29
 8001ad4:	1c5f      	adds	r7, r3, #1
 8001ad6:	0fc9      	lsrs	r1, r1, #31
 8001ad8:	4304      	orrs	r4, r0
 8001ada:	00d5      	lsls	r5, r2, #3
 8001adc:	4237      	tst	r7, r6
 8001ade:	d00a      	beq.n	8001af6 <__aeabi_d2f+0x32>
 8001ae0:	4839      	ldr	r0, [pc, #228]	; (8001bc8 <__aeabi_d2f+0x104>)
 8001ae2:	181e      	adds	r6, r3, r0
 8001ae4:	2efe      	cmp	r6, #254	; 0xfe
 8001ae6:	dd16      	ble.n	8001b16 <__aeabi_d2f+0x52>
 8001ae8:	20ff      	movs	r0, #255	; 0xff
 8001aea:	2400      	movs	r4, #0
 8001aec:	05c0      	lsls	r0, r0, #23
 8001aee:	4320      	orrs	r0, r4
 8001af0:	07c9      	lsls	r1, r1, #31
 8001af2:	4308      	orrs	r0, r1
 8001af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <__aeabi_d2f+0x44>
 8001afa:	432c      	orrs	r4, r5
 8001afc:	d026      	beq.n	8001b4c <__aeabi_d2f+0x88>
 8001afe:	2205      	movs	r2, #5
 8001b00:	0192      	lsls	r2, r2, #6
 8001b02:	0a54      	lsrs	r4, r2, #9
 8001b04:	b2d8      	uxtb	r0, r3
 8001b06:	e7f1      	b.n	8001aec <__aeabi_d2f+0x28>
 8001b08:	4325      	orrs	r5, r4
 8001b0a:	d0ed      	beq.n	8001ae8 <__aeabi_d2f+0x24>
 8001b0c:	2080      	movs	r0, #128	; 0x80
 8001b0e:	03c0      	lsls	r0, r0, #15
 8001b10:	4304      	orrs	r4, r0
 8001b12:	20ff      	movs	r0, #255	; 0xff
 8001b14:	e7ea      	b.n	8001aec <__aeabi_d2f+0x28>
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	dd1b      	ble.n	8001b52 <__aeabi_d2f+0x8e>
 8001b1a:	0192      	lsls	r2, r2, #6
 8001b1c:	1e53      	subs	r3, r2, #1
 8001b1e:	419a      	sbcs	r2, r3
 8001b20:	00e4      	lsls	r4, r4, #3
 8001b22:	0f6d      	lsrs	r5, r5, #29
 8001b24:	4322      	orrs	r2, r4
 8001b26:	432a      	orrs	r2, r5
 8001b28:	0753      	lsls	r3, r2, #29
 8001b2a:	d048      	beq.n	8001bbe <__aeabi_d2f+0xfa>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d000      	beq.n	8001b36 <__aeabi_d2f+0x72>
 8001b34:	3204      	adds	r2, #4
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	04db      	lsls	r3, r3, #19
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d03f      	beq.n	8001bbe <__aeabi_d2f+0xfa>
 8001b3e:	1c70      	adds	r0, r6, #1
 8001b40:	2efe      	cmp	r6, #254	; 0xfe
 8001b42:	d0d1      	beq.n	8001ae8 <__aeabi_d2f+0x24>
 8001b44:	0192      	lsls	r2, r2, #6
 8001b46:	0a54      	lsrs	r4, r2, #9
 8001b48:	b2c0      	uxtb	r0, r0
 8001b4a:	e7cf      	b.n	8001aec <__aeabi_d2f+0x28>
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	2400      	movs	r4, #0
 8001b50:	e7cc      	b.n	8001aec <__aeabi_d2f+0x28>
 8001b52:	0032      	movs	r2, r6
 8001b54:	3217      	adds	r2, #23
 8001b56:	db22      	blt.n	8001b9e <__aeabi_d2f+0xda>
 8001b58:	2080      	movs	r0, #128	; 0x80
 8001b5a:	0400      	lsls	r0, r0, #16
 8001b5c:	4320      	orrs	r0, r4
 8001b5e:	241e      	movs	r4, #30
 8001b60:	1ba4      	subs	r4, r4, r6
 8001b62:	2c1f      	cmp	r4, #31
 8001b64:	dd1d      	ble.n	8001ba2 <__aeabi_d2f+0xde>
 8001b66:	2202      	movs	r2, #2
 8001b68:	4252      	negs	r2, r2
 8001b6a:	1b96      	subs	r6, r2, r6
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	40f2      	lsrs	r2, r6
 8001b70:	0016      	movs	r6, r2
 8001b72:	2c20      	cmp	r4, #32
 8001b74:	d004      	beq.n	8001b80 <__aeabi_d2f+0xbc>
 8001b76:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <__aeabi_d2f+0x108>)
 8001b78:	4694      	mov	ip, r2
 8001b7a:	4463      	add	r3, ip
 8001b7c:	4098      	lsls	r0, r3
 8001b7e:	4305      	orrs	r5, r0
 8001b80:	002a      	movs	r2, r5
 8001b82:	1e53      	subs	r3, r2, #1
 8001b84:	419a      	sbcs	r2, r3
 8001b86:	4332      	orrs	r2, r6
 8001b88:	2600      	movs	r6, #0
 8001b8a:	0753      	lsls	r3, r2, #29
 8001b8c:	d1ce      	bne.n	8001b2c <__aeabi_d2f+0x68>
 8001b8e:	2480      	movs	r4, #128	; 0x80
 8001b90:	0013      	movs	r3, r2
 8001b92:	04e4      	lsls	r4, r4, #19
 8001b94:	2001      	movs	r0, #1
 8001b96:	4023      	ands	r3, r4
 8001b98:	4222      	tst	r2, r4
 8001b9a:	d1d3      	bne.n	8001b44 <__aeabi_d2f+0x80>
 8001b9c:	e7b0      	b.n	8001b00 <__aeabi_d2f+0x3c>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e7ad      	b.n	8001afe <__aeabi_d2f+0x3a>
 8001ba2:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <__aeabi_d2f+0x10c>)
 8001ba4:	4694      	mov	ip, r2
 8001ba6:	002a      	movs	r2, r5
 8001ba8:	40e2      	lsrs	r2, r4
 8001baa:	0014      	movs	r4, r2
 8001bac:	002a      	movs	r2, r5
 8001bae:	4463      	add	r3, ip
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	4098      	lsls	r0, r3
 8001bb4:	1e55      	subs	r5, r2, #1
 8001bb6:	41aa      	sbcs	r2, r5
 8001bb8:	4302      	orrs	r2, r0
 8001bba:	4322      	orrs	r2, r4
 8001bbc:	e7e4      	b.n	8001b88 <__aeabi_d2f+0xc4>
 8001bbe:	0033      	movs	r3, r6
 8001bc0:	e79e      	b.n	8001b00 <__aeabi_d2f+0x3c>
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	000007fe 	.word	0x000007fe
 8001bc8:	fffffc80 	.word	0xfffffc80
 8001bcc:	fffffca2 	.word	0xfffffca2
 8001bd0:	fffffc82 	.word	0xfffffc82

08001bd4 <__clzsi2>:
 8001bd4:	211c      	movs	r1, #28
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	041b      	lsls	r3, r3, #16
 8001bda:	4298      	cmp	r0, r3
 8001bdc:	d301      	bcc.n	8001be2 <__clzsi2+0xe>
 8001bde:	0c00      	lsrs	r0, r0, #16
 8001be0:	3910      	subs	r1, #16
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	4298      	cmp	r0, r3
 8001be6:	d301      	bcc.n	8001bec <__clzsi2+0x18>
 8001be8:	0a00      	lsrs	r0, r0, #8
 8001bea:	3908      	subs	r1, #8
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	4298      	cmp	r0, r3
 8001bf0:	d301      	bcc.n	8001bf6 <__clzsi2+0x22>
 8001bf2:	0900      	lsrs	r0, r0, #4
 8001bf4:	3904      	subs	r1, #4
 8001bf6:	a202      	add	r2, pc, #8	; (adr r2, 8001c00 <__clzsi2+0x2c>)
 8001bf8:	5c10      	ldrb	r0, [r2, r0]
 8001bfa:	1840      	adds	r0, r0, r1
 8001bfc:	4770      	bx	lr
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	02020304 	.word	0x02020304
 8001c04:	01010101 	.word	0x01010101
	...

08001c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c14:	f000 f99a 	bl	8001f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c18:	f000 f854 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ADC1_Init();
 8001c1c:	f000 f89a 	bl	8001d54 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <main+0x8c>)
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 fcf6 	bl	8002614 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <main+0x8c>)
 8001c2a:	2164      	movs	r1, #100	; 0x64
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f000 fd3f 	bl	80026b0 <HAL_ADC_PollForConversion>
 8001c32:	1e03      	subs	r3, r0, #0
 8001c34:	d1f4      	bne.n	8001c20 <main+0x10>
	  {
	  ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <main+0x8c>)
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f000 fdcd 	bl	80027d8 <HAL_ADC_GetValue>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <main+0x90>)
 8001c42:	601a      	str	r2, [r3, #0]
	  temp = ((VSENSE * ADC_VAL - V25)/ Avg_Slope) + 25 ;
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <main+0x90>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff ff15 	bl	8001a78 <__aeabi_ui2d>
 8001c4e:	4a15      	ldr	r2, [pc, #84]	; (8001ca4 <main+0x94>)
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <main+0x98>)
 8001c52:	f7ff f913 	bl	8000e7c <__aeabi_dmul>
 8001c56:	0002      	movs	r2, r0
 8001c58:	000b      	movs	r3, r1
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	4a13      	ldr	r2, [pc, #76]	; (8001cac <main+0x9c>)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <main+0xa0>)
 8001c62:	f7ff fb77 	bl	8001354 <__aeabi_dsub>
 8001c66:	0002      	movs	r2, r0
 8001c68:	000b      	movs	r3, r1
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <main+0xa4>)
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <main+0xa8>)
 8001c72:	f7fe fe0d 	bl	8000890 <__aeabi_ddiv>
 8001c76:	0002      	movs	r2, r0
 8001c78:	000b      	movs	r3, r1
 8001c7a:	0010      	movs	r0, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <main+0xac>)
 8001c82:	f7fe fac9 	bl	8000218 <__aeabi_dadd>
 8001c86:	0002      	movs	r2, r0
 8001c88:	000b      	movs	r3, r1
 8001c8a:	0010      	movs	r0, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	f7ff ff19 	bl	8001ac4 <__aeabi_d2f>
 8001c92:	1c02      	adds	r2, r0, #0
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <main+0xb0>)
 8001c96:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 8001c98:	e7c2      	b.n	8001c20 <main+0x10>
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	20000028 	.word	0x20000028
 8001ca0:	2000008c 	.word	0x2000008c
 8001ca4:	66666666 	.word	0x66666666
 8001ca8:	3f4a6666 	.word	0x3f4a6666
 8001cac:	ae147ae1 	.word	0xae147ae1
 8001cb0:	3ff6e147 	.word	0x3ff6e147
 8001cb4:	33333333 	.word	0x33333333
 8001cb8:	40113333 	.word	0x40113333
 8001cbc:	40390000 	.word	0x40390000
 8001cc0:	20000090 	.word	0x20000090

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b093      	sub	sp, #76	; 0x4c
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	2414      	movs	r4, #20
 8001ccc:	193b      	adds	r3, r7, r4
 8001cce:	0018      	movs	r0, r3
 8001cd0:	2334      	movs	r3, #52	; 0x34
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	f001 fd9b 	bl	8003810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	0018      	movs	r0, r3
 8001cde:	2310      	movs	r3, #16
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	f001 fd94 	bl	8003810 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	0018      	movs	r0, r3
 8001cee:	f001 f891 	bl	8002e14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf2:	193b      	adds	r3, r7, r4
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf8:	193b      	adds	r3, r7, r4
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	0052      	lsls	r2, r2, #1
 8001cfe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001d00:	193b      	adds	r3, r7, r4
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d06:	193b      	adds	r3, r7, r4
 8001d08:	2240      	movs	r2, #64	; 0x40
 8001d0a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d0c:	193b      	adds	r3, r7, r4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	0018      	movs	r0, r3
 8001d16:	f001 f8bd 	bl	8002e94 <HAL_RCC_OscConfig>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001d1e:	f000 f885 	bl	8001e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f001 fbb8 	bl	80034b4 <HAL_RCC_ClockConfig>
 8001d44:	1e03      	subs	r3, r0, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001d48:	f000 f870 	bl	8001e2c <Error_Handler>
  }
}
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b013      	add	sp, #76	; 0x4c
 8001d52:	bd90      	pop	{r4, r7, pc}

08001d54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	230c      	movs	r3, #12
 8001d60:	001a      	movs	r2, r3
 8001d62:	2100      	movs	r1, #0
 8001d64:	f001 fd54 	bl	8003810 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d6a:	4a2e      	ldr	r2, [pc, #184]	; (8001e24 <MX_ADC1_Init+0xd0>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	05d2      	lsls	r2, r2, #23
 8001d74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001da8:	2220      	movs	r2, #32
 8001daa:	2100      	movs	r1, #0
 8001dac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dbc:	222c      	movs	r2, #44	; 0x2c
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dd6:	223c      	movs	r2, #60	; 0x3c
 8001dd8:	2100      	movs	r1, #0
 8001dda:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 fa6d 	bl	80022c4 <HAL_ADC_Init>
 8001dea:	1e03      	subs	r3, r0, #0
 8001dec:	d001      	beq.n	8001df2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001dee:	f000 f81d 	bl	8001e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <MX_ADC1_Init+0xd4>)
 8001df6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e04:	1d3a      	adds	r2, r7, #4
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001e08:	0011      	movs	r1, r2
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f000 fcf0 	bl	80027f0 <HAL_ADC_ConfigChannel>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001e14:	f000 f80a 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000028 	.word	0x20000028
 8001e24:	40012400 	.word	0x40012400
 8001e28:	b0001000 	.word	0xb0001000

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <Error_Handler+0x8>
	...

08001e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_MspInit+0x44>)
 8001e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_MspInit+0x44>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_MspInit+0x44>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_MspInit+0x44>)
 8001e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_MspInit+0x44>)
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	0549      	lsls	r1, r1, #21
 8001e60:	430a      	orrs	r2, r1
 8001e62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_MspInit+0x44>)
 8001e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	055b      	lsls	r3, r3, #21
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b002      	add	sp, #8
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	40021000 	.word	0x40021000

08001e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <HAL_ADC_MspInit+0x38>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10d      	bne.n	8001eae <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_ADC_MspInit+0x3c>)
 8001e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_ADC_MspInit+0x3c>)
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	0349      	lsls	r1, r1, #13
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_ADC_MspInit+0x3c>)
 8001ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	035b      	lsls	r3, r3, #13
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b004      	add	sp, #16
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	40012400 	.word	0x40012400
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <NMI_Handler+0x4>

08001ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <HardFault_Handler+0x4>

08001ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee4:	f000 f89c 	bl	8002020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001efa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001efc:	f7ff fff7 	bl	8001eee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <LoopForever+0xe>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f18:	4c0a      	ldr	r4, [pc, #40]	; (8001f44 <LoopForever+0x16>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f26:	f001 fc4f 	bl	80037c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001f2a:	f7ff fe71 	bl	8001c10 <main>

08001f2e <LoopForever>:

LoopForever:
  b LoopForever
 8001f2e:	e7fe      	b.n	8001f2e <LoopForever>
  ldr   r0, =_estack
 8001f30:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f3c:	08003900 	.word	0x08003900
  ldr r2, =_sbss
 8001f40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f44:	20000098 	.word	0x20000098

08001f48 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC1_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f52:	1dfb      	adds	r3, r7, #7
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_Init+0x3c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_Init+0x3c>)
 8001f5e:	2180      	movs	r1, #128	; 0x80
 8001f60:	0049      	lsls	r1, r1, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f810 	bl	8001f8c <HAL_InitTick>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001f70:	1dfb      	adds	r3, r7, #7
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e001      	b.n	8001f7c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001f78:	f7ff ff5e 	bl	8001e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f7c:	1dfb      	adds	r3, r7, #7
 8001f7e:	781b      	ldrb	r3, [r3, #0]
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40022000 	.word	0x40022000

08001f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f94:	230f      	movs	r3, #15
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_InitTick+0x88>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d02b      	beq.n	8001ffc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_InitTick+0x8c>)
 8001fa6:	681c      	ldr	r4, [r3, #0]
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_InitTick+0x88>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	0019      	movs	r1, r3
 8001fae:	23fa      	movs	r3, #250	; 0xfa
 8001fb0:	0098      	lsls	r0, r3, #2
 8001fb2:	f7fe f8a5 	bl	8000100 <__udivsi3>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	0019      	movs	r1, r3
 8001fba:	0020      	movs	r0, r4
 8001fbc:	f7fe f8a0 	bl	8000100 <__udivsi3>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 ff19 	bl	8002dfa <HAL_SYSTICK_Config>
 8001fc8:	1e03      	subs	r3, r0, #0
 8001fca:	d112      	bne.n	8001ff2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d80a      	bhi.n	8001fe8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	2200      	movs	r2, #0
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f000 fef8 	bl	8002dd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_InitTick+0x90>)
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e00d      	b.n	8002004 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001fe8:	230f      	movs	r3, #15
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	e008      	b.n	8002004 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ff2:	230f      	movs	r3, #15
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e003      	b.n	8002004 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002004:	230f      	movs	r3, #15
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	781b      	ldrb	r3, [r3, #0]
}
 800200a:	0018      	movs	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	b005      	add	sp, #20
 8002010:	bd90      	pop	{r4, r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	20000008 	.word	0x20000008
 8002018:	20000000 	.word	0x20000000
 800201c:	20000004 	.word	0x20000004

08002020 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_IncTick+0x1c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	001a      	movs	r2, r3
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_IncTick+0x20>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	18d2      	adds	r2, r2, r3
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_IncTick+0x20>)
 8002032:	601a      	str	r2, [r3, #0]
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	20000008 	.word	0x20000008
 8002040:	20000094 	.word	0x20000094

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b02      	ldr	r3, [pc, #8]	; (8002054 <HAL_GetTick+0x10>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	20000094 	.word	0x20000094

08002058 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002068:	401a      	ands	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	601a      	str	r2, [r3, #0]
}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	46bd      	mov	sp, r7
 8002076:	b002      	add	sp, #8
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	fe3fffff 	.word	0xfe3fffff

08002080 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	23e0      	movs	r3, #224	; 0xe0
 800208e:	045b      	lsls	r3, r3, #17
 8002090:	4013      	ands	r3, r2
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}

0800209a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	2104      	movs	r1, #4
 80020ae:	400a      	ands	r2, r1
 80020b0:	2107      	movs	r1, #7
 80020b2:	4091      	lsls	r1, r2
 80020b4:	000a      	movs	r2, r1
 80020b6:	43d2      	mvns	r2, r2
 80020b8:	401a      	ands	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2104      	movs	r1, #4
 80020be:	400b      	ands	r3, r1
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4099      	lsls	r1, r3
 80020c4:	000b      	movs	r3, r1
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	2104      	movs	r1, #4
 80020e6:	400a      	ands	r2, r1
 80020e8:	2107      	movs	r1, #7
 80020ea:	4091      	lsls	r1, r2
 80020ec:	000a      	movs	r2, r1
 80020ee:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2104      	movs	r1, #4
 80020f4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80020f6:	40da      	lsrs	r2, r3
 80020f8:	0013      	movs	r3, r2
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b002      	add	sp, #8
 8002100:	bd80      	pop	{r7, pc}

08002102 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	23c0      	movs	r3, #192	; 0xc0
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4013      	ands	r3, r2
 8002114:	d101      	bne.n	800211a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800211a:	2300      	movs	r3, #0
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}

08002124 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	211f      	movs	r1, #31
 8002138:	400a      	ands	r2, r1
 800213a:	210f      	movs	r1, #15
 800213c:	4091      	lsls	r1, r2
 800213e:	000a      	movs	r2, r1
 8002140:	43d2      	mvns	r2, r2
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	210f      	movs	r1, #15
 800214a:	4019      	ands	r1, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	201f      	movs	r0, #31
 8002150:	4003      	ands	r3, r0
 8002152:	4099      	lsls	r1, r3
 8002154:	000b      	movs	r3, r1
 8002156:	431a      	orrs	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b004      	add	sp, #16
 8002162:	bd80      	pop	{r7, pc}

08002164 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	035b      	lsls	r3, r3, #13
 8002176:	0b5b      	lsrs	r3, r3, #13
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b002      	add	sp, #8
 8002184:	bd80      	pop	{r7, pc}

08002186 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	0352      	lsls	r2, r2, #13
 8002198:	0b52      	lsrs	r2, r2, #13
 800219a:	43d2      	mvns	r2, r2
 800219c:	401a      	ands	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b002      	add	sp, #8
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	0212      	lsls	r2, r2, #8
 80021c0:	43d2      	mvns	r2, r2
 80021c2:	401a      	ands	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	400b      	ands	r3, r1
 80021cc:	4904      	ldr	r1, [pc, #16]	; (80021e0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80021ce:	400b      	ands	r3, r1
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	46bd      	mov	sp, r7
 80021da:	b004      	add	sp, #16
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	07ffff00 	.word	0x07ffff00

080021e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a05      	ldr	r2, [pc, #20]	; (8002208 <LL_ADC_EnableInternalRegulator+0x24>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	0552      	lsls	r2, r2, #21
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	b002      	add	sp, #8
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	6fffffe8 	.word	0x6fffffe8

0800220c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	055b      	lsls	r3, r3, #21
 800221c:	401a      	ands	r2, r3
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	055b      	lsls	r3, r3, #21
 8002222:	429a      	cmp	r2, r3
 8002224:	d101      	bne.n	800222a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <LL_ADC_Enable+0x20>)
 8002242:	4013      	ands	r3, r2
 8002244:	2201      	movs	r2, #1
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}
 8002254:	7fffffe8 	.word	0x7fffffe8

08002258 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2201      	movs	r2, #1
 8002266:	4013      	ands	r3, r2
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <LL_ADC_IsEnabled+0x18>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_ADC_IsEnabled+0x1a>
 8002270:	2300      	movs	r3, #0
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b002      	add	sp, #8
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a04      	ldr	r2, [pc, #16]	; (800229c <LL_ADC_REG_StartConversion+0x20>)
 800228a:	4013      	ands	r3, r2
 800228c:	2204      	movs	r2, #4
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}
 800229c:	7fffffe8 	.word	0x7fffffe8

080022a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2204      	movs	r2, #4
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d101      	bne.n	80022b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022cc:	231f      	movs	r3, #31
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e17f      	b.n	80025ea <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7ff fdc3 	bl	8001e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2254      	movs	r2, #84	; 0x54
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0018      	movs	r0, r3
 800230e:	f7ff ff7d 	bl	800220c <LL_ADC_IsInternalRegulatorEnabled>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d115      	bne.n	8002342 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0018      	movs	r0, r3
 800231c:	f7ff ff62 	bl	80021e4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002320:	4bb4      	ldr	r3, [pc, #720]	; (80025f4 <HAL_ADC_Init+0x330>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	49b4      	ldr	r1, [pc, #720]	; (80025f8 <HAL_ADC_Init+0x334>)
 8002326:	0018      	movs	r0, r3
 8002328:	f7fd feea 	bl	8000100 <__udivsi3>
 800232c:	0003      	movs	r3, r0
 800232e:	3301      	adds	r3, #1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002334:	e002      	b.n	800233c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3b01      	subs	r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f9      	bne.n	8002336 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff ff60 	bl	800220c <LL_ADC_IsInternalRegulatorEnabled>
 800234c:	1e03      	subs	r3, r0, #0
 800234e:	d10f      	bne.n	8002370 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	2210      	movs	r2, #16
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	2201      	movs	r2, #1
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002368:	231f      	movs	r3, #31
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff ff93 	bl	80022a0 <LL_ADC_REG_IsConversionOngoing>
 800237a:	0003      	movs	r3, r0
 800237c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	2210      	movs	r2, #16
 8002384:	4013      	ands	r3, r2
 8002386:	d000      	beq.n	800238a <HAL_ADC_Init+0xc6>
 8002388:	e122      	b.n	80025d0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d000      	beq.n	8002392 <HAL_ADC_Init+0xce>
 8002390:	e11e      	b.n	80025d0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	4a99      	ldr	r2, [pc, #612]	; (80025fc <HAL_ADC_Init+0x338>)
 8002398:	4013      	ands	r3, r2
 800239a:	2202      	movs	r2, #2
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f7ff ff56 	bl	8002258 <LL_ADC_IsEnabled>
 80023ac:	1e03      	subs	r3, r0, #0
 80023ae:	d000      	beq.n	80023b2 <HAL_ADC_Init+0xee>
 80023b0:	e0ad      	b.n	800250e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7e1b      	ldrb	r3, [r3, #24]
 80023ba:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80023bc:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7e5b      	ldrb	r3, [r3, #25]
 80023c2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80023c4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7e9b      	ldrb	r3, [r3, #26]
 80023ca:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80023cc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_ADC_Init+0x118>
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	015b      	lsls	r3, r3, #5
 80023da:	e000      	b.n	80023de <HAL_ADC_Init+0x11a>
 80023dc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80023de:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80023e4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	da04      	bge.n	80023f8 <HAL_ADC_Init+0x134>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	e001      	b.n	80023fc <HAL_ADC_Init+0x138>
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80023fc:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	5c5b      	ldrb	r3, [r3, r1]
 8002404:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002406:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	5c9b      	ldrb	r3, [r3, r2]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d115      	bne.n	8002444 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7e9b      	ldrb	r3, [r3, #26]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d105      	bne.n	800242c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	0252      	lsls	r2, r2, #9
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	e00b      	b.n	8002444 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	2220      	movs	r2, #32
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	2201      	movs	r2, #1
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002450:	23e0      	movs	r3, #224	; 0xe0
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800245a:	4313      	orrs	r3, r2
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a65      	ldr	r2, [pc, #404]	; (8002600 <HAL_ADC_Init+0x33c>)
 800246a:	4013      	ands	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	0f9b      	lsrs	r3, r3, #30
 800247e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002484:	4313      	orrs	r3, r2
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	223c      	movs	r2, #60	; 0x3c
 8002490:	5c9b      	ldrb	r3, [r3, r2]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d111      	bne.n	80024ba <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	0f9b      	lsrs	r3, r3, #30
 800249c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024a2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80024a8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80024ae:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	2201      	movs	r2, #1
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	4a50      	ldr	r2, [pc, #320]	; (8002604 <HAL_ADC_Init+0x340>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	23c0      	movs	r3, #192	; 0xc0
 80024d6:	061b      	lsls	r3, r3, #24
 80024d8:	429a      	cmp	r2, r3
 80024da:	d018      	beq.n	800250e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	05db      	lsls	r3, r3, #23
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d012      	beq.n	800250e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	061b      	lsls	r3, r3, #24
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d00c      	beq.n	800250e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80024f4:	4b44      	ldr	r3, [pc, #272]	; (8002608 <HAL_ADC_Init+0x344>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a44      	ldr	r2, [pc, #272]	; (800260c <HAL_ADC_Init+0x348>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	23f0      	movs	r3, #240	; 0xf0
 8002504:	039b      	lsls	r3, r3, #14
 8002506:	401a      	ands	r2, r3
 8002508:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <HAL_ADC_Init+0x344>)
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002516:	001a      	movs	r2, r3
 8002518:	2100      	movs	r1, #0
 800251a:	f7ff fdbe 	bl	800209a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	493a      	ldr	r1, [pc, #232]	; (8002610 <HAL_ADC_Init+0x34c>)
 8002528:	001a      	movs	r2, r3
 800252a:	f7ff fdb6 	bl	800209a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2110      	movs	r1, #16
 8002542:	4249      	negs	r1, r1
 8002544:	430a      	orrs	r2, r1
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
 8002548:	e018      	b.n	800257c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	039b      	lsls	r3, r3, #14
 8002552:	429a      	cmp	r2, r3
 8002554:	d112      	bne.n	800257c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	3b01      	subs	r3, #1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	221c      	movs	r2, #28
 8002566:	4013      	ands	r3, r2
 8002568:	2210      	movs	r2, #16
 800256a:	4252      	negs	r2, r2
 800256c:	409a      	lsls	r2, r3
 800256e:	0011      	movs	r1, r2
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2100      	movs	r1, #0
 8002582:	0018      	movs	r0, r3
 8002584:	f7ff fda6 	bl	80020d4 <LL_ADC_GetSamplingTimeCommonChannels>
 8002588:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800258e:	429a      	cmp	r2, r3
 8002590:	d10b      	bne.n	80025aa <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	2203      	movs	r2, #3
 800259e:	4393      	bics	r3, r2
 80025a0:	2201      	movs	r2, #1
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025a8:	e01c      	b.n	80025e4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	2212      	movs	r2, #18
 80025b0:	4393      	bics	r3, r2
 80025b2:	2210      	movs	r2, #16
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	2201      	movs	r2, #1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80025c6:	231f      	movs	r3, #31
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025ce:	e009      	b.n	80025e4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	2210      	movs	r2, #16
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025dc:	231f      	movs	r3, #31
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80025e4:	231f      	movs	r3, #31
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	781b      	ldrb	r3, [r3, #0]
}
 80025ea:	0018      	movs	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b008      	add	sp, #32
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	20000000 	.word	0x20000000
 80025f8:	00030d40 	.word	0x00030d40
 80025fc:	fffffefd 	.word	0xfffffefd
 8002600:	fffe0201 	.word	0xfffe0201
 8002604:	1ffffc02 	.word	0x1ffffc02
 8002608:	40012708 	.word	0x40012708
 800260c:	ffc3ffff 	.word	0xffc3ffff
 8002610:	07ffff04 	.word	0x07ffff04

08002614 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002614:	b5b0      	push	{r4, r5, r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0018      	movs	r0, r3
 8002622:	f7ff fe3d 	bl	80022a0 <LL_ADC_REG_IsConversionOngoing>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d135      	bne.n	8002696 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2254      	movs	r2, #84	; 0x54
 800262e:	5c9b      	ldrb	r3, [r3, r2]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_ADC_Start+0x24>
 8002634:	2302      	movs	r3, #2
 8002636:	e035      	b.n	80026a4 <HAL_ADC_Start+0x90>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2254      	movs	r2, #84	; 0x54
 800263c:	2101      	movs	r1, #1
 800263e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002640:	250f      	movs	r5, #15
 8002642:	197c      	adds	r4, r7, r5
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	0018      	movs	r0, r3
 8002648:	f000 faaa 	bl	8002ba0 <ADC_Enable>
 800264c:	0003      	movs	r3, r0
 800264e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002650:	197b      	adds	r3, r7, r5
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d119      	bne.n	800268c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <HAL_ADC_Start+0x98>)
 800265e:	4013      	ands	r3, r2
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	0052      	lsls	r2, r2, #1
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	221c      	movs	r2, #28
 8002676:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2254      	movs	r2, #84	; 0x54
 800267c:	2100      	movs	r1, #0
 800267e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0018      	movs	r0, r3
 8002686:	f7ff fdf9 	bl	800227c <LL_ADC_REG_StartConversion>
 800268a:	e008      	b.n	800269e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2254      	movs	r2, #84	; 0x54
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]
 8002694:	e003      	b.n	800269e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002696:	230f      	movs	r3, #15
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800269e:	230f      	movs	r3, #15
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	781b      	ldrb	r3, [r3, #0]
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b004      	add	sp, #16
 80026aa:	bdb0      	pop	{r4, r5, r7, pc}
 80026ac:	fffff0fe 	.word	0xfffff0fe

080026b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d102      	bne.n	80026c8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80026c2:	2308      	movs	r3, #8
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e00f      	b.n	80026e8 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	4013      	ands	r3, r2
 80026d2:	d007      	beq.n	80026e4 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	2220      	movs	r2, #32
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e072      	b.n	80027ca <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80026e4:	2304      	movs	r3, #4
 80026e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026e8:	f7ff fcac 	bl	8002044 <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80026f0:	e01f      	b.n	8002732 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	d01c      	beq.n	8002732 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80026f8:	f7ff fca4 	bl	8002044 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <HAL_ADC_PollForConversion+0x5e>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d111      	bne.n	8002732 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4013      	ands	r3, r2
 8002718:	d10b      	bne.n	8002732 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271e:	2204      	movs	r2, #4
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2254      	movs	r2, #84	; 0x54
 800272a:	2100      	movs	r1, #0
 800272c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e04b      	b.n	80027ca <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	d0d9      	beq.n	80026f2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	2280      	movs	r2, #128	; 0x80
 8002744:	0092      	lsls	r2, r2, #2
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff fcd6 	bl	8002102 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002756:	1e03      	subs	r3, r0, #0
 8002758:	d02e      	beq.n	80027b8 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	7e9b      	ldrb	r3, [r3, #26]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d12a      	bne.n	80027b8 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2208      	movs	r2, #8
 800276a:	4013      	ands	r3, r2
 800276c:	2b08      	cmp	r3, #8
 800276e:	d123      	bne.n	80027b8 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0018      	movs	r0, r3
 8002776:	f7ff fd93 	bl	80022a0 <LL_ADC_REG_IsConversionOngoing>
 800277a:	1e03      	subs	r3, r0, #0
 800277c:	d110      	bne.n	80027a0 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	210c      	movs	r1, #12
 800278a:	438a      	bics	r2, r1
 800278c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_ADC_PollForConversion+0x124>)
 8002794:	4013      	ands	r3, r2
 8002796:	2201      	movs	r2, #1
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	659a      	str	r2, [r3, #88]	; 0x58
 800279e:	e00b      	b.n	80027b8 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	2220      	movs	r2, #32
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2201      	movs	r2, #1
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7e1b      	ldrb	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	220c      	movs	r2, #12
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b004      	add	sp, #16
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	fffffefe 	.word	0xfffffefe

080027d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b002      	add	sp, #8
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fa:	2317      	movs	r3, #23
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2254      	movs	r2, #84	; 0x54
 800280a:	5c9b      	ldrb	r3, [r3, r2]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x24>
 8002810:	2302      	movs	r3, #2
 8002812:	e1c0      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x3a6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2254      	movs	r2, #84	; 0x54
 8002818:	2101      	movs	r1, #1
 800281a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0018      	movs	r0, r3
 8002822:	f7ff fd3d 	bl	80022a0 <LL_ADC_REG_IsConversionOngoing>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d000      	beq.n	800282c <HAL_ADC_ConfigChannel+0x3c>
 800282a:	e1a3      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d100      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x46>
 8002834:	e143      	b.n	8002abe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	061b      	lsls	r3, r3, #24
 800283e:	429a      	cmp	r2, r3
 8002840:	d004      	beq.n	800284c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002846:	4ac1      	ldr	r2, [pc, #772]	; (8002b4c <HAL_ADC_ConfigChannel+0x35c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d108      	bne.n	800285e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0019      	movs	r1, r3
 8002856:	0010      	movs	r0, r2
 8002858:	f7ff fc84 	bl	8002164 <LL_ADC_REG_SetSequencerChAdd>
 800285c:	e0c9      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	211f      	movs	r1, #31
 8002868:	400b      	ands	r3, r1
 800286a:	210f      	movs	r1, #15
 800286c:	4099      	lsls	r1, r3
 800286e:	000b      	movs	r3, r1
 8002870:	43db      	mvns	r3, r3
 8002872:	4013      	ands	r3, r2
 8002874:	0019      	movs	r1, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	035b      	lsls	r3, r3, #13
 800287c:	0b5b      	lsrs	r3, r3, #13
 800287e:	d105      	bne.n	800288c <HAL_ADC_ConfigChannel+0x9c>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	221f      	movs	r2, #31
 8002888:	4013      	ands	r3, r2
 800288a:	e098      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2201      	movs	r2, #1
 8002892:	4013      	ands	r3, r2
 8002894:	d000      	beq.n	8002898 <HAL_ADC_ConfigChannel+0xa8>
 8002896:	e091      	b.n	80029bc <HAL_ADC_ConfigChannel+0x1cc>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d000      	beq.n	80028a4 <HAL_ADC_ConfigChannel+0xb4>
 80028a2:	e089      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x1c8>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2204      	movs	r2, #4
 80028aa:	4013      	ands	r3, r2
 80028ac:	d000      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0xc0>
 80028ae:	e081      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x1c4>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2208      	movs	r2, #8
 80028b6:	4013      	ands	r3, r2
 80028b8:	d000      	beq.n	80028bc <HAL_ADC_ConfigChannel+0xcc>
 80028ba:	e079      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x1c0>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2210      	movs	r2, #16
 80028c2:	4013      	ands	r3, r2
 80028c4:	d000      	beq.n	80028c8 <HAL_ADC_ConfigChannel+0xd8>
 80028c6:	e071      	b.n	80029ac <HAL_ADC_ConfigChannel+0x1bc>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2220      	movs	r2, #32
 80028ce:	4013      	ands	r3, r2
 80028d0:	d000      	beq.n	80028d4 <HAL_ADC_ConfigChannel+0xe4>
 80028d2:	e069      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x1b8>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2240      	movs	r2, #64	; 0x40
 80028da:	4013      	ands	r3, r2
 80028dc:	d000      	beq.n	80028e0 <HAL_ADC_ConfigChannel+0xf0>
 80028de:	e061      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x1b4>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	4013      	ands	r3, r2
 80028e8:	d000      	beq.n	80028ec <HAL_ADC_ConfigChannel+0xfc>
 80028ea:	e059      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x1b0>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	d151      	bne.n	800299c <HAL_ADC_ConfigChannel+0x1ac>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4013      	ands	r3, r2
 8002902:	d149      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1a8>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4013      	ands	r3, r2
 800290e:	d141      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x1a4>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	4013      	ands	r3, r2
 800291a:	d139      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x1a0>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	015b      	lsls	r3, r3, #5
 8002924:	4013      	ands	r3, r2
 8002926:	d131      	bne.n	800298c <HAL_ADC_ConfigChannel+0x19c>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	019b      	lsls	r3, r3, #6
 8002930:	4013      	ands	r3, r2
 8002932:	d129      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x198>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	01db      	lsls	r3, r3, #7
 800293c:	4013      	ands	r3, r2
 800293e:	d121      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x194>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	4013      	ands	r3, r2
 800294a:	d119      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x190>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	025b      	lsls	r3, r3, #9
 8002954:	4013      	ands	r3, r2
 8002956:	d111      	bne.n	800297c <HAL_ADC_ConfigChannel+0x18c>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	029b      	lsls	r3, r3, #10
 8002960:	4013      	ands	r3, r2
 8002962:	d109      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x188>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	02db      	lsls	r3, r3, #11
 800296c:	4013      	ands	r3, r2
 800296e:	d001      	beq.n	8002974 <HAL_ADC_ConfigChannel+0x184>
 8002970:	2312      	movs	r3, #18
 8002972:	e024      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 8002974:	2300      	movs	r3, #0
 8002976:	e022      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 8002978:	2311      	movs	r3, #17
 800297a:	e020      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 800297c:	2310      	movs	r3, #16
 800297e:	e01e      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 8002980:	230f      	movs	r3, #15
 8002982:	e01c      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 8002984:	230e      	movs	r3, #14
 8002986:	e01a      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 8002988:	230d      	movs	r3, #13
 800298a:	e018      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 800298c:	230c      	movs	r3, #12
 800298e:	e016      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 8002990:	230b      	movs	r3, #11
 8002992:	e014      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 8002994:	230a      	movs	r3, #10
 8002996:	e012      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 8002998:	2309      	movs	r3, #9
 800299a:	e010      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 800299c:	2308      	movs	r3, #8
 800299e:	e00e      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 80029a0:	2307      	movs	r3, #7
 80029a2:	e00c      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 80029a4:	2306      	movs	r3, #6
 80029a6:	e00a      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 80029a8:	2305      	movs	r3, #5
 80029aa:	e008      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 80029ac:	2304      	movs	r3, #4
 80029ae:	e006      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 80029b0:	2303      	movs	r3, #3
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e002      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ce>
 80029bc:	2300      	movs	r3, #0
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	6852      	ldr	r2, [r2, #4]
 80029c2:	201f      	movs	r0, #31
 80029c4:	4002      	ands	r2, r0
 80029c6:	4093      	lsls	r3, r2
 80029c8:	000a      	movs	r2, r1
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d808      	bhi.n	80029f2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	001a      	movs	r2, r3
 80029ee:	f7ff fb99 	bl	8002124 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	001a      	movs	r2, r3
 8002a00:	f7ff fbd4 	bl	80021ac <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	db00      	blt.n	8002a0e <HAL_ADC_ConfigChannel+0x21e>
 8002a0c:	e0bc      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a0e:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_ADC_ConfigChannel+0x360>)
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7ff fb35 	bl	8002080 <LL_ADC_GetCommonPathInternalCh>
 8002a16:	0003      	movs	r3, r0
 8002a18:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a4d      	ldr	r2, [pc, #308]	; (8002b54 <HAL_ADC_ConfigChannel+0x364>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d122      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	041b      	lsls	r3, r3, #16
 8002a2a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a2c:	d11d      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	0412      	lsls	r2, r2, #16
 8002a34:	4313      	orrs	r3, r2
 8002a36:	4a46      	ldr	r2, [pc, #280]	; (8002b50 <HAL_ADC_ConfigChannel+0x360>)
 8002a38:	0019      	movs	r1, r3
 8002a3a:	0010      	movs	r0, r2
 8002a3c:	f7ff fb0c 	bl	8002058 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a40:	4b45      	ldr	r3, [pc, #276]	; (8002b58 <HAL_ADC_ConfigChannel+0x368>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4945      	ldr	r1, [pc, #276]	; (8002b5c <HAL_ADC_ConfigChannel+0x36c>)
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7fd fb5a 	bl	8000100 <__udivsi3>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	0013      	movs	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	189b      	adds	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a5a:	e002      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f9      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a68:	e08e      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a3c      	ldr	r2, [pc, #240]	; (8002b60 <HAL_ADC_ConfigChannel+0x370>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10e      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	045b      	lsls	r3, r3, #17
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d109      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	0452      	lsls	r2, r2, #17
 8002a84:	4313      	orrs	r3, r2
 8002a86:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <HAL_ADC_ConfigChannel+0x360>)
 8002a88:	0019      	movs	r1, r3
 8002a8a:	0010      	movs	r0, r2
 8002a8c:	f7ff fae4 	bl	8002058 <LL_ADC_SetCommonPathInternalCh>
 8002a90:	e07a      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a33      	ldr	r2, [pc, #204]	; (8002b64 <HAL_ADC_ConfigChannel+0x374>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d000      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x2ae>
 8002a9c:	e074      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	03db      	lsls	r3, r3, #15
 8002aa4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002aa6:	d000      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x2ba>
 8002aa8:	e06e      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	03d2      	lsls	r2, r2, #15
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <HAL_ADC_ConfigChannel+0x360>)
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	0010      	movs	r0, r2
 8002ab8:	f7ff face 	bl	8002058 <LL_ADC_SetCommonPathInternalCh>
 8002abc:	e064      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ace:	4a1f      	ldr	r2, [pc, #124]	; (8002b4c <HAL_ADC_ConfigChannel+0x35c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d107      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0019      	movs	r1, r3
 8002ade:	0010      	movs	r0, r2
 8002ae0:	f7ff fb51 	bl	8002186 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	da4d      	bge.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_ADC_ConfigChannel+0x360>)
 8002aee:	0018      	movs	r0, r3
 8002af0:	f7ff fac6 	bl	8002080 <LL_ADC_GetCommonPathInternalCh>
 8002af4:	0003      	movs	r3, r0
 8002af6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <HAL_ADC_ConfigChannel+0x364>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d108      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <HAL_ADC_ConfigChannel+0x378>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_ADC_ConfigChannel+0x360>)
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f7ff faa3 	bl	8002058 <LL_ADC_SetCommonPathInternalCh>
 8002b12:	e039      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <HAL_ADC_ConfigChannel+0x370>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d108      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <HAL_ADC_ConfigChannel+0x37c>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_ADC_ConfigChannel+0x360>)
 8002b26:	0019      	movs	r1, r3
 8002b28:	0010      	movs	r0, r2
 8002b2a:	f7ff fa95 	bl	8002058 <LL_ADC_SetCommonPathInternalCh>
 8002b2e:	e02b      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <HAL_ADC_ConfigChannel+0x374>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d126      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <HAL_ADC_ConfigChannel+0x380>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	4a03      	ldr	r2, [pc, #12]	; (8002b50 <HAL_ADC_ConfigChannel+0x360>)
 8002b42:	0019      	movs	r1, r3
 8002b44:	0010      	movs	r0, r2
 8002b46:	f7ff fa87 	bl	8002058 <LL_ADC_SetCommonPathInternalCh>
 8002b4a:	e01d      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x398>
 8002b4c:	80000004 	.word	0x80000004
 8002b50:	40012708 	.word	0x40012708
 8002b54:	b0001000 	.word	0xb0001000
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	00030d40 	.word	0x00030d40
 8002b60:	b8004000 	.word	0xb8004000
 8002b64:	b4002000 	.word	0xb4002000
 8002b68:	ff7fffff 	.word	0xff7fffff
 8002b6c:	feffffff 	.word	0xfeffffff
 8002b70:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	2220      	movs	r2, #32
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b80:	2317      	movs	r3, #23
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2254      	movs	r2, #84	; 0x54
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002b90:	2317      	movs	r3, #23
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	781b      	ldrb	r3, [r3, #0]
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b006      	add	sp, #24
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)

08002ba0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7ff fb51 	bl	8002258 <LL_ADC_IsEnabled>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d000      	beq.n	8002bbc <ADC_Enable+0x1c>
 8002bba:	e069      	b.n	8002c90 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4a36      	ldr	r2, [pc, #216]	; (8002c9c <ADC_Enable+0xfc>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d00d      	beq.n	8002be4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	2210      	movs	r2, #16
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	2201      	movs	r2, #1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e056      	b.n	8002c92 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff fb23 	bl	8002234 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <ADC_Enable+0x100>)
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7ff fa45 	bl	8002080 <LL_ADC_GetCommonPathInternalCh>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d00f      	beq.n	8002c20 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c00:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <ADC_Enable+0x104>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4928      	ldr	r1, [pc, #160]	; (8002ca8 <ADC_Enable+0x108>)
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7fd fa7a 	bl	8000100 <__udivsi3>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002c10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c12:	e002      	b.n	8002c1a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f9      	bne.n	8002c14 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7e5b      	ldrb	r3, [r3, #25]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d033      	beq.n	8002c90 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002c28:	f7ff fa0c 	bl	8002044 <HAL_GetTick>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c30:	e027      	b.n	8002c82 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7ff fb0e 	bl	8002258 <LL_ADC_IsEnabled>
 8002c3c:	1e03      	subs	r3, r0, #0
 8002c3e:	d104      	bne.n	8002c4a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7ff faf5 	bl	8002234 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c4a:	f7ff f9fb 	bl	8002044 <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d914      	bls.n	8002c82 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d00d      	beq.n	8002c82 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c76:	2201      	movs	r2, #1
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e007      	b.n	8002c92 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d1d0      	bne.n	8002c32 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b004      	add	sp, #16
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	80000017 	.word	0x80000017
 8002ca0:	40012708 	.word	0x40012708
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	00030d40 	.word	0x00030d40

08002cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	1dfb      	adds	r3, r7, #7
 8002cb8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002cba:	1dfb      	adds	r3, r7, #7
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8002cc0:	d828      	bhi.n	8002d14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cc2:	4a2f      	ldr	r2, [pc, #188]	; (8002d80 <__NVIC_SetPriority+0xd4>)
 8002cc4:	1dfb      	adds	r3, r7, #7
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	b25b      	sxtb	r3, r3
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	33c0      	adds	r3, #192	; 0xc0
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	589b      	ldr	r3, [r3, r2]
 8002cd2:	1dfa      	adds	r2, r7, #7
 8002cd4:	7812      	ldrb	r2, [r2, #0]
 8002cd6:	0011      	movs	r1, r2
 8002cd8:	2203      	movs	r2, #3
 8002cda:	400a      	ands	r2, r1
 8002cdc:	00d2      	lsls	r2, r2, #3
 8002cde:	21ff      	movs	r1, #255	; 0xff
 8002ce0:	4091      	lsls	r1, r2
 8002ce2:	000a      	movs	r2, r1
 8002ce4:	43d2      	mvns	r2, r2
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	019b      	lsls	r3, r3, #6
 8002cee:	22ff      	movs	r2, #255	; 0xff
 8002cf0:	401a      	ands	r2, r3
 8002cf2:	1dfb      	adds	r3, r7, #7
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	4003      	ands	r3, r0
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d00:	481f      	ldr	r0, [pc, #124]	; (8002d80 <__NVIC_SetPriority+0xd4>)
 8002d02:	1dfb      	adds	r3, r7, #7
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b25b      	sxtb	r3, r3
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	33c0      	adds	r3, #192	; 0xc0
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d12:	e031      	b.n	8002d78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d14:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <__NVIC_SetPriority+0xd8>)
 8002d16:	1dfb      	adds	r3, r7, #7
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	230f      	movs	r3, #15
 8002d1e:	400b      	ands	r3, r1
 8002d20:	3b08      	subs	r3, #8
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	3306      	adds	r3, #6
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	18d3      	adds	r3, r2, r3
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	1dfa      	adds	r2, r7, #7
 8002d30:	7812      	ldrb	r2, [r2, #0]
 8002d32:	0011      	movs	r1, r2
 8002d34:	2203      	movs	r2, #3
 8002d36:	400a      	ands	r2, r1
 8002d38:	00d2      	lsls	r2, r2, #3
 8002d3a:	21ff      	movs	r1, #255	; 0xff
 8002d3c:	4091      	lsls	r1, r2
 8002d3e:	000a      	movs	r2, r1
 8002d40:	43d2      	mvns	r2, r2
 8002d42:	401a      	ands	r2, r3
 8002d44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	22ff      	movs	r2, #255	; 0xff
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	1dfb      	adds	r3, r7, #7
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	0018      	movs	r0, r3
 8002d54:	2303      	movs	r3, #3
 8002d56:	4003      	ands	r3, r0
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d5c:	4809      	ldr	r0, [pc, #36]	; (8002d84 <__NVIC_SetPriority+0xd8>)
 8002d5e:	1dfb      	adds	r3, r7, #7
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	001c      	movs	r4, r3
 8002d64:	230f      	movs	r3, #15
 8002d66:	4023      	ands	r3, r4
 8002d68:	3b08      	subs	r3, #8
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	3306      	adds	r3, #6
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	18c3      	adds	r3, r0, r3
 8002d74:	3304      	adds	r3, #4
 8002d76:	601a      	str	r2, [r3, #0]
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b003      	add	sp, #12
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	e000e100 	.word	0xe000e100
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	1e5a      	subs	r2, r3, #1
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	045b      	lsls	r3, r3, #17
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d301      	bcc.n	8002da0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e010      	b.n	8002dc2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <SysTick_Config+0x44>)
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	3a01      	subs	r2, #1
 8002da6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da8:	2301      	movs	r3, #1
 8002daa:	425b      	negs	r3, r3
 8002dac:	2103      	movs	r1, #3
 8002dae:	0018      	movs	r0, r3
 8002db0:	f7ff ff7c 	bl	8002cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <SysTick_Config+0x44>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dba:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <SysTick_Config+0x44>)
 8002dbc:	2207      	movs	r2, #7
 8002dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b002      	add	sp, #8
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	e000e010 	.word	0xe000e010

08002dd0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	210f      	movs	r1, #15
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	1c02      	adds	r2, r0, #0
 8002de0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b25b      	sxtb	r3, r3
 8002dea:	0011      	movs	r1, r2
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7ff ff5d 	bl	8002cac <__NVIC_SetPriority>
}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b004      	add	sp, #16
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7ff ffbf 	bl	8002d88 <SysTick_Config>
 8002e0a:	0003      	movs	r3, r0
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d11f      	bne.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	0013      	movs	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4912      	ldr	r1, [pc, #72]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7fd f95a 	bl	8000100 <__udivsi3>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	3301      	adds	r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e52:	e008      	b.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e001      	b.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e009      	b.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	401a      	ands	r2, r3
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d0ed      	beq.n	8002e54 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b004      	add	sp, #16
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	40007000 	.word	0x40007000
 8002e88:	fffff9ff 	.word	0xfffff9ff
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	000f4240 	.word	0x000f4240

08002e94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e2f3      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4013      	ands	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x1e>
 8002eb0:	e07c      	b.n	8002fac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb2:	4bc3      	ldr	r3, [pc, #780]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2238      	movs	r2, #56	; 0x38
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ebc:	4bc0      	ldr	r3, [pc, #768]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d102      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x3e>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d002      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	4bb9      	ldr	r3, [pc, #740]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	029b      	lsls	r3, r3, #10
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d062      	beq.n	8002faa <HAL_RCC_OscConfig+0x116>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d15e      	bne.n	8002faa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e2ce      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	025b      	lsls	r3, r3, #9
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_OscConfig+0x78>
 8002efc:	4bb0      	ldr	r3, [pc, #704]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4baf      	ldr	r3, [pc, #700]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f02:	2180      	movs	r1, #128	; 0x80
 8002f04:	0249      	lsls	r1, r1, #9
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e020      	b.n	8002f4e <HAL_RCC_OscConfig+0xba>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	23a0      	movs	r3, #160	; 0xa0
 8002f12:	02db      	lsls	r3, r3, #11
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d10e      	bne.n	8002f36 <HAL_RCC_OscConfig+0xa2>
 8002f18:	4ba9      	ldr	r3, [pc, #676]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4ba8      	ldr	r3, [pc, #672]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	02c9      	lsls	r1, r1, #11
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	4ba6      	ldr	r3, [pc, #664]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4ba5      	ldr	r3, [pc, #660]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f2c:	2180      	movs	r1, #128	; 0x80
 8002f2e:	0249      	lsls	r1, r1, #9
 8002f30:	430a      	orrs	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0xba>
 8002f36:	4ba2      	ldr	r3, [pc, #648]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4ba1      	ldr	r3, [pc, #644]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f3c:	49a1      	ldr	r1, [pc, #644]	; (80031c4 <HAL_RCC_OscConfig+0x330>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	4b9f      	ldr	r3, [pc, #636]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b9e      	ldr	r3, [pc, #632]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f48:	499f      	ldr	r1, [pc, #636]	; (80031c8 <HAL_RCC_OscConfig+0x334>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d014      	beq.n	8002f80 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7ff f875 	bl	8002044 <HAL_GetTick>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f60:	f7ff f870 	bl	8002044 <HAL_GetTick>
 8002f64:	0002      	movs	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e28d      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f72:	4b93      	ldr	r3, [pc, #588]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	029b      	lsls	r3, r3, #10
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0xcc>
 8002f7e:	e015      	b.n	8002fac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7ff f860 	bl	8002044 <HAL_GetTick>
 8002f84:	0003      	movs	r3, r0
 8002f86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8a:	f7ff f85b 	bl	8002044 <HAL_GetTick>
 8002f8e:	0002      	movs	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b64      	cmp	r3, #100	; 0x64
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e278      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9c:	4b88      	ldr	r3, [pc, #544]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	029b      	lsls	r3, r3, #10
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0xf6>
 8002fa8:	e000      	b.n	8002fac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002faa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d100      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x124>
 8002fb6:	e099      	b.n	80030ec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb8:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2238      	movs	r2, #56	; 0x38
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc2:	4b7f      	ldr	r3, [pc, #508]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	4013      	ands	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x144>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d002      	beq.n	8002fde <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d135      	bne.n	800304a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fde:	4b78      	ldr	r3, [pc, #480]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d005      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x162>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e24b      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	4b72      	ldr	r3, [pc, #456]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4a74      	ldr	r2, [pc, #464]	; (80031cc <HAL_RCC_OscConfig+0x338>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	021a      	lsls	r2, r3, #8
 8003006:	4b6e      	ldr	r3, [pc, #440]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d112      	bne.n	8003038 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003012:	4b6b      	ldr	r3, [pc, #428]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6e      	ldr	r2, [pc, #440]	; (80031d0 <HAL_RCC_OscConfig+0x33c>)
 8003018:	4013      	ands	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003026:	4b66      	ldr	r3, [pc, #408]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0adb      	lsrs	r3, r3, #11
 800302c:	2207      	movs	r2, #7
 800302e:	4013      	ands	r3, r2
 8003030:	4a68      	ldr	r2, [pc, #416]	; (80031d4 <HAL_RCC_OscConfig+0x340>)
 8003032:	40da      	lsrs	r2, r3
 8003034:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <HAL_RCC_OscConfig+0x344>)
 8003036:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003038:	4b68      	ldr	r3, [pc, #416]	; (80031dc <HAL_RCC_OscConfig+0x348>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0018      	movs	r0, r3
 800303e:	f7fe ffa5 	bl	8001f8c <HAL_InitTick>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d051      	beq.n	80030ea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e221      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d030      	beq.n	80030b4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003052:	4b5b      	ldr	r3, [pc, #364]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a5e      	ldr	r2, [pc, #376]	; (80031d0 <HAL_RCC_OscConfig+0x33c>)
 8003058:	4013      	ands	r3, r2
 800305a:	0019      	movs	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	4b57      	ldr	r3, [pc, #348]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003062:	430a      	orrs	r2, r1
 8003064:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003066:	4b56      	ldr	r3, [pc, #344]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b55      	ldr	r3, [pc, #340]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800306c:	2180      	movs	r1, #128	; 0x80
 800306e:	0049      	lsls	r1, r1, #1
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe ffe6 	bl	8002044 <HAL_GetTick>
 8003078:	0003      	movs	r3, r0
 800307a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307e:	f7fe ffe1 	bl	8002044 <HAL_GetTick>
 8003082:	0002      	movs	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e1fe      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003090:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4013      	ands	r3, r2
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309c:	4b48      	ldr	r3, [pc, #288]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a4a      	ldr	r2, [pc, #296]	; (80031cc <HAL_RCC_OscConfig+0x338>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	021a      	lsls	r2, r3, #8
 80030ac:	4b44      	ldr	r3, [pc, #272]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	e01b      	b.n	80030ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80030b4:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80030ba:	4949      	ldr	r1, [pc, #292]	; (80031e0 <HAL_RCC_OscConfig+0x34c>)
 80030bc:	400a      	ands	r2, r1
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe ffc0 	bl	8002044 <HAL_GetTick>
 80030c4:	0003      	movs	r3, r0
 80030c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ca:	f7fe ffbb 	bl	8002044 <HAL_GetTick>
 80030ce:	0002      	movs	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1d8      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030dc:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4013      	ands	r3, r2
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x236>
 80030e8:	e000      	b.n	80030ec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2208      	movs	r2, #8
 80030f2:	4013      	ands	r3, r2
 80030f4:	d047      	beq.n	8003186 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80030f6:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2238      	movs	r2, #56	; 0x38
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b18      	cmp	r3, #24
 8003100:	d10a      	bne.n	8003118 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003102:	4b2f      	ldr	r3, [pc, #188]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	2202      	movs	r2, #2
 8003108:	4013      	ands	r3, r2
 800310a:	d03c      	beq.n	8003186 <HAL_RCC_OscConfig+0x2f2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d138      	bne.n	8003186 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e1ba      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d019      	beq.n	8003154 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003122:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003124:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003126:	2101      	movs	r1, #1
 8003128:	430a      	orrs	r2, r1
 800312a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe ff8a 	bl	8002044 <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003136:	f7fe ff85 	bl	8002044 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1a2      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800314a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314c:	2202      	movs	r2, #2
 800314e:	4013      	ands	r3, r2
 8003150:	d0f1      	beq.n	8003136 <HAL_RCC_OscConfig+0x2a2>
 8003152:	e018      	b.n	8003186 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003156:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800315a:	2101      	movs	r1, #1
 800315c:	438a      	bics	r2, r1
 800315e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe ff70 	bl	8002044 <HAL_GetTick>
 8003164:	0003      	movs	r3, r0
 8003166:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316a:	f7fe ff6b 	bl	8002044 <HAL_GetTick>
 800316e:	0002      	movs	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e188      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	2202      	movs	r2, #2
 8003182:	4013      	ands	r3, r2
 8003184:	d1f1      	bne.n	800316a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2204      	movs	r2, #4
 800318c:	4013      	ands	r3, r2
 800318e:	d100      	bne.n	8003192 <HAL_RCC_OscConfig+0x2fe>
 8003190:	e0c6      	b.n	8003320 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	231f      	movs	r3, #31
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2238      	movs	r2, #56	; 0x38
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d11e      	bne.n	80031e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	2202      	movs	r2, #2
 80031ac:	4013      	ands	r3, r2
 80031ae:	d100      	bne.n	80031b2 <HAL_RCC_OscConfig+0x31e>
 80031b0:	e0b6      	b.n	8003320 <HAL_RCC_OscConfig+0x48c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d000      	beq.n	80031bc <HAL_RCC_OscConfig+0x328>
 80031ba:	e0b1      	b.n	8003320 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e166      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
 80031c0:	40021000 	.word	0x40021000
 80031c4:	fffeffff 	.word	0xfffeffff
 80031c8:	fffbffff 	.word	0xfffbffff
 80031cc:	ffff80ff 	.word	0xffff80ff
 80031d0:	ffffc7ff 	.word	0xffffc7ff
 80031d4:	00f42400 	.word	0x00f42400
 80031d8:	20000000 	.word	0x20000000
 80031dc:	20000004 	.word	0x20000004
 80031e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031e4:	4bac      	ldr	r3, [pc, #688]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80031e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	055b      	lsls	r3, r3, #21
 80031ec:	4013      	ands	r3, r2
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_OscConfig+0x360>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x362>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d011      	beq.n	800321e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	4ba7      	ldr	r3, [pc, #668]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80031fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031fe:	4ba6      	ldr	r3, [pc, #664]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	0549      	lsls	r1, r1, #21
 8003204:	430a      	orrs	r2, r1
 8003206:	63da      	str	r2, [r3, #60]	; 0x3c
 8003208:	4ba3      	ldr	r3, [pc, #652]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800320a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	055b      	lsls	r3, r3, #21
 8003210:	4013      	ands	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003216:	231f      	movs	r3, #31
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321e:	4b9f      	ldr	r3, [pc, #636]	; (800349c <HAL_RCC_OscConfig+0x608>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4013      	ands	r3, r2
 8003228:	d11a      	bne.n	8003260 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800322a:	4b9c      	ldr	r3, [pc, #624]	; (800349c <HAL_RCC_OscConfig+0x608>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b9b      	ldr	r3, [pc, #620]	; (800349c <HAL_RCC_OscConfig+0x608>)
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	0049      	lsls	r1, r1, #1
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003238:	f7fe ff04 	bl	8002044 <HAL_GetTick>
 800323c:	0003      	movs	r3, r0
 800323e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7fe feff 	bl	8002044 <HAL_GetTick>
 8003246:	0002      	movs	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e11c      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003254:	4b91      	ldr	r3, [pc, #580]	; (800349c <HAL_RCC_OscConfig+0x608>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4013      	ands	r3, r2
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x3e2>
 8003268:	4b8b      	ldr	r3, [pc, #556]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800326a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800326c:	4b8a      	ldr	r3, [pc, #552]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800326e:	2101      	movs	r1, #1
 8003270:	430a      	orrs	r2, r1
 8003272:	65da      	str	r2, [r3, #92]	; 0x5c
 8003274:	e01c      	b.n	80032b0 <HAL_RCC_OscConfig+0x41c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b05      	cmp	r3, #5
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x404>
 800327e:	4b86      	ldr	r3, [pc, #536]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003282:	4b85      	ldr	r3, [pc, #532]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003284:	2104      	movs	r1, #4
 8003286:	430a      	orrs	r2, r1
 8003288:	65da      	str	r2, [r3, #92]	; 0x5c
 800328a:	4b83      	ldr	r3, [pc, #524]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800328c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800328e:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003290:	2101      	movs	r1, #1
 8003292:	430a      	orrs	r2, r1
 8003294:	65da      	str	r2, [r3, #92]	; 0x5c
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0x41c>
 8003298:	4b7f      	ldr	r3, [pc, #508]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800329a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800329c:	4b7e      	ldr	r3, [pc, #504]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800329e:	2101      	movs	r1, #1
 80032a0:	438a      	bics	r2, r1
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80032a4:	4b7c      	ldr	r3, [pc, #496]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80032a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032a8:	4b7b      	ldr	r3, [pc, #492]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80032aa:	2104      	movs	r1, #4
 80032ac:	438a      	bics	r2, r1
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d014      	beq.n	80032e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe fec4 	bl	8002044 <HAL_GetTick>
 80032bc:	0003      	movs	r3, r0
 80032be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c0:	e009      	b.n	80032d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fe febf 	bl	8002044 <HAL_GetTick>
 80032c6:	0002      	movs	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	4a74      	ldr	r2, [pc, #464]	; (80034a0 <HAL_RCC_OscConfig+0x60c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e0db      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d6:	4b70      	ldr	r3, [pc, #448]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	2202      	movs	r2, #2
 80032dc:	4013      	ands	r3, r2
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x42e>
 80032e0:	e013      	b.n	800330a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fe feaf 	bl	8002044 <HAL_GetTick>
 80032e6:	0003      	movs	r3, r0
 80032e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ea:	e009      	b.n	8003300 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ec:	f7fe feaa 	bl	8002044 <HAL_GetTick>
 80032f0:	0002      	movs	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	4a6a      	ldr	r2, [pc, #424]	; (80034a0 <HAL_RCC_OscConfig+0x60c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e0c6      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003300:	4b65      	ldr	r3, [pc, #404]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	2202      	movs	r2, #2
 8003306:	4013      	ands	r3, r2
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800330a:	231f      	movs	r3, #31
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4b60      	ldr	r3, [pc, #384]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003318:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800331a:	4962      	ldr	r1, [pc, #392]	; (80034a4 <HAL_RCC_OscConfig+0x610>)
 800331c:	400a      	ands	r2, r1
 800331e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d100      	bne.n	800332a <HAL_RCC_OscConfig+0x496>
 8003328:	e0b0      	b.n	800348c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2238      	movs	r2, #56	; 0x38
 8003330:	4013      	ands	r3, r2
 8003332:	2b10      	cmp	r3, #16
 8003334:	d100      	bne.n	8003338 <HAL_RCC_OscConfig+0x4a4>
 8003336:	e078      	b.n	800342a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d153      	bne.n	80033e8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003340:	4b55      	ldr	r3, [pc, #340]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b54      	ldr	r3, [pc, #336]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003346:	4958      	ldr	r1, [pc, #352]	; (80034a8 <HAL_RCC_OscConfig+0x614>)
 8003348:	400a      	ands	r2, r1
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe fe7a 	bl	8002044 <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003356:	f7fe fe75 	bl	8002044 <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e092      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003368:	4b4b      	ldr	r3, [pc, #300]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	049b      	lsls	r3, r3, #18
 8003370:	4013      	ands	r3, r2
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003374:	4b48      	ldr	r3, [pc, #288]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a4c      	ldr	r2, [pc, #304]	; (80034ac <HAL_RCC_OscConfig+0x618>)
 800337a:	4013      	ands	r3, r2
 800337c:	0019      	movs	r1, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1a      	ldr	r2, [r3, #32]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	431a      	orrs	r2, r3
 800339c:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800339e:	430a      	orrs	r2, r1
 80033a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a2:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4b3c      	ldr	r3, [pc, #240]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	0449      	lsls	r1, r1, #17
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80033b0:	4b39      	ldr	r3, [pc, #228]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	4b38      	ldr	r3, [pc, #224]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	0549      	lsls	r1, r1, #21
 80033ba:	430a      	orrs	r2, r1
 80033bc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fe fe41 	bl	8002044 <HAL_GetTick>
 80033c2:	0003      	movs	r3, r0
 80033c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe fe3c 	bl	8002044 <HAL_GetTick>
 80033cc:	0002      	movs	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e059      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033da:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	049b      	lsls	r3, r3, #18
 80033e2:	4013      	ands	r3, r2
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x534>
 80033e6:	e051      	b.n	800348c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033ee:	492e      	ldr	r1, [pc, #184]	; (80034a8 <HAL_RCC_OscConfig+0x614>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe fe26 	bl	8002044 <HAL_GetTick>
 80033f8:	0003      	movs	r3, r0
 80033fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fe:	f7fe fe21 	bl	8002044 <HAL_GetTick>
 8003402:	0002      	movs	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e03e      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003410:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	049b      	lsls	r3, r3, #18
 8003418:	4013      	ands	r3, r2
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003422:	4923      	ldr	r1, [pc, #140]	; (80034b0 <HAL_RCC_OscConfig+0x61c>)
 8003424:	400a      	ands	r2, r1
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	e030      	b.n	800348c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e02b      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003436:	4b18      	ldr	r3, [pc, #96]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2203      	movs	r2, #3
 8003440:	401a      	ands	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	429a      	cmp	r2, r3
 8003448:	d11e      	bne.n	8003488 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2270      	movs	r2, #112	; 0x70
 800344e:	401a      	ands	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003454:	429a      	cmp	r2, r3
 8003456:	d117      	bne.n	8003488 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	23fe      	movs	r3, #254	; 0xfe
 800345c:	01db      	lsls	r3, r3, #7
 800345e:	401a      	ands	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d10e      	bne.n	8003488 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	23f8      	movs	r3, #248	; 0xf8
 800346e:	039b      	lsls	r3, r3, #14
 8003470:	401a      	ands	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d106      	bne.n	8003488 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	0f5b      	lsrs	r3, r3, #29
 800347e:	075a      	lsls	r2, r3, #29
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b008      	add	sp, #32
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	40021000 	.word	0x40021000
 800349c:	40007000 	.word	0x40007000
 80034a0:	00001388 	.word	0x00001388
 80034a4:	efffffff 	.word	0xefffffff
 80034a8:	feffffff 	.word	0xfeffffff
 80034ac:	1fc1808c 	.word	0x1fc1808c
 80034b0:	effefffc 	.word	0xeffefffc

080034b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0e9      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034c8:	4b76      	ldr	r3, [pc, #472]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2207      	movs	r2, #7
 80034ce:	4013      	ands	r3, r2
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d91e      	bls.n	8003514 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b73      	ldr	r3, [pc, #460]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2207      	movs	r2, #7
 80034dc:	4393      	bics	r3, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	4b70      	ldr	r3, [pc, #448]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034e8:	f7fe fdac 	bl	8002044 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034f0:	e009      	b.n	8003506 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f2:	f7fe fda7 	bl	8002044 <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	4a6a      	ldr	r2, [pc, #424]	; (80036a8 <HAL_RCC_ClockConfig+0x1f4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0ca      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003506:	4b67      	ldr	r3, [pc, #412]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2207      	movs	r2, #7
 800350c:	4013      	ands	r3, r2
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d1ee      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2202      	movs	r2, #2
 800351a:	4013      	ands	r3, r2
 800351c:	d015      	beq.n	800354a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	d006      	beq.n	8003536 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003528:	4b60      	ldr	r3, [pc, #384]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800352e:	21e0      	movs	r1, #224	; 0xe0
 8003530:	01c9      	lsls	r1, r1, #7
 8003532:	430a      	orrs	r2, r1
 8003534:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003536:	4b5d      	ldr	r3, [pc, #372]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	4a5d      	ldr	r2, [pc, #372]	; (80036b0 <HAL_RCC_ClockConfig+0x1fc>)
 800353c:	4013      	ands	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	d057      	beq.n	8003604 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	029b      	lsls	r3, r3, #10
 8003564:	4013      	ands	r3, r2
 8003566:	d12b      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e097      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d107      	bne.n	8003584 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003574:	4b4d      	ldr	r3, [pc, #308]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	049b      	lsls	r3, r3, #18
 800357c:	4013      	ands	r3, r2
 800357e:	d11f      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e08b      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800358c:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4013      	ands	r3, r2
 8003596:	d113      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e07f      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a4:	4b41      	ldr	r3, [pc, #260]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 80035a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a8:	2202      	movs	r2, #2
 80035aa:	4013      	ands	r3, r2
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e074      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b2:	4b3e      	ldr	r3, [pc, #248]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2202      	movs	r2, #2
 80035b8:	4013      	ands	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e06d      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035c0:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2207      	movs	r2, #7
 80035c6:	4393      	bics	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4b37      	ldr	r3, [pc, #220]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 80035d0:	430a      	orrs	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d4:	f7fe fd36 	bl	8002044 <HAL_GetTick>
 80035d8:	0003      	movs	r3, r0
 80035da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035dc:	e009      	b.n	80035f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035de:	f7fe fd31 	bl	8002044 <HAL_GetTick>
 80035e2:	0002      	movs	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	4a2f      	ldr	r2, [pc, #188]	; (80036a8 <HAL_RCC_ClockConfig+0x1f4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e054      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	4b2e      	ldr	r3, [pc, #184]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2238      	movs	r2, #56	; 0x38
 80035f8:	401a      	ands	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	429a      	cmp	r2, r3
 8003602:	d1ec      	bne.n	80035de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2207      	movs	r2, #7
 800360a:	4013      	ands	r3, r2
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d21e      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2207      	movs	r2, #7
 8003618:	4393      	bics	r3, r2
 800361a:	0019      	movs	r1, r3
 800361c:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003624:	f7fe fd0e 	bl	8002044 <HAL_GetTick>
 8003628:	0003      	movs	r3, r0
 800362a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800362c:	e009      	b.n	8003642 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362e:	f7fe fd09 	bl	8002044 <HAL_GetTick>
 8003632:	0002      	movs	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <HAL_RCC_ClockConfig+0x1f4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e02c      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2207      	movs	r2, #7
 8003648:	4013      	ands	r3, r2
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d1ee      	bne.n	800362e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2204      	movs	r2, #4
 8003656:	4013      	ands	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <HAL_RCC_ClockConfig+0x200>)
 8003660:	4013      	ands	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800366a:	430a      	orrs	r2, r1
 800366c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800366e:	f000 f829 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003672:	0001      	movs	r1, r0
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	0a1b      	lsrs	r3, r3, #8
 800367a:	220f      	movs	r2, #15
 800367c:	401a      	ands	r2, r3
 800367e:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x204>)
 8003680:	0092      	lsls	r2, r2, #2
 8003682:	58d3      	ldr	r3, [r2, r3]
 8003684:	221f      	movs	r2, #31
 8003686:	4013      	ands	r3, r2
 8003688:	000a      	movs	r2, r1
 800368a:	40da      	lsrs	r2, r3
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_ClockConfig+0x208>)
 800368e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_ClockConfig+0x20c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0018      	movs	r0, r3
 8003696:	f7fe fc79 	bl	8001f8c <HAL_InitTick>
 800369a:	0003      	movs	r3, r0
}
 800369c:	0018      	movs	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	b004      	add	sp, #16
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40022000 	.word	0x40022000
 80036a8:	00001388 	.word	0x00001388
 80036ac:	40021000 	.word	0x40021000
 80036b0:	fffff0ff 	.word	0xfffff0ff
 80036b4:	ffff8fff 	.word	0xffff8fff
 80036b8:	080038b8 	.word	0x080038b8
 80036bc:	20000000 	.word	0x20000000
 80036c0:	20000004 	.word	0x20000004

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ca:	4b3c      	ldr	r3, [pc, #240]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2238      	movs	r2, #56	; 0x38
 80036d0:	4013      	ands	r3, r2
 80036d2:	d10f      	bne.n	80036f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036d4:	4b39      	ldr	r3, [pc, #228]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	0adb      	lsrs	r3, r3, #11
 80036da:	2207      	movs	r2, #7
 80036dc:	4013      	ands	r3, r2
 80036de:	2201      	movs	r2, #1
 80036e0:	409a      	lsls	r2, r3
 80036e2:	0013      	movs	r3, r2
 80036e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036e6:	6839      	ldr	r1, [r7, #0]
 80036e8:	4835      	ldr	r0, [pc, #212]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036ea:	f7fc fd09 	bl	8000100 <__udivsi3>
 80036ee:	0003      	movs	r3, r0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	e05d      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2238      	movs	r2, #56	; 0x38
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d102      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003700:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	e054      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003706:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2238      	movs	r2, #56	; 0x38
 800370c:	4013      	ands	r3, r2
 800370e:	2b10      	cmp	r3, #16
 8003710:	d138      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003712:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2203      	movs	r2, #3
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	2207      	movs	r2, #7
 8003724:	4013      	ands	r3, r2
 8003726:	3301      	adds	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d10d      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	4824      	ldr	r0, [pc, #144]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003734:	f7fc fce4 	bl	8000100 <__udivsi3>
 8003738:	0003      	movs	r3, r0
 800373a:	0019      	movs	r1, r3
 800373c:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	227f      	movs	r2, #127	; 0x7f
 8003744:	4013      	ands	r3, r2
 8003746:	434b      	muls	r3, r1
 8003748:	617b      	str	r3, [r7, #20]
        break;
 800374a:	e00d      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	481c      	ldr	r0, [pc, #112]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003750:	f7fc fcd6 	bl	8000100 <__udivsi3>
 8003754:	0003      	movs	r3, r0
 8003756:	0019      	movs	r1, r3
 8003758:	4b18      	ldr	r3, [pc, #96]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	227f      	movs	r2, #127	; 0x7f
 8003760:	4013      	ands	r3, r2
 8003762:	434b      	muls	r3, r1
 8003764:	617b      	str	r3, [r7, #20]
        break;
 8003766:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	0f5b      	lsrs	r3, r3, #29
 800376e:	2207      	movs	r2, #7
 8003770:	4013      	ands	r3, r2
 8003772:	3301      	adds	r3, #1
 8003774:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	6978      	ldr	r0, [r7, #20]
 800377a:	f7fc fcc1 	bl	8000100 <__udivsi3>
 800377e:	0003      	movs	r3, r0
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e015      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003784:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2238      	movs	r2, #56	; 0x38
 800378a:	4013      	ands	r3, r2
 800378c:	2b20      	cmp	r3, #32
 800378e:	d103      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2238      	movs	r2, #56	; 0x38
 800379e:	4013      	ands	r3, r2
 80037a0:	2b18      	cmp	r3, #24
 80037a2:	d103      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80037a4:	23fa      	movs	r3, #250	; 0xfa
 80037a6:	01db      	lsls	r3, r3, #7
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	e001      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037b0:	693b      	ldr	r3, [r7, #16]
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b006      	add	sp, #24
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	40021000 	.word	0x40021000
 80037c0:	00f42400 	.word	0x00f42400
 80037c4:	007a1200 	.word	0x007a1200

080037c8 <__libc_init_array>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	2600      	movs	r6, #0
 80037cc:	4d0c      	ldr	r5, [pc, #48]	; (8003800 <__libc_init_array+0x38>)
 80037ce:	4c0d      	ldr	r4, [pc, #52]	; (8003804 <__libc_init_array+0x3c>)
 80037d0:	1b64      	subs	r4, r4, r5
 80037d2:	10a4      	asrs	r4, r4, #2
 80037d4:	42a6      	cmp	r6, r4
 80037d6:	d109      	bne.n	80037ec <__libc_init_array+0x24>
 80037d8:	2600      	movs	r6, #0
 80037da:	f000 f821 	bl	8003820 <_init>
 80037de:	4d0a      	ldr	r5, [pc, #40]	; (8003808 <__libc_init_array+0x40>)
 80037e0:	4c0a      	ldr	r4, [pc, #40]	; (800380c <__libc_init_array+0x44>)
 80037e2:	1b64      	subs	r4, r4, r5
 80037e4:	10a4      	asrs	r4, r4, #2
 80037e6:	42a6      	cmp	r6, r4
 80037e8:	d105      	bne.n	80037f6 <__libc_init_array+0x2e>
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	00b3      	lsls	r3, r6, #2
 80037ee:	58eb      	ldr	r3, [r5, r3]
 80037f0:	4798      	blx	r3
 80037f2:	3601      	adds	r6, #1
 80037f4:	e7ee      	b.n	80037d4 <__libc_init_array+0xc>
 80037f6:	00b3      	lsls	r3, r6, #2
 80037f8:	58eb      	ldr	r3, [r5, r3]
 80037fa:	4798      	blx	r3
 80037fc:	3601      	adds	r6, #1
 80037fe:	e7f2      	b.n	80037e6 <__libc_init_array+0x1e>
 8003800:	080038f8 	.word	0x080038f8
 8003804:	080038f8 	.word	0x080038f8
 8003808:	080038f8 	.word	0x080038f8
 800380c:	080038fc 	.word	0x080038fc

08003810 <memset>:
 8003810:	0003      	movs	r3, r0
 8003812:	1882      	adds	r2, r0, r2
 8003814:	4293      	cmp	r3, r2
 8003816:	d100      	bne.n	800381a <memset+0xa>
 8003818:	4770      	bx	lr
 800381a:	7019      	strb	r1, [r3, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	e7f9      	b.n	8003814 <memset+0x4>

08003820 <_init>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr

0800382c <_fini>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr


UART_RX_GPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000018c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000248  08000250  00010250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000248  08000248  00010250  2**0
                  CONTENTS
  4 .ARM          00000000  08000248  08000248  00010250  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000248  08000250  00010250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000248  08000248  00010248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000250  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000250  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000043b  00000000  00000000  00010278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000011b  00000000  00000000  000106b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  000107d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000040  00000000  00000000  00010828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd6a  00000000  00000000  00010868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000057d  00000000  00000000  0001c5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00042729  00000000  00000000  0001cb4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0005f278  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000098  00000000  00000000  0005f2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000230 	.word	0x08000230

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000230 	.word	0x08000230

08000104 <main>:
void delay(unsigned int a);

volatile char received_data;

int main()
{
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0
    RCC->IOPENR = (1U << 0);
 8000108:	4b1f      	ldr	r3, [pc, #124]	; (8000188 <main+0x84>)
 800010a:	2201      	movs	r2, #1
 800010c:	635a      	str	r2, [r3, #52]	; 0x34

    GPIOA->MODER |= (1U << 5) | (1U << 7);
 800010e:	23a0      	movs	r3, #160	; 0xa0
 8000110:	05db      	lsls	r3, r3, #23
 8000112:	681a      	ldr	r2, [r3, #0]
 8000114:	23a0      	movs	r3, #160	; 0xa0
 8000116:	05db      	lsls	r3, r3, #23
 8000118:	21a0      	movs	r1, #160	; 0xa0
 800011a:	430a      	orrs	r2, r1
 800011c:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~((1U << 4) | (1U << 6));
 800011e:	23a0      	movs	r3, #160	; 0xa0
 8000120:	05db      	lsls	r3, r3, #23
 8000122:	681a      	ldr	r2, [r3, #0]
 8000124:	23a0      	movs	r3, #160	; 0xa0
 8000126:	05db      	lsls	r3, r3, #23
 8000128:	2150      	movs	r1, #80	; 0x50
 800012a:	438a      	bics	r2, r1
 800012c:	601a      	str	r2, [r3, #0]

    GPIOA->AFR[0] |= (1 << 8) | (1 << 12);
 800012e:	23a0      	movs	r3, #160	; 0xa0
 8000130:	05db      	lsls	r3, r3, #23
 8000132:	6a1a      	ldr	r2, [r3, #32]
 8000134:	23a0      	movs	r3, #160	; 0xa0
 8000136:	05db      	lsls	r3, r3, #23
 8000138:	2188      	movs	r1, #136	; 0x88
 800013a:	0149      	lsls	r1, r1, #5
 800013c:	430a      	orrs	r2, r1
 800013e:	621a      	str	r2, [r3, #32]

    RCC->APBENR1 |= (1U << 17);
 8000140:	4b11      	ldr	r3, [pc, #68]	; (8000188 <main+0x84>)
 8000142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000144:	4b10      	ldr	r3, [pc, #64]	; (8000188 <main+0x84>)
 8000146:	2180      	movs	r1, #128	; 0x80
 8000148:	0289      	lsls	r1, r1, #10
 800014a:	430a      	orrs	r2, r1
 800014c:	63da      	str	r2, [r3, #60]	; 0x3c
    USART2->BRR = 139;
 800014e:	4b0f      	ldr	r3, [pc, #60]	; (800018c <main+0x88>)
 8000150:	228b      	movs	r2, #139	; 0x8b
 8000152:	60da      	str	r2, [r3, #12]

    // Enable USART2 receive interrupt
    USART2->CR1 = (1U << 2) | (1U << 5) | (1U << 7);
 8000154:	4b0d      	ldr	r3, [pc, #52]	; (800018c <main+0x88>)
 8000156:	22a4      	movs	r2, #164	; 0xa4
 8000158:	601a      	str	r2, [r3, #0]
   // NVIC_EnableIRQ(USART2_IRQn); // Enable USART2 interrupt

    while (1)
    {
    	if (USART2->ISR & (1U << 5)) // Check if data is received
 800015a:	4b0c      	ldr	r3, [pc, #48]	; (800018c <main+0x88>)
 800015c:	69db      	ldr	r3, [r3, #28]
 800015e:	2220      	movs	r2, #32
 8000160:	4013      	ands	r3, r2
 8000162:	d0fa      	beq.n	800015a <main+0x56>
    	    {
    	        received_data = USART2->RDR; // Read received data
 8000164:	4b09      	ldr	r3, [pc, #36]	; (800018c <main+0x88>)
 8000166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000168:	b2da      	uxtb	r2, r3
 800016a:	4b09      	ldr	r3, [pc, #36]	; (8000190 <main+0x8c>)
 800016c:	701a      	strb	r2, [r3, #0]

    	        // Process the received data as needed

    	        // Echo the received data back
    	        while (!(USART2->ISR & (1U << 7))); // Wait until transmit data register is empty
 800016e:	46c0      	nop			; (mov r8, r8)
 8000170:	4b06      	ldr	r3, [pc, #24]	; (800018c <main+0x88>)
 8000172:	69db      	ldr	r3, [r3, #28]
 8000174:	2280      	movs	r2, #128	; 0x80
 8000176:	4013      	ands	r3, r2
 8000178:	d0fa      	beq.n	8000170 <main+0x6c>
    	        USART2->TDR = received_data;
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <main+0x8c>)
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	b2da      	uxtb	r2, r3
 8000180:	4b02      	ldr	r3, [pc, #8]	; (800018c <main+0x88>)
 8000182:	629a      	str	r2, [r3, #40]	; 0x28
    	if (USART2->ISR & (1U << 5)) // Check if data is received
 8000184:	e7e9      	b.n	800015a <main+0x56>
 8000186:	46c0      	nop			; (mov r8, r8)
 8000188:	40021000 	.word	0x40021000
 800018c:	40004400 	.word	0x40004400
 8000190:	2000001c 	.word	0x2000001c

08000194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000194:	480d      	ldr	r0, [pc, #52]	; (80001cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000196:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000198:	e000      	b.n	800019c <Reset_Handler+0x8>
 800019a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800019c:	480c      	ldr	r0, [pc, #48]	; (80001d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800019e:	490d      	ldr	r1, [pc, #52]	; (80001d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001a0:	4a0d      	ldr	r2, [pc, #52]	; (80001d8 <LoopForever+0xe>)
  movs r3, #0
 80001a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001a4:	e002      	b.n	80001ac <LoopCopyDataInit>

080001a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001aa:	3304      	adds	r3, #4

080001ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001b0:	d3f9      	bcc.n	80001a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001b2:	4a0a      	ldr	r2, [pc, #40]	; (80001dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80001b4:	4c0a      	ldr	r4, [pc, #40]	; (80001e0 <LoopForever+0x16>)
  movs r3, #0
 80001b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001b8:	e001      	b.n	80001be <LoopFillZerobss>

080001ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001bc:	3204      	adds	r2, #4

080001be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001c0:	d3fb      	bcc.n	80001ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001c2:	f000 f811 	bl	80001e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001c6:	f7ff ff9d 	bl	8000104 <main>

080001ca <LoopForever>:

LoopForever:
  b LoopForever
 80001ca:	e7fe      	b.n	80001ca <LoopForever>
  ldr   r0, =_estack
 80001cc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80001d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001d8:	08000250 	.word	0x08000250
  ldr r2, =_sbss
 80001dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001e0:	20000020 	.word	0x20000020

080001e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001e4:	e7fe      	b.n	80001e4 <ADC_IRQHandler>
	...

080001e8 <__libc_init_array>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	2600      	movs	r6, #0
 80001ec:	4d0c      	ldr	r5, [pc, #48]	; (8000220 <__libc_init_array+0x38>)
 80001ee:	4c0d      	ldr	r4, [pc, #52]	; (8000224 <__libc_init_array+0x3c>)
 80001f0:	1b64      	subs	r4, r4, r5
 80001f2:	10a4      	asrs	r4, r4, #2
 80001f4:	42a6      	cmp	r6, r4
 80001f6:	d109      	bne.n	800020c <__libc_init_array+0x24>
 80001f8:	2600      	movs	r6, #0
 80001fa:	f000 f819 	bl	8000230 <_init>
 80001fe:	4d0a      	ldr	r5, [pc, #40]	; (8000228 <__libc_init_array+0x40>)
 8000200:	4c0a      	ldr	r4, [pc, #40]	; (800022c <__libc_init_array+0x44>)
 8000202:	1b64      	subs	r4, r4, r5
 8000204:	10a4      	asrs	r4, r4, #2
 8000206:	42a6      	cmp	r6, r4
 8000208:	d105      	bne.n	8000216 <__libc_init_array+0x2e>
 800020a:	bd70      	pop	{r4, r5, r6, pc}
 800020c:	00b3      	lsls	r3, r6, #2
 800020e:	58eb      	ldr	r3, [r5, r3]
 8000210:	4798      	blx	r3
 8000212:	3601      	adds	r6, #1
 8000214:	e7ee      	b.n	80001f4 <__libc_init_array+0xc>
 8000216:	00b3      	lsls	r3, r6, #2
 8000218:	58eb      	ldr	r3, [r5, r3]
 800021a:	4798      	blx	r3
 800021c:	3601      	adds	r6, #1
 800021e:	e7f2      	b.n	8000206 <__libc_init_array+0x1e>
 8000220:	08000248 	.word	0x08000248
 8000224:	08000248 	.word	0x08000248
 8000228:	08000248 	.word	0x08000248
 800022c:	0800024c 	.word	0x0800024c

08000230 <_init>:
 8000230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000236:	bc08      	pop	{r3}
 8000238:	469e      	mov	lr, r3
 800023a:	4770      	bx	lr

0800023c <_fini>:
 800023c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000242:	bc08      	pop	{r3}
 8000244:	469e      	mov	lr, r3
 8000246:	4770      	bx	lr

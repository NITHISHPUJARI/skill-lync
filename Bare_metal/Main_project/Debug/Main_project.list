
Main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001064  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001120  08001120  00011120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011ac  080011ac  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080011ac  080011ac  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011ac  080011ac  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011ac  080011ac  000111ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011b0  080011b0  000111b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080011b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001218  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001218  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006ca  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002b7  00000000  00000000  00020756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00020a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00020ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cea4  00000000  00000000  00020b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ead  00000000  00000000  0002da1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00047002  00000000  00000000  0002e8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000758cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f4  00000000  00000000  0007591c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000064 	.word	0x20000064
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001108 	.word	0x08001108

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000068 	.word	0x20000068
 8000100:	08001108 	.word	0x08001108

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <I2C_Init>:
// SSD1315 registers
#define SSD1315_REG_CONTROL 0x00
#define SSD1315_REG_DATA 0x40

// Function to initialize I2C
void I2C_Init() {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    // Enable I2C peripheral clock
    RCC->AHBENR |= RCC_APBENR1_I2C1EN;
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <I2C_Init+0x3c>)
 8000236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <I2C_Init+0x3c>)
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	0389      	lsls	r1, r1, #14
 800023e:	430a      	orrs	r2, r1
 8000240:	639a      	str	r2, [r3, #56]	; 0x38

    // Configure I2C peripheral
    I2C_CR1 = 0x00000000;  // Disable I2C peripheral
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <I2C_Init+0x40>)
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]

    // Set I2C clock frequency
    I2C_CR2 = (6 << 0);  // PCLK1 = 8MHz, I2C frequency = 8MHz / (6+1) = 1.14MHz
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <I2C_Init+0x44>)
 800024a:	2206      	movs	r2, #6
 800024c:	601a      	str	r2, [r3, #0]

    // Set I2C slave address
    I2C_OAR1 = (BMP280_ADDR << 1);  // Set BMP280 as slave address
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <I2C_Init+0x48>)
 8000250:	22ec      	movs	r2, #236	; 0xec
 8000252:	601a      	str	r2, [r3, #0]

    // Configure I2C rise time
    I2C_TRISE = 0x00000007;  // Maximum rise time value for 1000ns at 1.14MHz
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <I2C_Init+0x4c>)
 8000256:	2207      	movs	r2, #7
 8000258:	601a      	str	r2, [r3, #0]

    // Enable I2C peripheral
    I2C_CR1 |= I2C_CR1_PE;
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <I2C_Init+0x40>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4b04      	ldr	r3, [pc, #16]	; (8000270 <I2C_Init+0x40>)
 8000260:	2101      	movs	r1, #1
 8000262:	430a      	orrs	r2, r1
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40021000 	.word	0x40021000
 8000270:	40005400 	.word	0x40005400
 8000274:	40005404 	.word	0x40005404
 8000278:	40005408 	.word	0x40005408
 800027c:	40005420 	.word	0x40005420

08000280 <I2C_StartTransmission>:

// Function to start an I2C transmission
void I2C_StartTransmission(uint8_t deviceAddress, uint8_t mode) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	0002      	movs	r2, r0
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	701a      	strb	r2, [r3, #0]
 800028c:	1dbb      	adds	r3, r7, #6
 800028e:	1c0a      	adds	r2, r1, #0
 8000290:	701a      	strb	r2, [r3, #0]
    // Wait until I2C bus is not busy
    while (I2C_SR2 & I2C_ISR_BUSY);
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <I2C_StartTransmission+0x6c>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	2380      	movs	r3, #128	; 0x80
 800029a:	021b      	lsls	r3, r3, #8
 800029c:	4013      	ands	r3, r2
 800029e:	d1f9      	bne.n	8000294 <I2C_StartTransmission+0x14>

    // Generate start condition
    I2C_CR1 |= I2C_CR2_START;
 80002a0:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <I2C_StartTransmission+0x70>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <I2C_StartTransmission+0x70>)
 80002a6:	2180      	movs	r1, #128	; 0x80
 80002a8:	0189      	lsls	r1, r1, #6
 80002aa:	430a      	orrs	r2, r1
 80002ac:	601a      	str	r2, [r3, #0]

    // Wait until start condition is generated
    while (!(I2C_SR1 & I2C_CR1_SBC));
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <I2C_StartTransmission+0x74>)
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	025b      	lsls	r3, r3, #9
 80002b8:	4013      	ands	r3, r2
 80002ba:	d0f9      	beq.n	80002b0 <I2C_StartTransmission+0x30>

    // Send device address with mode (read/write)
    I2C_DR = (deviceAddress << 1) | mode;
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	005a      	lsls	r2, r3, #1
 80002c2:	1dbb      	adds	r3, r7, #6
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	431a      	orrs	r2, r3
 80002c8:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <I2C_StartTransmission+0x78>)
 80002ca:	601a      	str	r2, [r3, #0]

    // Wait until address is sent
    while (!(I2C_SR1 & I2C_ISR_ADDR));
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <I2C_StartTransmission+0x74>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2208      	movs	r2, #8
 80002d4:	4013      	ands	r3, r2
 80002d6:	d0fa      	beq.n	80002ce <I2C_StartTransmission+0x4e>

    // Clear ADDR flag
    //volatile uint32_t temp = I2C_SR2;

    // Ensure that the start bit is cleared
    I2C_CR1 &= ~I2C_CR2_START;
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <I2C_StartTransmission+0x70>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <I2C_StartTransmission+0x70>)
 80002de:	4907      	ldr	r1, [pc, #28]	; (80002fc <I2C_StartTransmission+0x7c>)
 80002e0:	400a      	ands	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b002      	add	sp, #8
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40005418 	.word	0x40005418
 80002f0:	40005400 	.word	0x40005400
 80002f4:	40005414 	.word	0x40005414
 80002f8:	40005410 	.word	0x40005410
 80002fc:	ffffdfff 	.word	0xffffdfff

08000300 <I2C_StopTransmission>:

// Function to stop an I2C transmission
void I2C_StopTransmission() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
    // Generate stop condition
    I2C_CR1 |= I2C_CR2_STOP;
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <I2C_StopTransmission+0x28>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <I2C_StopTransmission+0x28>)
 800030a:	2180      	movs	r1, #128	; 0x80
 800030c:	01c9      	lsls	r1, r1, #7
 800030e:	430a      	orrs	r2, r1
 8000310:	601a      	str	r2, [r3, #0]

    // Wait until stop condition is detected
    while (I2C_SR2 & I2C_SR2);
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <I2C_StopTransmission+0x2c>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <I2C_StopTransmission+0x2c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4013      	ands	r3, r2
 800031e:	d1f9      	bne.n	8000314 <I2C_StopTransmission+0x14>
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40005400 	.word	0x40005400
 800032c:	40005418 	.word	0x40005418

08000330 <I2C_WriteByte>:

// Function to write a byte to the I2C bus
void I2C_WriteByte(uint8_t data) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	0002      	movs	r2, r0
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	701a      	strb	r2, [r3, #0]
    // Write data to the I2C data register
    I2C_DR = data;
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <I2C_WriteByte+0x2c>)
 800033e:	1dfa      	adds	r2, r7, #7
 8000340:	7812      	ldrb	r2, [r2, #0]
 8000342:	601a      	str	r2, [r3, #0]

    // Wait until data transfer is complete
    while (!(I2C_SR1 & I2C_ISR_TXE));
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <I2C_WriteByte+0x30>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2201      	movs	r2, #1
 800034c:	4013      	ands	r3, r2
 800034e:	d0fa      	beq.n	8000346 <I2C_WriteByte+0x16>
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b002      	add	sp, #8
 8000358:	bd80      	pop	{r7, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	40005410 	.word	0x40005410
 8000360:	40005414 	.word	0x40005414

08000364 <I2C_ReadByte>:

// Function to read a byte from the I2C bus
uint8_t I2C_ReadByte() {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
    // Enable I2C acknowledge
    I2C_CR1 |= I2C_CR2_NACK;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <I2C_ReadByte+0x40>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <I2C_ReadByte+0x40>)
 8000370:	2180      	movs	r1, #128	; 0x80
 8000372:	0209      	lsls	r1, r1, #8
 8000374:	430a      	orrs	r2, r1
 8000376:	601a      	str	r2, [r3, #0]

    // Wait until data is received
    while (!(I2C_SR1 & I2C_ISR_RXNE));
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <I2C_ReadByte+0x44>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2204      	movs	r2, #4
 8000380:	4013      	ands	r3, r2
 8000382:	d0fa      	beq.n	800037a <I2C_ReadByte+0x16>

    // Read data from the I2C data register
    uint8_t data = I2C_DR;
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <I2C_ReadByte+0x48>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	701a      	strb	r2, [r3, #0]

    // Disable I2C acknowledge
    I2C_CR1 &= ~I2C_CR2_NACK;
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <I2C_ReadByte+0x40>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <I2C_ReadByte+0x40>)
 8000392:	4907      	ldr	r1, [pc, #28]	; (80003b0 <I2C_ReadByte+0x4c>)
 8000394:	400a      	ands	r2, r1
 8000396:	601a      	str	r2, [r3, #0]

    return data;
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	781b      	ldrb	r3, [r3, #0]
}
 800039c:	0018      	movs	r0, r3
 800039e:	46bd      	mov	sp, r7
 80003a0:	b002      	add	sp, #8
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40005400 	.word	0x40005400
 80003a8:	40005414 	.word	0x40005414
 80003ac:	40005410 	.word	0x40005410
 80003b0:	ffff7fff 	.word	0xffff7fff

080003b4 <OLED_Init>:

// Function to initialize the SSD1315 OLED display
void OLED_Init() {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
    // Send control bytes to initialize OLED display
    I2C_StartTransmission(SSD1315_ADDR, 0);
 80003b8:	2100      	movs	r1, #0
 80003ba:	203c      	movs	r0, #60	; 0x3c
 80003bc:	f7ff ff60 	bl	8000280 <I2C_StartTransmission>
    I2C_WriteByte(SSD1315_REG_CONTROL);
 80003c0:	2000      	movs	r0, #0
 80003c2:	f7ff ffb5 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xAE);  // Display off
 80003c6:	20ae      	movs	r0, #174	; 0xae
 80003c8:	f7ff ffb2 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xD5);  // Set display clock divide ratio/oscillator frequency
 80003cc:	20d5      	movs	r0, #213	; 0xd5
 80003ce:	f7ff ffaf 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0x80);  // Recommended ratio for internal oscillator frequency
 80003d2:	2080      	movs	r0, #128	; 0x80
 80003d4:	f7ff ffac 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xA8);  // Set multiplex ratio
 80003d8:	20a8      	movs	r0, #168	; 0xa8
 80003da:	f7ff ffa9 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0x3F);  // 1/64 duty
 80003de:	203f      	movs	r0, #63	; 0x3f
 80003e0:	f7ff ffa6 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xD3);  // Set display offset
 80003e4:	20d3      	movs	r0, #211	; 0xd3
 80003e6:	f7ff ffa3 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0x00);  // No offset
 80003ea:	2000      	movs	r0, #0
 80003ec:	f7ff ffa0 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0x40);  // Set start line
 80003f0:	2040      	movs	r0, #64	; 0x40
 80003f2:	f7ff ff9d 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0x8D);  // Charge pump setting
 80003f6:	208d      	movs	r0, #141	; 0x8d
 80003f8:	f7ff ff9a 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0x14);  // Enable charge pump
 80003fc:	2014      	movs	r0, #20
 80003fe:	f7ff ff97 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0x20);  // Set memory addressing mode
 8000402:	2020      	movs	r0, #32
 8000404:	f7ff ff94 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0x00);  // Horizontal addressing mode
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff ff91 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xA1);  // Set segment re-map (column address 127 is mapped to SEG0)
 800040e:	20a1      	movs	r0, #161	; 0xa1
 8000410:	f7ff ff8e 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xC8);  // Set COM output scan direction (reverse)
 8000414:	20c8      	movs	r0, #200	; 0xc8
 8000416:	f7ff ff8b 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xDA);  // Set COM pins hardware configuration
 800041a:	20da      	movs	r0, #218	; 0xda
 800041c:	f7ff ff88 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0x12);  // Alternative COM pin configuration, disable COM left/right remap
 8000420:	2012      	movs	r0, #18
 8000422:	f7ff ff85 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0x81);  // Set contrast control
 8000426:	2081      	movs	r0, #129	; 0x81
 8000428:	f7ff ff82 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xCF);  // Contrast value
 800042c:	20cf      	movs	r0, #207	; 0xcf
 800042e:	f7ff ff7f 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xD9);  // Set pre-charge period
 8000432:	20d9      	movs	r0, #217	; 0xd9
 8000434:	f7ff ff7c 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xF1);  // Phase 1: 15 DCLK, Phase 2: 1 DCLK
 8000438:	20f1      	movs	r0, #241	; 0xf1
 800043a:	f7ff ff79 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xDB);  // Set VCOMH deselect level
 800043e:	20db      	movs	r0, #219	; 0xdb
 8000440:	f7ff ff76 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0x40);  // 0.77 x Vcc
 8000444:	2040      	movs	r0, #64	; 0x40
 8000446:	f7ff ff73 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xA4);  // Entire display on (resume from RAM content)
 800044a:	20a4      	movs	r0, #164	; 0xa4
 800044c:	f7ff ff70 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xA6);  // Set normal display
 8000450:	20a6      	movs	r0, #166	; 0xa6
 8000452:	f7ff ff6d 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(0xAF);  // Display on
 8000456:	20af      	movs	r0, #175	; 0xaf
 8000458:	f7ff ff6a 	bl	8000330 <I2C_WriteByte>
    I2C_StopTransmission();
 800045c:	f7ff ff50 	bl	8000300 <I2C_StopTransmission>
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <OLED_WriteData>:

// Function to write data to the SSD1315 OLED display
void OLED_WriteData(uint8_t data) {
 8000466:	b580      	push	{r7, lr}
 8000468:	b082      	sub	sp, #8
 800046a:	af00      	add	r7, sp, #0
 800046c:	0002      	movs	r2, r0
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	701a      	strb	r2, [r3, #0]
    // Send data byte to OLED display
    I2C_StartTransmission(SSD1315_ADDR, 0);
 8000472:	2100      	movs	r1, #0
 8000474:	203c      	movs	r0, #60	; 0x3c
 8000476:	f7ff ff03 	bl	8000280 <I2C_StartTransmission>
    I2C_WriteByte(SSD1315_REG_DATA);
 800047a:	2040      	movs	r0, #64	; 0x40
 800047c:	f7ff ff58 	bl	8000330 <I2C_WriteByte>
    I2C_WriteByte(data);
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ff53 	bl	8000330 <I2C_WriteByte>
    I2C_StopTransmission();
 800048a:	f7ff ff39 	bl	8000300 <I2C_StopTransmission>
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}

08000496 <BMP280_ReadPressure>:

// Function to read pressure from BMP280
int32_t BMP280_ReadPressure() {
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
    int32_t pressure = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	607b      	str	r3, [r7, #4]

    // Start I2C transmission to BMP280
    I2C_StartTransmission(BMP280_ADDR, 0);
 80004a0:	2100      	movs	r1, #0
 80004a2:	2076      	movs	r0, #118	; 0x76
 80004a4:	f7ff feec 	bl	8000280 <I2C_StartTransmission>
    I2C_WriteByte(BMP280_REG_PRESS_MSB);
 80004a8:	20f7      	movs	r0, #247	; 0xf7
 80004aa:	f7ff ff41 	bl	8000330 <I2C_WriteByte>
    I2C_StopTransmission();
 80004ae:	f7ff ff27 	bl	8000300 <I2C_StopTransmission>

    // Read pressure data from BMP280
    I2C_StartTransmission(BMP280_ADDR, 1);
 80004b2:	2101      	movs	r1, #1
 80004b4:	2076      	movs	r0, #118	; 0x76
 80004b6:	f7ff fee3 	bl	8000280 <I2C_StartTransmission>
    pressure = (int32_t)(I2C_ReadByte() << 12);
 80004ba:	f7ff ff53 	bl	8000364 <I2C_ReadByte>
 80004be:	0003      	movs	r3, r0
 80004c0:	031b      	lsls	r3, r3, #12
 80004c2:	607b      	str	r3, [r7, #4]
    pressure |= (int32_t)(I2C_ReadByte() << 4);
 80004c4:	f7ff ff4e 	bl	8000364 <I2C_ReadByte>
 80004c8:	0003      	movs	r3, r0
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	4313      	orrs	r3, r2
 80004d0:	607b      	str	r3, [r7, #4]
    pressure |= (int32_t)(I2C_ReadByte() >> 4);
 80004d2:	f7ff ff47 	bl	8000364 <I2C_ReadByte>
 80004d6:	0003      	movs	r3, r0
 80004d8:	091b      	lsrs	r3, r3, #4
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	001a      	movs	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	607b      	str	r3, [r7, #4]
    I2C_StopTransmission();
 80004e4:	f7ff ff0c 	bl	8000300 <I2C_StopTransmission>

    return pressure;
 80004e8:	687b      	ldr	r3, [r7, #4]
}
 80004ea:	0018      	movs	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <LIS3DH_ReadAccelerometer>:

// Function to read accelerometer data from LIS3DH
void LIS3DH_ReadAccelerometer(int16_t* x, int16_t* y, int16_t* z) {
 80004f2:	b590      	push	{r4, r7, lr}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
    // Start I2C transmission to LIS3DH
    I2C_StartTransmission(LIS3DH_ADDR, 0);
 80004fe:	2100      	movs	r1, #0
 8000500:	2018      	movs	r0, #24
 8000502:	f7ff febd 	bl	8000280 <I2C_StartTransmission>
    I2C_WriteByte(LIS3DH_REG_OUT_X_L | 0x80);
 8000506:	20a8      	movs	r0, #168	; 0xa8
 8000508:	f7ff ff12 	bl	8000330 <I2C_WriteByte>
    I2C_StopTransmission();
 800050c:	f7ff fef8 	bl	8000300 <I2C_StopTransmission>

    // Read accelerometer data from LIS3DH
    I2C_StartTransmission(LIS3DH_ADDR, 1);
 8000510:	2101      	movs	r1, #1
 8000512:	2018      	movs	r0, #24
 8000514:	f7ff feb4 	bl	8000280 <I2C_StartTransmission>
    *x = (int16_t)((I2C_ReadByte() | (I2C_ReadByte() << 8)) >> 4);
 8000518:	f7ff ff24 	bl	8000364 <I2C_ReadByte>
 800051c:	0003      	movs	r3, r0
 800051e:	001c      	movs	r4, r3
 8000520:	f7ff ff20 	bl	8000364 <I2C_ReadByte>
 8000524:	0003      	movs	r3, r0
 8000526:	021b      	lsls	r3, r3, #8
 8000528:	4323      	orrs	r3, r4
 800052a:	111b      	asrs	r3, r3, #4
 800052c:	b21a      	sxth	r2, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((I2C_ReadByte() | (I2C_ReadByte() << 8)) >> 4);
 8000532:	f7ff ff17 	bl	8000364 <I2C_ReadByte>
 8000536:	0003      	movs	r3, r0
 8000538:	001c      	movs	r4, r3
 800053a:	f7ff ff13 	bl	8000364 <I2C_ReadByte>
 800053e:	0003      	movs	r3, r0
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	4323      	orrs	r3, r4
 8000544:	111b      	asrs	r3, r3, #4
 8000546:	b21a      	sxth	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((I2C_ReadByte() | (I2C_ReadByte() << 8)) >> 4);
 800054c:	f7ff ff0a 	bl	8000364 <I2C_ReadByte>
 8000550:	0003      	movs	r3, r0
 8000552:	001c      	movs	r4, r3
 8000554:	f7ff ff06 	bl	8000364 <I2C_ReadByte>
 8000558:	0003      	movs	r3, r0
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	4323      	orrs	r3, r4
 800055e:	111b      	asrs	r3, r3, #4
 8000560:	b21a      	sxth	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	801a      	strh	r2, [r3, #0]
    I2C_StopTransmission();
 8000566:	f7ff fecb 	bl	8000300 <I2C_StopTransmission>
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b005      	add	sp, #20
 8000570:	bd90      	pop	{r4, r7, pc}
	...

08000574 <OLED_DisplayChar>:
    // Add more characters here...
    // Replace the remaining characters with the corresponding font data
};

// Function to display a character on the SSD1315 OLED display
void OLED_DisplayChar(char ch) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e00e      	b.n	80005a4 <OLED_DisplayChar+0x30>
        OLED_WriteData(font[ch - 32][i]);
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	3b20      	subs	r3, #32
 800058c:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <OLED_DisplayChar+0x40>)
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	18d2      	adds	r2, r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	18d3      	adds	r3, r2, r3
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	0018      	movs	r0, r3
 800059a:	f7ff ff64 	bl	8000466 <OLED_WriteData>
    for (int i = 0; i < 8; i++) {
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b07      	cmp	r3, #7
 80005a8:	dded      	ble.n	8000586 <OLED_DisplayChar+0x12>
    }
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b004      	add	sp, #16
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08001160 	.word	0x08001160

080005b8 <OLED_DisplayString>:

// Function to display a string on the SSD1315 OLED display
void OLED_DisplayString(const char* str) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    int i = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
    while (str[i] != '\0') {
 80005c4:	e009      	b.n	80005da <OLED_DisplayString+0x22>
        OLED_DisplayChar(str[i]);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	18d3      	adds	r3, r2, r3
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff ffd0 	bl	8000574 <OLED_DisplayChar>
        i++;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	60fb      	str	r3, [r7, #12]
    while (str[i] != '\0') {
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	18d3      	adds	r3, r2, r3
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1ef      	bne.n	80005c6 <OLED_DisplayString+0xe>
    }
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b004      	add	sp, #16
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <OLED_DisplayInt>:

// Function to display an integer on the SSD1315 OLED display
void OLED_DisplayInt(int num) {
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b087      	sub	sp, #28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    char buffer[10];
    sprintf(buffer, "%d", num);
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	4907      	ldr	r1, [pc, #28]	; (8000618 <OLED_DisplayInt+0x28>)
 80005fc:	240c      	movs	r4, #12
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	0018      	movs	r0, r3
 8000602:	f000 f917 	bl	8000834 <siprintf>
    OLED_DisplayString(buffer);
 8000606:	193b      	adds	r3, r7, r4
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff ffd5 	bl	80005b8 <OLED_DisplayString>
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b007      	add	sp, #28
 8000614:	bd90      	pop	{r4, r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	08001120 	.word	0x08001120

0800061c <main>:

int main() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
    // Initialize I2C
    I2C_Init();
 8000622:	f7ff fe05 	bl	8000230 <I2C_Init>

    // Initialize OLED display
    OLED_Init();
 8000626:	f7ff fec5 	bl	80003b4 <OLED_Init>

    while (1) {
        // Read pressure from BMP280
        int32_t pressure = BMP280_ReadPressure();
 800062a:	f7ff ff34 	bl	8000496 <BMP280_ReadPressure>
 800062e:	0003      	movs	r3, r0
 8000630:	60bb      	str	r3, [r7, #8]

        // Read accelerometer data from LIS3DH
        int16_t accelX, accelY, accelZ;
        LIS3DH_ReadAccelerometer(&accelX, &accelY, &accelZ);
 8000632:	1cba      	adds	r2, r7, #2
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	1dbb      	adds	r3, r7, #6
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff ff5a 	bl	80004f2 <LIS3DH_ReadAccelerometer>

        // Display data on OLED display
        I2C_StartTransmission(SSD1315_ADDR, 0);
 800063e:	2100      	movs	r1, #0
 8000640:	203c      	movs	r0, #60	; 0x3c
 8000642:	f7ff fe1d 	bl	8000280 <I2C_StartTransmission>
        I2C_WriteByte(SSD1315_REG_CONTROL);
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff fe72 	bl	8000330 <I2C_WriteByte>
        I2C_WriteByte(0xB0);  // Set page addressing mode
 800064c:	20b0      	movs	r0, #176	; 0xb0
 800064e:	f7ff fe6f 	bl	8000330 <I2C_WriteByte>
        I2C_WriteByte(0x00);  // Set lower column address
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff fe6c 	bl	8000330 <I2C_WriteByte>
        I2C_WriteByte(0x10);  // Set higher column address
 8000658:	2010      	movs	r0, #16
 800065a:	f7ff fe69 	bl	8000330 <I2C_WriteByte>

        // Display pressure
        OLED_DisplayString("Pressure: ");
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <main+0xe8>)
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff ffa9 	bl	80005b8 <OLED_DisplayString>
        OLED_DisplayInt(pressure);
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	0018      	movs	r0, r3
 800066a:	f7ff ffc1 	bl	80005f0 <OLED_DisplayInt>
        OLED_DisplayString(" Pa");
 800066e:	4b26      	ldr	r3, [pc, #152]	; (8000708 <main+0xec>)
 8000670:	0018      	movs	r0, r3
 8000672:	f7ff ffa1 	bl	80005b8 <OLED_DisplayString>

        // Move to next line
        I2C_StartTransmission(SSD1315_ADDR, 0);
 8000676:	2100      	movs	r1, #0
 8000678:	203c      	movs	r0, #60	; 0x3c
 800067a:	f7ff fe01 	bl	8000280 <I2C_StartTransmission>
        I2C_WriteByte(SSD1315_REG_CONTROL);
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff fe56 	bl	8000330 <I2C_WriteByte>
        I2C_WriteByte(0xB0 | 0x01);  // Set page addressing mode
 8000684:	20b1      	movs	r0, #177	; 0xb1
 8000686:	f7ff fe53 	bl	8000330 <I2C_WriteByte>
        I2C_WriteByte(0x00);         // Set lower column address
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff fe50 	bl	8000330 <I2C_WriteByte>
        I2C_WriteByte(0x10);         // Set higher column address
 8000690:	2010      	movs	r0, #16
 8000692:	f7ff fe4d 	bl	8000330 <I2C_WriteByte>

        // Display accelerometer data
        OLED_DisplayString("AccelX: ");
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <main+0xf0>)
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff ff8d 	bl	80005b8 <OLED_DisplayString>
        OLED_DisplayInt(accelX);
 800069e:	1dbb      	adds	r3, r7, #6
 80006a0:	2200      	movs	r2, #0
 80006a2:	5e9b      	ldrsh	r3, [r3, r2]
 80006a4:	0018      	movs	r0, r3
 80006a6:	f7ff ffa3 	bl	80005f0 <OLED_DisplayInt>
        OLED_DisplayString("    ");
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <main+0xf4>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f7ff ff83 	bl	80005b8 <OLED_DisplayString>

        OLED_DisplayString("AccelY: ");
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <main+0xf8>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff ff7f 	bl	80005b8 <OLED_DisplayString>
        OLED_DisplayInt(accelY);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	5e9b      	ldrsh	r3, [r3, r2]
 80006c0:	0018      	movs	r0, r3
 80006c2:	f7ff ff95 	bl	80005f0 <OLED_DisplayInt>
        OLED_DisplayString("    ");
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <main+0xf4>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff ff75 	bl	80005b8 <OLED_DisplayString>

        OLED_DisplayString("AccelZ: ");
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <main+0xfc>)
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff ff71 	bl	80005b8 <OLED_DisplayString>
        OLED_DisplayInt(accelZ);
 80006d6:	1cbb      	adds	r3, r7, #2
 80006d8:	2200      	movs	r2, #0
 80006da:	5e9b      	ldrsh	r3, [r3, r2]
 80006dc:	0018      	movs	r0, r3
 80006de:	f7ff ff87 	bl	80005f0 <OLED_DisplayInt>
        OLED_DisplayString("    ");
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <main+0xf4>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f7ff ff67 	bl	80005b8 <OLED_DisplayString>

        I2C_StopTransmission();
 80006ea:	f7ff fe09 	bl	8000300 <I2C_StopTransmission>

        // Delay before next reading
        for (int i = 0; i < 1000000; i++);
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e002      	b.n	80006fa <main+0xde>
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4a07      	ldr	r2, [pc, #28]	; (800071c <main+0x100>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	ddf8      	ble.n	80006f4 <main+0xd8>
    while (1) {
 8000702:	e792      	b.n	800062a <main+0xe>
 8000704:	08001124 	.word	0x08001124
 8000708:	08001130 	.word	0x08001130
 800070c:	08001134 	.word	0x08001134
 8000710:	08001140 	.word	0x08001140
 8000714:	08001148 	.word	0x08001148
 8000718:	08001154 	.word	0x08001154
 800071c:	000f423f 	.word	0x000f423f

08000720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000728:	4a14      	ldr	r2, [pc, #80]	; (800077c <_sbrk+0x5c>)
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <_sbrk+0x60>)
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <_sbrk+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <_sbrk+0x64>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <_sbrk+0x68>)
 8000740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	18d3      	adds	r3, r2, r3
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	429a      	cmp	r2, r3
 800074e:	d207      	bcs.n	8000760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000750:	f000 f846 	bl	80007e0 <__errno>
 8000754:	0003      	movs	r3, r0
 8000756:	220c      	movs	r2, #12
 8000758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075a:	2301      	movs	r3, #1
 800075c:	425b      	negs	r3, r3
 800075e:	e009      	b.n	8000774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	18d2      	adds	r2, r2, r3
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <_sbrk+0x64>)
 8000770:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000772:	68fb      	ldr	r3, [r7, #12]
}
 8000774:	0018      	movs	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	b006      	add	sp, #24
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20009000 	.word	0x20009000
 8000780:	00000400 	.word	0x00000400
 8000784:	20000080 	.word	0x20000080
 8000788:	20000098 	.word	0x20000098

0800078c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000790:	e000      	b.n	8000794 <Reset_Handler+0x8>
 8000792:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000796:	490d      	ldr	r1, [pc, #52]	; (80007cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <LoopForever+0xe>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800079c:	e002      	b.n	80007a4 <LoopCopyDataInit>

0800079e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a2:	3304      	adds	r3, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a8:	d3f9      	bcc.n	800079e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ac:	4c0a      	ldr	r4, [pc, #40]	; (80007d8 <LoopForever+0x16>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b0:	e001      	b.n	80007b6 <LoopFillZerobss>

080007b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b4:	3204      	adds	r2, #4

080007b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b8:	d3fb      	bcc.n	80007b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ba:	f000 f817 	bl	80007ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007be:	f7ff ff2d 	bl	800061c <main>

080007c2 <LoopForever>:

LoopForever:
  b LoopForever
 80007c2:	e7fe      	b.n	80007c2 <LoopForever>
  ldr   r0, =_estack
 80007c4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007d0:	080011b4 	.word	0x080011b4
  ldr r2, =_sbss
 80007d4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007d8:	20000094 	.word	0x20000094

080007dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC_IRQHandler>
	...

080007e0 <__errno>:
 80007e0:	4b01      	ldr	r3, [pc, #4]	; (80007e8 <__errno+0x8>)
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	4770      	bx	lr
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000000 	.word	0x20000000

080007ec <__libc_init_array>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	2600      	movs	r6, #0
 80007f0:	4d0c      	ldr	r5, [pc, #48]	; (8000824 <__libc_init_array+0x38>)
 80007f2:	4c0d      	ldr	r4, [pc, #52]	; (8000828 <__libc_init_array+0x3c>)
 80007f4:	1b64      	subs	r4, r4, r5
 80007f6:	10a4      	asrs	r4, r4, #2
 80007f8:	42a6      	cmp	r6, r4
 80007fa:	d109      	bne.n	8000810 <__libc_init_array+0x24>
 80007fc:	2600      	movs	r6, #0
 80007fe:	f000 fc83 	bl	8001108 <_init>
 8000802:	4d0a      	ldr	r5, [pc, #40]	; (800082c <__libc_init_array+0x40>)
 8000804:	4c0a      	ldr	r4, [pc, #40]	; (8000830 <__libc_init_array+0x44>)
 8000806:	1b64      	subs	r4, r4, r5
 8000808:	10a4      	asrs	r4, r4, #2
 800080a:	42a6      	cmp	r6, r4
 800080c:	d105      	bne.n	800081a <__libc_init_array+0x2e>
 800080e:	bd70      	pop	{r4, r5, r6, pc}
 8000810:	00b3      	lsls	r3, r6, #2
 8000812:	58eb      	ldr	r3, [r5, r3]
 8000814:	4798      	blx	r3
 8000816:	3601      	adds	r6, #1
 8000818:	e7ee      	b.n	80007f8 <__libc_init_array+0xc>
 800081a:	00b3      	lsls	r3, r6, #2
 800081c:	58eb      	ldr	r3, [r5, r3]
 800081e:	4798      	blx	r3
 8000820:	3601      	adds	r6, #1
 8000822:	e7f2      	b.n	800080a <__libc_init_array+0x1e>
 8000824:	080011ac 	.word	0x080011ac
 8000828:	080011ac 	.word	0x080011ac
 800082c:	080011ac 	.word	0x080011ac
 8000830:	080011b0 	.word	0x080011b0

08000834 <siprintf>:
 8000834:	b40e      	push	{r1, r2, r3}
 8000836:	b500      	push	{lr}
 8000838:	490b      	ldr	r1, [pc, #44]	; (8000868 <siprintf+0x34>)
 800083a:	b09c      	sub	sp, #112	; 0x70
 800083c:	ab1d      	add	r3, sp, #116	; 0x74
 800083e:	9002      	str	r0, [sp, #8]
 8000840:	9006      	str	r0, [sp, #24]
 8000842:	9107      	str	r1, [sp, #28]
 8000844:	9104      	str	r1, [sp, #16]
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <siprintf+0x38>)
 8000848:	4909      	ldr	r1, [pc, #36]	; (8000870 <siprintf+0x3c>)
 800084a:	cb04      	ldmia	r3!, {r2}
 800084c:	9105      	str	r1, [sp, #20]
 800084e:	6800      	ldr	r0, [r0, #0]
 8000850:	a902      	add	r1, sp, #8
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	f000 f870 	bl	8000938 <_svfiprintf_r>
 8000858:	2300      	movs	r3, #0
 800085a:	9a02      	ldr	r2, [sp, #8]
 800085c:	7013      	strb	r3, [r2, #0]
 800085e:	b01c      	add	sp, #112	; 0x70
 8000860:	bc08      	pop	{r3}
 8000862:	b003      	add	sp, #12
 8000864:	4718      	bx	r3
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	7fffffff 	.word	0x7fffffff
 800086c:	20000000 	.word	0x20000000
 8000870:	ffff0208 	.word	0xffff0208

08000874 <__ssputs_r>:
 8000874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000876:	688e      	ldr	r6, [r1, #8]
 8000878:	b085      	sub	sp, #20
 800087a:	0007      	movs	r7, r0
 800087c:	000c      	movs	r4, r1
 800087e:	9203      	str	r2, [sp, #12]
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	429e      	cmp	r6, r3
 8000884:	d83c      	bhi.n	8000900 <__ssputs_r+0x8c>
 8000886:	2390      	movs	r3, #144	; 0x90
 8000888:	898a      	ldrh	r2, [r1, #12]
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	421a      	tst	r2, r3
 800088e:	d034      	beq.n	80008fa <__ssputs_r+0x86>
 8000890:	6909      	ldr	r1, [r1, #16]
 8000892:	6823      	ldr	r3, [r4, #0]
 8000894:	6960      	ldr	r0, [r4, #20]
 8000896:	1a5b      	subs	r3, r3, r1
 8000898:	9302      	str	r3, [sp, #8]
 800089a:	2303      	movs	r3, #3
 800089c:	4343      	muls	r3, r0
 800089e:	0fdd      	lsrs	r5, r3, #31
 80008a0:	18ed      	adds	r5, r5, r3
 80008a2:	9b01      	ldr	r3, [sp, #4]
 80008a4:	9802      	ldr	r0, [sp, #8]
 80008a6:	3301      	adds	r3, #1
 80008a8:	181b      	adds	r3, r3, r0
 80008aa:	106d      	asrs	r5, r5, #1
 80008ac:	42ab      	cmp	r3, r5
 80008ae:	d900      	bls.n	80008b2 <__ssputs_r+0x3e>
 80008b0:	001d      	movs	r5, r3
 80008b2:	0553      	lsls	r3, r2, #21
 80008b4:	d532      	bpl.n	800091c <__ssputs_r+0xa8>
 80008b6:	0029      	movs	r1, r5
 80008b8:	0038      	movs	r0, r7
 80008ba:	f000 fb53 	bl	8000f64 <_malloc_r>
 80008be:	1e06      	subs	r6, r0, #0
 80008c0:	d109      	bne.n	80008d6 <__ssputs_r+0x62>
 80008c2:	230c      	movs	r3, #12
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	2001      	movs	r0, #1
 80008ca:	89a2      	ldrh	r2, [r4, #12]
 80008cc:	4240      	negs	r0, r0
 80008ce:	4313      	orrs	r3, r2
 80008d0:	81a3      	strh	r3, [r4, #12]
 80008d2:	b005      	add	sp, #20
 80008d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d6:	9a02      	ldr	r2, [sp, #8]
 80008d8:	6921      	ldr	r1, [r4, #16]
 80008da:	f000 faba 	bl	8000e52 <memcpy>
 80008de:	89a3      	ldrh	r3, [r4, #12]
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <__ssputs_r+0xc0>)
 80008e2:	401a      	ands	r2, r3
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	4313      	orrs	r3, r2
 80008e8:	81a3      	strh	r3, [r4, #12]
 80008ea:	9b02      	ldr	r3, [sp, #8]
 80008ec:	6126      	str	r6, [r4, #16]
 80008ee:	18f6      	adds	r6, r6, r3
 80008f0:	6026      	str	r6, [r4, #0]
 80008f2:	6165      	str	r5, [r4, #20]
 80008f4:	9e01      	ldr	r6, [sp, #4]
 80008f6:	1aed      	subs	r5, r5, r3
 80008f8:	60a5      	str	r5, [r4, #8]
 80008fa:	9b01      	ldr	r3, [sp, #4]
 80008fc:	429e      	cmp	r6, r3
 80008fe:	d900      	bls.n	8000902 <__ssputs_r+0x8e>
 8000900:	9e01      	ldr	r6, [sp, #4]
 8000902:	0032      	movs	r2, r6
 8000904:	9903      	ldr	r1, [sp, #12]
 8000906:	6820      	ldr	r0, [r4, #0]
 8000908:	f000 faac 	bl	8000e64 <memmove>
 800090c:	68a3      	ldr	r3, [r4, #8]
 800090e:	2000      	movs	r0, #0
 8000910:	1b9b      	subs	r3, r3, r6
 8000912:	60a3      	str	r3, [r4, #8]
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	199e      	adds	r6, r3, r6
 8000918:	6026      	str	r6, [r4, #0]
 800091a:	e7da      	b.n	80008d2 <__ssputs_r+0x5e>
 800091c:	002a      	movs	r2, r5
 800091e:	0038      	movs	r0, r7
 8000920:	f000 fb96 	bl	8001050 <_realloc_r>
 8000924:	1e06      	subs	r6, r0, #0
 8000926:	d1e0      	bne.n	80008ea <__ssputs_r+0x76>
 8000928:	0038      	movs	r0, r7
 800092a:	6921      	ldr	r1, [r4, #16]
 800092c:	f000 faae 	bl	8000e8c <_free_r>
 8000930:	e7c7      	b.n	80008c2 <__ssputs_r+0x4e>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	fffffb7f 	.word	0xfffffb7f

08000938 <_svfiprintf_r>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	b0a1      	sub	sp, #132	; 0x84
 800093c:	9003      	str	r0, [sp, #12]
 800093e:	001d      	movs	r5, r3
 8000940:	898b      	ldrh	r3, [r1, #12]
 8000942:	000f      	movs	r7, r1
 8000944:	0016      	movs	r6, r2
 8000946:	061b      	lsls	r3, r3, #24
 8000948:	d511      	bpl.n	800096e <_svfiprintf_r+0x36>
 800094a:	690b      	ldr	r3, [r1, #16]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10e      	bne.n	800096e <_svfiprintf_r+0x36>
 8000950:	2140      	movs	r1, #64	; 0x40
 8000952:	f000 fb07 	bl	8000f64 <_malloc_r>
 8000956:	6038      	str	r0, [r7, #0]
 8000958:	6138      	str	r0, [r7, #16]
 800095a:	2800      	cmp	r0, #0
 800095c:	d105      	bne.n	800096a <_svfiprintf_r+0x32>
 800095e:	230c      	movs	r3, #12
 8000960:	9a03      	ldr	r2, [sp, #12]
 8000962:	3801      	subs	r0, #1
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	b021      	add	sp, #132	; 0x84
 8000968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	2300      	movs	r3, #0
 8000970:	ac08      	add	r4, sp, #32
 8000972:	6163      	str	r3, [r4, #20]
 8000974:	3320      	adds	r3, #32
 8000976:	7663      	strb	r3, [r4, #25]
 8000978:	3310      	adds	r3, #16
 800097a:	76a3      	strb	r3, [r4, #26]
 800097c:	9507      	str	r5, [sp, #28]
 800097e:	0035      	movs	r5, r6
 8000980:	782b      	ldrb	r3, [r5, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <_svfiprintf_r+0x52>
 8000986:	2b25      	cmp	r3, #37	; 0x25
 8000988:	d147      	bne.n	8000a1a <_svfiprintf_r+0xe2>
 800098a:	1bab      	subs	r3, r5, r6
 800098c:	9305      	str	r3, [sp, #20]
 800098e:	42b5      	cmp	r5, r6
 8000990:	d00c      	beq.n	80009ac <_svfiprintf_r+0x74>
 8000992:	0032      	movs	r2, r6
 8000994:	0039      	movs	r1, r7
 8000996:	9803      	ldr	r0, [sp, #12]
 8000998:	f7ff ff6c 	bl	8000874 <__ssputs_r>
 800099c:	1c43      	adds	r3, r0, #1
 800099e:	d100      	bne.n	80009a2 <_svfiprintf_r+0x6a>
 80009a0:	e0ae      	b.n	8000b00 <_svfiprintf_r+0x1c8>
 80009a2:	6962      	ldr	r2, [r4, #20]
 80009a4:	9b05      	ldr	r3, [sp, #20]
 80009a6:	4694      	mov	ip, r2
 80009a8:	4463      	add	r3, ip
 80009aa:	6163      	str	r3, [r4, #20]
 80009ac:	782b      	ldrb	r3, [r5, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d100      	bne.n	80009b4 <_svfiprintf_r+0x7c>
 80009b2:	e0a5      	b.n	8000b00 <_svfiprintf_r+0x1c8>
 80009b4:	2201      	movs	r2, #1
 80009b6:	2300      	movs	r3, #0
 80009b8:	4252      	negs	r2, r2
 80009ba:	6062      	str	r2, [r4, #4]
 80009bc:	a904      	add	r1, sp, #16
 80009be:	3254      	adds	r2, #84	; 0x54
 80009c0:	1852      	adds	r2, r2, r1
 80009c2:	1c6e      	adds	r6, r5, #1
 80009c4:	6023      	str	r3, [r4, #0]
 80009c6:	60e3      	str	r3, [r4, #12]
 80009c8:	60a3      	str	r3, [r4, #8]
 80009ca:	7013      	strb	r3, [r2, #0]
 80009cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80009ce:	2205      	movs	r2, #5
 80009d0:	7831      	ldrb	r1, [r6, #0]
 80009d2:	4854      	ldr	r0, [pc, #336]	; (8000b24 <_svfiprintf_r+0x1ec>)
 80009d4:	f000 fa32 	bl	8000e3c <memchr>
 80009d8:	1c75      	adds	r5, r6, #1
 80009da:	2800      	cmp	r0, #0
 80009dc:	d11f      	bne.n	8000a1e <_svfiprintf_r+0xe6>
 80009de:	6822      	ldr	r2, [r4, #0]
 80009e0:	06d3      	lsls	r3, r2, #27
 80009e2:	d504      	bpl.n	80009ee <_svfiprintf_r+0xb6>
 80009e4:	2353      	movs	r3, #83	; 0x53
 80009e6:	a904      	add	r1, sp, #16
 80009e8:	185b      	adds	r3, r3, r1
 80009ea:	2120      	movs	r1, #32
 80009ec:	7019      	strb	r1, [r3, #0]
 80009ee:	0713      	lsls	r3, r2, #28
 80009f0:	d504      	bpl.n	80009fc <_svfiprintf_r+0xc4>
 80009f2:	2353      	movs	r3, #83	; 0x53
 80009f4:	a904      	add	r1, sp, #16
 80009f6:	185b      	adds	r3, r3, r1
 80009f8:	212b      	movs	r1, #43	; 0x2b
 80009fa:	7019      	strb	r1, [r3, #0]
 80009fc:	7833      	ldrb	r3, [r6, #0]
 80009fe:	2b2a      	cmp	r3, #42	; 0x2a
 8000a00:	d016      	beq.n	8000a30 <_svfiprintf_r+0xf8>
 8000a02:	0035      	movs	r5, r6
 8000a04:	2100      	movs	r1, #0
 8000a06:	200a      	movs	r0, #10
 8000a08:	68e3      	ldr	r3, [r4, #12]
 8000a0a:	782a      	ldrb	r2, [r5, #0]
 8000a0c:	1c6e      	adds	r6, r5, #1
 8000a0e:	3a30      	subs	r2, #48	; 0x30
 8000a10:	2a09      	cmp	r2, #9
 8000a12:	d94e      	bls.n	8000ab2 <_svfiprintf_r+0x17a>
 8000a14:	2900      	cmp	r1, #0
 8000a16:	d111      	bne.n	8000a3c <_svfiprintf_r+0x104>
 8000a18:	e017      	b.n	8000a4a <_svfiprintf_r+0x112>
 8000a1a:	3501      	adds	r5, #1
 8000a1c:	e7b0      	b.n	8000980 <_svfiprintf_r+0x48>
 8000a1e:	4b41      	ldr	r3, [pc, #260]	; (8000b24 <_svfiprintf_r+0x1ec>)
 8000a20:	6822      	ldr	r2, [r4, #0]
 8000a22:	1ac0      	subs	r0, r0, r3
 8000a24:	2301      	movs	r3, #1
 8000a26:	4083      	lsls	r3, r0
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	002e      	movs	r6, r5
 8000a2c:	6023      	str	r3, [r4, #0]
 8000a2e:	e7ce      	b.n	80009ce <_svfiprintf_r+0x96>
 8000a30:	9b07      	ldr	r3, [sp, #28]
 8000a32:	1d19      	adds	r1, r3, #4
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	9107      	str	r1, [sp, #28]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db01      	blt.n	8000a40 <_svfiprintf_r+0x108>
 8000a3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a3e:	e004      	b.n	8000a4a <_svfiprintf_r+0x112>
 8000a40:	425b      	negs	r3, r3
 8000a42:	60e3      	str	r3, [r4, #12]
 8000a44:	2302      	movs	r3, #2
 8000a46:	4313      	orrs	r3, r2
 8000a48:	6023      	str	r3, [r4, #0]
 8000a4a:	782b      	ldrb	r3, [r5, #0]
 8000a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8000a4e:	d10a      	bne.n	8000a66 <_svfiprintf_r+0x12e>
 8000a50:	786b      	ldrb	r3, [r5, #1]
 8000a52:	2b2a      	cmp	r3, #42	; 0x2a
 8000a54:	d135      	bne.n	8000ac2 <_svfiprintf_r+0x18a>
 8000a56:	9b07      	ldr	r3, [sp, #28]
 8000a58:	3502      	adds	r5, #2
 8000a5a:	1d1a      	adds	r2, r3, #4
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	9207      	str	r2, [sp, #28]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db2b      	blt.n	8000abc <_svfiprintf_r+0x184>
 8000a64:	9309      	str	r3, [sp, #36]	; 0x24
 8000a66:	4e30      	ldr	r6, [pc, #192]	; (8000b28 <_svfiprintf_r+0x1f0>)
 8000a68:	2203      	movs	r2, #3
 8000a6a:	0030      	movs	r0, r6
 8000a6c:	7829      	ldrb	r1, [r5, #0]
 8000a6e:	f000 f9e5 	bl	8000e3c <memchr>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d006      	beq.n	8000a84 <_svfiprintf_r+0x14c>
 8000a76:	2340      	movs	r3, #64	; 0x40
 8000a78:	1b80      	subs	r0, r0, r6
 8000a7a:	4083      	lsls	r3, r0
 8000a7c:	6822      	ldr	r2, [r4, #0]
 8000a7e:	3501      	adds	r5, #1
 8000a80:	4313      	orrs	r3, r2
 8000a82:	6023      	str	r3, [r4, #0]
 8000a84:	7829      	ldrb	r1, [r5, #0]
 8000a86:	2206      	movs	r2, #6
 8000a88:	4828      	ldr	r0, [pc, #160]	; (8000b2c <_svfiprintf_r+0x1f4>)
 8000a8a:	1c6e      	adds	r6, r5, #1
 8000a8c:	7621      	strb	r1, [r4, #24]
 8000a8e:	f000 f9d5 	bl	8000e3c <memchr>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	d03c      	beq.n	8000b10 <_svfiprintf_r+0x1d8>
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <_svfiprintf_r+0x1f8>)
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d125      	bne.n	8000ae8 <_svfiprintf_r+0x1b0>
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	9b07      	ldr	r3, [sp, #28]
 8000aa0:	3307      	adds	r3, #7
 8000aa2:	4393      	bics	r3, r2
 8000aa4:	3308      	adds	r3, #8
 8000aa6:	9307      	str	r3, [sp, #28]
 8000aa8:	6963      	ldr	r3, [r4, #20]
 8000aaa:	9a04      	ldr	r2, [sp, #16]
 8000aac:	189b      	adds	r3, r3, r2
 8000aae:	6163      	str	r3, [r4, #20]
 8000ab0:	e765      	b.n	800097e <_svfiprintf_r+0x46>
 8000ab2:	4343      	muls	r3, r0
 8000ab4:	0035      	movs	r5, r6
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	189b      	adds	r3, r3, r2
 8000aba:	e7a6      	b.n	8000a0a <_svfiprintf_r+0xd2>
 8000abc:	2301      	movs	r3, #1
 8000abe:	425b      	negs	r3, r3
 8000ac0:	e7d0      	b.n	8000a64 <_svfiprintf_r+0x12c>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	3501      	adds	r5, #1
 8000aca:	6063      	str	r3, [r4, #4]
 8000acc:	7829      	ldrb	r1, [r5, #0]
 8000ace:	1c6e      	adds	r6, r5, #1
 8000ad0:	3930      	subs	r1, #48	; 0x30
 8000ad2:	2909      	cmp	r1, #9
 8000ad4:	d903      	bls.n	8000ade <_svfiprintf_r+0x1a6>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0c5      	beq.n	8000a66 <_svfiprintf_r+0x12e>
 8000ada:	9209      	str	r2, [sp, #36]	; 0x24
 8000adc:	e7c3      	b.n	8000a66 <_svfiprintf_r+0x12e>
 8000ade:	4342      	muls	r2, r0
 8000ae0:	0035      	movs	r5, r6
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	1852      	adds	r2, r2, r1
 8000ae6:	e7f1      	b.n	8000acc <_svfiprintf_r+0x194>
 8000ae8:	ab07      	add	r3, sp, #28
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	003a      	movs	r2, r7
 8000aee:	0021      	movs	r1, r4
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_svfiprintf_r+0x1fc>)
 8000af2:	9803      	ldr	r0, [sp, #12]
 8000af4:	e000      	b.n	8000af8 <_svfiprintf_r+0x1c0>
 8000af6:	bf00      	nop
 8000af8:	9004      	str	r0, [sp, #16]
 8000afa:	9b04      	ldr	r3, [sp, #16]
 8000afc:	3301      	adds	r3, #1
 8000afe:	d1d3      	bne.n	8000aa8 <_svfiprintf_r+0x170>
 8000b00:	89bb      	ldrh	r3, [r7, #12]
 8000b02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8000b04:	065b      	lsls	r3, r3, #25
 8000b06:	d400      	bmi.n	8000b0a <_svfiprintf_r+0x1d2>
 8000b08:	e72d      	b.n	8000966 <_svfiprintf_r+0x2e>
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4240      	negs	r0, r0
 8000b0e:	e72a      	b.n	8000966 <_svfiprintf_r+0x2e>
 8000b10:	ab07      	add	r3, sp, #28
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	003a      	movs	r2, r7
 8000b16:	0021      	movs	r1, r4
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <_svfiprintf_r+0x1fc>)
 8000b1a:	9803      	ldr	r0, [sp, #12]
 8000b1c:	f000 f87c 	bl	8000c18 <_printf_i>
 8000b20:	e7ea      	b.n	8000af8 <_svfiprintf_r+0x1c0>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	08001178 	.word	0x08001178
 8000b28:	0800117e 	.word	0x0800117e
 8000b2c:	08001182 	.word	0x08001182
 8000b30:	00000000 	.word	0x00000000
 8000b34:	08000875 	.word	0x08000875

08000b38 <_printf_common>:
 8000b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b3a:	0015      	movs	r5, r2
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	688a      	ldr	r2, [r1, #8]
 8000b40:	690b      	ldr	r3, [r1, #16]
 8000b42:	000c      	movs	r4, r1
 8000b44:	9000      	str	r0, [sp, #0]
 8000b46:	4293      	cmp	r3, r2
 8000b48:	da00      	bge.n	8000b4c <_printf_common+0x14>
 8000b4a:	0013      	movs	r3, r2
 8000b4c:	0022      	movs	r2, r4
 8000b4e:	602b      	str	r3, [r5, #0]
 8000b50:	3243      	adds	r2, #67	; 0x43
 8000b52:	7812      	ldrb	r2, [r2, #0]
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	d001      	beq.n	8000b5c <_printf_common+0x24>
 8000b58:	3301      	adds	r3, #1
 8000b5a:	602b      	str	r3, [r5, #0]
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	069b      	lsls	r3, r3, #26
 8000b60:	d502      	bpl.n	8000b68 <_printf_common+0x30>
 8000b62:	682b      	ldr	r3, [r5, #0]
 8000b64:	3302      	adds	r3, #2
 8000b66:	602b      	str	r3, [r5, #0]
 8000b68:	6822      	ldr	r2, [r4, #0]
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	0017      	movs	r7, r2
 8000b6e:	401f      	ands	r7, r3
 8000b70:	421a      	tst	r2, r3
 8000b72:	d027      	beq.n	8000bc4 <_printf_common+0x8c>
 8000b74:	0023      	movs	r3, r4
 8000b76:	3343      	adds	r3, #67	; 0x43
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	1e5a      	subs	r2, r3, #1
 8000b7c:	4193      	sbcs	r3, r2
 8000b7e:	6822      	ldr	r2, [r4, #0]
 8000b80:	0692      	lsls	r2, r2, #26
 8000b82:	d430      	bmi.n	8000be6 <_printf_common+0xae>
 8000b84:	0022      	movs	r2, r4
 8000b86:	9901      	ldr	r1, [sp, #4]
 8000b88:	9800      	ldr	r0, [sp, #0]
 8000b8a:	9e08      	ldr	r6, [sp, #32]
 8000b8c:	3243      	adds	r2, #67	; 0x43
 8000b8e:	47b0      	blx	r6
 8000b90:	1c43      	adds	r3, r0, #1
 8000b92:	d025      	beq.n	8000be0 <_printf_common+0xa8>
 8000b94:	2306      	movs	r3, #6
 8000b96:	6820      	ldr	r0, [r4, #0]
 8000b98:	682a      	ldr	r2, [r5, #0]
 8000b9a:	68e1      	ldr	r1, [r4, #12]
 8000b9c:	2500      	movs	r5, #0
 8000b9e:	4003      	ands	r3, r0
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d103      	bne.n	8000bac <_printf_common+0x74>
 8000ba4:	1a8d      	subs	r5, r1, r2
 8000ba6:	43eb      	mvns	r3, r5
 8000ba8:	17db      	asrs	r3, r3, #31
 8000baa:	401d      	ands	r5, r3
 8000bac:	68a3      	ldr	r3, [r4, #8]
 8000bae:	6922      	ldr	r2, [r4, #16]
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	dd01      	ble.n	8000bb8 <_printf_common+0x80>
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	18ed      	adds	r5, r5, r3
 8000bb8:	2700      	movs	r7, #0
 8000bba:	42bd      	cmp	r5, r7
 8000bbc:	d120      	bne.n	8000c00 <_printf_common+0xc8>
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	e010      	b.n	8000be4 <_printf_common+0xac>
 8000bc2:	3701      	adds	r7, #1
 8000bc4:	68e3      	ldr	r3, [r4, #12]
 8000bc6:	682a      	ldr	r2, [r5, #0]
 8000bc8:	1a9b      	subs	r3, r3, r2
 8000bca:	42bb      	cmp	r3, r7
 8000bcc:	ddd2      	ble.n	8000b74 <_printf_common+0x3c>
 8000bce:	0022      	movs	r2, r4
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	9901      	ldr	r1, [sp, #4]
 8000bd4:	9800      	ldr	r0, [sp, #0]
 8000bd6:	9e08      	ldr	r6, [sp, #32]
 8000bd8:	3219      	adds	r2, #25
 8000bda:	47b0      	blx	r6
 8000bdc:	1c43      	adds	r3, r0, #1
 8000bde:	d1f0      	bne.n	8000bc2 <_printf_common+0x8a>
 8000be0:	2001      	movs	r0, #1
 8000be2:	4240      	negs	r0, r0
 8000be4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000be6:	2030      	movs	r0, #48	; 0x30
 8000be8:	18e1      	adds	r1, r4, r3
 8000bea:	3143      	adds	r1, #67	; 0x43
 8000bec:	7008      	strb	r0, [r1, #0]
 8000bee:	0021      	movs	r1, r4
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	3145      	adds	r1, #69	; 0x45
 8000bf4:	7809      	ldrb	r1, [r1, #0]
 8000bf6:	18a2      	adds	r2, r4, r2
 8000bf8:	3243      	adds	r2, #67	; 0x43
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	7011      	strb	r1, [r2, #0]
 8000bfe:	e7c1      	b.n	8000b84 <_printf_common+0x4c>
 8000c00:	0022      	movs	r2, r4
 8000c02:	2301      	movs	r3, #1
 8000c04:	9901      	ldr	r1, [sp, #4]
 8000c06:	9800      	ldr	r0, [sp, #0]
 8000c08:	9e08      	ldr	r6, [sp, #32]
 8000c0a:	321a      	adds	r2, #26
 8000c0c:	47b0      	blx	r6
 8000c0e:	1c43      	adds	r3, r0, #1
 8000c10:	d0e6      	beq.n	8000be0 <_printf_common+0xa8>
 8000c12:	3701      	adds	r7, #1
 8000c14:	e7d1      	b.n	8000bba <_printf_common+0x82>
	...

08000c18 <_printf_i>:
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	9206      	str	r2, [sp, #24]
 8000c1e:	000a      	movs	r2, r1
 8000c20:	3243      	adds	r2, #67	; 0x43
 8000c22:	9307      	str	r3, [sp, #28]
 8000c24:	9005      	str	r0, [sp, #20]
 8000c26:	9204      	str	r2, [sp, #16]
 8000c28:	7e0a      	ldrb	r2, [r1, #24]
 8000c2a:	000c      	movs	r4, r1
 8000c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000c2e:	2a78      	cmp	r2, #120	; 0x78
 8000c30:	d807      	bhi.n	8000c42 <_printf_i+0x2a>
 8000c32:	2a62      	cmp	r2, #98	; 0x62
 8000c34:	d809      	bhi.n	8000c4a <_printf_i+0x32>
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d100      	bne.n	8000c3c <_printf_i+0x24>
 8000c3a:	e0c1      	b.n	8000dc0 <_printf_i+0x1a8>
 8000c3c:	2a58      	cmp	r2, #88	; 0x58
 8000c3e:	d100      	bne.n	8000c42 <_printf_i+0x2a>
 8000c40:	e08c      	b.n	8000d5c <_printf_i+0x144>
 8000c42:	0026      	movs	r6, r4
 8000c44:	3642      	adds	r6, #66	; 0x42
 8000c46:	7032      	strb	r2, [r6, #0]
 8000c48:	e022      	b.n	8000c90 <_printf_i+0x78>
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	3863      	subs	r0, #99	; 0x63
 8000c4e:	2815      	cmp	r0, #21
 8000c50:	d8f7      	bhi.n	8000c42 <_printf_i+0x2a>
 8000c52:	f7ff fa57 	bl	8000104 <__gnu_thumb1_case_shi>
 8000c56:	0016      	.short	0x0016
 8000c58:	fff6001f 	.word	0xfff6001f
 8000c5c:	fff6fff6 	.word	0xfff6fff6
 8000c60:	001ffff6 	.word	0x001ffff6
 8000c64:	fff6fff6 	.word	0xfff6fff6
 8000c68:	fff6fff6 	.word	0xfff6fff6
 8000c6c:	003600a8 	.word	0x003600a8
 8000c70:	fff6009a 	.word	0xfff6009a
 8000c74:	00b9fff6 	.word	0x00b9fff6
 8000c78:	0036fff6 	.word	0x0036fff6
 8000c7c:	fff6fff6 	.word	0xfff6fff6
 8000c80:	009e      	.short	0x009e
 8000c82:	0026      	movs	r6, r4
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	3642      	adds	r6, #66	; 0x42
 8000c88:	1d11      	adds	r1, r2, #4
 8000c8a:	6019      	str	r1, [r3, #0]
 8000c8c:	6813      	ldr	r3, [r2, #0]
 8000c8e:	7033      	strb	r3, [r6, #0]
 8000c90:	2301      	movs	r3, #1
 8000c92:	e0a7      	b.n	8000de4 <_printf_i+0x1cc>
 8000c94:	6808      	ldr	r0, [r1, #0]
 8000c96:	6819      	ldr	r1, [r3, #0]
 8000c98:	1d0a      	adds	r2, r1, #4
 8000c9a:	0605      	lsls	r5, r0, #24
 8000c9c:	d50b      	bpl.n	8000cb6 <_printf_i+0x9e>
 8000c9e:	680d      	ldr	r5, [r1, #0]
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	da03      	bge.n	8000cae <_printf_i+0x96>
 8000ca6:	232d      	movs	r3, #45	; 0x2d
 8000ca8:	9a04      	ldr	r2, [sp, #16]
 8000caa:	426d      	negs	r5, r5
 8000cac:	7013      	strb	r3, [r2, #0]
 8000cae:	4b61      	ldr	r3, [pc, #388]	; (8000e34 <_printf_i+0x21c>)
 8000cb0:	270a      	movs	r7, #10
 8000cb2:	9303      	str	r3, [sp, #12]
 8000cb4:	e01b      	b.n	8000cee <_printf_i+0xd6>
 8000cb6:	680d      	ldr	r5, [r1, #0]
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	0641      	lsls	r1, r0, #25
 8000cbc:	d5f1      	bpl.n	8000ca2 <_printf_i+0x8a>
 8000cbe:	b22d      	sxth	r5, r5
 8000cc0:	e7ef      	b.n	8000ca2 <_printf_i+0x8a>
 8000cc2:	680d      	ldr	r5, [r1, #0]
 8000cc4:	6819      	ldr	r1, [r3, #0]
 8000cc6:	1d08      	adds	r0, r1, #4
 8000cc8:	6018      	str	r0, [r3, #0]
 8000cca:	062e      	lsls	r6, r5, #24
 8000ccc:	d501      	bpl.n	8000cd2 <_printf_i+0xba>
 8000cce:	680d      	ldr	r5, [r1, #0]
 8000cd0:	e003      	b.n	8000cda <_printf_i+0xc2>
 8000cd2:	066d      	lsls	r5, r5, #25
 8000cd4:	d5fb      	bpl.n	8000cce <_printf_i+0xb6>
 8000cd6:	680d      	ldr	r5, [r1, #0]
 8000cd8:	b2ad      	uxth	r5, r5
 8000cda:	4b56      	ldr	r3, [pc, #344]	; (8000e34 <_printf_i+0x21c>)
 8000cdc:	2708      	movs	r7, #8
 8000cde:	9303      	str	r3, [sp, #12]
 8000ce0:	2a6f      	cmp	r2, #111	; 0x6f
 8000ce2:	d000      	beq.n	8000ce6 <_printf_i+0xce>
 8000ce4:	3702      	adds	r7, #2
 8000ce6:	0023      	movs	r3, r4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	3343      	adds	r3, #67	; 0x43
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	6863      	ldr	r3, [r4, #4]
 8000cf0:	60a3      	str	r3, [r4, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db03      	blt.n	8000cfe <_printf_i+0xe6>
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	6821      	ldr	r1, [r4, #0]
 8000cfa:	4391      	bics	r1, r2
 8000cfc:	6021      	str	r1, [r4, #0]
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d102      	bne.n	8000d08 <_printf_i+0xf0>
 8000d02:	9e04      	ldr	r6, [sp, #16]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00c      	beq.n	8000d22 <_printf_i+0x10a>
 8000d08:	9e04      	ldr	r6, [sp, #16]
 8000d0a:	0028      	movs	r0, r5
 8000d0c:	0039      	movs	r1, r7
 8000d0e:	f7ff fa89 	bl	8000224 <__aeabi_uidivmod>
 8000d12:	9b03      	ldr	r3, [sp, #12]
 8000d14:	3e01      	subs	r6, #1
 8000d16:	5c5b      	ldrb	r3, [r3, r1]
 8000d18:	7033      	strb	r3, [r6, #0]
 8000d1a:	002b      	movs	r3, r5
 8000d1c:	0005      	movs	r5, r0
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d9f3      	bls.n	8000d0a <_printf_i+0xf2>
 8000d22:	2f08      	cmp	r7, #8
 8000d24:	d109      	bne.n	8000d3a <_printf_i+0x122>
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	07db      	lsls	r3, r3, #31
 8000d2a:	d506      	bpl.n	8000d3a <_printf_i+0x122>
 8000d2c:	6863      	ldr	r3, [r4, #4]
 8000d2e:	6922      	ldr	r2, [r4, #16]
 8000d30:	4293      	cmp	r3, r2
 8000d32:	dc02      	bgt.n	8000d3a <_printf_i+0x122>
 8000d34:	2330      	movs	r3, #48	; 0x30
 8000d36:	3e01      	subs	r6, #1
 8000d38:	7033      	strb	r3, [r6, #0]
 8000d3a:	9b04      	ldr	r3, [sp, #16]
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	6123      	str	r3, [r4, #16]
 8000d40:	9b07      	ldr	r3, [sp, #28]
 8000d42:	0021      	movs	r1, r4
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	9805      	ldr	r0, [sp, #20]
 8000d48:	9b06      	ldr	r3, [sp, #24]
 8000d4a:	aa09      	add	r2, sp, #36	; 0x24
 8000d4c:	f7ff fef4 	bl	8000b38 <_printf_common>
 8000d50:	1c43      	adds	r3, r0, #1
 8000d52:	d14c      	bne.n	8000dee <_printf_i+0x1d6>
 8000d54:	2001      	movs	r0, #1
 8000d56:	4240      	negs	r0, r0
 8000d58:	b00b      	add	sp, #44	; 0x2c
 8000d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5c:	3145      	adds	r1, #69	; 0x45
 8000d5e:	700a      	strb	r2, [r1, #0]
 8000d60:	4a34      	ldr	r2, [pc, #208]	; (8000e34 <_printf_i+0x21c>)
 8000d62:	9203      	str	r2, [sp, #12]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	6821      	ldr	r1, [r4, #0]
 8000d68:	ca20      	ldmia	r2!, {r5}
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	0608      	lsls	r0, r1, #24
 8000d6e:	d516      	bpl.n	8000d9e <_printf_i+0x186>
 8000d70:	07cb      	lsls	r3, r1, #31
 8000d72:	d502      	bpl.n	8000d7a <_printf_i+0x162>
 8000d74:	2320      	movs	r3, #32
 8000d76:	4319      	orrs	r1, r3
 8000d78:	6021      	str	r1, [r4, #0]
 8000d7a:	2710      	movs	r7, #16
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d1b2      	bne.n	8000ce6 <_printf_i+0xce>
 8000d80:	2320      	movs	r3, #32
 8000d82:	6822      	ldr	r2, [r4, #0]
 8000d84:	439a      	bics	r2, r3
 8000d86:	6022      	str	r2, [r4, #0]
 8000d88:	e7ad      	b.n	8000ce6 <_printf_i+0xce>
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	6809      	ldr	r1, [r1, #0]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	6022      	str	r2, [r4, #0]
 8000d92:	0022      	movs	r2, r4
 8000d94:	2178      	movs	r1, #120	; 0x78
 8000d96:	3245      	adds	r2, #69	; 0x45
 8000d98:	7011      	strb	r1, [r2, #0]
 8000d9a:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <_printf_i+0x220>)
 8000d9c:	e7e1      	b.n	8000d62 <_printf_i+0x14a>
 8000d9e:	0648      	lsls	r0, r1, #25
 8000da0:	d5e6      	bpl.n	8000d70 <_printf_i+0x158>
 8000da2:	b2ad      	uxth	r5, r5
 8000da4:	e7e4      	b.n	8000d70 <_printf_i+0x158>
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	680d      	ldr	r5, [r1, #0]
 8000daa:	1d10      	adds	r0, r2, #4
 8000dac:	6949      	ldr	r1, [r1, #20]
 8000dae:	6018      	str	r0, [r3, #0]
 8000db0:	6813      	ldr	r3, [r2, #0]
 8000db2:	062e      	lsls	r6, r5, #24
 8000db4:	d501      	bpl.n	8000dba <_printf_i+0x1a2>
 8000db6:	6019      	str	r1, [r3, #0]
 8000db8:	e002      	b.n	8000dc0 <_printf_i+0x1a8>
 8000dba:	066d      	lsls	r5, r5, #25
 8000dbc:	d5fb      	bpl.n	8000db6 <_printf_i+0x19e>
 8000dbe:	8019      	strh	r1, [r3, #0]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9e04      	ldr	r6, [sp, #16]
 8000dc4:	6123      	str	r3, [r4, #16]
 8000dc6:	e7bb      	b.n	8000d40 <_printf_i+0x128>
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	1d11      	adds	r1, r2, #4
 8000dcc:	6019      	str	r1, [r3, #0]
 8000dce:	6816      	ldr	r6, [r2, #0]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	0030      	movs	r0, r6
 8000dd4:	6862      	ldr	r2, [r4, #4]
 8000dd6:	f000 f831 	bl	8000e3c <memchr>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d001      	beq.n	8000de2 <_printf_i+0x1ca>
 8000dde:	1b80      	subs	r0, r0, r6
 8000de0:	6060      	str	r0, [r4, #4]
 8000de2:	6863      	ldr	r3, [r4, #4]
 8000de4:	6123      	str	r3, [r4, #16]
 8000de6:	2300      	movs	r3, #0
 8000de8:	9a04      	ldr	r2, [sp, #16]
 8000dea:	7013      	strb	r3, [r2, #0]
 8000dec:	e7a8      	b.n	8000d40 <_printf_i+0x128>
 8000dee:	6923      	ldr	r3, [r4, #16]
 8000df0:	0032      	movs	r2, r6
 8000df2:	9906      	ldr	r1, [sp, #24]
 8000df4:	9805      	ldr	r0, [sp, #20]
 8000df6:	9d07      	ldr	r5, [sp, #28]
 8000df8:	47a8      	blx	r5
 8000dfa:	1c43      	adds	r3, r0, #1
 8000dfc:	d0aa      	beq.n	8000d54 <_printf_i+0x13c>
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	079b      	lsls	r3, r3, #30
 8000e02:	d415      	bmi.n	8000e30 <_printf_i+0x218>
 8000e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e06:	68e0      	ldr	r0, [r4, #12]
 8000e08:	4298      	cmp	r0, r3
 8000e0a:	daa5      	bge.n	8000d58 <_printf_i+0x140>
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	e7a3      	b.n	8000d58 <_printf_i+0x140>
 8000e10:	0022      	movs	r2, r4
 8000e12:	2301      	movs	r3, #1
 8000e14:	9906      	ldr	r1, [sp, #24]
 8000e16:	9805      	ldr	r0, [sp, #20]
 8000e18:	9e07      	ldr	r6, [sp, #28]
 8000e1a:	3219      	adds	r2, #25
 8000e1c:	47b0      	blx	r6
 8000e1e:	1c43      	adds	r3, r0, #1
 8000e20:	d098      	beq.n	8000d54 <_printf_i+0x13c>
 8000e22:	3501      	adds	r5, #1
 8000e24:	68e3      	ldr	r3, [r4, #12]
 8000e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e28:	1a9b      	subs	r3, r3, r2
 8000e2a:	42ab      	cmp	r3, r5
 8000e2c:	dcf0      	bgt.n	8000e10 <_printf_i+0x1f8>
 8000e2e:	e7e9      	b.n	8000e04 <_printf_i+0x1ec>
 8000e30:	2500      	movs	r5, #0
 8000e32:	e7f7      	b.n	8000e24 <_printf_i+0x20c>
 8000e34:	08001189 	.word	0x08001189
 8000e38:	0800119a 	.word	0x0800119a

08000e3c <memchr>:
 8000e3c:	b2c9      	uxtb	r1, r1
 8000e3e:	1882      	adds	r2, r0, r2
 8000e40:	4290      	cmp	r0, r2
 8000e42:	d101      	bne.n	8000e48 <memchr+0xc>
 8000e44:	2000      	movs	r0, #0
 8000e46:	4770      	bx	lr
 8000e48:	7803      	ldrb	r3, [r0, #0]
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d0fb      	beq.n	8000e46 <memchr+0xa>
 8000e4e:	3001      	adds	r0, #1
 8000e50:	e7f6      	b.n	8000e40 <memchr+0x4>

08000e52 <memcpy>:
 8000e52:	2300      	movs	r3, #0
 8000e54:	b510      	push	{r4, lr}
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d100      	bne.n	8000e5c <memcpy+0xa>
 8000e5a:	bd10      	pop	{r4, pc}
 8000e5c:	5ccc      	ldrb	r4, [r1, r3]
 8000e5e:	54c4      	strb	r4, [r0, r3]
 8000e60:	3301      	adds	r3, #1
 8000e62:	e7f8      	b.n	8000e56 <memcpy+0x4>

08000e64 <memmove>:
 8000e64:	b510      	push	{r4, lr}
 8000e66:	4288      	cmp	r0, r1
 8000e68:	d902      	bls.n	8000e70 <memmove+0xc>
 8000e6a:	188b      	adds	r3, r1, r2
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	d303      	bcc.n	8000e78 <memmove+0x14>
 8000e70:	2300      	movs	r3, #0
 8000e72:	e007      	b.n	8000e84 <memmove+0x20>
 8000e74:	5c8b      	ldrb	r3, [r1, r2]
 8000e76:	5483      	strb	r3, [r0, r2]
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	d2fb      	bcs.n	8000e74 <memmove+0x10>
 8000e7c:	bd10      	pop	{r4, pc}
 8000e7e:	5ccc      	ldrb	r4, [r1, r3]
 8000e80:	54c4      	strb	r4, [r0, r3]
 8000e82:	3301      	adds	r3, #1
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d1fa      	bne.n	8000e7e <memmove+0x1a>
 8000e88:	e7f8      	b.n	8000e7c <memmove+0x18>
	...

08000e8c <_free_r>:
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	0005      	movs	r5, r0
 8000e90:	2900      	cmp	r1, #0
 8000e92:	d010      	beq.n	8000eb6 <_free_r+0x2a>
 8000e94:	1f0c      	subs	r4, r1, #4
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	da00      	bge.n	8000e9e <_free_r+0x12>
 8000e9c:	18e4      	adds	r4, r4, r3
 8000e9e:	0028      	movs	r0, r5
 8000ea0:	f000 f918 	bl	80010d4 <__malloc_lock>
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <_free_r+0x90>)
 8000ea6:	6813      	ldr	r3, [r2, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d105      	bne.n	8000eb8 <_free_r+0x2c>
 8000eac:	6063      	str	r3, [r4, #4]
 8000eae:	6014      	str	r4, [r2, #0]
 8000eb0:	0028      	movs	r0, r5
 8000eb2:	f000 f917 	bl	80010e4 <__malloc_unlock>
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d908      	bls.n	8000ece <_free_r+0x42>
 8000ebc:	6821      	ldr	r1, [r4, #0]
 8000ebe:	1860      	adds	r0, r4, r1
 8000ec0:	4283      	cmp	r3, r0
 8000ec2:	d1f3      	bne.n	8000eac <_free_r+0x20>
 8000ec4:	6818      	ldr	r0, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	1841      	adds	r1, r0, r1
 8000eca:	6021      	str	r1, [r4, #0]
 8000ecc:	e7ee      	b.n	8000eac <_free_r+0x20>
 8000ece:	001a      	movs	r2, r3
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <_free_r+0x4e>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d9f9      	bls.n	8000ece <_free_r+0x42>
 8000eda:	6811      	ldr	r1, [r2, #0]
 8000edc:	1850      	adds	r0, r2, r1
 8000ede:	42a0      	cmp	r0, r4
 8000ee0:	d10b      	bne.n	8000efa <_free_r+0x6e>
 8000ee2:	6820      	ldr	r0, [r4, #0]
 8000ee4:	1809      	adds	r1, r1, r0
 8000ee6:	1850      	adds	r0, r2, r1
 8000ee8:	6011      	str	r1, [r2, #0]
 8000eea:	4283      	cmp	r3, r0
 8000eec:	d1e0      	bne.n	8000eb0 <_free_r+0x24>
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	1841      	adds	r1, r0, r1
 8000ef4:	6011      	str	r1, [r2, #0]
 8000ef6:	6053      	str	r3, [r2, #4]
 8000ef8:	e7da      	b.n	8000eb0 <_free_r+0x24>
 8000efa:	42a0      	cmp	r0, r4
 8000efc:	d902      	bls.n	8000f04 <_free_r+0x78>
 8000efe:	230c      	movs	r3, #12
 8000f00:	602b      	str	r3, [r5, #0]
 8000f02:	e7d5      	b.n	8000eb0 <_free_r+0x24>
 8000f04:	6821      	ldr	r1, [r4, #0]
 8000f06:	1860      	adds	r0, r4, r1
 8000f08:	4283      	cmp	r3, r0
 8000f0a:	d103      	bne.n	8000f14 <_free_r+0x88>
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	1841      	adds	r1, r0, r1
 8000f12:	6021      	str	r1, [r4, #0]
 8000f14:	6063      	str	r3, [r4, #4]
 8000f16:	6054      	str	r4, [r2, #4]
 8000f18:	e7ca      	b.n	8000eb0 <_free_r+0x24>
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	20000084 	.word	0x20000084

08000f20 <sbrk_aligned>:
 8000f20:	b570      	push	{r4, r5, r6, lr}
 8000f22:	4e0f      	ldr	r6, [pc, #60]	; (8000f60 <sbrk_aligned+0x40>)
 8000f24:	000d      	movs	r5, r1
 8000f26:	6831      	ldr	r1, [r6, #0]
 8000f28:	0004      	movs	r4, r0
 8000f2a:	2900      	cmp	r1, #0
 8000f2c:	d102      	bne.n	8000f34 <sbrk_aligned+0x14>
 8000f2e:	f000 f8bf 	bl	80010b0 <_sbrk_r>
 8000f32:	6030      	str	r0, [r6, #0]
 8000f34:	0029      	movs	r1, r5
 8000f36:	0020      	movs	r0, r4
 8000f38:	f000 f8ba 	bl	80010b0 <_sbrk_r>
 8000f3c:	1c43      	adds	r3, r0, #1
 8000f3e:	d00a      	beq.n	8000f56 <sbrk_aligned+0x36>
 8000f40:	2303      	movs	r3, #3
 8000f42:	1cc5      	adds	r5, r0, #3
 8000f44:	439d      	bics	r5, r3
 8000f46:	42a8      	cmp	r0, r5
 8000f48:	d007      	beq.n	8000f5a <sbrk_aligned+0x3a>
 8000f4a:	1a29      	subs	r1, r5, r0
 8000f4c:	0020      	movs	r0, r4
 8000f4e:	f000 f8af 	bl	80010b0 <_sbrk_r>
 8000f52:	1c43      	adds	r3, r0, #1
 8000f54:	d101      	bne.n	8000f5a <sbrk_aligned+0x3a>
 8000f56:	2501      	movs	r5, #1
 8000f58:	426d      	negs	r5, r5
 8000f5a:	0028      	movs	r0, r5
 8000f5c:	bd70      	pop	{r4, r5, r6, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	20000088 	.word	0x20000088

08000f64 <_malloc_r>:
 8000f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f66:	2203      	movs	r2, #3
 8000f68:	1ccb      	adds	r3, r1, #3
 8000f6a:	4393      	bics	r3, r2
 8000f6c:	3308      	adds	r3, #8
 8000f6e:	0006      	movs	r6, r0
 8000f70:	001f      	movs	r7, r3
 8000f72:	2b0c      	cmp	r3, #12
 8000f74:	d232      	bcs.n	8000fdc <_malloc_r+0x78>
 8000f76:	270c      	movs	r7, #12
 8000f78:	42b9      	cmp	r1, r7
 8000f7a:	d831      	bhi.n	8000fe0 <_malloc_r+0x7c>
 8000f7c:	0030      	movs	r0, r6
 8000f7e:	f000 f8a9 	bl	80010d4 <__malloc_lock>
 8000f82:	4d32      	ldr	r5, [pc, #200]	; (800104c <_malloc_r+0xe8>)
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	001c      	movs	r4, r3
 8000f88:	2c00      	cmp	r4, #0
 8000f8a:	d12e      	bne.n	8000fea <_malloc_r+0x86>
 8000f8c:	0039      	movs	r1, r7
 8000f8e:	0030      	movs	r0, r6
 8000f90:	f7ff ffc6 	bl	8000f20 <sbrk_aligned>
 8000f94:	0004      	movs	r4, r0
 8000f96:	1c43      	adds	r3, r0, #1
 8000f98:	d11e      	bne.n	8000fd8 <_malloc_r+0x74>
 8000f9a:	682c      	ldr	r4, [r5, #0]
 8000f9c:	0025      	movs	r5, r4
 8000f9e:	2d00      	cmp	r5, #0
 8000fa0:	d14a      	bne.n	8001038 <_malloc_r+0xd4>
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	0029      	movs	r1, r5
 8000fa6:	18e3      	adds	r3, r4, r3
 8000fa8:	0030      	movs	r0, r6
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	f000 f880 	bl	80010b0 <_sbrk_r>
 8000fb0:	9b01      	ldr	r3, [sp, #4]
 8000fb2:	4283      	cmp	r3, r0
 8000fb4:	d143      	bne.n	800103e <_malloc_r+0xda>
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	3703      	adds	r7, #3
 8000fba:	1aff      	subs	r7, r7, r3
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	439f      	bics	r7, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	2f0c      	cmp	r7, #12
 8000fc4:	d200      	bcs.n	8000fc8 <_malloc_r+0x64>
 8000fc6:	270c      	movs	r7, #12
 8000fc8:	0039      	movs	r1, r7
 8000fca:	0030      	movs	r0, r6
 8000fcc:	f7ff ffa8 	bl	8000f20 <sbrk_aligned>
 8000fd0:	1c43      	adds	r3, r0, #1
 8000fd2:	d034      	beq.n	800103e <_malloc_r+0xda>
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	19df      	adds	r7, r3, r7
 8000fd8:	6027      	str	r7, [r4, #0]
 8000fda:	e013      	b.n	8001004 <_malloc_r+0xa0>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dacb      	bge.n	8000f78 <_malloc_r+0x14>
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	2500      	movs	r5, #0
 8000fe4:	6033      	str	r3, [r6, #0]
 8000fe6:	0028      	movs	r0, r5
 8000fe8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000fea:	6822      	ldr	r2, [r4, #0]
 8000fec:	1bd1      	subs	r1, r2, r7
 8000fee:	d420      	bmi.n	8001032 <_malloc_r+0xce>
 8000ff0:	290b      	cmp	r1, #11
 8000ff2:	d917      	bls.n	8001024 <_malloc_r+0xc0>
 8000ff4:	19e2      	adds	r2, r4, r7
 8000ff6:	6027      	str	r7, [r4, #0]
 8000ff8:	42a3      	cmp	r3, r4
 8000ffa:	d111      	bne.n	8001020 <_malloc_r+0xbc>
 8000ffc:	602a      	str	r2, [r5, #0]
 8000ffe:	6863      	ldr	r3, [r4, #4]
 8001000:	6011      	str	r1, [r2, #0]
 8001002:	6053      	str	r3, [r2, #4]
 8001004:	0030      	movs	r0, r6
 8001006:	0025      	movs	r5, r4
 8001008:	f000 f86c 	bl	80010e4 <__malloc_unlock>
 800100c:	2207      	movs	r2, #7
 800100e:	350b      	adds	r5, #11
 8001010:	1d23      	adds	r3, r4, #4
 8001012:	4395      	bics	r5, r2
 8001014:	1aea      	subs	r2, r5, r3
 8001016:	429d      	cmp	r5, r3
 8001018:	d0e5      	beq.n	8000fe6 <_malloc_r+0x82>
 800101a:	1b5b      	subs	r3, r3, r5
 800101c:	50a3      	str	r3, [r4, r2]
 800101e:	e7e2      	b.n	8000fe6 <_malloc_r+0x82>
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	e7ec      	b.n	8000ffe <_malloc_r+0x9a>
 8001024:	6862      	ldr	r2, [r4, #4]
 8001026:	42a3      	cmp	r3, r4
 8001028:	d101      	bne.n	800102e <_malloc_r+0xca>
 800102a:	602a      	str	r2, [r5, #0]
 800102c:	e7ea      	b.n	8001004 <_malloc_r+0xa0>
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	e7e8      	b.n	8001004 <_malloc_r+0xa0>
 8001032:	0023      	movs	r3, r4
 8001034:	6864      	ldr	r4, [r4, #4]
 8001036:	e7a7      	b.n	8000f88 <_malloc_r+0x24>
 8001038:	002c      	movs	r4, r5
 800103a:	686d      	ldr	r5, [r5, #4]
 800103c:	e7af      	b.n	8000f9e <_malloc_r+0x3a>
 800103e:	230c      	movs	r3, #12
 8001040:	0030      	movs	r0, r6
 8001042:	6033      	str	r3, [r6, #0]
 8001044:	f000 f84e 	bl	80010e4 <__malloc_unlock>
 8001048:	e7cd      	b.n	8000fe6 <_malloc_r+0x82>
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	20000084 	.word	0x20000084

08001050 <_realloc_r>:
 8001050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001052:	0007      	movs	r7, r0
 8001054:	000e      	movs	r6, r1
 8001056:	0014      	movs	r4, r2
 8001058:	2900      	cmp	r1, #0
 800105a:	d105      	bne.n	8001068 <_realloc_r+0x18>
 800105c:	0011      	movs	r1, r2
 800105e:	f7ff ff81 	bl	8000f64 <_malloc_r>
 8001062:	0005      	movs	r5, r0
 8001064:	0028      	movs	r0, r5
 8001066:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001068:	2a00      	cmp	r2, #0
 800106a:	d103      	bne.n	8001074 <_realloc_r+0x24>
 800106c:	f7ff ff0e 	bl	8000e8c <_free_r>
 8001070:	0025      	movs	r5, r4
 8001072:	e7f7      	b.n	8001064 <_realloc_r+0x14>
 8001074:	f000 f83e 	bl	80010f4 <_malloc_usable_size_r>
 8001078:	9001      	str	r0, [sp, #4]
 800107a:	4284      	cmp	r4, r0
 800107c:	d803      	bhi.n	8001086 <_realloc_r+0x36>
 800107e:	0035      	movs	r5, r6
 8001080:	0843      	lsrs	r3, r0, #1
 8001082:	42a3      	cmp	r3, r4
 8001084:	d3ee      	bcc.n	8001064 <_realloc_r+0x14>
 8001086:	0021      	movs	r1, r4
 8001088:	0038      	movs	r0, r7
 800108a:	f7ff ff6b 	bl	8000f64 <_malloc_r>
 800108e:	1e05      	subs	r5, r0, #0
 8001090:	d0e8      	beq.n	8001064 <_realloc_r+0x14>
 8001092:	9b01      	ldr	r3, [sp, #4]
 8001094:	0022      	movs	r2, r4
 8001096:	429c      	cmp	r4, r3
 8001098:	d900      	bls.n	800109c <_realloc_r+0x4c>
 800109a:	001a      	movs	r2, r3
 800109c:	0031      	movs	r1, r6
 800109e:	0028      	movs	r0, r5
 80010a0:	f7ff fed7 	bl	8000e52 <memcpy>
 80010a4:	0031      	movs	r1, r6
 80010a6:	0038      	movs	r0, r7
 80010a8:	f7ff fef0 	bl	8000e8c <_free_r>
 80010ac:	e7da      	b.n	8001064 <_realloc_r+0x14>
	...

080010b0 <_sbrk_r>:
 80010b0:	2300      	movs	r3, #0
 80010b2:	b570      	push	{r4, r5, r6, lr}
 80010b4:	4d06      	ldr	r5, [pc, #24]	; (80010d0 <_sbrk_r+0x20>)
 80010b6:	0004      	movs	r4, r0
 80010b8:	0008      	movs	r0, r1
 80010ba:	602b      	str	r3, [r5, #0]
 80010bc:	f7ff fb30 	bl	8000720 <_sbrk>
 80010c0:	1c43      	adds	r3, r0, #1
 80010c2:	d103      	bne.n	80010cc <_sbrk_r+0x1c>
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d000      	beq.n	80010cc <_sbrk_r+0x1c>
 80010ca:	6023      	str	r3, [r4, #0]
 80010cc:	bd70      	pop	{r4, r5, r6, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	2000008c 	.word	0x2000008c

080010d4 <__malloc_lock>:
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <__malloc_lock+0xc>)
 80010d8:	f000 f814 	bl	8001104 <__retarget_lock_acquire_recursive>
 80010dc:	bd10      	pop	{r4, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	20000090 	.word	0x20000090

080010e4 <__malloc_unlock>:
 80010e4:	b510      	push	{r4, lr}
 80010e6:	4802      	ldr	r0, [pc, #8]	; (80010f0 <__malloc_unlock+0xc>)
 80010e8:	f000 f80d 	bl	8001106 <__retarget_lock_release_recursive>
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	20000090 	.word	0x20000090

080010f4 <_malloc_usable_size_r>:
 80010f4:	1f0b      	subs	r3, r1, #4
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1f18      	subs	r0, r3, #4
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	da01      	bge.n	8001102 <_malloc_usable_size_r+0xe>
 80010fe:	580b      	ldr	r3, [r1, r0]
 8001100:	18c0      	adds	r0, r0, r3
 8001102:	4770      	bx	lr

08001104 <__retarget_lock_acquire_recursive>:
 8001104:	4770      	bx	lr

08001106 <__retarget_lock_release_recursive>:
 8001106:	4770      	bx	lr

08001108 <_init>:
 8001108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110e:	bc08      	pop	{r3}
 8001110:	469e      	mov	lr, r3
 8001112:	4770      	bx	lr

08001114 <_fini>:
 8001114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800111a:	bc08      	pop	{r3}
 800111c:	469e      	mov	lr, r3
 800111e:	4770      	bx	lr

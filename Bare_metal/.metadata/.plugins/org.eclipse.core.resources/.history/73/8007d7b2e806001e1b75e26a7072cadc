/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include "stm32g0xx.h"

#include <stdint.h>

// I2C Register Definitions
#define I2C_CR1         (*(volatile uint32_t *)0x40005400)
#define I2C_CR2         (*(volatile uint32_t *)0x40005404)
#define I2C_OAR1        (*(volatile uint32_t *)0x40005408)
#define I2C_DR          (*(volatile uint32_t *)0x40005410)
#define I2C_SR1         (*(volatile uint32_t *)0x40005414)
#define I2C_SR2         (*(volatile uint32_t *)0x40005418)
#define I2C_CCR         (*(volatile uint32_t *)0x4000541C)
#define I2C_TRISE       (*(volatile uint32_t *)0x40005420)

// GPIO Register Definitions
//#define GPIOB_BASE      0x48000400
#define GPIOB_ODR       (*(volatile uint32_t *)(GPIOB_BASE + 0x14))
#define GPIOB_AFRL      (*(volatile uint32_t *)(GPIOB_BASE + 0x20))
#define GPIOB_AFRH      (*(volatile uint32_t *)(GPIOB_BASE + 0x24))
#define GPIOB_OTYPER    (*(volatile uint32_t *)(GPIOB_BASE + 0x04))
#define GPIOB_MODER     (*(volatile uint32_t *)(GPIOB_BASE + 0x00))
#define GPIOB_OSPEEDR   (*(volatile uint32_t *)(GPIOB_BASE + 0x08))
#define GPIOB_PUPDR     (*(volatile uint32_t *)(GPIOB_BASE + 0x0C))

// I2C GPIO Pins
#define I2C_SCL_PIN     6
#define I2C_SDA_PIN     7

// I2C Configuration
#define I2C_SPEED       100000
#define I2C_OWN_ADDRESS 0x01

// OLED Display Commands
#define OLED_CMD_MODE   0x00
#define OLED_DATA_MODE  0x40

// I2C Delay
void i2c_delay(int delay) {
    for (int i = 0; i < delay; i++) {
        __asm("nop");
    }
}

// I2C Start Condition
void i2c_start() {
    I2C_CR1 |= (1 << 8);    // Generate a START condition
    while (!(I2C_SR1 & 0x0001));    // Wait for START condition to be generated
}

// I2C Stop Condition
void i2c_stop() {
    I2C_CR1 |= (1 << 9);    // Generate a STOP condition
    i2c_delay(10);          // Wait for STOP condition to be generated
}

// I2C Write Data
void i2c_write(uint8_t data) {
    I2C_DR = data;          // Write data to the data register
    while (!(I2C_SR1 & (1 << 7)));    // Wait for data transmission to complete
}

// OLED Initialization
void oled_init() {
    // Set the I2C clock frequency
    I2C_CR2 |= 0x20;    // Set peripheral clock frequency to 48 MHz
    I2C_CCR |= 0x50;    // Set I2C clock control to 100 kHz

    // Configure GPIO pins for I2C
    GPIOB_MODER |= (2 << (2 * I2C_SCL_PIN));   // Set SCL pin to alternate function mode
    GPIOB_MODER |= (2 << (2 * I2C_SDA_PIN));   // Set SDA pin to alternate function mode
    GPIOB_OTYPER |= (1 << I2C_SCL_PIN);        // Set SCL pin to open-drain output
    GPIOB_OTYPER |= (1 << I2C_SDA_PIN);        // Set SDA pin to open-drain output
    GPIOB_AFRL |= (4 << (4 * I2C_SCL_PIN));    // Set SCL pin to alternate function 4 (I2C)
    GPIOB_AFRL |= (4 << (4 * I2C_SDA_PIN));    // Set SDA pin to alternate function 4 (I2C)
    GPIOB_OSPEEDR |= (3 << (2 * I2C_SCL_PIN)); // Set SCL pin to high speed mode
    GPIOB_OSPEEDR |= (3 << (2 * I2C_SDA_PIN)); // Set SDA pin to high speed mode
    GPIOB_PUPDR |= (1 << (2 * I2C_SCL_PIN));   // Set SCL pin to pull-up
    GPIOB_PUPDR |= (1 << (2 * I2C_SDA_PIN));   // Set SDA pin to pull-up

    // Enable the I2C peripheral
    I2C_CR1 |= (1 << 0);    // Enable I2C peripheral

    // Initialize the OLED display
    i2c_start();                        // Send START condition
    i2c_write(I2C_OWN_ADDRESS << 1);     // Send I2C address with write bit
    i2c_write(OLED_CMD_MODE);            // Set OLED to command mode
    i2c_write(0xAE);                     // Display OFF
    i2c_write(0xD5);                     // Set display clock divide ratio/oscillator frequency
    i2c_write(0x80);                     // Divide ratio=1, frequency=8
    i2c_write(0xA8);                     // Set multiplex ratio
    i2c_write(0x3F);                     // 1/64 duty
    i2c_write(0xD3);                     // Set display offset
    i2c_write(0x00);                     // No offset
    i2c_write(0x40 | 0x00);              // Set display start line
    i2c_write(0x8D);                     // Charge pump
    i2c_write(0x14);                     // Enable charge pump
    i2c_write(0x20);                     // Set memory mode
    i2c_write(0x00);                     // Horizontal addressing mode
    i2c_write(0xA0 | 0x01);              // Set segment remap
    i2c_write(0xC8);                     // Set COM output scan direction
    i2c_write(0xDA);                     // Set COM pins hardware configuration
    i2c_write(0x12);                     // Alternative COM pin configuration
    i2c_write(0x81);                     // Set contrast control
    i2c_write(0xCF);                     // Contrast = 0xCF
    i2c_write(0xD9);                     // Set pre-charge period
    i2c_write(0xF1);                     // Phase 1 = 0x71, Phase 2 = 0xF1
    i2c_write(0xDB);                     // Set VCOMH deselect level
    i2c_write(0x40);                     // VCOMH = 0.77 VCC
    i2c_write(0xA4);                     // Entire display ON
    i2c_write(0xA6);                     // Set normal display
    i2c_write(0xAF);                     // Display ON
    i2c_stop();                         // Send STOP condition
}

// OLED Display String
void oled_display_string(const char *str) {
    i2c_start();                            // Send START condition
    i2c_write(I2C_OWN_ADDRESS << 1);         // Send I2C address with write bit
    i2c_write(OLED_DATA_MODE);               // Set OLED to data mode

    while (*str) {
        i2c_write(*str++);                   // Send character data
    }

    i2c_stop();                             // Send STOP condition
}

int main() {
    oled_init();                            // Initialize OLED display
    oled_display_string("Hello, World!");   // Display "Hello, World!" on OLED

    while (1) {
        // Main program loop
    }
    return 0;
}

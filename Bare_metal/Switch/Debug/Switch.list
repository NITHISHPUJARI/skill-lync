
Switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d4  080002dc  000102dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d4  080002d4  000102dc  2**0
                  CONTENTS
  4 .ARM          00000000  080002d4  080002d4  000102dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d4  080002dc  000102dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d4  080002d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002d8  080002d8  000102d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002dc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002dc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000102dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000331  00000000  00000000  00010304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000ff  00000000  00000000  00010635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00010738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000038  00000000  00000000  00010788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd6a  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000051f  00000000  00000000  0001c52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000426ef  00000000  00000000  0001ca49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0005f138  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000078  00000000  00000000  0005f188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080002bc 	.word	0x080002bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	080002bc 	.word	0x080002bc

08000104 <main>:

void delay(unsigned int a);


int main()
{
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0
	RCC->IOPENR = (1<<0) | (1<<1) | (1<<2);
 8000108:	4b2f      	ldr	r3, [pc, #188]	; (80001c8 <main+0xc4>)
 800010a:	2207      	movs	r2, #7
 800010c:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER |= (1<<10);
 800010e:	23a0      	movs	r3, #160	; 0xa0
 8000110:	05db      	lsls	r3, r3, #23
 8000112:	681a      	ldr	r2, [r3, #0]
 8000114:	23a0      	movs	r3, #160	; 0xa0
 8000116:	05db      	lsls	r3, r3, #23
 8000118:	2180      	movs	r1, #128	; 0x80
 800011a:	00c9      	lsls	r1, r1, #3
 800011c:	430a      	orrs	r2, r1
 800011e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1<<11);
 8000120:	23a0      	movs	r3, #160	; 0xa0
 8000122:	05db      	lsls	r3, r3, #23
 8000124:	681a      	ldr	r2, [r3, #0]
 8000126:	23a0      	movs	r3, #160	; 0xa0
 8000128:	05db      	lsls	r3, r3, #23
 800012a:	4928      	ldr	r1, [pc, #160]	; (80001cc <main+0xc8>)
 800012c:	400a      	ands	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1<<28);
 8000130:	4b27      	ldr	r3, [pc, #156]	; (80001d0 <main+0xcc>)
 8000132:	681a      	ldr	r2, [r3, #0]
 8000134:	4b26      	ldr	r3, [pc, #152]	; (80001d0 <main+0xcc>)
 8000136:	2180      	movs	r1, #128	; 0x80
 8000138:	0549      	lsls	r1, r1, #21
 800013a:	430a      	orrs	r2, r1
 800013c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<29);
 800013e:	4b24      	ldr	r3, [pc, #144]	; (80001d0 <main+0xcc>)
 8000140:	681a      	ldr	r2, [r3, #0]
 8000142:	4b23      	ldr	r3, [pc, #140]	; (80001d0 <main+0xcc>)
 8000144:	4923      	ldr	r1, [pc, #140]	; (80001d4 <main+0xd0>)
 8000146:	400a      	ands	r2, r1
 8000148:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(1<<26) | (1<<27);
 800014a:	4b23      	ldr	r3, [pc, #140]	; (80001d8 <main+0xd4>)
 800014c:	681a      	ldr	r2, [r3, #0]
 800014e:	4b22      	ldr	r3, [pc, #136]	; (80001d8 <main+0xd4>)
 8000150:	4922      	ldr	r1, [pc, #136]	; (80001dc <main+0xd8>)
 8000152:	400a      	ands	r2, r1
 8000154:	601a      	str	r2, [r3, #0]

	while(1)
	{
		if(GPIOC->IDR & (1<<13))
 8000156:	4b20      	ldr	r3, [pc, #128]	; (80001d8 <main+0xd4>)
 8000158:	691a      	ldr	r2, [r3, #16]
 800015a:	2380      	movs	r3, #128	; 0x80
 800015c:	019b      	lsls	r3, r3, #6
 800015e:	4013      	ands	r3, r2
 8000160:	d01a      	beq.n	8000198 <main+0x94>
		{
		GPIOA->ODR |= (1<<5);
 8000162:	23a0      	movs	r3, #160	; 0xa0
 8000164:	05db      	lsls	r3, r3, #23
 8000166:	695a      	ldr	r2, [r3, #20]
 8000168:	23a0      	movs	r3, #160	; 0xa0
 800016a:	05db      	lsls	r3, r3, #23
 800016c:	2120      	movs	r1, #32
 800016e:	430a      	orrs	r2, r1
 8000170:	615a      	str	r2, [r3, #20]
		delay(1000);
 8000172:	23fa      	movs	r3, #250	; 0xfa
 8000174:	009b      	lsls	r3, r3, #2
 8000176:	0018      	movs	r0, r3
 8000178:	f000 f834 	bl	80001e4 <delay>
		GPIOA->ODR &= ~(1<<5);
 800017c:	23a0      	movs	r3, #160	; 0xa0
 800017e:	05db      	lsls	r3, r3, #23
 8000180:	695a      	ldr	r2, [r3, #20]
 8000182:	23a0      	movs	r3, #160	; 0xa0
 8000184:	05db      	lsls	r3, r3, #23
 8000186:	2120      	movs	r1, #32
 8000188:	438a      	bics	r2, r1
 800018a:	615a      	str	r2, [r3, #20]
		delay(1000);
 800018c:	23fa      	movs	r3, #250	; 0xfa
 800018e:	009b      	lsls	r3, r3, #2
 8000190:	0018      	movs	r0, r3
 8000192:	f000 f827 	bl	80001e4 <delay>
 8000196:	e7de      	b.n	8000156 <main+0x52>
		}
		else
		{
			GPIOB->ODR |= (1<<14);
 8000198:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <main+0xcc>)
 800019a:	695a      	ldr	r2, [r3, #20]
 800019c:	4b0c      	ldr	r3, [pc, #48]	; (80001d0 <main+0xcc>)
 800019e:	2180      	movs	r1, #128	; 0x80
 80001a0:	01c9      	lsls	r1, r1, #7
 80001a2:	430a      	orrs	r2, r1
 80001a4:	615a      	str	r2, [r3, #20]
			delay(1000);
 80001a6:	23fa      	movs	r3, #250	; 0xfa
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	0018      	movs	r0, r3
 80001ac:	f000 f81a 	bl	80001e4 <delay>
			GPIOB->ODR &= ~(1<<14);
 80001b0:	4b07      	ldr	r3, [pc, #28]	; (80001d0 <main+0xcc>)
 80001b2:	695a      	ldr	r2, [r3, #20]
 80001b4:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <main+0xcc>)
 80001b6:	490a      	ldr	r1, [pc, #40]	; (80001e0 <main+0xdc>)
 80001b8:	400a      	ands	r2, r1
 80001ba:	615a      	str	r2, [r3, #20]
			delay(1000);
 80001bc:	23fa      	movs	r3, #250	; 0xfa
 80001be:	009b      	lsls	r3, r3, #2
 80001c0:	0018      	movs	r0, r3
 80001c2:	f000 f80f 	bl	80001e4 <delay>
		if(GPIOC->IDR & (1<<13))
 80001c6:	e7c6      	b.n	8000156 <main+0x52>
 80001c8:	40021000 	.word	0x40021000
 80001cc:	fffff7ff 	.word	0xfffff7ff
 80001d0:	50000400 	.word	0x50000400
 80001d4:	dfffffff 	.word	0xdfffffff
 80001d8:	50000800 	.word	0x50000800
 80001dc:	fbffffff 	.word	0xfbffffff
 80001e0:	ffffbfff 	.word	0xffffbfff

080001e4 <delay>:
	}
}


void delay(unsigned int a)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i =0; i<a; i++)
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	e00d      	b.n	800020e <delay+0x2a>
		for (j = 0; j<1000; j++);
 80001f2:	2300      	movs	r3, #0
 80001f4:	60bb      	str	r3, [r7, #8]
 80001f6:	e002      	b.n	80001fe <delay+0x1a>
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60bb      	str	r3, [r7, #8]
 80001fe:	68ba      	ldr	r2, [r7, #8]
 8000200:	23fa      	movs	r3, #250	; 0xfa
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	429a      	cmp	r2, r3
 8000206:	d3f7      	bcc.n	80001f8 <delay+0x14>
	for(i =0; i<a; i++)
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	3301      	adds	r3, #1
 800020c:	60fb      	str	r3, [r7, #12]
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	429a      	cmp	r2, r3
 8000214:	d3ed      	bcc.n	80001f2 <delay+0xe>
}
 8000216:	46c0      	nop			; (mov r8, r8)
 8000218:	46c0      	nop			; (mov r8, r8)
 800021a:	46bd      	mov	sp, r7
 800021c:	b004      	add	sp, #16
 800021e:	bd80      	pop	{r7, pc}

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000224:	e000      	b.n	8000228 <Reset_Handler+0x8>
 8000226:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024e:	f000 f811 	bl	8000274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f7ff ff57 	bl	8000104 <main>

08000256 <LoopForever>:

LoopForever:
  b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000264:	080002dc 	.word	0x080002dc
  ldr r2, =_sbss
 8000268:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800026c:	2000001c 	.word	0x2000001c

08000270 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC_IRQHandler>
	...

08000274 <__libc_init_array>:
 8000274:	b570      	push	{r4, r5, r6, lr}
 8000276:	2600      	movs	r6, #0
 8000278:	4d0c      	ldr	r5, [pc, #48]	; (80002ac <__libc_init_array+0x38>)
 800027a:	4c0d      	ldr	r4, [pc, #52]	; (80002b0 <__libc_init_array+0x3c>)
 800027c:	1b64      	subs	r4, r4, r5
 800027e:	10a4      	asrs	r4, r4, #2
 8000280:	42a6      	cmp	r6, r4
 8000282:	d109      	bne.n	8000298 <__libc_init_array+0x24>
 8000284:	2600      	movs	r6, #0
 8000286:	f000 f819 	bl	80002bc <_init>
 800028a:	4d0a      	ldr	r5, [pc, #40]	; (80002b4 <__libc_init_array+0x40>)
 800028c:	4c0a      	ldr	r4, [pc, #40]	; (80002b8 <__libc_init_array+0x44>)
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	10a4      	asrs	r4, r4, #2
 8000292:	42a6      	cmp	r6, r4
 8000294:	d105      	bne.n	80002a2 <__libc_init_array+0x2e>
 8000296:	bd70      	pop	{r4, r5, r6, pc}
 8000298:	00b3      	lsls	r3, r6, #2
 800029a:	58eb      	ldr	r3, [r5, r3]
 800029c:	4798      	blx	r3
 800029e:	3601      	adds	r6, #1
 80002a0:	e7ee      	b.n	8000280 <__libc_init_array+0xc>
 80002a2:	00b3      	lsls	r3, r6, #2
 80002a4:	58eb      	ldr	r3, [r5, r3]
 80002a6:	4798      	blx	r3
 80002a8:	3601      	adds	r6, #1
 80002aa:	e7f2      	b.n	8000292 <__libc_init_array+0x1e>
 80002ac:	080002d4 	.word	0x080002d4
 80002b0:	080002d4 	.word	0x080002d4
 80002b4:	080002d4 	.word	0x080002d4
 80002b8:	080002d8 	.word	0x080002d8

080002bc <_init>:
 80002bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002c2:	bc08      	pop	{r3}
 80002c4:	469e      	mov	lr, r3
 80002c6:	4770      	bx	lr

080002c8 <_fini>:
 80002c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ce:	bc08      	pop	{r3}
 80002d0:	469e      	mov	lr, r3
 80002d2:	4770      	bx	lr

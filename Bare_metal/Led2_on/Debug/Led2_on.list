
Led2_on.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002a0  080002a8  000102a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002a0  080002a0  000102a8  2**0
                  CONTENTS
  4 .ARM          00000000  080002a0  080002a0  000102a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002a0  080002a8  000102a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002a0  080002a0  000102a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002a4  080002a4  000102a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002a8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000102a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000331  00000000  00000000  000102d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000ff  00000000  00000000  00010601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00010700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000038  00000000  00000000  00010750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd6a  00000000  00000000  00010788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000527  00000000  00000000  0001c4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000426f0  00000000  00000000  0001ca19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0005f109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000078  00000000  00000000  0005f15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000288 	.word	0x08000288

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000288 	.word	0x08000288

08000104 <main>:
#include <stm32g070xx.h>

void delay(unsigned int a);

int main()
{
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0
	RCC->IOPENR = (1<<0) | (1<<1);
 8000108:	4b24      	ldr	r3, [pc, #144]	; (800019c <main+0x98>)
 800010a:	2203      	movs	r2, #3
 800010c:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER |= (1<<10);
 800010e:	23a0      	movs	r3, #160	; 0xa0
 8000110:	05db      	lsls	r3, r3, #23
 8000112:	681a      	ldr	r2, [r3, #0]
 8000114:	23a0      	movs	r3, #160	; 0xa0
 8000116:	05db      	lsls	r3, r3, #23
 8000118:	2180      	movs	r1, #128	; 0x80
 800011a:	00c9      	lsls	r1, r1, #3
 800011c:	430a      	orrs	r2, r1
 800011e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1<<11);
 8000120:	23a0      	movs	r3, #160	; 0xa0
 8000122:	05db      	lsls	r3, r3, #23
 8000124:	681a      	ldr	r2, [r3, #0]
 8000126:	23a0      	movs	r3, #160	; 0xa0
 8000128:	05db      	lsls	r3, r3, #23
 800012a:	491d      	ldr	r1, [pc, #116]	; (80001a0 <main+0x9c>)
 800012c:	400a      	ands	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1<<28);
 8000130:	4b1c      	ldr	r3, [pc, #112]	; (80001a4 <main+0xa0>)
 8000132:	681a      	ldr	r2, [r3, #0]
 8000134:	4b1b      	ldr	r3, [pc, #108]	; (80001a4 <main+0xa0>)
 8000136:	2180      	movs	r1, #128	; 0x80
 8000138:	0549      	lsls	r1, r1, #21
 800013a:	430a      	orrs	r2, r1
 800013c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<29);
 800013e:	4b19      	ldr	r3, [pc, #100]	; (80001a4 <main+0xa0>)
 8000140:	681a      	ldr	r2, [r3, #0]
 8000142:	4b18      	ldr	r3, [pc, #96]	; (80001a4 <main+0xa0>)
 8000144:	4918      	ldr	r1, [pc, #96]	; (80001a8 <main+0xa4>)
 8000146:	400a      	ands	r2, r1
 8000148:	601a      	str	r2, [r3, #0]

	while(1)
	{
		GPIOA->ODR |= (1<<5);
 800014a:	23a0      	movs	r3, #160	; 0xa0
 800014c:	05db      	lsls	r3, r3, #23
 800014e:	695a      	ldr	r2, [r3, #20]
 8000150:	23a0      	movs	r3, #160	; 0xa0
 8000152:	05db      	lsls	r3, r3, #23
 8000154:	2120      	movs	r1, #32
 8000156:	430a      	orrs	r2, r1
 8000158:	615a      	str	r2, [r3, #20]
		//delay(1000);
		GPIOB->ODR |= (1<<14);
 800015a:	4b12      	ldr	r3, [pc, #72]	; (80001a4 <main+0xa0>)
 800015c:	695a      	ldr	r2, [r3, #20]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <main+0xa0>)
 8000160:	2180      	movs	r1, #128	; 0x80
 8000162:	01c9      	lsls	r1, r1, #7
 8000164:	430a      	orrs	r2, r1
 8000166:	615a      	str	r2, [r3, #20]
		delay(1000);
 8000168:	23fa      	movs	r3, #250	; 0xfa
 800016a:	009b      	lsls	r3, r3, #2
 800016c:	0018      	movs	r0, r3
 800016e:	f000 f81f 	bl	80001b0 <delay>
		GPIOA->ODR &= ~(1<<5);
 8000172:	23a0      	movs	r3, #160	; 0xa0
 8000174:	05db      	lsls	r3, r3, #23
 8000176:	695a      	ldr	r2, [r3, #20]
 8000178:	23a0      	movs	r3, #160	; 0xa0
 800017a:	05db      	lsls	r3, r3, #23
 800017c:	2120      	movs	r1, #32
 800017e:	438a      	bics	r2, r1
 8000180:	615a      	str	r2, [r3, #20]
		//delay(1000);
		GPIOB->ODR &= ~(1<<14);
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <main+0xa0>)
 8000184:	695a      	ldr	r2, [r3, #20]
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <main+0xa0>)
 8000188:	4908      	ldr	r1, [pc, #32]	; (80001ac <main+0xa8>)
 800018a:	400a      	ands	r2, r1
 800018c:	615a      	str	r2, [r3, #20]
		delay(1000);
 800018e:	23fa      	movs	r3, #250	; 0xfa
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	0018      	movs	r0, r3
 8000194:	f000 f80c 	bl	80001b0 <delay>
		GPIOA->ODR |= (1<<5);
 8000198:	e7d7      	b.n	800014a <main+0x46>
 800019a:	46c0      	nop			; (mov r8, r8)
 800019c:	40021000 	.word	0x40021000
 80001a0:	fffff7ff 	.word	0xfffff7ff
 80001a4:	50000400 	.word	0x50000400
 80001a8:	dfffffff 	.word	0xdfffffff
 80001ac:	ffffbfff 	.word	0xffffbfff

080001b0 <delay>:
}



void delay(unsigned int a)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i =0; i<a; i++)
 80001b8:	2300      	movs	r3, #0
 80001ba:	60fb      	str	r3, [r7, #12]
 80001bc:	e00d      	b.n	80001da <delay+0x2a>
		for (j = 0; j<1000; j++);
 80001be:	2300      	movs	r3, #0
 80001c0:	60bb      	str	r3, [r7, #8]
 80001c2:	e002      	b.n	80001ca <delay+0x1a>
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	3301      	adds	r3, #1
 80001c8:	60bb      	str	r3, [r7, #8]
 80001ca:	68ba      	ldr	r2, [r7, #8]
 80001cc:	23fa      	movs	r3, #250	; 0xfa
 80001ce:	009b      	lsls	r3, r3, #2
 80001d0:	429a      	cmp	r2, r3
 80001d2:	d3f7      	bcc.n	80001c4 <delay+0x14>
	for(i =0; i<a; i++)
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	3301      	adds	r3, #1
 80001d8:	60fb      	str	r3, [r7, #12]
 80001da:	68fa      	ldr	r2, [r7, #12]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d3ed      	bcc.n	80001be <delay+0xe>
}
 80001e2:	46c0      	nop			; (mov r8, r8)
 80001e4:	46c0      	nop			; (mov r8, r8)
 80001e6:	46bd      	mov	sp, r7
 80001e8:	b004      	add	sp, #16
 80001ea:	bd80      	pop	{r7, pc}

080001ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001f0:	e000      	b.n	80001f4 <Reset_Handler+0x8>
 80001f2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f4:	480c      	ldr	r0, [pc, #48]	; (8000228 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f6:	490d      	ldr	r1, [pc, #52]	; (800022c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <LoopForever+0xe>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001fc:	e002      	b.n	8000204 <LoopCopyDataInit>

080001fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000202:	3304      	adds	r3, #4

08000204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000208:	d3f9      	bcc.n	80001fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020a:	4a0a      	ldr	r2, [pc, #40]	; (8000234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800020c:	4c0a      	ldr	r4, [pc, #40]	; (8000238 <LoopForever+0x16>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000210:	e001      	b.n	8000216 <LoopFillZerobss>

08000212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000214:	3204      	adds	r2, #4

08000216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000218:	d3fb      	bcc.n	8000212 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021a:	f000 f811 	bl	8000240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021e:	f7ff ff71 	bl	8000104 <main>

08000222 <LoopForever>:

LoopForever:
  b LoopForever
 8000222:	e7fe      	b.n	8000222 <LoopForever>
  ldr   r0, =_estack
 8000224:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800022c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000230:	080002a8 	.word	0x080002a8
  ldr r2, =_sbss
 8000234:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000238:	2000001c 	.word	0x2000001c

0800023c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC_IRQHandler>
	...

08000240 <__libc_init_array>:
 8000240:	b570      	push	{r4, r5, r6, lr}
 8000242:	2600      	movs	r6, #0
 8000244:	4d0c      	ldr	r5, [pc, #48]	; (8000278 <__libc_init_array+0x38>)
 8000246:	4c0d      	ldr	r4, [pc, #52]	; (800027c <__libc_init_array+0x3c>)
 8000248:	1b64      	subs	r4, r4, r5
 800024a:	10a4      	asrs	r4, r4, #2
 800024c:	42a6      	cmp	r6, r4
 800024e:	d109      	bne.n	8000264 <__libc_init_array+0x24>
 8000250:	2600      	movs	r6, #0
 8000252:	f000 f819 	bl	8000288 <_init>
 8000256:	4d0a      	ldr	r5, [pc, #40]	; (8000280 <__libc_init_array+0x40>)
 8000258:	4c0a      	ldr	r4, [pc, #40]	; (8000284 <__libc_init_array+0x44>)
 800025a:	1b64      	subs	r4, r4, r5
 800025c:	10a4      	asrs	r4, r4, #2
 800025e:	42a6      	cmp	r6, r4
 8000260:	d105      	bne.n	800026e <__libc_init_array+0x2e>
 8000262:	bd70      	pop	{r4, r5, r6, pc}
 8000264:	00b3      	lsls	r3, r6, #2
 8000266:	58eb      	ldr	r3, [r5, r3]
 8000268:	4798      	blx	r3
 800026a:	3601      	adds	r6, #1
 800026c:	e7ee      	b.n	800024c <__libc_init_array+0xc>
 800026e:	00b3      	lsls	r3, r6, #2
 8000270:	58eb      	ldr	r3, [r5, r3]
 8000272:	4798      	blx	r3
 8000274:	3601      	adds	r6, #1
 8000276:	e7f2      	b.n	800025e <__libc_init_array+0x1e>
 8000278:	080002a0 	.word	0x080002a0
 800027c:	080002a0 	.word	0x080002a0
 8000280:	080002a0 	.word	0x080002a0
 8000284:	080002a4 	.word	0x080002a4

08000288 <_init>:
 8000288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800028e:	bc08      	pop	{r3}
 8000290:	469e      	mov	lr, r3
 8000292:	4770      	bx	lr

08000294 <_fini>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029a:	bc08      	pop	{r3}
 800029c:	469e      	mov	lr, r3
 800029e:	4770      	bx	lr

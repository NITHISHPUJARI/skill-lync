
Ext_interupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f00  08005f00  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005f00  08005f00  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f00  08005f00  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  20000078  08005f80  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ca8  08005f80  00021ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016455  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326f  00000000  00000000  000364f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00039768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185d2  00000000  00000000  0003bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017019  00000000  00000000  00054382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000984fd  00000000  00000000  0006b39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103898  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  001038e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d4c 	.word	0x08005d4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08005d4c 	.word	0x08005d4c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fc4b 	bl	8000c94 <HAL_Init>

  /* USER CODE BEGIN Init */
  GPIO_Init();
 80003fe:	f000 f945 	bl	800068c <GPIO_Init>
  EXTI_Init();
 8000402:	f000 f99b 	bl	800073c <EXTI_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000406:	f000 f847 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040a:	f000 f8db 	bl	80005c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800040e:	f000 f88b 	bl	8000528 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Create three tasks with different priorities
      xTaskCreate(vTask1, "Task 1", configMINIMAL_STACK_SIZE, NULL, 1, &xTask1Handle);
 8000412:	4918      	ldr	r1, [pc, #96]	; (8000474 <main+0x80>)
 8000414:	4818      	ldr	r0, [pc, #96]	; (8000478 <main+0x84>)
 8000416:	4b19      	ldr	r3, [pc, #100]	; (800047c <main+0x88>)
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	2301      	movs	r3, #1
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	2300      	movs	r3, #0
 8000420:	223c      	movs	r2, #60	; 0x3c
 8000422:	f003 f9ba 	bl	800379a <xTaskCreate>
      xTaskCreate(vTask2, "Task 2", configMINIMAL_STACK_SIZE, NULL,  1, &xTask2Handle);
 8000426:	4916      	ldr	r1, [pc, #88]	; (8000480 <main+0x8c>)
 8000428:	4816      	ldr	r0, [pc, #88]	; (8000484 <main+0x90>)
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <main+0x94>)
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	2301      	movs	r3, #1
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2300      	movs	r3, #0
 8000434:	223c      	movs	r2, #60	; 0x3c
 8000436:	f003 f9b0 	bl	800379a <xTaskCreate>
      xTaskCreate(vTask3, "Task 3", configMINIMAL_STACK_SIZE, NULL,  1, &xTask3Handle);
 800043a:	4914      	ldr	r1, [pc, #80]	; (800048c <main+0x98>)
 800043c:	4814      	ldr	r0, [pc, #80]	; (8000490 <main+0x9c>)
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <main+0xa0>)
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	2301      	movs	r3, #1
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2300      	movs	r3, #0
 8000448:	223c      	movs	r2, #60	; 0x3c
 800044a:	f003 f9a6 	bl	800379a <xTaskCreate>

      // Suspend the tasks until button is pressed
      vTaskSuspend(xTask1Handle);
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <main+0x88>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	0018      	movs	r0, r3
 8000454:	f003 fb24 	bl	8003aa0 <vTaskSuspend>
      vTaskSuspend(xTask2Handle);
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <main+0x94>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	0018      	movs	r0, r3
 800045e:	f003 fb1f 	bl	8003aa0 <vTaskSuspend>
      vTaskSuspend(xTask3Handle);
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <main+0xa0>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	0018      	movs	r0, r3
 8000468:	f003 fb1a 	bl	8003aa0 <vTaskSuspend>

      // Start the scheduler
      vTaskStartScheduler();
 800046c:	f003 fc26 	bl	8003cbc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000470:	e7fe      	b.n	8000470 <main+0x7c>
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	08005d64 	.word	0x08005d64
 8000478:	08000801 	.word	0x08000801
 800047c:	20000138 	.word	0x20000138
 8000480:	08005d6c 	.word	0x08005d6c
 8000484:	08000825 	.word	0x08000825
 8000488:	2000013c 	.word	0x2000013c
 800048c:	08005d74 	.word	0x08005d74
 8000490:	08000849 	.word	0x08000849
 8000494:	20000140 	.word	0x20000140

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b093      	sub	sp, #76	; 0x4c
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	2414      	movs	r4, #20
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2334      	movs	r3, #52	; 0x34
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f004 feec 	bl	8005286 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	0018      	movs	r0, r3
 80004b2:	2310      	movs	r3, #16
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f004 fee5 	bl	8005286 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 ff79 	bl	80013b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2202      	movs	r2, #2
 80004ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	0052      	lsls	r2, r2, #1
 80004d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2240      	movs	r2, #64	; 0x40
 80004de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 ffb1 	bl	8001450 <HAL_RCC_OscConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004f2:	f000 fa1b 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2207      	movs	r2, #7
 80004fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2100      	movs	r1, #0
 8000512:	0018      	movs	r0, r3
 8000514:	f001 faac 	bl	8001a70 <HAL_RCC_ClockConfig>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800051c:	f000 fa06 	bl	800092c <Error_Handler>
  }
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b013      	add	sp, #76	; 0x4c
 8000526:	bd90      	pop	{r4, r7, pc}

08000528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800052c:	4b23      	ldr	r3, [pc, #140]	; (80005bc <MX_USART2_UART_Init+0x94>)
 800052e:	4a24      	ldr	r2, [pc, #144]	; (80005c0 <MX_USART2_UART_Init+0x98>)
 8000530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000532:	4b22      	ldr	r3, [pc, #136]	; (80005bc <MX_USART2_UART_Init+0x94>)
 8000534:	22e1      	movs	r2, #225	; 0xe1
 8000536:	0252      	lsls	r2, r2, #9
 8000538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <MX_USART2_UART_Init+0x94>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <MX_USART2_UART_Init+0x94>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000546:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <MX_USART2_UART_Init+0x94>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <MX_USART2_UART_Init+0x94>)
 800054e:	220c      	movs	r2, #12
 8000550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000552:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <MX_USART2_UART_Init+0x94>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <MX_USART2_UART_Init+0x94>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_USART2_UART_Init+0x94>)
 8000560:	2200      	movs	r2, #0
 8000562:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_USART2_UART_Init+0x94>)
 8000566:	2200      	movs	r2, #0
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_USART2_UART_Init+0x94>)
 800056c:	2200      	movs	r2, #0
 800056e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_USART2_UART_Init+0x94>)
 8000572:	0018      	movs	r0, r3
 8000574:	f002 f81a 	bl	80025ac <HAL_UART_Init>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800057c:	f000 f9d6 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_USART2_UART_Init+0x94>)
 8000582:	2100      	movs	r1, #0
 8000584:	0018      	movs	r0, r3
 8000586:	f002 fcab 	bl	8002ee0 <HAL_UARTEx_SetTxFifoThreshold>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800058e:	f000 f9cd 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <MX_USART2_UART_Init+0x94>)
 8000594:	2100      	movs	r1, #0
 8000596:	0018      	movs	r0, r3
 8000598:	f002 fce2 	bl	8002f60 <HAL_UARTEx_SetRxFifoThreshold>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80005a0:	f000 f9c4 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MX_USART2_UART_Init+0x94>)
 80005a6:	0018      	movs	r0, r3
 80005a8:	f002 fc60 	bl	8002e6c <HAL_UARTEx_DisableFifoMode>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80005b0:	f000 f9bc 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	20000094 	.word	0x20000094
 80005c0:	40004400 	.word	0x40004400

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b089      	sub	sp, #36	; 0x24
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	240c      	movs	r4, #12
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	0018      	movs	r0, r3
 80005d0:	2314      	movs	r3, #20
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f004 fe56 	bl	8005286 <memset>

/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_GPIO_Init+0xc0>)
 80005dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <MX_GPIO_Init+0xc0>)
 80005e0:	2104      	movs	r1, #4
 80005e2:	430a      	orrs	r2, r1
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
 80005e6:	4b27      	ldr	r3, [pc, #156]	; (8000684 <MX_GPIO_Init+0xc0>)
 80005e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ea:	2204      	movs	r2, #4
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f2:	4b24      	ldr	r3, [pc, #144]	; (8000684 <MX_GPIO_Init+0xc0>)
 80005f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_GPIO_Init+0xc0>)
 80005f8:	2120      	movs	r1, #32
 80005fa:	430a      	orrs	r2, r1
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_GPIO_Init+0xc0>)
 8000600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000602:	2220      	movs	r2, #32
 8000604:	4013      	ands	r3, r2
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_GPIO_Init+0xc0>)
 800060c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_GPIO_Init+0xc0>)
 8000610:	2101      	movs	r1, #1
 8000612:	430a      	orrs	r2, r1
 8000614:	635a      	str	r2, [r3, #52]	; 0x34
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_GPIO_Init+0xc0>)
 8000618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061a:	2201      	movs	r2, #1
 800061c:	4013      	ands	r3, r2
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000622:	23a0      	movs	r3, #160	; 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2200      	movs	r2, #0
 8000628:	2120      	movs	r1, #32
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fe4e 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	0192      	lsls	r2, r2, #6
 8000636:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2288      	movs	r2, #136	; 0x88
 800063c:	0352      	lsls	r2, r2, #13
 800063e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	193b      	adds	r3, r7, r4
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000646:	193b      	adds	r3, r7, r4
 8000648:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <MX_GPIO_Init+0xc4>)
 800064a:	0019      	movs	r1, r3
 800064c:	0010      	movs	r0, r2
 800064e:	f000 fcd9 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000652:	0021      	movs	r1, r4
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2220      	movs	r2, #32
 8000658:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2201      	movs	r2, #1
 800065e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	187a      	adds	r2, r7, r1
 800066e:	23a0      	movs	r3, #160	; 0xa0
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fcc5 	bl	8001004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b009      	add	sp, #36	; 0x24
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40021000 	.word	0x40021000
 8000688:	50000800 	.word	0x50000800

0800068c <GPIO_Init>:

/* USER CODE BEGIN 4 */
// GPIO initialization function
void GPIO_Init(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0

    // Enable GPIOA and GPIOC clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <GPIO_Init+0xa8>)
 8000694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000696:	4b27      	ldr	r3, [pc, #156]	; (8000734 <GPIO_Init+0xa8>)
 8000698:	2101      	movs	r1, #1
 800069a:	430a      	orrs	r2, r1
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <GPIO_Init+0xa8>)
 80006a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a2:	2201      	movs	r2, #1
 80006a4:	4013      	ands	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <GPIO_Init+0xa8>)
 80006ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <GPIO_Init+0xa8>)
 80006b0:	2104      	movs	r1, #4
 80006b2:	430a      	orrs	r2, r1
 80006b4:	635a      	str	r2, [r3, #52]	; 0x34
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <GPIO_Init+0xa8>)
 80006b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ba:	2204      	movs	r2, #4
 80006bc:	4013      	ands	r3, r2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

    // Configure LED pin as output
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	240c      	movs	r4, #12
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2314      	movs	r3, #20
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f004 fdda 	bl	8005286 <memset>
    GPIO_InitStruct.Pin = LED_PIN;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2220      	movs	r2, #32
 80006d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2201      	movs	r2, #1
 80006dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 80006ea:	193a      	adds	r2, r7, r4
 80006ec:	23a0      	movs	r3, #160	; 0xa0
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fc86 	bl	8001004 <HAL_GPIO_Init>

    // Configure button pin as input
    GPIO_InitStruct.Pin = BUTTON_PIN;
 80006f8:	0021      	movs	r1, r4
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0192      	lsls	r2, r2, #6
 8000700:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2288      	movs	r2, #136	; 0x88
 8000706:	0352      	lsls	r2, r2, #13
 8000708:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2201      	movs	r2, #1
 800070e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 8000710:	187b      	adds	r3, r7, r1
 8000712:	4a09      	ldr	r2, [pc, #36]	; (8000738 <GPIO_Init+0xac>)
 8000714:	0019      	movs	r1, r3
 8000716:	0010      	movs	r0, r2
 8000718:	f000 fc74 	bl	8001004 <HAL_GPIO_Init>

    // Enable and set EXTI interrupt
    HAL_NVIC_SetPriority(EXTI_IRQ, EXTI_IRQ_PRIORITY, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2105      	movs	r1, #5
 8000720:	2007      	movs	r0, #7
 8000722:	f000 fb7b 	bl	8000e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI_IRQ);
 8000726:	2007      	movs	r0, #7
 8000728:	f000 fb8d 	bl	8000e46 <HAL_NVIC_EnableIRQ>
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b009      	add	sp, #36	; 0x24
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	40021000 	.word	0x40021000
 8000738:	50000800 	.word	0x50000800

0800073c <EXTI_Init>:

// External interrupt initialization function
void EXTI_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
	EXTI_ConfigTypeDef extiConfig;
	extiConfig.Line = EXTI_LINE_13;
 8000742:	003b      	movs	r3, r7
 8000744:	4a08      	ldr	r2, [pc, #32]	; (8000768 <EXTI_Init+0x2c>)
 8000746:	601a      	str	r2, [r3, #0]
	extiConfig.Mode = EXTI_MODE_INTERRUPT;
 8000748:	003b      	movs	r3, r7
 800074a:	2201      	movs	r2, #1
 800074c:	605a      	str	r2, [r3, #4]
	extiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 800074e:	003b      	movs	r3, r7
 8000750:	2203      	movs	r2, #3
 8000752:	609a      	str	r2, [r3, #8]
	HAL_EXTI_SetConfigLine(&hexti, &extiConfig);
 8000754:	003a      	movs	r2, r7
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <EXTI_Init+0x30>)
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fb84 	bl	8000e68 <HAL_EXTI_SetConfigLine>

    // Configure EXTI line for button interrupt
    //HAL_EXTI_SetConfigLine(&hexti, EXTI_LINE);
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b004      	add	sp, #16
 8000766:	bd80      	pop	{r7, pc}
 8000768:	0600000d 	.word	0x0600000d
 800076c:	20000128 	.word	0x20000128

08000770 <transmit1>:

void transmit1 (void)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
	uint8_t data[] = "HELLO TASK1\r\n";
 8000776:	003b      	movs	r3, r7
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <transmit1+0x28>)
 800077a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800077c:	c313      	stmia	r3!, {r0, r1, r4}
 800077e:	8812      	ldrh	r2, [r2, #0]
 8000780:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 8000782:	23fa      	movs	r3, #250	; 0xfa
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	0039      	movs	r1, r7
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <transmit1+0x2c>)
 800078a:	220e      	movs	r2, #14
 800078c:	f001 ff64 	bl	8002658 <HAL_UART_Transmit>
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b005      	add	sp, #20
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	08005d7c 	.word	0x08005d7c
 800079c:	20000094 	.word	0x20000094

080007a0 <transmit2>:

void transmit2 (void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
	uint8_t data[] = "HELLO TASK2\r\n";
 80007a6:	003b      	movs	r3, r7
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <transmit2+0x28>)
 80007aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ac:	c313      	stmia	r3!, {r0, r1, r4}
 80007ae:	8812      	ldrh	r2, [r2, #0]
 80007b0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 80007b2:	23fa      	movs	r3, #250	; 0xfa
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	0039      	movs	r1, r7
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <transmit2+0x2c>)
 80007ba:	220e      	movs	r2, #14
 80007bc:	f001 ff4c 	bl	8002658 <HAL_UART_Transmit>
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b005      	add	sp, #20
 80007c6:	bd90      	pop	{r4, r7, pc}
 80007c8:	08005d8c 	.word	0x08005d8c
 80007cc:	20000094 	.word	0x20000094

080007d0 <transmit3>:

void transmit3 (void)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
	uint8_t data[] = "HELLO TASK3\r\n";
 80007d6:	003b      	movs	r3, r7
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <transmit3+0x28>)
 80007da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007dc:	c313      	stmia	r3!, {r0, r1, r4}
 80007de:	8812      	ldrh	r2, [r2, #0]
 80007e0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 80007e2:	23fa      	movs	r3, #250	; 0xfa
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	0039      	movs	r1, r7
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <transmit3+0x2c>)
 80007ea:	220e      	movs	r2, #14
 80007ec:	f001 ff34 	bl	8002658 <HAL_UART_Transmit>
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b005      	add	sp, #20
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	08005d9c 	.word	0x08005d9c
 80007fc:	20000094 	.word	0x20000094

08000800 <vTask1>:

// Task 1 function: Toggle LED every second
void vTask1(void *pvParameters)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    while (1)
    {
        HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2120      	movs	r1, #32
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fd79 	bl	8001306 <HAL_GPIO_TogglePin>
        transmit1();
 8000814:	f7ff ffac 	bl	8000770 <transmit1>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8000818:	23fa      	movs	r3, #250	; 0xfa
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	0018      	movs	r0, r3
 800081e:	f003 f919 	bl	8003a54 <vTaskDelay>
        HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8000822:	e7f1      	b.n	8000808 <vTask1+0x8>

08000824 <vTask2>:
    }
}

// Task 2 function: Print a message every two seconds
void vTask2(void *pvParameters)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    while (1)
    {
        printf("Hello from task 2\n");
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <vTask2+0x20>)
 800082e:	0018      	movs	r0, r3
 8000830:	f004 fda4 	bl	800537c <puts>
        transmit2();
 8000834:	f7ff ffb4 	bl	80007a0 <transmit2>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8000838:	23fa      	movs	r3, #250	; 0xfa
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	0018      	movs	r0, r3
 800083e:	f003 f909 	bl	8003a54 <vTaskDelay>
        printf("Hello from task 2\n");
 8000842:	e7f3      	b.n	800082c <vTask2+0x8>
 8000844:	08005dac 	.word	0x08005dac

08000848 <vTask3>:
    }
}

// Task 3 function: Print a message every three seconds
void vTask3(void *pvParameters)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    while (1)
    {
        printf("Hello from task 3\n");
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <vTask3+0x20>)
 8000852:	0018      	movs	r0, r3
 8000854:	f004 fd92 	bl	800537c <puts>
        transmit3();
 8000858:	f7ff ffba 	bl	80007d0 <transmit3>
        vTaskDelay(pdMS_TO_TICKS(1000));
 800085c:	23fa      	movs	r3, #250	; 0xfa
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	0018      	movs	r0, r3
 8000862:	f003 f8f7 	bl	8003a54 <vTaskDelay>
        printf("Hello from task 3\n");
 8000866:	e7f3      	b.n	8000850 <vTask3+0x8>
 8000868:	08005dc0 	.word	0x08005dc0

0800086c <EXTI4_15_IRQHandler>:
    }
}

// External interrupt handler function: Resume tasks on button press
void EXTI4_15_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_FLAG(BUTTON_PIN))
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <EXTI4_15_IRQHandler+0x88>)
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	019b      	lsls	r3, r3, #6
 8000878:	4013      	ands	r3, r2
 800087a:	d105      	bne.n	8000888 <EXTI4_15_IRQHandler+0x1c>
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <EXTI4_15_IRQHandler+0x88>)
 800087e:	691a      	ldr	r2, [r3, #16]
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	019b      	lsls	r3, r3, #6
 8000884:	4013      	ands	r3, r2
 8000886:	d031      	beq.n	80008ec <EXTI4_15_IRQHandler+0x80>
    {
        HAL_GPIO_EXTI_IRQHandler(BUTTON_PIN);
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	019b      	lsls	r3, r3, #6
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fd55 	bl	800133c <HAL_GPIO_EXTI_IRQHandler>

        g_button_pressed = !g_button_pressed;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <EXTI4_15_IRQHandler+0x8c>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	425a      	negs	r2, r3
 800089a:	4153      	adcs	r3, r2
 800089c:	b2db      	uxtb	r3, r3
 800089e:	001a      	movs	r2, r3
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <EXTI4_15_IRQHandler+0x8c>)
 80008a2:	701a      	strb	r2, [r3, #0]

        if (g_button_pressed)
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <EXTI4_15_IRQHandler+0x8c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00f      	beq.n	80008ce <EXTI4_15_IRQHandler+0x62>
        {
            vTaskResume(xTask1Handle);
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <EXTI4_15_IRQHandler+0x90>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	0018      	movs	r0, r3
 80008b4:	f003 f98e 	bl	8003bd4 <vTaskResume>
            vTaskResume(xTask2Handle);
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <EXTI4_15_IRQHandler+0x94>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	0018      	movs	r0, r3
 80008be:	f003 f989 	bl	8003bd4 <vTaskResume>
            vTaskResume(xTask3Handle);
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <EXTI4_15_IRQHandler+0x98>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	0018      	movs	r0, r3
 80008c8:	f003 f984 	bl	8003bd4 <vTaskResume>
            vTaskSuspend(xTask1Handle);
            vTaskSuspend(xTask2Handle);
            vTaskSuspend(xTask3Handle);
        }
    }
}
 80008cc:	e00e      	b.n	80008ec <EXTI4_15_IRQHandler+0x80>
            vTaskSuspend(xTask1Handle);
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <EXTI4_15_IRQHandler+0x90>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	0018      	movs	r0, r3
 80008d4:	f003 f8e4 	bl	8003aa0 <vTaskSuspend>
            vTaskSuspend(xTask2Handle);
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <EXTI4_15_IRQHandler+0x94>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	0018      	movs	r0, r3
 80008de:	f003 f8df 	bl	8003aa0 <vTaskSuspend>
            vTaskSuspend(xTask3Handle);
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <EXTI4_15_IRQHandler+0x98>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	0018      	movs	r0, r3
 80008e8:	f003 f8da 	bl	8003aa0 <vTaskSuspend>
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40021800 	.word	0x40021800
 80008f8:	20000134 	.word	0x20000134
 80008fc:	20000138 	.word	0x20000138
 8000900:	2000013c 	.word	0x2000013c
 8000904:	20000140 	.word	0x20000140

08000908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d101      	bne.n	800091e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091a:	f000 f9db 	bl	8000cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40000400 	.word	0x40000400

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_MspInit+0x44>)
 8000940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_MspInit+0x44>)
 8000944:	2101      	movs	r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	641a      	str	r2, [r3, #64]	; 0x40
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_MspInit+0x44>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	2201      	movs	r2, #1
 8000950:	4013      	ands	r3, r2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x44>)
 8000958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_MspInit+0x44>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0549      	lsls	r1, r1, #21
 8000960:	430a      	orrs	r2, r1
 8000962:	63da      	str	r2, [r3, #60]	; 0x3c
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_MspInit+0x44>)
 8000966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	055b      	lsls	r3, r3, #21
 800096c:	4013      	ands	r3, r2
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b091      	sub	sp, #68	; 0x44
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	232c      	movs	r3, #44	; 0x2c
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	0018      	movs	r0, r3
 800098e:	2314      	movs	r3, #20
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f004 fc77 	bl	8005286 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000998:	2410      	movs	r4, #16
 800099a:	193b      	adds	r3, r7, r4
 800099c:	0018      	movs	r0, r3
 800099e:	231c      	movs	r3, #28
 80009a0:	001a      	movs	r2, r3
 80009a2:	2100      	movs	r1, #0
 80009a4:	f004 fc6f 	bl	8005286 <memset>
  if(huart->Instance==USART2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <HAL_UART_MspInit+0xb8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d13e      	bne.n	8000a30 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2202      	movs	r2, #2
 80009b6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 fa29 	bl	8001e18 <HAL_RCCEx_PeriphCLKConfig>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ca:	f7ff ffaf 	bl	800092c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <HAL_UART_MspInit+0xbc>)
 80009d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <HAL_UART_MspInit+0xbc>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0289      	lsls	r1, r1, #10
 80009d8:	430a      	orrs	r2, r1
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_UART_MspInit+0xbc>)
 80009de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	029b      	lsls	r3, r3, #10
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_UART_MspInit+0xbc>)
 80009ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <HAL_UART_MspInit+0xbc>)
 80009f0:	2101      	movs	r1, #1
 80009f2:	430a      	orrs	r2, r1
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_UART_MspInit+0xbc>)
 80009f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fa:	2201      	movs	r2, #1
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a02:	212c      	movs	r1, #44	; 0x2c
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	220c      	movs	r2, #12
 8000a08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2201      	movs	r2, #1
 8000a20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	187a      	adds	r2, r7, r1
 8000a24:	23a0      	movs	r3, #160	; 0xa0
 8000a26:	05db      	lsls	r3, r3, #23
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 faea 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b011      	add	sp, #68	; 0x44
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a48:	232b      	movs	r3, #43	; 0x2b
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000a50:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <HAL_InitTick+0xf0>)
 8000a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a54:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <HAL_InitTick+0xf0>)
 8000a56:	2102      	movs	r1, #2
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a5c:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <HAL_InitTick+0xf0>)
 8000a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a60:	2202      	movs	r2, #2
 8000a62:	4013      	ands	r3, r2
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a68:	230c      	movs	r3, #12
 8000a6a:	18fa      	adds	r2, r7, r3
 8000a6c:	2410      	movs	r4, #16
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 f9a6 	bl	8001dc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d104      	bne.n	8000a8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a84:	f001 f988 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a8c:	e004      	b.n	8000a98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a8e:	f001 f983 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 8000a92:	0003      	movs	r3, r0
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9a:	4926      	ldr	r1, [pc, #152]	; (8000b34 <HAL_InitTick+0xf4>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff fb33 	bl	8000108 <__udivsi3>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <HAL_InitTick+0xf8>)
 8000aaa:	4a24      	ldr	r2, [pc, #144]	; (8000b3c <HAL_InitTick+0xfc>)
 8000aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <HAL_InitTick+0xf8>)
 8000ab0:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <HAL_InitTick+0x100>)
 8000ab2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <HAL_InitTick+0xf8>)
 8000ab6:	6a3a      	ldr	r2, [r7, #32]
 8000ab8:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <HAL_InitTick+0xf8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <HAL_InitTick+0xf8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_InitTick+0xf8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000acc:	252b      	movs	r5, #43	; 0x2b
 8000ace:	197c      	adds	r4, r7, r5
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_InitTick+0xf8>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f001 fad4 	bl	8002080 <HAL_TIM_Base_Init>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000adc:	197b      	adds	r3, r7, r5
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d11e      	bne.n	8000b22 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000ae4:	197c      	adds	r4, r7, r5
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_InitTick+0xf8>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fb29 	bl	8002140 <HAL_TIM_Base_Start_IT>
 8000aee:	0003      	movs	r3, r0
 8000af0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000af2:	197b      	adds	r3, r7, r5
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d113      	bne.n	8000b22 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000afa:	2010      	movs	r0, #16
 8000afc:	f000 f9a3 	bl	8000e46 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d809      	bhi.n	8000b1a <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	2010      	movs	r0, #16
 8000b0e:	f000 f985 	bl	8000e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_InitTick+0x104>)
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	e003      	b.n	8000b22 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000b1a:	232b      	movs	r3, #43	; 0x2b
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000b22:	232b      	movs	r3, #43	; 0x2b
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	781b      	ldrb	r3, [r3, #0]
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b00c      	add	sp, #48	; 0x30
 8000b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b30:	40021000 	.word	0x40021000
 8000b34:	000f4240 	.word	0x000f4240
 8000b38:	20000144 	.word	0x20000144
 8000b3c:	40000400 	.word	0x40000400
 8000b40:	000003e7 	.word	0x000003e7
 8000b44:	20000004 	.word	0x20000004

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <TIM3_IRQHandler+0x14>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 fb46 	bl	80021ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000144 	.word	0x20000144

08000b6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e00a      	b.n	8000b94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b7e:	e000      	b.n	8000b82 <_read+0x16>
 8000b80:	bf00      	nop
 8000b82:	0001      	movs	r1, r0
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60ba      	str	r2, [r7, #8]
 8000b8a:	b2ca      	uxtb	r2, r1
 8000b8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbf0      	blt.n	8000b7e <_read+0x12>
  }

  return len;
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b006      	add	sp, #24
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	e009      	b.n	8000bcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	e000      	b.n	8000bc6 <_write+0x20>
 8000bc4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dbf1      	blt.n	8000bb8 <_write+0x12>
  }
  return len;
 8000bd4:	687b      	ldr	r3, [r7, #4]
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b006      	add	sp, #24
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_close>:

int _close(int file)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	425b      	negs	r3, r3
}
 8000bea:	0018      	movs	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	0192      	lsls	r2, r2, #6
 8000c02:	605a      	str	r2, [r3, #4]
  return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	0018      	movs	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_isatty>:

int _isatty(int file)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c44:	f7ff fff7 	bl	8000c36 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	; (8000c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <LoopForever+0xe>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	; (8000c8c <LoopForever+0x16>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c6e:	f004 fadd 	bl	800522c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c72:	f7ff fbbf 	bl	80003f4 <main>

08000c76 <LoopForever>:

LoopForever:
  b LoopForever
 8000c76:	e7fe      	b.n	8000c76 <LoopForever>
  ldr   r0, =_estack
 8000c78:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c84:	08005f08 	.word	0x08005f08
  ldr r2, =_sbss
 8000c88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c8c:	20001ca8 	.word	0x20001ca8

08000c90 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_Init+0x3c>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Init+0x3c>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0049      	lsls	r1, r1, #1
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f7ff fec6 	bl	8000a40 <HAL_InitTick>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e001      	b.n	8000cc4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe3a 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	781b      	ldrb	r3, [r3, #0]
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x1c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	001a      	movs	r2, r3
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	18d2      	adds	r2, r2, r3
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce6:	601a      	str	r2, [r3, #0]
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000190 	.word	0x20000190

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <HAL_GetTick+0x10>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	20000190 	.word	0x20000190

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	0002      	movs	r2, r0
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d1e:	d809      	bhi.n	8000d34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	001a      	movs	r2, r3
 8000d26:	231f      	movs	r3, #31
 8000d28:	401a      	ands	r2, r3
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_EnableIRQ+0x30>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4091      	lsls	r1, r2
 8000d30:	000a      	movs	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	0002      	movs	r2, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b7f      	cmp	r3, #127	; 0x7f
 8000d54:	d828      	bhi.n	8000da8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d56:	4a2f      	ldr	r2, [pc, #188]	; (8000e14 <__NVIC_SetPriority+0xd4>)
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	33c0      	adds	r3, #192	; 0xc0
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	589b      	ldr	r3, [r3, r2]
 8000d66:	1dfa      	adds	r2, r7, #7
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	400a      	ands	r2, r1
 8000d70:	00d2      	lsls	r2, r2, #3
 8000d72:	21ff      	movs	r1, #255	; 0xff
 8000d74:	4091      	lsls	r1, r2
 8000d76:	000a      	movs	r2, r1
 8000d78:	43d2      	mvns	r2, r2
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	019b      	lsls	r3, r3, #6
 8000d82:	22ff      	movs	r2, #255	; 0xff
 8000d84:	401a      	ands	r2, r3
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	4003      	ands	r3, r0
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d94:	481f      	ldr	r0, [pc, #124]	; (8000e14 <__NVIC_SetPriority+0xd4>)
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	089b      	lsrs	r3, r3, #2
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	33c0      	adds	r3, #192	; 0xc0
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000da6:	e031      	b.n	8000e0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <__NVIC_SetPriority+0xd8>)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	0019      	movs	r1, r3
 8000db0:	230f      	movs	r3, #15
 8000db2:	400b      	ands	r3, r1
 8000db4:	3b08      	subs	r3, #8
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3306      	adds	r3, #6
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	18d3      	adds	r3, r2, r3
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	1dfa      	adds	r2, r7, #7
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	2203      	movs	r2, #3
 8000dca:	400a      	ands	r2, r1
 8000dcc:	00d2      	lsls	r2, r2, #3
 8000dce:	21ff      	movs	r1, #255	; 0xff
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	43d2      	mvns	r2, r2
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	019b      	lsls	r3, r3, #6
 8000dde:	22ff      	movs	r2, #255	; 0xff
 8000de0:	401a      	ands	r2, r3
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	0018      	movs	r0, r3
 8000de8:	2303      	movs	r3, #3
 8000dea:	4003      	ands	r3, r0
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df0:	4809      	ldr	r0, [pc, #36]	; (8000e18 <__NVIC_SetPriority+0xd8>)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	001c      	movs	r4, r3
 8000df8:	230f      	movs	r3, #15
 8000dfa:	4023      	ands	r3, r4
 8000dfc:	3b08      	subs	r3, #8
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	430a      	orrs	r2, r1
 8000e02:	3306      	adds	r3, #6
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	18c3      	adds	r3, r0, r3
 8000e08:	3304      	adds	r3, #4
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b003      	add	sp, #12
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	210f      	movs	r1, #15
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	1c02      	adds	r2, r0, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ff81 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff57 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <HAL_EXTI_SetConfigLine+0x16>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e0b3      	b.n	8000fea <HAL_EXTI_SetConfigLine+0x182>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	0c1b      	lsrs	r3, r3, #16
 8000e90:	2201      	movs	r2, #1
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	221f      	movs	r2, #31
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	0013      	movs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	049b      	lsls	r3, r3, #18
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d062      	beq.n	8000f7c <HAL_EXTI_SetConfigLine+0x114>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	015b      	lsls	r3, r3, #5
 8000eba:	4a4e      	ldr	r2, [pc, #312]	; (8000ff4 <HAL_EXTI_SetConfigLine+0x18c>)
 8000ebc:	4694      	mov	ip, r2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d004      	beq.n	8000edc <HAL_EXTI_SetConfigLine+0x74>
    {
      regval |= maskline;
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	e004      	b.n	8000ee6 <HAL_EXTI_SetConfigLine+0x7e>
    }
    else
    {
      regval &= ~maskline;
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61fb      	str	r3, [r7, #28]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	015b      	lsls	r3, r3, #5
 8000ef0:	4a41      	ldr	r2, [pc, #260]	; (8000ff8 <HAL_EXTI_SetConfigLine+0x190>)
 8000ef2:	4694      	mov	ip, r2
 8000ef4:	4463      	add	r3, ip
 8000ef6:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2202      	movs	r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	d004      	beq.n	8000f12 <HAL_EXTI_SetConfigLine+0xaa>
    {
      regval |= maskline;
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	e004      	b.n	8000f1c <HAL_EXTI_SetConfigLine+0xb4>
    }
    else
    {
      regval &= ~maskline;
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43da      	mvns	r2, r3
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61fb      	str	r3, [r7, #28]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	69fa      	ldr	r2, [r7, #28]
 8000f20:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	23c0      	movs	r3, #192	; 0xc0
 8000f28:	04db      	lsls	r3, r3, #19
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	23c0      	movs	r3, #192	; 0xc0
 8000f2e:	04db      	lsls	r3, r3, #19
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d123      	bne.n	8000f7c <HAL_EXTI_SetConfigLine+0x114>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = EXTI->EXTICR[linepos >> 2u];
 8000f34:	4a2f      	ldr	r2, [pc, #188]	; (8000ff4 <HAL_EXTI_SetConfigLine+0x18c>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3318      	adds	r3, #24
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	589b      	ldr	r3, [r3, r2]
 8000f40:	61fb      	str	r3, [r7, #28]
      regval &= ~(EXTI_EXTICR1_EXTI0 << (EXTI_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4013      	ands	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	43da      	mvns	r2, r3
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61fb      	str	r3, [r7, #28]
      regval |= (pExtiConfig->GPIOSel << (EXTI_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	2103      	movs	r1, #3
 8000f60:	400b      	ands	r3, r1
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61fb      	str	r3, [r7, #28]
      EXTI->EXTICR[linepos >> 2u] = regval;
 8000f6e:	4921      	ldr	r1, [pc, #132]	; (8000ff4 <HAL_EXTI_SetConfigLine+0x18c>)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3318      	adds	r3, #24
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	505a      	str	r2, [r3, r1]
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <HAL_EXTI_SetConfigLine+0x194>)
 8000f82:	4694      	mov	ip, r2
 8000f84:	4463      	add	r3, ip
 8000f86:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	4013      	ands	r3, r2
 8000f96:	d004      	beq.n	8000fa2 <HAL_EXTI_SetConfigLine+0x13a>
  {
    regval |= maskline;
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e004      	b.n	8000fac <HAL_EXTI_SetConfigLine+0x144>
  }
  else
  {
    regval &= ~maskline;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43da      	mvns	r2, r3
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61fb      	str	r3, [r7, #28]
  }

  /* Store interrupt mode */
  *regaddr = regval;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	601a      	str	r2, [r3, #0]

  /* Configure event mode : read current mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <HAL_EXTI_SetConfigLine+0x198>)
 8000fb8:	4694      	mov	ip, r2
 8000fba:	4463      	add	r3, ip
 8000fbc:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d004      	beq.n	8000fd8 <HAL_EXTI_SetConfigLine+0x170>
  {
    regval |= maskline;
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e004      	b.n	8000fe2 <HAL_EXTI_SetConfigLine+0x17a>
  }
  else
  {
    regval &= ~maskline;
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61fb      	str	r3, [r7, #28]
  }

  /* Store event mode */
  *regaddr = regval;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	0018      	movs	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b008      	add	sp, #32
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	40021800 	.word	0x40021800
 8000ff8:	40021804 	.word	0x40021804
 8000ffc:	40021880 	.word	0x40021880
 8001000:	40021884 	.word	0x40021884

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	e147      	b.n	80012a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <HAL_GPIO_Init+0x28>
 800102a:	e138      	b.n	800129e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	4013      	ands	r3, r2
 8001034:	2b01      	cmp	r3, #1
 8001036:	d005      	beq.n	8001044 <HAL_GPIO_Init+0x40>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2203      	movs	r2, #3
 800103e:	4013      	ands	r3, r2
 8001040:	2b02      	cmp	r3, #2
 8001042:	d130      	bne.n	80010a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	409a      	lsls	r2, r3
 8001052:	0013      	movs	r3, r2
 8001054:	43da      	mvns	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	409a      	lsls	r2, r3
 8001066:	0013      	movs	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	43da      	mvns	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	2201      	movs	r2, #1
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2203      	movs	r2, #3
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d017      	beq.n	80010e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2203      	movs	r2, #3
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d123      	bne.n	8001136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	58d3      	ldr	r3, [r2, r3]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2207      	movs	r2, #7
 8001100:	4013      	ands	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2107      	movs	r1, #7
 800111a:	400b      	ands	r3, r1
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	6939      	ldr	r1, [r7, #16]
 8001134:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	43da      	mvns	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2203      	movs	r2, #3
 8001154:	401a      	ands	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	23c0      	movs	r3, #192	; 0xc0
 8001170:	029b      	lsls	r3, r3, #10
 8001172:	4013      	ands	r3, r2
 8001174:	d100      	bne.n	8001178 <HAL_GPIO_Init+0x174>
 8001176:	e092      	b.n	800129e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001178:	4a50      	ldr	r2, [pc, #320]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3318      	adds	r3, #24
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	589b      	ldr	r3, [r3, r2]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2203      	movs	r2, #3
 800118a:	4013      	ands	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	220f      	movs	r2, #15
 8001190:	409a      	lsls	r2, r3
 8001192:	0013      	movs	r3, r2
 8001194:	43da      	mvns	r2, r3
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	23a0      	movs	r3, #160	; 0xa0
 80011a0:	05db      	lsls	r3, r3, #23
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d013      	beq.n	80011ce <HAL_GPIO_Init+0x1ca>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a45      	ldr	r2, [pc, #276]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d00d      	beq.n	80011ca <HAL_GPIO_Init+0x1c6>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <HAL_GPIO_Init+0x2c0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d007      	beq.n	80011c6 <HAL_GPIO_Init+0x1c2>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a43      	ldr	r2, [pc, #268]	; (80012c8 <HAL_GPIO_Init+0x2c4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d101      	bne.n	80011c2 <HAL_GPIO_Init+0x1be>
 80011be:	2303      	movs	r3, #3
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x1cc>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x1cc>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x1cc>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x1cc>
 80011ce:	2300      	movs	r3, #0
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	2103      	movs	r1, #3
 80011d4:	400a      	ands	r2, r1
 80011d6:	00d2      	lsls	r2, r2, #3
 80011d8:	4093      	lsls	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011e0:	4936      	ldr	r1, [pc, #216]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3318      	adds	r3, #24
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43da      	mvns	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	035b      	lsls	r3, r3, #13
 8001206:	4013      	ands	r3, r2
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43da      	mvns	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	039b      	lsls	r3, r3, #14
 8001230:	4013      	ands	r3, r2
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 8001244:	2384      	movs	r3, #132	; 0x84
 8001246:	58d3      	ldr	r3, [r2, r3]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43da      	mvns	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	029b      	lsls	r3, r3, #10
 800125c:	4013      	ands	r3, r2
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001268:	4914      	ldr	r1, [pc, #80]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 800126a:	2284      	movs	r2, #132	; 0x84
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	58d3      	ldr	r3, [r2, r3]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43da      	mvns	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	025b      	lsls	r3, r3, #9
 800128a:	4013      	ands	r3, r2
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001296:	4909      	ldr	r1, [pc, #36]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	40da      	lsrs	r2, r3
 80012ac:	1e13      	subs	r3, r2, #0
 80012ae:	d000      	beq.n	80012b2 <HAL_GPIO_Init+0x2ae>
 80012b0:	e6b0      	b.n	8001014 <HAL_GPIO_Init+0x10>
  }
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b006      	add	sp, #24
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021800 	.word	0x40021800
 80012c0:	50000400 	.word	0x50000400
 80012c4:	50000800 	.word	0x50000800
 80012c8:	50000c00 	.word	0x50000c00

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	0008      	movs	r0, r1
 80012d6:	0011      	movs	r1, r2
 80012d8:	1cbb      	adds	r3, r7, #2
 80012da:	1c02      	adds	r2, r0, #0
 80012dc:	801a      	strh	r2, [r3, #0]
 80012de:	1c7b      	adds	r3, r7, #1
 80012e0:	1c0a      	adds	r2, r1, #0
 80012e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e4:	1c7b      	adds	r3, r7, #1
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ec:	1cbb      	adds	r3, r7, #2
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012f6:	1cbb      	adds	r3, r7, #2
 80012f8:	881a      	ldrh	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	000a      	movs	r2, r1
 8001310:	1cbb      	adds	r3, r7, #2
 8001312:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800131a:	1cbb      	adds	r3, r7, #2
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4013      	ands	r3, r2
 8001322:	041a      	lsls	r2, r3, #16
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	1cb9      	adds	r1, r7, #2
 800132a:	8809      	ldrh	r1, [r1, #0]
 800132c:	400b      	ands	r3, r1
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b004      	add	sp, #16
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	0002      	movs	r2, r0
 8001344:	1dbb      	adds	r3, r7, #6
 8001346:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	1dba      	adds	r2, r7, #6
 800134e:	8812      	ldrh	r2, [r2, #0]
 8001350:	4013      	ands	r3, r2
 8001352:	d008      	beq.n	8001366 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001356:	1dba      	adds	r2, r7, #6
 8001358:	8812      	ldrh	r2, [r2, #0]
 800135a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800135c:	1dbb      	adds	r3, r7, #6
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	0018      	movs	r0, r3
 8001362:	f000 f815 	bl	8001390 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	1dba      	adds	r2, r7, #6
 800136c:	8812      	ldrh	r2, [r2, #0]
 800136e:	4013      	ands	r3, r2
 8001370:	d008      	beq.n	8001384 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001374:	1dba      	adds	r2, r7, #6
 8001376:	8812      	ldrh	r2, [r2, #0]
 8001378:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800137a:	1dbb      	adds	r3, r7, #6
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	0018      	movs	r0, r3
 8001380:	f000 f810 	bl	80013a4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b002      	add	sp, #8
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021800 	.word	0x40021800

08001390 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	0002      	movs	r2, r0
 8001398:	1dbb      	adds	r3, r7, #6
 800139a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	429a      	cmp	r2, r3
 80013da:	d11f      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	0013      	movs	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	189b      	adds	r3, r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4912      	ldr	r1, [pc, #72]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7fe fe8c 	bl	8000108 <__udivsi3>
 80013f0:	0003      	movs	r3, r0
 80013f2:	3301      	adds	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013f6:	e008      	b.n	800140a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3b01      	subs	r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e001      	b.n	800140a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e009      	b.n	800141e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	401a      	ands	r2, r3
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	429a      	cmp	r2, r3
 800141a:	d0ed      	beq.n	80013f8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b004      	add	sp, #16
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	40007000 	.word	0x40007000
 800142c:	fffff9ff 	.word	0xfffff9ff
 8001430:	20000000 	.word	0x20000000
 8001434:	000f4240 	.word	0x000f4240

08001438 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <LL_RCC_GetAPB1Prescaler+0x14>)
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	23e0      	movs	r3, #224	; 0xe0
 8001442:	01db      	lsls	r3, r3, #7
 8001444:	4013      	ands	r3, r2
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e2f3      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2201      	movs	r2, #1
 8001468:	4013      	ands	r3, r2
 800146a:	d100      	bne.n	800146e <HAL_RCC_OscConfig+0x1e>
 800146c:	e07c      	b.n	8001568 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146e:	4bc3      	ldr	r3, [pc, #780]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2238      	movs	r2, #56	; 0x38
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001478:	4bc0      	ldr	r3, [pc, #768]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2203      	movs	r2, #3
 800147e:	4013      	ands	r3, r2
 8001480:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b10      	cmp	r3, #16
 8001486:	d102      	bne.n	800148e <HAL_RCC_OscConfig+0x3e>
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d002      	beq.n	8001494 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b08      	cmp	r3, #8
 8001492:	d10b      	bne.n	80014ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	4bb9      	ldr	r3, [pc, #740]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	029b      	lsls	r3, r3, #10
 800149c:	4013      	ands	r3, r2
 800149e:	d062      	beq.n	8001566 <HAL_RCC_OscConfig+0x116>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d15e      	bne.n	8001566 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e2ce      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	025b      	lsls	r3, r3, #9
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d107      	bne.n	80014c8 <HAL_RCC_OscConfig+0x78>
 80014b8:	4bb0      	ldr	r3, [pc, #704]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4baf      	ldr	r3, [pc, #700]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	0249      	lsls	r1, r1, #9
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e020      	b.n	800150a <HAL_RCC_OscConfig+0xba>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	23a0      	movs	r3, #160	; 0xa0
 80014ce:	02db      	lsls	r3, r3, #11
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10e      	bne.n	80014f2 <HAL_RCC_OscConfig+0xa2>
 80014d4:	4ba9      	ldr	r3, [pc, #676]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4ba8      	ldr	r3, [pc, #672]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	02c9      	lsls	r1, r1, #11
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	4ba6      	ldr	r3, [pc, #664]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4ba5      	ldr	r3, [pc, #660]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	0249      	lsls	r1, r1, #9
 80014ec:	430a      	orrs	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e00b      	b.n	800150a <HAL_RCC_OscConfig+0xba>
 80014f2:	4ba2      	ldr	r3, [pc, #648]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4ba1      	ldr	r3, [pc, #644]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80014f8:	49a1      	ldr	r1, [pc, #644]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	4b9f      	ldr	r3, [pc, #636]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b9e      	ldr	r3, [pc, #632]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001504:	499f      	ldr	r1, [pc, #636]	; (8001784 <HAL_RCC_OscConfig+0x334>)
 8001506:	400a      	ands	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d014      	beq.n	800153c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fbf1 	bl	8000cf8 <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fbec 	bl	8000cf8 <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e28d      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800152e:	4b93      	ldr	r3, [pc, #588]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	029b      	lsls	r3, r3, #10
 8001536:	4013      	ands	r3, r2
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0xcc>
 800153a:	e015      	b.n	8001568 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fbdc 	bl	8000cf8 <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001546:	f7ff fbd7 	bl	8000cf8 <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b64      	cmp	r3, #100	; 0x64
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e278      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001558:	4b88      	ldr	r3, [pc, #544]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	029b      	lsls	r3, r3, #10
 8001560:	4013      	ands	r3, r2
 8001562:	d1f0      	bne.n	8001546 <HAL_RCC_OscConfig+0xf6>
 8001564:	e000      	b.n	8001568 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001566:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2202      	movs	r2, #2
 800156e:	4013      	ands	r3, r2
 8001570:	d100      	bne.n	8001574 <HAL_RCC_OscConfig+0x124>
 8001572:	e099      	b.n	80016a8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001574:	4b81      	ldr	r3, [pc, #516]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2238      	movs	r2, #56	; 0x38
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800157e:	4b7f      	ldr	r3, [pc, #508]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2203      	movs	r2, #3
 8001584:	4013      	ands	r3, r2
 8001586:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b10      	cmp	r3, #16
 800158c:	d102      	bne.n	8001594 <HAL_RCC_OscConfig+0x144>
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d002      	beq.n	800159a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d135      	bne.n	8001606 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800159a:	4b78      	ldr	r3, [pc, #480]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4013      	ands	r3, r2
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x162>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e24b      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b72      	ldr	r3, [pc, #456]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4a74      	ldr	r2, [pc, #464]	; (8001788 <HAL_RCC_OscConfig+0x338>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	0019      	movs	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	021a      	lsls	r2, r3, #8
 80015c2:	4b6e      	ldr	r3, [pc, #440]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80015c4:	430a      	orrs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d112      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015ce:	4b6b      	ldr	r3, [pc, #428]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a6e      	ldr	r2, [pc, #440]	; (800178c <HAL_RCC_OscConfig+0x33c>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	0019      	movs	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	4b67      	ldr	r3, [pc, #412]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80015e2:	4b66      	ldr	r3, [pc, #408]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0adb      	lsrs	r3, r3, #11
 80015e8:	2207      	movs	r2, #7
 80015ea:	4013      	ands	r3, r2
 80015ec:	4a68      	ldr	r2, [pc, #416]	; (8001790 <HAL_RCC_OscConfig+0x340>)
 80015ee:	40da      	lsrs	r2, r3
 80015f0:	4b68      	ldr	r3, [pc, #416]	; (8001794 <HAL_RCC_OscConfig+0x344>)
 80015f2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015f4:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_OscConfig+0x348>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff fa21 	bl	8000a40 <HAL_InitTick>
 80015fe:	1e03      	subs	r3, r0, #0
 8001600:	d051      	beq.n	80016a6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e221      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d030      	beq.n	8001670 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800160e:	4b5b      	ldr	r3, [pc, #364]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a5e      	ldr	r2, [pc, #376]	; (800178c <HAL_RCC_OscConfig+0x33c>)
 8001614:	4013      	ands	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	4b57      	ldr	r3, [pc, #348]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001622:	4b56      	ldr	r3, [pc, #344]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b55      	ldr	r3, [pc, #340]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	0049      	lsls	r1, r1, #1
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fb62 	bl	8000cf8 <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fb5d 	bl	8000cf8 <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1fe      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164c:	4b4b      	ldr	r3, [pc, #300]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4013      	ands	r3, r2
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	4b48      	ldr	r3, [pc, #288]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a4a      	ldr	r2, [pc, #296]	; (8001788 <HAL_RCC_OscConfig+0x338>)
 800165e:	4013      	ands	r3, r2
 8001660:	0019      	movs	r1, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	021a      	lsls	r2, r3, #8
 8001668:	4b44      	ldr	r3, [pc, #272]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	e01b      	b.n	80016a8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b41      	ldr	r3, [pc, #260]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001676:	4949      	ldr	r1, [pc, #292]	; (800179c <HAL_RCC_OscConfig+0x34c>)
 8001678:	400a      	ands	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fb3c 	bl	8000cf8 <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fb37 	bl	8000cf8 <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1d8      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001698:	4b38      	ldr	r3, [pc, #224]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4013      	ands	r3, r2
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x236>
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2208      	movs	r2, #8
 80016ae:	4013      	ands	r3, r2
 80016b0:	d047      	beq.n	8001742 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016b2:	4b32      	ldr	r3, [pc, #200]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2238      	movs	r2, #56	; 0x38
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b18      	cmp	r3, #24
 80016bc:	d10a      	bne.n	80016d4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016be:	4b2f      	ldr	r3, [pc, #188]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	2202      	movs	r2, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	d03c      	beq.n	8001742 <HAL_RCC_OscConfig+0x2f2>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d138      	bne.n	8001742 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e1ba      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d019      	beq.n	8001710 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80016dc:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80016de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb06 	bl	8000cf8 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fb01 	bl	8000cf8 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e1a2      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001708:	2202      	movs	r2, #2
 800170a:	4013      	ands	r3, r2
 800170c:	d0f1      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2a2>
 800170e:	e018      	b.n	8001742 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001712:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001716:	2101      	movs	r1, #1
 8001718:	438a      	bics	r2, r1
 800171a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff faec 	bl	8000cf8 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001726:	f7ff fae7 	bl	8000cf8 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e188      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 800173a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d1f1      	bne.n	8001726 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2204      	movs	r2, #4
 8001748:	4013      	ands	r3, r2
 800174a:	d100      	bne.n	800174e <HAL_RCC_OscConfig+0x2fe>
 800174c:	e0c6      	b.n	80018dc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800174e:	231f      	movs	r3, #31
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2238      	movs	r2, #56	; 0x38
 800175c:	4013      	ands	r3, r2
 800175e:	2b20      	cmp	r3, #32
 8001760:	d11e      	bne.n	80017a0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_RCC_OscConfig+0x32c>)
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2202      	movs	r2, #2
 8001768:	4013      	ands	r3, r2
 800176a:	d100      	bne.n	800176e <HAL_RCC_OscConfig+0x31e>
 800176c:	e0b6      	b.n	80018dc <HAL_RCC_OscConfig+0x48c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d000      	beq.n	8001778 <HAL_RCC_OscConfig+0x328>
 8001776:	e0b1      	b.n	80018dc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e166      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
 800177c:	40021000 	.word	0x40021000
 8001780:	fffeffff 	.word	0xfffeffff
 8001784:	fffbffff 	.word	0xfffbffff
 8001788:	ffff80ff 	.word	0xffff80ff
 800178c:	ffffc7ff 	.word	0xffffc7ff
 8001790:	00f42400 	.word	0x00f42400
 8001794:	20000000 	.word	0x20000000
 8001798:	20000004 	.word	0x20000004
 800179c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017a0:	4bac      	ldr	r3, [pc, #688]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80017a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	055b      	lsls	r3, r3, #21
 80017a8:	4013      	ands	r3, r2
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_OscConfig+0x360>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x362>
 80017b0:	2300      	movs	r3, #0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d011      	beq.n	80017da <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4ba7      	ldr	r3, [pc, #668]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80017b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ba:	4ba6      	ldr	r3, [pc, #664]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	0549      	lsls	r1, r1, #21
 80017c0:	430a      	orrs	r2, r1
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80017c4:	4ba3      	ldr	r3, [pc, #652]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80017c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	055b      	lsls	r3, r3, #21
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80017d2:	231f      	movs	r3, #31
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017da:	4b9f      	ldr	r3, [pc, #636]	; (8001a58 <HAL_RCC_OscConfig+0x608>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	d11a      	bne.n	800181c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017e6:	4b9c      	ldr	r3, [pc, #624]	; (8001a58 <HAL_RCC_OscConfig+0x608>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b9b      	ldr	r3, [pc, #620]	; (8001a58 <HAL_RCC_OscConfig+0x608>)
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	0049      	lsls	r1, r1, #1
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fa80 	bl	8000cf8 <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fe:	f7ff fa7b 	bl	8000cf8 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e11c      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001810:	4b91      	ldr	r3, [pc, #580]	; (8001a58 <HAL_RCC_OscConfig+0x608>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4013      	ands	r3, r2
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x3e2>
 8001824:	4b8b      	ldr	r3, [pc, #556]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001826:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001828:	4b8a      	ldr	r3, [pc, #552]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 800182a:	2101      	movs	r1, #1
 800182c:	430a      	orrs	r2, r1
 800182e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001830:	e01c      	b.n	800186c <HAL_RCC_OscConfig+0x41c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b05      	cmp	r3, #5
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x404>
 800183a:	4b86      	ldr	r3, [pc, #536]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 800183c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800183e:	4b85      	ldr	r3, [pc, #532]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001840:	2104      	movs	r1, #4
 8001842:	430a      	orrs	r2, r1
 8001844:	65da      	str	r2, [r3, #92]	; 0x5c
 8001846:	4b83      	ldr	r3, [pc, #524]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001848:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800184a:	4b82      	ldr	r3, [pc, #520]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 800184c:	2101      	movs	r1, #1
 800184e:	430a      	orrs	r2, r1
 8001850:	65da      	str	r2, [r3, #92]	; 0x5c
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0x41c>
 8001854:	4b7f      	ldr	r3, [pc, #508]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001856:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001858:	4b7e      	ldr	r3, [pc, #504]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 800185a:	2101      	movs	r1, #1
 800185c:	438a      	bics	r2, r1
 800185e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001860:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001862:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001864:	4b7b      	ldr	r3, [pc, #492]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001866:	2104      	movs	r1, #4
 8001868:	438a      	bics	r2, r1
 800186a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d014      	beq.n	800189e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fa40 	bl	8000cf8 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187c:	e009      	b.n	8001892 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff fa3b 	bl	8000cf8 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a74      	ldr	r2, [pc, #464]	; (8001a5c <HAL_RCC_OscConfig+0x60c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e0db      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001892:	4b70      	ldr	r3, [pc, #448]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	2202      	movs	r2, #2
 8001898:	4013      	ands	r3, r2
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x42e>
 800189c:	e013      	b.n	80018c6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff fa2b 	bl	8000cf8 <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a6:	e009      	b.n	80018bc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a8:	f7ff fa26 	bl	8000cf8 <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x60c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0c6      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018bc:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80018be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c0:	2202      	movs	r2, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80018c6:	231f      	movs	r3, #31
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80018d0:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80018d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018d4:	4b5f      	ldr	r3, [pc, #380]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80018d6:	4962      	ldr	r1, [pc, #392]	; (8001a60 <HAL_RCC_OscConfig+0x610>)
 80018d8:	400a      	ands	r2, r1
 80018da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d100      	bne.n	80018e6 <HAL_RCC_OscConfig+0x496>
 80018e4:	e0b0      	b.n	8001a48 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e6:	4b5b      	ldr	r3, [pc, #364]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2238      	movs	r2, #56	; 0x38
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d100      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4a4>
 80018f2:	e078      	b.n	80019e6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d153      	bne.n	80019a4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fc:	4b55      	ldr	r3, [pc, #340]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b54      	ldr	r3, [pc, #336]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001902:	4958      	ldr	r1, [pc, #352]	; (8001a64 <HAL_RCC_OscConfig+0x614>)
 8001904:	400a      	ands	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f9f6 	bl	8000cf8 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff f9f1 	bl	8000cf8 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e092      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001924:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	049b      	lsls	r3, r3, #18
 800192c:	4013      	ands	r3, r2
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001930:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a4c      	ldr	r2, [pc, #304]	; (8001a68 <HAL_RCC_OscConfig+0x618>)
 8001936:	4013      	ands	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1a      	ldr	r2, [r3, #32]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	431a      	orrs	r2, r3
 8001958:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 800195a:	430a      	orrs	r2, r1
 800195c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800195e:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	0449      	lsls	r1, r1, #17
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800196c:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	0549      	lsls	r1, r1, #21
 8001976:	430a      	orrs	r2, r1
 8001978:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7ff f9bd 	bl	8000cf8 <HAL_GetTick>
 800197e:	0003      	movs	r3, r0
 8001980:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff f9b8 	bl	8000cf8 <HAL_GetTick>
 8001988:	0002      	movs	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e059      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	049b      	lsls	r3, r3, #18
 800199e:	4013      	ands	r3, r2
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x534>
 80019a2:	e051      	b.n	8001a48 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80019aa:	492e      	ldr	r1, [pc, #184]	; (8001a64 <HAL_RCC_OscConfig+0x614>)
 80019ac:	400a      	ands	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff f9a2 	bl	8000cf8 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff f99d 	bl	8000cf8 <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e03e      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	049b      	lsls	r3, r3, #18
 80019d4:	4013      	ands	r3, r2
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80019de:	4923      	ldr	r1, [pc, #140]	; (8001a6c <HAL_RCC_OscConfig+0x61c>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	e030      	b.n	8001a48 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e02b      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_RCC_OscConfig+0x604>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2203      	movs	r2, #3
 80019fc:	401a      	ands	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d11e      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2270      	movs	r2, #112	; 0x70
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d117      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	23fe      	movs	r3, #254	; 0xfe
 8001a18:	01db      	lsls	r3, r3, #7
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d10e      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	23f8      	movs	r3, #248	; 0xf8
 8001a2a:	039b      	lsls	r3, r3, #14
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d106      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	0f5b      	lsrs	r3, r3, #29
 8001a3a:	075a      	lsls	r2, r3, #29
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b008      	add	sp, #32
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	00001388 	.word	0x00001388
 8001a60:	efffffff 	.word	0xefffffff
 8001a64:	feffffff 	.word	0xfeffffff
 8001a68:	1fc1808c 	.word	0x1fc1808c
 8001a6c:	effefffc 	.word	0xeffefffc

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0e9      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2207      	movs	r2, #7
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d91e      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b73      	ldr	r3, [pc, #460]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2207      	movs	r2, #7
 8001a98:	4393      	bics	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	4b70      	ldr	r3, [pc, #448]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aa4:	f7ff f928 	bl	8000cf8 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aae:	f7ff f923 	bl	8000cf8 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	4a6a      	ldr	r2, [pc, #424]	; (8001c64 <HAL_RCC_ClockConfig+0x1f4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0ca      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ac2:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	4013      	ands	r3, r2
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1ee      	bne.n	8001aae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d015      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2204      	movs	r2, #4
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d006      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ae4:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001aea:	21e0      	movs	r1, #224	; 0xe0
 8001aec:	01c9      	lsls	r1, r1, #7
 8001aee:	430a      	orrs	r2, r1
 8001af0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af2:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	4a5d      	ldr	r2, [pc, #372]	; (8001c6c <HAL_RCC_ClockConfig+0x1fc>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001b02:	430a      	orrs	r2, r1
 8001b04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d057      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	029b      	lsls	r3, r3, #10
 8001b20:	4013      	ands	r3, r2
 8001b22:	d12b      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e097      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b30:	4b4d      	ldr	r3, [pc, #308]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	049b      	lsls	r3, r3, #18
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d11f      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e08b      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b48:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4013      	ands	r3, r2
 8001b52:	d113      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e07f      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b60:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b64:	2202      	movs	r2, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	d108      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e074      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	2202      	movs	r2, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e06d      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2207      	movs	r2, #7
 8001b82:	4393      	bics	r3, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b90:	f7ff f8b2 	bl	8000cf8 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b98:	e009      	b.n	8001bae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9a:	f7ff f8ad 	bl	8000cf8 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	4a2f      	ldr	r2, [pc, #188]	; (8001c64 <HAL_RCC_ClockConfig+0x1f4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e054      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2238      	movs	r2, #56	; 0x38
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1ec      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d21e      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	4393      	bics	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001be0:	f7ff f88a 	bl	8000cf8 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be8:	e009      	b.n	8001bfe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bea:	f7ff f885 	bl	8000cf8 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <HAL_RCC_ClockConfig+0x1f4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e02c      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2207      	movs	r2, #7
 8001c04:	4013      	ands	r3, r2
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2204      	movs	r2, #4
 8001c12:	4013      	ands	r3, r2
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <HAL_RCC_ClockConfig+0x200>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c2a:	f000 f829 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c2e:	0001      	movs	r1, r0
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	220f      	movs	r2, #15
 8001c38:	401a      	ands	r2, r3
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_RCC_ClockConfig+0x204>)
 8001c3c:	0092      	lsls	r2, r2, #2
 8001c3e:	58d3      	ldr	r3, [r2, r3]
 8001c40:	221f      	movs	r2, #31
 8001c42:	4013      	ands	r3, r2
 8001c44:	000a      	movs	r2, r1
 8001c46:	40da      	lsrs	r2, r3
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_ClockConfig+0x208>)
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_ClockConfig+0x20c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7fe fef5 	bl	8000a40 <HAL_InitTick>
 8001c56:	0003      	movs	r3, r0
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b004      	add	sp, #16
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40022000 	.word	0x40022000
 8001c64:	00001388 	.word	0x00001388
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	fffff0ff 	.word	0xfffff0ff
 8001c70:	ffff8fff 	.word	0xffff8fff
 8001c74:	08005dec 	.word	0x08005dec
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c86:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2238      	movs	r2, #56	; 0x38
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d10f      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0adb      	lsrs	r3, r3, #11
 8001c96:	2207      	movs	r2, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	0013      	movs	r3, r2
 8001ca0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ca2:	6839      	ldr	r1, [r7, #0]
 8001ca4:	4835      	ldr	r0, [pc, #212]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ca6:	f7fe fa2f 	bl	8000108 <__udivsi3>
 8001caa:	0003      	movs	r3, r0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	e05d      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2238      	movs	r2, #56	; 0x38
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d102      	bne.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x100>)
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	e054      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2238      	movs	r2, #56	; 0x38
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d138      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	2207      	movs	r2, #7
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d10d      	bne.n	8001d08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	4824      	ldr	r0, [pc, #144]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x100>)
 8001cf0:	f7fe fa0a 	bl	8000108 <__udivsi3>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	227f      	movs	r2, #127	; 0x7f
 8001d00:	4013      	ands	r3, r2
 8001d02:	434b      	muls	r3, r1
 8001d04:	617b      	str	r3, [r7, #20]
        break;
 8001d06:	e00d      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	481c      	ldr	r0, [pc, #112]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d0c:	f7fe f9fc 	bl	8000108 <__udivsi3>
 8001d10:	0003      	movs	r3, r0
 8001d12:	0019      	movs	r1, r3
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	227f      	movs	r2, #127	; 0x7f
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	434b      	muls	r3, r1
 8001d20:	617b      	str	r3, [r7, #20]
        break;
 8001d22:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0f5b      	lsrs	r3, r3, #29
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	3301      	adds	r3, #1
 8001d30:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	6978      	ldr	r0, [r7, #20]
 8001d36:	f7fe f9e7 	bl	8000108 <__udivsi3>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	e015      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2238      	movs	r2, #56	; 0x38
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	d103      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2238      	movs	r2, #56	; 0x38
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b18      	cmp	r3, #24
 8001d5e:	d103      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d60:	23fa      	movs	r3, #250	; 0xfa
 8001d62:	01db      	lsls	r3, r3, #7
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	e001      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d6c:	693b      	ldr	r3, [r7, #16]
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b006      	add	sp, #24
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	007a1200 	.word	0x007a1200

08001d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d88:	4b02      	ldr	r3, [pc, #8]	; (8001d94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	20000000 	.word	0x20000000

08001d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d9c:	f7ff fff2 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001da0:	0004      	movs	r4, r0
 8001da2:	f7ff fb49 	bl	8001438 <LL_RCC_GetAPB1Prescaler>
 8001da6:	0003      	movs	r3, r0
 8001da8:	0b1a      	lsrs	r2, r3, #12
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	58d3      	ldr	r3, [r2, r3]
 8001db0:	221f      	movs	r2, #31
 8001db2:	4013      	ands	r3, r2
 8001db4:	40dc      	lsrs	r4, r3
 8001db6:	0023      	movs	r3, r4
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	08005e2c 	.word	0x08005e2c

08001dc4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_RCC_GetClockConfig+0x4c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2207      	movs	r2, #7
 8001dda:	401a      	ands	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_GetClockConfig+0x4c>)
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	23f0      	movs	r3, #240	; 0xf0
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	401a      	ands	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_RCC_GetClockConfig+0x4c>)
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	23e0      	movs	r3, #224	; 0xe0
 8001df4:	01db      	lsls	r3, r3, #7
 8001df6:	401a      	ands	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetClockConfig+0x50>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2207      	movs	r2, #7
 8001e02:	401a      	ands	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	601a      	str	r2, [r3, #0]
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40022000 	.word	0x40022000

08001e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e20:	2313      	movs	r3, #19
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e28:	2312      	movs	r3, #18
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	029b      	lsls	r3, r3, #10
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d100      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e3c:	e0a3      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3e:	2011      	movs	r0, #17
 8001e40:	183b      	adds	r3, r7, r0
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e46:	4b86      	ldr	r3, [pc, #536]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	055b      	lsls	r3, r3, #21
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d110      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b83      	ldr	r3, [pc, #524]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e56:	4b82      	ldr	r3, [pc, #520]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	0549      	lsls	r1, r1, #21
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e60:	4b7f      	ldr	r3, [pc, #508]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	055b      	lsls	r3, r3, #21
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6e:	183b      	adds	r3, r7, r0
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e74:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b7a      	ldr	r3, [pc, #488]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	0049      	lsls	r1, r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e82:	f7fe ff39 	bl	8000cf8 <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8c:	f7fe ff34 	bl	8000cf8 <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d904      	bls.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e9a:	2313      	movs	r3, #19
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	701a      	strb	r2, [r3, #0]
        break;
 8001ea2:	e005      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ea4:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4013      	ands	r3, r2
 8001eae:	d0ed      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001eb0:	2313      	movs	r3, #19
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d154      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eba:	4b69      	ldr	r3, [pc, #420]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ebc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ebe:	23c0      	movs	r3, #192	; 0xc0
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d019      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d014      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ed6:	4b62      	ldr	r3, [pc, #392]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	4a63      	ldr	r2, [pc, #396]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ee0:	4b5f      	ldr	r3, [pc, #380]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	0249      	lsls	r1, r1, #9
 8001eea:	430a      	orrs	r2, r1
 8001eec:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eee:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ef0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ef4:	495d      	ldr	r1, [pc, #372]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001efa:	4b59      	ldr	r3, [pc, #356]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2201      	movs	r2, #1
 8001f04:	4013      	ands	r3, r2
 8001f06:	d016      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7fe fef6 	bl	8000cf8 <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f10:	e00c      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7fe fef1 	bl	8000cf8 <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	4a54      	ldr	r2, [pc, #336]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d904      	bls.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f22:	2313      	movs	r3, #19
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	2203      	movs	r2, #3
 8001f28:	701a      	strb	r2, [r3, #0]
            break;
 8001f2a:	e004      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2c:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	2202      	movs	r2, #2
 8001f32:	4013      	ands	r3, r2
 8001f34:	d0ed      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f36:	2313      	movs	r3, #19
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10a      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f40:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f54:	e00c      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f56:	2312      	movs	r3, #18
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	2213      	movs	r2, #19
 8001f5c:	18ba      	adds	r2, r7, r2
 8001f5e:	7812      	ldrb	r2, [r2, #0]
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	e005      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f64:	2312      	movs	r3, #18
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2213      	movs	r2, #19
 8001f6a:	18ba      	adds	r2, r7, r2
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f70:	2311      	movs	r3, #17
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f80:	493c      	ldr	r1, [pc, #240]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f82:	400a      	ands	r2, r1
 8001f84:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d009      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f90:	4b33      	ldr	r3, [pc, #204]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	2203      	movs	r2, #3
 8001f96:	4393      	bics	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4013      	ands	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d009      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	4a29      	ldr	r2, [pc, #164]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	01db      	lsls	r3, r3, #7
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d015      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fec:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	0899      	lsrs	r1, r3, #2
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	05db      	lsls	r3, r3, #23
 8002006:	429a      	cmp	r2, r3
 8002008:	d106      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	0249      	lsls	r1, r1, #9
 8002014:	430a      	orrs	r2, r1
 8002016:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	4013      	ands	r3, r2
 8002022:	d016      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	4a14      	ldr	r2, [pc, #80]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800202a:	4013      	ands	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002034:	430a      	orrs	r2, r1
 8002036:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	01db      	lsls	r3, r3, #7
 8002040:	429a      	cmp	r2, r3
 8002042:	d106      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0249      	lsls	r1, r1, #9
 800204e:	430a      	orrs	r2, r1
 8002050:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002052:	2312      	movs	r3, #18
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	781b      	ldrb	r3, [r3, #0]
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b006      	add	sp, #24
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
 8002068:	fffffcff 	.word	0xfffffcff
 800206c:	fffeffff 	.word	0xfffeffff
 8002070:	00001388 	.word	0x00001388
 8002074:	efffffff 	.word	0xefffffff
 8002078:	ffffcfff 	.word	0xffffcfff
 800207c:	ffff3fff 	.word	0xffff3fff

08002080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e04a      	b.n	8002128 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	223d      	movs	r2, #61	; 0x3d
 8002096:	5c9b      	ldrb	r3, [r3, r2]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d107      	bne.n	80020ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	223c      	movs	r2, #60	; 0x3c
 80020a2:	2100      	movs	r1, #0
 80020a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 f841 	bl	8002130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	223d      	movs	r2, #61	; 0x3d
 80020b2:	2102      	movs	r1, #2
 80020b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	0019      	movs	r1, r3
 80020c0:	0010      	movs	r0, r2
 80020c2:	f000 f9e5 	bl	8002490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2248      	movs	r2, #72	; 0x48
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	223e      	movs	r2, #62	; 0x3e
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	223f      	movs	r2, #63	; 0x3f
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2240      	movs	r2, #64	; 0x40
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2241      	movs	r2, #65	; 0x41
 80020ea:	2101      	movs	r1, #1
 80020ec:	5499      	strb	r1, [r3, r2]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2242      	movs	r2, #66	; 0x42
 80020f2:	2101      	movs	r1, #1
 80020f4:	5499      	strb	r1, [r3, r2]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2243      	movs	r2, #67	; 0x43
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2244      	movs	r2, #68	; 0x44
 8002102:	2101      	movs	r1, #1
 8002104:	5499      	strb	r1, [r3, r2]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2245      	movs	r2, #69	; 0x45
 800210a:	2101      	movs	r1, #1
 800210c:	5499      	strb	r1, [r3, r2]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2246      	movs	r2, #70	; 0x46
 8002112:	2101      	movs	r1, #1
 8002114:	5499      	strb	r1, [r3, r2]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2247      	movs	r2, #71	; 0x47
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	223d      	movs	r2, #61	; 0x3d
 8002122:	2101      	movs	r1, #1
 8002124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	223d      	movs	r2, #61	; 0x3d
 800214c:	5c9b      	ldrb	r3, [r3, r2]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d001      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e03c      	b.n	80021d2 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	223d      	movs	r2, #61	; 0x3d
 800215c:	2102      	movs	r1, #2
 800215e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2101      	movs	r1, #1
 800216c:	430a      	orrs	r2, r1
 800216e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a19      	ldr	r2, [pc, #100]	; (80021dc <HAL_TIM_Base_Start_IT+0x9c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_TIM_Base_Start_IT+0x4e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a18      	ldr	r2, [pc, #96]	; (80021e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_TIM_Base_Start_IT+0x4e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_TIM_Base_Start_IT+0xa4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d116      	bne.n	80021bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <HAL_TIM_Base_Start_IT+0xa8>)
 8002196:	4013      	ands	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b06      	cmp	r3, #6
 800219e:	d016      	beq.n	80021ce <HAL_TIM_Base_Start_IT+0x8e>
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	025b      	lsls	r3, r3, #9
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d011      	beq.n	80021ce <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ba:	e008      	b.n	80021ce <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e000      	b.n	80021d0 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ce:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b004      	add	sp, #16
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	40012c00 	.word	0x40012c00
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40014000 	.word	0x40014000
 80021e8:	00010007 	.word	0x00010007

080021ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2202      	movs	r2, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d124      	bne.n	800224c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2202      	movs	r2, #2
 800220a:	4013      	ands	r3, r2
 800220c:	2b02      	cmp	r3, #2
 800220e:	d11d      	bne.n	800224c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2203      	movs	r2, #3
 8002216:	4252      	negs	r2, r2
 8002218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2203      	movs	r2, #3
 8002228:	4013      	ands	r3, r2
 800222a:	d004      	beq.n	8002236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	0018      	movs	r0, r3
 8002230:	f000 f916 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 8002234:	e007      	b.n	8002246 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	0018      	movs	r0, r3
 800223a:	f000 f909 	bl	8002450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 f915 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2204      	movs	r2, #4
 8002254:	4013      	ands	r3, r2
 8002256:	2b04      	cmp	r3, #4
 8002258:	d125      	bne.n	80022a6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2204      	movs	r2, #4
 8002262:	4013      	ands	r3, r2
 8002264:	2b04      	cmp	r3, #4
 8002266:	d11e      	bne.n	80022a6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2205      	movs	r2, #5
 800226e:	4252      	negs	r2, r2
 8002270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2202      	movs	r2, #2
 8002276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	23c0      	movs	r3, #192	; 0xc0
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 f8e9 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 800228e:	e007      	b.n	80022a0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0018      	movs	r0, r3
 8002294:	f000 f8dc 	bl	8002450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f8e8 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2208      	movs	r2, #8
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d124      	bne.n	80022fe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2208      	movs	r2, #8
 80022bc:	4013      	ands	r3, r2
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d11d      	bne.n	80022fe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2209      	movs	r2, #9
 80022c8:	4252      	negs	r2, r2
 80022ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2204      	movs	r2, #4
 80022d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2203      	movs	r2, #3
 80022da:	4013      	ands	r3, r2
 80022dc:	d004      	beq.n	80022e8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f8bd 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 80022e6:	e007      	b.n	80022f8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 f8b0 	bl	8002450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 f8bc 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2210      	movs	r2, #16
 8002306:	4013      	ands	r3, r2
 8002308:	2b10      	cmp	r3, #16
 800230a:	d125      	bne.n	8002358 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2210      	movs	r2, #16
 8002314:	4013      	ands	r3, r2
 8002316:	2b10      	cmp	r3, #16
 8002318:	d11e      	bne.n	8002358 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2211      	movs	r2, #17
 8002320:	4252      	negs	r2, r2
 8002322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2208      	movs	r2, #8
 8002328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	23c0      	movs	r3, #192	; 0xc0
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4013      	ands	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	0018      	movs	r0, r3
 800233c:	f000 f890 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 8002340:	e007      	b.n	8002352 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0018      	movs	r0, r3
 8002346:	f000 f883 	bl	8002450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f88f 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2201      	movs	r2, #1
 8002360:	4013      	ands	r3, r2
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10f      	bne.n	8002386 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	4013      	ands	r3, r2
 8002370:	2b01      	cmp	r3, #1
 8002372:	d108      	bne.n	8002386 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2202      	movs	r2, #2
 800237a:	4252      	negs	r2, r2
 800237c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f7fe fac1 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	4013      	ands	r3, r2
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d10f      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2280      	movs	r2, #128	; 0x80
 800239c:	4013      	ands	r3, r2
 800239e:	2b80      	cmp	r3, #128	; 0x80
 80023a0:	d108      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2281      	movs	r2, #129	; 0x81
 80023a8:	4252      	negs	r2, r2
 80023aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f000 f8ec 	bl	800258c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	401a      	ands	r2, r3
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d10e      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b80      	cmp	r3, #128	; 0x80
 80023d4:	d107      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1c      	ldr	r2, [pc, #112]	; (800244c <HAL_TIM_IRQHandler+0x260>)
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 f8db 	bl	800259c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2240      	movs	r2, #64	; 0x40
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b40      	cmp	r3, #64	; 0x40
 80023f2:	d10f      	bne.n	8002414 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b40      	cmp	r3, #64	; 0x40
 8002400:	d108      	bne.n	8002414 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2241      	movs	r2, #65	; 0x41
 8002408:	4252      	negs	r2, r2
 800240a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	0018      	movs	r0, r3
 8002410:	f000 f836 	bl	8002480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2220      	movs	r2, #32
 800241c:	4013      	ands	r3, r2
 800241e:	2b20      	cmp	r3, #32
 8002420:	d10f      	bne.n	8002442 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	4013      	ands	r3, r2
 800242c:	2b20      	cmp	r3, #32
 800242e:	d108      	bne.n	8002442 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2221      	movs	r2, #33	; 0x21
 8002436:	4252      	negs	r2, r2
 8002438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f89d 	bl	800257c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b002      	add	sp, #8
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	fffffeff 	.word	0xfffffeff

08002450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}

08002490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <TIM_Base_SetConfig+0xd0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d003      	beq.n	80024b0 <TIM_Base_SetConfig+0x20>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a2e      	ldr	r2, [pc, #184]	; (8002564 <TIM_Base_SetConfig+0xd4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d108      	bne.n	80024c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2270      	movs	r2, #112	; 0x70
 80024b4:	4393      	bics	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a26      	ldr	r2, [pc, #152]	; (8002560 <TIM_Base_SetConfig+0xd0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d013      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a25      	ldr	r2, [pc, #148]	; (8002564 <TIM_Base_SetConfig+0xd4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00f      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a24      	ldr	r2, [pc, #144]	; (8002568 <TIM_Base_SetConfig+0xd8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00b      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a23      	ldr	r2, [pc, #140]	; (800256c <TIM_Base_SetConfig+0xdc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a22      	ldr	r2, [pc, #136]	; (8002570 <TIM_Base_SetConfig+0xe0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <TIM_Base_SetConfig+0x62>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a21      	ldr	r2, [pc, #132]	; (8002574 <TIM_Base_SetConfig+0xe4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d108      	bne.n	8002504 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a20      	ldr	r2, [pc, #128]	; (8002578 <TIM_Base_SetConfig+0xe8>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	4393      	bics	r3, r2
 800250a:	001a      	movs	r2, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a0c      	ldr	r2, [pc, #48]	; (8002560 <TIM_Base_SetConfig+0xd0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00b      	beq.n	800254a <TIM_Base_SetConfig+0xba>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <TIM_Base_SetConfig+0xdc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <TIM_Base_SetConfig+0xba>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <TIM_Base_SetConfig+0xe0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <TIM_Base_SetConfig+0xba>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <TIM_Base_SetConfig+0xe4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d103      	bne.n	8002552 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	615a      	str	r2, [r3, #20]
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b004      	add	sp, #16
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40012c00 	.word	0x40012c00
 8002564:	40000400 	.word	0x40000400
 8002568:	40002000 	.word	0x40002000
 800256c:	40014000 	.word	0x40014000
 8002570:	40014400 	.word	0x40014400
 8002574:	40014800 	.word	0x40014800
 8002578:	fffffcff 	.word	0xfffffcff

0800257c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80025a4:	46c0      	nop			; (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e046      	b.n	800264c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2288      	movs	r2, #136	; 0x88
 80025c2:	589b      	ldr	r3, [r3, r2]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2284      	movs	r2, #132	; 0x84
 80025cc:	2100      	movs	r1, #0
 80025ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7fe f9d4 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2288      	movs	r2, #136	; 0x88
 80025dc:	2124      	movs	r1, #36	; 0x24
 80025de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 f8cc 	bl	8002790 <UART_SetConfig>
 80025f8:	0003      	movs	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e024      	b.n	800264c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	0018      	movs	r0, r3
 800260e:	f000 fa63 	bl	8002ad8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	490d      	ldr	r1, [pc, #52]	; (8002654 <HAL_UART_Init+0xa8>)
 800261e:	400a      	ands	r2, r1
 8002620:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	212a      	movs	r1, #42	; 0x2a
 800262e:	438a      	bics	r2, r1
 8002630:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0018      	movs	r0, r3
 8002646:	f000 fafb 	bl	8002c40 <UART_CheckIdleState>
 800264a:	0003      	movs	r3, r0
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b002      	add	sp, #8
 8002652:	bd80      	pop	{r7, pc}
 8002654:	ffffb7ff 	.word	0xffffb7ff

08002658 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	1dbb      	adds	r3, r7, #6
 8002666:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2288      	movs	r2, #136	; 0x88
 800266c:	589b      	ldr	r3, [r3, r2]
 800266e:	2b20      	cmp	r3, #32
 8002670:	d000      	beq.n	8002674 <HAL_UART_Transmit+0x1c>
 8002672:	e088      	b.n	8002786 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_UART_Transmit+0x2a>
 800267a:	1dbb      	adds	r3, r7, #6
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e080      	b.n	8002788 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	015b      	lsls	r3, r3, #5
 800268e:	429a      	cmp	r2, r3
 8002690:	d109      	bne.n	80026a6 <HAL_UART_Transmit+0x4e>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2201      	movs	r2, #1
 800269e:	4013      	ands	r3, r2
 80026a0:	d001      	beq.n	80026a6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e070      	b.n	8002788 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2290      	movs	r2, #144	; 0x90
 80026aa:	2100      	movs	r1, #0
 80026ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2288      	movs	r2, #136	; 0x88
 80026b2:	2121      	movs	r1, #33	; 0x21
 80026b4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026b6:	f7fe fb1f 	bl	8000cf8 <HAL_GetTick>
 80026ba:	0003      	movs	r3, r0
 80026bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1dba      	adds	r2, r7, #6
 80026c2:	2154      	movs	r1, #84	; 0x54
 80026c4:	8812      	ldrh	r2, [r2, #0]
 80026c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1dba      	adds	r2, r7, #6
 80026cc:	2156      	movs	r1, #86	; 0x56
 80026ce:	8812      	ldrh	r2, [r2, #0]
 80026d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	015b      	lsls	r3, r3, #5
 80026da:	429a      	cmp	r2, r3
 80026dc:	d108      	bne.n	80026f0 <HAL_UART_Transmit+0x98>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d104      	bne.n	80026f0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	e003      	b.n	80026f8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026f8:	e02c      	b.n	8002754 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	0013      	movs	r3, r2
 8002704:	2200      	movs	r2, #0
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	f000 fae8 	bl	8002cdc <UART_WaitOnFlagUntilTimeout>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d001      	beq.n	8002714 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e039      	b.n	8002788 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10b      	bne.n	8002732 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	001a      	movs	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	05d2      	lsls	r2, r2, #23
 8002726:	0dd2      	lsrs	r2, r2, #23
 8002728:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	3302      	adds	r3, #2
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	e007      	b.n	8002742 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	781a      	ldrb	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3301      	adds	r3, #1
 8002740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2256      	movs	r2, #86	; 0x56
 8002746:	5a9b      	ldrh	r3, [r3, r2]
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b299      	uxth	r1, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2256      	movs	r2, #86	; 0x56
 8002752:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2256      	movs	r2, #86	; 0x56
 8002758:	5a9b      	ldrh	r3, [r3, r2]
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1cc      	bne.n	80026fa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	0013      	movs	r3, r2
 800276a:	2200      	movs	r2, #0
 800276c:	2140      	movs	r1, #64	; 0x40
 800276e:	f000 fab5 	bl	8002cdc <UART_WaitOnFlagUntilTimeout>
 8002772:	1e03      	subs	r3, r0, #0
 8002774:	d001      	beq.n	800277a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e006      	b.n	8002788 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2288      	movs	r2, #136	; 0x88
 800277e:	2120      	movs	r1, #32
 8002780:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002786:	2302      	movs	r3, #2
  }
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b008      	add	sp, #32
 800278e:	bd80      	pop	{r7, pc}

08002790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002798:	231a      	movs	r3, #26
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4abc      	ldr	r2, [pc, #752]	; (8002ab0 <UART_SetConfig+0x320>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4ab7      	ldr	r2, [pc, #732]	; (8002ab4 <UART_SetConfig+0x324>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4aae      	ldr	r2, [pc, #696]	; (8002ab8 <UART_SetConfig+0x328>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	430a      	orrs	r2, r1
 800280a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	220f      	movs	r2, #15
 8002814:	4393      	bics	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4aa4      	ldr	r2, [pc, #656]	; (8002abc <UART_SetConfig+0x32c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d127      	bne.n	800287e <UART_SetConfig+0xee>
 800282e:	4ba4      	ldr	r3, [pc, #656]	; (8002ac0 <UART_SetConfig+0x330>)
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	2203      	movs	r2, #3
 8002834:	4013      	ands	r3, r2
 8002836:	2b03      	cmp	r3, #3
 8002838:	d017      	beq.n	800286a <UART_SetConfig+0xda>
 800283a:	d81b      	bhi.n	8002874 <UART_SetConfig+0xe4>
 800283c:	2b02      	cmp	r3, #2
 800283e:	d00a      	beq.n	8002856 <UART_SetConfig+0xc6>
 8002840:	d818      	bhi.n	8002874 <UART_SetConfig+0xe4>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <UART_SetConfig+0xbc>
 8002846:	2b01      	cmp	r3, #1
 8002848:	d00a      	beq.n	8002860 <UART_SetConfig+0xd0>
 800284a:	e013      	b.n	8002874 <UART_SetConfig+0xe4>
 800284c:	231b      	movs	r3, #27
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e058      	b.n	8002908 <UART_SetConfig+0x178>
 8002856:	231b      	movs	r3, #27
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2202      	movs	r2, #2
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e053      	b.n	8002908 <UART_SetConfig+0x178>
 8002860:	231b      	movs	r3, #27
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2204      	movs	r2, #4
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e04e      	b.n	8002908 <UART_SetConfig+0x178>
 800286a:	231b      	movs	r3, #27
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2208      	movs	r2, #8
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e049      	b.n	8002908 <UART_SetConfig+0x178>
 8002874:	231b      	movs	r3, #27
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	2210      	movs	r2, #16
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e044      	b.n	8002908 <UART_SetConfig+0x178>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a90      	ldr	r2, [pc, #576]	; (8002ac4 <UART_SetConfig+0x334>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d127      	bne.n	80028d8 <UART_SetConfig+0x148>
 8002888:	4b8d      	ldr	r3, [pc, #564]	; (8002ac0 <UART_SetConfig+0x330>)
 800288a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288c:	220c      	movs	r2, #12
 800288e:	4013      	ands	r3, r2
 8002890:	2b0c      	cmp	r3, #12
 8002892:	d017      	beq.n	80028c4 <UART_SetConfig+0x134>
 8002894:	d81b      	bhi.n	80028ce <UART_SetConfig+0x13e>
 8002896:	2b08      	cmp	r3, #8
 8002898:	d00a      	beq.n	80028b0 <UART_SetConfig+0x120>
 800289a:	d818      	bhi.n	80028ce <UART_SetConfig+0x13e>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <UART_SetConfig+0x116>
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d00a      	beq.n	80028ba <UART_SetConfig+0x12a>
 80028a4:	e013      	b.n	80028ce <UART_SetConfig+0x13e>
 80028a6:	231b      	movs	r3, #27
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e02b      	b.n	8002908 <UART_SetConfig+0x178>
 80028b0:	231b      	movs	r3, #27
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2202      	movs	r2, #2
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e026      	b.n	8002908 <UART_SetConfig+0x178>
 80028ba:	231b      	movs	r3, #27
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	2204      	movs	r2, #4
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e021      	b.n	8002908 <UART_SetConfig+0x178>
 80028c4:	231b      	movs	r3, #27
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	2208      	movs	r2, #8
 80028ca:	701a      	strb	r2, [r3, #0]
 80028cc:	e01c      	b.n	8002908 <UART_SetConfig+0x178>
 80028ce:	231b      	movs	r3, #27
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	2210      	movs	r2, #16
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e017      	b.n	8002908 <UART_SetConfig+0x178>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a7a      	ldr	r2, [pc, #488]	; (8002ac8 <UART_SetConfig+0x338>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d104      	bne.n	80028ec <UART_SetConfig+0x15c>
 80028e2:	231b      	movs	r3, #27
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e00d      	b.n	8002908 <UART_SetConfig+0x178>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a76      	ldr	r2, [pc, #472]	; (8002acc <UART_SetConfig+0x33c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d104      	bne.n	8002900 <UART_SetConfig+0x170>
 80028f6:	231b      	movs	r3, #27
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e003      	b.n	8002908 <UART_SetConfig+0x178>
 8002900:	231b      	movs	r3, #27
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2210      	movs	r2, #16
 8002906:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	429a      	cmp	r2, r3
 8002912:	d000      	beq.n	8002916 <UART_SetConfig+0x186>
 8002914:	e065      	b.n	80029e2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002916:	231b      	movs	r3, #27
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d015      	beq.n	800294c <UART_SetConfig+0x1bc>
 8002920:	dc18      	bgt.n	8002954 <UART_SetConfig+0x1c4>
 8002922:	2b04      	cmp	r3, #4
 8002924:	d00d      	beq.n	8002942 <UART_SetConfig+0x1b2>
 8002926:	dc15      	bgt.n	8002954 <UART_SetConfig+0x1c4>
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <UART_SetConfig+0x1a2>
 800292c:	2b02      	cmp	r3, #2
 800292e:	d005      	beq.n	800293c <UART_SetConfig+0x1ac>
 8002930:	e010      	b.n	8002954 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002932:	f7ff fa31 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 8002936:	0003      	movs	r3, r0
 8002938:	617b      	str	r3, [r7, #20]
        break;
 800293a:	e012      	b.n	8002962 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800293c:	4b64      	ldr	r3, [pc, #400]	; (8002ad0 <UART_SetConfig+0x340>)
 800293e:	617b      	str	r3, [r7, #20]
        break;
 8002940:	e00f      	b.n	8002962 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002942:	f7ff f99d 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8002946:	0003      	movs	r3, r0
 8002948:	617b      	str	r3, [r7, #20]
        break;
 800294a:	e00a      	b.n	8002962 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	617b      	str	r3, [r7, #20]
        break;
 8002952:	e006      	b.n	8002962 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002958:	231a      	movs	r3, #26
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
        break;
 8002960:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d100      	bne.n	800296a <UART_SetConfig+0x1da>
 8002968:	e08d      	b.n	8002a86 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296e:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <UART_SetConfig+0x344>)
 8002970:	0052      	lsls	r2, r2, #1
 8002972:	5ad3      	ldrh	r3, [r2, r3]
 8002974:	0019      	movs	r1, r3
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7fd fbc6 	bl	8000108 <__udivsi3>
 800297c:	0003      	movs	r3, r0
 800297e:	005a      	lsls	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	18d2      	adds	r2, r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0019      	movs	r1, r3
 800298e:	0010      	movs	r0, r2
 8002990:	f7fd fbba 	bl	8000108 <__udivsi3>
 8002994:	0003      	movs	r3, r0
 8002996:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b0f      	cmp	r3, #15
 800299c:	d91c      	bls.n	80029d8 <UART_SetConfig+0x248>
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	025b      	lsls	r3, r3, #9
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d217      	bcs.n	80029d8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	200e      	movs	r0, #14
 80029ae:	183b      	adds	r3, r7, r0
 80029b0:	210f      	movs	r1, #15
 80029b2:	438a      	bics	r2, r1
 80029b4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2207      	movs	r2, #7
 80029be:	4013      	ands	r3, r2
 80029c0:	b299      	uxth	r1, r3
 80029c2:	183b      	adds	r3, r7, r0
 80029c4:	183a      	adds	r2, r7, r0
 80029c6:	8812      	ldrh	r2, [r2, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	183a      	adds	r2, r7, r0
 80029d2:	8812      	ldrh	r2, [r2, #0]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	e056      	b.n	8002a86 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80029d8:	231a      	movs	r3, #26
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e051      	b.n	8002a86 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029e2:	231b      	movs	r3, #27
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d015      	beq.n	8002a18 <UART_SetConfig+0x288>
 80029ec:	dc18      	bgt.n	8002a20 <UART_SetConfig+0x290>
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d00d      	beq.n	8002a0e <UART_SetConfig+0x27e>
 80029f2:	dc15      	bgt.n	8002a20 <UART_SetConfig+0x290>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <UART_SetConfig+0x26e>
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d005      	beq.n	8002a08 <UART_SetConfig+0x278>
 80029fc:	e010      	b.n	8002a20 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029fe:	f7ff f9cb 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 8002a02:	0003      	movs	r3, r0
 8002a04:	617b      	str	r3, [r7, #20]
        break;
 8002a06:	e012      	b.n	8002a2e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a08:	4b31      	ldr	r3, [pc, #196]	; (8002ad0 <UART_SetConfig+0x340>)
 8002a0a:	617b      	str	r3, [r7, #20]
        break;
 8002a0c:	e00f      	b.n	8002a2e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a0e:	f7ff f937 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8002a12:	0003      	movs	r3, r0
 8002a14:	617b      	str	r3, [r7, #20]
        break;
 8002a16:	e00a      	b.n	8002a2e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	617b      	str	r3, [r7, #20]
        break;
 8002a1e:	e006      	b.n	8002a2e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a24:	231a      	movs	r3, #26
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
        break;
 8002a2c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d028      	beq.n	8002a86 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <UART_SetConfig+0x344>)
 8002a3a:	0052      	lsls	r2, r2, #1
 8002a3c:	5ad3      	ldrh	r3, [r2, r3]
 8002a3e:	0019      	movs	r1, r3
 8002a40:	6978      	ldr	r0, [r7, #20]
 8002a42:	f7fd fb61 	bl	8000108 <__udivsi3>
 8002a46:	0003      	movs	r3, r0
 8002a48:	001a      	movs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	18d2      	adds	r2, r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0019      	movs	r1, r3
 8002a58:	0010      	movs	r0, r2
 8002a5a:	f7fd fb55 	bl	8000108 <__udivsi3>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b0f      	cmp	r3, #15
 8002a66:	d90a      	bls.n	8002a7e <UART_SetConfig+0x2ee>
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	025b      	lsls	r3, r3, #9
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d205      	bcs.n	8002a7e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60da      	str	r2, [r3, #12]
 8002a7c:	e003      	b.n	8002a86 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002a7e:	231a      	movs	r3, #26
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	226a      	movs	r2, #106	; 0x6a
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2268      	movs	r2, #104	; 0x68
 8002a92:	2101      	movs	r1, #1
 8002a94:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002aa2:	231a      	movs	r3, #26
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	781b      	ldrb	r3, [r3, #0]
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b008      	add	sp, #32
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	cfff69f3 	.word	0xcfff69f3
 8002ab4:	ffffcfff 	.word	0xffffcfff
 8002ab8:	11fff4ff 	.word	0x11fff4ff
 8002abc:	40013800 	.word	0x40013800
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40004400 	.word	0x40004400
 8002ac8:	40004800 	.word	0x40004800
 8002acc:	40004c00 	.word	0x40004c00
 8002ad0:	00f42400 	.word	0x00f42400
 8002ad4:	08005e4c 	.word	0x08005e4c

08002ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d00b      	beq.n	8002b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a4a      	ldr	r2, [pc, #296]	; (8002c1c <UART_AdvFeatureConfig+0x144>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	2202      	movs	r2, #2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d00b      	beq.n	8002b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4a43      	ldr	r2, [pc, #268]	; (8002c20 <UART_AdvFeatureConfig+0x148>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	0019      	movs	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	2204      	movs	r2, #4
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d00b      	beq.n	8002b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4a3b      	ldr	r2, [pc, #236]	; (8002c24 <UART_AdvFeatureConfig+0x14c>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d00b      	beq.n	8002b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a34      	ldr	r2, [pc, #208]	; (8002c28 <UART_AdvFeatureConfig+0x150>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d00b      	beq.n	8002b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <UART_AdvFeatureConfig+0x154>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	2220      	movs	r2, #32
 8002b90:	4013      	ands	r3, r2
 8002b92:	d00b      	beq.n	8002bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <UART_AdvFeatureConfig+0x158>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	2240      	movs	r2, #64	; 0x40
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d01d      	beq.n	8002bf2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <UART_AdvFeatureConfig+0x15c>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	035b      	lsls	r3, r3, #13
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d10b      	bne.n	8002bf2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <UART_AdvFeatureConfig+0x160>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d00b      	beq.n	8002c14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <UART_AdvFeatureConfig+0x164>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	0019      	movs	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  }
}
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	fffdffff 	.word	0xfffdffff
 8002c20:	fffeffff 	.word	0xfffeffff
 8002c24:	fffbffff 	.word	0xfffbffff
 8002c28:	ffff7fff 	.word	0xffff7fff
 8002c2c:	ffffefff 	.word	0xffffefff
 8002c30:	ffffdfff 	.word	0xffffdfff
 8002c34:	ffefffff 	.word	0xffefffff
 8002c38:	ff9fffff 	.word	0xff9fffff
 8002c3c:	fff7ffff 	.word	0xfff7ffff

08002c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2290      	movs	r2, #144	; 0x90
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c50:	f7fe f852 	bl	8000cf8 <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2208      	movs	r2, #8
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d10c      	bne.n	8002c80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2280      	movs	r2, #128	; 0x80
 8002c6a:	0391      	lsls	r1, r2, #14
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <UART_CheckIdleState+0x98>)
 8002c70:	9200      	str	r2, [sp, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f000 f832 	bl	8002cdc <UART_WaitOnFlagUntilTimeout>
 8002c78:	1e03      	subs	r3, r0, #0
 8002c7a:	d001      	beq.n	8002c80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e026      	b.n	8002cce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2204      	movs	r2, #4
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d10c      	bne.n	8002ca8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2280      	movs	r2, #128	; 0x80
 8002c92:	03d1      	lsls	r1, r2, #15
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4a10      	ldr	r2, [pc, #64]	; (8002cd8 <UART_CheckIdleState+0x98>)
 8002c98:	9200      	str	r2, [sp, #0]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f000 f81e 	bl	8002cdc <UART_WaitOnFlagUntilTimeout>
 8002ca0:	1e03      	subs	r3, r0, #0
 8002ca2:	d001      	beq.n	8002ca8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e012      	b.n	8002cce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2288      	movs	r2, #136	; 0x88
 8002cac:	2120      	movs	r1, #32
 8002cae:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	228c      	movs	r2, #140	; 0x8c
 8002cb4:	2120      	movs	r1, #32
 8002cb6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2284      	movs	r2, #132	; 0x84
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b004      	add	sp, #16
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	01ffffff 	.word	0x01ffffff

08002cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b094      	sub	sp, #80	; 0x50
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	1dfb      	adds	r3, r7, #7
 8002cea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cec:	e0a7      	b.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	d100      	bne.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002cf4:	e0a3      	b.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7fd ffff 	bl	8000cf8 <HAL_GetTick>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d13f      	bne.n	8002d8c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d14:	647b      	str	r3, [r7, #68]	; 0x44
 8002d16:	2301      	movs	r3, #1
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	494e      	ldr	r1, [pc, #312]	; (8002e68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	f383 8810 	msr	PRIMASK, r3
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d46:	643b      	str	r3, [r7, #64]	; 0x40
 8002d48:	2301      	movs	r3, #1
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2101      	movs	r1, #1
 8002d60:	438a      	bics	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6a:	f383 8810 	msr	PRIMASK, r3
}
 8002d6e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2288      	movs	r2, #136	; 0x88
 8002d74:	2120      	movs	r1, #32
 8002d76:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	228c      	movs	r2, #140	; 0x8c
 8002d7c:	2120      	movs	r1, #32
 8002d7e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2284      	movs	r2, #132	; 0x84
 8002d84:	2100      	movs	r1, #0
 8002d86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e069      	b.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2204      	movs	r2, #4
 8002d94:	4013      	ands	r3, r2
 8002d96:	d052      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	401a      	ands	r2, r3
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d148      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dba:	613b      	str	r3, [r7, #16]
  return(result);
 8002dbc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f383 8810 	msr	PRIMASK, r3
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4924      	ldr	r1, [pc, #144]	; (8002e68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f383 8810 	msr	PRIMASK, r3
}
 8002de6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dec:	61fb      	str	r3, [r7, #28]
  return(result);
 8002dee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df2:	2301      	movs	r3, #1
 8002df4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	f383 8810 	msr	PRIMASK, r3
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	438a      	bics	r2, r1
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	f383 8810 	msr	PRIMASK, r3
}
 8002e18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2288      	movs	r2, #136	; 0x88
 8002e1e:	2120      	movs	r1, #32
 8002e20:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	228c      	movs	r2, #140	; 0x8c
 8002e26:	2120      	movs	r1, #32
 8002e28:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2290      	movs	r2, #144	; 0x90
 8002e2e:	2120      	movs	r1, #32
 8002e30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2284      	movs	r2, #132	; 0x84
 8002e36:	2100      	movs	r1, #0
 8002e38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e010      	b.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	4013      	ands	r3, r2
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	425a      	negs	r2, r3
 8002e4e:	4153      	adcs	r3, r2
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	001a      	movs	r2, r3
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d100      	bne.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x182>
 8002e5c:	e747      	b.n	8002cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b014      	add	sp, #80	; 0x50
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	fffffe5f 	.word	0xfffffe5f

08002e6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2284      	movs	r2, #132	; 0x84
 8002e78:	5c9b      	ldrb	r3, [r3, r2]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_UARTEx_DisableFifoMode+0x16>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e027      	b.n	8002ed2 <HAL_UARTEx_DisableFifoMode+0x66>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2284      	movs	r2, #132	; 0x84
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2288      	movs	r2, #136	; 0x88
 8002e8e:	2124      	movs	r1, #36	; 0x24
 8002e90:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	438a      	bics	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <HAL_UARTEx_DisableFifoMode+0x70>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2288      	movs	r2, #136	; 0x88
 8002ec4:	2120      	movs	r1, #32
 8002ec6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2284      	movs	r2, #132	; 0x84
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	dfffffff 	.word	0xdfffffff

08002ee0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2284      	movs	r2, #132	; 0x84
 8002eee:	5c9b      	ldrb	r3, [r3, r2]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e02e      	b.n	8002f56 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2284      	movs	r2, #132	; 0x84
 8002efc:	2101      	movs	r1, #1
 8002efe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2288      	movs	r2, #136	; 0x88
 8002f04:	2124      	movs	r1, #36	; 0x24
 8002f06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	438a      	bics	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	08d9      	lsrs	r1, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f000 f854 	bl	8002fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2288      	movs	r2, #136	; 0x88
 8002f48:	2120      	movs	r1, #32
 8002f4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2284      	movs	r2, #132	; 0x84
 8002f50:	2100      	movs	r1, #0
 8002f52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b004      	add	sp, #16
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2284      	movs	r2, #132	; 0x84
 8002f6e:	5c9b      	ldrb	r3, [r3, r2]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e02f      	b.n	8002fd8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2284      	movs	r2, #132	; 0x84
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2288      	movs	r2, #136	; 0x88
 8002f84:	2124      	movs	r1, #36	; 0x24
 8002f86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	438a      	bics	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	0019      	movs	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 f813 	bl	8002fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2288      	movs	r2, #136	; 0x88
 8002fca:	2120      	movs	r1, #32
 8002fcc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2284      	movs	r2, #132	; 0x84
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b004      	add	sp, #16
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	f1ffffff 	.word	0xf1ffffff

08002fe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d108      	bne.n	8003006 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	226a      	movs	r2, #106	; 0x6a
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2268      	movs	r2, #104	; 0x68
 8003000:	2101      	movs	r1, #1
 8003002:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003004:	e043      	b.n	800308e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003006:	260f      	movs	r6, #15
 8003008:	19bb      	adds	r3, r7, r6
 800300a:	2208      	movs	r2, #8
 800300c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800300e:	200e      	movs	r0, #14
 8003010:	183b      	adds	r3, r7, r0
 8003012:	2208      	movs	r2, #8
 8003014:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	0e5b      	lsrs	r3, r3, #25
 800301e:	b2da      	uxtb	r2, r3
 8003020:	240d      	movs	r4, #13
 8003022:	193b      	adds	r3, r7, r4
 8003024:	2107      	movs	r1, #7
 8003026:	400a      	ands	r2, r1
 8003028:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	0f5b      	lsrs	r3, r3, #29
 8003032:	b2da      	uxtb	r2, r3
 8003034:	250c      	movs	r5, #12
 8003036:	197b      	adds	r3, r7, r5
 8003038:	2107      	movs	r1, #7
 800303a:	400a      	ands	r2, r1
 800303c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800303e:	183b      	adds	r3, r7, r0
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	197a      	adds	r2, r7, r5
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	4914      	ldr	r1, [pc, #80]	; (8003098 <UARTEx_SetNbDataToProcess+0xb4>)
 8003048:	5c8a      	ldrb	r2, [r1, r2]
 800304a:	435a      	muls	r2, r3
 800304c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800304e:	197b      	adds	r3, r7, r5
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <UARTEx_SetNbDataToProcess+0xb8>)
 8003054:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003056:	0019      	movs	r1, r3
 8003058:	f7fd f8e0 	bl	800021c <__divsi3>
 800305c:	0003      	movs	r3, r0
 800305e:	b299      	uxth	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	226a      	movs	r2, #106	; 0x6a
 8003064:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003066:	19bb      	adds	r3, r7, r6
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	193a      	adds	r2, r7, r4
 800306c:	7812      	ldrb	r2, [r2, #0]
 800306e:	490a      	ldr	r1, [pc, #40]	; (8003098 <UARTEx_SetNbDataToProcess+0xb4>)
 8003070:	5c8a      	ldrb	r2, [r1, r2]
 8003072:	435a      	muls	r2, r3
 8003074:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003076:	193b      	adds	r3, r7, r4
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	4a08      	ldr	r2, [pc, #32]	; (800309c <UARTEx_SetNbDataToProcess+0xb8>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800307e:	0019      	movs	r1, r3
 8003080:	f7fd f8cc 	bl	800021c <__divsi3>
 8003084:	0003      	movs	r3, r0
 8003086:	b299      	uxth	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2268      	movs	r2, #104	; 0x68
 800308c:	5299      	strh	r1, [r3, r2]
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	b005      	add	sp, #20
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	08005e64 	.word	0x08005e64
 800309c:	08005e6c 	.word	0x08005e6c

080030a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3308      	adds	r3, #8
 80030ac:	001a      	movs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	4252      	negs	r2, r2
 80030b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3308      	adds	r3, #8
 80030be:	001a      	movs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3308      	adds	r3, #8
 80030c8:	001a      	movs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}

080030dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b002      	add	sp, #8
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	601a      	str	r2, [r3, #0]
}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}

08003136 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	3301      	adds	r3, #1
 800314a:	d103      	bne.n	8003154 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e00c      	b.n	800316e <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3308      	adds	r3, #8
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e002      	b.n	8003162 <vListInsert+0x2c>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d2f6      	bcs.n	800315c <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	601a      	str	r2, [r3, #0]
}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6892      	ldr	r2, [r2, #8]
 80031b8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6852      	ldr	r2, [r2, #4]
 80031c2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d103      	bne.n	80031d6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b004      	add	sp, #16
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80031f2:	b5b0      	push	{r4, r5, r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80031fc:	2301      	movs	r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <xQueueGenericReset+0x1c>
 800320a:	b672      	cpsid	i
 800320c:	e7fe      	b.n	800320c <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d100      	bne.n	8003216 <xQueueGenericReset+0x24>
 8003214:	e06a      	b.n	80032ec <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800321a:	2b00      	cmp	r3, #0
 800321c:	d066      	beq.n	80032ec <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	2400      	movs	r4, #0
 8003228:	0c15      	lsrs	r5, r2, #16
 800322a:	0c19      	lsrs	r1, r3, #16
 800322c:	b2a8      	uxth	r0, r5
 800322e:	2800      	cmp	r0, #0
 8003230:	d104      	bne.n	800323c <xQueueGenericReset+0x4a>
 8003232:	b288      	uxth	r0, r1
 8003234:	2800      	cmp	r0, #0
 8003236:	d013      	beq.n	8003260 <xQueueGenericReset+0x6e>
 8003238:	1c10      	adds	r0, r2, #0
 800323a:	e004      	b.n	8003246 <xQueueGenericReset+0x54>
 800323c:	b289      	uxth	r1, r1
 800323e:	2900      	cmp	r1, #0
 8003240:	d10d      	bne.n	800325e <xQueueGenericReset+0x6c>
 8003242:	1c29      	adds	r1, r5, #0
 8003244:	1c18      	adds	r0, r3, #0
 8003246:	b292      	uxth	r2, r2
 8003248:	b29b      	uxth	r3, r3
 800324a:	435a      	muls	r2, r3
 800324c:	b283      	uxth	r3, r0
 800324e:	b289      	uxth	r1, r1
 8003250:	434b      	muls	r3, r1
 8003252:	0c12      	lsrs	r2, r2, #16
 8003254:	189b      	adds	r3, r3, r2
 8003256:	141b      	asrs	r3, r3, #16
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d000      	beq.n	8003260 <xQueueGenericReset+0x6e>
 800325e:	2401      	movs	r4, #1
 8003260:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8003262:	d143      	bne.n	80032ec <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8003264:	f001 fda4 	bl	8004db0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	434b      	muls	r3, r1
 8003276:	18d2      	adds	r2, r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003292:	1e59      	subs	r1, r3, #1
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	434b      	muls	r3, r1
 800329a:	18d2      	adds	r2, r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2244      	movs	r2, #68	; 0x44
 80032a4:	21ff      	movs	r1, #255	; 0xff
 80032a6:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2245      	movs	r2, #69	; 0x45
 80032ac:	21ff      	movs	r1, #255	; 0xff
 80032ae:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10d      	bne.n	80032d2 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d013      	beq.n	80032e6 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3310      	adds	r3, #16
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 fff6 	bl	80042b4 <xTaskRemoveFromEventList>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d00c      	beq.n	80032e6 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80032cc:	f001 fd60 	bl	8004d90 <vPortYield>
 80032d0:	e009      	b.n	80032e6 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3310      	adds	r3, #16
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7ff fee2 	bl	80030a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	3324      	adds	r3, #36	; 0x24
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7ff fedd 	bl	80030a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80032e6:	f001 fd75 	bl	8004dd4 <vPortExitCritical>
 80032ea:	e001      	b.n	80032f0 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <xQueueGenericReset+0x108>
 80032f6:	b672      	cpsid	i
 80032f8:	e7fe      	b.n	80032f8 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80032fa:	68fb      	ldr	r3, [r7, #12]
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b004      	add	sp, #16
 8003302:	bdb0      	pop	{r4, r5, r7, pc}

08003304 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	b08b      	sub	sp, #44	; 0x2c
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	1dfb      	adds	r3, r7, #7
 8003310:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d047      	beq.n	80033ac <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800331c:	2000      	movs	r0, #0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	0c19      	lsrs	r1, r3, #16
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1c1e      	adds	r6, r3, #0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	1c15      	adds	r5, r2, #0
 800332e:	b28a      	uxth	r2, r1
 8003330:	2a00      	cmp	r2, #0
 8003332:	d105      	bne.n	8003340 <xQueueGenericCreate+0x3c>
 8003334:	b29a      	uxth	r2, r3
 8003336:	2a00      	cmp	r2, #0
 8003338:	d013      	beq.n	8003362 <xQueueGenericCreate+0x5e>
 800333a:	1c19      	adds	r1, r3, #0
 800333c:	1c34      	adds	r4, r6, #0
 800333e:	e003      	b.n	8003348 <xQueueGenericCreate+0x44>
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <xQueueGenericCreate+0x5c>
 8003346:	1c2c      	adds	r4, r5, #0
 8003348:	b2b3      	uxth	r3, r6
 800334a:	b2aa      	uxth	r2, r5
 800334c:	435a      	muls	r2, r3
 800334e:	b2a3      	uxth	r3, r4
 8003350:	b289      	uxth	r1, r1
 8003352:	434b      	muls	r3, r1
 8003354:	0c12      	lsrs	r2, r2, #16
 8003356:	189b      	adds	r3, r3, r2
 8003358:	141b      	asrs	r3, r3, #16
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d000      	beq.n	8003362 <xQueueGenericCreate+0x5e>
 8003360:	2001      	movs	r0, #1
 8003362:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003364:	d122      	bne.n	80033ac <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800336c:	3351      	adds	r3, #81	; 0x51
 800336e:	d81d      	bhi.n	80033ac <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4353      	muls	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	3350      	adds	r3, #80	; 0x50
 800337c:	0018      	movs	r0, r3
 800337e:	f001 fdaf 	bl	8004ee0 <pvPortMalloc>
 8003382:	0003      	movs	r3, r0
 8003384:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d014      	beq.n	80033b6 <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	3350      	adds	r3, #80	; 0x50
 8003394:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	781c      	ldrb	r4, [r3, #0]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	0023      	movs	r3, r4
 80033a6:	f000 f80b 	bl	80033c0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80033aa:	e004      	b.n	80033b6 <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <xQueueGenericCreate+0xb2>
 80033b2:	b672      	cpsid	i
 80033b4:	e7fe      	b.n	80033b4 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80033b6:	69fb      	ldr	r3, [r7, #28]
    }
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b009      	add	sp, #36	; 0x24
 80033be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033c0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	001a      	movs	r2, r3
 80033ce:	1cfb      	adds	r3, r7, #3
 80033d0:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d103      	bne.n	80033e0 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e002      	b.n	80033e6 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2101      	movs	r1, #1
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7ff fefb 	bl	80031f2 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1cfa      	adds	r2, r7, #3
 8003400:	214c      	movs	r1, #76	; 0x4c
 8003402:	7812      	ldrb	r2, [r2, #0]
 8003404:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b004      	add	sp, #16
 800340c:	bd80      	pop	{r7, pc}

0800340e <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b08a      	sub	sp, #40	; 0x28
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <xQueueReceive+0x1e>
 8003428:	b672      	cpsid	i
 800342a:	e7fe      	b.n	800342a <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <xQueueReceive+0x2c>
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <xQueueReceive+0x30>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <xQueueReceive+0x32>
 800343e:	2300      	movs	r3, #0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <xQueueReceive+0x3a>
 8003444:	b672      	cpsid	i
 8003446:	e7fe      	b.n	8003446 <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003448:	f001 f91e 	bl	8004688 <xTaskGetSchedulerState>
 800344c:	1e03      	subs	r3, r0, #0
 800344e:	d102      	bne.n	8003456 <xQueueReceive+0x48>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <xQueueReceive+0x4c>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <xQueueReceive+0x4e>
 800345a:	2300      	movs	r3, #0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <xQueueReceive+0x56>
 8003460:	b672      	cpsid	i
 8003462:	e7fe      	b.n	8003462 <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003464:	f001 fca4 	bl	8004db0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01a      	beq.n	80034aa <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	0011      	movs	r1, r2
 800347a:	0018      	movs	r0, r3
 800347c:	f000 f87c 	bl	8003578 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	1e5a      	subs	r2, r3, #1
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	3310      	adds	r3, #16
 8003494:	0018      	movs	r0, r3
 8003496:	f000 ff0d 	bl	80042b4 <xTaskRemoveFromEventList>
 800349a:	1e03      	subs	r3, r0, #0
 800349c:	d001      	beq.n	80034a2 <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800349e:	f001 fc77 	bl	8004d90 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80034a2:	f001 fc97 	bl	8004dd4 <vPortExitCritical>
                return pdPASS;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e062      	b.n	8003570 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80034b0:	f001 fc90 	bl	8004dd4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e05b      	b.n	8003570 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80034be:	2314      	movs	r3, #20
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	0018      	movs	r0, r3
 80034c4:	f000 ffc0 	bl	8004448 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80034c8:	2301      	movs	r3, #1
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80034cc:	f001 fc82 	bl	8004dd4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034d0:	f000 fc34 	bl	8003d3c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034d4:	f001 fc6c 	bl	8004db0 <vPortEnterCritical>
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2244      	movs	r2, #68	; 0x44
 80034dc:	5c9b      	ldrb	r3, [r3, r2]
 80034de:	b25b      	sxtb	r3, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	d103      	bne.n	80034ec <xQueueReceive+0xde>
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	2244      	movs	r2, #68	; 0x44
 80034e8:	2100      	movs	r1, #0
 80034ea:	5499      	strb	r1, [r3, r2]
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	2245      	movs	r2, #69	; 0x45
 80034f0:	5c9b      	ldrb	r3, [r3, r2]
 80034f2:	b25b      	sxtb	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	d103      	bne.n	8003500 <xQueueReceive+0xf2>
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	2245      	movs	r2, #69	; 0x45
 80034fc:	2100      	movs	r1, #0
 80034fe:	5499      	strb	r1, [r3, r2]
 8003500:	f001 fc68 	bl	8004dd4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003504:	1d3a      	adds	r2, r7, #4
 8003506:	2314      	movs	r3, #20
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f000 ffaf 	bl	8004470 <xTaskCheckForTimeOut>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d11e      	bne.n	8003554 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	0018      	movs	r0, r3
 800351a:	f000 f8b1 	bl	8003680 <prvIsQueueEmpty>
 800351e:	1e03      	subs	r3, r0, #0
 8003520:	d011      	beq.n	8003546 <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	3324      	adds	r3, #36	; 0x24
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	0011      	movs	r1, r2
 800352a:	0018      	movs	r0, r3
 800352c:	f000 fe66 	bl	80041fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	0018      	movs	r0, r3
 8003534:	f000 f846 	bl	80035c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003538:	f000 fc0c 	bl	8003d54 <xTaskResumeAll>
 800353c:	1e03      	subs	r3, r0, #0
 800353e:	d191      	bne.n	8003464 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 8003540:	f001 fc26 	bl	8004d90 <vPortYield>
 8003544:	e78e      	b.n	8003464 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	0018      	movs	r0, r3
 800354a:	f000 f83b 	bl	80035c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800354e:	f000 fc01 	bl	8003d54 <xTaskResumeAll>
 8003552:	e787      	b.n	8003464 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	0018      	movs	r0, r3
 8003558:	f000 f834 	bl	80035c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800355c:	f000 fbfa 	bl	8003d54 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 f88c 	bl	8003680 <prvIsQueueEmpty>
 8003568:	1e03      	subs	r3, r0, #0
 800356a:	d100      	bne.n	800356e <xQueueReceive+0x160>
 800356c:	e77a      	b.n	8003464 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800356e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b00a      	add	sp, #40	; 0x28
 8003576:	bd80      	pop	{r7, pc}

08003578 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d018      	beq.n	80035bc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	18d2      	adds	r2, r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d303      	bcc.n	80035ac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68d9      	ldr	r1, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f001 fe5c 	bl	8005274 <memcpy>
    }
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80035cc:	f001 fbf0 	bl	8004db0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80035d0:	230f      	movs	r3, #15
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	2145      	movs	r1, #69	; 0x45
 80035d8:	5c52      	ldrb	r2, [r2, r1]
 80035da:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80035dc:	e013      	b.n	8003606 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3324      	adds	r3, #36	; 0x24
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 fe62 	bl	80042b4 <xTaskRemoveFromEventList>
 80035f0:	1e03      	subs	r3, r0, #0
 80035f2:	d001      	beq.n	80035f8 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80035f4:	f000 ff90 	bl	8004518 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80035f8:	210f      	movs	r1, #15
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	3b01      	subs	r3, #1
 8003600:	b2da      	uxtb	r2, r3
 8003602:	187b      	adds	r3, r7, r1
 8003604:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003606:	230f      	movs	r3, #15
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b25b      	sxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	dce5      	bgt.n	80035de <prvUnlockQueue+0x1a>
 8003612:	e000      	b.n	8003616 <prvUnlockQueue+0x52>
                    break;
 8003614:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2245      	movs	r2, #69	; 0x45
 800361a:	21ff      	movs	r1, #255	; 0xff
 800361c:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 800361e:	f001 fbd9 	bl	8004dd4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003622:	f001 fbc5 	bl	8004db0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003626:	230e      	movs	r3, #14
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	2144      	movs	r1, #68	; 0x44
 800362e:	5c52      	ldrb	r2, [r2, r1]
 8003630:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003632:	e013      	b.n	800365c <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d016      	beq.n	800366a <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3310      	adds	r3, #16
 8003640:	0018      	movs	r0, r3
 8003642:	f000 fe37 	bl	80042b4 <xTaskRemoveFromEventList>
 8003646:	1e03      	subs	r3, r0, #0
 8003648:	d001      	beq.n	800364e <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 800364a:	f000 ff65 	bl	8004518 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800364e:	210e      	movs	r1, #14
 8003650:	187b      	adds	r3, r7, r1
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	3b01      	subs	r3, #1
 8003656:	b2da      	uxtb	r2, r3
 8003658:	187b      	adds	r3, r7, r1
 800365a:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800365c:	230e      	movs	r3, #14
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	b25b      	sxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	dce5      	bgt.n	8003634 <prvUnlockQueue+0x70>
 8003668:	e000      	b.n	800366c <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 800366a:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2244      	movs	r2, #68	; 0x44
 8003670:	21ff      	movs	r1, #255	; 0xff
 8003672:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003674:	f001 fbae 	bl	8004dd4 <vPortExitCritical>
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b004      	add	sp, #16
 800367e:	bd80      	pop	{r7, pc}

08003680 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003688:	f001 fb92 	bl	8004db0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003694:	2301      	movs	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e001      	b.n	800369e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800369e:	f001 fb99 	bl	8004dd4 <vPortExitCritical>

    return xReturn;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b004      	add	sp, #16
 80036aa:	bd80      	pop	{r7, pc}

080036ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <vQueueAddToRegistry+0x18>
 80036c0:	b672      	cpsid	i
 80036c2:	e7fe      	b.n	80036c2 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d025      	beq.n	8003716 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e01f      	b.n	8003710 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80036d0:	4a17      	ldr	r2, [pc, #92]	; (8003730 <vQueueAddToRegistry+0x84>)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	18d3      	adds	r3, r2, r3
 80036d8:	3304      	adds	r3, #4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d105      	bne.n	80036ee <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	00da      	lsls	r2, r3, #3
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <vQueueAddToRegistry+0x84>)
 80036e8:	18d3      	adds	r3, r2, r3
 80036ea:	60bb      	str	r3, [r7, #8]
                    break;
 80036ec:	e013      	b.n	8003716 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <vQueueAddToRegistry+0x5e>
 80036f4:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <vQueueAddToRegistry+0x84>)
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	00d2      	lsls	r2, r2, #3
 80036fa:	58d3      	ldr	r3, [r2, r3]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	00da      	lsls	r2, r3, #3
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <vQueueAddToRegistry+0x84>)
 8003706:	18d3      	adds	r3, r2, r3
 8003708:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3301      	adds	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b07      	cmp	r3, #7
 8003714:	d9dc      	bls.n	80036d0 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b004      	add	sp, #16
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000194 	.word	0x20000194

08003734 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003744:	f001 fb34 	bl	8004db0 <vPortEnterCritical>
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2244      	movs	r2, #68	; 0x44
 800374c:	5c9b      	ldrb	r3, [r3, r2]
 800374e:	b25b      	sxtb	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	d103      	bne.n	800375c <vQueueWaitForMessageRestricted+0x28>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2244      	movs	r2, #68	; 0x44
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2245      	movs	r2, #69	; 0x45
 8003760:	5c9b      	ldrb	r3, [r3, r2]
 8003762:	b25b      	sxtb	r3, r3
 8003764:	3301      	adds	r3, #1
 8003766:	d103      	bne.n	8003770 <vQueueWaitForMessageRestricted+0x3c>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2245      	movs	r2, #69	; 0x45
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]
 8003770:	f001 fb30 	bl	8004dd4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	2b00      	cmp	r3, #0
 800377a:	d106      	bne.n	800378a <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	3324      	adds	r3, #36	; 0x24
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	0018      	movs	r0, r3
 8003786:	f000 fd57 	bl	8004238 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	0018      	movs	r0, r3
 800378e:	f7ff ff19 	bl	80035c4 <prvUnlockQueue>
    }
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b006      	add	sp, #24
 8003798:	bd80      	pop	{r7, pc}

0800379a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800379a:	b590      	push	{r4, r7, lr}
 800379c:	b08d      	sub	sp, #52	; 0x34
 800379e:	af04      	add	r7, sp, #16
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	1dbb      	adds	r3, r7, #6
 80037a8:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037aa:	1dbb      	adds	r3, r7, #6
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	0018      	movs	r0, r3
 80037b2:	f001 fb95 	bl	8004ee0 <pvPortMalloc>
 80037b6:	0003      	movs	r3, r0
 80037b8:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d016      	beq.n	80037ee <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037c0:	2054      	movs	r0, #84	; 0x54
 80037c2:	f001 fb8d 	bl	8004ee0 <pvPortMalloc>
 80037c6:	0003      	movs	r3, r0
 80037c8:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d009      	beq.n	80037e4 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2254      	movs	r2, #84	; 0x54
 80037d4:	2100      	movs	r1, #0
 80037d6:	0018      	movs	r0, r3
 80037d8:	f001 fd55 	bl	8005286 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
 80037e2:	e006      	b.n	80037f2 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f001 fc22 	bl	8005030 <vPortFree>
 80037ec:	e001      	b.n	80037f2 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d016      	beq.n	8003826 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037f8:	1dbb      	adds	r3, r7, #6
 80037fa:	881a      	ldrh	r2, [r3, #0]
 80037fc:	683c      	ldr	r4, [r7, #0]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	2300      	movs	r3, #0
 8003804:	9303      	str	r3, [sp, #12]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	9302      	str	r3, [sp, #8]
 800380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	0023      	movs	r3, r4
 8003814:	f000 f810 	bl	8003838 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	0018      	movs	r0, r3
 800381c:	f000 f88c 	bl	8003938 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003820:	2301      	movs	r3, #1
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	e002      	b.n	800382c <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003826:	2301      	movs	r3, #1
 8003828:	425b      	negs	r3, r3
 800382a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800382c:	69bb      	ldr	r3, [r7, #24]
    }
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b009      	add	sp, #36	; 0x24
 8003834:	bd90      	pop	{r4, r7, pc}
	...

08003838 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	001a      	movs	r2, r3
 8003850:	21a5      	movs	r1, #165	; 0xa5
 8003852:	f001 fd18 	bl	8005286 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4935      	ldr	r1, [pc, #212]	; (8003934 <prvInitialiseNewTask+0xfc>)
 800385e:	468c      	mov	ip, r1
 8003860:	4463      	add	r3, ip
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	18d3      	adds	r3, r2, r3
 8003866:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2207      	movs	r2, #7
 800386c:	4393      	bics	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2207      	movs	r2, #7
 8003874:	4013      	ands	r3, r2
 8003876:	d001      	beq.n	800387c <prvInitialiseNewTask+0x44>
 8003878:	b672      	cpsid	i
 800387a:	e7fe      	b.n	800387a <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01f      	beq.n	80038c2 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e013      	b.n	80038b0 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	18d3      	adds	r3, r2, r3
 800388e:	7818      	ldrb	r0, [r3, #0]
 8003890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003892:	2134      	movs	r1, #52	; 0x34
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	18d3      	adds	r3, r2, r3
 8003898:	185b      	adds	r3, r3, r1
 800389a:	1c02      	adds	r2, r0, #0
 800389c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	18d3      	adds	r3, r2, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d006      	beq.n	80038b8 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	3301      	adds	r3, #1
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d9e8      	bls.n	8003888 <prvInitialiseNewTask+0x50>
 80038b6:	e000      	b.n	80038ba <prvInitialiseNewTask+0x82>
            {
                break;
 80038b8:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	2238      	movs	r2, #56	; 0x38
 80038be:	2100      	movs	r1, #0
 80038c0:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d901      	bls.n	80038cc <prvInitialiseNewTask+0x94>
 80038c8:	b672      	cpsid	i
 80038ca:	e7fe      	b.n	80038ca <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d901      	bls.n	80038d6 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038d2:	2304      	movs	r3, #4
 80038d4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	6a3a      	ldr	r2, [r7, #32]
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	3304      	adds	r3, #4
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7ff fbf8 	bl	80030dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ee:	3318      	adds	r3, #24
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7ff fbf3 	bl	80030dc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038fa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	2205      	movs	r2, #5
 8003900:	1ad2      	subs	r2, r2, r3
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	68f9      	ldr	r1, [r7, #12]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	0018      	movs	r0, r3
 8003914:	f001 f9b0 	bl	8004c78 <pxPortInitialiseStack>
 8003918:	0002      	movs	r2, r0
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003928:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	46bd      	mov	sp, r7
 800392e:	b006      	add	sp, #24
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	3fffffff 	.word	0x3fffffff

08003938 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003940:	f001 fa36 	bl	8004db0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003944:	4b3d      	ldr	r3, [pc, #244]	; (8003a3c <prvAddNewTaskToReadyList+0x104>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <prvAddNewTaskToReadyList+0x104>)
 800394c:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 800394e:	4b3c      	ldr	r3, [pc, #240]	; (8003a40 <prvAddNewTaskToReadyList+0x108>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003956:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <prvAddNewTaskToReadyList+0x108>)
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800395c:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <prvAddNewTaskToReadyList+0x104>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d110      	bne.n	8003986 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003964:	f000 fdf2 	bl	800454c <prvInitialiseTaskLists>
 8003968:	e00d      	b.n	8003986 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800396a:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <prvAddNewTaskToReadyList+0x10c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003972:	4b33      	ldr	r3, [pc, #204]	; (8003a40 <prvAddNewTaskToReadyList+0x108>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	429a      	cmp	r2, r3
 800397e:	d802      	bhi.n	8003986 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003980:	4b2f      	ldr	r3, [pc, #188]	; (8003a40 <prvAddNewTaskToReadyList+0x108>)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <prvAddNewTaskToReadyList+0x110>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	4b2e      	ldr	r3, [pc, #184]	; (8003a48 <prvAddNewTaskToReadyList+0x110>)
 800398e:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003990:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <prvAddNewTaskToReadyList+0x110>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <prvAddNewTaskToReadyList+0x114>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d903      	bls.n	80039ac <prvAddNewTaskToReadyList+0x74>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <prvAddNewTaskToReadyList+0x114>)
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	4927      	ldr	r1, [pc, #156]	; (8003a50 <prvAddNewTaskToReadyList+0x118>)
 80039b2:	0013      	movs	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	189b      	adds	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	18cb      	adds	r3, r1, r3
 80039bc:	3304      	adds	r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	3204      	adds	r2, #4
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	1d1a      	adds	r2, r3, #4
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	609a      	str	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e6:	0013      	movs	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	189b      	adds	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <prvAddNewTaskToReadyList+0x118>)
 80039f0:	189a      	adds	r2, r3, r2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	615a      	str	r2, [r3, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fa:	4915      	ldr	r1, [pc, #84]	; (8003a50 <prvAddNewTaskToReadyList+0x118>)
 80039fc:	0013      	movs	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	189b      	adds	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	585b      	ldr	r3, [r3, r1]
 8003a06:	1c58      	adds	r0, r3, #1
 8003a08:	4911      	ldr	r1, [pc, #68]	; (8003a50 <prvAddNewTaskToReadyList+0x118>)
 8003a0a:	0013      	movs	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003a14:	f001 f9de 	bl	8004dd4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003a18:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <prvAddNewTaskToReadyList+0x10c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <prvAddNewTaskToReadyList+0x108>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d201      	bcs.n	8003a32 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003a2e:	f001 f9af 	bl	8004d90 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b004      	add	sp, #16
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	200002ac 	.word	0x200002ac
 8003a40:	200001d4 	.word	0x200001d4
 8003a44:	200002b8 	.word	0x200002b8
 8003a48:	200002c8 	.word	0x200002c8
 8003a4c:	200002b4 	.word	0x200002b4
 8003a50:	200001d8 	.word	0x200001d8

08003a54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d010      	beq.n	8003a88 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <vTaskDelay+0x48>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <vTaskDelay+0x1e>
 8003a6e:	b672      	cpsid	i
 8003a70:	e7fe      	b.n	8003a70 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8003a72:	f000 f963 	bl	8003d3c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2100      	movs	r1, #0
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 fe20 	bl	80046c0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003a80:	f000 f968 	bl	8003d54 <xTaskResumeAll>
 8003a84:	0003      	movs	r3, r0
 8003a86:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8003a8e:	f001 f97f 	bl	8004d90 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b004      	add	sp, #16
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	200002d4 	.word	0x200002d4

08003aa0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003aa8:	f001 f982 	bl	8004db0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <vTaskSuspend+0x18>
 8003ab2:	4b30      	ldr	r3, [pc, #192]	; (8003b74 <vTaskSuspend+0xd4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	e000      	b.n	8003aba <vTaskSuspend+0x1a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7ff fb6e 	bl	80031a2 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <vTaskSuspend+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	3318      	adds	r3, #24
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f7ff fb65 	bl	80031a2 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	1d1a      	adds	r2, r3, #4
 8003adc:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <vTaskSuspend+0xd8>)
 8003ade:	0011      	movs	r1, r2
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff fb06 	bl	80030f2 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e012      	b.n	8003b12 <vTaskSuspend+0x72>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	2150      	movs	r1, #80	; 0x50
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	18d3      	adds	r3, r2, r3
 8003af4:	185b      	adds	r3, r3, r1
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d106      	bne.n	8003b0c <vTaskSuspend+0x6c>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	2150      	movs	r1, #80	; 0x50
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	18d3      	adds	r3, r2, r3
 8003b06:	185b      	adds	r3, r3, r1
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	dde9      	ble.n	8003aec <vTaskSuspend+0x4c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8003b18:	f001 f95c 	bl	8004dd4 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003b1c:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <vTaskSuspend+0xdc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <vTaskSuspend+0x90>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8003b24:	f001 f944 	bl	8004db0 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8003b28:	f000 fd94 	bl	8004654 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8003b2c:	f001 f952 	bl	8004dd4 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <vTaskSuspend+0xd4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d118      	bne.n	8003b6c <vTaskSuspend+0xcc>
        {
            if( xSchedulerRunning != pdFALSE )
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <vTaskSuspend+0xdc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <vTaskSuspend+0xb4>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8003b42:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <vTaskSuspend+0xe0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <vTaskSuspend+0xae>
 8003b4a:	b672      	cpsid	i
 8003b4c:	e7fe      	b.n	8003b4c <vTaskSuspend+0xac>
                portYIELD_WITHIN_API();
 8003b4e:	f001 f91f 	bl	8004d90 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003b52:	e00b      	b.n	8003b6c <vTaskSuspend+0xcc>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <vTaskSuspend+0xd8>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <vTaskSuspend+0xe4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d103      	bne.n	8003b68 <vTaskSuspend+0xc8>
                    pxCurrentTCB = NULL;
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <vTaskSuspend+0xd4>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
    }
 8003b66:	e001      	b.n	8003b6c <vTaskSuspend+0xcc>
                    vTaskSwitchContext();
 8003b68:	f000 faf6 	bl	8004158 <vTaskSwitchContext>
    }
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b004      	add	sp, #16
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200001d4 	.word	0x200001d4
 8003b78:	20000298 	.word	0x20000298
 8003b7c:	200002b8 	.word	0x200002b8
 8003b80:	200002d4 	.word	0x200002d4
 8003b84:	200002ac 	.word	0x200002ac

08003b88 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60bb      	str	r3, [r7, #8]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <prvTaskIsTaskSuspended+0x1a>
 8003b9e:	b672      	cpsid	i
 8003ba0:	e7fe      	b.n	8003ba0 <prvTaskIsTaskSuspended+0x18>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <prvTaskIsTaskSuspended+0x44>)
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d10a      	bne.n	8003bc2 <prvTaskIsTaskSuspended+0x3a>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb0:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <prvTaskIsTaskSuspended+0x48>)
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d005      	beq.n	8003bc2 <prvTaskIsTaskSuspended+0x3a>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <prvTaskIsTaskSuspended+0x3a>
                {
                    xReturn = pdTRUE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b004      	add	sp, #16
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000298 	.word	0x20000298
 8003bd0:	2000026c 	.word	0x2000026c

08003bd4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <vTaskResume+0x16>
 8003be6:	b672      	cpsid	i
 8003be8:	e7fe      	b.n	8003be8 <vTaskResume+0x14>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003bea:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <vTaskResume+0xdc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d058      	beq.n	8003ca6 <vTaskResume+0xd2>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d055      	beq.n	8003ca6 <vTaskResume+0xd2>
        {
            taskENTER_CRITICAL();
 8003bfa:	f001 f8d9 	bl	8004db0 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7ff ffc1 	bl	8003b88 <prvTaskIsTaskSuspended>
 8003c06:	1e03      	subs	r3, r0, #0
 8003c08:	d04b      	beq.n	8003ca2 <vTaskResume+0xce>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f7ff fac7 	bl	80031a2 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <vTaskResume+0xe0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d903      	bls.n	8003c28 <vTaskResume+0x54>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <vTaskResume+0xe0>)
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4922      	ldr	r1, [pc, #136]	; (8003cb8 <vTaskResume+0xe4>)
 8003c2e:	0013      	movs	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	18cb      	adds	r3, r1, r3
 8003c38:	3304      	adds	r3, #4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	3204      	adds	r2, #4
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1d1a      	adds	r2, r3, #4
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	0013      	movs	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	189b      	adds	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <vTaskResume+0xe4>)
 8003c6c:	189a      	adds	r2, r3, r2
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	615a      	str	r2, [r3, #20]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c76:	4910      	ldr	r1, [pc, #64]	; (8003cb8 <vTaskResume+0xe4>)
 8003c78:	0013      	movs	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	585b      	ldr	r3, [r3, r1]
 8003c82:	1c58      	adds	r0, r3, #1
 8003c84:	490c      	ldr	r1, [pc, #48]	; (8003cb8 <vTaskResume+0xe4>)
 8003c86:	0013      	movs	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	189b      	adds	r3, r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	5058      	str	r0, [r3, r1]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <vTaskResume+0xdc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d301      	bcc.n	8003ca2 <vTaskResume+0xce>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8003c9e:	f001 f877 	bl	8004d90 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003ca2:	f001 f897 	bl	8004dd4 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	200001d4 	.word	0x200001d4
 8003cb4:	200002b4 	.word	0x200002b4
 8003cb8:	200001d8 	.word	0x200001d8

08003cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003cc2:	4917      	ldr	r1, [pc, #92]	; (8003d20 <vTaskStartScheduler+0x64>)
 8003cc4:	4817      	ldr	r0, [pc, #92]	; (8003d24 <vTaskStartScheduler+0x68>)
 8003cc6:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <vTaskStartScheduler+0x6c>)
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	223c      	movs	r2, #60	; 0x3c
 8003cd2:	f7ff fd62 	bl	800379a <xTaskCreate>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d103      	bne.n	8003ce8 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8003ce0:	f000 fd5c 	bl	800479c <xTimerCreateTimerTask>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d10d      	bne.n	8003d0a <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8003cee:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <vTaskStartScheduler+0x70>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	4252      	negs	r2, r2
 8003cf6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <vTaskStartScheduler+0x74>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <vTaskStartScheduler+0x78>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003d04:	f001 f820 	bl	8004d48 <xPortStartScheduler>
 8003d08:	e004      	b.n	8003d14 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <vTaskStartScheduler+0x58>
 8003d10:	b672      	cpsid	i
 8003d12:	e7fe      	b.n	8003d12 <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <vTaskStartScheduler+0x7c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	08005dd4 	.word	0x08005dd4
 8003d24:	0800452d 	.word	0x0800452d
 8003d28:	200002d0 	.word	0x200002d0
 8003d2c:	200002cc 	.word	0x200002cc
 8003d30:	200002b8 	.word	0x200002b8
 8003d34:	200002b0 	.word	0x200002b0
 8003d38:	2000000c 	.word	0x2000000c

08003d3c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <vTaskSuspendAll+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	4b02      	ldr	r3, [pc, #8]	; (8003d50 <vTaskSuspendAll+0x14>)
 8003d48:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200002d4 	.word	0x200002d4

08003d54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003d62:	4b68      	ldr	r3, [pc, #416]	; (8003f04 <xTaskResumeAll+0x1b0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <xTaskResumeAll+0x1a>
 8003d6a:	b672      	cpsid	i
 8003d6c:	e7fe      	b.n	8003d6c <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003d6e:	f001 f81f 	bl	8004db0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003d72:	4b64      	ldr	r3, [pc, #400]	; (8003f04 <xTaskResumeAll+0x1b0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	1e5a      	subs	r2, r3, #1
 8003d78:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <xTaskResumeAll+0x1b0>)
 8003d7a:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d7c:	4b61      	ldr	r3, [pc, #388]	; (8003f04 <xTaskResumeAll+0x1b0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d000      	beq.n	8003d86 <xTaskResumeAll+0x32>
 8003d84:	e0b7      	b.n	8003ef6 <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d86:	4b60      	ldr	r3, [pc, #384]	; (8003f08 <xTaskResumeAll+0x1b4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d100      	bne.n	8003d90 <xTaskResumeAll+0x3c>
 8003d8e:	e0b2      	b.n	8003ef6 <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d90:	e089      	b.n	8003ea6 <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d92:	4b5e      	ldr	r3, [pc, #376]	; (8003f0c <xTaskResumeAll+0x1b8>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	6a12      	ldr	r2, [r2, #32]
 8003da8:	609a      	str	r2, [r3, #8]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	69d2      	ldr	r2, [r2, #28]
 8003db2:	605a      	str	r2, [r3, #4]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	3318      	adds	r3, #24
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d103      	bne.n	8003dc8 <xTaskResumeAll+0x74>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	6a1a      	ldr	r2, [r3, #32]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	1e5a      	subs	r2, r3, #1
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	68d2      	ldr	r2, [r2, #12]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	6892      	ldr	r2, [r2, #8]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d103      	bne.n	8003e06 <xTaskResumeAll+0xb2>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	615a      	str	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	1e5a      	subs	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <xTaskResumeAll+0x1bc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d903      	bls.n	8003e2a <xTaskResumeAll+0xd6>
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e26:	4b3a      	ldr	r3, [pc, #232]	; (8003f10 <xTaskResumeAll+0x1bc>)
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2e:	4939      	ldr	r1, [pc, #228]	; (8003f14 <xTaskResumeAll+0x1c0>)
 8003e30:	0013      	movs	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	18cb      	adds	r3, r1, r3
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	3204      	adds	r2, #4
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	1d1a      	adds	r2, r3, #4
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	0013      	movs	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	189b      	adds	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4a29      	ldr	r2, [pc, #164]	; (8003f14 <xTaskResumeAll+0x1c0>)
 8003e6e:	189a      	adds	r2, r3, r2
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	615a      	str	r2, [r3, #20]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	4926      	ldr	r1, [pc, #152]	; (8003f14 <xTaskResumeAll+0x1c0>)
 8003e7a:	0013      	movs	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	585b      	ldr	r3, [r3, r1]
 8003e84:	1c58      	adds	r0, r3, #1
 8003e86:	4923      	ldr	r1, [pc, #140]	; (8003f14 <xTaskResumeAll+0x1c0>)
 8003e88:	0013      	movs	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <xTaskResumeAll+0x1c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8003ea0:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <xTaskResumeAll+0x1c8>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ea6:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <xTaskResumeAll+0x1b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d000      	beq.n	8003eb0 <xTaskResumeAll+0x15c>
 8003eae:	e770      	b.n	8003d92 <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003eb6:	f000 fbcd 	bl	8004654 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003eba:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <xTaskResumeAll+0x1cc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00f      	beq.n	8003ee6 <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003ec6:	f000 f83b 	bl	8003f40 <xTaskIncrementTick>
 8003eca:	1e03      	subs	r3, r0, #0
 8003ecc:	d002      	beq.n	8003ed4 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8003ece:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <xTaskResumeAll+0x1c8>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f2      	bne.n	8003ec6 <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <xTaskResumeAll+0x1cc>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <xTaskResumeAll+0x1c8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003ef2:	f000 ff4d 	bl	8004d90 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003ef6:	f000 ff6d 	bl	8004dd4 <vPortExitCritical>

    return xAlreadyYielded;
 8003efa:	693b      	ldr	r3, [r7, #16]
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b006      	add	sp, #24
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	200002d4 	.word	0x200002d4
 8003f08:	200002ac 	.word	0x200002ac
 8003f0c:	2000026c 	.word	0x2000026c
 8003f10:	200002b4 	.word	0x200002b4
 8003f14:	200001d8 	.word	0x200001d8
 8003f18:	200001d4 	.word	0x200001d4
 8003f1c:	200002c0 	.word	0x200002c0
 8003f20:	200002bc 	.word	0x200002bc

08003f24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003f2a:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <xTaskGetTickCount+0x18>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003f30:	687b      	ldr	r3, [r7, #4]
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b002      	add	sp, #8
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	200002b0 	.word	0x200002b0

08003f40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f4a:	4b78      	ldr	r3, [pc, #480]	; (800412c <xTaskIncrementTick+0x1ec>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d000      	beq.n	8003f54 <xTaskIncrementTick+0x14>
 8003f52:	e0e0      	b.n	8004116 <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f54:	4b76      	ldr	r3, [pc, #472]	; (8004130 <xTaskIncrementTick+0x1f0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003f5c:	4b74      	ldr	r3, [pc, #464]	; (8004130 <xTaskIncrementTick+0x1f0>)
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d117      	bne.n	8003f98 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8003f68:	4b72      	ldr	r3, [pc, #456]	; (8004134 <xTaskIncrementTick+0x1f4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <xTaskIncrementTick+0x36>
 8003f72:	b672      	cpsid	i
 8003f74:	e7fe      	b.n	8003f74 <xTaskIncrementTick+0x34>
 8003f76:	4b6f      	ldr	r3, [pc, #444]	; (8004134 <xTaskIncrementTick+0x1f4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	4b6e      	ldr	r3, [pc, #440]	; (8004138 <xTaskIncrementTick+0x1f8>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b6c      	ldr	r3, [pc, #432]	; (8004134 <xTaskIncrementTick+0x1f4>)
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	4b6c      	ldr	r3, [pc, #432]	; (8004138 <xTaskIncrementTick+0x1f8>)
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	4b6c      	ldr	r3, [pc, #432]	; (800413c <xTaskIncrementTick+0x1fc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	4b6a      	ldr	r3, [pc, #424]	; (800413c <xTaskIncrementTick+0x1fc>)
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f000 fb5e 	bl	8004654 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003f98:	4b69      	ldr	r3, [pc, #420]	; (8004140 <xTaskIncrementTick+0x200>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d200      	bcs.n	8003fa4 <xTaskIncrementTick+0x64>
 8003fa2:	e0a4      	b.n	80040ee <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa4:	4b63      	ldr	r3, [pc, #396]	; (8004134 <xTaskIncrementTick+0x1f4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fae:	4b64      	ldr	r3, [pc, #400]	; (8004140 <xTaskIncrementTick+0x200>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	4252      	negs	r2, r2
 8003fb4:	601a      	str	r2, [r3, #0]
                    break;
 8003fb6:	e09a      	b.n	80040ee <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb8:	4b5e      	ldr	r3, [pc, #376]	; (8004134 <xTaskIncrementTick+0x1f4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d203      	bcs.n	8003fd8 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003fd0:	4b5b      	ldr	r3, [pc, #364]	; (8004140 <xTaskIncrementTick+0x200>)
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003fd6:	e08a      	b.n	80040ee <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	68d2      	ldr	r2, [r2, #12]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	6892      	ldr	r2, [r2, #8]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d103      	bne.n	8004006 <xTaskIncrementTick+0xc6>
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2200      	movs	r2, #0
 800400a:	615a      	str	r2, [r3, #20]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	1e5a      	subs	r2, r3, #1
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01e      	beq.n	800405c <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	6a12      	ldr	r2, [r2, #32]
 800402c:	609a      	str	r2, [r3, #8]
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	69d2      	ldr	r2, [r2, #28]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	3318      	adds	r3, #24
 8004040:	429a      	cmp	r2, r3
 8004042:	d103      	bne.n	800404c <xTaskIncrementTick+0x10c>
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6a1a      	ldr	r2, [r3, #32]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2200      	movs	r2, #0
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	1e5a      	subs	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	4b38      	ldr	r3, [pc, #224]	; (8004144 <xTaskIncrementTick+0x204>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d903      	bls.n	8004070 <xTaskIncrementTick+0x130>
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406c:	4b35      	ldr	r3, [pc, #212]	; (8004144 <xTaskIncrementTick+0x204>)
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	4934      	ldr	r1, [pc, #208]	; (8004148 <xTaskIncrementTick+0x208>)
 8004076:	0013      	movs	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	189b      	adds	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	18cb      	adds	r3, r1, r3
 8004080:	3304      	adds	r3, #4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	60da      	str	r2, [r3, #12]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	3204      	adds	r2, #4
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1d1a      	adds	r2, r3, #4
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	609a      	str	r2, [r3, #8]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	0013      	movs	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4a25      	ldr	r2, [pc, #148]	; (8004148 <xTaskIncrementTick+0x208>)
 80040b4:	189a      	adds	r2, r3, r2
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	615a      	str	r2, [r3, #20]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	4922      	ldr	r1, [pc, #136]	; (8004148 <xTaskIncrementTick+0x208>)
 80040c0:	0013      	movs	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	189b      	adds	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	585b      	ldr	r3, [r3, r1]
 80040ca:	1c58      	adds	r0, r3, #1
 80040cc:	491e      	ldr	r1, [pc, #120]	; (8004148 <xTaskIncrementTick+0x208>)
 80040ce:	0013      	movs	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <xTaskIncrementTick+0x20c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d800      	bhi.n	80040e8 <xTaskIncrementTick+0x1a8>
 80040e6:	e75d      	b.n	8003fa4 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 80040e8:	2301      	movs	r3, #1
 80040ea:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ec:	e75a      	b.n	8003fa4 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040ee:	4b17      	ldr	r3, [pc, #92]	; (800414c <xTaskIncrementTick+0x20c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	4914      	ldr	r1, [pc, #80]	; (8004148 <xTaskIncrementTick+0x208>)
 80040f6:	0013      	movs	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	189b      	adds	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	585b      	ldr	r3, [r3, r1]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d901      	bls.n	8004108 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8004104:	2301      	movs	r3, #1
 8004106:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004108:	4b11      	ldr	r3, [pc, #68]	; (8004150 <xTaskIncrementTick+0x210>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8004110:	2301      	movs	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	e004      	b.n	8004120 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <xTaskIncrementTick+0x214>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <xTaskIncrementTick+0x214>)
 800411e:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004120:	69fb      	ldr	r3, [r7, #28]
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b008      	add	sp, #32
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	200002d4 	.word	0x200002d4
 8004130:	200002b0 	.word	0x200002b0
 8004134:	20000264 	.word	0x20000264
 8004138:	20000268 	.word	0x20000268
 800413c:	200002c4 	.word	0x200002c4
 8004140:	200002cc 	.word	0x200002cc
 8004144:	200002b4 	.word	0x200002b4
 8004148:	200001d8 	.word	0x200001d8
 800414c:	200001d4 	.word	0x200001d4
 8004150:	200002c0 	.word	0x200002c0
 8004154:	200002bc 	.word	0x200002bc

08004158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800415e:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <vTaskSwitchContext+0x90>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004166:	4b21      	ldr	r3, [pc, #132]	; (80041ec <vTaskSwitchContext+0x94>)
 8004168:	2201      	movs	r2, #1
 800416a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800416c:	e037      	b.n	80041de <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 800416e:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <vTaskSwitchContext+0x94>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004174:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <vTaskSwitchContext+0x98>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	e007      	b.n	800418c <vTaskSwitchContext+0x34>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <vTaskSwitchContext+0x2e>
 8004182:	b672      	cpsid	i
 8004184:	e7fe      	b.n	8004184 <vTaskSwitchContext+0x2c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3b01      	subs	r3, #1
 800418a:	607b      	str	r3, [r7, #4]
 800418c:	4919      	ldr	r1, [pc, #100]	; (80041f4 <vTaskSwitchContext+0x9c>)
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	0013      	movs	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	189b      	adds	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	585b      	ldr	r3, [r3, r1]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0ee      	beq.n	800417c <vTaskSwitchContext+0x24>
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	0013      	movs	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	189b      	adds	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <vTaskSwitchContext+0x9c>)
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d104      	bne.n	80041ce <vTaskSwitchContext+0x76>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <vTaskSwitchContext+0xa0>)
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <vTaskSwitchContext+0x98>)
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b002      	add	sp, #8
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	200002d4 	.word	0x200002d4
 80041ec:	200002c0 	.word	0x200002c0
 80041f0:	200002b4 	.word	0x200002b4
 80041f4:	200001d8 	.word	0x200001d8
 80041f8:	200001d4 	.word	0x200001d4

080041fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <vTaskPlaceOnEventList+0x14>
 800420c:	b672      	cpsid	i
 800420e:	e7fe      	b.n	800420e <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <vTaskPlaceOnEventList+0x38>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3318      	adds	r3, #24
 8004216:	001a      	movs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	0011      	movs	r1, r2
 800421c:	0018      	movs	r0, r3
 800421e:	f7fe ff8a 	bl	8003136 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2101      	movs	r1, #1
 8004226:	0018      	movs	r0, r3
 8004228:	f000 fa4a 	bl	80046c0 <prvAddCurrentTaskToDelayedList>
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}
 8004234:	200001d4 	.word	0x200001d4

08004238 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <vTaskPlaceOnEventListRestricted+0x16>
 800424a:	b672      	cpsid	i
 800424c:	e7fe      	b.n	800424c <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <vTaskPlaceOnEventListRestricted+0x78>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	61da      	str	r2, [r3, #28]
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <vTaskPlaceOnEventListRestricted+0x78>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	6892      	ldr	r2, [r2, #8]
 8004264:	621a      	str	r2, [r3, #32]
 8004266:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <vTaskPlaceOnEventListRestricted+0x78>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	3218      	adds	r2, #24
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <vTaskPlaceOnEventListRestricted+0x78>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3318      	adds	r3, #24
 8004278:	001a      	movs	r2, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <vTaskPlaceOnEventListRestricted+0x78>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	629a      	str	r2, [r3, #40]	; 0x28
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 8004296:	2301      	movs	r3, #1
 8004298:	425b      	negs	r3, r3
 800429a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	0011      	movs	r1, r2
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 fa0c 	bl	80046c0 <prvAddCurrentTaskToDelayedList>
    }
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b006      	add	sp, #24
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	200001d4 	.word	0x200001d4

080042b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <xTaskRemoveFromEventList+0x1a>
 80042ca:	b672      	cpsid	i
 80042cc:	e7fe      	b.n	80042cc <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	6a12      	ldr	r2, [r2, #32]
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	69d2      	ldr	r2, [r2, #28]
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	3318      	adds	r3, #24
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d103      	bne.n	80042fc <xTaskRemoveFromEventList+0x48>
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	6a1a      	ldr	r2, [r3, #32]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2200      	movs	r2, #0
 8004300:	629a      	str	r2, [r3, #40]	; 0x28
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	1e5a      	subs	r2, r3, #1
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800430c:	4b48      	ldr	r3, [pc, #288]	; (8004430 <xTaskRemoveFromEventList+0x17c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d15d      	bne.n	80043d0 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	68d2      	ldr	r2, [r2, #12]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	6892      	ldr	r2, [r2, #8]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	3304      	adds	r3, #4
 8004336:	429a      	cmp	r2, r3
 8004338:	d103      	bne.n	8004342 <xTaskRemoveFromEventList+0x8e>
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2200      	movs	r2, #0
 8004346:	615a      	str	r2, [r3, #20]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	1e5a      	subs	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004356:	4b37      	ldr	r3, [pc, #220]	; (8004434 <xTaskRemoveFromEventList+0x180>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d903      	bls.n	8004366 <xTaskRemoveFromEventList+0xb2>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	4b34      	ldr	r3, [pc, #208]	; (8004434 <xTaskRemoveFromEventList+0x180>)
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436a:	4933      	ldr	r1, [pc, #204]	; (8004438 <xTaskRemoveFromEventList+0x184>)
 800436c:	0013      	movs	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	189b      	adds	r3, r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	18cb      	adds	r3, r1, r3
 8004376:	3304      	adds	r3, #4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	609a      	str	r2, [r3, #8]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	60da      	str	r2, [r3, #12]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	3204      	adds	r2, #4
 8004392:	605a      	str	r2, [r3, #4]
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	1d1a      	adds	r2, r3, #4
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	0013      	movs	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4a23      	ldr	r2, [pc, #140]	; (8004438 <xTaskRemoveFromEventList+0x184>)
 80043aa:	189a      	adds	r2, r3, r2
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	615a      	str	r2, [r3, #20]
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b4:	4920      	ldr	r1, [pc, #128]	; (8004438 <xTaskRemoveFromEventList+0x184>)
 80043b6:	0013      	movs	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	189b      	adds	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	585b      	ldr	r3, [r3, r1]
 80043c0:	1c58      	adds	r0, r3, #1
 80043c2:	491d      	ldr	r1, [pc, #116]	; (8004438 <xTaskRemoveFromEventList+0x184>)
 80043c4:	0013      	movs	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	189b      	adds	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	5058      	str	r0, [r3, r1]
 80043ce:	e01b      	b.n	8004408 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043d0:	4b1a      	ldr	r3, [pc, #104]	; (800443c <xTaskRemoveFromEventList+0x188>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	61da      	str	r2, [r3, #28]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	621a      	str	r2, [r3, #32]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	3218      	adds	r2, #24
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	3318      	adds	r3, #24
 80043f2:	001a      	movs	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	4a10      	ldr	r2, [pc, #64]	; (800443c <xTaskRemoveFromEventList+0x188>)
 80043fc:	629a      	str	r2, [r3, #40]	; 0x28
 80043fe:	4b0f      	ldr	r3, [pc, #60]	; (800443c <xTaskRemoveFromEventList+0x188>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	4b0d      	ldr	r3, [pc, #52]	; (800443c <xTaskRemoveFromEventList+0x188>)
 8004406:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <xTaskRemoveFromEventList+0x18c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	429a      	cmp	r2, r3
 8004414:	d905      	bls.n	8004422 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004416:	2301      	movs	r3, #1
 8004418:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <xTaskRemoveFromEventList+0x190>)
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	e001      	b.n	8004426 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8004426:	69fb      	ldr	r3, [r7, #28]
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b008      	add	sp, #32
 800442e:	bd80      	pop	{r7, pc}
 8004430:	200002d4 	.word	0x200002d4
 8004434:	200002b4 	.word	0x200002b4
 8004438:	200001d8 	.word	0x200001d8
 800443c:	2000026c 	.word	0x2000026c
 8004440:	200001d4 	.word	0x200001d4
 8004444:	200002c0 	.word	0x200002c0

08004448 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <vTaskInternalSetTimeOutState+0x20>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <vTaskInternalSetTimeOutState+0x24>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	605a      	str	r2, [r3, #4]
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	b002      	add	sp, #8
 8004466:	bd80      	pop	{r7, pc}
 8004468:	200002c4 	.word	0x200002c4
 800446c:	200002b0 	.word	0x200002b0

08004470 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <xTaskCheckForTimeOut+0x14>
 8004480:	b672      	cpsid	i
 8004482:	e7fe      	b.n	8004482 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <xTaskCheckForTimeOut+0x1e>
 800448a:	b672      	cpsid	i
 800448c:	e7fe      	b.n	800448c <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 800448e:	f000 fc8f 	bl	8004db0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004492:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <xTaskCheckForTimeOut+0xa0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3301      	adds	r3, #1
 80044a8:	d102      	bne.n	80044b0 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	e027      	b.n	8004500 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b17      	ldr	r3, [pc, #92]	; (8004514 <xTaskCheckForTimeOut+0xa4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d00a      	beq.n	80044d2 <xTaskCheckForTimeOut+0x62>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d305      	bcc.n	80044d2 <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80044c6:	2301      	movs	r3, #1
 80044c8:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	e016      	b.n	8004500 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d20c      	bcs.n	80044f6 <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1ad2      	subs	r2, r2, r3
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	0018      	movs	r0, r3
 80044ec:	f7ff ffac 	bl	8004448 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e004      	b.n	8004500 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80044fc:	2301      	movs	r3, #1
 80044fe:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8004500:	f000 fc68 	bl	8004dd4 <vPortExitCritical>

    return xReturn;
 8004504:	697b      	ldr	r3, [r7, #20]
}
 8004506:	0018      	movs	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	b006      	add	sp, #24
 800450c:	bd80      	pop	{r7, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	200002b0 	.word	0x200002b0
 8004514:	200002c4 	.word	0x200002c4

08004518 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800451c:	4b02      	ldr	r3, [pc, #8]	; (8004528 <vTaskMissedYield+0x10>)
 800451e:	2201      	movs	r2, #1
 8004520:	601a      	str	r2, [r3, #0]
}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	200002c0 	.word	0x200002c0

0800452c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004534:	f000 f84e 	bl	80045d4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004538:	4b03      	ldr	r3, [pc, #12]	; (8004548 <prvIdleTask+0x1c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d9f9      	bls.n	8004534 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004540:	f000 fc26 	bl	8004d90 <vPortYield>
        prvCheckTasksWaitingTermination();
 8004544:	e7f6      	b.n	8004534 <prvIdleTask+0x8>
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	200001d8 	.word	0x200001d8

0800454c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	e00c      	b.n	8004572 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	0013      	movs	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	189b      	adds	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <prvInitialiseTaskLists+0x68>)
 8004564:	189b      	adds	r3, r3, r2
 8004566:	0018      	movs	r0, r3
 8004568:	f7fe fd9a 	bl	80030a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3301      	adds	r3, #1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d9ef      	bls.n	8004558 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <prvInitialiseTaskLists+0x6c>)
 800457a:	0018      	movs	r0, r3
 800457c:	f7fe fd90 	bl	80030a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004580:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <prvInitialiseTaskLists+0x70>)
 8004582:	0018      	movs	r0, r3
 8004584:	f7fe fd8c 	bl	80030a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <prvInitialiseTaskLists+0x74>)
 800458a:	0018      	movs	r0, r3
 800458c:	f7fe fd88 	bl	80030a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <prvInitialiseTaskLists+0x78>)
 8004592:	0018      	movs	r0, r3
 8004594:	f7fe fd84 	bl	80030a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <prvInitialiseTaskLists+0x7c>)
 800459a:	0018      	movs	r0, r3
 800459c:	f7fe fd80 	bl	80030a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80045a0:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <prvInitialiseTaskLists+0x80>)
 80045a2:	4a05      	ldr	r2, [pc, #20]	; (80045b8 <prvInitialiseTaskLists+0x6c>)
 80045a4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <prvInitialiseTaskLists+0x84>)
 80045a8:	4a04      	ldr	r2, [pc, #16]	; (80045bc <prvInitialiseTaskLists+0x70>)
 80045aa:	601a      	str	r2, [r3, #0]
}
 80045ac:	46c0      	nop			; (mov r8, r8)
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b002      	add	sp, #8
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	200001d8 	.word	0x200001d8
 80045b8:	2000023c 	.word	0x2000023c
 80045bc:	20000250 	.word	0x20000250
 80045c0:	2000026c 	.word	0x2000026c
 80045c4:	20000280 	.word	0x20000280
 80045c8:	20000298 	.word	0x20000298
 80045cc:	20000264 	.word	0x20000264
 80045d0:	20000268 	.word	0x20000268

080045d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045da:	e01a      	b.n	8004612 <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 80045dc:	f000 fbe8 	bl	8004db0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e0:	4b10      	ldr	r3, [pc, #64]	; (8004624 <prvCheckTasksWaitingTermination+0x50>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7fe fdd8 	bl	80031a2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <prvCheckTasksWaitingTermination+0x54>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	1e5a      	subs	r2, r3, #1
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <prvCheckTasksWaitingTermination+0x54>)
 80045fa:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <prvCheckTasksWaitingTermination+0x58>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	1e5a      	subs	r2, r3, #1
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <prvCheckTasksWaitingTermination+0x58>)
 8004604:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8004606:	f000 fbe5 	bl	8004dd4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	0018      	movs	r0, r3
 800460e:	f000 f80f 	bl	8004630 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <prvCheckTasksWaitingTermination+0x58>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e0      	bne.n	80045dc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000280 	.word	0x20000280
 8004628:	200002ac 	.word	0x200002ac
 800462c:	20000294 	.word	0x20000294

08004630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	0018      	movs	r0, r3
 800463e:	f000 fcf7 	bl	8005030 <vPortFree>
            vPortFree( pxTCB );
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 fcf3 	bl	8005030 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	46bd      	mov	sp, r7
 800464e:	b002      	add	sp, #8
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <prvResetNextTaskUnblockTime+0x2c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <prvResetNextTaskUnblockTime+0x30>)
 8004664:	2201      	movs	r2, #1
 8004666:	4252      	negs	r2, r2
 8004668:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800466a:	e005      	b.n	8004678 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800466c:	4b04      	ldr	r3, [pc, #16]	; (8004680 <prvResetNextTaskUnblockTime+0x2c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b03      	ldr	r3, [pc, #12]	; (8004684 <prvResetNextTaskUnblockTime+0x30>)
 8004676:	601a      	str	r2, [r3, #0]
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	20000264 	.word	0x20000264
 8004684:	200002cc 	.word	0x200002cc

08004688 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <xTaskGetSchedulerState+0x30>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004696:	2301      	movs	r3, #1
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	e008      	b.n	80046ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <xTaskGetSchedulerState+0x34>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80046a4:	2302      	movs	r3, #2
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	e001      	b.n	80046ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80046aa:	2300      	movs	r3, #0
 80046ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80046ae:	687b      	ldr	r3, [r7, #4]
    }
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b002      	add	sp, #8
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200002b8 	.word	0x200002b8
 80046bc:	200002d4 	.word	0x200002d4

080046c0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046ca:	4b2e      	ldr	r3, [pc, #184]	; (8004784 <prvAddCurrentTaskToDelayedList+0xc4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046d0:	4b2d      	ldr	r3, [pc, #180]	; (8004788 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3304      	adds	r3, #4
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7fe fd63 	bl	80031a2 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3301      	adds	r3, #1
 80046e0:	d124      	bne.n	800472c <prvAddCurrentTaskToDelayedList+0x6c>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d021      	beq.n	800472c <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e8:	4b28      	ldr	r3, [pc, #160]	; (800478c <prvAddCurrentTaskToDelayedList+0xcc>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	4b26      	ldr	r3, [pc, #152]	; (8004788 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	609a      	str	r2, [r3, #8]
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	6892      	ldr	r2, [r2, #8]
 80046fe:	60da      	str	r2, [r3, #12]
 8004700:	4b21      	ldr	r3, [pc, #132]	; (8004788 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	3204      	adds	r2, #4
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <prvAddCurrentTaskToDelayedList+0xc8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	1d1a      	adds	r2, r3, #4
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	609a      	str	r2, [r3, #8]
 8004716:	4b1c      	ldr	r3, [pc, #112]	; (8004788 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1c      	ldr	r2, [pc, #112]	; (800478c <prvAddCurrentTaskToDelayedList+0xcc>)
 800471c:	615a      	str	r2, [r3, #20]
 800471e:	4b1b      	ldr	r3, [pc, #108]	; (800478c <prvAddCurrentTaskToDelayedList+0xcc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	4b19      	ldr	r3, [pc, #100]	; (800478c <prvAddCurrentTaskToDelayedList+0xcc>)
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800472a:	e026      	b.n	800477a <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	18d3      	adds	r3, r2, r3
 8004732:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004734:	4b14      	ldr	r3, [pc, #80]	; (8004788 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	429a      	cmp	r2, r3
 8004742:	d209      	bcs.n	8004758 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004744:	4b12      	ldr	r3, [pc, #72]	; (8004790 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <prvAddCurrentTaskToDelayedList+0xc8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3304      	adds	r3, #4
 800474e:	0019      	movs	r1, r3
 8004750:	0010      	movs	r0, r2
 8004752:	f7fe fcf0 	bl	8003136 <vListInsert>
}
 8004756:	e010      	b.n	800477a <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <prvAddCurrentTaskToDelayedList+0xd4>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <prvAddCurrentTaskToDelayedList+0xc8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3304      	adds	r3, #4
 8004762:	0019      	movs	r1, r3
 8004764:	0010      	movs	r0, r2
 8004766:	f7fe fce6 	bl	8003136 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <prvAddCurrentTaskToDelayedList+0xd8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	429a      	cmp	r2, r3
 8004772:	d202      	bcs.n	800477a <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	46bd      	mov	sp, r7
 800477e:	b006      	add	sp, #24
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	200002b0 	.word	0x200002b0
 8004788:	200001d4 	.word	0x200001d4
 800478c:	20000298 	.word	0x20000298
 8004790:	20000268 	.word	0x20000268
 8004794:	20000264 	.word	0x20000264
 8004798:	200002cc 	.word	0x200002cc

0800479c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80047a6:	f000 fa2d 	bl	8004c04 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80047aa:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <xTimerCreateTimerTask+0x44>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80047b2:	490c      	ldr	r1, [pc, #48]	; (80047e4 <xTimerCreateTimerTask+0x48>)
 80047b4:	480c      	ldr	r0, [pc, #48]	; (80047e8 <xTimerCreateTimerTask+0x4c>)
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <xTimerCreateTimerTask+0x50>)
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	2302      	movs	r3, #2
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2300      	movs	r3, #0
 80047c0:	2250      	movs	r2, #80	; 0x50
 80047c2:	f7fe ffea 	bl	800379a <xTaskCreate>
 80047c6:	0003      	movs	r3, r0
 80047c8:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <xTimerCreateTimerTask+0x38>
 80047d0:	b672      	cpsid	i
 80047d2:	e7fe      	b.n	80047d2 <xTimerCreateTimerTask+0x36>
        return xReturn;
 80047d4:	687b      	ldr	r3, [r7, #4]
    }
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	b002      	add	sp, #8
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	20000308 	.word	0x20000308
 80047e4:	08005ddc 	.word	0x08005ddc
 80047e8:	08004899 	.word	0x08004899
 80047ec:	2000030c 	.word	0x2000030c

080047f0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80047fc:	e009      	b.n	8004812 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	18d3      	adds	r3, r2, r3
 8004806:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	0010      	movs	r0, r2
 8004810:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	18d1      	adds	r1, r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f8d8 	bl	80049d4 <prvInsertTimerInActiveList>
 8004824:	1e03      	subs	r3, r0, #0
 8004826:	d1ea      	bne.n	80047fe <prvReloadTimer+0xe>
        }
    }
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	46bd      	mov	sp, r7
 800482e:	b004      	add	sp, #16
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <prvProcessExpiredTimer+0x60>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3304      	adds	r3, #4
 800484c:	0018      	movs	r0, r3
 800484e:	f7fe fca8 	bl	80031a2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2228      	movs	r2, #40	; 0x28
 8004856:	5c9b      	ldrb	r3, [r3, r2]
 8004858:	001a      	movs	r2, r3
 800485a:	2304      	movs	r3, #4
 800485c:	4013      	ands	r3, r2
 800485e:	d006      	beq.n	800486e <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff ffc2 	bl	80047f0 <prvReloadTimer>
 800486c:	e008      	b.n	8004880 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2228      	movs	r2, #40	; 0x28
 8004872:	5c9b      	ldrb	r3, [r3, r2]
 8004874:	2201      	movs	r2, #1
 8004876:	4393      	bics	r3, r2
 8004878:	b2d9      	uxtb	r1, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2228      	movs	r2, #40	; 0x28
 800487e:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	0010      	movs	r0, r2
 8004888:	4798      	blx	r3
    }
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	b004      	add	sp, #16
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	20000300 	.word	0x20000300

08004898 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048a0:	2308      	movs	r3, #8
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	0018      	movs	r0, r3
 80048a6:	f000 f853 	bl	8004950 <prvGetNextExpireTime>
 80048aa:	0003      	movs	r3, r0
 80048ac:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	0011      	movs	r1, r2
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 f803 	bl	80048c0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80048ba:	f000 f8cd 	bl	8004a58 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048be:	e7ef      	b.n	80048a0 <prvTimerTask+0x8>

080048c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80048ca:	f7ff fa37 	bl	8003d3c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048ce:	2308      	movs	r3, #8
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	0018      	movs	r0, r3
 80048d4:	f000 f85e 	bl	8004994 <prvSampleTimeNow>
 80048d8:	0003      	movs	r3, r0
 80048da:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d12b      	bne.n	800493a <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10c      	bne.n	8004902 <prvProcessTimerOrBlockTask+0x42>
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d808      	bhi.n	8004902 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80048f0:	f7ff fa30 	bl	8003d54 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0011      	movs	r1, r2
 80048fa:	0018      	movs	r0, r3
 80048fc:	f7ff ff9a 	bl	8004834 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004900:	e01d      	b.n	800493e <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <prvProcessTimerOrBlockTask+0x88>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <prvProcessTimerOrBlockTask+0x56>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <prvProcessTimerOrBlockTask+0x58>
 8004916:	2300      	movs	r3, #0
 8004918:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800491a:	4b0c      	ldr	r3, [pc, #48]	; (800494c <prvProcessTimerOrBlockTask+0x8c>)
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	0019      	movs	r1, r3
 8004928:	f7fe ff04 	bl	8003734 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800492c:	f7ff fa12 	bl	8003d54 <xTaskResumeAll>
 8004930:	1e03      	subs	r3, r0, #0
 8004932:	d104      	bne.n	800493e <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8004934:	f000 fa2c 	bl	8004d90 <vPortYield>
    }
 8004938:	e001      	b.n	800493e <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 800493a:	f7ff fa0b 	bl	8003d54 <xTaskResumeAll>
    }
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	46bd      	mov	sp, r7
 8004942:	b004      	add	sp, #16
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	20000304 	.word	0x20000304
 800494c:	20000308 	.word	0x20000308

08004950 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004958:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <prvGetNextExpireTime+0x40>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <prvGetNextExpireTime+0x16>
 8004962:	2201      	movs	r2, #1
 8004964:	e000      	b.n	8004968 <prvGetNextExpireTime+0x18>
 8004966:	2200      	movs	r2, #0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d105      	bne.n	8004980 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <prvGetNextExpireTime+0x40>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e001      	b.n	8004984 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004984:	68fb      	ldr	r3, [r7, #12]
    }
 8004986:	0018      	movs	r0, r3
 8004988:	46bd      	mov	sp, r7
 800498a:	b004      	add	sp, #16
 800498c:	bd80      	pop	{r7, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	20000300 	.word	0x20000300

08004994 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800499c:	f7ff fac2 	bl	8003f24 <xTaskGetTickCount>
 80049a0:	0003      	movs	r3, r0
 80049a2:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <prvSampleTimeNow+0x3c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d205      	bcs.n	80049ba <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 80049ae:	f000 f901 	bl	8004bb4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e002      	b.n	80049c0 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <prvSampleTimeNow+0x3c>)
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 80049c6:	68fb      	ldr	r3, [r7, #12]
    }
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b004      	add	sp, #16
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000310 	.word	0x20000310

080049d4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d812      	bhi.n	8004a20 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	1ad2      	subs	r2, r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d302      	bcc.n	8004a0e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e01b      	b.n	8004a46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <prvInsertTimerInActiveList+0x7c>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3304      	adds	r3, #4
 8004a16:	0019      	movs	r1, r3
 8004a18:	0010      	movs	r0, r2
 8004a1a:	f7fe fb8c 	bl	8003136 <vListInsert>
 8004a1e:	e012      	b.n	8004a46 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d206      	bcs.n	8004a36 <prvInsertTimerInActiveList+0x62>
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d302      	bcc.n	8004a36 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004a30:	2301      	movs	r3, #1
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e007      	b.n	8004a46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a36:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <prvInsertTimerInActiveList+0x80>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	0019      	movs	r1, r3
 8004a40:	0010      	movs	r0, r2
 8004a42:	f7fe fb78 	bl	8003136 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004a46:	697b      	ldr	r3, [r7, #20]
    }
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b006      	add	sp, #24
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000304 	.word	0x20000304
 8004a54:	20000300 	.word	0x20000300

08004a58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a5e:	e095      	b.n	8004b8c <prvProcessReceivedCommands+0x134>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	da00      	bge.n	8004a6a <prvProcessReceivedCommands+0x12>
 8004a68:	e08f      	b.n	8004b8a <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a6a:	1d3b      	adds	r3, r7, #4
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7fe fb90 	bl	80031a2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a82:	003b      	movs	r3, r7
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7ff ff85 	bl	8004994 <prvSampleTimeNow>
 8004a8a:	0003      	movs	r3, r0
 8004a8c:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b09      	cmp	r3, #9
 8004a94:	d900      	bls.n	8004a98 <prvProcessReceivedCommands+0x40>
 8004a96:	e079      	b.n	8004b8c <prvProcessReceivedCommands+0x134>
 8004a98:	009a      	lsls	r2, r3, #2
 8004a9a:	4b44      	ldr	r3, [pc, #272]	; (8004bac <prvProcessReceivedCommands+0x154>)
 8004a9c:	18d3      	adds	r3, r2, r3
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2228      	movs	r2, #40	; 0x28
 8004aa6:	5c9b      	ldrb	r3, [r3, r2]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	b2d9      	uxtb	r1, r3
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2228      	movs	r2, #40	; 0x28
 8004ab2:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ab4:	1d3b      	adds	r3, r7, #4
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	18d1      	adds	r1, r2, r3
 8004abe:	1d3b      	adds	r3, r7, #4
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	6978      	ldr	r0, [r7, #20]
 8004ac6:	f7ff ff85 	bl	80049d4 <prvInsertTimerInActiveList>
 8004aca:	1e03      	subs	r3, r0, #0
 8004acc:	d05e      	beq.n	8004b8c <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2228      	movs	r2, #40	; 0x28
 8004ad2:	5c9b      	ldrb	r3, [r3, r2]
 8004ad4:	001a      	movs	r2, r3
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d00a      	beq.n	8004af2 <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	18d1      	adds	r1, r2, r3
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	0018      	movs	r0, r3
 8004aec:	f7ff fe80 	bl	80047f0 <prvReloadTimer>
 8004af0:	e008      	b.n	8004b04 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2228      	movs	r2, #40	; 0x28
 8004af6:	5c9b      	ldrb	r3, [r3, r2]
 8004af8:	2201      	movs	r2, #1
 8004afa:	4393      	bics	r3, r2
 8004afc:	b2d9      	uxtb	r1, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2228      	movs	r2, #40	; 0x28
 8004b02:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	0010      	movs	r0, r2
 8004b0c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004b0e:	e03d      	b.n	8004b8c <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2228      	movs	r2, #40	; 0x28
 8004b14:	5c9b      	ldrb	r3, [r3, r2]
 8004b16:	2201      	movs	r2, #1
 8004b18:	4393      	bics	r3, r2
 8004b1a:	b2d9      	uxtb	r1, r3
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2228      	movs	r2, #40	; 0x28
 8004b20:	5499      	strb	r1, [r3, r2]
                        break;
 8004b22:	e033      	b.n	8004b8c <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2228      	movs	r2, #40	; 0x28
 8004b28:	5c9b      	ldrb	r3, [r3, r2]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	b2d9      	uxtb	r1, r3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2228      	movs	r2, #40	; 0x28
 8004b34:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b36:	1d3b      	adds	r3, r7, #4
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <prvProcessReceivedCommands+0xf2>
 8004b46:	b672      	cpsid	i
 8004b48:	e7fe      	b.n	8004b48 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	18d1      	adds	r1, r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	6978      	ldr	r0, [r7, #20]
 8004b58:	f7ff ff3c 	bl	80049d4 <prvInsertTimerInActiveList>
                        break;
 8004b5c:	e016      	b.n	8004b8c <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2228      	movs	r2, #40	; 0x28
 8004b62:	5c9b      	ldrb	r3, [r3, r2]
 8004b64:	001a      	movs	r2, r3
 8004b66:	2302      	movs	r3, #2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d104      	bne.n	8004b76 <prvProcessReceivedCommands+0x11e>
                            {
                                vPortFree( pxTimer );
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 fa5e 	bl	8005030 <vPortFree>
 8004b74:	e00a      	b.n	8004b8c <prvProcessReceivedCommands+0x134>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2228      	movs	r2, #40	; 0x28
 8004b7a:	5c9b      	ldrb	r3, [r3, r2]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4393      	bics	r3, r2
 8004b80:	b2d9      	uxtb	r1, r3
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2228      	movs	r2, #40	; 0x28
 8004b86:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004b88:	e000      	b.n	8004b8c <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004b8a:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b8c:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <prvProcessReceivedCommands+0x158>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	1d39      	adds	r1, r7, #4
 8004b92:	2200      	movs	r2, #0
 8004b94:	0018      	movs	r0, r3
 8004b96:	f7fe fc3a 	bl	800340e <xQueueReceive>
 8004b9a:	1e03      	subs	r3, r0, #0
 8004b9c:	d000      	beq.n	8004ba0 <prvProcessReceivedCommands+0x148>
 8004b9e:	e75f      	b.n	8004a60 <prvProcessReceivedCommands+0x8>
        }
    }
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b006      	add	sp, #24
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	08005e74 	.word	0x08005e74
 8004bb0:	20000308 	.word	0x20000308

08004bb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bba:	e00b      	b.n	8004bd4 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <prvSwitchTimerLists+0x48>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	425a      	negs	r2, r3
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	0011      	movs	r1, r2
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f7ff fe30 	bl	8004834 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <prvSwitchTimerLists+0x48>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1ee      	bne.n	8004bbc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004bde:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <prvSwitchTimerLists+0x48>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <prvSwitchTimerLists+0x4c>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <prvSwitchTimerLists+0x48>)
 8004bea:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8004bec:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <prvSwitchTimerLists+0x4c>)
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
    }
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b002      	add	sp, #8
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	20000300 	.word	0x20000300
 8004c00:	20000304 	.word	0x20000304

08004c04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004c08:	f000 f8d2 	bl	8004db0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004c0c:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <prvCheckForValidListAndQueue+0x5c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d120      	bne.n	8004c56 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8004c14:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <prvCheckForValidListAndQueue+0x60>)
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7fe fa42 	bl	80030a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004c1c:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <prvCheckForValidListAndQueue+0x64>)
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7fe fa3e 	bl	80030a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <prvCheckForValidListAndQueue+0x68>)
 8004c26:	4a0f      	ldr	r2, [pc, #60]	; (8004c64 <prvCheckForValidListAndQueue+0x60>)
 8004c28:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004c2a:	4b11      	ldr	r3, [pc, #68]	; (8004c70 <prvCheckForValidListAndQueue+0x6c>)
 8004c2c:	4a0e      	ldr	r2, [pc, #56]	; (8004c68 <prvCheckForValidListAndQueue+0x64>)
 8004c2e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004c30:	2200      	movs	r2, #0
 8004c32:	210c      	movs	r1, #12
 8004c34:	2005      	movs	r0, #5
 8004c36:	f7fe fb65 	bl	8003304 <xQueueGenericCreate>
 8004c3a:	0002      	movs	r2, r0
 8004c3c:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <prvCheckForValidListAndQueue+0x5c>)
 8004c3e:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <prvCheckForValidListAndQueue+0x5c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d006      	beq.n	8004c56 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <prvCheckForValidListAndQueue+0x5c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <prvCheckForValidListAndQueue+0x70>)
 8004c4e:	0011      	movs	r1, r2
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7fe fd2b 	bl	80036ac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c56:	f000 f8bd 	bl	8004dd4 <vPortExitCritical>
    }
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000308 	.word	0x20000308
 8004c64:	200002d8 	.word	0x200002d8
 8004c68:	200002ec 	.word	0x200002ec
 8004c6c:	20000300 	.word	0x20000300
 8004c70:	20000304 	.word	0x20000304
 8004c74:	08005de4 	.word	0x08005de4

08004c78 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3b04      	subs	r3, #4
 8004c88:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2280      	movs	r2, #128	; 0x80
 8004c8e:	0452      	lsls	r2, r2, #17
 8004c90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3b04      	subs	r3, #4
 8004c96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3b04      	subs	r3, #4
 8004ca2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8004ca4:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <pxPortInitialiseStack+0x50>)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b14      	subs	r3, #20
 8004cae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b20      	subs	r3, #32
 8004cba:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
}
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b004      	add	sp, #16
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	08004ccd 	.word	0x08004ccd

08004ccc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <prvTaskExitError+0x2c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	d001      	beq.n	8004ce2 <prvTaskExitError+0x16>
 8004cde:	b672      	cpsid	i
 8004ce0:	e7fe      	b.n	8004ce0 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8004ce2:	b672      	cpsid	i

    while( ulDummy == 0 )
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0fc      	beq.n	8004ce6 <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004cec:	46c0      	nop			; (mov r8, r8)
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b002      	add	sp, #8
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	20000010 	.word	0x20000010

08004cfc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8004d00:	46c0      	nop			; (mov r8, r8)
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8004d10:	4a0b      	ldr	r2, [pc, #44]	; (8004d40 <pxCurrentTCBConst2>)
 8004d12:	6813      	ldr	r3, [r2, #0]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	3020      	adds	r0, #32
 8004d18:	f380 8809 	msr	PSP, r0
 8004d1c:	2002      	movs	r0, #2
 8004d1e:	f380 8814 	msr	CONTROL, r0
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004d28:	46ae      	mov	lr, r5
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	bc04      	pop	{r2}
 8004d2e:	b662      	cpsie	i
 8004d30:	4718      	bx	r3
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	46c0      	nop			; (mov r8, r8)
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46c0      	nop			; (mov r8, r8)

08004d40 <pxCurrentTCBConst2>:
 8004d40:	200001d4 	.word	0x200001d4
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	46c0      	nop			; (mov r8, r8)

08004d48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <xPortStartScheduler+0x40>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <xPortStartScheduler+0x40>)
 8004d52:	21ff      	movs	r1, #255	; 0xff
 8004d54:	0409      	lsls	r1, r1, #16
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <xPortStartScheduler+0x40>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <xPortStartScheduler+0x40>)
 8004d60:	21ff      	movs	r1, #255	; 0xff
 8004d62:	0609      	lsls	r1, r1, #24
 8004d64:	430a      	orrs	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004d68:	f000 f898 	bl	8004e9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004d6c:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <xPortStartScheduler+0x44>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8004d72:	f7ff ffcd 	bl	8004d10 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d76:	f7ff f9ef 	bl	8004158 <vTaskSwitchContext>
    prvTaskExitError();
 8004d7a:	f7ff ffa7 	bl	8004ccc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	0018      	movs	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	e000ed20 	.word	0xe000ed20
 8004d8c:	20000010 	.word	0x20000010

08004d90 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <vPortYield+0x1c>)
 8004d96:	2280      	movs	r2, #128	; 0x80
 8004d98:	0552      	lsls	r2, r2, #21
 8004d9a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8004d9c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004da0:	f3bf 8f6f 	isb	sy
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	e000ed04 	.word	0xe000ed04

08004db0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004db4:	b672      	cpsid	i
    uxCriticalNesting++;
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <vPortEnterCritical+0x20>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <vPortEnterCritical+0x20>)
 8004dbe:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8004dc0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004dc4:	f3bf 8f6f 	isb	sy
}
 8004dc8:	46c0      	nop			; (mov r8, r8)
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	20000010 	.word	0x20000010

08004dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004dd8:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <vPortExitCritical+0x2c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <vPortExitCritical+0x10>
 8004de0:	b672      	cpsid	i
 8004de2:	e7fe      	b.n	8004de2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <vPortExitCritical+0x2c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	1e5a      	subs	r2, r3, #1
 8004dea:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <vPortExitCritical+0x2c>)
 8004dec:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8004dee:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <vPortExitCritical+0x2c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d100      	bne.n	8004df8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004df6:	b662      	cpsie	i
    }
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	20000010 	.word	0x20000010

08004e04 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8004e04:	f3ef 8010 	mrs	r0, PRIMASK
 8004e08:	b672      	cpsid	i
 8004e0a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	0018      	movs	r0, r3

08004e10 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8004e10:	f380 8810 	msr	PRIMASK, r0
 8004e14:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004e16:	46c0      	nop			; (mov r8, r8)
	...

08004e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004e20:	f3ef 8009 	mrs	r0, PSP
 8004e24:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <pxCurrentTCBConst>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	3820      	subs	r0, #32
 8004e2a:	6010      	str	r0, [r2, #0]
 8004e2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004e2e:	4644      	mov	r4, r8
 8004e30:	464d      	mov	r5, r9
 8004e32:	4656      	mov	r6, sl
 8004e34:	465f      	mov	r7, fp
 8004e36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004e38:	b508      	push	{r3, lr}
 8004e3a:	b672      	cpsid	i
 8004e3c:	f7ff f98c 	bl	8004158 <vTaskSwitchContext>
 8004e40:	b662      	cpsie	i
 8004e42:	bc0c      	pop	{r2, r3}
 8004e44:	6811      	ldr	r1, [r2, #0]
 8004e46:	6808      	ldr	r0, [r1, #0]
 8004e48:	3010      	adds	r0, #16
 8004e4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004e4c:	46a0      	mov	r8, r4
 8004e4e:	46a9      	mov	r9, r5
 8004e50:	46b2      	mov	sl, r6
 8004e52:	46bb      	mov	fp, r7
 8004e54:	f380 8809 	msr	PSP, r0
 8004e58:	3820      	subs	r0, #32
 8004e5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004e5c:	4718      	bx	r3
 8004e5e:	46c0      	nop			; (mov r8, r8)

08004e60 <pxCurrentTCBConst>:
 8004e60:	200001d4 	.word	0x200001d4
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46c0      	nop			; (mov r8, r8)

08004e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e6e:	f7ff ffc9 	bl	8004e04 <ulSetInterruptMaskFromISR>
 8004e72:	0003      	movs	r3, r0
 8004e74:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004e76:	f7ff f863 	bl	8003f40 <xTaskIncrementTick>
 8004e7a:	1e03      	subs	r3, r0, #0
 8004e7c:	d003      	beq.n	8004e86 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <SysTick_Handler+0x30>)
 8004e80:	2280      	movs	r2, #128	; 0x80
 8004e82:	0552      	lsls	r2, r2, #21
 8004e84:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7ff ffc1 	bl	8004e10 <vClearInterruptMaskFromISR>
}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b002      	add	sp, #8
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <vPortSetupTimerInterrupt+0x38>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <vPortSetupTimerInterrupt+0x3c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	22fa      	movs	r2, #250	; 0xfa
 8004eb2:	0091      	lsls	r1, r2, #2
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f7fb f927 	bl	8000108 <__udivsi3>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	001a      	movs	r2, r3
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <vPortSetupTimerInterrupt+0x40>)
 8004ec0:	3a01      	subs	r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ec4:	4b02      	ldr	r3, [pc, #8]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ec6:	2207      	movs	r2, #7
 8004ec8:	601a      	str	r2, [r3, #0]
}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	e000e010 	.word	0xe000e010
 8004ed4:	e000e018 	.word	0xe000e018
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	e000e014 	.word	0xe000e014

08004ee0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004eec:	f7fe ff26 	bl	8003d3c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004ef0:	4b4a      	ldr	r3, [pc, #296]	; (800501c <pvPortMalloc+0x13c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ef8:	f000 f8e6 	bl	80050c8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d012      	beq.n	8004f28 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004f02:	2208      	movs	r2, #8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2107      	movs	r1, #7
 8004f08:	400b      	ands	r3, r1
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d804      	bhi.n	8004f24 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	18d3      	adds	r3, r2, r3
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	e001      	b.n	8004f28 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	db68      	blt.n	8005000 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d065      	beq.n	8005000 <pvPortMalloc+0x120>
 8004f34:	4b3a      	ldr	r3, [pc, #232]	; (8005020 <pvPortMalloc+0x140>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d860      	bhi.n	8005000 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004f3e:	4b39      	ldr	r3, [pc, #228]	; (8005024 <pvPortMalloc+0x144>)
 8004f40:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8004f42:	4b38      	ldr	r3, [pc, #224]	; (8005024 <pvPortMalloc+0x144>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f48:	e004      	b.n	8004f54 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d903      	bls.n	8004f66 <pvPortMalloc+0x86>
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f1      	bne.n	8004f4a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f66:	4b2d      	ldr	r3, [pc, #180]	; (800501c <pvPortMalloc+0x13c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d047      	beq.n	8005000 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2208      	movs	r2, #8
 8004f76:	189b      	adds	r3, r3, r2
 8004f78:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	1ad2      	subs	r2, r2, r3
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d916      	bls.n	8004fc0 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	18d3      	adds	r3, r2, r3
 8004f98:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d001      	beq.n	8004fa6 <pvPortMalloc+0xc6>
 8004fa2:	b672      	cpsid	i
 8004fa4:	e7fe      	b.n	8004fa4 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	1ad2      	subs	r2, r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f000 f8de 	bl	800517c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fc0:	4b17      	ldr	r3, [pc, #92]	; (8005020 <pvPortMalloc+0x140>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	1ad2      	subs	r2, r2, r3
 8004fca:	4b15      	ldr	r3, [pc, #84]	; (8005020 <pvPortMalloc+0x140>)
 8004fcc:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fce:	4b14      	ldr	r3, [pc, #80]	; (8005020 <pvPortMalloc+0x140>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <pvPortMalloc+0x148>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d203      	bcs.n	8004fe2 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fda:	4b11      	ldr	r3, [pc, #68]	; (8005020 <pvPortMalloc+0x140>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <pvPortMalloc+0x148>)
 8004fe0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2280      	movs	r2, #128	; 0x80
 8004fe8:	0612      	lsls	r2, r2, #24
 8004fea:	431a      	orrs	r2, r3
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <pvPortMalloc+0x14c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <pvPortMalloc+0x14c>)
 8004ffe:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005000:	f7fe fea8 	bl	8003d54 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2207      	movs	r2, #7
 8005008:	4013      	ands	r3, r2
 800500a:	d001      	beq.n	8005010 <pvPortMalloc+0x130>
 800500c:	b672      	cpsid	i
 800500e:	e7fe      	b.n	800500e <pvPortMalloc+0x12e>
    return pvReturn;
 8005010:	697b      	ldr	r3, [r7, #20]
}
 8005012:	0018      	movs	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	b008      	add	sp, #32
 8005018:	bd80      	pop	{r7, pc}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	20001c80 	.word	0x20001c80
 8005020:	20001c84 	.word	0x20001c84
 8005024:	20001c78 	.word	0x20001c78
 8005028:	20001c88 	.word	0x20001c88
 800502c:	20001c8c 	.word	0x20001c8c

08005030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d039      	beq.n	80050b6 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005042:	2308      	movs	r3, #8
 8005044:	425b      	negs	r3, r3
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	18d3      	adds	r3, r2, r3
 800504a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	db01      	blt.n	800505c <vPortFree+0x2c>
 8005058:	b672      	cpsid	i
 800505a:	e7fe      	b.n	800505a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <vPortFree+0x38>
 8005064:	b672      	cpsid	i
 8005066:	e7fe      	b.n	8005066 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	0fdb      	lsrs	r3, r3, #31
 800506e:	1c1a      	adds	r2, r3, #0
 8005070:	2301      	movs	r3, #1
 8005072:	4013      	ands	r3, r2
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01d      	beq.n	80050b6 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d119      	bne.n	80050b6 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	085a      	lsrs	r2, r3, #1
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800508e:	f7fe fe55 	bl	8003d3c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <vPortFree+0x90>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	18d2      	adds	r2, r2, r3
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <vPortFree+0x90>)
 800509e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 f86a 	bl	800517c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80050a8:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <vPortFree+0x94>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <vPortFree+0x94>)
 80050b0:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 80050b2:	f7fe fe4f 	bl	8003d54 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	46bd      	mov	sp, r7
 80050ba:	b004      	add	sp, #16
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	20001c84 	.word	0x20001c84
 80050c4:	20001c90 	.word	0x20001c90

080050c8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ce:	4b25      	ldr	r3, [pc, #148]	; (8005164 <prvHeapInit+0x9c>)
 80050d0:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80050d2:	4b25      	ldr	r3, [pc, #148]	; (8005168 <prvHeapInit+0xa0>)
 80050d4:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2207      	movs	r2, #7
 80050da:	4013      	ands	r3, r2
 80050dc:	d00c      	beq.n	80050f8 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3307      	adds	r3, #7
 80050e2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2207      	movs	r2, #7
 80050e8:	4393      	bics	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad2      	subs	r2, r2, r3
 80050f2:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <prvHeapInit+0xa0>)
 80050f4:	18d3      	adds	r3, r2, r3
 80050f6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050fc:	4b1b      	ldr	r3, [pc, #108]	; (800516c <prvHeapInit+0xa4>)
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005102:	4b1a      	ldr	r3, [pc, #104]	; (800516c <prvHeapInit+0xa4>)
 8005104:	2200      	movs	r2, #0
 8005106:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	18d3      	adds	r3, r2, r3
 800510e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005110:	2208      	movs	r2, #8
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2207      	movs	r2, #7
 800511c:	4393      	bics	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <prvHeapInit+0xa8>)
 8005124:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8005126:	4b12      	ldr	r3, [pc, #72]	; (8005170 <prvHeapInit+0xa8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2200      	movs	r2, #0
 800512c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <prvHeapInit+0xa8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	1ad2      	subs	r2, r2, r3
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005144:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <prvHeapInit+0xa8>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	4b08      	ldr	r3, [pc, #32]	; (8005174 <prvHeapInit+0xac>)
 8005152:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	4b07      	ldr	r3, [pc, #28]	; (8005178 <prvHeapInit+0xb0>)
 800515a:	601a      	str	r2, [r3, #0]
}
 800515c:	46c0      	nop			; (mov r8, r8)
 800515e:	46bd      	mov	sp, r7
 8005160:	b004      	add	sp, #16
 8005162:	bd80      	pop	{r7, pc}
 8005164:	00001964 	.word	0x00001964
 8005168:	20000314 	.word	0x20000314
 800516c:	20001c78 	.word	0x20001c78
 8005170:	20001c80 	.word	0x20001c80
 8005174:	20001c88 	.word	0x20001c88
 8005178:	20001c84 	.word	0x20001c84

0800517c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005184:	4b27      	ldr	r3, [pc, #156]	; (8005224 <prvInsertBlockIntoFreeList+0xa8>)
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	e002      	b.n	8005190 <prvInsertBlockIntoFreeList+0x14>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	d8f7      	bhi.n	800518a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	18d3      	adds	r3, r2, r3
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d108      	bne.n	80051be <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	18d2      	adds	r2, r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	18d2      	adds	r2, r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d118      	bne.n	8005204 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <prvInsertBlockIntoFreeList+0xac>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d00d      	beq.n	80051fa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	18d2      	adds	r2, r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e008      	b.n	800520c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <prvInsertBlockIntoFreeList+0xac>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e003      	b.n	800520c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d002      	beq.n	800521a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46bd      	mov	sp, r7
 800521e:	b004      	add	sp, #16
 8005220:	bd80      	pop	{r7, pc}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	20001c78 	.word	0x20001c78
 8005228:	20001c80 	.word	0x20001c80

0800522c <__libc_init_array>:
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	2600      	movs	r6, #0
 8005230:	4d0c      	ldr	r5, [pc, #48]	; (8005264 <__libc_init_array+0x38>)
 8005232:	4c0d      	ldr	r4, [pc, #52]	; (8005268 <__libc_init_array+0x3c>)
 8005234:	1b64      	subs	r4, r4, r5
 8005236:	10a4      	asrs	r4, r4, #2
 8005238:	42a6      	cmp	r6, r4
 800523a:	d109      	bne.n	8005250 <__libc_init_array+0x24>
 800523c:	2600      	movs	r6, #0
 800523e:	f000 fd85 	bl	8005d4c <_init>
 8005242:	4d0a      	ldr	r5, [pc, #40]	; (800526c <__libc_init_array+0x40>)
 8005244:	4c0a      	ldr	r4, [pc, #40]	; (8005270 <__libc_init_array+0x44>)
 8005246:	1b64      	subs	r4, r4, r5
 8005248:	10a4      	asrs	r4, r4, #2
 800524a:	42a6      	cmp	r6, r4
 800524c:	d105      	bne.n	800525a <__libc_init_array+0x2e>
 800524e:	bd70      	pop	{r4, r5, r6, pc}
 8005250:	00b3      	lsls	r3, r6, #2
 8005252:	58eb      	ldr	r3, [r5, r3]
 8005254:	4798      	blx	r3
 8005256:	3601      	adds	r6, #1
 8005258:	e7ee      	b.n	8005238 <__libc_init_array+0xc>
 800525a:	00b3      	lsls	r3, r6, #2
 800525c:	58eb      	ldr	r3, [r5, r3]
 800525e:	4798      	blx	r3
 8005260:	3601      	adds	r6, #1
 8005262:	e7f2      	b.n	800524a <__libc_init_array+0x1e>
 8005264:	08005f00 	.word	0x08005f00
 8005268:	08005f00 	.word	0x08005f00
 800526c:	08005f00 	.word	0x08005f00
 8005270:	08005f04 	.word	0x08005f04

08005274 <memcpy>:
 8005274:	2300      	movs	r3, #0
 8005276:	b510      	push	{r4, lr}
 8005278:	429a      	cmp	r2, r3
 800527a:	d100      	bne.n	800527e <memcpy+0xa>
 800527c:	bd10      	pop	{r4, pc}
 800527e:	5ccc      	ldrb	r4, [r1, r3]
 8005280:	54c4      	strb	r4, [r0, r3]
 8005282:	3301      	adds	r3, #1
 8005284:	e7f8      	b.n	8005278 <memcpy+0x4>

08005286 <memset>:
 8005286:	0003      	movs	r3, r0
 8005288:	1882      	adds	r2, r0, r2
 800528a:	4293      	cmp	r3, r2
 800528c:	d100      	bne.n	8005290 <memset+0xa>
 800528e:	4770      	bx	lr
 8005290:	7019      	strb	r1, [r3, #0]
 8005292:	3301      	adds	r3, #1
 8005294:	e7f9      	b.n	800528a <memset+0x4>
	...

08005298 <_puts_r>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	0005      	movs	r5, r0
 800529c:	000e      	movs	r6, r1
 800529e:	2800      	cmp	r0, #0
 80052a0:	d004      	beq.n	80052ac <_puts_r+0x14>
 80052a2:	6983      	ldr	r3, [r0, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <_puts_r+0x14>
 80052a8:	f000 fa6e 	bl	8005788 <__sinit>
 80052ac:	69ab      	ldr	r3, [r5, #24]
 80052ae:	68ac      	ldr	r4, [r5, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <_puts_r+0x22>
 80052b4:	0028      	movs	r0, r5
 80052b6:	f000 fa67 	bl	8005788 <__sinit>
 80052ba:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <_puts_r+0xd8>)
 80052bc:	429c      	cmp	r4, r3
 80052be:	d122      	bne.n	8005306 <_puts_r+0x6e>
 80052c0:	686c      	ldr	r4, [r5, #4]
 80052c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052c4:	07db      	lsls	r3, r3, #31
 80052c6:	d405      	bmi.n	80052d4 <_puts_r+0x3c>
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	059b      	lsls	r3, r3, #22
 80052cc:	d402      	bmi.n	80052d4 <_puts_r+0x3c>
 80052ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052d0:	f000 fafb 	bl	80058ca <__retarget_lock_acquire_recursive>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	071b      	lsls	r3, r3, #28
 80052d8:	d502      	bpl.n	80052e0 <_puts_r+0x48>
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d129      	bne.n	8005334 <_puts_r+0x9c>
 80052e0:	0021      	movs	r1, r4
 80052e2:	0028      	movs	r0, r5
 80052e4:	f000 f8aa 	bl	800543c <__swsetup_r>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d023      	beq.n	8005334 <_puts_r+0x9c>
 80052ec:	2501      	movs	r5, #1
 80052ee:	426d      	negs	r5, r5
 80052f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052f2:	07db      	lsls	r3, r3, #31
 80052f4:	d405      	bmi.n	8005302 <_puts_r+0x6a>
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	059b      	lsls	r3, r3, #22
 80052fa:	d402      	bmi.n	8005302 <_puts_r+0x6a>
 80052fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052fe:	f000 fae5 	bl	80058cc <__retarget_lock_release_recursive>
 8005302:	0028      	movs	r0, r5
 8005304:	bd70      	pop	{r4, r5, r6, pc}
 8005306:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <_puts_r+0xdc>)
 8005308:	429c      	cmp	r4, r3
 800530a:	d101      	bne.n	8005310 <_puts_r+0x78>
 800530c:	68ac      	ldr	r4, [r5, #8]
 800530e:	e7d8      	b.n	80052c2 <_puts_r+0x2a>
 8005310:	4b19      	ldr	r3, [pc, #100]	; (8005378 <_puts_r+0xe0>)
 8005312:	429c      	cmp	r4, r3
 8005314:	d1d5      	bne.n	80052c2 <_puts_r+0x2a>
 8005316:	68ec      	ldr	r4, [r5, #12]
 8005318:	e7d3      	b.n	80052c2 <_puts_r+0x2a>
 800531a:	3601      	adds	r6, #1
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	da04      	bge.n	800532c <_puts_r+0x94>
 8005322:	69a2      	ldr	r2, [r4, #24]
 8005324:	429a      	cmp	r2, r3
 8005326:	dc16      	bgt.n	8005356 <_puts_r+0xbe>
 8005328:	290a      	cmp	r1, #10
 800532a:	d014      	beq.n	8005356 <_puts_r+0xbe>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	6022      	str	r2, [r4, #0]
 8005332:	7019      	strb	r1, [r3, #0]
 8005334:	68a3      	ldr	r3, [r4, #8]
 8005336:	7831      	ldrb	r1, [r6, #0]
 8005338:	3b01      	subs	r3, #1
 800533a:	2900      	cmp	r1, #0
 800533c:	d1ed      	bne.n	800531a <_puts_r+0x82>
 800533e:	60a3      	str	r3, [r4, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	da0f      	bge.n	8005364 <_puts_r+0xcc>
 8005344:	0028      	movs	r0, r5
 8005346:	0022      	movs	r2, r4
 8005348:	310a      	adds	r1, #10
 800534a:	f000 f821 	bl	8005390 <__swbuf_r>
 800534e:	250a      	movs	r5, #10
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d1cd      	bne.n	80052f0 <_puts_r+0x58>
 8005354:	e7ca      	b.n	80052ec <_puts_r+0x54>
 8005356:	0022      	movs	r2, r4
 8005358:	0028      	movs	r0, r5
 800535a:	f000 f819 	bl	8005390 <__swbuf_r>
 800535e:	1c43      	adds	r3, r0, #1
 8005360:	d1e8      	bne.n	8005334 <_puts_r+0x9c>
 8005362:	e7c3      	b.n	80052ec <_puts_r+0x54>
 8005364:	250a      	movs	r5, #10
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	6022      	str	r2, [r4, #0]
 800536c:	701d      	strb	r5, [r3, #0]
 800536e:	e7bf      	b.n	80052f0 <_puts_r+0x58>
 8005370:	08005ec0 	.word	0x08005ec0
 8005374:	08005ee0 	.word	0x08005ee0
 8005378:	08005ea0 	.word	0x08005ea0

0800537c <puts>:
 800537c:	b510      	push	{r4, lr}
 800537e:	4b03      	ldr	r3, [pc, #12]	; (800538c <puts+0x10>)
 8005380:	0001      	movs	r1, r0
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	f7ff ff88 	bl	8005298 <_puts_r>
 8005388:	bd10      	pop	{r4, pc}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	20000014 	.word	0x20000014

08005390 <__swbuf_r>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	0005      	movs	r5, r0
 8005394:	000e      	movs	r6, r1
 8005396:	0014      	movs	r4, r2
 8005398:	2800      	cmp	r0, #0
 800539a:	d004      	beq.n	80053a6 <__swbuf_r+0x16>
 800539c:	6983      	ldr	r3, [r0, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <__swbuf_r+0x16>
 80053a2:	f000 f9f1 	bl	8005788 <__sinit>
 80053a6:	4b22      	ldr	r3, [pc, #136]	; (8005430 <__swbuf_r+0xa0>)
 80053a8:	429c      	cmp	r4, r3
 80053aa:	d12e      	bne.n	800540a <__swbuf_r+0x7a>
 80053ac:	686c      	ldr	r4, [r5, #4]
 80053ae:	69a3      	ldr	r3, [r4, #24]
 80053b0:	60a3      	str	r3, [r4, #8]
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	071b      	lsls	r3, r3, #28
 80053b6:	d532      	bpl.n	800541e <__swbuf_r+0x8e>
 80053b8:	6923      	ldr	r3, [r4, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d02f      	beq.n	800541e <__swbuf_r+0x8e>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	6922      	ldr	r2, [r4, #16]
 80053c2:	b2f7      	uxtb	r7, r6
 80053c4:	1a98      	subs	r0, r3, r2
 80053c6:	6963      	ldr	r3, [r4, #20]
 80053c8:	b2f6      	uxtb	r6, r6
 80053ca:	4283      	cmp	r3, r0
 80053cc:	dc05      	bgt.n	80053da <__swbuf_r+0x4a>
 80053ce:	0021      	movs	r1, r4
 80053d0:	0028      	movs	r0, r5
 80053d2:	f000 f937 	bl	8005644 <_fflush_r>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d127      	bne.n	800542a <__swbuf_r+0x9a>
 80053da:	68a3      	ldr	r3, [r4, #8]
 80053dc:	3001      	adds	r0, #1
 80053de:	3b01      	subs	r3, #1
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	6022      	str	r2, [r4, #0]
 80053e8:	701f      	strb	r7, [r3, #0]
 80053ea:	6963      	ldr	r3, [r4, #20]
 80053ec:	4283      	cmp	r3, r0
 80053ee:	d004      	beq.n	80053fa <__swbuf_r+0x6a>
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	07db      	lsls	r3, r3, #31
 80053f4:	d507      	bpl.n	8005406 <__swbuf_r+0x76>
 80053f6:	2e0a      	cmp	r6, #10
 80053f8:	d105      	bne.n	8005406 <__swbuf_r+0x76>
 80053fa:	0021      	movs	r1, r4
 80053fc:	0028      	movs	r0, r5
 80053fe:	f000 f921 	bl	8005644 <_fflush_r>
 8005402:	2800      	cmp	r0, #0
 8005404:	d111      	bne.n	800542a <__swbuf_r+0x9a>
 8005406:	0030      	movs	r0, r6
 8005408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800540a:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <__swbuf_r+0xa4>)
 800540c:	429c      	cmp	r4, r3
 800540e:	d101      	bne.n	8005414 <__swbuf_r+0x84>
 8005410:	68ac      	ldr	r4, [r5, #8]
 8005412:	e7cc      	b.n	80053ae <__swbuf_r+0x1e>
 8005414:	4b08      	ldr	r3, [pc, #32]	; (8005438 <__swbuf_r+0xa8>)
 8005416:	429c      	cmp	r4, r3
 8005418:	d1c9      	bne.n	80053ae <__swbuf_r+0x1e>
 800541a:	68ec      	ldr	r4, [r5, #12]
 800541c:	e7c7      	b.n	80053ae <__swbuf_r+0x1e>
 800541e:	0021      	movs	r1, r4
 8005420:	0028      	movs	r0, r5
 8005422:	f000 f80b 	bl	800543c <__swsetup_r>
 8005426:	2800      	cmp	r0, #0
 8005428:	d0c9      	beq.n	80053be <__swbuf_r+0x2e>
 800542a:	2601      	movs	r6, #1
 800542c:	4276      	negs	r6, r6
 800542e:	e7ea      	b.n	8005406 <__swbuf_r+0x76>
 8005430:	08005ec0 	.word	0x08005ec0
 8005434:	08005ee0 	.word	0x08005ee0
 8005438:	08005ea0 	.word	0x08005ea0

0800543c <__swsetup_r>:
 800543c:	4b37      	ldr	r3, [pc, #220]	; (800551c <__swsetup_r+0xe0>)
 800543e:	b570      	push	{r4, r5, r6, lr}
 8005440:	681d      	ldr	r5, [r3, #0]
 8005442:	0006      	movs	r6, r0
 8005444:	000c      	movs	r4, r1
 8005446:	2d00      	cmp	r5, #0
 8005448:	d005      	beq.n	8005456 <__swsetup_r+0x1a>
 800544a:	69ab      	ldr	r3, [r5, #24]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <__swsetup_r+0x1a>
 8005450:	0028      	movs	r0, r5
 8005452:	f000 f999 	bl	8005788 <__sinit>
 8005456:	4b32      	ldr	r3, [pc, #200]	; (8005520 <__swsetup_r+0xe4>)
 8005458:	429c      	cmp	r4, r3
 800545a:	d10f      	bne.n	800547c <__swsetup_r+0x40>
 800545c:	686c      	ldr	r4, [r5, #4]
 800545e:	230c      	movs	r3, #12
 8005460:	5ee2      	ldrsh	r2, [r4, r3]
 8005462:	b293      	uxth	r3, r2
 8005464:	0711      	lsls	r1, r2, #28
 8005466:	d42d      	bmi.n	80054c4 <__swsetup_r+0x88>
 8005468:	06d9      	lsls	r1, r3, #27
 800546a:	d411      	bmi.n	8005490 <__swsetup_r+0x54>
 800546c:	2309      	movs	r3, #9
 800546e:	2001      	movs	r0, #1
 8005470:	6033      	str	r3, [r6, #0]
 8005472:	3337      	adds	r3, #55	; 0x37
 8005474:	4313      	orrs	r3, r2
 8005476:	81a3      	strh	r3, [r4, #12]
 8005478:	4240      	negs	r0, r0
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	4b29      	ldr	r3, [pc, #164]	; (8005524 <__swsetup_r+0xe8>)
 800547e:	429c      	cmp	r4, r3
 8005480:	d101      	bne.n	8005486 <__swsetup_r+0x4a>
 8005482:	68ac      	ldr	r4, [r5, #8]
 8005484:	e7eb      	b.n	800545e <__swsetup_r+0x22>
 8005486:	4b28      	ldr	r3, [pc, #160]	; (8005528 <__swsetup_r+0xec>)
 8005488:	429c      	cmp	r4, r3
 800548a:	d1e8      	bne.n	800545e <__swsetup_r+0x22>
 800548c:	68ec      	ldr	r4, [r5, #12]
 800548e:	e7e6      	b.n	800545e <__swsetup_r+0x22>
 8005490:	075b      	lsls	r3, r3, #29
 8005492:	d513      	bpl.n	80054bc <__swsetup_r+0x80>
 8005494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005496:	2900      	cmp	r1, #0
 8005498:	d008      	beq.n	80054ac <__swsetup_r+0x70>
 800549a:	0023      	movs	r3, r4
 800549c:	3344      	adds	r3, #68	; 0x44
 800549e:	4299      	cmp	r1, r3
 80054a0:	d002      	beq.n	80054a8 <__swsetup_r+0x6c>
 80054a2:	0030      	movs	r0, r6
 80054a4:	f000 fa80 	bl	80059a8 <_free_r>
 80054a8:	2300      	movs	r3, #0
 80054aa:	6363      	str	r3, [r4, #52]	; 0x34
 80054ac:	2224      	movs	r2, #36	; 0x24
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	4393      	bics	r3, r2
 80054b2:	81a3      	strh	r3, [r4, #12]
 80054b4:	2300      	movs	r3, #0
 80054b6:	6063      	str	r3, [r4, #4]
 80054b8:	6923      	ldr	r3, [r4, #16]
 80054ba:	6023      	str	r3, [r4, #0]
 80054bc:	2308      	movs	r3, #8
 80054be:	89a2      	ldrh	r2, [r4, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	6923      	ldr	r3, [r4, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <__swsetup_r+0xa6>
 80054ca:	21a0      	movs	r1, #160	; 0xa0
 80054cc:	2280      	movs	r2, #128	; 0x80
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	0089      	lsls	r1, r1, #2
 80054d2:	0092      	lsls	r2, r2, #2
 80054d4:	400b      	ands	r3, r1
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d003      	beq.n	80054e2 <__swsetup_r+0xa6>
 80054da:	0021      	movs	r1, r4
 80054dc:	0030      	movs	r0, r6
 80054de:	f000 fa1f 	bl	8005920 <__smakebuf_r>
 80054e2:	220c      	movs	r2, #12
 80054e4:	5ea3      	ldrsh	r3, [r4, r2]
 80054e6:	2001      	movs	r0, #1
 80054e8:	001a      	movs	r2, r3
 80054ea:	b299      	uxth	r1, r3
 80054ec:	4002      	ands	r2, r0
 80054ee:	4203      	tst	r3, r0
 80054f0:	d00f      	beq.n	8005512 <__swsetup_r+0xd6>
 80054f2:	2200      	movs	r2, #0
 80054f4:	60a2      	str	r2, [r4, #8]
 80054f6:	6962      	ldr	r2, [r4, #20]
 80054f8:	4252      	negs	r2, r2
 80054fa:	61a2      	str	r2, [r4, #24]
 80054fc:	2000      	movs	r0, #0
 80054fe:	6922      	ldr	r2, [r4, #16]
 8005500:	4282      	cmp	r2, r0
 8005502:	d1ba      	bne.n	800547a <__swsetup_r+0x3e>
 8005504:	060a      	lsls	r2, r1, #24
 8005506:	d5b8      	bpl.n	800547a <__swsetup_r+0x3e>
 8005508:	2240      	movs	r2, #64	; 0x40
 800550a:	4313      	orrs	r3, r2
 800550c:	81a3      	strh	r3, [r4, #12]
 800550e:	3801      	subs	r0, #1
 8005510:	e7b3      	b.n	800547a <__swsetup_r+0x3e>
 8005512:	0788      	lsls	r0, r1, #30
 8005514:	d400      	bmi.n	8005518 <__swsetup_r+0xdc>
 8005516:	6962      	ldr	r2, [r4, #20]
 8005518:	60a2      	str	r2, [r4, #8]
 800551a:	e7ef      	b.n	80054fc <__swsetup_r+0xc0>
 800551c:	20000014 	.word	0x20000014
 8005520:	08005ec0 	.word	0x08005ec0
 8005524:	08005ee0 	.word	0x08005ee0
 8005528:	08005ea0 	.word	0x08005ea0

0800552c <__sflush_r>:
 800552c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800552e:	898b      	ldrh	r3, [r1, #12]
 8005530:	0005      	movs	r5, r0
 8005532:	000c      	movs	r4, r1
 8005534:	071a      	lsls	r2, r3, #28
 8005536:	d45f      	bmi.n	80055f8 <__sflush_r+0xcc>
 8005538:	684a      	ldr	r2, [r1, #4]
 800553a:	2a00      	cmp	r2, #0
 800553c:	dc04      	bgt.n	8005548 <__sflush_r+0x1c>
 800553e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005540:	2a00      	cmp	r2, #0
 8005542:	dc01      	bgt.n	8005548 <__sflush_r+0x1c>
 8005544:	2000      	movs	r0, #0
 8005546:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005548:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800554a:	2f00      	cmp	r7, #0
 800554c:	d0fa      	beq.n	8005544 <__sflush_r+0x18>
 800554e:	2200      	movs	r2, #0
 8005550:	2180      	movs	r1, #128	; 0x80
 8005552:	682e      	ldr	r6, [r5, #0]
 8005554:	602a      	str	r2, [r5, #0]
 8005556:	001a      	movs	r2, r3
 8005558:	0149      	lsls	r1, r1, #5
 800555a:	400a      	ands	r2, r1
 800555c:	420b      	tst	r3, r1
 800555e:	d034      	beq.n	80055ca <__sflush_r+0x9e>
 8005560:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	075b      	lsls	r3, r3, #29
 8005566:	d506      	bpl.n	8005576 <__sflush_r+0x4a>
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	1ac0      	subs	r0, r0, r3
 800556c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <__sflush_r+0x4a>
 8005572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005574:	1ac0      	subs	r0, r0, r3
 8005576:	0002      	movs	r2, r0
 8005578:	6a21      	ldr	r1, [r4, #32]
 800557a:	2300      	movs	r3, #0
 800557c:	0028      	movs	r0, r5
 800557e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005580:	47b8      	blx	r7
 8005582:	89a1      	ldrh	r1, [r4, #12]
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d106      	bne.n	8005596 <__sflush_r+0x6a>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	2b1d      	cmp	r3, #29
 800558c:	d831      	bhi.n	80055f2 <__sflush_r+0xc6>
 800558e:	4a2c      	ldr	r2, [pc, #176]	; (8005640 <__sflush_r+0x114>)
 8005590:	40da      	lsrs	r2, r3
 8005592:	07d3      	lsls	r3, r2, #31
 8005594:	d52d      	bpl.n	80055f2 <__sflush_r+0xc6>
 8005596:	2300      	movs	r3, #0
 8005598:	6063      	str	r3, [r4, #4]
 800559a:	6923      	ldr	r3, [r4, #16]
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	04cb      	lsls	r3, r1, #19
 80055a0:	d505      	bpl.n	80055ae <__sflush_r+0x82>
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	d102      	bne.n	80055ac <__sflush_r+0x80>
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d100      	bne.n	80055ae <__sflush_r+0x82>
 80055ac:	6560      	str	r0, [r4, #84]	; 0x54
 80055ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055b0:	602e      	str	r6, [r5, #0]
 80055b2:	2900      	cmp	r1, #0
 80055b4:	d0c6      	beq.n	8005544 <__sflush_r+0x18>
 80055b6:	0023      	movs	r3, r4
 80055b8:	3344      	adds	r3, #68	; 0x44
 80055ba:	4299      	cmp	r1, r3
 80055bc:	d002      	beq.n	80055c4 <__sflush_r+0x98>
 80055be:	0028      	movs	r0, r5
 80055c0:	f000 f9f2 	bl	80059a8 <_free_r>
 80055c4:	2000      	movs	r0, #0
 80055c6:	6360      	str	r0, [r4, #52]	; 0x34
 80055c8:	e7bd      	b.n	8005546 <__sflush_r+0x1a>
 80055ca:	2301      	movs	r3, #1
 80055cc:	0028      	movs	r0, r5
 80055ce:	6a21      	ldr	r1, [r4, #32]
 80055d0:	47b8      	blx	r7
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	d1c5      	bne.n	8005562 <__sflush_r+0x36>
 80055d6:	682b      	ldr	r3, [r5, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0c2      	beq.n	8005562 <__sflush_r+0x36>
 80055dc:	2b1d      	cmp	r3, #29
 80055de:	d001      	beq.n	80055e4 <__sflush_r+0xb8>
 80055e0:	2b16      	cmp	r3, #22
 80055e2:	d101      	bne.n	80055e8 <__sflush_r+0xbc>
 80055e4:	602e      	str	r6, [r5, #0]
 80055e6:	e7ad      	b.n	8005544 <__sflush_r+0x18>
 80055e8:	2340      	movs	r3, #64	; 0x40
 80055ea:	89a2      	ldrh	r2, [r4, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	81a3      	strh	r3, [r4, #12]
 80055f0:	e7a9      	b.n	8005546 <__sflush_r+0x1a>
 80055f2:	2340      	movs	r3, #64	; 0x40
 80055f4:	430b      	orrs	r3, r1
 80055f6:	e7fa      	b.n	80055ee <__sflush_r+0xc2>
 80055f8:	690f      	ldr	r7, [r1, #16]
 80055fa:	2f00      	cmp	r7, #0
 80055fc:	d0a2      	beq.n	8005544 <__sflush_r+0x18>
 80055fe:	680a      	ldr	r2, [r1, #0]
 8005600:	600f      	str	r7, [r1, #0]
 8005602:	1bd2      	subs	r2, r2, r7
 8005604:	9201      	str	r2, [sp, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	079b      	lsls	r3, r3, #30
 800560a:	d100      	bne.n	800560e <__sflush_r+0xe2>
 800560c:	694a      	ldr	r2, [r1, #20]
 800560e:	60a2      	str	r2, [r4, #8]
 8005610:	9b01      	ldr	r3, [sp, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	dc00      	bgt.n	8005618 <__sflush_r+0xec>
 8005616:	e795      	b.n	8005544 <__sflush_r+0x18>
 8005618:	003a      	movs	r2, r7
 800561a:	0028      	movs	r0, r5
 800561c:	9b01      	ldr	r3, [sp, #4]
 800561e:	6a21      	ldr	r1, [r4, #32]
 8005620:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005622:	47b0      	blx	r6
 8005624:	2800      	cmp	r0, #0
 8005626:	dc06      	bgt.n	8005636 <__sflush_r+0x10a>
 8005628:	2340      	movs	r3, #64	; 0x40
 800562a:	2001      	movs	r0, #1
 800562c:	89a2      	ldrh	r2, [r4, #12]
 800562e:	4240      	negs	r0, r0
 8005630:	4313      	orrs	r3, r2
 8005632:	81a3      	strh	r3, [r4, #12]
 8005634:	e787      	b.n	8005546 <__sflush_r+0x1a>
 8005636:	9b01      	ldr	r3, [sp, #4]
 8005638:	183f      	adds	r7, r7, r0
 800563a:	1a1b      	subs	r3, r3, r0
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	e7e7      	b.n	8005610 <__sflush_r+0xe4>
 8005640:	20400001 	.word	0x20400001

08005644 <_fflush_r>:
 8005644:	690b      	ldr	r3, [r1, #16]
 8005646:	b570      	push	{r4, r5, r6, lr}
 8005648:	0005      	movs	r5, r0
 800564a:	000c      	movs	r4, r1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <_fflush_r+0x12>
 8005650:	2500      	movs	r5, #0
 8005652:	0028      	movs	r0, r5
 8005654:	bd70      	pop	{r4, r5, r6, pc}
 8005656:	2800      	cmp	r0, #0
 8005658:	d004      	beq.n	8005664 <_fflush_r+0x20>
 800565a:	6983      	ldr	r3, [r0, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <_fflush_r+0x20>
 8005660:	f000 f892 	bl	8005788 <__sinit>
 8005664:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <_fflush_r+0x74>)
 8005666:	429c      	cmp	r4, r3
 8005668:	d11b      	bne.n	80056a2 <_fflush_r+0x5e>
 800566a:	686c      	ldr	r4, [r5, #4]
 800566c:	220c      	movs	r2, #12
 800566e:	5ea3      	ldrsh	r3, [r4, r2]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ed      	beq.n	8005650 <_fflush_r+0xc>
 8005674:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005676:	07d2      	lsls	r2, r2, #31
 8005678:	d404      	bmi.n	8005684 <_fflush_r+0x40>
 800567a:	059b      	lsls	r3, r3, #22
 800567c:	d402      	bmi.n	8005684 <_fflush_r+0x40>
 800567e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005680:	f000 f923 	bl	80058ca <__retarget_lock_acquire_recursive>
 8005684:	0028      	movs	r0, r5
 8005686:	0021      	movs	r1, r4
 8005688:	f7ff ff50 	bl	800552c <__sflush_r>
 800568c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800568e:	0005      	movs	r5, r0
 8005690:	07db      	lsls	r3, r3, #31
 8005692:	d4de      	bmi.n	8005652 <_fflush_r+0xe>
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	059b      	lsls	r3, r3, #22
 8005698:	d4db      	bmi.n	8005652 <_fflush_r+0xe>
 800569a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800569c:	f000 f916 	bl	80058cc <__retarget_lock_release_recursive>
 80056a0:	e7d7      	b.n	8005652 <_fflush_r+0xe>
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <_fflush_r+0x78>)
 80056a4:	429c      	cmp	r4, r3
 80056a6:	d101      	bne.n	80056ac <_fflush_r+0x68>
 80056a8:	68ac      	ldr	r4, [r5, #8]
 80056aa:	e7df      	b.n	800566c <_fflush_r+0x28>
 80056ac:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <_fflush_r+0x7c>)
 80056ae:	429c      	cmp	r4, r3
 80056b0:	d1dc      	bne.n	800566c <_fflush_r+0x28>
 80056b2:	68ec      	ldr	r4, [r5, #12]
 80056b4:	e7da      	b.n	800566c <_fflush_r+0x28>
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	08005ec0 	.word	0x08005ec0
 80056bc:	08005ee0 	.word	0x08005ee0
 80056c0:	08005ea0 	.word	0x08005ea0

080056c4 <std>:
 80056c4:	2300      	movs	r3, #0
 80056c6:	b510      	push	{r4, lr}
 80056c8:	0004      	movs	r4, r0
 80056ca:	6003      	str	r3, [r0, #0]
 80056cc:	6043      	str	r3, [r0, #4]
 80056ce:	6083      	str	r3, [r0, #8]
 80056d0:	8181      	strh	r1, [r0, #12]
 80056d2:	6643      	str	r3, [r0, #100]	; 0x64
 80056d4:	0019      	movs	r1, r3
 80056d6:	81c2      	strh	r2, [r0, #14]
 80056d8:	6103      	str	r3, [r0, #16]
 80056da:	6143      	str	r3, [r0, #20]
 80056dc:	6183      	str	r3, [r0, #24]
 80056de:	2208      	movs	r2, #8
 80056e0:	305c      	adds	r0, #92	; 0x5c
 80056e2:	f7ff fdd0 	bl	8005286 <memset>
 80056e6:	4b05      	ldr	r3, [pc, #20]	; (80056fc <std+0x38>)
 80056e8:	6224      	str	r4, [r4, #32]
 80056ea:	6263      	str	r3, [r4, #36]	; 0x24
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <std+0x3c>)
 80056ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80056f0:	4b04      	ldr	r3, [pc, #16]	; (8005704 <std+0x40>)
 80056f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <std+0x44>)
 80056f6:	6323      	str	r3, [r4, #48]	; 0x30
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	08005b91 	.word	0x08005b91
 8005700:	08005bb9 	.word	0x08005bb9
 8005704:	08005bf1 	.word	0x08005bf1
 8005708:	08005c1d 	.word	0x08005c1d

0800570c <_cleanup_r>:
 800570c:	b510      	push	{r4, lr}
 800570e:	4902      	ldr	r1, [pc, #8]	; (8005718 <_cleanup_r+0xc>)
 8005710:	f000 f8ba 	bl	8005888 <_fwalk_reent>
 8005714:	bd10      	pop	{r4, pc}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	08005645 	.word	0x08005645

0800571c <__sfmoreglue>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	2568      	movs	r5, #104	; 0x68
 8005720:	1e4a      	subs	r2, r1, #1
 8005722:	4355      	muls	r5, r2
 8005724:	000e      	movs	r6, r1
 8005726:	0029      	movs	r1, r5
 8005728:	3174      	adds	r1, #116	; 0x74
 800572a:	f000 f9a9 	bl	8005a80 <_malloc_r>
 800572e:	1e04      	subs	r4, r0, #0
 8005730:	d008      	beq.n	8005744 <__sfmoreglue+0x28>
 8005732:	2100      	movs	r1, #0
 8005734:	002a      	movs	r2, r5
 8005736:	6001      	str	r1, [r0, #0]
 8005738:	6046      	str	r6, [r0, #4]
 800573a:	300c      	adds	r0, #12
 800573c:	60a0      	str	r0, [r4, #8]
 800573e:	3268      	adds	r2, #104	; 0x68
 8005740:	f7ff fda1 	bl	8005286 <memset>
 8005744:	0020      	movs	r0, r4
 8005746:	bd70      	pop	{r4, r5, r6, pc}

08005748 <__sfp_lock_acquire>:
 8005748:	b510      	push	{r4, lr}
 800574a:	4802      	ldr	r0, [pc, #8]	; (8005754 <__sfp_lock_acquire+0xc>)
 800574c:	f000 f8bd 	bl	80058ca <__retarget_lock_acquire_recursive>
 8005750:	bd10      	pop	{r4, pc}
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	20001c95 	.word	0x20001c95

08005758 <__sfp_lock_release>:
 8005758:	b510      	push	{r4, lr}
 800575a:	4802      	ldr	r0, [pc, #8]	; (8005764 <__sfp_lock_release+0xc>)
 800575c:	f000 f8b6 	bl	80058cc <__retarget_lock_release_recursive>
 8005760:	bd10      	pop	{r4, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	20001c95 	.word	0x20001c95

08005768 <__sinit_lock_acquire>:
 8005768:	b510      	push	{r4, lr}
 800576a:	4802      	ldr	r0, [pc, #8]	; (8005774 <__sinit_lock_acquire+0xc>)
 800576c:	f000 f8ad 	bl	80058ca <__retarget_lock_acquire_recursive>
 8005770:	bd10      	pop	{r4, pc}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	20001c96 	.word	0x20001c96

08005778 <__sinit_lock_release>:
 8005778:	b510      	push	{r4, lr}
 800577a:	4802      	ldr	r0, [pc, #8]	; (8005784 <__sinit_lock_release+0xc>)
 800577c:	f000 f8a6 	bl	80058cc <__retarget_lock_release_recursive>
 8005780:	bd10      	pop	{r4, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	20001c96 	.word	0x20001c96

08005788 <__sinit>:
 8005788:	b513      	push	{r0, r1, r4, lr}
 800578a:	0004      	movs	r4, r0
 800578c:	f7ff ffec 	bl	8005768 <__sinit_lock_acquire>
 8005790:	69a3      	ldr	r3, [r4, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <__sinit+0x14>
 8005796:	f7ff ffef 	bl	8005778 <__sinit_lock_release>
 800579a:	bd13      	pop	{r0, r1, r4, pc}
 800579c:	64a3      	str	r3, [r4, #72]	; 0x48
 800579e:	64e3      	str	r3, [r4, #76]	; 0x4c
 80057a0:	6523      	str	r3, [r4, #80]	; 0x50
 80057a2:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <__sinit+0x68>)
 80057a4:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <__sinit+0x6c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	d101      	bne.n	80057b4 <__sinit+0x2c>
 80057b0:	2301      	movs	r3, #1
 80057b2:	61a3      	str	r3, [r4, #24]
 80057b4:	0020      	movs	r0, r4
 80057b6:	f000 f81f 	bl	80057f8 <__sfp>
 80057ba:	6060      	str	r0, [r4, #4]
 80057bc:	0020      	movs	r0, r4
 80057be:	f000 f81b 	bl	80057f8 <__sfp>
 80057c2:	60a0      	str	r0, [r4, #8]
 80057c4:	0020      	movs	r0, r4
 80057c6:	f000 f817 	bl	80057f8 <__sfp>
 80057ca:	2200      	movs	r2, #0
 80057cc:	2104      	movs	r1, #4
 80057ce:	60e0      	str	r0, [r4, #12]
 80057d0:	6860      	ldr	r0, [r4, #4]
 80057d2:	f7ff ff77 	bl	80056c4 <std>
 80057d6:	2201      	movs	r2, #1
 80057d8:	2109      	movs	r1, #9
 80057da:	68a0      	ldr	r0, [r4, #8]
 80057dc:	f7ff ff72 	bl	80056c4 <std>
 80057e0:	2202      	movs	r2, #2
 80057e2:	2112      	movs	r1, #18
 80057e4:	68e0      	ldr	r0, [r4, #12]
 80057e6:	f7ff ff6d 	bl	80056c4 <std>
 80057ea:	2301      	movs	r3, #1
 80057ec:	61a3      	str	r3, [r4, #24]
 80057ee:	e7d2      	b.n	8005796 <__sinit+0xe>
 80057f0:	08005e9c 	.word	0x08005e9c
 80057f4:	0800570d 	.word	0x0800570d

080057f8 <__sfp>:
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	0007      	movs	r7, r0
 80057fc:	f7ff ffa4 	bl	8005748 <__sfp_lock_acquire>
 8005800:	4b1f      	ldr	r3, [pc, #124]	; (8005880 <__sfp+0x88>)
 8005802:	681e      	ldr	r6, [r3, #0]
 8005804:	69b3      	ldr	r3, [r6, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <__sfp+0x18>
 800580a:	0030      	movs	r0, r6
 800580c:	f7ff ffbc 	bl	8005788 <__sinit>
 8005810:	3648      	adds	r6, #72	; 0x48
 8005812:	68b4      	ldr	r4, [r6, #8]
 8005814:	6873      	ldr	r3, [r6, #4]
 8005816:	3b01      	subs	r3, #1
 8005818:	d504      	bpl.n	8005824 <__sfp+0x2c>
 800581a:	6833      	ldr	r3, [r6, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d022      	beq.n	8005866 <__sfp+0x6e>
 8005820:	6836      	ldr	r6, [r6, #0]
 8005822:	e7f6      	b.n	8005812 <__sfp+0x1a>
 8005824:	220c      	movs	r2, #12
 8005826:	5ea5      	ldrsh	r5, [r4, r2]
 8005828:	2d00      	cmp	r5, #0
 800582a:	d11a      	bne.n	8005862 <__sfp+0x6a>
 800582c:	0020      	movs	r0, r4
 800582e:	4b15      	ldr	r3, [pc, #84]	; (8005884 <__sfp+0x8c>)
 8005830:	3058      	adds	r0, #88	; 0x58
 8005832:	60e3      	str	r3, [r4, #12]
 8005834:	6665      	str	r5, [r4, #100]	; 0x64
 8005836:	f000 f847 	bl	80058c8 <__retarget_lock_init_recursive>
 800583a:	f7ff ff8d 	bl	8005758 <__sfp_lock_release>
 800583e:	0020      	movs	r0, r4
 8005840:	2208      	movs	r2, #8
 8005842:	0029      	movs	r1, r5
 8005844:	6025      	str	r5, [r4, #0]
 8005846:	60a5      	str	r5, [r4, #8]
 8005848:	6065      	str	r5, [r4, #4]
 800584a:	6125      	str	r5, [r4, #16]
 800584c:	6165      	str	r5, [r4, #20]
 800584e:	61a5      	str	r5, [r4, #24]
 8005850:	305c      	adds	r0, #92	; 0x5c
 8005852:	f7ff fd18 	bl	8005286 <memset>
 8005856:	6365      	str	r5, [r4, #52]	; 0x34
 8005858:	63a5      	str	r5, [r4, #56]	; 0x38
 800585a:	64a5      	str	r5, [r4, #72]	; 0x48
 800585c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800585e:	0020      	movs	r0, r4
 8005860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005862:	3468      	adds	r4, #104	; 0x68
 8005864:	e7d7      	b.n	8005816 <__sfp+0x1e>
 8005866:	2104      	movs	r1, #4
 8005868:	0038      	movs	r0, r7
 800586a:	f7ff ff57 	bl	800571c <__sfmoreglue>
 800586e:	1e04      	subs	r4, r0, #0
 8005870:	6030      	str	r0, [r6, #0]
 8005872:	d1d5      	bne.n	8005820 <__sfp+0x28>
 8005874:	f7ff ff70 	bl	8005758 <__sfp_lock_release>
 8005878:	230c      	movs	r3, #12
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	e7ef      	b.n	800585e <__sfp+0x66>
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	08005e9c 	.word	0x08005e9c
 8005884:	ffff0001 	.word	0xffff0001

08005888 <_fwalk_reent>:
 8005888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800588a:	0004      	movs	r4, r0
 800588c:	0006      	movs	r6, r0
 800588e:	2700      	movs	r7, #0
 8005890:	9101      	str	r1, [sp, #4]
 8005892:	3448      	adds	r4, #72	; 0x48
 8005894:	6863      	ldr	r3, [r4, #4]
 8005896:	68a5      	ldr	r5, [r4, #8]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	9b00      	ldr	r3, [sp, #0]
 800589c:	3b01      	subs	r3, #1
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	d504      	bpl.n	80058ac <_fwalk_reent+0x24>
 80058a2:	6824      	ldr	r4, [r4, #0]
 80058a4:	2c00      	cmp	r4, #0
 80058a6:	d1f5      	bne.n	8005894 <_fwalk_reent+0xc>
 80058a8:	0038      	movs	r0, r7
 80058aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058ac:	89ab      	ldrh	r3, [r5, #12]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d908      	bls.n	80058c4 <_fwalk_reent+0x3c>
 80058b2:	220e      	movs	r2, #14
 80058b4:	5eab      	ldrsh	r3, [r5, r2]
 80058b6:	3301      	adds	r3, #1
 80058b8:	d004      	beq.n	80058c4 <_fwalk_reent+0x3c>
 80058ba:	0029      	movs	r1, r5
 80058bc:	0030      	movs	r0, r6
 80058be:	9b01      	ldr	r3, [sp, #4]
 80058c0:	4798      	blx	r3
 80058c2:	4307      	orrs	r7, r0
 80058c4:	3568      	adds	r5, #104	; 0x68
 80058c6:	e7e8      	b.n	800589a <_fwalk_reent+0x12>

080058c8 <__retarget_lock_init_recursive>:
 80058c8:	4770      	bx	lr

080058ca <__retarget_lock_acquire_recursive>:
 80058ca:	4770      	bx	lr

080058cc <__retarget_lock_release_recursive>:
 80058cc:	4770      	bx	lr
	...

080058d0 <__swhatbuf_r>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	000e      	movs	r6, r1
 80058d4:	001d      	movs	r5, r3
 80058d6:	230e      	movs	r3, #14
 80058d8:	5ec9      	ldrsh	r1, [r1, r3]
 80058da:	0014      	movs	r4, r2
 80058dc:	b096      	sub	sp, #88	; 0x58
 80058de:	2900      	cmp	r1, #0
 80058e0:	da08      	bge.n	80058f4 <__swhatbuf_r+0x24>
 80058e2:	220c      	movs	r2, #12
 80058e4:	5eb3      	ldrsh	r3, [r6, r2]
 80058e6:	2200      	movs	r2, #0
 80058e8:	602a      	str	r2, [r5, #0]
 80058ea:	061b      	lsls	r3, r3, #24
 80058ec:	d411      	bmi.n	8005912 <__swhatbuf_r+0x42>
 80058ee:	2380      	movs	r3, #128	; 0x80
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	e00f      	b.n	8005914 <__swhatbuf_r+0x44>
 80058f4:	466a      	mov	r2, sp
 80058f6:	f000 f9bd 	bl	8005c74 <_fstat_r>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	dbf1      	blt.n	80058e2 <__swhatbuf_r+0x12>
 80058fe:	23f0      	movs	r3, #240	; 0xf0
 8005900:	9901      	ldr	r1, [sp, #4]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	4019      	ands	r1, r3
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <__swhatbuf_r+0x4c>)
 8005908:	18c9      	adds	r1, r1, r3
 800590a:	424b      	negs	r3, r1
 800590c:	4159      	adcs	r1, r3
 800590e:	6029      	str	r1, [r5, #0]
 8005910:	e7ed      	b.n	80058ee <__swhatbuf_r+0x1e>
 8005912:	2340      	movs	r3, #64	; 0x40
 8005914:	2000      	movs	r0, #0
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	b016      	add	sp, #88	; 0x58
 800591a:	bd70      	pop	{r4, r5, r6, pc}
 800591c:	ffffe000 	.word	0xffffe000

08005920 <__smakebuf_r>:
 8005920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005922:	2602      	movs	r6, #2
 8005924:	898b      	ldrh	r3, [r1, #12]
 8005926:	0005      	movs	r5, r0
 8005928:	000c      	movs	r4, r1
 800592a:	4233      	tst	r3, r6
 800592c:	d006      	beq.n	800593c <__smakebuf_r+0x1c>
 800592e:	0023      	movs	r3, r4
 8005930:	3347      	adds	r3, #71	; 0x47
 8005932:	6023      	str	r3, [r4, #0]
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	2301      	movs	r3, #1
 8005938:	6163      	str	r3, [r4, #20]
 800593a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800593c:	466a      	mov	r2, sp
 800593e:	ab01      	add	r3, sp, #4
 8005940:	f7ff ffc6 	bl	80058d0 <__swhatbuf_r>
 8005944:	9900      	ldr	r1, [sp, #0]
 8005946:	0007      	movs	r7, r0
 8005948:	0028      	movs	r0, r5
 800594a:	f000 f899 	bl	8005a80 <_malloc_r>
 800594e:	2800      	cmp	r0, #0
 8005950:	d108      	bne.n	8005964 <__smakebuf_r+0x44>
 8005952:	220c      	movs	r2, #12
 8005954:	5ea3      	ldrsh	r3, [r4, r2]
 8005956:	059a      	lsls	r2, r3, #22
 8005958:	d4ef      	bmi.n	800593a <__smakebuf_r+0x1a>
 800595a:	2203      	movs	r2, #3
 800595c:	4393      	bics	r3, r2
 800595e:	431e      	orrs	r6, r3
 8005960:	81a6      	strh	r6, [r4, #12]
 8005962:	e7e4      	b.n	800592e <__smakebuf_r+0xe>
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <__smakebuf_r+0x84>)
 8005966:	62ab      	str	r3, [r5, #40]	; 0x28
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	89a2      	ldrh	r2, [r4, #12]
 800596c:	6020      	str	r0, [r4, #0]
 800596e:	4313      	orrs	r3, r2
 8005970:	81a3      	strh	r3, [r4, #12]
 8005972:	9b00      	ldr	r3, [sp, #0]
 8005974:	6120      	str	r0, [r4, #16]
 8005976:	6163      	str	r3, [r4, #20]
 8005978:	9b01      	ldr	r3, [sp, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00d      	beq.n	800599a <__smakebuf_r+0x7a>
 800597e:	0028      	movs	r0, r5
 8005980:	230e      	movs	r3, #14
 8005982:	5ee1      	ldrsh	r1, [r4, r3]
 8005984:	f000 f988 	bl	8005c98 <_isatty_r>
 8005988:	2800      	cmp	r0, #0
 800598a:	d006      	beq.n	800599a <__smakebuf_r+0x7a>
 800598c:	2203      	movs	r2, #3
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	4393      	bics	r3, r2
 8005992:	001a      	movs	r2, r3
 8005994:	2301      	movs	r3, #1
 8005996:	4313      	orrs	r3, r2
 8005998:	81a3      	strh	r3, [r4, #12]
 800599a:	89a0      	ldrh	r0, [r4, #12]
 800599c:	4307      	orrs	r7, r0
 800599e:	81a7      	strh	r7, [r4, #12]
 80059a0:	e7cb      	b.n	800593a <__smakebuf_r+0x1a>
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	0800570d 	.word	0x0800570d

080059a8 <_free_r>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	0005      	movs	r5, r0
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d010      	beq.n	80059d2 <_free_r+0x2a>
 80059b0:	1f0c      	subs	r4, r1, #4
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	da00      	bge.n	80059ba <_free_r+0x12>
 80059b8:	18e4      	adds	r4, r4, r3
 80059ba:	0028      	movs	r0, r5
 80059bc:	f000 f992 	bl	8005ce4 <__malloc_lock>
 80059c0:	4a1d      	ldr	r2, [pc, #116]	; (8005a38 <_free_r+0x90>)
 80059c2:	6813      	ldr	r3, [r2, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d105      	bne.n	80059d4 <_free_r+0x2c>
 80059c8:	6063      	str	r3, [r4, #4]
 80059ca:	6014      	str	r4, [r2, #0]
 80059cc:	0028      	movs	r0, r5
 80059ce:	f000 f991 	bl	8005cf4 <__malloc_unlock>
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	d908      	bls.n	80059ea <_free_r+0x42>
 80059d8:	6821      	ldr	r1, [r4, #0]
 80059da:	1860      	adds	r0, r4, r1
 80059dc:	4283      	cmp	r3, r0
 80059de:	d1f3      	bne.n	80059c8 <_free_r+0x20>
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	1841      	adds	r1, r0, r1
 80059e6:	6021      	str	r1, [r4, #0]
 80059e8:	e7ee      	b.n	80059c8 <_free_r+0x20>
 80059ea:	001a      	movs	r2, r3
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <_free_r+0x4e>
 80059f2:	42a3      	cmp	r3, r4
 80059f4:	d9f9      	bls.n	80059ea <_free_r+0x42>
 80059f6:	6811      	ldr	r1, [r2, #0]
 80059f8:	1850      	adds	r0, r2, r1
 80059fa:	42a0      	cmp	r0, r4
 80059fc:	d10b      	bne.n	8005a16 <_free_r+0x6e>
 80059fe:	6820      	ldr	r0, [r4, #0]
 8005a00:	1809      	adds	r1, r1, r0
 8005a02:	1850      	adds	r0, r2, r1
 8005a04:	6011      	str	r1, [r2, #0]
 8005a06:	4283      	cmp	r3, r0
 8005a08:	d1e0      	bne.n	80059cc <_free_r+0x24>
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	1841      	adds	r1, r0, r1
 8005a10:	6011      	str	r1, [r2, #0]
 8005a12:	6053      	str	r3, [r2, #4]
 8005a14:	e7da      	b.n	80059cc <_free_r+0x24>
 8005a16:	42a0      	cmp	r0, r4
 8005a18:	d902      	bls.n	8005a20 <_free_r+0x78>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	602b      	str	r3, [r5, #0]
 8005a1e:	e7d5      	b.n	80059cc <_free_r+0x24>
 8005a20:	6821      	ldr	r1, [r4, #0]
 8005a22:	1860      	adds	r0, r4, r1
 8005a24:	4283      	cmp	r3, r0
 8005a26:	d103      	bne.n	8005a30 <_free_r+0x88>
 8005a28:	6818      	ldr	r0, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	1841      	adds	r1, r0, r1
 8005a2e:	6021      	str	r1, [r4, #0]
 8005a30:	6063      	str	r3, [r4, #4]
 8005a32:	6054      	str	r4, [r2, #4]
 8005a34:	e7ca      	b.n	80059cc <_free_r+0x24>
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	20001c98 	.word	0x20001c98

08005a3c <sbrk_aligned>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4e0f      	ldr	r6, [pc, #60]	; (8005a7c <sbrk_aligned+0x40>)
 8005a40:	000d      	movs	r5, r1
 8005a42:	6831      	ldr	r1, [r6, #0]
 8005a44:	0004      	movs	r4, r0
 8005a46:	2900      	cmp	r1, #0
 8005a48:	d102      	bne.n	8005a50 <sbrk_aligned+0x14>
 8005a4a:	f000 f88f 	bl	8005b6c <_sbrk_r>
 8005a4e:	6030      	str	r0, [r6, #0]
 8005a50:	0029      	movs	r1, r5
 8005a52:	0020      	movs	r0, r4
 8005a54:	f000 f88a 	bl	8005b6c <_sbrk_r>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d00a      	beq.n	8005a72 <sbrk_aligned+0x36>
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	1cc5      	adds	r5, r0, #3
 8005a60:	439d      	bics	r5, r3
 8005a62:	42a8      	cmp	r0, r5
 8005a64:	d007      	beq.n	8005a76 <sbrk_aligned+0x3a>
 8005a66:	1a29      	subs	r1, r5, r0
 8005a68:	0020      	movs	r0, r4
 8005a6a:	f000 f87f 	bl	8005b6c <_sbrk_r>
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d101      	bne.n	8005a76 <sbrk_aligned+0x3a>
 8005a72:	2501      	movs	r5, #1
 8005a74:	426d      	negs	r5, r5
 8005a76:	0028      	movs	r0, r5
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	20001c9c 	.word	0x20001c9c

08005a80 <_malloc_r>:
 8005a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a82:	2203      	movs	r2, #3
 8005a84:	1ccb      	adds	r3, r1, #3
 8005a86:	4393      	bics	r3, r2
 8005a88:	3308      	adds	r3, #8
 8005a8a:	0006      	movs	r6, r0
 8005a8c:	001f      	movs	r7, r3
 8005a8e:	2b0c      	cmp	r3, #12
 8005a90:	d232      	bcs.n	8005af8 <_malloc_r+0x78>
 8005a92:	270c      	movs	r7, #12
 8005a94:	42b9      	cmp	r1, r7
 8005a96:	d831      	bhi.n	8005afc <_malloc_r+0x7c>
 8005a98:	0030      	movs	r0, r6
 8005a9a:	f000 f923 	bl	8005ce4 <__malloc_lock>
 8005a9e:	4d32      	ldr	r5, [pc, #200]	; (8005b68 <_malloc_r+0xe8>)
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	001c      	movs	r4, r3
 8005aa4:	2c00      	cmp	r4, #0
 8005aa6:	d12e      	bne.n	8005b06 <_malloc_r+0x86>
 8005aa8:	0039      	movs	r1, r7
 8005aaa:	0030      	movs	r0, r6
 8005aac:	f7ff ffc6 	bl	8005a3c <sbrk_aligned>
 8005ab0:	0004      	movs	r4, r0
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d11e      	bne.n	8005af4 <_malloc_r+0x74>
 8005ab6:	682c      	ldr	r4, [r5, #0]
 8005ab8:	0025      	movs	r5, r4
 8005aba:	2d00      	cmp	r5, #0
 8005abc:	d14a      	bne.n	8005b54 <_malloc_r+0xd4>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	0029      	movs	r1, r5
 8005ac2:	18e3      	adds	r3, r4, r3
 8005ac4:	0030      	movs	r0, r6
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	f000 f850 	bl	8005b6c <_sbrk_r>
 8005acc:	9b01      	ldr	r3, [sp, #4]
 8005ace:	4283      	cmp	r3, r0
 8005ad0:	d143      	bne.n	8005b5a <_malloc_r+0xda>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	3703      	adds	r7, #3
 8005ad6:	1aff      	subs	r7, r7, r3
 8005ad8:	2303      	movs	r3, #3
 8005ada:	439f      	bics	r7, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	2f0c      	cmp	r7, #12
 8005ae0:	d200      	bcs.n	8005ae4 <_malloc_r+0x64>
 8005ae2:	270c      	movs	r7, #12
 8005ae4:	0039      	movs	r1, r7
 8005ae6:	0030      	movs	r0, r6
 8005ae8:	f7ff ffa8 	bl	8005a3c <sbrk_aligned>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d034      	beq.n	8005b5a <_malloc_r+0xda>
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	19df      	adds	r7, r3, r7
 8005af4:	6027      	str	r7, [r4, #0]
 8005af6:	e013      	b.n	8005b20 <_malloc_r+0xa0>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	dacb      	bge.n	8005a94 <_malloc_r+0x14>
 8005afc:	230c      	movs	r3, #12
 8005afe:	2500      	movs	r5, #0
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	0028      	movs	r0, r5
 8005b04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	1bd1      	subs	r1, r2, r7
 8005b0a:	d420      	bmi.n	8005b4e <_malloc_r+0xce>
 8005b0c:	290b      	cmp	r1, #11
 8005b0e:	d917      	bls.n	8005b40 <_malloc_r+0xc0>
 8005b10:	19e2      	adds	r2, r4, r7
 8005b12:	6027      	str	r7, [r4, #0]
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	d111      	bne.n	8005b3c <_malloc_r+0xbc>
 8005b18:	602a      	str	r2, [r5, #0]
 8005b1a:	6863      	ldr	r3, [r4, #4]
 8005b1c:	6011      	str	r1, [r2, #0]
 8005b1e:	6053      	str	r3, [r2, #4]
 8005b20:	0030      	movs	r0, r6
 8005b22:	0025      	movs	r5, r4
 8005b24:	f000 f8e6 	bl	8005cf4 <__malloc_unlock>
 8005b28:	2207      	movs	r2, #7
 8005b2a:	350b      	adds	r5, #11
 8005b2c:	1d23      	adds	r3, r4, #4
 8005b2e:	4395      	bics	r5, r2
 8005b30:	1aea      	subs	r2, r5, r3
 8005b32:	429d      	cmp	r5, r3
 8005b34:	d0e5      	beq.n	8005b02 <_malloc_r+0x82>
 8005b36:	1b5b      	subs	r3, r3, r5
 8005b38:	50a3      	str	r3, [r4, r2]
 8005b3a:	e7e2      	b.n	8005b02 <_malloc_r+0x82>
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	e7ec      	b.n	8005b1a <_malloc_r+0x9a>
 8005b40:	6862      	ldr	r2, [r4, #4]
 8005b42:	42a3      	cmp	r3, r4
 8005b44:	d101      	bne.n	8005b4a <_malloc_r+0xca>
 8005b46:	602a      	str	r2, [r5, #0]
 8005b48:	e7ea      	b.n	8005b20 <_malloc_r+0xa0>
 8005b4a:	605a      	str	r2, [r3, #4]
 8005b4c:	e7e8      	b.n	8005b20 <_malloc_r+0xa0>
 8005b4e:	0023      	movs	r3, r4
 8005b50:	6864      	ldr	r4, [r4, #4]
 8005b52:	e7a7      	b.n	8005aa4 <_malloc_r+0x24>
 8005b54:	002c      	movs	r4, r5
 8005b56:	686d      	ldr	r5, [r5, #4]
 8005b58:	e7af      	b.n	8005aba <_malloc_r+0x3a>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	0030      	movs	r0, r6
 8005b5e:	6033      	str	r3, [r6, #0]
 8005b60:	f000 f8c8 	bl	8005cf4 <__malloc_unlock>
 8005b64:	e7cd      	b.n	8005b02 <_malloc_r+0x82>
 8005b66:	46c0      	nop			; (mov r8, r8)
 8005b68:	20001c98 	.word	0x20001c98

08005b6c <_sbrk_r>:
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	b570      	push	{r4, r5, r6, lr}
 8005b70:	4d06      	ldr	r5, [pc, #24]	; (8005b8c <_sbrk_r+0x20>)
 8005b72:	0004      	movs	r4, r0
 8005b74:	0008      	movs	r0, r1
 8005b76:	602b      	str	r3, [r5, #0]
 8005b78:	f000 f8d8 	bl	8005d2c <_sbrk>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d103      	bne.n	8005b88 <_sbrk_r+0x1c>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d000      	beq.n	8005b88 <_sbrk_r+0x1c>
 8005b86:	6023      	str	r3, [r4, #0]
 8005b88:	bd70      	pop	{r4, r5, r6, pc}
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	20001ca0 	.word	0x20001ca0

08005b90 <__sread>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	000c      	movs	r4, r1
 8005b94:	250e      	movs	r5, #14
 8005b96:	5f49      	ldrsh	r1, [r1, r5]
 8005b98:	f000 f8b4 	bl	8005d04 <_read_r>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	db03      	blt.n	8005ba8 <__sread+0x18>
 8005ba0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ba2:	181b      	adds	r3, r3, r0
 8005ba4:	6563      	str	r3, [r4, #84]	; 0x54
 8005ba6:	bd70      	pop	{r4, r5, r6, pc}
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	4a02      	ldr	r2, [pc, #8]	; (8005bb4 <__sread+0x24>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	81a3      	strh	r3, [r4, #12]
 8005bb0:	e7f9      	b.n	8005ba6 <__sread+0x16>
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	ffffefff 	.word	0xffffefff

08005bb8 <__swrite>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	001f      	movs	r7, r3
 8005bbc:	898b      	ldrh	r3, [r1, #12]
 8005bbe:	0005      	movs	r5, r0
 8005bc0:	000c      	movs	r4, r1
 8005bc2:	0016      	movs	r6, r2
 8005bc4:	05db      	lsls	r3, r3, #23
 8005bc6:	d505      	bpl.n	8005bd4 <__swrite+0x1c>
 8005bc8:	230e      	movs	r3, #14
 8005bca:	5ec9      	ldrsh	r1, [r1, r3]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2302      	movs	r3, #2
 8005bd0:	f000 f874 	bl	8005cbc <_lseek_r>
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	4a05      	ldr	r2, [pc, #20]	; (8005bec <__swrite+0x34>)
 8005bd8:	0028      	movs	r0, r5
 8005bda:	4013      	ands	r3, r2
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	0032      	movs	r2, r6
 8005be0:	230e      	movs	r3, #14
 8005be2:	5ee1      	ldrsh	r1, [r4, r3]
 8005be4:	003b      	movs	r3, r7
 8005be6:	f000 f81f 	bl	8005c28 <_write_r>
 8005bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bec:	ffffefff 	.word	0xffffefff

08005bf0 <__sseek>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	000c      	movs	r4, r1
 8005bf4:	250e      	movs	r5, #14
 8005bf6:	5f49      	ldrsh	r1, [r1, r5]
 8005bf8:	f000 f860 	bl	8005cbc <_lseek_r>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	1c42      	adds	r2, r0, #1
 8005c00:	d103      	bne.n	8005c0a <__sseek+0x1a>
 8005c02:	4a05      	ldr	r2, [pc, #20]	; (8005c18 <__sseek+0x28>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	bd70      	pop	{r4, r5, r6, pc}
 8005c0a:	2280      	movs	r2, #128	; 0x80
 8005c0c:	0152      	lsls	r2, r2, #5
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	81a3      	strh	r3, [r4, #12]
 8005c12:	6560      	str	r0, [r4, #84]	; 0x54
 8005c14:	e7f8      	b.n	8005c08 <__sseek+0x18>
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	ffffefff 	.word	0xffffefff

08005c1c <__sclose>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	230e      	movs	r3, #14
 8005c20:	5ec9      	ldrsh	r1, [r1, r3]
 8005c22:	f000 f815 	bl	8005c50 <_close_r>
 8005c26:	bd10      	pop	{r4, pc}

08005c28 <_write_r>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	0004      	movs	r4, r0
 8005c2c:	0008      	movs	r0, r1
 8005c2e:	0011      	movs	r1, r2
 8005c30:	001a      	movs	r2, r3
 8005c32:	2300      	movs	r3, #0
 8005c34:	4d05      	ldr	r5, [pc, #20]	; (8005c4c <_write_r+0x24>)
 8005c36:	602b      	str	r3, [r5, #0]
 8005c38:	f7fa ffb5 	bl	8000ba6 <_write>
 8005c3c:	1c43      	adds	r3, r0, #1
 8005c3e:	d103      	bne.n	8005c48 <_write_r+0x20>
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d000      	beq.n	8005c48 <_write_r+0x20>
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	bd70      	pop	{r4, r5, r6, pc}
 8005c4a:	46c0      	nop			; (mov r8, r8)
 8005c4c:	20001ca0 	.word	0x20001ca0

08005c50 <_close_r>:
 8005c50:	2300      	movs	r3, #0
 8005c52:	b570      	push	{r4, r5, r6, lr}
 8005c54:	4d06      	ldr	r5, [pc, #24]	; (8005c70 <_close_r+0x20>)
 8005c56:	0004      	movs	r4, r0
 8005c58:	0008      	movs	r0, r1
 8005c5a:	602b      	str	r3, [r5, #0]
 8005c5c:	f7fa ffbf 	bl	8000bde <_close>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d103      	bne.n	8005c6c <_close_r+0x1c>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d000      	beq.n	8005c6c <_close_r+0x1c>
 8005c6a:	6023      	str	r3, [r4, #0]
 8005c6c:	bd70      	pop	{r4, r5, r6, pc}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	20001ca0 	.word	0x20001ca0

08005c74 <_fstat_r>:
 8005c74:	2300      	movs	r3, #0
 8005c76:	b570      	push	{r4, r5, r6, lr}
 8005c78:	4d06      	ldr	r5, [pc, #24]	; (8005c94 <_fstat_r+0x20>)
 8005c7a:	0004      	movs	r4, r0
 8005c7c:	0008      	movs	r0, r1
 8005c7e:	0011      	movs	r1, r2
 8005c80:	602b      	str	r3, [r5, #0]
 8005c82:	f7fa ffb6 	bl	8000bf2 <_fstat>
 8005c86:	1c43      	adds	r3, r0, #1
 8005c88:	d103      	bne.n	8005c92 <_fstat_r+0x1e>
 8005c8a:	682b      	ldr	r3, [r5, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d000      	beq.n	8005c92 <_fstat_r+0x1e>
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	20001ca0 	.word	0x20001ca0

08005c98 <_isatty_r>:
 8005c98:	2300      	movs	r3, #0
 8005c9a:	b570      	push	{r4, r5, r6, lr}
 8005c9c:	4d06      	ldr	r5, [pc, #24]	; (8005cb8 <_isatty_r+0x20>)
 8005c9e:	0004      	movs	r4, r0
 8005ca0:	0008      	movs	r0, r1
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	f7fa ffb3 	bl	8000c0e <_isatty>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d103      	bne.n	8005cb4 <_isatty_r+0x1c>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d000      	beq.n	8005cb4 <_isatty_r+0x1c>
 8005cb2:	6023      	str	r3, [r4, #0]
 8005cb4:	bd70      	pop	{r4, r5, r6, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	20001ca0 	.word	0x20001ca0

08005cbc <_lseek_r>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	0004      	movs	r4, r0
 8005cc0:	0008      	movs	r0, r1
 8005cc2:	0011      	movs	r1, r2
 8005cc4:	001a      	movs	r2, r3
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	4d05      	ldr	r5, [pc, #20]	; (8005ce0 <_lseek_r+0x24>)
 8005cca:	602b      	str	r3, [r5, #0]
 8005ccc:	f7fa ffa8 	bl	8000c20 <_lseek>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d103      	bne.n	8005cdc <_lseek_r+0x20>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d000      	beq.n	8005cdc <_lseek_r+0x20>
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	bd70      	pop	{r4, r5, r6, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	20001ca0 	.word	0x20001ca0

08005ce4 <__malloc_lock>:
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	4802      	ldr	r0, [pc, #8]	; (8005cf0 <__malloc_lock+0xc>)
 8005ce8:	f7ff fdef 	bl	80058ca <__retarget_lock_acquire_recursive>
 8005cec:	bd10      	pop	{r4, pc}
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	20001c94 	.word	0x20001c94

08005cf4 <__malloc_unlock>:
 8005cf4:	b510      	push	{r4, lr}
 8005cf6:	4802      	ldr	r0, [pc, #8]	; (8005d00 <__malloc_unlock+0xc>)
 8005cf8:	f7ff fde8 	bl	80058cc <__retarget_lock_release_recursive>
 8005cfc:	bd10      	pop	{r4, pc}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	20001c94 	.word	0x20001c94

08005d04 <_read_r>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	0004      	movs	r4, r0
 8005d08:	0008      	movs	r0, r1
 8005d0a:	0011      	movs	r1, r2
 8005d0c:	001a      	movs	r2, r3
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4d05      	ldr	r5, [pc, #20]	; (8005d28 <_read_r+0x24>)
 8005d12:	602b      	str	r3, [r5, #0]
 8005d14:	f7fa ff2a 	bl	8000b6c <_read>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d103      	bne.n	8005d24 <_read_r+0x20>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d000      	beq.n	8005d24 <_read_r+0x20>
 8005d22:	6023      	str	r3, [r4, #0]
 8005d24:	bd70      	pop	{r4, r5, r6, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	20001ca0 	.word	0x20001ca0

08005d2c <_sbrk>:
 8005d2c:	4a05      	ldr	r2, [pc, #20]	; (8005d44 <_sbrk+0x18>)
 8005d2e:	0003      	movs	r3, r0
 8005d30:	6811      	ldr	r1, [r2, #0]
 8005d32:	2900      	cmp	r1, #0
 8005d34:	d101      	bne.n	8005d3a <_sbrk+0xe>
 8005d36:	4904      	ldr	r1, [pc, #16]	; (8005d48 <_sbrk+0x1c>)
 8005d38:	6011      	str	r1, [r2, #0]
 8005d3a:	6810      	ldr	r0, [r2, #0]
 8005d3c:	18c3      	adds	r3, r0, r3
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	4770      	bx	lr
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	20001ca4 	.word	0x20001ca4
 8005d48:	20001ca8 	.word	0x20001ca8

08005d4c <_init>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr

08005d58 <_fini>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5e:	bc08      	pop	{r3}
 8005d60:	469e      	mov	lr, r3
 8005d62:	4770      	bx	lr


ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006070  08006070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006188  08006188  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006188  08006188  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006188  08006188  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c7c  20000078  08006208  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cf4  08006208  00021cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e94  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b9  00000000  00000000  00036f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0003a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003b570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cbb  00000000  00000000  0003c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178fe  00000000  00000000  00055573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b15  00000000  00000000  0006ce71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d986  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004df4  00000000  00000000  0010d9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006058 	.word	0x08006058

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08006058 	.word	0x08006058

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <task1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void task1(void *p)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b09d      	sub	sp, #116	; 0x74
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		char str[100];
		HAL_ADC_Start(&hadc1);
 8000420:	4b13      	ldr	r3, [pc, #76]	; (8000470 <task1+0x58>)
 8000422:	0018      	movs	r0, r3
 8000424:	f000 fe34 	bl	8001090 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc1, 100) ==HAL_OK)
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <task1+0x58>)
 800042a:	2164      	movs	r1, #100	; 0x64
 800042c:	0018      	movs	r0, r3
 800042e:	f000 fe7d 	bl	800112c <HAL_ADC_PollForConversion>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d1f4      	bne.n	8000420 <task1+0x8>
		{
			adc_res1 = HAL_ADC_GetValue(&hadc1);
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <task1+0x58>)
 8000438:	0018      	movs	r0, r3
 800043a:	f000 ff0b 	bl	8001254 <HAL_ADC_GetValue>
 800043e:	0002      	movs	r2, r0
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <task1+0x5c>)
 8000442:	601a      	str	r2, [r3, #0]
			sprintf(str, "The ADC Value is = %d\r\n", adc_res1);
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <task1+0x5c>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	490b      	ldr	r1, [pc, #44]	; (8000478 <task1+0x60>)
 800044a:	240c      	movs	r4, #12
 800044c:	193b      	adds	r3, r7, r4
 800044e:	0018      	movs	r0, r3
 8000450:	f005 f992 	bl	8005778 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);
 8000454:	193b      	adds	r3, r7, r4
 8000456:	0018      	movs	r0, r3
 8000458:	f7ff fe56 	bl	8000108 <strlen>
 800045c:	0003      	movs	r3, r0
 800045e:	b29a      	uxth	r2, r3
 8000460:	2301      	movs	r3, #1
 8000462:	425b      	negs	r3, r3
 8000464:	1939      	adds	r1, r7, r4
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <task1+0x64>)
 8000468:	f002 fcc0 	bl	8002dec <HAL_UART_Transmit>
	{
 800046c:	e7d8      	b.n	8000420 <task1+0x8>
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	20000094 	.word	0x20000094
 8000474:	2000018c 	.word	0x2000018c
 8000478:	08006070 	.word	0x08006070
 800047c:	200000f8 	.word	0x200000f8

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000486:	f000 fae9 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048a:	f000 f817 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f911 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000492:	f000 f8c1 	bl	8000618 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000496:	f000 f859 	bl	800054c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(task1,"t1", 200, NULL, 2, &t1);
 800049a:	4906      	ldr	r1, [pc, #24]	; (80004b4 <main+0x34>)
 800049c:	4806      	ldr	r0, [pc, #24]	; (80004b8 <main+0x38>)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2302      	movs	r3, #2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	2300      	movs	r3, #0
 80004a8:	22c8      	movs	r2, #200	; 0xc8
 80004aa:	f003 fd1e 	bl	8003eea <xTaskCreate>
  vTaskStartScheduler();
 80004ae:	f003 fe79 	bl	80041a4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <main+0x32>
 80004b4:	08006088 	.word	0x08006088
 80004b8:	08000419 	.word	0x08000419

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b093      	sub	sp, #76	; 0x4c
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	2414      	movs	r4, #20
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	0018      	movs	r0, r3
 80004c8:	2334      	movs	r3, #52	; 0x34
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f005 f94a 	bl	8005766 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	2310      	movs	r3, #16
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f005 f943 	bl	8005766 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fb31 	bl	8001b4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2202      	movs	r2, #2
 80004ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	0052      	lsls	r2, r2, #1
 80004f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2240      	movs	r2, #64	; 0x40
 8000502:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	193b      	adds	r3, r7, r4
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fb69 	bl	8001be4 <HAL_RCC_OscConfig>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000516:	f000 f90d 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2207      	movs	r2, #7
 800051e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2100      	movs	r1, #0
 8000536:	0018      	movs	r0, r3
 8000538:	f001 fe64 	bl	8002204 <HAL_RCC_ClockConfig>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000540:	f000 f8f8 	bl	8000734 <Error_Handler>
  }
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b013      	add	sp, #76	; 0x4c
 800054a:	bd90      	pop	{r4, r7, pc}

0800054c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	0018      	movs	r0, r3
 8000556:	230c      	movs	r3, #12
 8000558:	001a      	movs	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	f005 f903 	bl	8005766 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000560:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <MX_ADC1_Init+0xc4>)
 8000562:	4a2c      	ldr	r2, [pc, #176]	; (8000614 <MX_ADC1_Init+0xc8>)
 8000564:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000566:	4b2a      	ldr	r3, [pc, #168]	; (8000610 <MX_ADC1_Init+0xc4>)
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	05d2      	lsls	r2, r2, #23
 800056c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <MX_ADC1_Init+0xc4>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000574:	4b26      	ldr	r3, [pc, #152]	; (8000610 <MX_ADC1_Init+0xc4>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <MX_ADC1_Init+0xc4>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <MX_ADC1_Init+0xc4>)
 8000582:	2204      	movs	r2, #4
 8000584:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <MX_ADC1_Init+0xc4>)
 8000588:	2200      	movs	r2, #0
 800058a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <MX_ADC1_Init+0xc4>)
 800058e:	2200      	movs	r2, #0
 8000590:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000592:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <MX_ADC1_Init+0xc4>)
 8000594:	2201      	movs	r2, #1
 8000596:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000598:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <MX_ADC1_Init+0xc4>)
 800059a:	2201      	movs	r2, #1
 800059c:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <MX_ADC1_Init+0xc4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <MX_ADC1_Init+0xc4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <MX_ADC1_Init+0xc4>)
 80005ac:	222c      	movs	r2, #44	; 0x2c
 80005ae:	2100      	movs	r1, #0
 80005b0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_ADC1_Init+0xc4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_ADC1_Init+0xc4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_ADC1_Init+0xc4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_ADC1_Init+0xc4>)
 80005c6:	223c      	movs	r2, #60	; 0x3c
 80005c8:	2100      	movs	r1, #0
 80005ca:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <MX_ADC1_Init+0xc4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_ADC1_Init+0xc4>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 fbb3 	bl	8000d40 <HAL_ADC_Init>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80005de:	f000 f8a9 	bl	8000734 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2201      	movs	r2, #1
 80005e6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	1d3a      	adds	r2, r7, #4
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_ADC1_Init+0xc4>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 fe36 	bl	800126c <HAL_ADC_ConfigChannel>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000604:	f000 f896 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b004      	add	sp, #16
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000094 	.word	0x20000094
 8000614:	40012400 	.word	0x40012400

08000618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_USART2_UART_Init+0x94>)
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <MX_USART2_UART_Init+0x98>)
 8000620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000624:	22e1      	movs	r2, #225	; 0xe1
 8000626:	0252      	lsls	r2, r2, #9
 8000628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_USART2_UART_Init+0x94>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_USART2_UART_Init+0x94>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_USART2_UART_Init+0x94>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_USART2_UART_Init+0x94>)
 800065c:	2200      	movs	r2, #0
 800065e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000662:	0018      	movs	r0, r3
 8000664:	f002 fb6c 	bl	8002d40 <HAL_UART_Init>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800066c:	f000 f862 	bl	8000734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000672:	2100      	movs	r1, #0
 8000674:	0018      	movs	r0, r3
 8000676:	f002 fffd 	bl	8003674 <HAL_UARTEx_SetTxFifoThreshold>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800067e:	f000 f859 	bl	8000734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000684:	2100      	movs	r1, #0
 8000686:	0018      	movs	r0, r3
 8000688:	f003 f834 	bl	80036f4 <HAL_UARTEx_SetRxFifoThreshold>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000690:	f000 f850 	bl	8000734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000696:	0018      	movs	r0, r3
 8000698:	f002 ffb2 	bl	8003600 <HAL_UARTEx_DisableFifoMode>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006a0:	f000 f848 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	200000f8 	.word	0x200000f8
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_GPIO_Init+0x58>)
 80006bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_GPIO_Init+0x58>)
 80006c0:	2104      	movs	r1, #4
 80006c2:	430a      	orrs	r2, r1
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_GPIO_Init+0x58>)
 80006c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ca:	2204      	movs	r2, #4
 80006cc:	4013      	ands	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_GPIO_Init+0x58>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_GPIO_Init+0x58>)
 80006d8:	2120      	movs	r1, #32
 80006da:	430a      	orrs	r2, r1
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_GPIO_Init+0x58>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e2:	2220      	movs	r2, #32
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_GPIO_Init+0x58>)
 80006ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_GPIO_Init+0x58>)
 80006f0:	2101      	movs	r1, #1
 80006f2:	430a      	orrs	r2, r1
 80006f4:	635a      	str	r2, [r3, #52]	; 0x34
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <MX_GPIO_Init+0x58>)
 80006f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fa:	2201      	movs	r2, #1
 80006fc:	4013      	ands	r3, r2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b004      	add	sp, #16
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	40021000 	.word	0x40021000

08000710 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d101      	bne.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000722:	f000 f9bb 	bl	8000a9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40000400 	.word	0x40000400

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x44>)
 8000748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <HAL_MspInit+0x44>)
 800074c:	2101      	movs	r1, #1
 800074e:	430a      	orrs	r2, r1
 8000750:	641a      	str	r2, [r3, #64]	; 0x40
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x44>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	2201      	movs	r2, #1
 8000758:	4013      	ands	r3, r2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x44>)
 8000760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_MspInit+0x44>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0549      	lsls	r1, r1, #21
 8000768:	430a      	orrs	r2, r1
 800076a:	63da      	str	r2, [r3, #60]	; 0x3c
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_MspInit+0x44>)
 800076e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	055b      	lsls	r3, r3, #21
 8000774:	4013      	ands	r3, r2
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b08b      	sub	sp, #44	; 0x2c
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	2414      	movs	r4, #20
 8000792:	193b      	adds	r3, r7, r4
 8000794:	0018      	movs	r0, r3
 8000796:	2314      	movs	r3, #20
 8000798:	001a      	movs	r2, r3
 800079a:	2100      	movs	r1, #0
 800079c:	f004 ffe3 	bl	8005766 <memset>
  if(hadc->Instance==ADC1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a18      	ldr	r2, [pc, #96]	; (8000808 <HAL_ADC_MspInit+0x80>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d129      	bne.n	80007fe <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <HAL_ADC_MspInit+0x84>)
 80007ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <HAL_ADC_MspInit+0x84>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	0349      	lsls	r1, r1, #13
 80007b4:	430a      	orrs	r2, r1
 80007b6:	641a      	str	r2, [r3, #64]	; 0x40
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_ADC_MspInit+0x84>)
 80007ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	035b      	lsls	r3, r3, #13
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_ADC_MspInit+0x84>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <HAL_ADC_MspInit+0x84>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_ADC_MspInit+0x84>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d6:	2201      	movs	r2, #1
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2203      	movs	r2, #3
 80007e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	193a      	adds	r2, r7, r4
 80007f2:	23a0      	movs	r3, #160	; 0xa0
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f001 f843 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b00b      	add	sp, #44	; 0x2c
 8000804:	bd90      	pop	{r4, r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40012400 	.word	0x40012400
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b091      	sub	sp, #68	; 0x44
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	232c      	movs	r3, #44	; 0x2c
 800081a:	18fb      	adds	r3, r7, r3
 800081c:	0018      	movs	r0, r3
 800081e:	2314      	movs	r3, #20
 8000820:	001a      	movs	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f004 ff9f 	bl	8005766 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	2410      	movs	r4, #16
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0018      	movs	r0, r3
 800082e:	231c      	movs	r3, #28
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f004 ff97 	bl	8005766 <memset>
  if(huart->Instance==USART2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a22      	ldr	r2, [pc, #136]	; (80008c8 <HAL_UART_MspInit+0xb8>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d13e      	bne.n	80008c0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2202      	movs	r2, #2
 8000846:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084e:	193b      	adds	r3, r7, r4
 8000850:	0018      	movs	r0, r3
 8000852:	f001 feab 	bl	80025ac <HAL_RCCEx_PeriphCLKConfig>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800085a:	f7ff ff6b 	bl	8000734 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <HAL_UART_MspInit+0xbc>)
 8000860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <HAL_UART_MspInit+0xbc>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0289      	lsls	r1, r1, #10
 8000868:	430a      	orrs	r2, r1
 800086a:	63da      	str	r2, [r3, #60]	; 0x3c
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <HAL_UART_MspInit+0xbc>)
 800086e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	029b      	lsls	r3, r3, #10
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_UART_MspInit+0xbc>)
 800087c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <HAL_UART_MspInit+0xbc>)
 8000880:	2101      	movs	r1, #1
 8000882:	430a      	orrs	r2, r1
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_UART_MspInit+0xbc>)
 8000888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088a:	2201      	movs	r2, #1
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000892:	212c      	movs	r1, #44	; 0x2c
 8000894:	187b      	adds	r3, r7, r1
 8000896:	220c      	movs	r2, #12
 8000898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2202      	movs	r2, #2
 800089e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2201      	movs	r2, #1
 80008b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	187a      	adds	r2, r7, r1
 80008b4:	23a0      	movs	r3, #160	; 0xa0
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	0011      	movs	r1, r2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 ffe2 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b011      	add	sp, #68	; 0x44
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	40004400 	.word	0x40004400
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b5b0      	push	{r4, r5, r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008d8:	232b      	movs	r3, #43	; 0x2b
 80008da:	18fb      	adds	r3, r7, r3
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80008e0:	4b37      	ldr	r3, [pc, #220]	; (80009c0 <HAL_InitTick+0xf0>)
 80008e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008e4:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <HAL_InitTick+0xf0>)
 80008e6:	2102      	movs	r1, #2
 80008e8:	430a      	orrs	r2, r1
 80008ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80008ec:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <HAL_InitTick+0xf0>)
 80008ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008f0:	2202      	movs	r2, #2
 80008f2:	4013      	ands	r3, r2
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f8:	230c      	movs	r3, #12
 80008fa:	18fa      	adds	r2, r7, r3
 80008fc:	2410      	movs	r4, #16
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	0011      	movs	r1, r2
 8000902:	0018      	movs	r0, r3
 8000904:	f001 fe28 	bl	8002558 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	2b00      	cmp	r3, #0
 8000912:	d104      	bne.n	800091e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000914:	f001 fe0a 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8000918:	0003      	movs	r3, r0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800091c:	e004      	b.n	8000928 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800091e:	f001 fe05 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8000922:	0003      	movs	r3, r0
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092a:	4926      	ldr	r1, [pc, #152]	; (80009c4 <HAL_InitTick+0xf4>)
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff fbfd 	bl	800012c <__udivsi3>
 8000932:	0003      	movs	r3, r0
 8000934:	3b01      	subs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <HAL_InitTick+0xf8>)
 800093a:	4a24      	ldr	r2, [pc, #144]	; (80009cc <HAL_InitTick+0xfc>)
 800093c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <HAL_InitTick+0xf8>)
 8000940:	4a23      	ldr	r2, [pc, #140]	; (80009d0 <HAL_InitTick+0x100>)
 8000942:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <HAL_InitTick+0xf8>)
 8000946:	6a3a      	ldr	r2, [r7, #32]
 8000948:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <HAL_InitTick+0xf8>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <HAL_InitTick+0xf8>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <HAL_InitTick+0xf8>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800095c:	252b      	movs	r5, #43	; 0x2b
 800095e:	197c      	adds	r4, r7, r5
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <HAL_InitTick+0xf8>)
 8000962:	0018      	movs	r0, r3
 8000964:	f001 ff56 	bl	8002814 <HAL_TIM_Base_Init>
 8000968:	0003      	movs	r3, r0
 800096a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800096c:	197b      	adds	r3, r7, r5
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d11e      	bne.n	80009b2 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000974:	197c      	adds	r4, r7, r5
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_InitTick+0xf8>)
 8000978:	0018      	movs	r0, r3
 800097a:	f001 ffab 	bl	80028d4 <HAL_TIM_Base_Start_IT>
 800097e:	0003      	movs	r3, r0
 8000980:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000982:	197b      	adds	r3, r7, r5
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d113      	bne.n	80009b2 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800098a:	2010      	movs	r0, #16
 800098c:	f000 ff69 	bl	8001862 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d809      	bhi.n	80009aa <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2200      	movs	r2, #0
 800099a:	0019      	movs	r1, r3
 800099c:	2010      	movs	r0, #16
 800099e:	f000 ff4b 	bl	8001838 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_InitTick+0x104>)
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	e003      	b.n	80009b2 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80009aa:	232b      	movs	r3, #43	; 0x2b
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80009b2:	232b      	movs	r3, #43	; 0x2b
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	781b      	ldrb	r3, [r3, #0]
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b00c      	add	sp, #48	; 0x30
 80009be:	bdb0      	pop	{r4, r5, r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	000f4240 	.word	0x000f4240
 80009c8:	20000190 	.word	0x20000190
 80009cc:	40000400 	.word	0x40000400
 80009d0:	000003e7 	.word	0x000003e7
 80009d4:	20000004 	.word	0x20000004

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <TIM3_IRQHandler+0x14>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 ffc8 	bl	8002980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000190 	.word	0x20000190

080009fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a0c:	f7ff fff6 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	; (8000a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <LoopForever+0xe>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	; (8000a54 <LoopForever+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a36:	f004 fe69 	bl	800570c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a3a:	f7ff fd21 	bl	8000480 <main>

08000a3e <LoopForever>:

LoopForever:
  b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   r0, =_estack
 8000a40:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a4c:	08006190 	.word	0x08006190
  ldr r2, =_sbss
 8000a50:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a54:	20001cf4 	.word	0x20001cf4

08000a58 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_Init+0x3c>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Init+0x3c>)
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	0049      	lsls	r1, r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a76:	2003      	movs	r0, #3
 8000a78:	f7ff ff2a 	bl	80008d0 <HAL_InitTick>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e001      	b.n	8000a8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fe5a 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	781b      	ldrb	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x1c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x20>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	18d2      	adds	r2, r2, r3
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_IncTick+0x20>)
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	200001dc 	.word	0x200001dc

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <HAL_GetTick+0x10>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	200001dc 	.word	0x200001dc

08000ad4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	fe3fffff 	.word	0xfe3fffff

08000afc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	23e0      	movs	r3, #224	; 0xe0
 8000b0a:	045b      	lsls	r3, r3, #17
 8000b0c:	4013      	ands	r3, r2
}
 8000b0e:	0018      	movs	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b084      	sub	sp, #16
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	2104      	movs	r1, #4
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	2107      	movs	r1, #7
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	000a      	movs	r2, r1
 8000b32:	43d2      	mvns	r2, r2
 8000b34:	401a      	ands	r2, r3
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	2104      	movs	r1, #4
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	4099      	lsls	r1, r3
 8000b40:	000b      	movs	r3, r1
 8000b42:	431a      	orrs	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b004      	add	sp, #16
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	2104      	movs	r1, #4
 8000b62:	400a      	ands	r2, r1
 8000b64:	2107      	movs	r1, #7
 8000b66:	4091      	lsls	r1, r2
 8000b68:	000a      	movs	r2, r1
 8000b6a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2104      	movs	r1, #4
 8000b70:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000b72:	40da      	lsrs	r2, r3
 8000b74:	0013      	movs	r3, r2
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	23c0      	movs	r3, #192	; 0xc0
 8000b8c:	011b      	lsls	r3, r3, #4
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d101      	bne.n	8000b96 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000b92:	2301      	movs	r3, #1
 8000b94:	e000      	b.n	8000b98 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	211f      	movs	r1, #31
 8000bb4:	400a      	ands	r2, r1
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	0e9b      	lsrs	r3, r3, #26
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	4019      	ands	r1, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	201f      	movs	r0, #31
 8000bcc:	4003      	ands	r3, r0
 8000bce:	4099      	lsls	r1, r3
 8000bd0:	000b      	movs	r3, r1
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b004      	add	sp, #16
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	035b      	lsls	r3, r3, #13
 8000bf2:	0b5b      	lsrs	r3, r3, #13
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	0352      	lsls	r2, r2, #13
 8000c14:	0b52      	lsrs	r2, r2, #13
 8000c16:	43d2      	mvns	r2, r2
 8000c18:	401a      	ands	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	0212      	lsls	r2, r2, #8
 8000c3c:	43d2      	mvns	r2, r2
 8000c3e:	401a      	ands	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	400b      	ands	r3, r1
 8000c48:	4904      	ldr	r1, [pc, #16]	; (8000c5c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000c4a:	400b      	ands	r3, r1
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	07ffff00 	.word	0x07ffff00

08000c60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <LL_ADC_EnableInternalRegulator+0x24>)
 8000c6e:	4013      	ands	r3, r2
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	0552      	lsls	r2, r2, #21
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	6fffffe8 	.word	0x6fffffe8

08000c88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	055b      	lsls	r3, r3, #21
 8000c98:	401a      	ands	r2, r3
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	055b      	lsls	r3, r3, #21
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d101      	bne.n	8000ca6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e000      	b.n	8000ca8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <LL_ADC_Enable+0x20>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	7fffffe8 	.word	0x7fffffe8

08000cd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d101      	bne.n	8000cec <LL_ADC_IsEnabled+0x18>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e000      	b.n	8000cee <LL_ADC_IsEnabled+0x1a>
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <LL_ADC_REG_StartConversion+0x20>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	2204      	movs	r2, #4
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	7fffffe8 	.word	0x7fffffe8

08000d1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	2204      	movs	r2, #4
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d101      	bne.n	8000d34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d48:	231f      	movs	r3, #31
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e17f      	b.n	8001066 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10a      	bne.n	8000d84 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff fd09 	bl	8000788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2254      	movs	r2, #84	; 0x54
 8000d80:	2100      	movs	r1, #0
 8000d82:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ff7d 	bl	8000c88 <LL_ADC_IsInternalRegulatorEnabled>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d115      	bne.n	8000dbe <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff ff62 	bl	8000c60 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d9c:	4bb4      	ldr	r3, [pc, #720]	; (8001070 <HAL_ADC_Init+0x330>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	49b4      	ldr	r1, [pc, #720]	; (8001074 <HAL_ADC_Init+0x334>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff f9c2 	bl	800012c <__udivsi3>
 8000da8:	0003      	movs	r3, r0
 8000daa:	3301      	adds	r3, #1
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000db0:	e002      	b.n	8000db8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f9      	bne.n	8000db2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff ff60 	bl	8000c88 <LL_ADC_IsInternalRegulatorEnabled>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d10f      	bne.n	8000dec <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ddc:	2201      	movs	r2, #1
 8000dde:	431a      	orrs	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000de4:	231f      	movs	r3, #31
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff ff93 	bl	8000d1c <LL_ADC_REG_IsConversionOngoing>
 8000df6:	0003      	movs	r3, r0
 8000df8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	2210      	movs	r2, #16
 8000e00:	4013      	ands	r3, r2
 8000e02:	d000      	beq.n	8000e06 <HAL_ADC_Init+0xc6>
 8000e04:	e122      	b.n	800104c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d000      	beq.n	8000e0e <HAL_ADC_Init+0xce>
 8000e0c:	e11e      	b.n	800104c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	4a99      	ldr	r2, [pc, #612]	; (8001078 <HAL_ADC_Init+0x338>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	2202      	movs	r2, #2
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff ff56 	bl	8000cd4 <LL_ADC_IsEnabled>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d000      	beq.n	8000e2e <HAL_ADC_Init+0xee>
 8000e2c:	e0ad      	b.n	8000f8a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7e1b      	ldrb	r3, [r3, #24]
 8000e36:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e38:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7e5b      	ldrb	r3, [r3, #25]
 8000e3e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e40:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7e9b      	ldrb	r3, [r3, #26]
 8000e46:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e48:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <HAL_ADC_Init+0x118>
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	015b      	lsls	r3, r3, #5
 8000e56:	e000      	b.n	8000e5a <HAL_ADC_Init+0x11a>
 8000e58:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e5a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e60:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da04      	bge.n	8000e74 <HAL_ADC_Init+0x134>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	085b      	lsrs	r3, r3, #1
 8000e72:	e001      	b.n	8000e78 <HAL_ADC_Init+0x138>
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000e78:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	212c      	movs	r1, #44	; 0x2c
 8000e7e:	5c5b      	ldrb	r3, [r3, r1]
 8000e80:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e82:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	5c9b      	ldrb	r3, [r3, r2]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d115      	bne.n	8000ec0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7e9b      	ldrb	r3, [r3, #26]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d105      	bne.n	8000ea8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	2280      	movs	r2, #128	; 0x80
 8000ea0:	0252      	lsls	r2, r2, #9
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	e00b      	b.n	8000ec0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	2220      	movs	r2, #32
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb8:	2201      	movs	r2, #1
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00a      	beq.n	8000ede <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ecc:	23e0      	movs	r3, #224	; 0xe0
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	4a65      	ldr	r2, [pc, #404]	; (800107c <HAL_ADC_Init+0x33c>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	0019      	movs	r1, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	0f9b      	lsrs	r3, r3, #30
 8000efa:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f00:	4313      	orrs	r3, r2
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	223c      	movs	r2, #60	; 0x3c
 8000f0c:	5c9b      	ldrb	r3, [r3, r2]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d111      	bne.n	8000f36 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	0f9b      	lsrs	r3, r3, #30
 8000f18:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f1e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000f24:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000f2a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	2201      	movs	r2, #1
 8000f32:	4313      	orrs	r3, r2
 8000f34:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	4a50      	ldr	r2, [pc, #320]	; (8001080 <HAL_ADC_Init+0x340>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	0019      	movs	r1, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	23c0      	movs	r3, #192	; 0xc0
 8000f52:	061b      	lsls	r3, r3, #24
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d018      	beq.n	8000f8a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	05db      	lsls	r3, r3, #23
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d012      	beq.n	8000f8a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	061b      	lsls	r3, r3, #24
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d00c      	beq.n	8000f8a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000f70:	4b44      	ldr	r3, [pc, #272]	; (8001084 <HAL_ADC_Init+0x344>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a44      	ldr	r2, [pc, #272]	; (8001088 <HAL_ADC_Init+0x348>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	0019      	movs	r1, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	23f0      	movs	r3, #240	; 0xf0
 8000f80:	039b      	lsls	r3, r3, #14
 8000f82:	401a      	ands	r2, r3
 8000f84:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <HAL_ADC_Init+0x344>)
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f92:	001a      	movs	r2, r3
 8000f94:	2100      	movs	r1, #0
 8000f96:	f7ff fdbe 	bl	8000b16 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa2:	493a      	ldr	r1, [pc, #232]	; (800108c <HAL_ADC_Init+0x34c>)
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	f7ff fdb6 	bl	8000b16 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d109      	bne.n	8000fc6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	4249      	negs	r1, r1
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8000fc4:	e018      	b.n	8000ff8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691a      	ldr	r2, [r3, #16]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	039b      	lsls	r3, r3, #14
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d112      	bne.n	8000ff8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	221c      	movs	r2, #28
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	4252      	negs	r2, r2
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	0011      	movs	r1, r2
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	0018      	movs	r0, r3
 8001000:	f7ff fda6 	bl	8000b50 <LL_ADC_GetSamplingTimeCommonChannels>
 8001004:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800100a:	429a      	cmp	r2, r3
 800100c:	d10b      	bne.n	8001026 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001018:	2203      	movs	r2, #3
 800101a:	4393      	bics	r3, r2
 800101c:	2201      	movs	r2, #1
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001024:	e01c      	b.n	8001060 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	2212      	movs	r2, #18
 800102c:	4393      	bics	r3, r2
 800102e:	2210      	movs	r2, #16
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103a:	2201      	movs	r2, #1
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001042:	231f      	movs	r3, #31
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800104a:	e009      	b.n	8001060 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	2210      	movs	r2, #16
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001058:	231f      	movs	r3, #31
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001060:	231f      	movs	r3, #31
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	781b      	ldrb	r3, [r3, #0]
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b008      	add	sp, #32
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	20000000 	.word	0x20000000
 8001074:	00030d40 	.word	0x00030d40
 8001078:	fffffefd 	.word	0xfffffefd
 800107c:	fffe0201 	.word	0xfffe0201
 8001080:	1ffffc02 	.word	0x1ffffc02
 8001084:	40012708 	.word	0x40012708
 8001088:	ffc3ffff 	.word	0xffc3ffff
 800108c:	07ffff04 	.word	0x07ffff04

08001090 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff fe3d 	bl	8000d1c <LL_ADC_REG_IsConversionOngoing>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d135      	bne.n	8001112 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2254      	movs	r2, #84	; 0x54
 80010aa:	5c9b      	ldrb	r3, [r3, r2]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_Start+0x24>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e035      	b.n	8001120 <HAL_ADC_Start+0x90>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2254      	movs	r2, #84	; 0x54
 80010b8:	2101      	movs	r1, #1
 80010ba:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010bc:	250f      	movs	r5, #15
 80010be:	197c      	adds	r4, r7, r5
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	0018      	movs	r0, r3
 80010c4:	f000 faaa 	bl	800161c <ADC_Enable>
 80010c8:	0003      	movs	r3, r0
 80010ca:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010cc:	197b      	adds	r3, r7, r5
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d119      	bne.n	8001108 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <HAL_ADC_Start+0x98>)
 80010da:	4013      	ands	r3, r2
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	0052      	lsls	r2, r2, #1
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	221c      	movs	r2, #28
 80010f2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2254      	movs	r2, #84	; 0x54
 80010f8:	2100      	movs	r1, #0
 80010fa:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff fdf9 	bl	8000cf8 <LL_ADC_REG_StartConversion>
 8001106:	e008      	b.n	800111a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2254      	movs	r2, #84	; 0x54
 800110c:	2100      	movs	r1, #0
 800110e:	5499      	strb	r1, [r3, r2]
 8001110:	e003      	b.n	800111a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001112:	230f      	movs	r3, #15
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	2202      	movs	r2, #2
 8001118:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800111a:	230f      	movs	r3, #15
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	781b      	ldrb	r3, [r3, #0]
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b004      	add	sp, #16
 8001126:	bdb0      	pop	{r4, r5, r7, pc}
 8001128:	fffff0fe 	.word	0xfffff0fe

0800112c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	2b08      	cmp	r3, #8
 800113c:	d102      	bne.n	8001144 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800113e:	2308      	movs	r3, #8
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e00f      	b.n	8001164 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2201      	movs	r2, #1
 800114c:	4013      	ands	r3, r2
 800114e:	d007      	beq.n	8001160 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001154:	2220      	movs	r2, #32
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e072      	b.n	8001246 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001160:	2304      	movs	r3, #4
 8001162:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001164:	f7ff fcac 	bl	8000ac0 <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800116c:	e01f      	b.n	80011ae <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	d01c      	beq.n	80011ae <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001174:	f7ff fca4 	bl	8000ac0 <HAL_GetTick>
 8001178:	0002      	movs	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d302      	bcc.n	800118a <HAL_ADC_PollForConversion+0x5e>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d111      	bne.n	80011ae <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	d10b      	bne.n	80011ae <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	2204      	movs	r2, #4
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2254      	movs	r2, #84	; 0x54
 80011a6:	2100      	movs	r1, #0
 80011a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e04b      	b.n	8001246 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4013      	ands	r3, r2
 80011b8:	d0d9      	beq.n	800116e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff fcd6 	bl	8000b7e <LL_ADC_REG_IsTriggerSourceSWStart>
 80011d2:	1e03      	subs	r3, r0, #0
 80011d4:	d02e      	beq.n	8001234 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7e9b      	ldrb	r3, [r3, #26]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d12a      	bne.n	8001234 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2208      	movs	r2, #8
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d123      	bne.n	8001234 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff fd93 	bl	8000d1c <LL_ADC_REG_IsConversionOngoing>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d110      	bne.n	800121c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	210c      	movs	r1, #12
 8001206:	438a      	bics	r2, r1
 8001208:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_ADC_PollForConversion+0x124>)
 8001210:	4013      	ands	r3, r2
 8001212:	2201      	movs	r2, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	659a      	str	r2, [r3, #88]	; 0x58
 800121a:	e00b      	b.n	8001234 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	2220      	movs	r2, #32
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122c:	2201      	movs	r2, #1
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7e1b      	ldrb	r3, [r3, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	220c      	movs	r2, #12
 8001242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b004      	add	sp, #16
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	fffffefe 	.word	0xfffffefe

08001254 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001276:	2317      	movs	r3, #23
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2254      	movs	r2, #84	; 0x54
 8001286:	5c9b      	ldrb	r3, [r3, r2]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x24>
 800128c:	2302      	movs	r3, #2
 800128e:	e1c0      	b.n	8001612 <HAL_ADC_ConfigChannel+0x3a6>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2254      	movs	r2, #84	; 0x54
 8001294:	2101      	movs	r1, #1
 8001296:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff fd3d 	bl	8000d1c <LL_ADC_REG_IsConversionOngoing>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d000      	beq.n	80012a8 <HAL_ADC_ConfigChannel+0x3c>
 80012a6:	e1a3      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d100      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x46>
 80012b0:	e143      	b.n	800153a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	061b      	lsls	r3, r3, #24
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d004      	beq.n	80012c8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012c2:	4ac1      	ldr	r2, [pc, #772]	; (80015c8 <HAL_ADC_ConfigChannel+0x35c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d108      	bne.n	80012da <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0019      	movs	r1, r3
 80012d2:	0010      	movs	r0, r2
 80012d4:	f7ff fc84 	bl	8000be0 <LL_ADC_REG_SetSequencerChAdd>
 80012d8:	e0c9      	b.n	800146e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	211f      	movs	r1, #31
 80012e4:	400b      	ands	r3, r1
 80012e6:	210f      	movs	r1, #15
 80012e8:	4099      	lsls	r1, r3
 80012ea:	000b      	movs	r3, r1
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4013      	ands	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	035b      	lsls	r3, r3, #13
 80012f8:	0b5b      	lsrs	r3, r3, #13
 80012fa:	d105      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x9c>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0e9b      	lsrs	r3, r3, #26
 8001302:	221f      	movs	r2, #31
 8001304:	4013      	ands	r3, r2
 8001306:	e098      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2201      	movs	r2, #1
 800130e:	4013      	ands	r3, r2
 8001310:	d000      	beq.n	8001314 <HAL_ADC_ConfigChannel+0xa8>
 8001312:	e091      	b.n	8001438 <HAL_ADC_ConfigChannel+0x1cc>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2202      	movs	r2, #2
 800131a:	4013      	ands	r3, r2
 800131c:	d000      	beq.n	8001320 <HAL_ADC_ConfigChannel+0xb4>
 800131e:	e089      	b.n	8001434 <HAL_ADC_ConfigChannel+0x1c8>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2204      	movs	r2, #4
 8001326:	4013      	ands	r3, r2
 8001328:	d000      	beq.n	800132c <HAL_ADC_ConfigChannel+0xc0>
 800132a:	e081      	b.n	8001430 <HAL_ADC_ConfigChannel+0x1c4>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2208      	movs	r2, #8
 8001332:	4013      	ands	r3, r2
 8001334:	d000      	beq.n	8001338 <HAL_ADC_ConfigChannel+0xcc>
 8001336:	e079      	b.n	800142c <HAL_ADC_ConfigChannel+0x1c0>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2210      	movs	r2, #16
 800133e:	4013      	ands	r3, r2
 8001340:	d000      	beq.n	8001344 <HAL_ADC_ConfigChannel+0xd8>
 8001342:	e071      	b.n	8001428 <HAL_ADC_ConfigChannel+0x1bc>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2220      	movs	r2, #32
 800134a:	4013      	ands	r3, r2
 800134c:	d000      	beq.n	8001350 <HAL_ADC_ConfigChannel+0xe4>
 800134e:	e069      	b.n	8001424 <HAL_ADC_ConfigChannel+0x1b8>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	4013      	ands	r3, r2
 8001358:	d000      	beq.n	800135c <HAL_ADC_ConfigChannel+0xf0>
 800135a:	e061      	b.n	8001420 <HAL_ADC_ConfigChannel+0x1b4>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	4013      	ands	r3, r2
 8001364:	d000      	beq.n	8001368 <HAL_ADC_ConfigChannel+0xfc>
 8001366:	e059      	b.n	800141c <HAL_ADC_ConfigChannel+0x1b0>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4013      	ands	r3, r2
 8001372:	d151      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x1ac>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d149      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x1a8>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4013      	ands	r3, r2
 800138a:	d141      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1a4>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	4013      	ands	r3, r2
 8001396:	d139      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1a0>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	015b      	lsls	r3, r3, #5
 80013a0:	4013      	ands	r3, r2
 80013a2:	d131      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x19c>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	019b      	lsls	r3, r3, #6
 80013ac:	4013      	ands	r3, r2
 80013ae:	d129      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x198>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	01db      	lsls	r3, r3, #7
 80013b8:	4013      	ands	r3, r2
 80013ba:	d121      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x194>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	4013      	ands	r3, r2
 80013c6:	d119      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x190>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	025b      	lsls	r3, r3, #9
 80013d0:	4013      	ands	r3, r2
 80013d2:	d111      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x18c>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	d109      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x188>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	02db      	lsls	r3, r3, #11
 80013e8:	4013      	ands	r3, r2
 80013ea:	d001      	beq.n	80013f0 <HAL_ADC_ConfigChannel+0x184>
 80013ec:	2312      	movs	r3, #18
 80013ee:	e024      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 80013f0:	2300      	movs	r3, #0
 80013f2:	e022      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 80013f4:	2311      	movs	r3, #17
 80013f6:	e020      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 80013f8:	2310      	movs	r3, #16
 80013fa:	e01e      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 80013fc:	230f      	movs	r3, #15
 80013fe:	e01c      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001400:	230e      	movs	r3, #14
 8001402:	e01a      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001404:	230d      	movs	r3, #13
 8001406:	e018      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001408:	230c      	movs	r3, #12
 800140a:	e016      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 800140c:	230b      	movs	r3, #11
 800140e:	e014      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001410:	230a      	movs	r3, #10
 8001412:	e012      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001414:	2309      	movs	r3, #9
 8001416:	e010      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001418:	2308      	movs	r3, #8
 800141a:	e00e      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 800141c:	2307      	movs	r3, #7
 800141e:	e00c      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001420:	2306      	movs	r3, #6
 8001422:	e00a      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001424:	2305      	movs	r3, #5
 8001426:	e008      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001428:	2304      	movs	r3, #4
 800142a:	e006      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 800142c:	2303      	movs	r3, #3
 800142e:	e004      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001430:	2302      	movs	r3, #2
 8001432:	e002      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_ADC_ConfigChannel+0x1ce>
 8001438:	2300      	movs	r3, #0
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	6852      	ldr	r2, [r2, #4]
 800143e:	201f      	movs	r0, #31
 8001440:	4002      	ands	r2, r0
 8001442:	4093      	lsls	r3, r2
 8001444:	000a      	movs	r2, r1
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	429a      	cmp	r2, r3
 800145a:	d808      	bhi.n	800146e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	001a      	movs	r2, r3
 800146a:	f7ff fb99 	bl	8000ba0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	001a      	movs	r2, r3
 800147c:	f7ff fbd4 	bl	8000c28 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db00      	blt.n	800148a <HAL_ADC_ConfigChannel+0x21e>
 8001488:	e0bc      	b.n	8001604 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800148a:	4b50      	ldr	r3, [pc, #320]	; (80015cc <HAL_ADC_ConfigChannel+0x360>)
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff fb35 	bl	8000afc <LL_ADC_GetCommonPathInternalCh>
 8001492:	0003      	movs	r3, r0
 8001494:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a4d      	ldr	r2, [pc, #308]	; (80015d0 <HAL_ADC_ConfigChannel+0x364>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d122      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	041b      	lsls	r3, r3, #16
 80014a6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014a8:	d11d      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	0412      	lsls	r2, r2, #16
 80014b0:	4313      	orrs	r3, r2
 80014b2:	4a46      	ldr	r2, [pc, #280]	; (80015cc <HAL_ADC_ConfigChannel+0x360>)
 80014b4:	0019      	movs	r1, r3
 80014b6:	0010      	movs	r0, r2
 80014b8:	f7ff fb0c 	bl	8000ad4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014bc:	4b45      	ldr	r3, [pc, #276]	; (80015d4 <HAL_ADC_ConfigChannel+0x368>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4945      	ldr	r1, [pc, #276]	; (80015d8 <HAL_ADC_ConfigChannel+0x36c>)
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7fe fe32 	bl	800012c <__udivsi3>
 80014c8:	0003      	movs	r3, r0
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	0013      	movs	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	189b      	adds	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014d6:	e002      	b.n	80014de <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3b01      	subs	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f9      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014e4:	e08e      	b.n	8001604 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a3c      	ldr	r2, [pc, #240]	; (80015dc <HAL_ADC_ConfigChannel+0x370>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d10e      	bne.n	800150e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	045b      	lsls	r3, r3, #17
 80014f6:	4013      	ands	r3, r2
 80014f8:	d109      	bne.n	800150e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	0452      	lsls	r2, r2, #17
 8001500:	4313      	orrs	r3, r2
 8001502:	4a32      	ldr	r2, [pc, #200]	; (80015cc <HAL_ADC_ConfigChannel+0x360>)
 8001504:	0019      	movs	r1, r3
 8001506:	0010      	movs	r0, r2
 8001508:	f7ff fae4 	bl	8000ad4 <LL_ADC_SetCommonPathInternalCh>
 800150c:	e07a      	b.n	8001604 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a33      	ldr	r2, [pc, #204]	; (80015e0 <HAL_ADC_ConfigChannel+0x374>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d000      	beq.n	800151a <HAL_ADC_ConfigChannel+0x2ae>
 8001518:	e074      	b.n	8001604 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	03db      	lsls	r3, r3, #15
 8001520:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001522:	d000      	beq.n	8001526 <HAL_ADC_ConfigChannel+0x2ba>
 8001524:	e06e      	b.n	8001604 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	03d2      	lsls	r2, r2, #15
 800152c:	4313      	orrs	r3, r2
 800152e:	4a27      	ldr	r2, [pc, #156]	; (80015cc <HAL_ADC_ConfigChannel+0x360>)
 8001530:	0019      	movs	r1, r3
 8001532:	0010      	movs	r0, r2
 8001534:	f7ff face 	bl	8000ad4 <LL_ADC_SetCommonPathInternalCh>
 8001538:	e064      	b.n	8001604 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	429a      	cmp	r2, r3
 8001544:	d004      	beq.n	8001550 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800154a:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <HAL_ADC_ConfigChannel+0x35c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d107      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0019      	movs	r1, r3
 800155a:	0010      	movs	r0, r2
 800155c:	f7ff fb51 	bl	8000c02 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	da4d      	bge.n	8001604 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_ADC_ConfigChannel+0x360>)
 800156a:	0018      	movs	r0, r3
 800156c:	f7ff fac6 	bl	8000afc <LL_ADC_GetCommonPathInternalCh>
 8001570:	0003      	movs	r3, r0
 8001572:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <HAL_ADC_ConfigChannel+0x364>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d108      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <HAL_ADC_ConfigChannel+0x378>)
 8001582:	4013      	ands	r3, r2
 8001584:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_ADC_ConfigChannel+0x360>)
 8001586:	0019      	movs	r1, r3
 8001588:	0010      	movs	r0, r2
 800158a:	f7ff faa3 	bl	8000ad4 <LL_ADC_SetCommonPathInternalCh>
 800158e:	e039      	b.n	8001604 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a11      	ldr	r2, [pc, #68]	; (80015dc <HAL_ADC_ConfigChannel+0x370>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d108      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <HAL_ADC_ConfigChannel+0x37c>)
 800159e:	4013      	ands	r3, r2
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_ADC_ConfigChannel+0x360>)
 80015a2:	0019      	movs	r1, r3
 80015a4:	0010      	movs	r0, r2
 80015a6:	f7ff fa95 	bl	8000ad4 <LL_ADC_SetCommonPathInternalCh>
 80015aa:	e02b      	b.n	8001604 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <HAL_ADC_ConfigChannel+0x374>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d126      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <HAL_ADC_ConfigChannel+0x380>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	4a03      	ldr	r2, [pc, #12]	; (80015cc <HAL_ADC_ConfigChannel+0x360>)
 80015be:	0019      	movs	r1, r3
 80015c0:	0010      	movs	r0, r2
 80015c2:	f7ff fa87 	bl	8000ad4 <LL_ADC_SetCommonPathInternalCh>
 80015c6:	e01d      	b.n	8001604 <HAL_ADC_ConfigChannel+0x398>
 80015c8:	80000004 	.word	0x80000004
 80015cc:	40012708 	.word	0x40012708
 80015d0:	b0001000 	.word	0xb0001000
 80015d4:	20000000 	.word	0x20000000
 80015d8:	00030d40 	.word	0x00030d40
 80015dc:	b8004000 	.word	0xb8004000
 80015e0:	b4002000 	.word	0xb4002000
 80015e4:	ff7fffff 	.word	0xff7fffff
 80015e8:	feffffff 	.word	0xfeffffff
 80015ec:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	2220      	movs	r2, #32
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015fc:	2317      	movs	r3, #23
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2254      	movs	r2, #84	; 0x54
 8001608:	2100      	movs	r1, #0
 800160a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800160c:	2317      	movs	r3, #23
 800160e:	18fb      	adds	r3, r7, r3
 8001610:	781b      	ldrb	r3, [r3, #0]
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b006      	add	sp, #24
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)

0800161c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff fb51 	bl	8000cd4 <LL_ADC_IsEnabled>
 8001632:	1e03      	subs	r3, r0, #0
 8001634:	d000      	beq.n	8001638 <ADC_Enable+0x1c>
 8001636:	e069      	b.n	800170c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4a36      	ldr	r2, [pc, #216]	; (8001718 <ADC_Enable+0xfc>)
 8001640:	4013      	ands	r3, r2
 8001642:	d00d      	beq.n	8001660 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	2210      	movs	r2, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001654:	2201      	movs	r2, #1
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e056      	b.n	800170e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fb23 	bl	8000cb0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <ADC_Enable+0x100>)
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff fa45 	bl	8000afc <LL_ADC_GetCommonPathInternalCh>
 8001672:	0002      	movs	r2, r0
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	041b      	lsls	r3, r3, #16
 8001678:	4013      	ands	r3, r2
 800167a:	d00f      	beq.n	800169c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <ADC_Enable+0x104>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4928      	ldr	r1, [pc, #160]	; (8001724 <ADC_Enable+0x108>)
 8001682:	0018      	movs	r0, r3
 8001684:	f7fe fd52 	bl	800012c <__udivsi3>
 8001688:	0003      	movs	r3, r0
 800168a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800168c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800168e:	e002      	b.n	8001696 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3b01      	subs	r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f9      	bne.n	8001690 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7e5b      	ldrb	r3, [r3, #25]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d033      	beq.n	800170c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80016a4:	f7ff fa0c 	bl	8000ac0 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016ac:	e027      	b.n	80016fe <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	0018      	movs	r0, r3
 80016b4:	f7ff fb0e 	bl	8000cd4 <LL_ADC_IsEnabled>
 80016b8:	1e03      	subs	r3, r0, #0
 80016ba:	d104      	bne.n	80016c6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff faf5 	bl	8000cb0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016c6:	f7ff f9fb 	bl	8000ac0 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d914      	bls.n	80016fe <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	4013      	ands	r3, r2
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d00d      	beq.n	80016fe <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	2210      	movs	r2, #16
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	2201      	movs	r2, #1
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e007      	b.n	800170e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	4013      	ands	r3, r2
 8001708:	2b01      	cmp	r3, #1
 800170a:	d1d0      	bne.n	80016ae <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	80000017 	.word	0x80000017
 800171c:	40012708 	.word	0x40012708
 8001720:	20000000 	.word	0x20000000
 8001724:	00030d40 	.word	0x00030d40

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	0002      	movs	r2, r0
 8001730:	1dfb      	adds	r3, r7, #7
 8001732:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b7f      	cmp	r3, #127	; 0x7f
 800173a:	d809      	bhi.n	8001750 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	001a      	movs	r2, r3
 8001742:	231f      	movs	r3, #31
 8001744:	401a      	ands	r2, r3
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <__NVIC_EnableIRQ+0x30>)
 8001748:	2101      	movs	r1, #1
 800174a:	4091      	lsls	r1, r2
 800174c:	000a      	movs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	b002      	add	sp, #8
 8001756:	bd80      	pop	{r7, pc}
 8001758:	e000e100 	.word	0xe000e100

0800175c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	0002      	movs	r2, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b7f      	cmp	r3, #127	; 0x7f
 8001770:	d828      	bhi.n	80017c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001772:	4a2f      	ldr	r2, [pc, #188]	; (8001830 <__NVIC_SetPriority+0xd4>)
 8001774:	1dfb      	adds	r3, r7, #7
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b25b      	sxtb	r3, r3
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	33c0      	adds	r3, #192	; 0xc0
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	589b      	ldr	r3, [r3, r2]
 8001782:	1dfa      	adds	r2, r7, #7
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	0011      	movs	r1, r2
 8001788:	2203      	movs	r2, #3
 800178a:	400a      	ands	r2, r1
 800178c:	00d2      	lsls	r2, r2, #3
 800178e:	21ff      	movs	r1, #255	; 0xff
 8001790:	4091      	lsls	r1, r2
 8001792:	000a      	movs	r2, r1
 8001794:	43d2      	mvns	r2, r2
 8001796:	401a      	ands	r2, r3
 8001798:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	401a      	ands	r2, r3
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	0018      	movs	r0, r3
 80017a8:	2303      	movs	r3, #3
 80017aa:	4003      	ands	r3, r0
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b0:	481f      	ldr	r0, [pc, #124]	; (8001830 <__NVIC_SetPriority+0xd4>)
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	430a      	orrs	r2, r1
 80017bc:	33c0      	adds	r3, #192	; 0xc0
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017c2:	e031      	b.n	8001828 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <__NVIC_SetPriority+0xd8>)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	0019      	movs	r1, r3
 80017cc:	230f      	movs	r3, #15
 80017ce:	400b      	ands	r3, r1
 80017d0:	3b08      	subs	r3, #8
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3306      	adds	r3, #6
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	18d3      	adds	r3, r2, r3
 80017da:	3304      	adds	r3, #4
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	1dfa      	adds	r2, r7, #7
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	0011      	movs	r1, r2
 80017e4:	2203      	movs	r2, #3
 80017e6:	400a      	ands	r2, r1
 80017e8:	00d2      	lsls	r2, r2, #3
 80017ea:	21ff      	movs	r1, #255	; 0xff
 80017ec:	4091      	lsls	r1, r2
 80017ee:	000a      	movs	r2, r1
 80017f0:	43d2      	mvns	r2, r2
 80017f2:	401a      	ands	r2, r3
 80017f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	22ff      	movs	r2, #255	; 0xff
 80017fc:	401a      	ands	r2, r3
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	0018      	movs	r0, r3
 8001804:	2303      	movs	r3, #3
 8001806:	4003      	ands	r3, r0
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800180c:	4809      	ldr	r0, [pc, #36]	; (8001834 <__NVIC_SetPriority+0xd8>)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	001c      	movs	r4, r3
 8001814:	230f      	movs	r3, #15
 8001816:	4023      	ands	r3, r4
 8001818:	3b08      	subs	r3, #8
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	430a      	orrs	r2, r1
 800181e:	3306      	adds	r3, #6
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	18c3      	adds	r3, r0, r3
 8001824:	3304      	adds	r3, #4
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b003      	add	sp, #12
 800182e:	bd90      	pop	{r4, r7, pc}
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	210f      	movs	r1, #15
 8001844:	187b      	adds	r3, r7, r1
 8001846:	1c02      	adds	r2, r0, #0
 8001848:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	187b      	adds	r3, r7, r1
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	0011      	movs	r1, r2
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff ff81 	bl	800175c <__NVIC_SetPriority>
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b004      	add	sp, #16
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	0002      	movs	r2, r0
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b25b      	sxtb	r3, r3
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff ff57 	bl	8001728 <__NVIC_EnableIRQ>
}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e147      	b.n	8001b24 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4091      	lsls	r1, r2
 800189e:	000a      	movs	r2, r1
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d100      	bne.n	80018ac <HAL_GPIO_Init+0x28>
 80018aa:	e138      	b.n	8001b1e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2203      	movs	r2, #3
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d005      	beq.n	80018c4 <HAL_GPIO_Init+0x40>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2203      	movs	r2, #3
 80018be:	4013      	ands	r3, r2
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d130      	bne.n	8001926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	409a      	lsls	r2, r3
 80018d2:	0013      	movs	r3, r2
 80018d4:	43da      	mvns	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	409a      	lsls	r2, r3
 80018e6:	0013      	movs	r3, r2
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018fa:	2201      	movs	r2, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
 8001900:	0013      	movs	r3, r2
 8001902:	43da      	mvns	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	2201      	movs	r2, #1
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
 8001918:	0013      	movs	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2203      	movs	r2, #3
 800192c:	4013      	ands	r3, r2
 800192e:	2b03      	cmp	r3, #3
 8001930:	d017      	beq.n	8001962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	43da      	mvns	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2203      	movs	r2, #3
 8001968:	4013      	ands	r3, r2
 800196a:	2b02      	cmp	r3, #2
 800196c:	d123      	bne.n	80019b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	58d3      	ldr	r3, [r2, r3]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2207      	movs	r2, #7
 8001980:	4013      	ands	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	409a      	lsls	r2, r3
 8001988:	0013      	movs	r3, r2
 800198a:	43da      	mvns	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2107      	movs	r1, #7
 800199a:	400b      	ands	r3, r1
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	0092      	lsls	r2, r2, #2
 80019b2:	6939      	ldr	r1, [r7, #16]
 80019b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	43da      	mvns	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2203      	movs	r2, #3
 80019d4:	401a      	ands	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	23c0      	movs	r3, #192	; 0xc0
 80019f0:	029b      	lsls	r3, r3, #10
 80019f2:	4013      	ands	r3, r2
 80019f4:	d100      	bne.n	80019f8 <HAL_GPIO_Init+0x174>
 80019f6:	e092      	b.n	8001b1e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80019f8:	4a50      	ldr	r2, [pc, #320]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3318      	adds	r3, #24
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	589b      	ldr	r3, [r3, r2]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	220f      	movs	r2, #15
 8001a10:	409a      	lsls	r2, r3
 8001a12:	0013      	movs	r3, r2
 8001a14:	43da      	mvns	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	23a0      	movs	r3, #160	; 0xa0
 8001a20:	05db      	lsls	r3, r3, #23
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d013      	beq.n	8001a4e <HAL_GPIO_Init+0x1ca>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a45      	ldr	r2, [pc, #276]	; (8001b40 <HAL_GPIO_Init+0x2bc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00d      	beq.n	8001a4a <HAL_GPIO_Init+0x1c6>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a44      	ldr	r2, [pc, #272]	; (8001b44 <HAL_GPIO_Init+0x2c0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d007      	beq.n	8001a46 <HAL_GPIO_Init+0x1c2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a43      	ldr	r2, [pc, #268]	; (8001b48 <HAL_GPIO_Init+0x2c4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d101      	bne.n	8001a42 <HAL_GPIO_Init+0x1be>
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x1cc>
 8001a42:	2305      	movs	r3, #5
 8001a44:	e004      	b.n	8001a50 <HAL_GPIO_Init+0x1cc>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e002      	b.n	8001a50 <HAL_GPIO_Init+0x1cc>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_GPIO_Init+0x1cc>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	2103      	movs	r1, #3
 8001a54:	400a      	ands	r2, r1
 8001a56:	00d2      	lsls	r2, r2, #3
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001a60:	4936      	ldr	r1, [pc, #216]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3318      	adds	r3, #24
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a6e:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43da      	mvns	r2, r3
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	035b      	lsls	r3, r3, #13
 8001a86:	4013      	ands	r3, r2
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	039b      	lsls	r3, r3, #14
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001ac4:	2384      	movs	r3, #132	; 0x84
 8001ac6:	58d3      	ldr	r3, [r2, r3]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43da      	mvns	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	029b      	lsls	r3, r3, #10
 8001adc:	4013      	ands	r3, r2
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ae8:	4914      	ldr	r1, [pc, #80]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001aea:	2284      	movs	r2, #132	; 0x84
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	58d3      	ldr	r3, [r2, r3]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43da      	mvns	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	025b      	lsls	r3, r3, #9
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b16:	4909      	ldr	r1, [pc, #36]	; (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	40da      	lsrs	r2, r3
 8001b2c:	1e13      	subs	r3, r2, #0
 8001b2e:	d000      	beq.n	8001b32 <HAL_GPIO_Init+0x2ae>
 8001b30:	e6b0      	b.n	8001894 <HAL_GPIO_Init+0x10>
  }
}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b006      	add	sp, #24
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021800 	.word	0x40021800
 8001b40:	50000400 	.word	0x50000400
 8001b44:	50000800 	.word	0x50000800
 8001b48:	50000c00 	.word	0x50000c00

08001b4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d11f      	bne.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	0013      	movs	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	189b      	adds	r3, r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4912      	ldr	r1, [pc, #72]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f7fe fad4 	bl	800012c <__udivsi3>
 8001b84:	0003      	movs	r3, r0
 8001b86:	3301      	adds	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b8a:	e008      	b.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e001      	b.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e009      	b.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d0ed      	beq.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b004      	add	sp, #16
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	fffff9ff 	.word	0xfffff9ff
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	000f4240 	.word	0x000f4240

08001bcc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	23e0      	movs	r3, #224	; 0xe0
 8001bd6:	01db      	lsls	r3, r3, #7
 8001bd8:	4013      	ands	r3, r2
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e2f3      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_OscConfig+0x1e>
 8001c00:	e07c      	b.n	8001cfc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c02:	4bc3      	ldr	r3, [pc, #780]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2238      	movs	r2, #56	; 0x38
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c0c:	4bc0      	ldr	r3, [pc, #768]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2203      	movs	r2, #3
 8001c12:	4013      	ands	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b10      	cmp	r3, #16
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_OscConfig+0x3e>
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d002      	beq.n	8001c28 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d10b      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	4bb9      	ldr	r3, [pc, #740]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	029b      	lsls	r3, r3, #10
 8001c30:	4013      	ands	r3, r2
 8001c32:	d062      	beq.n	8001cfa <HAL_RCC_OscConfig+0x116>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d15e      	bne.n	8001cfa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e2ce      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	025b      	lsls	r3, r3, #9
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_OscConfig+0x78>
 8001c4c:	4bb0      	ldr	r3, [pc, #704]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4baf      	ldr	r3, [pc, #700]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	0249      	lsls	r1, r1, #9
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e020      	b.n	8001c9e <HAL_RCC_OscConfig+0xba>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	23a0      	movs	r3, #160	; 0xa0
 8001c62:	02db      	lsls	r3, r3, #11
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d10e      	bne.n	8001c86 <HAL_RCC_OscConfig+0xa2>
 8001c68:	4ba9      	ldr	r3, [pc, #676]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4ba8      	ldr	r3, [pc, #672]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	02c9      	lsls	r1, r1, #11
 8001c72:	430a      	orrs	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	4ba6      	ldr	r3, [pc, #664]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4ba5      	ldr	r3, [pc, #660]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	0249      	lsls	r1, r1, #9
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	e00b      	b.n	8001c9e <HAL_RCC_OscConfig+0xba>
 8001c86:	4ba2      	ldr	r3, [pc, #648]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4ba1      	ldr	r3, [pc, #644]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c8c:	49a1      	ldr	r1, [pc, #644]	; (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001c8e:	400a      	ands	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	4b9f      	ldr	r3, [pc, #636]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b9e      	ldr	r3, [pc, #632]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	499f      	ldr	r1, [pc, #636]	; (8001f18 <HAL_RCC_OscConfig+0x334>)
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d014      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7fe ff0b 	bl	8000ac0 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7fe ff06 	bl	8000ac0 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e28d      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc2:	4b93      	ldr	r3, [pc, #588]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	029b      	lsls	r3, r3, #10
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xcc>
 8001cce:	e015      	b.n	8001cfc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7fe fef6 	bl	8000ac0 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cda:	f7fe fef1 	bl	8000ac0 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b64      	cmp	r3, #100	; 0x64
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e278      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cec:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	029b      	lsls	r3, r3, #10
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0xf6>
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d100      	bne.n	8001d08 <HAL_RCC_OscConfig+0x124>
 8001d06:	e099      	b.n	8001e3c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d08:	4b81      	ldr	r3, [pc, #516]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2238      	movs	r2, #56	; 0x38
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d12:	4b7f      	ldr	r3, [pc, #508]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2203      	movs	r2, #3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d102      	bne.n	8001d28 <HAL_RCC_OscConfig+0x144>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d002      	beq.n	8001d2e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d135      	bne.n	8001d9a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2e:	4b78      	ldr	r3, [pc, #480]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4013      	ands	r3, r2
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x162>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e24b      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b72      	ldr	r3, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a74      	ldr	r2, [pc, #464]	; (8001f1c <HAL_RCC_OscConfig+0x338>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	021a      	lsls	r2, r3, #8
 8001d56:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d112      	bne.n	8001d88 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d62:	4b6b      	ldr	r3, [pc, #428]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a6e      	ldr	r2, [pc, #440]	; (8001f20 <HAL_RCC_OscConfig+0x33c>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d76:	4b66      	ldr	r3, [pc, #408]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0adb      	lsrs	r3, r3, #11
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4013      	ands	r3, r2
 8001d80:	4a68      	ldr	r2, [pc, #416]	; (8001f24 <HAL_RCC_OscConfig+0x340>)
 8001d82:	40da      	lsrs	r2, r3
 8001d84:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <HAL_RCC_OscConfig+0x344>)
 8001d86:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d88:	4b68      	ldr	r3, [pc, #416]	; (8001f2c <HAL_RCC_OscConfig+0x348>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7fe fd9f 	bl	80008d0 <HAL_InitTick>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d051      	beq.n	8001e3a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e221      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d030      	beq.n	8001e04 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001da2:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a5e      	ldr	r2, [pc, #376]	; (8001f20 <HAL_RCC_OscConfig+0x33c>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001db6:	4b56      	ldr	r3, [pc, #344]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	0049      	lsls	r1, r1, #1
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fe7c 	bl	8000ac0 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7fe fe77 	bl	8000ac0 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1fe      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4013      	ands	r3, r2
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a4a      	ldr	r2, [pc, #296]	; (8001f1c <HAL_RCC_OscConfig+0x338>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	021a      	lsls	r2, r3, #8
 8001dfc:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	e01b      	b.n	8001e3c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e0a:	4949      	ldr	r1, [pc, #292]	; (8001f30 <HAL_RCC_OscConfig+0x34c>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7fe fe56 	bl	8000ac0 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7fe fe51 	bl	8000ac0 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1d8      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4013      	ands	r3, r2
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x236>
 8001e38:	e000      	b.n	8001e3c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2208      	movs	r2, #8
 8001e42:	4013      	ands	r3, r2
 8001e44:	d047      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2238      	movs	r2, #56	; 0x38
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b18      	cmp	r3, #24
 8001e50:	d10a      	bne.n	8001e68 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e56:	2202      	movs	r2, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d03c      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x2f2>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d138      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e1ba      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d019      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fe20 	bl	8000ac0 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e86:	f7fe fe1b 	bl	8000ac0 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1a2      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d0f1      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2a2>
 8001ea2:	e018      	b.n	8001ed6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	438a      	bics	r2, r1
 8001eae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fe06 	bl	8000ac0 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eba:	f7fe fe01 	bl	8000ac0 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e188      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d1f1      	bne.n	8001eba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2204      	movs	r2, #4
 8001edc:	4013      	ands	r3, r2
 8001ede:	d100      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x2fe>
 8001ee0:	e0c6      	b.n	8002070 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	231f      	movs	r3, #31
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2238      	movs	r2, #56	; 0x38
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d11e      	bne.n	8001f34 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d100      	bne.n	8001f02 <HAL_RCC_OscConfig+0x31e>
 8001f00:	e0b6      	b.n	8002070 <HAL_RCC_OscConfig+0x48c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d000      	beq.n	8001f0c <HAL_RCC_OscConfig+0x328>
 8001f0a:	e0b1      	b.n	8002070 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e166      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	fffeffff 	.word	0xfffeffff
 8001f18:	fffbffff 	.word	0xfffbffff
 8001f1c:	ffff80ff 	.word	0xffff80ff
 8001f20:	ffffc7ff 	.word	0xffffc7ff
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004
 8001f30:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f34:	4bac      	ldr	r3, [pc, #688]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	055b      	lsls	r3, r3, #21
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_OscConfig+0x360>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x362>
 8001f44:	2300      	movs	r3, #0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d011      	beq.n	8001f6e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	4ba7      	ldr	r3, [pc, #668]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f4e:	4ba6      	ldr	r3, [pc, #664]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	0549      	lsls	r1, r1, #21
 8001f54:	430a      	orrs	r2, r1
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f58:	4ba3      	ldr	r3, [pc, #652]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f66:	231f      	movs	r3, #31
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6e:	4b9f      	ldr	r3, [pc, #636]	; (80021ec <HAL_RCC_OscConfig+0x608>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4013      	ands	r3, r2
 8001f78:	d11a      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7a:	4b9c      	ldr	r3, [pc, #624]	; (80021ec <HAL_RCC_OscConfig+0x608>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b9b      	ldr	r3, [pc, #620]	; (80021ec <HAL_RCC_OscConfig+0x608>)
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	0049      	lsls	r1, r1, #1
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f88:	f7fe fd9a 	bl	8000ac0 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f92:	f7fe fd95 	bl	8000ac0 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e11c      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa4:	4b91      	ldr	r3, [pc, #580]	; (80021ec <HAL_RCC_OscConfig+0x608>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4013      	ands	r3, r2
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3e2>
 8001fb8:	4b8b      	ldr	r3, [pc, #556]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001fba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fbc:	4b8a      	ldr	r3, [pc, #552]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x41c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x404>
 8001fce:	4b86      	ldr	r3, [pc, #536]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001fd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fd2:	4b85      	ldr	r3, [pc, #532]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fda:	4b83      	ldr	r3, [pc, #524]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001fdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fde:	4b82      	ldr	r3, [pc, #520]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0x41c>
 8001fe8:	4b7f      	ldr	r3, [pc, #508]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001fea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fec:	4b7e      	ldr	r3, [pc, #504]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001fee:	2101      	movs	r1, #1
 8001ff0:	438a      	bics	r2, r1
 8001ff2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ff4:	4b7c      	ldr	r3, [pc, #496]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001ff6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ff8:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	438a      	bics	r2, r1
 8001ffe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d014      	beq.n	8002032 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7fe fd5a 	bl	8000ac0 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002010:	e009      	b.n	8002026 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7fe fd55 	bl	8000ac0 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	4a74      	ldr	r2, [pc, #464]	; (80021f0 <HAL_RCC_OscConfig+0x60c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e0db      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002026:	4b70      	ldr	r3, [pc, #448]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x42e>
 8002030:	e013      	b.n	800205a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7fe fd45 	bl	8000ac0 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800203a:	e009      	b.n	8002050 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7fe fd40 	bl	8000ac0 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	4a6a      	ldr	r2, [pc, #424]	; (80021f0 <HAL_RCC_OscConfig+0x60c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e0c6      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002050:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	2202      	movs	r2, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800205a:	231f      	movs	r3, #31
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	4b60      	ldr	r3, [pc, #384]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8002066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002068:	4b5f      	ldr	r3, [pc, #380]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 800206a:	4962      	ldr	r1, [pc, #392]	; (80021f4 <HAL_RCC_OscConfig+0x610>)
 800206c:	400a      	ands	r2, r1
 800206e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d100      	bne.n	800207a <HAL_RCC_OscConfig+0x496>
 8002078:	e0b0      	b.n	80021dc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207a:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2238      	movs	r2, #56	; 0x38
 8002080:	4013      	ands	r3, r2
 8002082:	2b10      	cmp	r3, #16
 8002084:	d100      	bne.n	8002088 <HAL_RCC_OscConfig+0x4a4>
 8002086:	e078      	b.n	800217a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d153      	bne.n	8002138 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b55      	ldr	r3, [pc, #340]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8002096:	4958      	ldr	r1, [pc, #352]	; (80021f8 <HAL_RCC_OscConfig+0x614>)
 8002098:	400a      	ands	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe fd10 	bl	8000ac0 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe fd0b 	bl	8000ac0 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e092      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b8:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	049b      	lsls	r3, r3, #18
 80020c0:	4013      	ands	r3, r2
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c4:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	431a      	orrs	r2, r3
 80020ec:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	0449      	lsls	r1, r1, #17
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002100:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8002106:	2180      	movs	r1, #128	; 0x80
 8002108:	0549      	lsls	r1, r1, #21
 800210a:	430a      	orrs	r2, r1
 800210c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7fe fcd7 	bl	8000ac0 <HAL_GetTick>
 8002112:	0003      	movs	r3, r0
 8002114:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fcd2 	bl	8000ac0 <HAL_GetTick>
 800211c:	0002      	movs	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e059      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	049b      	lsls	r3, r3, #18
 8002132:	4013      	ands	r3, r2
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x534>
 8002136:	e051      	b.n	80021dc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 800213e:	492e      	ldr	r1, [pc, #184]	; (80021f8 <HAL_RCC_OscConfig+0x614>)
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fcbc 	bl	8000ac0 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7fe fcb7 	bl	8000ac0 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e03e      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	049b      	lsls	r3, r3, #18
 8002168:	4013      	ands	r3, r2
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8002172:	4923      	ldr	r1, [pc, #140]	; (8002200 <HAL_RCC_OscConfig+0x61c>)
 8002174:	400a      	ands	r2, r1
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	e030      	b.n	80021dc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e02b      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_RCC_OscConfig+0x604>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2203      	movs	r2, #3
 8002190:	401a      	ands	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	429a      	cmp	r2, r3
 8002198:	d11e      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2270      	movs	r2, #112	; 0x70
 800219e:	401a      	ands	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d117      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	23fe      	movs	r3, #254	; 0xfe
 80021ac:	01db      	lsls	r3, r3, #7
 80021ae:	401a      	ands	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d10e      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	23f8      	movs	r3, #248	; 0xf8
 80021be:	039b      	lsls	r3, r3, #14
 80021c0:	401a      	ands	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	0f5b      	lsrs	r3, r3, #29
 80021ce:	075a      	lsls	r2, r3, #29
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b008      	add	sp, #32
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	00001388 	.word	0x00001388
 80021f4:	efffffff 	.word	0xefffffff
 80021f8:	feffffff 	.word	0xfeffffff
 80021fc:	1fc1808c 	.word	0x1fc1808c
 8002200:	effefffc 	.word	0xeffefffc

08002204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0e9      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2207      	movs	r2, #7
 800221e:	4013      	ands	r3, r2
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d91e      	bls.n	8002264 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2207      	movs	r2, #7
 800222c:	4393      	bics	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	4b70      	ldr	r3, [pc, #448]	; (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002238:	f7fe fc42 	bl	8000ac0 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002240:	e009      	b.n	8002256 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002242:	f7fe fc3d 	bl	8000ac0 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	4a6a      	ldr	r2, [pc, #424]	; (80023f8 <HAL_RCC_ClockConfig+0x1f4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e0ca      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002256:	4b67      	ldr	r3, [pc, #412]	; (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2207      	movs	r2, #7
 800225c:	4013      	ands	r3, r2
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d1ee      	bne.n	8002242 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2202      	movs	r2, #2
 800226a:	4013      	ands	r3, r2
 800226c:	d015      	beq.n	800229a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2204      	movs	r2, #4
 8002274:	4013      	ands	r3, r2
 8002276:	d006      	beq.n	8002286 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002278:	4b60      	ldr	r3, [pc, #384]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	4b5f      	ldr	r3, [pc, #380]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 800227e:	21e0      	movs	r1, #224	; 0xe0
 8002280:	01c9      	lsls	r1, r1, #7
 8002282:	430a      	orrs	r2, r1
 8002284:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002286:	4b5d      	ldr	r3, [pc, #372]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4a5d      	ldr	r2, [pc, #372]	; (8002400 <HAL_RCC_ClockConfig+0x1fc>)
 800228c:	4013      	ands	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b59      	ldr	r3, [pc, #356]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002296:	430a      	orrs	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2201      	movs	r2, #1
 80022a0:	4013      	ands	r3, r2
 80022a2:	d057      	beq.n	8002354 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ac:	4b53      	ldr	r3, [pc, #332]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	029b      	lsls	r3, r3, #10
 80022b4:	4013      	ands	r3, r2
 80022b6:	d12b      	bne.n	8002310 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e097      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c4:	4b4d      	ldr	r3, [pc, #308]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	049b      	lsls	r3, r3, #18
 80022cc:	4013      	ands	r3, r2
 80022ce:	d11f      	bne.n	8002310 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e08b      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022dc:	4b47      	ldr	r3, [pc, #284]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4013      	ands	r3, r2
 80022e6:	d113      	bne.n	8002310 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e07f      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f4:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80022f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f8:	2202      	movs	r2, #2
 80022fa:	4013      	ands	r3, r2
 80022fc:	d108      	bne.n	8002310 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e074      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002302:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	2202      	movs	r2, #2
 8002308:	4013      	ands	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e06d      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002310:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2207      	movs	r2, #7
 8002316:	4393      	bics	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4b37      	ldr	r3, [pc, #220]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002320:	430a      	orrs	r2, r1
 8002322:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002324:	f7fe fbcc 	bl	8000ac0 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232c:	e009      	b.n	8002342 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232e:	f7fe fbc7 	bl	8000ac0 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	4a2f      	ldr	r2, [pc, #188]	; (80023f8 <HAL_RCC_ClockConfig+0x1f4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e054      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2238      	movs	r2, #56	; 0x38
 8002348:	401a      	ands	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	429a      	cmp	r2, r3
 8002352:	d1ec      	bne.n	800232e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2207      	movs	r2, #7
 800235a:	4013      	ands	r3, r2
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d21e      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2207      	movs	r2, #7
 8002368:	4393      	bics	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002374:	f7fe fba4 	bl	8000ac0 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800237c:	e009      	b.n	8002392 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237e:	f7fe fb9f 	bl	8000ac0 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	4a1b      	ldr	r2, [pc, #108]	; (80023f8 <HAL_RCC_ClockConfig+0x1f4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e02c      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2207      	movs	r2, #7
 8002398:	4013      	ands	r3, r2
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d1ee      	bne.n	800237e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2204      	movs	r2, #4
 80023a6:	4013      	ands	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	4a15      	ldr	r2, [pc, #84]	; (8002404 <HAL_RCC_ClockConfig+0x200>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	0019      	movs	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023be:	f000 f829 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023c2:	0001      	movs	r1, r0
 80023c4:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	220f      	movs	r2, #15
 80023cc:	401a      	ands	r2, r3
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_RCC_ClockConfig+0x204>)
 80023d0:	0092      	lsls	r2, r2, #2
 80023d2:	58d3      	ldr	r3, [r2, r3]
 80023d4:	221f      	movs	r2, #31
 80023d6:	4013      	ands	r3, r2
 80023d8:	000a      	movs	r2, r1
 80023da:	40da      	lsrs	r2, r3
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_ClockConfig+0x208>)
 80023de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_ClockConfig+0x20c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7fe fa73 	bl	80008d0 <HAL_InitTick>
 80023ea:	0003      	movs	r3, r0
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b004      	add	sp, #16
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40022000 	.word	0x40022000
 80023f8:	00001388 	.word	0x00001388
 80023fc:	40021000 	.word	0x40021000
 8002400:	fffff0ff 	.word	0xfffff0ff
 8002404:	ffff8fff 	.word	0xffff8fff
 8002408:	080060a4 	.word	0x080060a4
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800241a:	4b3c      	ldr	r3, [pc, #240]	; (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2238      	movs	r2, #56	; 0x38
 8002420:	4013      	ands	r3, r2
 8002422:	d10f      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002424:	4b39      	ldr	r3, [pc, #228]	; (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0adb      	lsrs	r3, r3, #11
 800242a:	2207      	movs	r2, #7
 800242c:	4013      	ands	r3, r2
 800242e:	2201      	movs	r2, #1
 8002430:	409a      	lsls	r2, r3
 8002432:	0013      	movs	r3, r2
 8002434:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002436:	6839      	ldr	r1, [r7, #0]
 8002438:	4835      	ldr	r0, [pc, #212]	; (8002510 <HAL_RCC_GetSysClockFreq+0xfc>)
 800243a:	f7fd fe77 	bl	800012c <__udivsi3>
 800243e:	0003      	movs	r3, r0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e05d      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002444:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2238      	movs	r2, #56	; 0x38
 800244a:	4013      	ands	r3, r2
 800244c:	2b08      	cmp	r3, #8
 800244e:	d102      	bne.n	8002456 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002450:	4b30      	ldr	r3, [pc, #192]	; (8002514 <HAL_RCC_GetSysClockFreq+0x100>)
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e054      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002456:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2238      	movs	r2, #56	; 0x38
 800245c:	4013      	ands	r3, r2
 800245e:	2b10      	cmp	r3, #16
 8002460:	d138      	bne.n	80024d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002462:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2203      	movs	r2, #3
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	2207      	movs	r2, #7
 8002474:	4013      	ands	r3, r2
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d10d      	bne.n	800249c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	4824      	ldr	r0, [pc, #144]	; (8002514 <HAL_RCC_GetSysClockFreq+0x100>)
 8002484:	f7fd fe52 	bl	800012c <__udivsi3>
 8002488:	0003      	movs	r3, r0
 800248a:	0019      	movs	r1, r3
 800248c:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	227f      	movs	r2, #127	; 0x7f
 8002494:	4013      	ands	r3, r2
 8002496:	434b      	muls	r3, r1
 8002498:	617b      	str	r3, [r7, #20]
        break;
 800249a:	e00d      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	481c      	ldr	r0, [pc, #112]	; (8002510 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024a0:	f7fd fe44 	bl	800012c <__udivsi3>
 80024a4:	0003      	movs	r3, r0
 80024a6:	0019      	movs	r1, r3
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	227f      	movs	r2, #127	; 0x7f
 80024b0:	4013      	ands	r3, r2
 80024b2:	434b      	muls	r3, r1
 80024b4:	617b      	str	r3, [r7, #20]
        break;
 80024b6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0f5b      	lsrs	r3, r3, #29
 80024be:	2207      	movs	r2, #7
 80024c0:	4013      	ands	r3, r2
 80024c2:	3301      	adds	r3, #1
 80024c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	6978      	ldr	r0, [r7, #20]
 80024ca:	f7fd fe2f 	bl	800012c <__udivsi3>
 80024ce:	0003      	movs	r3, r0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	e015      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024d4:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2238      	movs	r2, #56	; 0x38
 80024da:	4013      	ands	r3, r2
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d103      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2238      	movs	r2, #56	; 0x38
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b18      	cmp	r3, #24
 80024f2:	d103      	bne.n	80024fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024f4:	23fa      	movs	r3, #250	; 0xfa
 80024f6:	01db      	lsls	r3, r3, #7
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	e001      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002500:	693b      	ldr	r3, [r7, #16]
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b006      	add	sp, #24
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	40021000 	.word	0x40021000
 8002510:	00f42400 	.word	0x00f42400
 8002514:	007a1200 	.word	0x007a1200

08002518 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800251c:	4b02      	ldr	r3, [pc, #8]	; (8002528 <HAL_RCC_GetHCLKFreq+0x10>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	20000000 	.word	0x20000000

0800252c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800252c:	b5b0      	push	{r4, r5, r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002530:	f7ff fff2 	bl	8002518 <HAL_RCC_GetHCLKFreq>
 8002534:	0004      	movs	r4, r0
 8002536:	f7ff fb49 	bl	8001bcc <LL_RCC_GetAPB1Prescaler>
 800253a:	0003      	movs	r3, r0
 800253c:	0b1a      	lsrs	r2, r3, #12
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002540:	0092      	lsls	r2, r2, #2
 8002542:	58d3      	ldr	r3, [r2, r3]
 8002544:	221f      	movs	r2, #31
 8002546:	4013      	ands	r3, r2
 8002548:	40dc      	lsrs	r4, r3
 800254a:	0023      	movs	r3, r4
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bdb0      	pop	{r4, r5, r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	080060e4 	.word	0x080060e4

08002558 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2207      	movs	r2, #7
 8002566:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_RCC_GetClockConfig+0x4c>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2207      	movs	r2, #7
 800256e:	401a      	ands	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_GetClockConfig+0x4c>)
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	23f0      	movs	r3, #240	; 0xf0
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	401a      	ands	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_RCC_GetClockConfig+0x4c>)
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	23e0      	movs	r3, #224	; 0xe0
 8002588:	01db      	lsls	r3, r3, #7
 800258a:	401a      	ands	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetClockConfig+0x50>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2207      	movs	r2, #7
 8002596:	401a      	ands	r2, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	601a      	str	r2, [r3, #0]
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40022000 	.word	0x40022000

080025ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80025b4:	2313      	movs	r3, #19
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025bc:	2312      	movs	r3, #18
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	029b      	lsls	r3, r3, #10
 80025cc:	4013      	ands	r3, r2
 80025ce:	d100      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80025d0:	e0a3      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d2:	2011      	movs	r0, #17
 80025d4:	183b      	adds	r3, r7, r0
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025da:	4b86      	ldr	r3, [pc, #536]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	055b      	lsls	r3, r3, #21
 80025e2:	4013      	ands	r3, r2
 80025e4:	d110      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b83      	ldr	r3, [pc, #524]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ea:	4b82      	ldr	r3, [pc, #520]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	0549      	lsls	r1, r1, #21
 80025f0:	430a      	orrs	r2, r1
 80025f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80025f4:	4b7f      	ldr	r3, [pc, #508]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	055b      	lsls	r3, r3, #21
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002602:	183b      	adds	r3, r7, r0
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002608:	4b7b      	ldr	r3, [pc, #492]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b7a      	ldr	r3, [pc, #488]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	0049      	lsls	r1, r1, #1
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002616:	f7fe fa53 	bl	8000ac0 <HAL_GetTick>
 800261a:	0003      	movs	r3, r0
 800261c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800261e:	e00b      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002620:	f7fe fa4e 	bl	8000ac0 <HAL_GetTick>
 8002624:	0002      	movs	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d904      	bls.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800262e:	2313      	movs	r3, #19
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2203      	movs	r2, #3
 8002634:	701a      	strb	r2, [r3, #0]
        break;
 8002636:	e005      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4013      	ands	r3, r2
 8002642:	d0ed      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002644:	2313      	movs	r3, #19
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d154      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800264e:	4b69      	ldr	r3, [pc, #420]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002650:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002652:	23c0      	movs	r3, #192	; 0xc0
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4013      	ands	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d019      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	429a      	cmp	r2, r3
 8002668:	d014      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800266a:	4b62      	ldr	r3, [pc, #392]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	4a63      	ldr	r2, [pc, #396]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002670:	4013      	ands	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002674:	4b5f      	ldr	r3, [pc, #380]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002678:	4b5e      	ldr	r3, [pc, #376]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	0249      	lsls	r1, r1, #9
 800267e:	430a      	orrs	r2, r1
 8002680:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002682:	4b5c      	ldr	r3, [pc, #368]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002684:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002686:	4b5b      	ldr	r3, [pc, #364]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002688:	495d      	ldr	r1, [pc, #372]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800268a:	400a      	ands	r2, r1
 800268c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800268e:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2201      	movs	r2, #1
 8002698:	4013      	ands	r3, r2
 800269a:	d016      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fa10 	bl	8000ac0 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a4:	e00c      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fe fa0b 	bl	8000ac0 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	4a54      	ldr	r2, [pc, #336]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d904      	bls.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80026b6:	2313      	movs	r3, #19
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2203      	movs	r2, #3
 80026bc:	701a      	strb	r2, [r3, #0]
            break;
 80026be:	e004      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c0:	4b4c      	ldr	r3, [pc, #304]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d0ed      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80026ca:	2313      	movs	r3, #19
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d4:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	4a48      	ldr	r2, [pc, #288]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80026da:	4013      	ands	r3, r2
 80026dc:	0019      	movs	r1, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026e4:	430a      	orrs	r2, r1
 80026e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80026e8:	e00c      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026ea:	2312      	movs	r3, #18
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2213      	movs	r2, #19
 80026f0:	18ba      	adds	r2, r7, r2
 80026f2:	7812      	ldrb	r2, [r2, #0]
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e005      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f8:	2312      	movs	r3, #18
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	2213      	movs	r2, #19
 80026fe:	18ba      	adds	r2, r7, r2
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002704:	2311      	movs	r3, #17
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002712:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002714:	493c      	ldr	r1, [pc, #240]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002716:	400a      	ands	r2, r1
 8002718:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	4013      	ands	r3, r2
 8002722:	d009      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002724:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	2203      	movs	r2, #3
 800272a:	4393      	bics	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002734:	430a      	orrs	r2, r1
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2202      	movs	r2, #2
 800273e:	4013      	ands	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002742:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	220c      	movs	r2, #12
 8002748:	4393      	bics	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002752:	430a      	orrs	r2, r1
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2220      	movs	r2, #32
 800275c:	4013      	ands	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002760:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	4a29      	ldr	r2, [pc, #164]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	4013      	ands	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002770:	430a      	orrs	r2, r1
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	01db      	lsls	r3, r3, #7
 800277c:	4013      	ands	r3, r2
 800277e:	d015      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002780:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	0899      	lsrs	r1, r3, #2
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800278e:	430a      	orrs	r2, r1
 8002790:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	05db      	lsls	r3, r3, #23
 800279a:	429a      	cmp	r2, r3
 800279c:	d106      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	0249      	lsls	r1, r1, #9
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	4013      	ands	r3, r2
 80027b6:	d016      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027be:	4013      	ands	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	01db      	lsls	r3, r3, #7
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d106      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	0249      	lsls	r1, r1, #9
 80027e2:	430a      	orrs	r2, r1
 80027e4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80027e6:	2312      	movs	r3, #18
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	781b      	ldrb	r3, [r3, #0]
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b006      	add	sp, #24
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
 80027fc:	fffffcff 	.word	0xfffffcff
 8002800:	fffeffff 	.word	0xfffeffff
 8002804:	00001388 	.word	0x00001388
 8002808:	efffffff 	.word	0xefffffff
 800280c:	ffffcfff 	.word	0xffffcfff
 8002810:	ffff3fff 	.word	0xffff3fff

08002814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e04a      	b.n	80028bc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	223d      	movs	r2, #61	; 0x3d
 800282a:	5c9b      	ldrb	r3, [r3, r2]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	223c      	movs	r2, #60	; 0x3c
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 f841 	bl	80028c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	223d      	movs	r2, #61	; 0x3d
 8002846:	2102      	movs	r1, #2
 8002848:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	0019      	movs	r1, r3
 8002854:	0010      	movs	r0, r2
 8002856:	f000 f9e5 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2248      	movs	r2, #72	; 0x48
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223e      	movs	r2, #62	; 0x3e
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	223f      	movs	r2, #63	; 0x3f
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2240      	movs	r2, #64	; 0x40
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2241      	movs	r2, #65	; 0x41
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2242      	movs	r2, #66	; 0x42
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2243      	movs	r2, #67	; 0x43
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2244      	movs	r2, #68	; 0x44
 8002896:	2101      	movs	r1, #1
 8002898:	5499      	strb	r1, [r3, r2]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2245      	movs	r2, #69	; 0x45
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2246      	movs	r2, #70	; 0x46
 80028a6:	2101      	movs	r1, #1
 80028a8:	5499      	strb	r1, [r3, r2]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2247      	movs	r2, #71	; 0x47
 80028ae:	2101      	movs	r1, #1
 80028b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	223d      	movs	r2, #61	; 0x3d
 80028b6:	2101      	movs	r1, #1
 80028b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b002      	add	sp, #8
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b002      	add	sp, #8
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	223d      	movs	r2, #61	; 0x3d
 80028e0:	5c9b      	ldrb	r3, [r3, r2]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d001      	beq.n	80028ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e03c      	b.n	8002966 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	223d      	movs	r2, #61	; 0x3d
 80028f0:	2102      	movs	r1, #2
 80028f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2101      	movs	r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_TIM_Base_Start_IT+0x9c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_TIM_Base_Start_IT+0x4e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_TIM_Base_Start_IT+0xa0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d004      	beq.n	8002922 <HAL_TIM_Base_Start_IT+0x4e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_TIM_Base_Start_IT+0xa4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d116      	bne.n	8002950 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a14      	ldr	r2, [pc, #80]	; (800297c <HAL_TIM_Base_Start_IT+0xa8>)
 800292a:	4013      	ands	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d016      	beq.n	8002962 <HAL_TIM_Base_Start_IT+0x8e>
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	025b      	lsls	r3, r3, #9
 800293a:	429a      	cmp	r2, r3
 800293c:	d011      	beq.n	8002962 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	430a      	orrs	r2, r1
 800294c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294e:	e008      	b.n	8002962 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e000      	b.n	8002964 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002962:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b004      	add	sp, #16
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40000400 	.word	0x40000400
 8002978:	40014000 	.word	0x40014000
 800297c:	00010007 	.word	0x00010007

08002980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2202      	movs	r2, #2
 8002990:	4013      	ands	r3, r2
 8002992:	2b02      	cmp	r3, #2
 8002994:	d124      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2202      	movs	r2, #2
 800299e:	4013      	ands	r3, r2
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d11d      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2203      	movs	r2, #3
 80029aa:	4252      	negs	r2, r2
 80029ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2203      	movs	r2, #3
 80029bc:	4013      	ands	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 f916 	bl	8002bf4 <HAL_TIM_IC_CaptureCallback>
 80029c8:	e007      	b.n	80029da <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 f909 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f000 f915 	bl	8002c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2204      	movs	r2, #4
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d125      	bne.n	8002a3a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2204      	movs	r2, #4
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d11e      	bne.n	8002a3a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2205      	movs	r2, #5
 8002a02:	4252      	negs	r2, r2
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	23c0      	movs	r3, #192	; 0xc0
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4013      	ands	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 f8e9 	bl	8002bf4 <HAL_TIM_IC_CaptureCallback>
 8002a22:	e007      	b.n	8002a34 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f8dc 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 f8e8 	bl	8002c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2208      	movs	r2, #8
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d124      	bne.n	8002a92 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2208      	movs	r2, #8
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d11d      	bne.n	8002a92 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2209      	movs	r2, #9
 8002a5c:	4252      	negs	r2, r2
 8002a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2204      	movs	r2, #4
 8002a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 f8bd 	bl	8002bf4 <HAL_TIM_IC_CaptureCallback>
 8002a7a:	e007      	b.n	8002a8c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 f8b0 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 f8bc 	bl	8002c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d125      	bne.n	8002aec <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b10      	cmp	r3, #16
 8002aac:	d11e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2211      	movs	r2, #17
 8002ab4:	4252      	negs	r2, r2
 8002ab6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2208      	movs	r2, #8
 8002abc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	23c0      	movs	r3, #192	; 0xc0
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 f890 	bl	8002bf4 <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e007      	b.n	8002ae6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 f883 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f000 f88f 	bl	8002c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2201      	movs	r2, #1
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10f      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d108      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	4252      	negs	r2, r2
 8002b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7fd fdfb 	bl	8000710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d10f      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b80      	cmp	r3, #128	; 0x80
 8002b34:	d108      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2281      	movs	r2, #129	; 0x81
 8002b3c:	4252      	negs	r2, r2
 8002b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 f8ec 	bl	8002d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	401a      	ands	r2, r3
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d10e      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b80      	cmp	r3, #128	; 0x80
 8002b68:	d107      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <HAL_TIM_IRQHandler+0x260>)
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f8db 	bl	8002d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2240      	movs	r2, #64	; 0x40
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d10f      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2240      	movs	r2, #64	; 0x40
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b40      	cmp	r3, #64	; 0x40
 8002b94:	d108      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2241      	movs	r2, #65	; 0x41
 8002b9c:	4252      	negs	r2, r2
 8002b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 f836 	bl	8002c14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d108      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2221      	movs	r2, #33	; 0x21
 8002bca:	4252      	negs	r2, r2
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 f89d 	bl	8002d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b002      	add	sp, #8
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	fffffeff 	.word	0xfffffeff

08002be4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b002      	add	sp, #8
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <TIM_Base_SetConfig+0xd0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_Base_SetConfig+0x20>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a2e      	ldr	r2, [pc, #184]	; (8002cf8 <TIM_Base_SetConfig+0xd4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d108      	bne.n	8002c56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2270      	movs	r2, #112	; 0x70
 8002c48:	4393      	bics	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a26      	ldr	r2, [pc, #152]	; (8002cf4 <TIM_Base_SetConfig+0xd0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <TIM_Base_SetConfig+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <TIM_Base_SetConfig+0xd4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00f      	beq.n	8002c86 <TIM_Base_SetConfig+0x62>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <TIM_Base_SetConfig+0xd8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00b      	beq.n	8002c86 <TIM_Base_SetConfig+0x62>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <TIM_Base_SetConfig+0xdc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <TIM_Base_SetConfig+0x62>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <TIM_Base_SetConfig+0xe0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <TIM_Base_SetConfig+0x62>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <TIM_Base_SetConfig+0xe4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d108      	bne.n	8002c98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <TIM_Base_SetConfig+0xe8>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	4393      	bics	r3, r2
 8002c9e:	001a      	movs	r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a0c      	ldr	r2, [pc, #48]	; (8002cf4 <TIM_Base_SetConfig+0xd0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00b      	beq.n	8002cde <TIM_Base_SetConfig+0xba>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <TIM_Base_SetConfig+0xdc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <TIM_Base_SetConfig+0xba>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <TIM_Base_SetConfig+0xe0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_Base_SetConfig+0xba>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a0b      	ldr	r2, [pc, #44]	; (8002d08 <TIM_Base_SetConfig+0xe4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d103      	bne.n	8002ce6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	615a      	str	r2, [r3, #20]
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b004      	add	sp, #16
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40002000 	.word	0x40002000
 8002d00:	40014000 	.word	0x40014000
 8002d04:	40014400 	.word	0x40014400
 8002d08:	40014800 	.word	0x40014800
 8002d0c:	fffffcff 	.word	0xfffffcff

08002d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e046      	b.n	8002de0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2288      	movs	r2, #136	; 0x88
 8002d56:	589b      	ldr	r3, [r3, r2]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d107      	bne.n	8002d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2284      	movs	r2, #132	; 0x84
 8002d60:	2100      	movs	r1, #0
 8002d62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7fd fd52 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2288      	movs	r2, #136	; 0x88
 8002d70:	2124      	movs	r1, #36	; 0x24
 8002d72:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	438a      	bics	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 f8cc 	bl	8002f24 <UART_SetConfig>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e024      	b.n	8002de0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f000 fa63 	bl	800326c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	490d      	ldr	r1, [pc, #52]	; (8002de8 <HAL_UART_Init+0xa8>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	212a      	movs	r1, #42	; 0x2a
 8002dc2:	438a      	bics	r2, r1
 8002dc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f000 fafb 	bl	80033d4 <UART_CheckIdleState>
 8002dde:	0003      	movs	r3, r0
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b002      	add	sp, #8
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	ffffb7ff 	.word	0xffffb7ff

08002dec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	1dbb      	adds	r3, r7, #6
 8002dfa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2288      	movs	r2, #136	; 0x88
 8002e00:	589b      	ldr	r3, [r3, r2]
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d000      	beq.n	8002e08 <HAL_UART_Transmit+0x1c>
 8002e06:	e088      	b.n	8002f1a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_UART_Transmit+0x2a>
 8002e0e:	1dbb      	adds	r3, r7, #6
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e080      	b.n	8002f1c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	015b      	lsls	r3, r3, #5
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d109      	bne.n	8002e3a <HAL_UART_Transmit+0x4e>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d105      	bne.n	8002e3a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2201      	movs	r2, #1
 8002e32:	4013      	ands	r3, r2
 8002e34:	d001      	beq.n	8002e3a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e070      	b.n	8002f1c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2290      	movs	r2, #144	; 0x90
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2288      	movs	r2, #136	; 0x88
 8002e46:	2121      	movs	r1, #33	; 0x21
 8002e48:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e4a:	f7fd fe39 	bl	8000ac0 <HAL_GetTick>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1dba      	adds	r2, r7, #6
 8002e56:	2154      	movs	r1, #84	; 0x54
 8002e58:	8812      	ldrh	r2, [r2, #0]
 8002e5a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1dba      	adds	r2, r7, #6
 8002e60:	2156      	movs	r1, #86	; 0x56
 8002e62:	8812      	ldrh	r2, [r2, #0]
 8002e64:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	015b      	lsls	r3, r3, #5
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d108      	bne.n	8002e84 <HAL_UART_Transmit+0x98>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d104      	bne.n	8002e84 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	e003      	b.n	8002e8c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e8c:	e02c      	b.n	8002ee8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	0013      	movs	r3, r2
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	f000 fae8 	bl	8003470 <UART_WaitOnFlagUntilTimeout>
 8002ea0:	1e03      	subs	r3, r0, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e039      	b.n	8002f1c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10b      	bne.n	8002ec6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	05d2      	lsls	r2, r2, #23
 8002eba:	0dd2      	lsrs	r2, r2, #23
 8002ebc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	e007      	b.n	8002ed6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2256      	movs	r2, #86	; 0x56
 8002eda:	5a9b      	ldrh	r3, [r3, r2]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b299      	uxth	r1, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2256      	movs	r2, #86	; 0x56
 8002ee6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2256      	movs	r2, #86	; 0x56
 8002eec:	5a9b      	ldrh	r3, [r3, r2]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1cc      	bne.n	8002e8e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	0013      	movs	r3, r2
 8002efe:	2200      	movs	r2, #0
 8002f00:	2140      	movs	r1, #64	; 0x40
 8002f02:	f000 fab5 	bl	8003470 <UART_WaitOnFlagUntilTimeout>
 8002f06:	1e03      	subs	r3, r0, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e006      	b.n	8002f1c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2288      	movs	r2, #136	; 0x88
 8002f12:	2120      	movs	r1, #32
 8002f14:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b008      	add	sp, #32
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f2c:	231a      	movs	r3, #26
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4abc      	ldr	r2, [pc, #752]	; (8003244 <UART_SetConfig+0x320>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4ab7      	ldr	r2, [pc, #732]	; (8003248 <UART_SetConfig+0x324>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4aae      	ldr	r2, [pc, #696]	; (800324c <UART_SetConfig+0x328>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	220f      	movs	r2, #15
 8002fa8:	4393      	bics	r3, r2
 8002faa:	0019      	movs	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4aa4      	ldr	r2, [pc, #656]	; (8003250 <UART_SetConfig+0x32c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d127      	bne.n	8003012 <UART_SetConfig+0xee>
 8002fc2:	4ba4      	ldr	r3, [pc, #656]	; (8003254 <UART_SetConfig+0x330>)
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d017      	beq.n	8002ffe <UART_SetConfig+0xda>
 8002fce:	d81b      	bhi.n	8003008 <UART_SetConfig+0xe4>
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d00a      	beq.n	8002fea <UART_SetConfig+0xc6>
 8002fd4:	d818      	bhi.n	8003008 <UART_SetConfig+0xe4>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <UART_SetConfig+0xbc>
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d00a      	beq.n	8002ff4 <UART_SetConfig+0xd0>
 8002fde:	e013      	b.n	8003008 <UART_SetConfig+0xe4>
 8002fe0:	231b      	movs	r3, #27
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	e058      	b.n	800309c <UART_SetConfig+0x178>
 8002fea:	231b      	movs	r3, #27
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	2202      	movs	r2, #2
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e053      	b.n	800309c <UART_SetConfig+0x178>
 8002ff4:	231b      	movs	r3, #27
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e04e      	b.n	800309c <UART_SetConfig+0x178>
 8002ffe:	231b      	movs	r3, #27
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	2208      	movs	r2, #8
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	e049      	b.n	800309c <UART_SetConfig+0x178>
 8003008:	231b      	movs	r3, #27
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2210      	movs	r2, #16
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e044      	b.n	800309c <UART_SetConfig+0x178>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a90      	ldr	r2, [pc, #576]	; (8003258 <UART_SetConfig+0x334>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d127      	bne.n	800306c <UART_SetConfig+0x148>
 800301c:	4b8d      	ldr	r3, [pc, #564]	; (8003254 <UART_SetConfig+0x330>)
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	220c      	movs	r2, #12
 8003022:	4013      	ands	r3, r2
 8003024:	2b0c      	cmp	r3, #12
 8003026:	d017      	beq.n	8003058 <UART_SetConfig+0x134>
 8003028:	d81b      	bhi.n	8003062 <UART_SetConfig+0x13e>
 800302a:	2b08      	cmp	r3, #8
 800302c:	d00a      	beq.n	8003044 <UART_SetConfig+0x120>
 800302e:	d818      	bhi.n	8003062 <UART_SetConfig+0x13e>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <UART_SetConfig+0x116>
 8003034:	2b04      	cmp	r3, #4
 8003036:	d00a      	beq.n	800304e <UART_SetConfig+0x12a>
 8003038:	e013      	b.n	8003062 <UART_SetConfig+0x13e>
 800303a:	231b      	movs	r3, #27
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	e02b      	b.n	800309c <UART_SetConfig+0x178>
 8003044:	231b      	movs	r3, #27
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	2202      	movs	r2, #2
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	e026      	b.n	800309c <UART_SetConfig+0x178>
 800304e:	231b      	movs	r3, #27
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2204      	movs	r2, #4
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e021      	b.n	800309c <UART_SetConfig+0x178>
 8003058:	231b      	movs	r3, #27
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2208      	movs	r2, #8
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e01c      	b.n	800309c <UART_SetConfig+0x178>
 8003062:	231b      	movs	r3, #27
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	2210      	movs	r2, #16
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e017      	b.n	800309c <UART_SetConfig+0x178>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a7a      	ldr	r2, [pc, #488]	; (800325c <UART_SetConfig+0x338>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d104      	bne.n	8003080 <UART_SetConfig+0x15c>
 8003076:	231b      	movs	r3, #27
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e00d      	b.n	800309c <UART_SetConfig+0x178>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a76      	ldr	r2, [pc, #472]	; (8003260 <UART_SetConfig+0x33c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d104      	bne.n	8003094 <UART_SetConfig+0x170>
 800308a:	231b      	movs	r3, #27
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e003      	b.n	800309c <UART_SetConfig+0x178>
 8003094:	231b      	movs	r3, #27
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2210      	movs	r2, #16
 800309a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69da      	ldr	r2, [r3, #28]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d000      	beq.n	80030aa <UART_SetConfig+0x186>
 80030a8:	e065      	b.n	8003176 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80030aa:	231b      	movs	r3, #27
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d015      	beq.n	80030e0 <UART_SetConfig+0x1bc>
 80030b4:	dc18      	bgt.n	80030e8 <UART_SetConfig+0x1c4>
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d00d      	beq.n	80030d6 <UART_SetConfig+0x1b2>
 80030ba:	dc15      	bgt.n	80030e8 <UART_SetConfig+0x1c4>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <UART_SetConfig+0x1a2>
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d005      	beq.n	80030d0 <UART_SetConfig+0x1ac>
 80030c4:	e010      	b.n	80030e8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c6:	f7ff fa31 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 80030ca:	0003      	movs	r3, r0
 80030cc:	617b      	str	r3, [r7, #20]
        break;
 80030ce:	e012      	b.n	80030f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030d0:	4b64      	ldr	r3, [pc, #400]	; (8003264 <UART_SetConfig+0x340>)
 80030d2:	617b      	str	r3, [r7, #20]
        break;
 80030d4:	e00f      	b.n	80030f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030d6:	f7ff f99d 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80030da:	0003      	movs	r3, r0
 80030dc:	617b      	str	r3, [r7, #20]
        break;
 80030de:	e00a      	b.n	80030f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	617b      	str	r3, [r7, #20]
        break;
 80030e6:	e006      	b.n	80030f6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030ec:	231a      	movs	r3, #26
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
        break;
 80030f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d100      	bne.n	80030fe <UART_SetConfig+0x1da>
 80030fc:	e08d      	b.n	800321a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003102:	4b59      	ldr	r3, [pc, #356]	; (8003268 <UART_SetConfig+0x344>)
 8003104:	0052      	lsls	r2, r2, #1
 8003106:	5ad3      	ldrh	r3, [r2, r3]
 8003108:	0019      	movs	r1, r3
 800310a:	6978      	ldr	r0, [r7, #20]
 800310c:	f7fd f80e 	bl	800012c <__udivsi3>
 8003110:	0003      	movs	r3, r0
 8003112:	005a      	lsls	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	18d2      	adds	r2, r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	0019      	movs	r1, r3
 8003122:	0010      	movs	r0, r2
 8003124:	f7fd f802 	bl	800012c <__udivsi3>
 8003128:	0003      	movs	r3, r0
 800312a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b0f      	cmp	r3, #15
 8003130:	d91c      	bls.n	800316c <UART_SetConfig+0x248>
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	025b      	lsls	r3, r3, #9
 8003138:	429a      	cmp	r2, r3
 800313a:	d217      	bcs.n	800316c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	b29a      	uxth	r2, r3
 8003140:	200e      	movs	r0, #14
 8003142:	183b      	adds	r3, r7, r0
 8003144:	210f      	movs	r1, #15
 8003146:	438a      	bics	r2, r1
 8003148:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	b29b      	uxth	r3, r3
 8003150:	2207      	movs	r2, #7
 8003152:	4013      	ands	r3, r2
 8003154:	b299      	uxth	r1, r3
 8003156:	183b      	adds	r3, r7, r0
 8003158:	183a      	adds	r2, r7, r0
 800315a:	8812      	ldrh	r2, [r2, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	183a      	adds	r2, r7, r0
 8003166:	8812      	ldrh	r2, [r2, #0]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	e056      	b.n	800321a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800316c:	231a      	movs	r3, #26
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	2201      	movs	r2, #1
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	e051      	b.n	800321a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003176:	231b      	movs	r3, #27
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d015      	beq.n	80031ac <UART_SetConfig+0x288>
 8003180:	dc18      	bgt.n	80031b4 <UART_SetConfig+0x290>
 8003182:	2b04      	cmp	r3, #4
 8003184:	d00d      	beq.n	80031a2 <UART_SetConfig+0x27e>
 8003186:	dc15      	bgt.n	80031b4 <UART_SetConfig+0x290>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <UART_SetConfig+0x26e>
 800318c:	2b02      	cmp	r3, #2
 800318e:	d005      	beq.n	800319c <UART_SetConfig+0x278>
 8003190:	e010      	b.n	80031b4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003192:	f7ff f9cb 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8003196:	0003      	movs	r3, r0
 8003198:	617b      	str	r3, [r7, #20]
        break;
 800319a:	e012      	b.n	80031c2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319c:	4b31      	ldr	r3, [pc, #196]	; (8003264 <UART_SetConfig+0x340>)
 800319e:	617b      	str	r3, [r7, #20]
        break;
 80031a0:	e00f      	b.n	80031c2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a2:	f7ff f937 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80031a6:	0003      	movs	r3, r0
 80031a8:	617b      	str	r3, [r7, #20]
        break;
 80031aa:	e00a      	b.n	80031c2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	617b      	str	r3, [r7, #20]
        break;
 80031b2:	e006      	b.n	80031c2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031b8:	231a      	movs	r3, #26
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
        break;
 80031c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d028      	beq.n	800321a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031cc:	4b26      	ldr	r3, [pc, #152]	; (8003268 <UART_SetConfig+0x344>)
 80031ce:	0052      	lsls	r2, r2, #1
 80031d0:	5ad3      	ldrh	r3, [r2, r3]
 80031d2:	0019      	movs	r1, r3
 80031d4:	6978      	ldr	r0, [r7, #20]
 80031d6:	f7fc ffa9 	bl	800012c <__udivsi3>
 80031da:	0003      	movs	r3, r0
 80031dc:	001a      	movs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	18d2      	adds	r2, r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	0019      	movs	r1, r3
 80031ec:	0010      	movs	r0, r2
 80031ee:	f7fc ff9d 	bl	800012c <__udivsi3>
 80031f2:	0003      	movs	r3, r0
 80031f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b0f      	cmp	r3, #15
 80031fa:	d90a      	bls.n	8003212 <UART_SetConfig+0x2ee>
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	025b      	lsls	r3, r3, #9
 8003202:	429a      	cmp	r2, r3
 8003204:	d205      	bcs.n	8003212 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	b29a      	uxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60da      	str	r2, [r3, #12]
 8003210:	e003      	b.n	800321a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003212:	231a      	movs	r3, #26
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	226a      	movs	r2, #106	; 0x6a
 800321e:	2101      	movs	r1, #1
 8003220:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2268      	movs	r2, #104	; 0x68
 8003226:	2101      	movs	r1, #1
 8003228:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003236:	231a      	movs	r3, #26
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	781b      	ldrb	r3, [r3, #0]
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b008      	add	sp, #32
 8003242:	bd80      	pop	{r7, pc}
 8003244:	cfff69f3 	.word	0xcfff69f3
 8003248:	ffffcfff 	.word	0xffffcfff
 800324c:	11fff4ff 	.word	0x11fff4ff
 8003250:	40013800 	.word	0x40013800
 8003254:	40021000 	.word	0x40021000
 8003258:	40004400 	.word	0x40004400
 800325c:	40004800 	.word	0x40004800
 8003260:	40004c00 	.word	0x40004c00
 8003264:	00f42400 	.word	0x00f42400
 8003268:	08006104 	.word	0x08006104

0800326c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	2201      	movs	r2, #1
 800327a:	4013      	ands	r3, r2
 800327c:	d00b      	beq.n	8003296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a4a      	ldr	r2, [pc, #296]	; (80033b0 <UART_AdvFeatureConfig+0x144>)
 8003286:	4013      	ands	r3, r2
 8003288:	0019      	movs	r1, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	2202      	movs	r2, #2
 800329c:	4013      	ands	r3, r2
 800329e:	d00b      	beq.n	80032b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4a43      	ldr	r2, [pc, #268]	; (80033b4 <UART_AdvFeatureConfig+0x148>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	2204      	movs	r2, #4
 80032be:	4013      	ands	r3, r2
 80032c0:	d00b      	beq.n	80032da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4a3b      	ldr	r2, [pc, #236]	; (80033b8 <UART_AdvFeatureConfig+0x14c>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	0019      	movs	r1, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	2208      	movs	r2, #8
 80032e0:	4013      	ands	r3, r2
 80032e2:	d00b      	beq.n	80032fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4a34      	ldr	r2, [pc, #208]	; (80033bc <UART_AdvFeatureConfig+0x150>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	0019      	movs	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	2210      	movs	r2, #16
 8003302:	4013      	ands	r3, r2
 8003304:	d00b      	beq.n	800331e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <UART_AdvFeatureConfig+0x154>)
 800330e:	4013      	ands	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	2220      	movs	r2, #32
 8003324:	4013      	ands	r3, r2
 8003326:	d00b      	beq.n	8003340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <UART_AdvFeatureConfig+0x158>)
 8003330:	4013      	ands	r3, r2
 8003332:	0019      	movs	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	2240      	movs	r2, #64	; 0x40
 8003346:	4013      	ands	r3, r2
 8003348:	d01d      	beq.n	8003386 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <UART_AdvFeatureConfig+0x15c>)
 8003352:	4013      	ands	r3, r2
 8003354:	0019      	movs	r1, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	035b      	lsls	r3, r3, #13
 800336a:	429a      	cmp	r2, r3
 800336c:	d10b      	bne.n	8003386 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4a15      	ldr	r2, [pc, #84]	; (80033cc <UART_AdvFeatureConfig+0x160>)
 8003376:	4013      	ands	r3, r2
 8003378:	0019      	movs	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	4013      	ands	r3, r2
 800338e:	d00b      	beq.n	80033a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4a0e      	ldr	r2, [pc, #56]	; (80033d0 <UART_AdvFeatureConfig+0x164>)
 8003398:	4013      	ands	r3, r2
 800339a:	0019      	movs	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
  }
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	fffdffff 	.word	0xfffdffff
 80033b4:	fffeffff 	.word	0xfffeffff
 80033b8:	fffbffff 	.word	0xfffbffff
 80033bc:	ffff7fff 	.word	0xffff7fff
 80033c0:	ffffefff 	.word	0xffffefff
 80033c4:	ffffdfff 	.word	0xffffdfff
 80033c8:	ffefffff 	.word	0xffefffff
 80033cc:	ff9fffff 	.word	0xff9fffff
 80033d0:	fff7ffff 	.word	0xfff7ffff

080033d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af02      	add	r7, sp, #8
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2290      	movs	r2, #144	; 0x90
 80033e0:	2100      	movs	r1, #0
 80033e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033e4:	f7fd fb6c 	bl	8000ac0 <HAL_GetTick>
 80033e8:	0003      	movs	r3, r0
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2208      	movs	r2, #8
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d10c      	bne.n	8003414 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	0391      	lsls	r1, r2, #14
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4a1a      	ldr	r2, [pc, #104]	; (800346c <UART_CheckIdleState+0x98>)
 8003404:	9200      	str	r2, [sp, #0]
 8003406:	2200      	movs	r2, #0
 8003408:	f000 f832 	bl	8003470 <UART_WaitOnFlagUntilTimeout>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d001      	beq.n	8003414 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e026      	b.n	8003462 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2204      	movs	r2, #4
 800341c:	4013      	ands	r3, r2
 800341e:	2b04      	cmp	r3, #4
 8003420:	d10c      	bne.n	800343c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	03d1      	lsls	r1, r2, #15
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4a10      	ldr	r2, [pc, #64]	; (800346c <UART_CheckIdleState+0x98>)
 800342c:	9200      	str	r2, [sp, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	f000 f81e 	bl	8003470 <UART_WaitOnFlagUntilTimeout>
 8003434:	1e03      	subs	r3, r0, #0
 8003436:	d001      	beq.n	800343c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e012      	b.n	8003462 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2288      	movs	r2, #136	; 0x88
 8003440:	2120      	movs	r1, #32
 8003442:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	228c      	movs	r2, #140	; 0x8c
 8003448:	2120      	movs	r1, #32
 800344a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2284      	movs	r2, #132	; 0x84
 800345c:	2100      	movs	r1, #0
 800345e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b004      	add	sp, #16
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	01ffffff 	.word	0x01ffffff

08003470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b094      	sub	sp, #80	; 0x50
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	1dfb      	adds	r3, r7, #7
 800347e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003480:	e0a7      	b.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003484:	3301      	adds	r3, #1
 8003486:	d100      	bne.n	800348a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003488:	e0a3      	b.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fd fb19 	bl	8000ac0 <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800349a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800349c:	2b00      	cmp	r3, #0
 800349e:	d13f      	bne.n	8003520 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a0:	f3ef 8310 	mrs	r3, PRIMASK
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034a8:	647b      	str	r3, [r7, #68]	; 0x44
 80034aa:	2301      	movs	r3, #1
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	f383 8810 	msr	PRIMASK, r3
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	494e      	ldr	r1, [pc, #312]	; (80035fc <UART_WaitOnFlagUntilTimeout+0x18c>)
 80034c2:	400a      	ands	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	f383 8810 	msr	PRIMASK, r3
}
 80034d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d2:	f3ef 8310 	mrs	r3, PRIMASK
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80034d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034da:	643b      	str	r3, [r7, #64]	; 0x40
 80034dc:	2301      	movs	r3, #1
 80034de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	f383 8810 	msr	PRIMASK, r3
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2101      	movs	r1, #1
 80034f4:	438a      	bics	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fe:	f383 8810 	msr	PRIMASK, r3
}
 8003502:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2288      	movs	r2, #136	; 0x88
 8003508:	2120      	movs	r1, #32
 800350a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	228c      	movs	r2, #140	; 0x8c
 8003510:	2120      	movs	r1, #32
 8003512:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2284      	movs	r2, #132	; 0x84
 8003518:	2100      	movs	r1, #0
 800351a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e069      	b.n	80035f4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2204      	movs	r2, #4
 8003528:	4013      	ands	r3, r2
 800352a:	d052      	beq.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	401a      	ands	r2, r3
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	429a      	cmp	r2, r3
 800353e:	d148      	bne.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354a:	f3ef 8310 	mrs	r3, PRIMASK
 800354e:	613b      	str	r3, [r7, #16]
  return(result);
 8003550:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003554:	2301      	movs	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f383 8810 	msr	PRIMASK, r3
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4924      	ldr	r1, [pc, #144]	; (80035fc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800356c:	400a      	ands	r2, r1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003572:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f383 8810 	msr	PRIMASK, r3
}
 800357a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357c:	f3ef 8310 	mrs	r3, PRIMASK
 8003580:	61fb      	str	r3, [r7, #28]
  return(result);
 8003582:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003584:	64bb      	str	r3, [r7, #72]	; 0x48
 8003586:	2301      	movs	r3, #1
 8003588:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f383 8810 	msr	PRIMASK, r3
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2101      	movs	r1, #1
 800359e:	438a      	bics	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2288      	movs	r2, #136	; 0x88
 80035b2:	2120      	movs	r1, #32
 80035b4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	228c      	movs	r2, #140	; 0x8c
 80035ba:	2120      	movs	r1, #32
 80035bc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2290      	movs	r2, #144	; 0x90
 80035c2:	2120      	movs	r1, #32
 80035c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2284      	movs	r2, #132	; 0x84
 80035ca:	2100      	movs	r1, #0
 80035cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e010      	b.n	80035f4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	4013      	ands	r3, r2
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	425a      	negs	r2, r3
 80035e2:	4153      	adcs	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	001a      	movs	r2, r3
 80035e8:	1dfb      	adds	r3, r7, #7
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d100      	bne.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x182>
 80035f0:	e747      	b.n	8003482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b014      	add	sp, #80	; 0x50
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	fffffe5f 	.word	0xfffffe5f

08003600 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2284      	movs	r2, #132	; 0x84
 800360c:	5c9b      	ldrb	r3, [r3, r2]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_UARTEx_DisableFifoMode+0x16>
 8003612:	2302      	movs	r3, #2
 8003614:	e027      	b.n	8003666 <HAL_UARTEx_DisableFifoMode+0x66>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2284      	movs	r2, #132	; 0x84
 800361a:	2101      	movs	r1, #1
 800361c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2288      	movs	r2, #136	; 0x88
 8003622:	2124      	movs	r1, #36	; 0x24
 8003624:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2101      	movs	r1, #1
 800363a:	438a      	bics	r2, r1
 800363c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003642:	4013      	ands	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2288      	movs	r2, #136	; 0x88
 8003658:	2120      	movs	r1, #32
 800365a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2284      	movs	r2, #132	; 0x84
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	b004      	add	sp, #16
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	dfffffff 	.word	0xdfffffff

08003674 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2284      	movs	r2, #132	; 0x84
 8003682:	5c9b      	ldrb	r3, [r3, r2]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e02e      	b.n	80036ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2284      	movs	r2, #132	; 0x84
 8003690:	2101      	movs	r1, #1
 8003692:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2288      	movs	r2, #136	; 0x88
 8003698:	2124      	movs	r1, #36	; 0x24
 800369a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2101      	movs	r1, #1
 80036b0:	438a      	bics	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	08d9      	lsrs	r1, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	0018      	movs	r0, r3
 80036cc:	f000 f854 	bl	8003778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2288      	movs	r2, #136	; 0x88
 80036dc:	2120      	movs	r1, #32
 80036de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2284      	movs	r2, #132	; 0x84
 80036e4:	2100      	movs	r1, #0
 80036e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b004      	add	sp, #16
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2284      	movs	r2, #132	; 0x84
 8003702:	5c9b      	ldrb	r3, [r3, r2]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003708:	2302      	movs	r3, #2
 800370a:	e02f      	b.n	800376c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2284      	movs	r2, #132	; 0x84
 8003710:	2101      	movs	r1, #1
 8003712:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2288      	movs	r2, #136	; 0x88
 8003718:	2124      	movs	r1, #36	; 0x24
 800371a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2101      	movs	r1, #1
 8003730:	438a      	bics	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800373c:	4013      	ands	r3, r2
 800373e:	0019      	movs	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	0018      	movs	r0, r3
 800374e:	f000 f813 	bl	8003778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2288      	movs	r2, #136	; 0x88
 800375e:	2120      	movs	r1, #32
 8003760:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2284      	movs	r2, #132	; 0x84
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b004      	add	sp, #16
 8003772:	bd80      	pop	{r7, pc}
 8003774:	f1ffffff 	.word	0xf1ffffff

08003778 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003784:	2b00      	cmp	r3, #0
 8003786:	d108      	bne.n	800379a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	226a      	movs	r2, #106	; 0x6a
 800378c:	2101      	movs	r1, #1
 800378e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2268      	movs	r2, #104	; 0x68
 8003794:	2101      	movs	r1, #1
 8003796:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003798:	e043      	b.n	8003822 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800379a:	260f      	movs	r6, #15
 800379c:	19bb      	adds	r3, r7, r6
 800379e:	2208      	movs	r2, #8
 80037a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037a2:	200e      	movs	r0, #14
 80037a4:	183b      	adds	r3, r7, r0
 80037a6:	2208      	movs	r2, #8
 80037a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	0e5b      	lsrs	r3, r3, #25
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	240d      	movs	r4, #13
 80037b6:	193b      	adds	r3, r7, r4
 80037b8:	2107      	movs	r1, #7
 80037ba:	400a      	ands	r2, r1
 80037bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	0f5b      	lsrs	r3, r3, #29
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	250c      	movs	r5, #12
 80037ca:	197b      	adds	r3, r7, r5
 80037cc:	2107      	movs	r1, #7
 80037ce:	400a      	ands	r2, r1
 80037d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037d2:	183b      	adds	r3, r7, r0
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	197a      	adds	r2, r7, r5
 80037d8:	7812      	ldrb	r2, [r2, #0]
 80037da:	4914      	ldr	r1, [pc, #80]	; (800382c <UARTEx_SetNbDataToProcess+0xb4>)
 80037dc:	5c8a      	ldrb	r2, [r1, r2]
 80037de:	435a      	muls	r2, r3
 80037e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80037e2:	197b      	adds	r3, r7, r5
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <UARTEx_SetNbDataToProcess+0xb8>)
 80037e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037ea:	0019      	movs	r1, r3
 80037ec:	f7fc fd28 	bl	8000240 <__divsi3>
 80037f0:	0003      	movs	r3, r0
 80037f2:	b299      	uxth	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	226a      	movs	r2, #106	; 0x6a
 80037f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037fa:	19bb      	adds	r3, r7, r6
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	193a      	adds	r2, r7, r4
 8003800:	7812      	ldrb	r2, [r2, #0]
 8003802:	490a      	ldr	r1, [pc, #40]	; (800382c <UARTEx_SetNbDataToProcess+0xb4>)
 8003804:	5c8a      	ldrb	r2, [r1, r2]
 8003806:	435a      	muls	r2, r3
 8003808:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800380a:	193b      	adds	r3, r7, r4
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	4a08      	ldr	r2, [pc, #32]	; (8003830 <UARTEx_SetNbDataToProcess+0xb8>)
 8003810:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003812:	0019      	movs	r1, r3
 8003814:	f7fc fd14 	bl	8000240 <__divsi3>
 8003818:	0003      	movs	r3, r0
 800381a:	b299      	uxth	r1, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2268      	movs	r2, #104	; 0x68
 8003820:	5299      	strh	r1, [r3, r2]
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b005      	add	sp, #20
 8003828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	0800611c 	.word	0x0800611c
 8003830:	08006124 	.word	0x08006124

08003834 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3308      	adds	r3, #8
 8003840:	001a      	movs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	4252      	negs	r2, r2
 800384c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3308      	adds	r3, #8
 8003852:	001a      	movs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3308      	adds	r3, #8
 800385c:	001a      	movs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b002      	add	sp, #8
 800386e:	bd80      	pop	{r7, pc}

08003870 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b002      	add	sp, #8
 8003884:	bd80      	pop	{r7, pc}

08003886 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3301      	adds	r3, #1
 800389a:	d103      	bne.n	80038a4 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e00c      	b.n	80038be <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3308      	adds	r3, #8
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	e002      	b.n	80038b2 <vListInsert+0x2c>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d2f6      	bcs.n	80038ac <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b004      	add	sp, #16
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6892      	ldr	r2, [r2, #8]
 8003908:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6852      	ldr	r2, [r2, #4]
 8003912:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d103      	bne.n	8003926 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1e5a      	subs	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b004      	add	sp, #16
 8003940:	bd80      	pop	{r7, pc}

08003942 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003942:	b5b0      	push	{r4, r5, r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800394c:	2301      	movs	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <xQueueGenericReset+0x1c>
 800395a:	b672      	cpsid	i
 800395c:	e7fe      	b.n	800395c <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d100      	bne.n	8003966 <xQueueGenericReset+0x24>
 8003964:	e06a      	b.n	8003a3c <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800396a:	2b00      	cmp	r3, #0
 800396c:	d066      	beq.n	8003a3c <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	2400      	movs	r4, #0
 8003978:	0c15      	lsrs	r5, r2, #16
 800397a:	0c19      	lsrs	r1, r3, #16
 800397c:	b2a8      	uxth	r0, r5
 800397e:	2800      	cmp	r0, #0
 8003980:	d104      	bne.n	800398c <xQueueGenericReset+0x4a>
 8003982:	b288      	uxth	r0, r1
 8003984:	2800      	cmp	r0, #0
 8003986:	d013      	beq.n	80039b0 <xQueueGenericReset+0x6e>
 8003988:	1c10      	adds	r0, r2, #0
 800398a:	e004      	b.n	8003996 <xQueueGenericReset+0x54>
 800398c:	b289      	uxth	r1, r1
 800398e:	2900      	cmp	r1, #0
 8003990:	d10d      	bne.n	80039ae <xQueueGenericReset+0x6c>
 8003992:	1c29      	adds	r1, r5, #0
 8003994:	1c18      	adds	r0, r3, #0
 8003996:	b292      	uxth	r2, r2
 8003998:	b29b      	uxth	r3, r3
 800399a:	435a      	muls	r2, r3
 800399c:	b283      	uxth	r3, r0
 800399e:	b289      	uxth	r1, r1
 80039a0:	434b      	muls	r3, r1
 80039a2:	0c12      	lsrs	r2, r2, #16
 80039a4:	189b      	adds	r3, r3, r2
 80039a6:	141b      	asrs	r3, r3, #16
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d000      	beq.n	80039b0 <xQueueGenericReset+0x6e>
 80039ae:	2401      	movs	r4, #1
 80039b0:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80039b2:	d143      	bne.n	8003a3c <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 80039b4:	f001 fc6c 	bl	8005290 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	434b      	muls	r3, r1
 80039c6:	18d2      	adds	r2, r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2200      	movs	r2, #0
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	1e59      	subs	r1, r3, #1
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	434b      	muls	r3, r1
 80039ea:	18d2      	adds	r2, r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2244      	movs	r2, #68	; 0x44
 80039f4:	21ff      	movs	r1, #255	; 0xff
 80039f6:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2245      	movs	r2, #69	; 0x45
 80039fc:	21ff      	movs	r1, #255	; 0xff
 80039fe:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d013      	beq.n	8003a36 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	3310      	adds	r3, #16
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 fec2 	bl	800479c <xTaskRemoveFromEventList>
 8003a18:	1e03      	subs	r3, r0, #0
 8003a1a:	d00c      	beq.n	8003a36 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003a1c:	f001 fc28 	bl	8005270 <vPortYield>
 8003a20:	e009      	b.n	8003a36 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3310      	adds	r3, #16
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7ff ff04 	bl	8003834 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	3324      	adds	r3, #36	; 0x24
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7ff feff 	bl	8003834 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003a36:	f001 fc3d 	bl	80052b4 <vPortExitCritical>
 8003a3a:	e001      	b.n	8003a40 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <xQueueGenericReset+0x108>
 8003a46:	b672      	cpsid	i
 8003a48:	e7fe      	b.n	8003a48 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b004      	add	sp, #16
 8003a52:	bdb0      	pop	{r4, r5, r7, pc}

08003a54 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a56:	b08b      	sub	sp, #44	; 0x2c
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	1dfb      	adds	r3, r7, #7
 8003a60:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d047      	beq.n	8003afc <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	0c19      	lsrs	r1, r3, #16
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1c1e      	adds	r6, r3, #0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	1c15      	adds	r5, r2, #0
 8003a7e:	b28a      	uxth	r2, r1
 8003a80:	2a00      	cmp	r2, #0
 8003a82:	d105      	bne.n	8003a90 <xQueueGenericCreate+0x3c>
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	2a00      	cmp	r2, #0
 8003a88:	d013      	beq.n	8003ab2 <xQueueGenericCreate+0x5e>
 8003a8a:	1c19      	adds	r1, r3, #0
 8003a8c:	1c34      	adds	r4, r6, #0
 8003a8e:	e003      	b.n	8003a98 <xQueueGenericCreate+0x44>
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <xQueueGenericCreate+0x5c>
 8003a96:	1c2c      	adds	r4, r5, #0
 8003a98:	b2b3      	uxth	r3, r6
 8003a9a:	b2aa      	uxth	r2, r5
 8003a9c:	435a      	muls	r2, r3
 8003a9e:	b2a3      	uxth	r3, r4
 8003aa0:	b289      	uxth	r1, r1
 8003aa2:	434b      	muls	r3, r1
 8003aa4:	0c12      	lsrs	r2, r2, #16
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	141b      	asrs	r3, r3, #16
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d000      	beq.n	8003ab2 <xQueueGenericCreate+0x5e>
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003ab4:	d122      	bne.n	8003afc <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003abc:	3351      	adds	r3, #81	; 0x51
 8003abe:	d81d      	bhi.n	8003afc <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	4353      	muls	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	3350      	adds	r3, #80	; 0x50
 8003acc:	0018      	movs	r0, r3
 8003ace:	f001 fc77 	bl	80053c0 <pvPortMalloc>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d014      	beq.n	8003b06 <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3350      	adds	r3, #80	; 0x50
 8003ae4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ae6:	1dfb      	adds	r3, r7, #7
 8003ae8:	781c      	ldrb	r4, [r3, #0]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	0023      	movs	r3, r4
 8003af6:	f000 f80b 	bl	8003b10 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003afa:	e004      	b.n	8003b06 <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <xQueueGenericCreate+0xb2>
 8003b02:	b672      	cpsid	i
 8003b04:	e7fe      	b.n	8003b04 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003b06:	69fb      	ldr	r3, [r7, #28]
    }
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b009      	add	sp, #36	; 0x24
 8003b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b10 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	1cfb      	adds	r3, r7, #3
 8003b20:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d103      	bne.n	8003b30 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e002      	b.n	8003b36 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2101      	movs	r1, #1
 8003b46:	0018      	movs	r0, r3
 8003b48:	f7ff fefb 	bl	8003942 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	1cfa      	adds	r2, r7, #3
 8003b50:	214c      	movs	r1, #76	; 0x4c
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b08a      	sub	sp, #40	; 0x28
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <xQueueReceive+0x1e>
 8003b78:	b672      	cpsid	i
 8003b7a:	e7fe      	b.n	8003b7a <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <xQueueReceive+0x2c>
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <xQueueReceive+0x30>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <xQueueReceive+0x32>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <xQueueReceive+0x3a>
 8003b94:	b672      	cpsid	i
 8003b96:	e7fe      	b.n	8003b96 <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b98:	f000 ffea 	bl	8004b70 <xTaskGetSchedulerState>
 8003b9c:	1e03      	subs	r3, r0, #0
 8003b9e:	d102      	bne.n	8003ba6 <xQueueReceive+0x48>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <xQueueReceive+0x4c>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <xQueueReceive+0x4e>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <xQueueReceive+0x56>
 8003bb0:	b672      	cpsid	i
 8003bb2:	e7fe      	b.n	8003bb2 <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003bb4:	f001 fb6c 	bl	8005290 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01a      	beq.n	8003bfa <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	0011      	movs	r1, r2
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 f87c 	bl	8003cc8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	1e5a      	subs	r2, r3, #1
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	3310      	adds	r3, #16
 8003be4:	0018      	movs	r0, r3
 8003be6:	f000 fdd9 	bl	800479c <xTaskRemoveFromEventList>
 8003bea:	1e03      	subs	r3, r0, #0
 8003bec:	d001      	beq.n	8003bf2 <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003bee:	f001 fb3f 	bl	8005270 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003bf2:	f001 fb5f 	bl	80052b4 <vPortExitCritical>
                return pdPASS;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e062      	b.n	8003cc0 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003c00:	f001 fb58 	bl	80052b4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e05b      	b.n	8003cc0 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c0e:	2314      	movs	r3, #20
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	0018      	movs	r0, r3
 8003c14:	f000 fe8c 	bl	8004930 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003c1c:	f001 fb4a 	bl	80052b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003c20:	f000 fb00 	bl	8004224 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c24:	f001 fb34 	bl	8005290 <vPortEnterCritical>
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	2244      	movs	r2, #68	; 0x44
 8003c2c:	5c9b      	ldrb	r3, [r3, r2]
 8003c2e:	b25b      	sxtb	r3, r3
 8003c30:	3301      	adds	r3, #1
 8003c32:	d103      	bne.n	8003c3c <xQueueReceive+0xde>
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	2244      	movs	r2, #68	; 0x44
 8003c38:	2100      	movs	r1, #0
 8003c3a:	5499      	strb	r1, [r3, r2]
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	2245      	movs	r2, #69	; 0x45
 8003c40:	5c9b      	ldrb	r3, [r3, r2]
 8003c42:	b25b      	sxtb	r3, r3
 8003c44:	3301      	adds	r3, #1
 8003c46:	d103      	bne.n	8003c50 <xQueueReceive+0xf2>
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	2245      	movs	r2, #69	; 0x45
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	5499      	strb	r1, [r3, r2]
 8003c50:	f001 fb30 	bl	80052b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c54:	1d3a      	adds	r2, r7, #4
 8003c56:	2314      	movs	r3, #20
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 fe7b 	bl	8004958 <xTaskCheckForTimeOut>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d11e      	bne.n	8003ca4 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f000 f8b1 	bl	8003dd0 <prvIsQueueEmpty>
 8003c6e:	1e03      	subs	r3, r0, #0
 8003c70:	d011      	beq.n	8003c96 <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	3324      	adds	r3, #36	; 0x24
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	0011      	movs	r1, r2
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f000 fd32 	bl	80046e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	0018      	movs	r0, r3
 8003c84:	f000 f846 	bl	8003d14 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003c88:	f000 fad8 	bl	800423c <xTaskResumeAll>
 8003c8c:	1e03      	subs	r3, r0, #0
 8003c8e:	d191      	bne.n	8003bb4 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 8003c90:	f001 faee 	bl	8005270 <vPortYield>
 8003c94:	e78e      	b.n	8003bb4 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f000 f83b 	bl	8003d14 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003c9e:	f000 facd 	bl	800423c <xTaskResumeAll>
 8003ca2:	e787      	b.n	8003bb4 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f000 f834 	bl	8003d14 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003cac:	f000 fac6 	bl	800423c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 f88c 	bl	8003dd0 <prvIsQueueEmpty>
 8003cb8:	1e03      	subs	r3, r0, #0
 8003cba:	d100      	bne.n	8003cbe <xQueueReceive+0x160>
 8003cbc:	e77a      	b.n	8003bb4 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003cbe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b00a      	add	sp, #40	; 0x28
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d018      	beq.n	8003d0c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	18d2      	adds	r2, r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d303      	bcc.n	8003cfc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68d9      	ldr	r1, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	0018      	movs	r0, r3
 8003d08:	f001 fd24 	bl	8005754 <memcpy>
    }
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b002      	add	sp, #8
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003d1c:	f001 fab8 	bl	8005290 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003d20:	230f      	movs	r3, #15
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	2145      	movs	r1, #69	; 0x45
 8003d28:	5c52      	ldrb	r2, [r2, r1]
 8003d2a:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d2c:	e013      	b.n	8003d56 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3324      	adds	r3, #36	; 0x24
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 fd2e 	bl	800479c <xTaskRemoveFromEventList>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d001      	beq.n	8003d48 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003d44:	f000 fe5c 	bl	8004a00 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003d48:	210f      	movs	r1, #15
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	187b      	adds	r3, r7, r1
 8003d54:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d56:	230f      	movs	r3, #15
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b25b      	sxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	dce5      	bgt.n	8003d2e <prvUnlockQueue+0x1a>
 8003d62:	e000      	b.n	8003d66 <prvUnlockQueue+0x52>
                    break;
 8003d64:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2245      	movs	r2, #69	; 0x45
 8003d6a:	21ff      	movs	r1, #255	; 0xff
 8003d6c:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003d6e:	f001 faa1 	bl	80052b4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003d72:	f001 fa8d 	bl	8005290 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003d76:	230e      	movs	r3, #14
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	2144      	movs	r1, #68	; 0x44
 8003d7e:	5c52      	ldrb	r2, [r2, r1]
 8003d80:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d82:	e013      	b.n	8003dac <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d016      	beq.n	8003dba <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3310      	adds	r3, #16
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 fd03 	bl	800479c <xTaskRemoveFromEventList>
 8003d96:	1e03      	subs	r3, r0, #0
 8003d98:	d001      	beq.n	8003d9e <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8003d9a:	f000 fe31 	bl	8004a00 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003d9e:	210e      	movs	r1, #14
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dac:	230e      	movs	r3, #14
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b25b      	sxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	dce5      	bgt.n	8003d84 <prvUnlockQueue+0x70>
 8003db8:	e000      	b.n	8003dbc <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8003dba:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2244      	movs	r2, #68	; 0x44
 8003dc0:	21ff      	movs	r1, #255	; 0xff
 8003dc2:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003dc4:	f001 fa76 	bl	80052b4 <vPortExitCritical>
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b004      	add	sp, #16
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003dd8:	f001 fa5a 	bl	8005290 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e001      	b.n	8003dee <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003dee:	f001 fa61 	bl	80052b4 <vPortExitCritical>

    return xReturn;
 8003df2:	68fb      	ldr	r3, [r7, #12]
}
 8003df4:	0018      	movs	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b004      	add	sp, #16
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <vQueueAddToRegistry+0x18>
 8003e10:	b672      	cpsid	i
 8003e12:	e7fe      	b.n	8003e12 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d025      	beq.n	8003e66 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e01f      	b.n	8003e60 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003e20:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <vQueueAddToRegistry+0x84>)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	18d3      	adds	r3, r2, r3
 8003e28:	3304      	adds	r3, #4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d105      	bne.n	8003e3e <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	00da      	lsls	r2, r3, #3
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <vQueueAddToRegistry+0x84>)
 8003e38:	18d3      	adds	r3, r2, r3
 8003e3a:	60bb      	str	r3, [r7, #8]
                    break;
 8003e3c:	e013      	b.n	8003e66 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <vQueueAddToRegistry+0x5e>
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <vQueueAddToRegistry+0x84>)
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	00d2      	lsls	r2, r2, #3
 8003e4a:	58d3      	ldr	r3, [r2, r3]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	00da      	lsls	r2, r3, #3
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <vQueueAddToRegistry+0x84>)
 8003e56:	18d3      	adds	r3, r2, r3
 8003e58:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b07      	cmp	r3, #7
 8003e64:	d9dc      	bls.n	8003e20 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b004      	add	sp, #16
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	200001e0 	.word	0x200001e0

08003e84 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003e94:	f001 f9fc 	bl	8005290 <vPortEnterCritical>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2244      	movs	r2, #68	; 0x44
 8003e9c:	5c9b      	ldrb	r3, [r3, r2]
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	d103      	bne.n	8003eac <vQueueWaitForMessageRestricted+0x28>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2244      	movs	r2, #68	; 0x44
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	5499      	strb	r1, [r3, r2]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2245      	movs	r2, #69	; 0x45
 8003eb0:	5c9b      	ldrb	r3, [r3, r2]
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	d103      	bne.n	8003ec0 <vQueueWaitForMessageRestricted+0x3c>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2245      	movs	r2, #69	; 0x45
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	5499      	strb	r1, [r3, r2]
 8003ec0:	f001 f9f8 	bl	80052b4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3324      	adds	r3, #36	; 0x24
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 fc23 	bl	8004720 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7ff ff19 	bl	8003d14 <prvUnlockQueue>
    }
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b006      	add	sp, #24
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003eea:	b590      	push	{r4, r7, lr}
 8003eec:	b08d      	sub	sp, #52	; 0x34
 8003eee:	af04      	add	r7, sp, #16
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	1dbb      	adds	r3, r7, #6
 8003ef8:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003efa:	1dbb      	adds	r3, r7, #6
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	0018      	movs	r0, r3
 8003f02:	f001 fa5d 	bl	80053c0 <pvPortMalloc>
 8003f06:	0003      	movs	r3, r0
 8003f08:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d016      	beq.n	8003f3e <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f10:	2054      	movs	r0, #84	; 0x54
 8003f12:	f001 fa55 	bl	80053c0 <pvPortMalloc>
 8003f16:	0003      	movs	r3, r0
 8003f18:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2254      	movs	r2, #84	; 0x54
 8003f24:	2100      	movs	r1, #0
 8003f26:	0018      	movs	r0, r3
 8003f28:	f001 fc1d 	bl	8005766 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
 8003f32:	e006      	b.n	8003f42 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	0018      	movs	r0, r3
 8003f38:	f001 faea 	bl	8005510 <vPortFree>
 8003f3c:	e001      	b.n	8003f42 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d016      	beq.n	8003f76 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f48:	1dbb      	adds	r3, r7, #6
 8003f4a:	881a      	ldrh	r2, [r3, #0]
 8003f4c:	683c      	ldr	r4, [r7, #0]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	2300      	movs	r3, #0
 8003f54:	9303      	str	r3, [sp, #12]
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	9302      	str	r3, [sp, #8]
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5c:	9301      	str	r3, [sp, #4]
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	0023      	movs	r3, r4
 8003f64:	f000 f810 	bl	8003f88 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 f88c 	bl	8004088 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003f70:	2301      	movs	r3, #1
 8003f72:	61bb      	str	r3, [r7, #24]
 8003f74:	e002      	b.n	8003f7c <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f76:	2301      	movs	r3, #1
 8003f78:	425b      	negs	r3, r3
 8003f7a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
    }
 8003f7e:	0018      	movs	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b009      	add	sp, #36	; 0x24
 8003f84:	bd90      	pop	{r4, r7, pc}
	...

08003f88 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	21a5      	movs	r1, #165	; 0xa5
 8003fa2:	f001 fbe0 	bl	8005766 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4935      	ldr	r1, [pc, #212]	; (8004084 <prvInitialiseNewTask+0xfc>)
 8003fae:	468c      	mov	ip, r1
 8003fb0:	4463      	add	r3, ip
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	18d3      	adds	r3, r2, r3
 8003fb6:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2207      	movs	r2, #7
 8003fbc:	4393      	bics	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2207      	movs	r2, #7
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d001      	beq.n	8003fcc <prvInitialiseNewTask+0x44>
 8003fc8:	b672      	cpsid	i
 8003fca:	e7fe      	b.n	8003fca <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d01f      	beq.n	8004012 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e013      	b.n	8004000 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	18d3      	adds	r3, r2, r3
 8003fde:	7818      	ldrb	r0, [r3, #0]
 8003fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe2:	2134      	movs	r1, #52	; 0x34
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	18d3      	adds	r3, r2, r3
 8003fe8:	185b      	adds	r3, r3, r1
 8003fea:	1c02      	adds	r2, r0, #0
 8003fec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	18d3      	adds	r3, r2, r3
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d006      	beq.n	8004008 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b04      	cmp	r3, #4
 8004004:	d9e8      	bls.n	8003fd8 <prvInitialiseNewTask+0x50>
 8004006:	e000      	b.n	800400a <prvInitialiseNewTask+0x82>
            {
                break;
 8004008:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	2238      	movs	r2, #56	; 0x38
 800400e:	2100      	movs	r1, #0
 8004010:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	2b04      	cmp	r3, #4
 8004016:	d901      	bls.n	800401c <prvInitialiseNewTask+0x94>
 8004018:	b672      	cpsid	i
 800401a:	e7fe      	b.n	800401a <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	2b04      	cmp	r3, #4
 8004020:	d901      	bls.n	8004026 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004022:	2304      	movs	r3, #4
 8004024:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	6a3a      	ldr	r2, [r7, #32]
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	6a3a      	ldr	r2, [r7, #32]
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	3304      	adds	r3, #4
 8004036:	0018      	movs	r0, r3
 8004038:	f7ff fc1a 	bl	8003870 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	3318      	adds	r3, #24
 8004040:	0018      	movs	r0, r3
 8004042:	f7ff fc15 	bl	8003870 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2205      	movs	r2, #5
 8004050:	1ad2      	subs	r2, r2, r3
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	0018      	movs	r0, r3
 8004064:	f001 f87c 	bl	8005160 <pxPortInitialiseStack>
 8004068:	0002      	movs	r2, r0
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004078:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b006      	add	sp, #24
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	3fffffff 	.word	0x3fffffff

08004088 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004090:	f001 f8fe 	bl	8005290 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004094:	4b3d      	ldr	r3, [pc, #244]	; (800418c <prvAddNewTaskToReadyList+0x104>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	4b3c      	ldr	r3, [pc, #240]	; (800418c <prvAddNewTaskToReadyList+0x104>)
 800409c:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 800409e:	4b3c      	ldr	r3, [pc, #240]	; (8004190 <prvAddNewTaskToReadyList+0x108>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80040a6:	4b3a      	ldr	r3, [pc, #232]	; (8004190 <prvAddNewTaskToReadyList+0x108>)
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040ac:	4b37      	ldr	r3, [pc, #220]	; (800418c <prvAddNewTaskToReadyList+0x104>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d110      	bne.n	80040d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80040b4:	f000 fcbe 	bl	8004a34 <prvInitialiseTaskLists>
 80040b8:	e00d      	b.n	80040d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <prvAddNewTaskToReadyList+0x10c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040c2:	4b33      	ldr	r3, [pc, #204]	; (8004190 <prvAddNewTaskToReadyList+0x108>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d802      	bhi.n	80040d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80040d0:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <prvAddNewTaskToReadyList+0x108>)
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80040d6:	4b30      	ldr	r3, [pc, #192]	; (8004198 <prvAddNewTaskToReadyList+0x110>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <prvAddNewTaskToReadyList+0x110>)
 80040de:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <prvAddNewTaskToReadyList+0x110>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	4b2b      	ldr	r3, [pc, #172]	; (800419c <prvAddNewTaskToReadyList+0x114>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d903      	bls.n	80040fc <prvAddNewTaskToReadyList+0x74>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	4b28      	ldr	r3, [pc, #160]	; (800419c <prvAddNewTaskToReadyList+0x114>)
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	4927      	ldr	r1, [pc, #156]	; (80041a0 <prvAddNewTaskToReadyList+0x118>)
 8004102:	0013      	movs	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	189b      	adds	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	18cb      	adds	r3, r1, r3
 800410c:	3304      	adds	r3, #4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60da      	str	r2, [r3, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	3204      	adds	r2, #4
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	1d1a      	adds	r2, r3, #4
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004136:	0013      	movs	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	189b      	adds	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <prvAddNewTaskToReadyList+0x118>)
 8004140:	189a      	adds	r2, r3, r2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	615a      	str	r2, [r3, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414a:	4915      	ldr	r1, [pc, #84]	; (80041a0 <prvAddNewTaskToReadyList+0x118>)
 800414c:	0013      	movs	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	189b      	adds	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	585b      	ldr	r3, [r3, r1]
 8004156:	1c58      	adds	r0, r3, #1
 8004158:	4911      	ldr	r1, [pc, #68]	; (80041a0 <prvAddNewTaskToReadyList+0x118>)
 800415a:	0013      	movs	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	189b      	adds	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004164:	f001 f8a6 	bl	80052b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <prvAddNewTaskToReadyList+0x10c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <prvAddNewTaskToReadyList+0x108>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	429a      	cmp	r2, r3
 800417c:	d201      	bcs.n	8004182 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800417e:	f001 f877 	bl	8005270 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b004      	add	sp, #16
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	200002f8 	.word	0x200002f8
 8004190:	20000220 	.word	0x20000220
 8004194:	20000304 	.word	0x20000304
 8004198:	20000314 	.word	0x20000314
 800419c:	20000300 	.word	0x20000300
 80041a0:	20000224 	.word	0x20000224

080041a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80041aa:	4917      	ldr	r1, [pc, #92]	; (8004208 <vTaskStartScheduler+0x64>)
 80041ac:	4817      	ldr	r0, [pc, #92]	; (800420c <vTaskStartScheduler+0x68>)
 80041ae:	4b18      	ldr	r3, [pc, #96]	; (8004210 <vTaskStartScheduler+0x6c>)
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	2300      	movs	r3, #0
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	2300      	movs	r3, #0
 80041b8:	223c      	movs	r2, #60	; 0x3c
 80041ba:	f7ff fe96 	bl	8003eea <xTaskCreate>
 80041be:	0003      	movs	r3, r0
 80041c0:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d103      	bne.n	80041d0 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 80041c8:	f000 fd5c 	bl	8004c84 <xTimerCreateTimerTask>
 80041cc:	0003      	movs	r3, r0
 80041ce:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10d      	bne.n	80041f2 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80041d6:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <vTaskStartScheduler+0x70>)
 80041da:	2201      	movs	r2, #1
 80041dc:	4252      	negs	r2, r2
 80041de:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80041e0:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <vTaskStartScheduler+0x74>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041e6:	4b0d      	ldr	r3, [pc, #52]	; (800421c <vTaskStartScheduler+0x78>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80041ec:	f001 f81c 	bl	8005228 <xPortStartScheduler>
 80041f0:	e004      	b.n	80041fc <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3301      	adds	r3, #1
 80041f6:	d101      	bne.n	80041fc <vTaskStartScheduler+0x58>
 80041f8:	b672      	cpsid	i
 80041fa:	e7fe      	b.n	80041fa <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80041fc:	4b08      	ldr	r3, [pc, #32]	; (8004220 <vTaskStartScheduler+0x7c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b002      	add	sp, #8
 8004206:	bd80      	pop	{r7, pc}
 8004208:	0800608c 	.word	0x0800608c
 800420c:	08004a15 	.word	0x08004a15
 8004210:	2000031c 	.word	0x2000031c
 8004214:	20000318 	.word	0x20000318
 8004218:	20000304 	.word	0x20000304
 800421c:	200002fc 	.word	0x200002fc
 8004220:	2000000c 	.word	0x2000000c

08004224 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <vTaskSuspendAll+0x14>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	4b02      	ldr	r3, [pc, #8]	; (8004238 <vTaskSuspendAll+0x14>)
 8004230:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000320 	.word	0x20000320

0800423c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800424a:	4b68      	ldr	r3, [pc, #416]	; (80043ec <xTaskResumeAll+0x1b0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <xTaskResumeAll+0x1a>
 8004252:	b672      	cpsid	i
 8004254:	e7fe      	b.n	8004254 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004256:	f001 f81b 	bl	8005290 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800425a:	4b64      	ldr	r3, [pc, #400]	; (80043ec <xTaskResumeAll+0x1b0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	1e5a      	subs	r2, r3, #1
 8004260:	4b62      	ldr	r3, [pc, #392]	; (80043ec <xTaskResumeAll+0x1b0>)
 8004262:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004264:	4b61      	ldr	r3, [pc, #388]	; (80043ec <xTaskResumeAll+0x1b0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d000      	beq.n	800426e <xTaskResumeAll+0x32>
 800426c:	e0b7      	b.n	80043de <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800426e:	4b60      	ldr	r3, [pc, #384]	; (80043f0 <xTaskResumeAll+0x1b4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d100      	bne.n	8004278 <xTaskResumeAll+0x3c>
 8004276:	e0b2      	b.n	80043de <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004278:	e089      	b.n	800438e <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800427a:	4b5e      	ldr	r3, [pc, #376]	; (80043f4 <xTaskResumeAll+0x1b8>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	6a12      	ldr	r2, [r2, #32]
 8004290:	609a      	str	r2, [r3, #8]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	69d2      	ldr	r2, [r2, #28]
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	3318      	adds	r3, #24
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d103      	bne.n	80042b0 <xTaskResumeAll+0x74>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	6a1a      	ldr	r2, [r3, #32]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2200      	movs	r2, #0
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	1e5a      	subs	r2, r3, #1
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	68d2      	ldr	r2, [r2, #12]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	6892      	ldr	r2, [r2, #8]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	3304      	adds	r3, #4
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d103      	bne.n	80042ee <xTaskResumeAll+0xb2>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2200      	movs	r2, #0
 80042f2:	615a      	str	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	1e5a      	subs	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004302:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <xTaskResumeAll+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d903      	bls.n	8004312 <xTaskResumeAll+0xd6>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430e:	4b3a      	ldr	r3, [pc, #232]	; (80043f8 <xTaskResumeAll+0x1bc>)
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004316:	4939      	ldr	r1, [pc, #228]	; (80043fc <xTaskResumeAll+0x1c0>)
 8004318:	0013      	movs	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	189b      	adds	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	18cb      	adds	r3, r1, r3
 8004322:	3304      	adds	r3, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	609a      	str	r2, [r3, #8]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	3204      	adds	r2, #4
 800433e:	605a      	str	r2, [r3, #4]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	1d1a      	adds	r2, r3, #4
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	0013      	movs	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	189b      	adds	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4a29      	ldr	r2, [pc, #164]	; (80043fc <xTaskResumeAll+0x1c0>)
 8004356:	189a      	adds	r2, r3, r2
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	615a      	str	r2, [r3, #20]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	4926      	ldr	r1, [pc, #152]	; (80043fc <xTaskResumeAll+0x1c0>)
 8004362:	0013      	movs	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	189b      	adds	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	585b      	ldr	r3, [r3, r1]
 800436c:	1c58      	adds	r0, r3, #1
 800436e:	4923      	ldr	r1, [pc, #140]	; (80043fc <xTaskResumeAll+0x1c0>)
 8004370:	0013      	movs	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	189b      	adds	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <xTaskResumeAll+0x1c4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	429a      	cmp	r2, r3
 8004386:	d302      	bcc.n	800438e <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8004388:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <xTaskResumeAll+0x1c8>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800438e:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <xTaskResumeAll+0x1b8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d000      	beq.n	8004398 <xTaskResumeAll+0x15c>
 8004396:	e770      	b.n	800427a <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800439e:	f000 fbcd 	bl	8004b3c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <xTaskResumeAll+0x1cc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00f      	beq.n	80043ce <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80043ae:	f000 f83b 	bl	8004428 <xTaskIncrementTick>
 80043b2:	1e03      	subs	r3, r0, #0
 80043b4:	d002      	beq.n	80043bc <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <xTaskResumeAll+0x1c8>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3b01      	subs	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f2      	bne.n	80043ae <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 80043c8:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <xTaskResumeAll+0x1cc>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80043ce:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <xTaskResumeAll+0x1c8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80043d6:	2301      	movs	r3, #1
 80043d8:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80043da:	f000 ff49 	bl	8005270 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80043de:	f000 ff69 	bl	80052b4 <vPortExitCritical>

    return xAlreadyYielded;
 80043e2:	693b      	ldr	r3, [r7, #16]
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b006      	add	sp, #24
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000320 	.word	0x20000320
 80043f0:	200002f8 	.word	0x200002f8
 80043f4:	200002b8 	.word	0x200002b8
 80043f8:	20000300 	.word	0x20000300
 80043fc:	20000224 	.word	0x20000224
 8004400:	20000220 	.word	0x20000220
 8004404:	2000030c 	.word	0x2000030c
 8004408:	20000308 	.word	0x20000308

0800440c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004412:	4b04      	ldr	r3, [pc, #16]	; (8004424 <xTaskGetTickCount+0x18>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004418:	687b      	ldr	r3, [r7, #4]
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b002      	add	sp, #8
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	200002fc 	.word	0x200002fc

08004428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004432:	4b78      	ldr	r3, [pc, #480]	; (8004614 <xTaskIncrementTick+0x1ec>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d000      	beq.n	800443c <xTaskIncrementTick+0x14>
 800443a:	e0e0      	b.n	80045fe <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800443c:	4b76      	ldr	r3, [pc, #472]	; (8004618 <xTaskIncrementTick+0x1f0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004444:	4b74      	ldr	r3, [pc, #464]	; (8004618 <xTaskIncrementTick+0x1f0>)
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d117      	bne.n	8004480 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8004450:	4b72      	ldr	r3, [pc, #456]	; (800461c <xTaskIncrementTick+0x1f4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <xTaskIncrementTick+0x36>
 800445a:	b672      	cpsid	i
 800445c:	e7fe      	b.n	800445c <xTaskIncrementTick+0x34>
 800445e:	4b6f      	ldr	r3, [pc, #444]	; (800461c <xTaskIncrementTick+0x1f4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	4b6e      	ldr	r3, [pc, #440]	; (8004620 <xTaskIncrementTick+0x1f8>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b6c      	ldr	r3, [pc, #432]	; (800461c <xTaskIncrementTick+0x1f4>)
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	4b6c      	ldr	r3, [pc, #432]	; (8004620 <xTaskIncrementTick+0x1f8>)
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	4b6c      	ldr	r3, [pc, #432]	; (8004624 <xTaskIncrementTick+0x1fc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	4b6a      	ldr	r3, [pc, #424]	; (8004624 <xTaskIncrementTick+0x1fc>)
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	f000 fb5e 	bl	8004b3c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004480:	4b69      	ldr	r3, [pc, #420]	; (8004628 <xTaskIncrementTick+0x200>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	429a      	cmp	r2, r3
 8004488:	d200      	bcs.n	800448c <xTaskIncrementTick+0x64>
 800448a:	e0a4      	b.n	80045d6 <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800448c:	4b63      	ldr	r3, [pc, #396]	; (800461c <xTaskIncrementTick+0x1f4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d104      	bne.n	80044a0 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004496:	4b64      	ldr	r3, [pc, #400]	; (8004628 <xTaskIncrementTick+0x200>)
 8004498:	2201      	movs	r2, #1
 800449a:	4252      	negs	r2, r2
 800449c:	601a      	str	r2, [r3, #0]
                    break;
 800449e:	e09a      	b.n	80045d6 <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a0:	4b5e      	ldr	r3, [pc, #376]	; (800461c <xTaskIncrementTick+0x1f4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d203      	bcs.n	80044c0 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80044b8:	4b5b      	ldr	r3, [pc, #364]	; (8004628 <xTaskIncrementTick+0x200>)
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80044be:	e08a      	b.n	80045d6 <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	68d2      	ldr	r2, [r2, #12]
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	6892      	ldr	r2, [r2, #8]
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3304      	adds	r3, #4
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d103      	bne.n	80044ee <xTaskIncrementTick+0xc6>
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2200      	movs	r2, #0
 80044f2:	615a      	str	r2, [r3, #20]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1e5a      	subs	r2, r3, #1
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01e      	beq.n	8004544 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	607b      	str	r3, [r7, #4]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	6a12      	ldr	r2, [r2, #32]
 8004514:	609a      	str	r2, [r3, #8]
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	69d2      	ldr	r2, [r2, #28]
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	3318      	adds	r3, #24
 8004528:	429a      	cmp	r2, r3
 800452a:	d103      	bne.n	8004534 <xTaskIncrementTick+0x10c>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	6a1a      	ldr	r2, [r3, #32]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	605a      	str	r2, [r3, #4]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2200      	movs	r2, #0
 8004538:	629a      	str	r2, [r3, #40]	; 0x28
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	1e5a      	subs	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	4b38      	ldr	r3, [pc, #224]	; (800462c <xTaskIncrementTick+0x204>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d903      	bls.n	8004558 <xTaskIncrementTick+0x130>
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	4b35      	ldr	r3, [pc, #212]	; (800462c <xTaskIncrementTick+0x204>)
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4934      	ldr	r1, [pc, #208]	; (8004630 <xTaskIncrementTick+0x208>)
 800455e:	0013      	movs	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	189b      	adds	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	18cb      	adds	r3, r1, r3
 8004568:	3304      	adds	r3, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	60da      	str	r2, [r3, #12]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	3204      	adds	r2, #4
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1d1a      	adds	r2, r3, #4
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	609a      	str	r2, [r3, #8]
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004592:	0013      	movs	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	189b      	adds	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4a25      	ldr	r2, [pc, #148]	; (8004630 <xTaskIncrementTick+0x208>)
 800459c:	189a      	adds	r2, r3, r2
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	615a      	str	r2, [r3, #20]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a6:	4922      	ldr	r1, [pc, #136]	; (8004630 <xTaskIncrementTick+0x208>)
 80045a8:	0013      	movs	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	189b      	adds	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	585b      	ldr	r3, [r3, r1]
 80045b2:	1c58      	adds	r0, r3, #1
 80045b4:	491e      	ldr	r1, [pc, #120]	; (8004630 <xTaskIncrementTick+0x208>)
 80045b6:	0013      	movs	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <xTaskIncrementTick+0x20c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d800      	bhi.n	80045d0 <xTaskIncrementTick+0x1a8>
 80045ce:	e75d      	b.n	800448c <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045d4:	e75a      	b.n	800448c <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045d6:	4b17      	ldr	r3, [pc, #92]	; (8004634 <xTaskIncrementTick+0x20c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	4914      	ldr	r1, [pc, #80]	; (8004630 <xTaskIncrementTick+0x208>)
 80045de:	0013      	movs	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	189b      	adds	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	585b      	ldr	r3, [r3, r1]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d901      	bls.n	80045f0 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 80045ec:	2301      	movs	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80045f0:	4b11      	ldr	r3, [pc, #68]	; (8004638 <xTaskIncrementTick+0x210>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	e004      	b.n	8004608 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <xTaskIncrementTick+0x214>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <xTaskIncrementTick+0x214>)
 8004606:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004608:	69fb      	ldr	r3, [r7, #28]
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b008      	add	sp, #32
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	20000320 	.word	0x20000320
 8004618:	200002fc 	.word	0x200002fc
 800461c:	200002b0 	.word	0x200002b0
 8004620:	200002b4 	.word	0x200002b4
 8004624:	20000310 	.word	0x20000310
 8004628:	20000318 	.word	0x20000318
 800462c:	20000300 	.word	0x20000300
 8004630:	20000224 	.word	0x20000224
 8004634:	20000220 	.word	0x20000220
 8004638:	2000030c 	.word	0x2000030c
 800463c:	20000308 	.word	0x20000308

08004640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004646:	4b22      	ldr	r3, [pc, #136]	; (80046d0 <vTaskSwitchContext+0x90>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800464e:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <vTaskSwitchContext+0x94>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004654:	e037      	b.n	80046c6 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8004656:	4b1f      	ldr	r3, [pc, #124]	; (80046d4 <vTaskSwitchContext+0x94>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <vTaskSwitchContext+0x98>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	e007      	b.n	8004674 <vTaskSwitchContext+0x34>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <vTaskSwitchContext+0x2e>
 800466a:	b672      	cpsid	i
 800466c:	e7fe      	b.n	800466c <vTaskSwitchContext+0x2c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3b01      	subs	r3, #1
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	4919      	ldr	r1, [pc, #100]	; (80046dc <vTaskSwitchContext+0x9c>)
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	0013      	movs	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	189b      	adds	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	585b      	ldr	r3, [r3, r1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0ee      	beq.n	8004664 <vTaskSwitchContext+0x24>
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	0013      	movs	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	189b      	adds	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4a12      	ldr	r2, [pc, #72]	; (80046dc <vTaskSwitchContext+0x9c>)
 8004692:	189b      	adds	r3, r3, r2
 8004694:	603b      	str	r3, [r7, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	605a      	str	r2, [r3, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	3308      	adds	r3, #8
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d104      	bne.n	80046b6 <vTaskSwitchContext+0x76>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <vTaskSwitchContext+0xa0>)
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <vTaskSwitchContext+0x98>)
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]
}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b002      	add	sp, #8
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	20000320 	.word	0x20000320
 80046d4:	2000030c 	.word	0x2000030c
 80046d8:	20000300 	.word	0x20000300
 80046dc:	20000224 	.word	0x20000224
 80046e0:	20000220 	.word	0x20000220

080046e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <vTaskPlaceOnEventList+0x14>
 80046f4:	b672      	cpsid	i
 80046f6:	e7fe      	b.n	80046f6 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046f8:	4b08      	ldr	r3, [pc, #32]	; (800471c <vTaskPlaceOnEventList+0x38>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3318      	adds	r3, #24
 80046fe:	001a      	movs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	0011      	movs	r1, r2
 8004704:	0018      	movs	r0, r3
 8004706:	f7ff f8be 	bl	8003886 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2101      	movs	r1, #1
 800470e:	0018      	movs	r0, r3
 8004710:	f000 fa4a 	bl	8004ba8 <prvAddCurrentTaskToDelayedList>
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b002      	add	sp, #8
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000220 	.word	0x20000220

08004720 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <vTaskPlaceOnEventListRestricted+0x16>
 8004732:	b672      	cpsid	i
 8004734:	e7fe      	b.n	8004734 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	4b16      	ldr	r3, [pc, #88]	; (8004798 <vTaskPlaceOnEventListRestricted+0x78>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	61da      	str	r2, [r3, #28]
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <vTaskPlaceOnEventListRestricted+0x78>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	6892      	ldr	r2, [r2, #8]
 800474c:	621a      	str	r2, [r3, #32]
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <vTaskPlaceOnEventListRestricted+0x78>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	3218      	adds	r2, #24
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	4b0f      	ldr	r3, [pc, #60]	; (8004798 <vTaskPlaceOnEventListRestricted+0x78>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3318      	adds	r3, #24
 8004760:	001a      	movs	r2, r3
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	609a      	str	r2, [r3, #8]
 8004766:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <vTaskPlaceOnEventListRestricted+0x78>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	629a      	str	r2, [r3, #40]	; 0x28
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 800477e:	2301      	movs	r3, #1
 8004780:	425b      	negs	r3, r3
 8004782:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	0011      	movs	r1, r2
 800478a:	0018      	movs	r0, r3
 800478c:	f000 fa0c 	bl	8004ba8 <prvAddCurrentTaskToDelayedList>
    }
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b006      	add	sp, #24
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000220 	.word	0x20000220

0800479c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <xTaskRemoveFromEventList+0x1a>
 80047b2:	b672      	cpsid	i
 80047b4:	e7fe      	b.n	80047b4 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	6a12      	ldr	r2, [r2, #32]
 80047c4:	609a      	str	r2, [r3, #8]
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	69d2      	ldr	r2, [r2, #28]
 80047ce:	605a      	str	r2, [r3, #4]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	3318      	adds	r3, #24
 80047d8:	429a      	cmp	r2, r3
 80047da:	d103      	bne.n	80047e4 <xTaskRemoveFromEventList+0x48>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	6a1a      	ldr	r2, [r3, #32]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	605a      	str	r2, [r3, #4]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2200      	movs	r2, #0
 80047e8:	629a      	str	r2, [r3, #40]	; 0x28
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	1e5a      	subs	r2, r3, #1
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f4:	4b48      	ldr	r3, [pc, #288]	; (8004918 <xTaskRemoveFromEventList+0x17c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d15d      	bne.n	80048b8 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	68d2      	ldr	r2, [r2, #12]
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	6892      	ldr	r2, [r2, #8]
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	3304      	adds	r3, #4
 800481e:	429a      	cmp	r2, r3
 8004820:	d103      	bne.n	800482a <xTaskRemoveFromEventList+0x8e>
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2200      	movs	r2, #0
 800482e:	615a      	str	r2, [r3, #20]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	1e5a      	subs	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483e:	4b37      	ldr	r3, [pc, #220]	; (800491c <xTaskRemoveFromEventList+0x180>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d903      	bls.n	800484e <xTaskRemoveFromEventList+0xb2>
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484a:	4b34      	ldr	r3, [pc, #208]	; (800491c <xTaskRemoveFromEventList+0x180>)
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004852:	4933      	ldr	r1, [pc, #204]	; (8004920 <xTaskRemoveFromEventList+0x184>)
 8004854:	0013      	movs	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	189b      	adds	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	18cb      	adds	r3, r1, r3
 800485e:	3304      	adds	r3, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	609a      	str	r2, [r3, #8]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	3204      	adds	r2, #4
 800487a:	605a      	str	r2, [r3, #4]
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	1d1a      	adds	r2, r3, #4
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004888:	0013      	movs	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	189b      	adds	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4a23      	ldr	r2, [pc, #140]	; (8004920 <xTaskRemoveFromEventList+0x184>)
 8004892:	189a      	adds	r2, r3, r2
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	615a      	str	r2, [r3, #20]
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489c:	4920      	ldr	r1, [pc, #128]	; (8004920 <xTaskRemoveFromEventList+0x184>)
 800489e:	0013      	movs	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	189b      	adds	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	585b      	ldr	r3, [r3, r1]
 80048a8:	1c58      	adds	r0, r3, #1
 80048aa:	491d      	ldr	r1, [pc, #116]	; (8004920 <xTaskRemoveFromEventList+0x184>)
 80048ac:	0013      	movs	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	189b      	adds	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	5058      	str	r0, [r3, r1]
 80048b6:	e01b      	b.n	80048f0 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048b8:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <xTaskRemoveFromEventList+0x188>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	61da      	str	r2, [r3, #28]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	621a      	str	r2, [r3, #32]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	3218      	adds	r2, #24
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	3318      	adds	r3, #24
 80048da:	001a      	movs	r2, r3
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	4a10      	ldr	r2, [pc, #64]	; (8004924 <xTaskRemoveFromEventList+0x188>)
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <xTaskRemoveFromEventList+0x188>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <xTaskRemoveFromEventList+0x188>)
 80048ee:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <xTaskRemoveFromEventList+0x18c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d905      	bls.n	800490a <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80048fe:	2301      	movs	r3, #1
 8004900:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <xTaskRemoveFromEventList+0x190>)
 8004904:	2201      	movs	r2, #1
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	e001      	b.n	800490e <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800490e:	69fb      	ldr	r3, [r7, #28]
}
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	b008      	add	sp, #32
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000320 	.word	0x20000320
 800491c:	20000300 	.word	0x20000300
 8004920:	20000224 	.word	0x20000224
 8004924:	200002b8 	.word	0x200002b8
 8004928:	20000220 	.word	0x20000220
 800492c:	2000030c 	.word	0x2000030c

08004930 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <vTaskInternalSetTimeOutState+0x20>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <vTaskInternalSetTimeOutState+0x24>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	605a      	str	r2, [r3, #4]
}
 8004948:	46c0      	nop			; (mov r8, r8)
 800494a:	46bd      	mov	sp, r7
 800494c:	b002      	add	sp, #8
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000310 	.word	0x20000310
 8004954:	200002fc 	.word	0x200002fc

08004958 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <xTaskCheckForTimeOut+0x14>
 8004968:	b672      	cpsid	i
 800496a:	e7fe      	b.n	800496a <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <xTaskCheckForTimeOut+0x1e>
 8004972:	b672      	cpsid	i
 8004974:	e7fe      	b.n	8004974 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 8004976:	f000 fc8b 	bl	8005290 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800497a:	4b1f      	ldr	r3, [pc, #124]	; (80049f8 <xTaskCheckForTimeOut+0xa0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	d102      	bne.n	8004998 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e027      	b.n	80049e8 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4b17      	ldr	r3, [pc, #92]	; (80049fc <xTaskCheckForTimeOut+0xa4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d00a      	beq.n	80049ba <xTaskCheckForTimeOut+0x62>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d305      	bcc.n	80049ba <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80049ae:	2301      	movs	r3, #1
 80049b0:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e016      	b.n	80049e8 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d20c      	bcs.n	80049de <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	1ad2      	subs	r2, r2, r3
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7ff ffac 	bl	8004930 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e004      	b.n	80049e8 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80049e8:	f000 fc64 	bl	80052b4 <vPortExitCritical>

    return xReturn;
 80049ec:	697b      	ldr	r3, [r7, #20]
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b006      	add	sp, #24
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	200002fc 	.word	0x200002fc
 80049fc:	20000310 	.word	0x20000310

08004a00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004a04:	4b02      	ldr	r3, [pc, #8]	; (8004a10 <vTaskMissedYield+0x10>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	2000030c 	.word	0x2000030c

08004a14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004a1c:	f000 f84e 	bl	8004abc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <prvIdleTask+0x1c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d9f9      	bls.n	8004a1c <prvIdleTask+0x8>
            {
                taskYIELD();
 8004a28:	f000 fc22 	bl	8005270 <vPortYield>
        prvCheckTasksWaitingTermination();
 8004a2c:	e7f6      	b.n	8004a1c <prvIdleTask+0x8>
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	20000224 	.word	0x20000224

08004a34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	e00c      	b.n	8004a5a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	0013      	movs	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	189b      	adds	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <prvInitialiseTaskLists+0x68>)
 8004a4c:	189b      	adds	r3, r3, r2
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f7fe fef0 	bl	8003834 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3301      	adds	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d9ef      	bls.n	8004a40 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <prvInitialiseTaskLists+0x6c>)
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7fe fee6 	bl	8003834 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <prvInitialiseTaskLists+0x70>)
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7fe fee2 	bl	8003834 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <prvInitialiseTaskLists+0x74>)
 8004a72:	0018      	movs	r0, r3
 8004a74:	f7fe fede 	bl	8003834 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <prvInitialiseTaskLists+0x78>)
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7fe feda 	bl	8003834 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <prvInitialiseTaskLists+0x7c>)
 8004a82:	0018      	movs	r0, r3
 8004a84:	f7fe fed6 	bl	8003834 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <prvInitialiseTaskLists+0x80>)
 8004a8a:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <prvInitialiseTaskLists+0x6c>)
 8004a8c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <prvInitialiseTaskLists+0x84>)
 8004a90:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <prvInitialiseTaskLists+0x70>)
 8004a92:	601a      	str	r2, [r3, #0]
}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000224 	.word	0x20000224
 8004aa0:	20000288 	.word	0x20000288
 8004aa4:	2000029c 	.word	0x2000029c
 8004aa8:	200002b8 	.word	0x200002b8
 8004aac:	200002cc 	.word	0x200002cc
 8004ab0:	200002e4 	.word	0x200002e4
 8004ab4:	200002b0 	.word	0x200002b0
 8004ab8:	200002b4 	.word	0x200002b4

08004abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ac2:	e01a      	b.n	8004afa <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8004ac4:	f000 fbe4 	bl	8005290 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <prvCheckTasksWaitingTermination+0x50>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7fe ff0c 	bl	80038f2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <prvCheckTasksWaitingTermination+0x54>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	1e5a      	subs	r2, r3, #1
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <prvCheckTasksWaitingTermination+0x54>)
 8004ae2:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <prvCheckTasksWaitingTermination+0x58>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	1e5a      	subs	r2, r3, #1
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <prvCheckTasksWaitingTermination+0x58>)
 8004aec:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8004aee:	f000 fbe1 	bl	80052b4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f000 f80f 	bl	8004b18 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <prvCheckTasksWaitingTermination+0x58>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e0      	bne.n	8004ac4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b002      	add	sp, #8
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	200002cc 	.word	0x200002cc
 8004b10:	200002f8 	.word	0x200002f8
 8004b14:	200002e0 	.word	0x200002e0

08004b18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 fcf3 	bl	8005510 <vPortFree>
            vPortFree( pxTCB );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f000 fcef 	bl	8005510 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b002      	add	sp, #8
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b40:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <prvResetNextTaskUnblockTime+0x2c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d104      	bne.n	8004b54 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004b4a:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <prvResetNextTaskUnblockTime+0x30>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	4252      	negs	r2, r2
 8004b50:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004b52:	e005      	b.n	8004b60 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <prvResetNextTaskUnblockTime+0x2c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <prvResetNextTaskUnblockTime+0x30>)
 8004b5e:	601a      	str	r2, [r3, #0]
}
 8004b60:	46c0      	nop			; (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	200002b0 	.word	0x200002b0
 8004b6c:	20000318 	.word	0x20000318

08004b70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <xTaskGetSchedulerState+0x30>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d102      	bne.n	8004b84 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	e008      	b.n	8004b96 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b84:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <xTaskGetSchedulerState+0x34>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	e001      	b.n	8004b96 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004b96:	687b      	ldr	r3, [r7, #4]
    }
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000304 	.word	0x20000304
 8004ba4:	20000320 	.word	0x20000320

08004ba8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004bb2:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bb8:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f7fe fe97 	bl	80038f2 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	d124      	bne.n	8004c14 <prvAddCurrentTaskToDelayedList+0x6c>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d021      	beq.n	8004c14 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bd0:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	609a      	str	r2, [r3, #8]
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	6892      	ldr	r2, [r2, #8]
 8004be6:	60da      	str	r2, [r3, #12]
 8004be8:	4b21      	ldr	r3, [pc, #132]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	3204      	adds	r2, #4
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	1d1a      	adds	r2, r3, #4
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	4b1c      	ldr	r3, [pc, #112]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c04:	615a      	str	r2, [r3, #20]
 8004c06:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004c12:	e026      	b.n	8004c62 <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	18d3      	adds	r3, r2, r3
 8004c1a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c1c:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d209      	bcs.n	8004c40 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c2c:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3304      	adds	r3, #4
 8004c36:	0019      	movs	r1, r3
 8004c38:	0010      	movs	r0, r2
 8004c3a:	f7fe fe24 	bl	8003886 <vListInsert>
}
 8004c3e:	e010      	b.n	8004c62 <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c40:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <prvAddCurrentTaskToDelayedList+0xd4>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	0010      	movs	r0, r2
 8004c4e:	f7fe fe1a 	bl	8003886 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004c52:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d202      	bcs.n	8004c62 <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b006      	add	sp, #24
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	200002fc 	.word	0x200002fc
 8004c70:	20000220 	.word	0x20000220
 8004c74:	200002e4 	.word	0x200002e4
 8004c78:	200002b4 	.word	0x200002b4
 8004c7c:	200002b0 	.word	0x200002b0
 8004c80:	20000318 	.word	0x20000318

08004c84 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004c8e:	f000 fa2d 	bl	80050ec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <xTimerCreateTimerTask+0x44>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004c9a:	490c      	ldr	r1, [pc, #48]	; (8004ccc <xTimerCreateTimerTask+0x48>)
 8004c9c:	480c      	ldr	r0, [pc, #48]	; (8004cd0 <xTimerCreateTimerTask+0x4c>)
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <xTimerCreateTimerTask+0x50>)
 8004ca0:	9301      	str	r3, [sp, #4]
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2250      	movs	r2, #80	; 0x50
 8004caa:	f7ff f91e 	bl	8003eea <xTaskCreate>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <xTimerCreateTimerTask+0x38>
 8004cb8:	b672      	cpsid	i
 8004cba:	e7fe      	b.n	8004cba <xTimerCreateTimerTask+0x36>
        return xReturn;
 8004cbc:	687b      	ldr	r3, [r7, #4]
    }
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b002      	add	sp, #8
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	20000354 	.word	0x20000354
 8004ccc:	08006094 	.word	0x08006094
 8004cd0:	08004d81 	.word	0x08004d81
 8004cd4:	20000358 	.word	0x20000358

08004cd8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004ce4:	e009      	b.n	8004cfa <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	18d3      	adds	r3, r2, r3
 8004cee:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	0010      	movs	r0, r2
 8004cf8:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	18d1      	adds	r1, r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f8d8 	bl	8004ebc <prvInsertTimerInActiveList>
 8004d0c:	1e03      	subs	r3, r0, #0
 8004d0e:	d1ea      	bne.n	8004ce6 <prvReloadTimer+0xe>
        }
    }
 8004d10:	46c0      	nop			; (mov r8, r8)
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b004      	add	sp, #16
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <prvProcessExpiredTimer+0x60>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3304      	adds	r3, #4
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fe fddc 	bl	80038f2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2228      	movs	r2, #40	; 0x28
 8004d3e:	5c9b      	ldrb	r3, [r3, r2]
 8004d40:	001a      	movs	r2, r3
 8004d42:	2304      	movs	r3, #4
 8004d44:	4013      	ands	r3, r2
 8004d46:	d006      	beq.n	8004d56 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f7ff ffc2 	bl	8004cd8 <prvReloadTimer>
 8004d54:	e008      	b.n	8004d68 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2228      	movs	r2, #40	; 0x28
 8004d5a:	5c9b      	ldrb	r3, [r3, r2]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	4393      	bics	r3, r2
 8004d60:	b2d9      	uxtb	r1, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2228      	movs	r2, #40	; 0x28
 8004d66:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	0010      	movs	r0, r2
 8004d70:	4798      	blx	r3
    }
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b004      	add	sp, #16
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	2000034c 	.word	0x2000034c

08004d80 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d88:	2308      	movs	r3, #8
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 f853 	bl	8004e38 <prvGetNextExpireTime>
 8004d92:	0003      	movs	r3, r0
 8004d94:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f000 f803 	bl	8004da8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004da2:	f000 f8cd 	bl	8004f40 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004da6:	e7ef      	b.n	8004d88 <prvTimerTask+0x8>

08004da8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004db2:	f7ff fa37 	bl	8004224 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004db6:	2308      	movs	r3, #8
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 f85e 	bl	8004e7c <prvSampleTimeNow>
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d12b      	bne.n	8004e22 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10c      	bne.n	8004dea <prvProcessTimerOrBlockTask+0x42>
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d808      	bhi.n	8004dea <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8004dd8:	f7ff fa30 	bl	800423c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0011      	movs	r1, r2
 8004de2:	0018      	movs	r0, r3
 8004de4:	f7ff ff9a 	bl	8004d1c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004de8:	e01d      	b.n	8004e26 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <prvProcessTimerOrBlockTask+0x88>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <prvProcessTimerOrBlockTask+0x56>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <prvProcessTimerOrBlockTask+0x58>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e02:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <prvProcessTimerOrBlockTask+0x8c>)
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	0019      	movs	r1, r3
 8004e10:	f7ff f838 	bl	8003e84 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004e14:	f7ff fa12 	bl	800423c <xTaskResumeAll>
 8004e18:	1e03      	subs	r3, r0, #0
 8004e1a:	d104      	bne.n	8004e26 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8004e1c:	f000 fa28 	bl	8005270 <vPortYield>
    }
 8004e20:	e001      	b.n	8004e26 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8004e22:	f7ff fa0b 	bl	800423c <xTaskResumeAll>
    }
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b004      	add	sp, #16
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	20000350 	.word	0x20000350
 8004e34:	20000354 	.word	0x20000354

08004e38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <prvGetNextExpireTime+0x40>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <prvGetNextExpireTime+0x16>
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	e000      	b.n	8004e50 <prvGetNextExpireTime+0x18>
 8004e4e:	2200      	movs	r2, #0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <prvGetNextExpireTime+0x40>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e001      	b.n	8004e6c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
    }
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b004      	add	sp, #16
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	2000034c 	.word	0x2000034c

08004e7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004e84:	f7ff fac2 	bl	800440c <xTaskGetTickCount>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <prvSampleTimeNow+0x3c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d205      	bcs.n	8004ea2 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8004e96:	f000 f901 	bl	800509c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e002      	b.n	8004ea8 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <prvSampleTimeNow+0x3c>)
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8004eae:	68fb      	ldr	r3, [r7, #12]
    }
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b004      	add	sp, #16
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	2000035c 	.word	0x2000035c

08004ebc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d812      	bhi.n	8004f08 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	1ad2      	subs	r2, r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d302      	bcc.n	8004ef6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e01b      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <prvInsertTimerInActiveList+0x7c>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3304      	adds	r3, #4
 8004efe:	0019      	movs	r1, r3
 8004f00:	0010      	movs	r0, r2
 8004f02:	f7fe fcc0 	bl	8003886 <vListInsert>
 8004f06:	e012      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d206      	bcs.n	8004f1e <prvInsertTimerInActiveList+0x62>
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e007      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <prvInsertTimerInActiveList+0x80>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3304      	adds	r3, #4
 8004f26:	0019      	movs	r1, r3
 8004f28:	0010      	movs	r0, r2
 8004f2a:	f7fe fcac 	bl	8003886 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004f2e:	697b      	ldr	r3, [r7, #20]
    }
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b006      	add	sp, #24
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000350 	.word	0x20000350
 8004f3c:	2000034c 	.word	0x2000034c

08004f40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f46:	e095      	b.n	8005074 <prvProcessReceivedCommands+0x134>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f48:	1d3b      	adds	r3, r7, #4
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	da00      	bge.n	8004f52 <prvProcessReceivedCommands+0x12>
 8004f50:	e08f      	b.n	8005072 <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f52:	1d3b      	adds	r3, r7, #4
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3304      	adds	r3, #4
 8004f64:	0018      	movs	r0, r3
 8004f66:	f7fe fcc4 	bl	80038f2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f6a:	003b      	movs	r3, r7
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7ff ff85 	bl	8004e7c <prvSampleTimeNow>
 8004f72:	0003      	movs	r3, r0
 8004f74:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b09      	cmp	r3, #9
 8004f7c:	d900      	bls.n	8004f80 <prvProcessReceivedCommands+0x40>
 8004f7e:	e079      	b.n	8005074 <prvProcessReceivedCommands+0x134>
 8004f80:	009a      	lsls	r2, r3, #2
 8004f82:	4b44      	ldr	r3, [pc, #272]	; (8005094 <prvProcessReceivedCommands+0x154>)
 8004f84:	18d3      	adds	r3, r2, r3
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2228      	movs	r2, #40	; 0x28
 8004f8e:	5c9b      	ldrb	r3, [r3, r2]
 8004f90:	2201      	movs	r2, #1
 8004f92:	4313      	orrs	r3, r2
 8004f94:	b2d9      	uxtb	r1, r3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2228      	movs	r2, #40	; 0x28
 8004f9a:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f9c:	1d3b      	adds	r3, r7, #4
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	18d1      	adds	r1, r2, r3
 8004fa6:	1d3b      	adds	r3, r7, #4
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	6978      	ldr	r0, [r7, #20]
 8004fae:	f7ff ff85 	bl	8004ebc <prvInsertTimerInActiveList>
 8004fb2:	1e03      	subs	r3, r0, #0
 8004fb4:	d05e      	beq.n	8005074 <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2228      	movs	r2, #40	; 0x28
 8004fba:	5c9b      	ldrb	r3, [r3, r2]
 8004fbc:	001a      	movs	r2, r3
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d00a      	beq.n	8004fda <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004fc4:	1d3b      	adds	r3, r7, #4
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	18d1      	adds	r1, r2, r3
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f7ff fe80 	bl	8004cd8 <prvReloadTimer>
 8004fd8:	e008      	b.n	8004fec <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2228      	movs	r2, #40	; 0x28
 8004fde:	5c9b      	ldrb	r3, [r3, r2]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4393      	bics	r3, r2
 8004fe4:	b2d9      	uxtb	r1, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2228      	movs	r2, #40	; 0x28
 8004fea:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	0010      	movs	r0, r2
 8004ff4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004ff6:	e03d      	b.n	8005074 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2228      	movs	r2, #40	; 0x28
 8004ffc:	5c9b      	ldrb	r3, [r3, r2]
 8004ffe:	2201      	movs	r2, #1
 8005000:	4393      	bics	r3, r2
 8005002:	b2d9      	uxtb	r1, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2228      	movs	r2, #40	; 0x28
 8005008:	5499      	strb	r1, [r3, r2]
                        break;
 800500a:	e033      	b.n	8005074 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2228      	movs	r2, #40	; 0x28
 8005010:	5c9b      	ldrb	r3, [r3, r2]
 8005012:	2201      	movs	r2, #1
 8005014:	4313      	orrs	r3, r2
 8005016:	b2d9      	uxtb	r1, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2228      	movs	r2, #40	; 0x28
 800501c:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800501e:	1d3b      	adds	r3, r7, #4
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <prvProcessReceivedCommands+0xf2>
 800502e:	b672      	cpsid	i
 8005030:	e7fe      	b.n	8005030 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	18d1      	adds	r1, r2, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	6978      	ldr	r0, [r7, #20]
 8005040:	f7ff ff3c 	bl	8004ebc <prvInsertTimerInActiveList>
                        break;
 8005044:	e016      	b.n	8005074 <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2228      	movs	r2, #40	; 0x28
 800504a:	5c9b      	ldrb	r3, [r3, r2]
 800504c:	001a      	movs	r2, r3
 800504e:	2302      	movs	r3, #2
 8005050:	4013      	ands	r3, r2
 8005052:	d104      	bne.n	800505e <prvProcessReceivedCommands+0x11e>
                            {
                                vPortFree( pxTimer );
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	0018      	movs	r0, r3
 8005058:	f000 fa5a 	bl	8005510 <vPortFree>
 800505c:	e00a      	b.n	8005074 <prvProcessReceivedCommands+0x134>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2228      	movs	r2, #40	; 0x28
 8005062:	5c9b      	ldrb	r3, [r3, r2]
 8005064:	2201      	movs	r2, #1
 8005066:	4393      	bics	r3, r2
 8005068:	b2d9      	uxtb	r1, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2228      	movs	r2, #40	; 0x28
 800506e:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005070:	e000      	b.n	8005074 <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005072:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005074:	4b08      	ldr	r3, [pc, #32]	; (8005098 <prvProcessReceivedCommands+0x158>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	1d39      	adds	r1, r7, #4
 800507a:	2200      	movs	r2, #0
 800507c:	0018      	movs	r0, r3
 800507e:	f7fe fd6e 	bl	8003b5e <xQueueReceive>
 8005082:	1e03      	subs	r3, r0, #0
 8005084:	d000      	beq.n	8005088 <prvProcessReceivedCommands+0x148>
 8005086:	e75f      	b.n	8004f48 <prvProcessReceivedCommands+0x8>
        }
    }
 8005088:	46c0      	nop			; (mov r8, r8)
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b006      	add	sp, #24
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	0800612c 	.word	0x0800612c
 8005098:	20000354 	.word	0x20000354

0800509c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050a2:	e00b      	b.n	80050bc <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050a4:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <prvSwitchTimerLists+0x48>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80050ae:	2301      	movs	r3, #1
 80050b0:	425a      	negs	r2, r3
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	0011      	movs	r1, r2
 80050b6:	0018      	movs	r0, r3
 80050b8:	f7ff fe30 	bl	8004d1c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <prvSwitchTimerLists+0x48>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1ee      	bne.n	80050a4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80050c6:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <prvSwitchTimerLists+0x48>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <prvSwitchTimerLists+0x4c>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <prvSwitchTimerLists+0x48>)
 80050d2:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 80050d4:	4b04      	ldr	r3, [pc, #16]	; (80050e8 <prvSwitchTimerLists+0x4c>)
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
    }
 80050da:	46c0      	nop			; (mov r8, r8)
 80050dc:	46bd      	mov	sp, r7
 80050de:	b002      	add	sp, #8
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	2000034c 	.word	0x2000034c
 80050e8:	20000350 	.word	0x20000350

080050ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80050f0:	f000 f8ce 	bl	8005290 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80050f4:	4b14      	ldr	r3, [pc, #80]	; (8005148 <prvCheckForValidListAndQueue+0x5c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d120      	bne.n	800513e <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 80050fc:	4b13      	ldr	r3, [pc, #76]	; (800514c <prvCheckForValidListAndQueue+0x60>)
 80050fe:	0018      	movs	r0, r3
 8005100:	f7fe fb98 	bl	8003834 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005104:	4b12      	ldr	r3, [pc, #72]	; (8005150 <prvCheckForValidListAndQueue+0x64>)
 8005106:	0018      	movs	r0, r3
 8005108:	f7fe fb94 	bl	8003834 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800510c:	4b11      	ldr	r3, [pc, #68]	; (8005154 <prvCheckForValidListAndQueue+0x68>)
 800510e:	4a0f      	ldr	r2, [pc, #60]	; (800514c <prvCheckForValidListAndQueue+0x60>)
 8005110:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005112:	4b11      	ldr	r3, [pc, #68]	; (8005158 <prvCheckForValidListAndQueue+0x6c>)
 8005114:	4a0e      	ldr	r2, [pc, #56]	; (8005150 <prvCheckForValidListAndQueue+0x64>)
 8005116:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005118:	2200      	movs	r2, #0
 800511a:	210c      	movs	r1, #12
 800511c:	2005      	movs	r0, #5
 800511e:	f7fe fc99 	bl	8003a54 <xQueueGenericCreate>
 8005122:	0002      	movs	r2, r0
 8005124:	4b08      	ldr	r3, [pc, #32]	; (8005148 <prvCheckForValidListAndQueue+0x5c>)
 8005126:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <prvCheckForValidListAndQueue+0x5c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d006      	beq.n	800513e <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <prvCheckForValidListAndQueue+0x5c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a09      	ldr	r2, [pc, #36]	; (800515c <prvCheckForValidListAndQueue+0x70>)
 8005136:	0011      	movs	r1, r2
 8005138:	0018      	movs	r0, r3
 800513a:	f7fe fe5f 	bl	8003dfc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800513e:	f000 f8b9 	bl	80052b4 <vPortExitCritical>
    }
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000354 	.word	0x20000354
 800514c:	20000324 	.word	0x20000324
 8005150:	20000338 	.word	0x20000338
 8005154:	2000034c 	.word	0x2000034c
 8005158:	20000350 	.word	0x20000350
 800515c:	0800609c 	.word	0x0800609c

08005160 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3b04      	subs	r3, #4
 8005170:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	0452      	lsls	r2, r2, #17
 8005178:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3b04      	subs	r3, #4
 800517e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3b04      	subs	r3, #4
 800518a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800518c:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <pxPortInitialiseStack+0x50>)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3b14      	subs	r3, #20
 8005196:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3b20      	subs	r3, #32
 80051a2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80051a4:	68fb      	ldr	r3, [r7, #12]
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b004      	add	sp, #16
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	080051b5 	.word	0x080051b5

080051b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80051be:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <prvTaskExitError+0x2c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	d001      	beq.n	80051ca <prvTaskExitError+0x16>
 80051c6:	b672      	cpsid	i
 80051c8:	e7fe      	b.n	80051c8 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 80051ca:	b672      	cpsid	i

    while( ulDummy == 0 )
 80051cc:	46c0      	nop			; (mov r8, r8)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0fc      	beq.n	80051ce <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80051d4:	46c0      	nop			; (mov r8, r8)
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	46bd      	mov	sp, r7
 80051da:	b002      	add	sp, #8
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	20000010 	.word	0x20000010

080051e4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 80051f0:	4a0b      	ldr	r2, [pc, #44]	; (8005220 <pxCurrentTCBConst2>)
 80051f2:	6813      	ldr	r3, [r2, #0]
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	3020      	adds	r0, #32
 80051f8:	f380 8809 	msr	PSP, r0
 80051fc:	2002      	movs	r0, #2
 80051fe:	f380 8814 	msr	CONTROL, r0
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005208:	46ae      	mov	lr, r5
 800520a:	bc08      	pop	{r3}
 800520c:	bc04      	pop	{r2}
 800520e:	b662      	cpsie	i
 8005210:	4718      	bx	r3
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	46c0      	nop			; (mov r8, r8)
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	46c0      	nop			; (mov r8, r8)

08005220 <pxCurrentTCBConst2>:
 8005220:	20000220 	.word	0x20000220
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8005224:	46c0      	nop			; (mov r8, r8)
 8005226:	46c0      	nop			; (mov r8, r8)

08005228 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800522c:	4b0e      	ldr	r3, [pc, #56]	; (8005268 <xPortStartScheduler+0x40>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <xPortStartScheduler+0x40>)
 8005232:	21ff      	movs	r1, #255	; 0xff
 8005234:	0409      	lsls	r1, r1, #16
 8005236:	430a      	orrs	r2, r1
 8005238:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <xPortStartScheduler+0x40>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <xPortStartScheduler+0x40>)
 8005240:	21ff      	movs	r1, #255	; 0xff
 8005242:	0609      	lsls	r1, r1, #24
 8005244:	430a      	orrs	r2, r1
 8005246:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005248:	f000 f898 	bl	800537c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800524c:	4b07      	ldr	r3, [pc, #28]	; (800526c <xPortStartScheduler+0x44>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8005252:	f7ff ffcd 	bl	80051f0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005256:	f7ff f9f3 	bl	8004640 <vTaskSwitchContext>
    prvTaskExitError();
 800525a:	f7ff ffab 	bl	80051b4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800525e:	2300      	movs	r3, #0
}
 8005260:	0018      	movs	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	e000ed20 	.word	0xe000ed20
 800526c:	20000010 	.word	0x20000010

08005270 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <vPortYield+0x1c>)
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	0552      	lsls	r2, r2, #21
 800527a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800527c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005280:	f3bf 8f6f 	isb	sy
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	e000ed04 	.word	0xe000ed04

08005290 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005294:	b672      	cpsid	i
    uxCriticalNesting++;
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <vPortEnterCritical+0x20>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <vPortEnterCritical+0x20>)
 800529e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 80052a0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80052a4:	f3bf 8f6f 	isb	sy
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	20000010 	.word	0x20000010

080052b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <vPortExitCritical+0x2c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <vPortExitCritical+0x10>
 80052c0:	b672      	cpsid	i
 80052c2:	e7fe      	b.n	80052c2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <vPortExitCritical+0x2c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	1e5a      	subs	r2, r3, #1
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <vPortExitCritical+0x2c>)
 80052cc:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 80052ce:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <vPortExitCritical+0x2c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d100      	bne.n	80052d8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80052d6:	b662      	cpsie	i
    }
}
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	20000010 	.word	0x20000010

080052e4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 80052e4:	f3ef 8010 	mrs	r0, PRIMASK
 80052e8:	b672      	cpsid	i
 80052ea:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80052ec:	46c0      	nop			; (mov r8, r8)
 80052ee:	0018      	movs	r0, r3

080052f0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 80052f0:	f380 8810 	msr	PRIMASK, r0
 80052f4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80052f6:	46c0      	nop			; (mov r8, r8)
	...

08005300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005300:	f3ef 8009 	mrs	r0, PSP
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <pxCurrentTCBConst>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	3820      	subs	r0, #32
 800530a:	6010      	str	r0, [r2, #0]
 800530c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800530e:	4644      	mov	r4, r8
 8005310:	464d      	mov	r5, r9
 8005312:	4656      	mov	r6, sl
 8005314:	465f      	mov	r7, fp
 8005316:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005318:	b508      	push	{r3, lr}
 800531a:	b672      	cpsid	i
 800531c:	f7ff f990 	bl	8004640 <vTaskSwitchContext>
 8005320:	b662      	cpsie	i
 8005322:	bc0c      	pop	{r2, r3}
 8005324:	6811      	ldr	r1, [r2, #0]
 8005326:	6808      	ldr	r0, [r1, #0]
 8005328:	3010      	adds	r0, #16
 800532a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800532c:	46a0      	mov	r8, r4
 800532e:	46a9      	mov	r9, r5
 8005330:	46b2      	mov	sl, r6
 8005332:	46bb      	mov	fp, r7
 8005334:	f380 8809 	msr	PSP, r0
 8005338:	3820      	subs	r0, #32
 800533a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800533c:	4718      	bx	r3
 800533e:	46c0      	nop			; (mov r8, r8)

08005340 <pxCurrentTCBConst>:
 8005340:	20000220 	.word	0x20000220
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	46c0      	nop			; (mov r8, r8)

08005348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800534e:	f7ff ffc9 	bl	80052e4 <ulSetInterruptMaskFromISR>
 8005352:	0003      	movs	r3, r0
 8005354:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005356:	f7ff f867 	bl	8004428 <xTaskIncrementTick>
 800535a:	1e03      	subs	r3, r0, #0
 800535c:	d003      	beq.n	8005366 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <SysTick_Handler+0x30>)
 8005360:	2280      	movs	r2, #128	; 0x80
 8005362:	0552      	lsls	r2, r2, #21
 8005364:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	0018      	movs	r0, r3
 800536a:	f7ff ffc1 	bl	80052f0 <vClearInterruptMaskFromISR>
}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b002      	add	sp, #8
 8005374:	bd80      	pop	{r7, pc}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005380:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <vPortSetupTimerInterrupt+0x34>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005386:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <vPortSetupTimerInterrupt+0x38>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <vPortSetupTimerInterrupt+0x3c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	22fa      	movs	r2, #250	; 0xfa
 8005392:	0091      	lsls	r1, r2, #2
 8005394:	0018      	movs	r0, r3
 8005396:	f7fa fec9 	bl	800012c <__udivsi3>
 800539a:	0003      	movs	r3, r0
 800539c:	001a      	movs	r2, r3
 800539e:	4b07      	ldr	r3, [pc, #28]	; (80053bc <vPortSetupTimerInterrupt+0x40>)
 80053a0:	3a01      	subs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053a4:	4b02      	ldr	r3, [pc, #8]	; (80053b0 <vPortSetupTimerInterrupt+0x34>)
 80053a6:	2207      	movs	r2, #7
 80053a8:	601a      	str	r2, [r3, #0]
}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	e000e010 	.word	0xe000e010
 80053b4:	e000e018 	.word	0xe000e018
 80053b8:	20000000 	.word	0x20000000
 80053bc:	e000e014 	.word	0xe000e014

080053c0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80053cc:	f7fe ff2a 	bl	8004224 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80053d0:	4b4a      	ldr	r3, [pc, #296]	; (80054fc <pvPortMalloc+0x13c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80053d8:	f000 f8e6 	bl	80055a8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d012      	beq.n	8005408 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80053e2:	2208      	movs	r2, #8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2107      	movs	r1, #7
 80053e8:	400b      	ands	r3, r1
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	3308      	adds	r3, #8
 80053ee:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	43db      	mvns	r3, r3
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d804      	bhi.n	8005404 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	18d3      	adds	r3, r2, r3
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	e001      	b.n	8005408 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	db68      	blt.n	80054e0 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d065      	beq.n	80054e0 <pvPortMalloc+0x120>
 8005414:	4b3a      	ldr	r3, [pc, #232]	; (8005500 <pvPortMalloc+0x140>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	429a      	cmp	r2, r3
 800541c:	d860      	bhi.n	80054e0 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800541e:	4b39      	ldr	r3, [pc, #228]	; (8005504 <pvPortMalloc+0x144>)
 8005420:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8005422:	4b38      	ldr	r3, [pc, #224]	; (8005504 <pvPortMalloc+0x144>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005428:	e004      	b.n	8005434 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	429a      	cmp	r2, r3
 800543c:	d903      	bls.n	8005446 <pvPortMalloc+0x86>
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f1      	bne.n	800542a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005446:	4b2d      	ldr	r3, [pc, #180]	; (80054fc <pvPortMalloc+0x13c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	429a      	cmp	r2, r3
 800544e:	d047      	beq.n	80054e0 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2208      	movs	r2, #8
 8005456:	189b      	adds	r3, r3, r2
 8005458:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	1ad2      	subs	r2, r2, r3
 800546a:	2308      	movs	r3, #8
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	429a      	cmp	r2, r3
 8005470:	d916      	bls.n	80054a0 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	18d3      	adds	r3, r2, r3
 8005478:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2207      	movs	r2, #7
 800547e:	4013      	ands	r3, r2
 8005480:	d001      	beq.n	8005486 <pvPortMalloc+0xc6>
 8005482:	b672      	cpsid	i
 8005484:	e7fe      	b.n	8005484 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	1ad2      	subs	r2, r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	0018      	movs	r0, r3
 800549c:	f000 f8de 	bl	800565c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054a0:	4b17      	ldr	r3, [pc, #92]	; (8005500 <pvPortMalloc+0x140>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	1ad2      	subs	r2, r2, r3
 80054aa:	4b15      	ldr	r3, [pc, #84]	; (8005500 <pvPortMalloc+0x140>)
 80054ac:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054ae:	4b14      	ldr	r3, [pc, #80]	; (8005500 <pvPortMalloc+0x140>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b15      	ldr	r3, [pc, #84]	; (8005508 <pvPortMalloc+0x148>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d203      	bcs.n	80054c2 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054ba:	4b11      	ldr	r3, [pc, #68]	; (8005500 <pvPortMalloc+0x140>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <pvPortMalloc+0x148>)
 80054c0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2280      	movs	r2, #128	; 0x80
 80054c8:	0612      	lsls	r2, r2, #24
 80054ca:	431a      	orrs	r2, r3
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <pvPortMalloc+0x14c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	4b0b      	ldr	r3, [pc, #44]	; (800550c <pvPortMalloc+0x14c>)
 80054de:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80054e0:	f7fe feac 	bl	800423c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2207      	movs	r2, #7
 80054e8:	4013      	ands	r3, r2
 80054ea:	d001      	beq.n	80054f0 <pvPortMalloc+0x130>
 80054ec:	b672      	cpsid	i
 80054ee:	e7fe      	b.n	80054ee <pvPortMalloc+0x12e>
    return pvReturn;
 80054f0:	697b      	ldr	r3, [r7, #20]
}
 80054f2:	0018      	movs	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b008      	add	sp, #32
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	20001ccc 	.word	0x20001ccc
 8005500:	20001cd0 	.word	0x20001cd0
 8005504:	20001cc4 	.word	0x20001cc4
 8005508:	20001cd4 	.word	0x20001cd4
 800550c:	20001cd8 	.word	0x20001cd8

08005510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d039      	beq.n	8005596 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005522:	2308      	movs	r3, #8
 8005524:	425b      	negs	r3, r3
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	18d3      	adds	r3, r2, r3
 800552a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	db01      	blt.n	800553c <vPortFree+0x2c>
 8005538:	b672      	cpsid	i
 800553a:	e7fe      	b.n	800553a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <vPortFree+0x38>
 8005544:	b672      	cpsid	i
 8005546:	e7fe      	b.n	8005546 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	0fdb      	lsrs	r3, r3, #31
 800554e:	1c1a      	adds	r2, r3, #0
 8005550:	2301      	movs	r3, #1
 8005552:	4013      	ands	r3, r2
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01d      	beq.n	8005596 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d119      	bne.n	8005596 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	085a      	lsrs	r2, r3, #1
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800556e:	f7fe fe59 	bl	8004224 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	4b0a      	ldr	r3, [pc, #40]	; (80055a0 <vPortFree+0x90>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	18d2      	adds	r2, r2, r3
 800557c:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <vPortFree+0x90>)
 800557e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	0018      	movs	r0, r3
 8005584:	f000 f86a 	bl	800565c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <vPortFree+0x94>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <vPortFree+0x94>)
 8005590:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8005592:	f7fe fe53 	bl	800423c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	46bd      	mov	sp, r7
 800559a:	b004      	add	sp, #16
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	20001cd0 	.word	0x20001cd0
 80055a4:	20001cdc 	.word	0x20001cdc

080055a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ae:	4b25      	ldr	r3, [pc, #148]	; (8005644 <prvHeapInit+0x9c>)
 80055b0:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80055b2:	4b25      	ldr	r3, [pc, #148]	; (8005648 <prvHeapInit+0xa0>)
 80055b4:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2207      	movs	r2, #7
 80055ba:	4013      	ands	r3, r2
 80055bc:	d00c      	beq.n	80055d8 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3307      	adds	r3, #7
 80055c2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2207      	movs	r2, #7
 80055c8:	4393      	bics	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad2      	subs	r2, r2, r3
 80055d2:	4b1d      	ldr	r3, [pc, #116]	; (8005648 <prvHeapInit+0xa0>)
 80055d4:	18d3      	adds	r3, r2, r3
 80055d6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055dc:	4b1b      	ldr	r3, [pc, #108]	; (800564c <prvHeapInit+0xa4>)
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80055e2:	4b1a      	ldr	r3, [pc, #104]	; (800564c <prvHeapInit+0xa4>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	18d3      	adds	r3, r2, r3
 80055ee:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80055f0:	2208      	movs	r2, #8
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2207      	movs	r2, #7
 80055fc:	4393      	bics	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4b13      	ldr	r3, [pc, #76]	; (8005650 <prvHeapInit+0xa8>)
 8005604:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8005606:	4b12      	ldr	r3, [pc, #72]	; (8005650 <prvHeapInit+0xa8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2200      	movs	r2, #0
 800560c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800560e:	4b10      	ldr	r3, [pc, #64]	; (8005650 <prvHeapInit+0xa8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	1ad2      	subs	r2, r2, r3
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005624:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <prvHeapInit+0xa8>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	4b08      	ldr	r3, [pc, #32]	; (8005654 <prvHeapInit+0xac>)
 8005632:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	4b07      	ldr	r3, [pc, #28]	; (8005658 <prvHeapInit+0xb0>)
 800563a:	601a      	str	r2, [r3, #0]
}
 800563c:	46c0      	nop			; (mov r8, r8)
 800563e:	46bd      	mov	sp, r7
 8005640:	b004      	add	sp, #16
 8005642:	bd80      	pop	{r7, pc}
 8005644:	00001964 	.word	0x00001964
 8005648:	20000360 	.word	0x20000360
 800564c:	20001cc4 	.word	0x20001cc4
 8005650:	20001ccc 	.word	0x20001ccc
 8005654:	20001cd4 	.word	0x20001cd4
 8005658:	20001cd0 	.word	0x20001cd0

0800565c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005664:	4b27      	ldr	r3, [pc, #156]	; (8005704 <prvInsertBlockIntoFreeList+0xa8>)
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	e002      	b.n	8005670 <prvInsertBlockIntoFreeList+0x14>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	429a      	cmp	r2, r3
 8005678:	d8f7      	bhi.n	800566a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	18d3      	adds	r3, r2, r3
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d108      	bne.n	800569e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	18d2      	adds	r2, r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	18d2      	adds	r2, r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d118      	bne.n	80056e4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4b14      	ldr	r3, [pc, #80]	; (8005708 <prvInsertBlockIntoFreeList+0xac>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d00d      	beq.n	80056da <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	18d2      	adds	r2, r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	e008      	b.n	80056ec <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056da:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <prvInsertBlockIntoFreeList+0xac>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e003      	b.n	80056ec <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d002      	beq.n	80056fa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	46bd      	mov	sp, r7
 80056fe:	b004      	add	sp, #16
 8005700:	bd80      	pop	{r7, pc}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	20001cc4 	.word	0x20001cc4
 8005708:	20001ccc 	.word	0x20001ccc

0800570c <__libc_init_array>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	2600      	movs	r6, #0
 8005710:	4d0c      	ldr	r5, [pc, #48]	; (8005744 <__libc_init_array+0x38>)
 8005712:	4c0d      	ldr	r4, [pc, #52]	; (8005748 <__libc_init_array+0x3c>)
 8005714:	1b64      	subs	r4, r4, r5
 8005716:	10a4      	asrs	r4, r4, #2
 8005718:	42a6      	cmp	r6, r4
 800571a:	d109      	bne.n	8005730 <__libc_init_array+0x24>
 800571c:	2600      	movs	r6, #0
 800571e:	f000 fc9b 	bl	8006058 <_init>
 8005722:	4d0a      	ldr	r5, [pc, #40]	; (800574c <__libc_init_array+0x40>)
 8005724:	4c0a      	ldr	r4, [pc, #40]	; (8005750 <__libc_init_array+0x44>)
 8005726:	1b64      	subs	r4, r4, r5
 8005728:	10a4      	asrs	r4, r4, #2
 800572a:	42a6      	cmp	r6, r4
 800572c:	d105      	bne.n	800573a <__libc_init_array+0x2e>
 800572e:	bd70      	pop	{r4, r5, r6, pc}
 8005730:	00b3      	lsls	r3, r6, #2
 8005732:	58eb      	ldr	r3, [r5, r3]
 8005734:	4798      	blx	r3
 8005736:	3601      	adds	r6, #1
 8005738:	e7ee      	b.n	8005718 <__libc_init_array+0xc>
 800573a:	00b3      	lsls	r3, r6, #2
 800573c:	58eb      	ldr	r3, [r5, r3]
 800573e:	4798      	blx	r3
 8005740:	3601      	adds	r6, #1
 8005742:	e7f2      	b.n	800572a <__libc_init_array+0x1e>
 8005744:	08006188 	.word	0x08006188
 8005748:	08006188 	.word	0x08006188
 800574c:	08006188 	.word	0x08006188
 8005750:	0800618c 	.word	0x0800618c

08005754 <memcpy>:
 8005754:	2300      	movs	r3, #0
 8005756:	b510      	push	{r4, lr}
 8005758:	429a      	cmp	r2, r3
 800575a:	d100      	bne.n	800575e <memcpy+0xa>
 800575c:	bd10      	pop	{r4, pc}
 800575e:	5ccc      	ldrb	r4, [r1, r3]
 8005760:	54c4      	strb	r4, [r0, r3]
 8005762:	3301      	adds	r3, #1
 8005764:	e7f8      	b.n	8005758 <memcpy+0x4>

08005766 <memset>:
 8005766:	0003      	movs	r3, r0
 8005768:	1882      	adds	r2, r0, r2
 800576a:	4293      	cmp	r3, r2
 800576c:	d100      	bne.n	8005770 <memset+0xa>
 800576e:	4770      	bx	lr
 8005770:	7019      	strb	r1, [r3, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	e7f9      	b.n	800576a <memset+0x4>
	...

08005778 <siprintf>:
 8005778:	b40e      	push	{r1, r2, r3}
 800577a:	b500      	push	{lr}
 800577c:	490b      	ldr	r1, [pc, #44]	; (80057ac <siprintf+0x34>)
 800577e:	b09c      	sub	sp, #112	; 0x70
 8005780:	ab1d      	add	r3, sp, #116	; 0x74
 8005782:	9002      	str	r0, [sp, #8]
 8005784:	9006      	str	r0, [sp, #24]
 8005786:	9107      	str	r1, [sp, #28]
 8005788:	9104      	str	r1, [sp, #16]
 800578a:	4809      	ldr	r0, [pc, #36]	; (80057b0 <siprintf+0x38>)
 800578c:	4909      	ldr	r1, [pc, #36]	; (80057b4 <siprintf+0x3c>)
 800578e:	cb04      	ldmia	r3!, {r2}
 8005790:	9105      	str	r1, [sp, #20]
 8005792:	6800      	ldr	r0, [r0, #0]
 8005794:	a902      	add	r1, sp, #8
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	f000 f870 	bl	800587c <_svfiprintf_r>
 800579c:	2300      	movs	r3, #0
 800579e:	9a02      	ldr	r2, [sp, #8]
 80057a0:	7013      	strb	r3, [r2, #0]
 80057a2:	b01c      	add	sp, #112	; 0x70
 80057a4:	bc08      	pop	{r3}
 80057a6:	b003      	add	sp, #12
 80057a8:	4718      	bx	r3
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	7fffffff 	.word	0x7fffffff
 80057b0:	20000014 	.word	0x20000014
 80057b4:	ffff0208 	.word	0xffff0208

080057b8 <__ssputs_r>:
 80057b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ba:	688e      	ldr	r6, [r1, #8]
 80057bc:	b085      	sub	sp, #20
 80057be:	0007      	movs	r7, r0
 80057c0:	000c      	movs	r4, r1
 80057c2:	9203      	str	r2, [sp, #12]
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	429e      	cmp	r6, r3
 80057c8:	d83c      	bhi.n	8005844 <__ssputs_r+0x8c>
 80057ca:	2390      	movs	r3, #144	; 0x90
 80057cc:	898a      	ldrh	r2, [r1, #12]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	421a      	tst	r2, r3
 80057d2:	d034      	beq.n	800583e <__ssputs_r+0x86>
 80057d4:	6909      	ldr	r1, [r1, #16]
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	6960      	ldr	r0, [r4, #20]
 80057da:	1a5b      	subs	r3, r3, r1
 80057dc:	9302      	str	r3, [sp, #8]
 80057de:	2303      	movs	r3, #3
 80057e0:	4343      	muls	r3, r0
 80057e2:	0fdd      	lsrs	r5, r3, #31
 80057e4:	18ed      	adds	r5, r5, r3
 80057e6:	9b01      	ldr	r3, [sp, #4]
 80057e8:	9802      	ldr	r0, [sp, #8]
 80057ea:	3301      	adds	r3, #1
 80057ec:	181b      	adds	r3, r3, r0
 80057ee:	106d      	asrs	r5, r5, #1
 80057f0:	42ab      	cmp	r3, r5
 80057f2:	d900      	bls.n	80057f6 <__ssputs_r+0x3e>
 80057f4:	001d      	movs	r5, r3
 80057f6:	0553      	lsls	r3, r2, #21
 80057f8:	d532      	bpl.n	8005860 <__ssputs_r+0xa8>
 80057fa:	0029      	movs	r1, r5
 80057fc:	0038      	movs	r0, r7
 80057fe:	f000 fb49 	bl	8005e94 <_malloc_r>
 8005802:	1e06      	subs	r6, r0, #0
 8005804:	d109      	bne.n	800581a <__ssputs_r+0x62>
 8005806:	230c      	movs	r3, #12
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	2340      	movs	r3, #64	; 0x40
 800580c:	2001      	movs	r0, #1
 800580e:	89a2      	ldrh	r2, [r4, #12]
 8005810:	4240      	negs	r0, r0
 8005812:	4313      	orrs	r3, r2
 8005814:	81a3      	strh	r3, [r4, #12]
 8005816:	b005      	add	sp, #20
 8005818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800581a:	9a02      	ldr	r2, [sp, #8]
 800581c:	6921      	ldr	r1, [r4, #16]
 800581e:	f7ff ff99 	bl	8005754 <memcpy>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	4a14      	ldr	r2, [pc, #80]	; (8005878 <__ssputs_r+0xc0>)
 8005826:	401a      	ands	r2, r3
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	4313      	orrs	r3, r2
 800582c:	81a3      	strh	r3, [r4, #12]
 800582e:	9b02      	ldr	r3, [sp, #8]
 8005830:	6126      	str	r6, [r4, #16]
 8005832:	18f6      	adds	r6, r6, r3
 8005834:	6026      	str	r6, [r4, #0]
 8005836:	6165      	str	r5, [r4, #20]
 8005838:	9e01      	ldr	r6, [sp, #4]
 800583a:	1aed      	subs	r5, r5, r3
 800583c:	60a5      	str	r5, [r4, #8]
 800583e:	9b01      	ldr	r3, [sp, #4]
 8005840:	429e      	cmp	r6, r3
 8005842:	d900      	bls.n	8005846 <__ssputs_r+0x8e>
 8005844:	9e01      	ldr	r6, [sp, #4]
 8005846:	0032      	movs	r2, r6
 8005848:	9903      	ldr	r1, [sp, #12]
 800584a:	6820      	ldr	r0, [r4, #0]
 800584c:	f000 faa3 	bl	8005d96 <memmove>
 8005850:	68a3      	ldr	r3, [r4, #8]
 8005852:	2000      	movs	r0, #0
 8005854:	1b9b      	subs	r3, r3, r6
 8005856:	60a3      	str	r3, [r4, #8]
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	199e      	adds	r6, r3, r6
 800585c:	6026      	str	r6, [r4, #0]
 800585e:	e7da      	b.n	8005816 <__ssputs_r+0x5e>
 8005860:	002a      	movs	r2, r5
 8005862:	0038      	movs	r0, r7
 8005864:	f000 fb8c 	bl	8005f80 <_realloc_r>
 8005868:	1e06      	subs	r6, r0, #0
 800586a:	d1e0      	bne.n	800582e <__ssputs_r+0x76>
 800586c:	0038      	movs	r0, r7
 800586e:	6921      	ldr	r1, [r4, #16]
 8005870:	f000 faa4 	bl	8005dbc <_free_r>
 8005874:	e7c7      	b.n	8005806 <__ssputs_r+0x4e>
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	fffffb7f 	.word	0xfffffb7f

0800587c <_svfiprintf_r>:
 800587c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800587e:	b0a1      	sub	sp, #132	; 0x84
 8005880:	9003      	str	r0, [sp, #12]
 8005882:	001d      	movs	r5, r3
 8005884:	898b      	ldrh	r3, [r1, #12]
 8005886:	000f      	movs	r7, r1
 8005888:	0016      	movs	r6, r2
 800588a:	061b      	lsls	r3, r3, #24
 800588c:	d511      	bpl.n	80058b2 <_svfiprintf_r+0x36>
 800588e:	690b      	ldr	r3, [r1, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10e      	bne.n	80058b2 <_svfiprintf_r+0x36>
 8005894:	2140      	movs	r1, #64	; 0x40
 8005896:	f000 fafd 	bl	8005e94 <_malloc_r>
 800589a:	6038      	str	r0, [r7, #0]
 800589c:	6138      	str	r0, [r7, #16]
 800589e:	2800      	cmp	r0, #0
 80058a0:	d105      	bne.n	80058ae <_svfiprintf_r+0x32>
 80058a2:	230c      	movs	r3, #12
 80058a4:	9a03      	ldr	r2, [sp, #12]
 80058a6:	3801      	subs	r0, #1
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	b021      	add	sp, #132	; 0x84
 80058ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ae:	2340      	movs	r3, #64	; 0x40
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	2300      	movs	r3, #0
 80058b4:	ac08      	add	r4, sp, #32
 80058b6:	6163      	str	r3, [r4, #20]
 80058b8:	3320      	adds	r3, #32
 80058ba:	7663      	strb	r3, [r4, #25]
 80058bc:	3310      	adds	r3, #16
 80058be:	76a3      	strb	r3, [r4, #26]
 80058c0:	9507      	str	r5, [sp, #28]
 80058c2:	0035      	movs	r5, r6
 80058c4:	782b      	ldrb	r3, [r5, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <_svfiprintf_r+0x52>
 80058ca:	2b25      	cmp	r3, #37	; 0x25
 80058cc:	d147      	bne.n	800595e <_svfiprintf_r+0xe2>
 80058ce:	1bab      	subs	r3, r5, r6
 80058d0:	9305      	str	r3, [sp, #20]
 80058d2:	42b5      	cmp	r5, r6
 80058d4:	d00c      	beq.n	80058f0 <_svfiprintf_r+0x74>
 80058d6:	0032      	movs	r2, r6
 80058d8:	0039      	movs	r1, r7
 80058da:	9803      	ldr	r0, [sp, #12]
 80058dc:	f7ff ff6c 	bl	80057b8 <__ssputs_r>
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d100      	bne.n	80058e6 <_svfiprintf_r+0x6a>
 80058e4:	e0ae      	b.n	8005a44 <_svfiprintf_r+0x1c8>
 80058e6:	6962      	ldr	r2, [r4, #20]
 80058e8:	9b05      	ldr	r3, [sp, #20]
 80058ea:	4694      	mov	ip, r2
 80058ec:	4463      	add	r3, ip
 80058ee:	6163      	str	r3, [r4, #20]
 80058f0:	782b      	ldrb	r3, [r5, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d100      	bne.n	80058f8 <_svfiprintf_r+0x7c>
 80058f6:	e0a5      	b.n	8005a44 <_svfiprintf_r+0x1c8>
 80058f8:	2201      	movs	r2, #1
 80058fa:	2300      	movs	r3, #0
 80058fc:	4252      	negs	r2, r2
 80058fe:	6062      	str	r2, [r4, #4]
 8005900:	a904      	add	r1, sp, #16
 8005902:	3254      	adds	r2, #84	; 0x54
 8005904:	1852      	adds	r2, r2, r1
 8005906:	1c6e      	adds	r6, r5, #1
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	60e3      	str	r3, [r4, #12]
 800590c:	60a3      	str	r3, [r4, #8]
 800590e:	7013      	strb	r3, [r2, #0]
 8005910:	65a3      	str	r3, [r4, #88]	; 0x58
 8005912:	2205      	movs	r2, #5
 8005914:	7831      	ldrb	r1, [r6, #0]
 8005916:	4854      	ldr	r0, [pc, #336]	; (8005a68 <_svfiprintf_r+0x1ec>)
 8005918:	f000 fa32 	bl	8005d80 <memchr>
 800591c:	1c75      	adds	r5, r6, #1
 800591e:	2800      	cmp	r0, #0
 8005920:	d11f      	bne.n	8005962 <_svfiprintf_r+0xe6>
 8005922:	6822      	ldr	r2, [r4, #0]
 8005924:	06d3      	lsls	r3, r2, #27
 8005926:	d504      	bpl.n	8005932 <_svfiprintf_r+0xb6>
 8005928:	2353      	movs	r3, #83	; 0x53
 800592a:	a904      	add	r1, sp, #16
 800592c:	185b      	adds	r3, r3, r1
 800592e:	2120      	movs	r1, #32
 8005930:	7019      	strb	r1, [r3, #0]
 8005932:	0713      	lsls	r3, r2, #28
 8005934:	d504      	bpl.n	8005940 <_svfiprintf_r+0xc4>
 8005936:	2353      	movs	r3, #83	; 0x53
 8005938:	a904      	add	r1, sp, #16
 800593a:	185b      	adds	r3, r3, r1
 800593c:	212b      	movs	r1, #43	; 0x2b
 800593e:	7019      	strb	r1, [r3, #0]
 8005940:	7833      	ldrb	r3, [r6, #0]
 8005942:	2b2a      	cmp	r3, #42	; 0x2a
 8005944:	d016      	beq.n	8005974 <_svfiprintf_r+0xf8>
 8005946:	0035      	movs	r5, r6
 8005948:	2100      	movs	r1, #0
 800594a:	200a      	movs	r0, #10
 800594c:	68e3      	ldr	r3, [r4, #12]
 800594e:	782a      	ldrb	r2, [r5, #0]
 8005950:	1c6e      	adds	r6, r5, #1
 8005952:	3a30      	subs	r2, #48	; 0x30
 8005954:	2a09      	cmp	r2, #9
 8005956:	d94e      	bls.n	80059f6 <_svfiprintf_r+0x17a>
 8005958:	2900      	cmp	r1, #0
 800595a:	d111      	bne.n	8005980 <_svfiprintf_r+0x104>
 800595c:	e017      	b.n	800598e <_svfiprintf_r+0x112>
 800595e:	3501      	adds	r5, #1
 8005960:	e7b0      	b.n	80058c4 <_svfiprintf_r+0x48>
 8005962:	4b41      	ldr	r3, [pc, #260]	; (8005a68 <_svfiprintf_r+0x1ec>)
 8005964:	6822      	ldr	r2, [r4, #0]
 8005966:	1ac0      	subs	r0, r0, r3
 8005968:	2301      	movs	r3, #1
 800596a:	4083      	lsls	r3, r0
 800596c:	4313      	orrs	r3, r2
 800596e:	002e      	movs	r6, r5
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	e7ce      	b.n	8005912 <_svfiprintf_r+0x96>
 8005974:	9b07      	ldr	r3, [sp, #28]
 8005976:	1d19      	adds	r1, r3, #4
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	9107      	str	r1, [sp, #28]
 800597c:	2b00      	cmp	r3, #0
 800597e:	db01      	blt.n	8005984 <_svfiprintf_r+0x108>
 8005980:	930b      	str	r3, [sp, #44]	; 0x2c
 8005982:	e004      	b.n	800598e <_svfiprintf_r+0x112>
 8005984:	425b      	negs	r3, r3
 8005986:	60e3      	str	r3, [r4, #12]
 8005988:	2302      	movs	r3, #2
 800598a:	4313      	orrs	r3, r2
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	782b      	ldrb	r3, [r5, #0]
 8005990:	2b2e      	cmp	r3, #46	; 0x2e
 8005992:	d10a      	bne.n	80059aa <_svfiprintf_r+0x12e>
 8005994:	786b      	ldrb	r3, [r5, #1]
 8005996:	2b2a      	cmp	r3, #42	; 0x2a
 8005998:	d135      	bne.n	8005a06 <_svfiprintf_r+0x18a>
 800599a:	9b07      	ldr	r3, [sp, #28]
 800599c:	3502      	adds	r5, #2
 800599e:	1d1a      	adds	r2, r3, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	9207      	str	r2, [sp, #28]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	db2b      	blt.n	8005a00 <_svfiprintf_r+0x184>
 80059a8:	9309      	str	r3, [sp, #36]	; 0x24
 80059aa:	4e30      	ldr	r6, [pc, #192]	; (8005a6c <_svfiprintf_r+0x1f0>)
 80059ac:	2203      	movs	r2, #3
 80059ae:	0030      	movs	r0, r6
 80059b0:	7829      	ldrb	r1, [r5, #0]
 80059b2:	f000 f9e5 	bl	8005d80 <memchr>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d006      	beq.n	80059c8 <_svfiprintf_r+0x14c>
 80059ba:	2340      	movs	r3, #64	; 0x40
 80059bc:	1b80      	subs	r0, r0, r6
 80059be:	4083      	lsls	r3, r0
 80059c0:	6822      	ldr	r2, [r4, #0]
 80059c2:	3501      	adds	r5, #1
 80059c4:	4313      	orrs	r3, r2
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	7829      	ldrb	r1, [r5, #0]
 80059ca:	2206      	movs	r2, #6
 80059cc:	4828      	ldr	r0, [pc, #160]	; (8005a70 <_svfiprintf_r+0x1f4>)
 80059ce:	1c6e      	adds	r6, r5, #1
 80059d0:	7621      	strb	r1, [r4, #24]
 80059d2:	f000 f9d5 	bl	8005d80 <memchr>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d03c      	beq.n	8005a54 <_svfiprintf_r+0x1d8>
 80059da:	4b26      	ldr	r3, [pc, #152]	; (8005a74 <_svfiprintf_r+0x1f8>)
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d125      	bne.n	8005a2c <_svfiprintf_r+0x1b0>
 80059e0:	2207      	movs	r2, #7
 80059e2:	9b07      	ldr	r3, [sp, #28]
 80059e4:	3307      	adds	r3, #7
 80059e6:	4393      	bics	r3, r2
 80059e8:	3308      	adds	r3, #8
 80059ea:	9307      	str	r3, [sp, #28]
 80059ec:	6963      	ldr	r3, [r4, #20]
 80059ee:	9a04      	ldr	r2, [sp, #16]
 80059f0:	189b      	adds	r3, r3, r2
 80059f2:	6163      	str	r3, [r4, #20]
 80059f4:	e765      	b.n	80058c2 <_svfiprintf_r+0x46>
 80059f6:	4343      	muls	r3, r0
 80059f8:	0035      	movs	r5, r6
 80059fa:	2101      	movs	r1, #1
 80059fc:	189b      	adds	r3, r3, r2
 80059fe:	e7a6      	b.n	800594e <_svfiprintf_r+0xd2>
 8005a00:	2301      	movs	r3, #1
 8005a02:	425b      	negs	r3, r3
 8005a04:	e7d0      	b.n	80059a8 <_svfiprintf_r+0x12c>
 8005a06:	2300      	movs	r3, #0
 8005a08:	200a      	movs	r0, #10
 8005a0a:	001a      	movs	r2, r3
 8005a0c:	3501      	adds	r5, #1
 8005a0e:	6063      	str	r3, [r4, #4]
 8005a10:	7829      	ldrb	r1, [r5, #0]
 8005a12:	1c6e      	adds	r6, r5, #1
 8005a14:	3930      	subs	r1, #48	; 0x30
 8005a16:	2909      	cmp	r1, #9
 8005a18:	d903      	bls.n	8005a22 <_svfiprintf_r+0x1a6>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0c5      	beq.n	80059aa <_svfiprintf_r+0x12e>
 8005a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8005a20:	e7c3      	b.n	80059aa <_svfiprintf_r+0x12e>
 8005a22:	4342      	muls	r2, r0
 8005a24:	0035      	movs	r5, r6
 8005a26:	2301      	movs	r3, #1
 8005a28:	1852      	adds	r2, r2, r1
 8005a2a:	e7f1      	b.n	8005a10 <_svfiprintf_r+0x194>
 8005a2c:	ab07      	add	r3, sp, #28
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	003a      	movs	r2, r7
 8005a32:	0021      	movs	r1, r4
 8005a34:	4b10      	ldr	r3, [pc, #64]	; (8005a78 <_svfiprintf_r+0x1fc>)
 8005a36:	9803      	ldr	r0, [sp, #12]
 8005a38:	e000      	b.n	8005a3c <_svfiprintf_r+0x1c0>
 8005a3a:	bf00      	nop
 8005a3c:	9004      	str	r0, [sp, #16]
 8005a3e:	9b04      	ldr	r3, [sp, #16]
 8005a40:	3301      	adds	r3, #1
 8005a42:	d1d3      	bne.n	80059ec <_svfiprintf_r+0x170>
 8005a44:	89bb      	ldrh	r3, [r7, #12]
 8005a46:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a48:	065b      	lsls	r3, r3, #25
 8005a4a:	d400      	bmi.n	8005a4e <_svfiprintf_r+0x1d2>
 8005a4c:	e72d      	b.n	80058aa <_svfiprintf_r+0x2e>
 8005a4e:	2001      	movs	r0, #1
 8005a50:	4240      	negs	r0, r0
 8005a52:	e72a      	b.n	80058aa <_svfiprintf_r+0x2e>
 8005a54:	ab07      	add	r3, sp, #28
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	003a      	movs	r2, r7
 8005a5a:	0021      	movs	r1, r4
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <_svfiprintf_r+0x1fc>)
 8005a5e:	9803      	ldr	r0, [sp, #12]
 8005a60:	f000 f87c 	bl	8005b5c <_printf_i>
 8005a64:	e7ea      	b.n	8005a3c <_svfiprintf_r+0x1c0>
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	08006154 	.word	0x08006154
 8005a6c:	0800615a 	.word	0x0800615a
 8005a70:	0800615e 	.word	0x0800615e
 8005a74:	00000000 	.word	0x00000000
 8005a78:	080057b9 	.word	0x080057b9

08005a7c <_printf_common>:
 8005a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a7e:	0015      	movs	r5, r2
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	688a      	ldr	r2, [r1, #8]
 8005a84:	690b      	ldr	r3, [r1, #16]
 8005a86:	000c      	movs	r4, r1
 8005a88:	9000      	str	r0, [sp, #0]
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	da00      	bge.n	8005a90 <_printf_common+0x14>
 8005a8e:	0013      	movs	r3, r2
 8005a90:	0022      	movs	r2, r4
 8005a92:	602b      	str	r3, [r5, #0]
 8005a94:	3243      	adds	r2, #67	; 0x43
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	2a00      	cmp	r2, #0
 8005a9a:	d001      	beq.n	8005aa0 <_printf_common+0x24>
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	069b      	lsls	r3, r3, #26
 8005aa4:	d502      	bpl.n	8005aac <_printf_common+0x30>
 8005aa6:	682b      	ldr	r3, [r5, #0]
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	6822      	ldr	r2, [r4, #0]
 8005aae:	2306      	movs	r3, #6
 8005ab0:	0017      	movs	r7, r2
 8005ab2:	401f      	ands	r7, r3
 8005ab4:	421a      	tst	r2, r3
 8005ab6:	d027      	beq.n	8005b08 <_printf_common+0x8c>
 8005ab8:	0023      	movs	r3, r4
 8005aba:	3343      	adds	r3, #67	; 0x43
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	1e5a      	subs	r2, r3, #1
 8005ac0:	4193      	sbcs	r3, r2
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	0692      	lsls	r2, r2, #26
 8005ac6:	d430      	bmi.n	8005b2a <_printf_common+0xae>
 8005ac8:	0022      	movs	r2, r4
 8005aca:	9901      	ldr	r1, [sp, #4]
 8005acc:	9800      	ldr	r0, [sp, #0]
 8005ace:	9e08      	ldr	r6, [sp, #32]
 8005ad0:	3243      	adds	r2, #67	; 0x43
 8005ad2:	47b0      	blx	r6
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d025      	beq.n	8005b24 <_printf_common+0xa8>
 8005ad8:	2306      	movs	r3, #6
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	682a      	ldr	r2, [r5, #0]
 8005ade:	68e1      	ldr	r1, [r4, #12]
 8005ae0:	2500      	movs	r5, #0
 8005ae2:	4003      	ands	r3, r0
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d103      	bne.n	8005af0 <_printf_common+0x74>
 8005ae8:	1a8d      	subs	r5, r1, r2
 8005aea:	43eb      	mvns	r3, r5
 8005aec:	17db      	asrs	r3, r3, #31
 8005aee:	401d      	ands	r5, r3
 8005af0:	68a3      	ldr	r3, [r4, #8]
 8005af2:	6922      	ldr	r2, [r4, #16]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	dd01      	ble.n	8005afc <_printf_common+0x80>
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	18ed      	adds	r5, r5, r3
 8005afc:	2700      	movs	r7, #0
 8005afe:	42bd      	cmp	r5, r7
 8005b00:	d120      	bne.n	8005b44 <_printf_common+0xc8>
 8005b02:	2000      	movs	r0, #0
 8005b04:	e010      	b.n	8005b28 <_printf_common+0xac>
 8005b06:	3701      	adds	r7, #1
 8005b08:	68e3      	ldr	r3, [r4, #12]
 8005b0a:	682a      	ldr	r2, [r5, #0]
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	42bb      	cmp	r3, r7
 8005b10:	ddd2      	ble.n	8005ab8 <_printf_common+0x3c>
 8005b12:	0022      	movs	r2, r4
 8005b14:	2301      	movs	r3, #1
 8005b16:	9901      	ldr	r1, [sp, #4]
 8005b18:	9800      	ldr	r0, [sp, #0]
 8005b1a:	9e08      	ldr	r6, [sp, #32]
 8005b1c:	3219      	adds	r2, #25
 8005b1e:	47b0      	blx	r6
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d1f0      	bne.n	8005b06 <_printf_common+0x8a>
 8005b24:	2001      	movs	r0, #1
 8005b26:	4240      	negs	r0, r0
 8005b28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b2a:	2030      	movs	r0, #48	; 0x30
 8005b2c:	18e1      	adds	r1, r4, r3
 8005b2e:	3143      	adds	r1, #67	; 0x43
 8005b30:	7008      	strb	r0, [r1, #0]
 8005b32:	0021      	movs	r1, r4
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	3145      	adds	r1, #69	; 0x45
 8005b38:	7809      	ldrb	r1, [r1, #0]
 8005b3a:	18a2      	adds	r2, r4, r2
 8005b3c:	3243      	adds	r2, #67	; 0x43
 8005b3e:	3302      	adds	r3, #2
 8005b40:	7011      	strb	r1, [r2, #0]
 8005b42:	e7c1      	b.n	8005ac8 <_printf_common+0x4c>
 8005b44:	0022      	movs	r2, r4
 8005b46:	2301      	movs	r3, #1
 8005b48:	9901      	ldr	r1, [sp, #4]
 8005b4a:	9800      	ldr	r0, [sp, #0]
 8005b4c:	9e08      	ldr	r6, [sp, #32]
 8005b4e:	321a      	adds	r2, #26
 8005b50:	47b0      	blx	r6
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d0e6      	beq.n	8005b24 <_printf_common+0xa8>
 8005b56:	3701      	adds	r7, #1
 8005b58:	e7d1      	b.n	8005afe <_printf_common+0x82>
	...

08005b5c <_printf_i>:
 8005b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5e:	b08b      	sub	sp, #44	; 0x2c
 8005b60:	9206      	str	r2, [sp, #24]
 8005b62:	000a      	movs	r2, r1
 8005b64:	3243      	adds	r2, #67	; 0x43
 8005b66:	9307      	str	r3, [sp, #28]
 8005b68:	9005      	str	r0, [sp, #20]
 8005b6a:	9204      	str	r2, [sp, #16]
 8005b6c:	7e0a      	ldrb	r2, [r1, #24]
 8005b6e:	000c      	movs	r4, r1
 8005b70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b72:	2a78      	cmp	r2, #120	; 0x78
 8005b74:	d807      	bhi.n	8005b86 <_printf_i+0x2a>
 8005b76:	2a62      	cmp	r2, #98	; 0x62
 8005b78:	d809      	bhi.n	8005b8e <_printf_i+0x32>
 8005b7a:	2a00      	cmp	r2, #0
 8005b7c:	d100      	bne.n	8005b80 <_printf_i+0x24>
 8005b7e:	e0c1      	b.n	8005d04 <_printf_i+0x1a8>
 8005b80:	2a58      	cmp	r2, #88	; 0x58
 8005b82:	d100      	bne.n	8005b86 <_printf_i+0x2a>
 8005b84:	e08c      	b.n	8005ca0 <_printf_i+0x144>
 8005b86:	0026      	movs	r6, r4
 8005b88:	3642      	adds	r6, #66	; 0x42
 8005b8a:	7032      	strb	r2, [r6, #0]
 8005b8c:	e022      	b.n	8005bd4 <_printf_i+0x78>
 8005b8e:	0010      	movs	r0, r2
 8005b90:	3863      	subs	r0, #99	; 0x63
 8005b92:	2815      	cmp	r0, #21
 8005b94:	d8f7      	bhi.n	8005b86 <_printf_i+0x2a>
 8005b96:	f7fa fabf 	bl	8000118 <__gnu_thumb1_case_shi>
 8005b9a:	0016      	.short	0x0016
 8005b9c:	fff6001f 	.word	0xfff6001f
 8005ba0:	fff6fff6 	.word	0xfff6fff6
 8005ba4:	001ffff6 	.word	0x001ffff6
 8005ba8:	fff6fff6 	.word	0xfff6fff6
 8005bac:	fff6fff6 	.word	0xfff6fff6
 8005bb0:	003600a8 	.word	0x003600a8
 8005bb4:	fff6009a 	.word	0xfff6009a
 8005bb8:	00b9fff6 	.word	0x00b9fff6
 8005bbc:	0036fff6 	.word	0x0036fff6
 8005bc0:	fff6fff6 	.word	0xfff6fff6
 8005bc4:	009e      	.short	0x009e
 8005bc6:	0026      	movs	r6, r4
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	3642      	adds	r6, #66	; 0x42
 8005bcc:	1d11      	adds	r1, r2, #4
 8005bce:	6019      	str	r1, [r3, #0]
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	7033      	strb	r3, [r6, #0]
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0a7      	b.n	8005d28 <_printf_i+0x1cc>
 8005bd8:	6808      	ldr	r0, [r1, #0]
 8005bda:	6819      	ldr	r1, [r3, #0]
 8005bdc:	1d0a      	adds	r2, r1, #4
 8005bde:	0605      	lsls	r5, r0, #24
 8005be0:	d50b      	bpl.n	8005bfa <_printf_i+0x9e>
 8005be2:	680d      	ldr	r5, [r1, #0]
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	2d00      	cmp	r5, #0
 8005be8:	da03      	bge.n	8005bf2 <_printf_i+0x96>
 8005bea:	232d      	movs	r3, #45	; 0x2d
 8005bec:	9a04      	ldr	r2, [sp, #16]
 8005bee:	426d      	negs	r5, r5
 8005bf0:	7013      	strb	r3, [r2, #0]
 8005bf2:	4b61      	ldr	r3, [pc, #388]	; (8005d78 <_printf_i+0x21c>)
 8005bf4:	270a      	movs	r7, #10
 8005bf6:	9303      	str	r3, [sp, #12]
 8005bf8:	e01b      	b.n	8005c32 <_printf_i+0xd6>
 8005bfa:	680d      	ldr	r5, [r1, #0]
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	0641      	lsls	r1, r0, #25
 8005c00:	d5f1      	bpl.n	8005be6 <_printf_i+0x8a>
 8005c02:	b22d      	sxth	r5, r5
 8005c04:	e7ef      	b.n	8005be6 <_printf_i+0x8a>
 8005c06:	680d      	ldr	r5, [r1, #0]
 8005c08:	6819      	ldr	r1, [r3, #0]
 8005c0a:	1d08      	adds	r0, r1, #4
 8005c0c:	6018      	str	r0, [r3, #0]
 8005c0e:	062e      	lsls	r6, r5, #24
 8005c10:	d501      	bpl.n	8005c16 <_printf_i+0xba>
 8005c12:	680d      	ldr	r5, [r1, #0]
 8005c14:	e003      	b.n	8005c1e <_printf_i+0xc2>
 8005c16:	066d      	lsls	r5, r5, #25
 8005c18:	d5fb      	bpl.n	8005c12 <_printf_i+0xb6>
 8005c1a:	680d      	ldr	r5, [r1, #0]
 8005c1c:	b2ad      	uxth	r5, r5
 8005c1e:	4b56      	ldr	r3, [pc, #344]	; (8005d78 <_printf_i+0x21c>)
 8005c20:	2708      	movs	r7, #8
 8005c22:	9303      	str	r3, [sp, #12]
 8005c24:	2a6f      	cmp	r2, #111	; 0x6f
 8005c26:	d000      	beq.n	8005c2a <_printf_i+0xce>
 8005c28:	3702      	adds	r7, #2
 8005c2a:	0023      	movs	r3, r4
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	3343      	adds	r3, #67	; 0x43
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	6863      	ldr	r3, [r4, #4]
 8005c34:	60a3      	str	r3, [r4, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	db03      	blt.n	8005c42 <_printf_i+0xe6>
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	6821      	ldr	r1, [r4, #0]
 8005c3e:	4391      	bics	r1, r2
 8005c40:	6021      	str	r1, [r4, #0]
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	d102      	bne.n	8005c4c <_printf_i+0xf0>
 8005c46:	9e04      	ldr	r6, [sp, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <_printf_i+0x10a>
 8005c4c:	9e04      	ldr	r6, [sp, #16]
 8005c4e:	0028      	movs	r0, r5
 8005c50:	0039      	movs	r1, r7
 8005c52:	f7fa faf1 	bl	8000238 <__aeabi_uidivmod>
 8005c56:	9b03      	ldr	r3, [sp, #12]
 8005c58:	3e01      	subs	r6, #1
 8005c5a:	5c5b      	ldrb	r3, [r3, r1]
 8005c5c:	7033      	strb	r3, [r6, #0]
 8005c5e:	002b      	movs	r3, r5
 8005c60:	0005      	movs	r5, r0
 8005c62:	429f      	cmp	r7, r3
 8005c64:	d9f3      	bls.n	8005c4e <_printf_i+0xf2>
 8005c66:	2f08      	cmp	r7, #8
 8005c68:	d109      	bne.n	8005c7e <_printf_i+0x122>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	07db      	lsls	r3, r3, #31
 8005c6e:	d506      	bpl.n	8005c7e <_printf_i+0x122>
 8005c70:	6863      	ldr	r3, [r4, #4]
 8005c72:	6922      	ldr	r2, [r4, #16]
 8005c74:	4293      	cmp	r3, r2
 8005c76:	dc02      	bgt.n	8005c7e <_printf_i+0x122>
 8005c78:	2330      	movs	r3, #48	; 0x30
 8005c7a:	3e01      	subs	r6, #1
 8005c7c:	7033      	strb	r3, [r6, #0]
 8005c7e:	9b04      	ldr	r3, [sp, #16]
 8005c80:	1b9b      	subs	r3, r3, r6
 8005c82:	6123      	str	r3, [r4, #16]
 8005c84:	9b07      	ldr	r3, [sp, #28]
 8005c86:	0021      	movs	r1, r4
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	9805      	ldr	r0, [sp, #20]
 8005c8c:	9b06      	ldr	r3, [sp, #24]
 8005c8e:	aa09      	add	r2, sp, #36	; 0x24
 8005c90:	f7ff fef4 	bl	8005a7c <_printf_common>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d14c      	bne.n	8005d32 <_printf_i+0x1d6>
 8005c98:	2001      	movs	r0, #1
 8005c9a:	4240      	negs	r0, r0
 8005c9c:	b00b      	add	sp, #44	; 0x2c
 8005c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca0:	3145      	adds	r1, #69	; 0x45
 8005ca2:	700a      	strb	r2, [r1, #0]
 8005ca4:	4a34      	ldr	r2, [pc, #208]	; (8005d78 <_printf_i+0x21c>)
 8005ca6:	9203      	str	r2, [sp, #12]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	6821      	ldr	r1, [r4, #0]
 8005cac:	ca20      	ldmia	r2!, {r5}
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	0608      	lsls	r0, r1, #24
 8005cb2:	d516      	bpl.n	8005ce2 <_printf_i+0x186>
 8005cb4:	07cb      	lsls	r3, r1, #31
 8005cb6:	d502      	bpl.n	8005cbe <_printf_i+0x162>
 8005cb8:	2320      	movs	r3, #32
 8005cba:	4319      	orrs	r1, r3
 8005cbc:	6021      	str	r1, [r4, #0]
 8005cbe:	2710      	movs	r7, #16
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	d1b2      	bne.n	8005c2a <_printf_i+0xce>
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	439a      	bics	r2, r3
 8005cca:	6022      	str	r2, [r4, #0]
 8005ccc:	e7ad      	b.n	8005c2a <_printf_i+0xce>
 8005cce:	2220      	movs	r2, #32
 8005cd0:	6809      	ldr	r1, [r1, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	6022      	str	r2, [r4, #0]
 8005cd6:	0022      	movs	r2, r4
 8005cd8:	2178      	movs	r1, #120	; 0x78
 8005cda:	3245      	adds	r2, #69	; 0x45
 8005cdc:	7011      	strb	r1, [r2, #0]
 8005cde:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <_printf_i+0x220>)
 8005ce0:	e7e1      	b.n	8005ca6 <_printf_i+0x14a>
 8005ce2:	0648      	lsls	r0, r1, #25
 8005ce4:	d5e6      	bpl.n	8005cb4 <_printf_i+0x158>
 8005ce6:	b2ad      	uxth	r5, r5
 8005ce8:	e7e4      	b.n	8005cb4 <_printf_i+0x158>
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	680d      	ldr	r5, [r1, #0]
 8005cee:	1d10      	adds	r0, r2, #4
 8005cf0:	6949      	ldr	r1, [r1, #20]
 8005cf2:	6018      	str	r0, [r3, #0]
 8005cf4:	6813      	ldr	r3, [r2, #0]
 8005cf6:	062e      	lsls	r6, r5, #24
 8005cf8:	d501      	bpl.n	8005cfe <_printf_i+0x1a2>
 8005cfa:	6019      	str	r1, [r3, #0]
 8005cfc:	e002      	b.n	8005d04 <_printf_i+0x1a8>
 8005cfe:	066d      	lsls	r5, r5, #25
 8005d00:	d5fb      	bpl.n	8005cfa <_printf_i+0x19e>
 8005d02:	8019      	strh	r1, [r3, #0]
 8005d04:	2300      	movs	r3, #0
 8005d06:	9e04      	ldr	r6, [sp, #16]
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	e7bb      	b.n	8005c84 <_printf_i+0x128>
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	1d11      	adds	r1, r2, #4
 8005d10:	6019      	str	r1, [r3, #0]
 8005d12:	6816      	ldr	r6, [r2, #0]
 8005d14:	2100      	movs	r1, #0
 8005d16:	0030      	movs	r0, r6
 8005d18:	6862      	ldr	r2, [r4, #4]
 8005d1a:	f000 f831 	bl	8005d80 <memchr>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d001      	beq.n	8005d26 <_printf_i+0x1ca>
 8005d22:	1b80      	subs	r0, r0, r6
 8005d24:	6060      	str	r0, [r4, #4]
 8005d26:	6863      	ldr	r3, [r4, #4]
 8005d28:	6123      	str	r3, [r4, #16]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	9a04      	ldr	r2, [sp, #16]
 8005d2e:	7013      	strb	r3, [r2, #0]
 8005d30:	e7a8      	b.n	8005c84 <_printf_i+0x128>
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	0032      	movs	r2, r6
 8005d36:	9906      	ldr	r1, [sp, #24]
 8005d38:	9805      	ldr	r0, [sp, #20]
 8005d3a:	9d07      	ldr	r5, [sp, #28]
 8005d3c:	47a8      	blx	r5
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d0aa      	beq.n	8005c98 <_printf_i+0x13c>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	079b      	lsls	r3, r3, #30
 8005d46:	d415      	bmi.n	8005d74 <_printf_i+0x218>
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	68e0      	ldr	r0, [r4, #12]
 8005d4c:	4298      	cmp	r0, r3
 8005d4e:	daa5      	bge.n	8005c9c <_printf_i+0x140>
 8005d50:	0018      	movs	r0, r3
 8005d52:	e7a3      	b.n	8005c9c <_printf_i+0x140>
 8005d54:	0022      	movs	r2, r4
 8005d56:	2301      	movs	r3, #1
 8005d58:	9906      	ldr	r1, [sp, #24]
 8005d5a:	9805      	ldr	r0, [sp, #20]
 8005d5c:	9e07      	ldr	r6, [sp, #28]
 8005d5e:	3219      	adds	r2, #25
 8005d60:	47b0      	blx	r6
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	d098      	beq.n	8005c98 <_printf_i+0x13c>
 8005d66:	3501      	adds	r5, #1
 8005d68:	68e3      	ldr	r3, [r4, #12]
 8005d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d6c:	1a9b      	subs	r3, r3, r2
 8005d6e:	42ab      	cmp	r3, r5
 8005d70:	dcf0      	bgt.n	8005d54 <_printf_i+0x1f8>
 8005d72:	e7e9      	b.n	8005d48 <_printf_i+0x1ec>
 8005d74:	2500      	movs	r5, #0
 8005d76:	e7f7      	b.n	8005d68 <_printf_i+0x20c>
 8005d78:	08006165 	.word	0x08006165
 8005d7c:	08006176 	.word	0x08006176

08005d80 <memchr>:
 8005d80:	b2c9      	uxtb	r1, r1
 8005d82:	1882      	adds	r2, r0, r2
 8005d84:	4290      	cmp	r0, r2
 8005d86:	d101      	bne.n	8005d8c <memchr+0xc>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	4770      	bx	lr
 8005d8c:	7803      	ldrb	r3, [r0, #0]
 8005d8e:	428b      	cmp	r3, r1
 8005d90:	d0fb      	beq.n	8005d8a <memchr+0xa>
 8005d92:	3001      	adds	r0, #1
 8005d94:	e7f6      	b.n	8005d84 <memchr+0x4>

08005d96 <memmove>:
 8005d96:	b510      	push	{r4, lr}
 8005d98:	4288      	cmp	r0, r1
 8005d9a:	d902      	bls.n	8005da2 <memmove+0xc>
 8005d9c:	188b      	adds	r3, r1, r2
 8005d9e:	4298      	cmp	r0, r3
 8005da0:	d303      	bcc.n	8005daa <memmove+0x14>
 8005da2:	2300      	movs	r3, #0
 8005da4:	e007      	b.n	8005db6 <memmove+0x20>
 8005da6:	5c8b      	ldrb	r3, [r1, r2]
 8005da8:	5483      	strb	r3, [r0, r2]
 8005daa:	3a01      	subs	r2, #1
 8005dac:	d2fb      	bcs.n	8005da6 <memmove+0x10>
 8005dae:	bd10      	pop	{r4, pc}
 8005db0:	5ccc      	ldrb	r4, [r1, r3]
 8005db2:	54c4      	strb	r4, [r0, r3]
 8005db4:	3301      	adds	r3, #1
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d1fa      	bne.n	8005db0 <memmove+0x1a>
 8005dba:	e7f8      	b.n	8005dae <memmove+0x18>

08005dbc <_free_r>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	0005      	movs	r5, r0
 8005dc0:	2900      	cmp	r1, #0
 8005dc2:	d010      	beq.n	8005de6 <_free_r+0x2a>
 8005dc4:	1f0c      	subs	r4, r1, #4
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	da00      	bge.n	8005dce <_free_r+0x12>
 8005dcc:	18e4      	adds	r4, r4, r3
 8005dce:	0028      	movs	r0, r5
 8005dd0:	f000 f918 	bl	8006004 <__malloc_lock>
 8005dd4:	4a1d      	ldr	r2, [pc, #116]	; (8005e4c <_free_r+0x90>)
 8005dd6:	6813      	ldr	r3, [r2, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <_free_r+0x2c>
 8005ddc:	6063      	str	r3, [r4, #4]
 8005dde:	6014      	str	r4, [r2, #0]
 8005de0:	0028      	movs	r0, r5
 8005de2:	f000 f917 	bl	8006014 <__malloc_unlock>
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	42a3      	cmp	r3, r4
 8005dea:	d908      	bls.n	8005dfe <_free_r+0x42>
 8005dec:	6821      	ldr	r1, [r4, #0]
 8005dee:	1860      	adds	r0, r4, r1
 8005df0:	4283      	cmp	r3, r0
 8005df2:	d1f3      	bne.n	8005ddc <_free_r+0x20>
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	1841      	adds	r1, r0, r1
 8005dfa:	6021      	str	r1, [r4, #0]
 8005dfc:	e7ee      	b.n	8005ddc <_free_r+0x20>
 8005dfe:	001a      	movs	r2, r3
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <_free_r+0x4e>
 8005e06:	42a3      	cmp	r3, r4
 8005e08:	d9f9      	bls.n	8005dfe <_free_r+0x42>
 8005e0a:	6811      	ldr	r1, [r2, #0]
 8005e0c:	1850      	adds	r0, r2, r1
 8005e0e:	42a0      	cmp	r0, r4
 8005e10:	d10b      	bne.n	8005e2a <_free_r+0x6e>
 8005e12:	6820      	ldr	r0, [r4, #0]
 8005e14:	1809      	adds	r1, r1, r0
 8005e16:	1850      	adds	r0, r2, r1
 8005e18:	6011      	str	r1, [r2, #0]
 8005e1a:	4283      	cmp	r3, r0
 8005e1c:	d1e0      	bne.n	8005de0 <_free_r+0x24>
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	1841      	adds	r1, r0, r1
 8005e24:	6011      	str	r1, [r2, #0]
 8005e26:	6053      	str	r3, [r2, #4]
 8005e28:	e7da      	b.n	8005de0 <_free_r+0x24>
 8005e2a:	42a0      	cmp	r0, r4
 8005e2c:	d902      	bls.n	8005e34 <_free_r+0x78>
 8005e2e:	230c      	movs	r3, #12
 8005e30:	602b      	str	r3, [r5, #0]
 8005e32:	e7d5      	b.n	8005de0 <_free_r+0x24>
 8005e34:	6821      	ldr	r1, [r4, #0]
 8005e36:	1860      	adds	r0, r4, r1
 8005e38:	4283      	cmp	r3, r0
 8005e3a:	d103      	bne.n	8005e44 <_free_r+0x88>
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	1841      	adds	r1, r0, r1
 8005e42:	6021      	str	r1, [r4, #0]
 8005e44:	6063      	str	r3, [r4, #4]
 8005e46:	6054      	str	r4, [r2, #4]
 8005e48:	e7ca      	b.n	8005de0 <_free_r+0x24>
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	20001ce0 	.word	0x20001ce0

08005e50 <sbrk_aligned>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	4e0f      	ldr	r6, [pc, #60]	; (8005e90 <sbrk_aligned+0x40>)
 8005e54:	000d      	movs	r5, r1
 8005e56:	6831      	ldr	r1, [r6, #0]
 8005e58:	0004      	movs	r4, r0
 8005e5a:	2900      	cmp	r1, #0
 8005e5c:	d102      	bne.n	8005e64 <sbrk_aligned+0x14>
 8005e5e:	f000 f8bf 	bl	8005fe0 <_sbrk_r>
 8005e62:	6030      	str	r0, [r6, #0]
 8005e64:	0029      	movs	r1, r5
 8005e66:	0020      	movs	r0, r4
 8005e68:	f000 f8ba 	bl	8005fe0 <_sbrk_r>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d00a      	beq.n	8005e86 <sbrk_aligned+0x36>
 8005e70:	2303      	movs	r3, #3
 8005e72:	1cc5      	adds	r5, r0, #3
 8005e74:	439d      	bics	r5, r3
 8005e76:	42a8      	cmp	r0, r5
 8005e78:	d007      	beq.n	8005e8a <sbrk_aligned+0x3a>
 8005e7a:	1a29      	subs	r1, r5, r0
 8005e7c:	0020      	movs	r0, r4
 8005e7e:	f000 f8af 	bl	8005fe0 <_sbrk_r>
 8005e82:	1c43      	adds	r3, r0, #1
 8005e84:	d101      	bne.n	8005e8a <sbrk_aligned+0x3a>
 8005e86:	2501      	movs	r5, #1
 8005e88:	426d      	negs	r5, r5
 8005e8a:	0028      	movs	r0, r5
 8005e8c:	bd70      	pop	{r4, r5, r6, pc}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	20001ce4 	.word	0x20001ce4

08005e94 <_malloc_r>:
 8005e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e96:	2203      	movs	r2, #3
 8005e98:	1ccb      	adds	r3, r1, #3
 8005e9a:	4393      	bics	r3, r2
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	0006      	movs	r6, r0
 8005ea0:	001f      	movs	r7, r3
 8005ea2:	2b0c      	cmp	r3, #12
 8005ea4:	d232      	bcs.n	8005f0c <_malloc_r+0x78>
 8005ea6:	270c      	movs	r7, #12
 8005ea8:	42b9      	cmp	r1, r7
 8005eaa:	d831      	bhi.n	8005f10 <_malloc_r+0x7c>
 8005eac:	0030      	movs	r0, r6
 8005eae:	f000 f8a9 	bl	8006004 <__malloc_lock>
 8005eb2:	4d32      	ldr	r5, [pc, #200]	; (8005f7c <_malloc_r+0xe8>)
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	001c      	movs	r4, r3
 8005eb8:	2c00      	cmp	r4, #0
 8005eba:	d12e      	bne.n	8005f1a <_malloc_r+0x86>
 8005ebc:	0039      	movs	r1, r7
 8005ebe:	0030      	movs	r0, r6
 8005ec0:	f7ff ffc6 	bl	8005e50 <sbrk_aligned>
 8005ec4:	0004      	movs	r4, r0
 8005ec6:	1c43      	adds	r3, r0, #1
 8005ec8:	d11e      	bne.n	8005f08 <_malloc_r+0x74>
 8005eca:	682c      	ldr	r4, [r5, #0]
 8005ecc:	0025      	movs	r5, r4
 8005ece:	2d00      	cmp	r5, #0
 8005ed0:	d14a      	bne.n	8005f68 <_malloc_r+0xd4>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	0029      	movs	r1, r5
 8005ed6:	18e3      	adds	r3, r4, r3
 8005ed8:	0030      	movs	r0, r6
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	f000 f880 	bl	8005fe0 <_sbrk_r>
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	4283      	cmp	r3, r0
 8005ee4:	d143      	bne.n	8005f6e <_malloc_r+0xda>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	3703      	adds	r7, #3
 8005eea:	1aff      	subs	r7, r7, r3
 8005eec:	2303      	movs	r3, #3
 8005eee:	439f      	bics	r7, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	2f0c      	cmp	r7, #12
 8005ef4:	d200      	bcs.n	8005ef8 <_malloc_r+0x64>
 8005ef6:	270c      	movs	r7, #12
 8005ef8:	0039      	movs	r1, r7
 8005efa:	0030      	movs	r0, r6
 8005efc:	f7ff ffa8 	bl	8005e50 <sbrk_aligned>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d034      	beq.n	8005f6e <_malloc_r+0xda>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	19df      	adds	r7, r3, r7
 8005f08:	6027      	str	r7, [r4, #0]
 8005f0a:	e013      	b.n	8005f34 <_malloc_r+0xa0>
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dacb      	bge.n	8005ea8 <_malloc_r+0x14>
 8005f10:	230c      	movs	r3, #12
 8005f12:	2500      	movs	r5, #0
 8005f14:	6033      	str	r3, [r6, #0]
 8005f16:	0028      	movs	r0, r5
 8005f18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	1bd1      	subs	r1, r2, r7
 8005f1e:	d420      	bmi.n	8005f62 <_malloc_r+0xce>
 8005f20:	290b      	cmp	r1, #11
 8005f22:	d917      	bls.n	8005f54 <_malloc_r+0xc0>
 8005f24:	19e2      	adds	r2, r4, r7
 8005f26:	6027      	str	r7, [r4, #0]
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	d111      	bne.n	8005f50 <_malloc_r+0xbc>
 8005f2c:	602a      	str	r2, [r5, #0]
 8005f2e:	6863      	ldr	r3, [r4, #4]
 8005f30:	6011      	str	r1, [r2, #0]
 8005f32:	6053      	str	r3, [r2, #4]
 8005f34:	0030      	movs	r0, r6
 8005f36:	0025      	movs	r5, r4
 8005f38:	f000 f86c 	bl	8006014 <__malloc_unlock>
 8005f3c:	2207      	movs	r2, #7
 8005f3e:	350b      	adds	r5, #11
 8005f40:	1d23      	adds	r3, r4, #4
 8005f42:	4395      	bics	r5, r2
 8005f44:	1aea      	subs	r2, r5, r3
 8005f46:	429d      	cmp	r5, r3
 8005f48:	d0e5      	beq.n	8005f16 <_malloc_r+0x82>
 8005f4a:	1b5b      	subs	r3, r3, r5
 8005f4c:	50a3      	str	r3, [r4, r2]
 8005f4e:	e7e2      	b.n	8005f16 <_malloc_r+0x82>
 8005f50:	605a      	str	r2, [r3, #4]
 8005f52:	e7ec      	b.n	8005f2e <_malloc_r+0x9a>
 8005f54:	6862      	ldr	r2, [r4, #4]
 8005f56:	42a3      	cmp	r3, r4
 8005f58:	d101      	bne.n	8005f5e <_malloc_r+0xca>
 8005f5a:	602a      	str	r2, [r5, #0]
 8005f5c:	e7ea      	b.n	8005f34 <_malloc_r+0xa0>
 8005f5e:	605a      	str	r2, [r3, #4]
 8005f60:	e7e8      	b.n	8005f34 <_malloc_r+0xa0>
 8005f62:	0023      	movs	r3, r4
 8005f64:	6864      	ldr	r4, [r4, #4]
 8005f66:	e7a7      	b.n	8005eb8 <_malloc_r+0x24>
 8005f68:	002c      	movs	r4, r5
 8005f6a:	686d      	ldr	r5, [r5, #4]
 8005f6c:	e7af      	b.n	8005ece <_malloc_r+0x3a>
 8005f6e:	230c      	movs	r3, #12
 8005f70:	0030      	movs	r0, r6
 8005f72:	6033      	str	r3, [r6, #0]
 8005f74:	f000 f84e 	bl	8006014 <__malloc_unlock>
 8005f78:	e7cd      	b.n	8005f16 <_malloc_r+0x82>
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	20001ce0 	.word	0x20001ce0

08005f80 <_realloc_r>:
 8005f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f82:	0007      	movs	r7, r0
 8005f84:	000e      	movs	r6, r1
 8005f86:	0014      	movs	r4, r2
 8005f88:	2900      	cmp	r1, #0
 8005f8a:	d105      	bne.n	8005f98 <_realloc_r+0x18>
 8005f8c:	0011      	movs	r1, r2
 8005f8e:	f7ff ff81 	bl	8005e94 <_malloc_r>
 8005f92:	0005      	movs	r5, r0
 8005f94:	0028      	movs	r0, r5
 8005f96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f98:	2a00      	cmp	r2, #0
 8005f9a:	d103      	bne.n	8005fa4 <_realloc_r+0x24>
 8005f9c:	f7ff ff0e 	bl	8005dbc <_free_r>
 8005fa0:	0025      	movs	r5, r4
 8005fa2:	e7f7      	b.n	8005f94 <_realloc_r+0x14>
 8005fa4:	f000 f83e 	bl	8006024 <_malloc_usable_size_r>
 8005fa8:	9001      	str	r0, [sp, #4]
 8005faa:	4284      	cmp	r4, r0
 8005fac:	d803      	bhi.n	8005fb6 <_realloc_r+0x36>
 8005fae:	0035      	movs	r5, r6
 8005fb0:	0843      	lsrs	r3, r0, #1
 8005fb2:	42a3      	cmp	r3, r4
 8005fb4:	d3ee      	bcc.n	8005f94 <_realloc_r+0x14>
 8005fb6:	0021      	movs	r1, r4
 8005fb8:	0038      	movs	r0, r7
 8005fba:	f7ff ff6b 	bl	8005e94 <_malloc_r>
 8005fbe:	1e05      	subs	r5, r0, #0
 8005fc0:	d0e8      	beq.n	8005f94 <_realloc_r+0x14>
 8005fc2:	9b01      	ldr	r3, [sp, #4]
 8005fc4:	0022      	movs	r2, r4
 8005fc6:	429c      	cmp	r4, r3
 8005fc8:	d900      	bls.n	8005fcc <_realloc_r+0x4c>
 8005fca:	001a      	movs	r2, r3
 8005fcc:	0031      	movs	r1, r6
 8005fce:	0028      	movs	r0, r5
 8005fd0:	f7ff fbc0 	bl	8005754 <memcpy>
 8005fd4:	0031      	movs	r1, r6
 8005fd6:	0038      	movs	r0, r7
 8005fd8:	f7ff fef0 	bl	8005dbc <_free_r>
 8005fdc:	e7da      	b.n	8005f94 <_realloc_r+0x14>
	...

08005fe0 <_sbrk_r>:
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	b570      	push	{r4, r5, r6, lr}
 8005fe4:	4d06      	ldr	r5, [pc, #24]	; (8006000 <_sbrk_r+0x20>)
 8005fe6:	0004      	movs	r4, r0
 8005fe8:	0008      	movs	r0, r1
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	f000 f824 	bl	8006038 <_sbrk>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d103      	bne.n	8005ffc <_sbrk_r+0x1c>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d000      	beq.n	8005ffc <_sbrk_r+0x1c>
 8005ffa:	6023      	str	r3, [r4, #0]
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	20001ce8 	.word	0x20001ce8

08006004 <__malloc_lock>:
 8006004:	b510      	push	{r4, lr}
 8006006:	4802      	ldr	r0, [pc, #8]	; (8006010 <__malloc_lock+0xc>)
 8006008:	f000 f814 	bl	8006034 <__retarget_lock_acquire_recursive>
 800600c:	bd10      	pop	{r4, pc}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	20001cec 	.word	0x20001cec

08006014 <__malloc_unlock>:
 8006014:	b510      	push	{r4, lr}
 8006016:	4802      	ldr	r0, [pc, #8]	; (8006020 <__malloc_unlock+0xc>)
 8006018:	f000 f80d 	bl	8006036 <__retarget_lock_release_recursive>
 800601c:	bd10      	pop	{r4, pc}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	20001cec 	.word	0x20001cec

08006024 <_malloc_usable_size_r>:
 8006024:	1f0b      	subs	r3, r1, #4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	1f18      	subs	r0, r3, #4
 800602a:	2b00      	cmp	r3, #0
 800602c:	da01      	bge.n	8006032 <_malloc_usable_size_r+0xe>
 800602e:	580b      	ldr	r3, [r1, r0]
 8006030:	18c0      	adds	r0, r0, r3
 8006032:	4770      	bx	lr

08006034 <__retarget_lock_acquire_recursive>:
 8006034:	4770      	bx	lr

08006036 <__retarget_lock_release_recursive>:
 8006036:	4770      	bx	lr

08006038 <_sbrk>:
 8006038:	4a05      	ldr	r2, [pc, #20]	; (8006050 <_sbrk+0x18>)
 800603a:	0003      	movs	r3, r0
 800603c:	6811      	ldr	r1, [r2, #0]
 800603e:	2900      	cmp	r1, #0
 8006040:	d101      	bne.n	8006046 <_sbrk+0xe>
 8006042:	4904      	ldr	r1, [pc, #16]	; (8006054 <_sbrk+0x1c>)
 8006044:	6011      	str	r1, [r2, #0]
 8006046:	6810      	ldr	r0, [r2, #0]
 8006048:	18c3      	adds	r3, r0, r3
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	4770      	bx	lr
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	20001cf0 	.word	0x20001cf0
 8006054:	20001cf8 	.word	0x20001cf8

08006058 <_init>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605e:	bc08      	pop	{r3}
 8006060:	469e      	mov	lr, r3
 8006062:	4770      	bx	lr

08006064 <_fini>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606a:	bc08      	pop	{r3}
 800606c:	469e      	mov	lr, r3
 800606e:	4770      	bx	lr

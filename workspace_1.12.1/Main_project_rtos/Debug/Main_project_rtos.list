
Main_project_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006810  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080068d0  080068d0  000168d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a08  08006a08  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006a08  08006a08  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a08  08006a08  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d10  20000014  08006a24  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d24  08006a24  00021d24  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b35  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361e  00000000  00000000  00039b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  0003d190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ab1  00000000  00000000  0003fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa7a  00000000  00000000  000577a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099a96  00000000  00000000  00072223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bcb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000512c  00000000  00000000  0010bd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080068b8 	.word	0x080068b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080068b8 	.word	0x080068b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <UltrasonicSensor_Task>:
void LDRLight_Task(void *pvParameters);
void LCD_Task(void *pvParameters);


void UltrasonicSensor_Task(void *pvParameters)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
    // Measure distance using ultrasonic sensor
    // Trigger the sensor and calculate the time for echo
    // Calculate the distance based on the time and the speed of sound
    // Store the distance in a variable or queue

    xQueueSend(distanceQueue, &distance, portMAX_DELAY);
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <UltrasonicSensor_Task+0x28>)
 80003fe:	6818      	ldr	r0, [r3, #0]
 8000400:	2301      	movs	r3, #1
 8000402:	425a      	negs	r2, r3
 8000404:	230c      	movs	r3, #12
 8000406:	18f9      	adds	r1, r7, r3
 8000408:	2300      	movs	r3, #0
 800040a:	f004 f830 	bl	800446e <xQueueGenericSend>

    vTaskDelay(pdMS_TO_TICKS(500)); // Adjust the delay based on your requirements
 800040e:	23fa      	movs	r3, #250	; 0xfa
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	0018      	movs	r0, r3
 8000414:	f004 fd80 	bl	8004f18 <vTaskDelay>
    xQueueSend(distanceQueue, &distance, portMAX_DELAY);
 8000418:	e7f0      	b.n	80003fc <UltrasonicSensor_Task+0x8>
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	200001b8 	.word	0x200001b8

08000420 <ObstacleAvoidance_Task>:
  }
}

void ObstacleAvoidance_Task(void *pvParameters)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
    // Check the distance measured by the ultrasonic sensor
    // If an obstacle is detected within a threshold distance, take appropriate action
    // For example, stop the motors, reverse, and turn in a different direction
    // You can control the motor driver using HAL_GPIO_WritePin to set GPIO outputs

    if (currentMode == IR_MODE)
 8000428:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <ObstacleAvoidance_Task+0x34>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d10c      	bne.n	800044a <ObstacleAvoidance_Task+0x2a>
    {
      xQueueReceive(distanceQueue, &distance, portMAX_DELAY);
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <ObstacleAvoidance_Task+0x38>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2201      	movs	r2, #1
 8000436:	4252      	negs	r2, r2
 8000438:	210c      	movs	r1, #12
 800043a:	1879      	adds	r1, r7, r1
 800043c:	0018      	movs	r0, r3
 800043e:	f004 f8da 	bl	80045f6 <xQueueReceive>

      // Implement obstacle avoidance logic

      vTaskDelay(pdMS_TO_TICKS(100)); // Adjust the delay based on your requirements
 8000442:	2064      	movs	r0, #100	; 0x64
 8000444:	f004 fd68 	bl	8004f18 <vTaskDelay>
 8000448:	e7ee      	b.n	8000428 <ObstacleAvoidance_Task+0x8>
    }
    else
    {
      // No obstacle avoidance needed in Bluetooth mode
      vTaskDelay(pdMS_TO_TICKS(100)); // Adjust the delay based on your requirements
 800044a:	2064      	movs	r0, #100	; 0x64
 800044c:	f004 fd64 	bl	8004f18 <vTaskDelay>
    if (currentMode == IR_MODE)
 8000450:	e7ea      	b.n	8000428 <ObstacleAvoidance_Task+0x8>
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	200001cc 	.word	0x200001cc
 8000458:	200001b8 	.word	0x200001b8

0800045c <LineController_Task>:
    }
  }
}

void LineController_Task(void *pvParameters)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  {
    // Read the values from the IR sensors to detect the line
    // Based on the sensor readings, adjust the motor speed and direction to follow the line
    // You can control the motor driver using HAL_GPIO_WritePin to set GPIO outputs

    if (currentMode == IR_MODE)
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <LineController_Task+0x20>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d103      	bne.n	8000474 <LineController_Task+0x18>
    {
      // Implement line following logic

      vTaskDelay(pdMS_TO_TICKS(50)); // Adjust the delay based on your requirements
 800046c:	2032      	movs	r0, #50	; 0x32
 800046e:	f004 fd53 	bl	8004f18 <vTaskDelay>
 8000472:	e7f7      	b.n	8000464 <LineController_Task+0x8>
    }
    else
    {
      // No line following needed in Bluetooth mode
      vTaskDelay(pdMS_TO_TICKS(50)); // Adjust the delay based on your requirements
 8000474:	2032      	movs	r0, #50	; 0x32
 8000476:	f004 fd4f 	bl	8004f18 <vTaskDelay>
    if (currentMode == IR_MODE)
 800047a:	e7f3      	b.n	8000464 <LineController_Task+0x8>
 800047c:	200001cc 	.word	0x200001cc

08000480 <Bluetooth_Task>:
    }
  }
}

void Bluetooth_Task(void *pvParameters)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
    // Read data from Bluetooth module and process it
    // You can use UART or USART HAL functions to communicate with the Bluetooth module
    // Process the received data and take necessary actions
    // You can send data to other tasks using a queue or semaphore

    if (currentMode == BLUETOOTH_MODE)
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <Bluetooth_Task+0x20>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d103      	bne.n	8000498 <Bluetooth_Task+0x18>
    {
      // Implement Bluetooth processing logic

      vTaskDelay(pdMS_TO_TICKS(10)); // Adjust the delay based on your requirements
 8000490:	200a      	movs	r0, #10
 8000492:	f004 fd41 	bl	8004f18 <vTaskDelay>
 8000496:	e7f7      	b.n	8000488 <Bluetooth_Task+0x8>
    }
    else
    {
      // No Bluetooth processing needed in IR mode
      vTaskDelay(pdMS_TO_TICKS(10)); // Adjust the delay based on your requirements
 8000498:	200a      	movs	r0, #10
 800049a:	f004 fd3d 	bl	8004f18 <vTaskDelay>
    if (currentMode == BLUETOOTH_MODE)
 800049e:	e7f3      	b.n	8000488 <Bluetooth_Task+0x8>
 80004a0:	200001cc 	.word	0x200001cc

080004a4 <RFID_Task>:
    }
  }
}

void RFID_Task(void *pvParameters)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
    // Read data from RFID reader and process it
    // You can use UART or USART HAL functions to communicate with the RFID reader
    // Process the received data and take necessary actions
    // You can send data to other tasks using a queue or semaphore

    xQueueSend(rfidQueue, &rfidData, portMAX_DELAY);
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <RFID_Task+0x20>)
 80004ae:	6818      	ldr	r0, [r3, #0]
 80004b0:	2301      	movs	r3, #1
 80004b2:	425a      	negs	r2, r3
 80004b4:	4904      	ldr	r1, [pc, #16]	; (80004c8 <RFID_Task+0x24>)
 80004b6:	2300      	movs	r3, #0
 80004b8:	f003 ffd9 	bl	800446e <xQueueGenericSend>

    vTaskDelay(pdMS_TO_TICKS(10)); // Adjust the delay based on your requirements
 80004bc:	200a      	movs	r0, #10
 80004be:	f004 fd2b 	bl	8004f18 <vTaskDelay>
    xQueueSend(rfidQueue, &rfidData, portMAX_DELAY);
 80004c2:	e7f3      	b.n	80004ac <RFID_Task+0x8>
 80004c4:	200001c0 	.word	0x200001c0
 80004c8:	200001d0 	.word	0x200001d0

080004cc <LDRLight_Task>:
  }
}

void LDRLight_Task(void *pvParameters)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    // Read the value from the LDR sensor
    // Take appropriate actions based on the sensor reading
    // You can use HAL_GPIO_ReadPin to read the LDR pin status
    // Use a semaphore to synchronize with other tasks if required

    if (xSemaphoreTake(ldrSemaphore, pdMS_TO_TICKS(10)) == pdTRUE)
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <LDRLight_Task+0x30>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	210a      	movs	r1, #10
 80004da:	0018      	movs	r0, r3
 80004dc:	f004 f940 	bl	8004760 <xQueueSemaphoreTake>
 80004e0:	0003      	movs	r3, r0
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d106      	bne.n	80004f4 <LDRLight_Task+0x28>
    {
      // Implement LDR light control logic

      xSemaphoreGive(ldrSemaphore);
 80004e6:	4b05      	ldr	r3, [pc, #20]	; (80004fc <LDRLight_Task+0x30>)
 80004e8:	6818      	ldr	r0, [r3, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	2200      	movs	r2, #0
 80004ee:	2100      	movs	r1, #0
 80004f0:	f003 ffbd 	bl	800446e <xQueueGenericSend>
    }

    vTaskDelay(pdMS_TO_TICKS(100)); // Adjust the delay based on your requirements
 80004f4:	2064      	movs	r0, #100	; 0x64
 80004f6:	f004 fd0f 	bl	8004f18 <vTaskDelay>
    if (xSemaphoreTake(ldrSemaphore, pdMS_TO_TICKS(10)) == pdTRUE)
 80004fa:	e7eb      	b.n	80004d4 <LDRLight_Task+0x8>
 80004fc:	200001c4 	.word	0x200001c4

08000500 <LCD_Task>:
  }
}

void LCD_Task(void *pvParameters)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  LCD_Init();  // Initialize LCD display
 8000508:	f003 fc9e 	bl	8003e48 <LCD_Init>
  LCD_Clear();
 800050c:	f003 fcdc 	bl	8003ec8 <LCD_Clear>
  {
    // Update the LCD display with relevant information
    // You can use LCD library functions to write text and control the display
    // Use a mutex or semaphore to protect the LCD access when multiple tasks are writing to it

    xSemaphoreTake(ldrSemaphore, portMAX_DELAY);
 8000510:	4b17      	ldr	r3, [pc, #92]	; (8000570 <LCD_Task+0x70>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2201      	movs	r2, #1
 8000516:	4252      	negs	r2, r2
 8000518:	0011      	movs	r1, r2
 800051a:	0018      	movs	r0, r3
 800051c:	f004 f920 	bl	8004760 <xQueueSemaphoreTake>

    if (currentMode == IR_MODE)
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <LCD_Task+0x74>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d10d      	bne.n	8000544 <LCD_Task+0x44>
    {
      LCD_SetCursor(0, 0);
 8000528:	2100      	movs	r1, #0
 800052a:	2000      	movs	r0, #0
 800052c:	f003 fcd8 	bl	8003ee0 <LCD_SetCursor>
      LCD_Print("IR Mode");
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <LCD_Task+0x78>)
 8000532:	0018      	movs	r0, r3
 8000534:	f003 fd00 	bl	8003f38 <LCD_Print>

      // Display other relevant information for IR mode

      vTaskDelay(pdMS_TO_TICKS(1000)); // Adjust the delay based on your requirements
 8000538:	23fa      	movs	r3, #250	; 0xfa
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	0018      	movs	r0, r3
 800053e:	f004 fceb 	bl	8004f18 <vTaskDelay>
 8000542:	e00c      	b.n	800055e <LCD_Task+0x5e>
    }
    else
    {
      LCD_SetCursor(0, 0);
 8000544:	2100      	movs	r1, #0
 8000546:	2000      	movs	r0, #0
 8000548:	f003 fcca 	bl	8003ee0 <LCD_SetCursor>
      LCD_Print("Bluetooth Mode");
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <LCD_Task+0x7c>)
 800054e:	0018      	movs	r0, r3
 8000550:	f003 fcf2 	bl	8003f38 <LCD_Print>

      // Display other relevant information for Bluetooth mode

      vTaskDelay(pdMS_TO_TICKS(1000)); // Adjust the delay based on your requirements
 8000554:	23fa      	movs	r3, #250	; 0xfa
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	0018      	movs	r0, r3
 800055a:	f004 fcdd 	bl	8004f18 <vTaskDelay>
    }

    xSemaphoreGive(ldrSemaphore);
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <LCD_Task+0x70>)
 8000560:	6818      	ldr	r0, [r3, #0]
 8000562:	2300      	movs	r3, #0
 8000564:	2200      	movs	r2, #0
 8000566:	2100      	movs	r1, #0
 8000568:	f003 ff81 	bl	800446e <xQueueGenericSend>
    xSemaphoreTake(ldrSemaphore, portMAX_DELAY);
 800056c:	e7d0      	b.n	8000510 <LCD_Task+0x10>
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	200001c4 	.word	0x200001c4
 8000574:	200001cc 	.word	0x200001cc
 8000578:	080068d0 	.word	0x080068d0
 800057c:	080068d8 	.word	0x080068d8

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	LCD_Init();  // Initialize LCD display
 8000586:	f003 fc5f 	bl	8003e48 <LCD_Init>
		  LCD_Clear();
 800058a:	f003 fc9d 	bl	8003ec8 <LCD_Clear>
		  LCD_SetCursor(0, 1);
 800058e:	2101      	movs	r1, #1
 8000590:	2000      	movs	r0, #0
 8000592:	f003 fca5 	bl	8003ee0 <LCD_SetCursor>
		  LCD_Print("IR Mode");
 8000596:	4b3d      	ldr	r3, [pc, #244]	; (800068c <main+0x10c>)
 8000598:	0018      	movs	r0, r3
 800059a:	f003 fccd 	bl	8003f38 <LCD_Print>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fd1b 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f89b 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 fa13 	bl	80009d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 f9c3 	bl	8000934 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ae:	f000 f8dd 	bl	800076c <MX_I2C1_Init>
  MX_I2C2_Init();
 80005b2:	f000 f91b 	bl	80007ec <MX_I2C2_Init>
  MX_TIM1_Init();
 80005b6:	f000 f959 	bl	800086c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  distanceQueue = xQueueCreate(1, sizeof(float));
 80005ba:	2200      	movs	r2, #0
 80005bc:	2104      	movs	r1, #4
 80005be:	2001      	movs	r0, #1
 80005c0:	f003 fed0 	bl	8004364 <xQueueGenericCreate>
 80005c4:	0002      	movs	r2, r0
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <main+0x110>)
 80005c8:	601a      	str	r2, [r3, #0]
    bluetoothQueue = xQueueCreate(10, sizeof(char));
 80005ca:	2200      	movs	r2, #0
 80005cc:	2101      	movs	r1, #1
 80005ce:	200a      	movs	r0, #10
 80005d0:	f003 fec8 	bl	8004364 <xQueueGenericCreate>
 80005d4:	0002      	movs	r2, r0
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <main+0x114>)
 80005d8:	601a      	str	r2, [r3, #0]
    rfidQueue = xQueueCreate(10, sizeof(uint32_t));
 80005da:	2200      	movs	r2, #0
 80005dc:	2104      	movs	r1, #4
 80005de:	200a      	movs	r0, #10
 80005e0:	f003 fec0 	bl	8004364 <xQueueGenericCreate>
 80005e4:	0002      	movs	r2, r0
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <main+0x118>)
 80005e8:	601a      	str	r2, [r3, #0]
    ldrSemaphore = xSemaphoreCreateBinary();
 80005ea:	2203      	movs	r2, #3
 80005ec:	2100      	movs	r1, #0
 80005ee:	2001      	movs	r0, #1
 80005f0:	f003 feb8 	bl	8004364 <xQueueGenericCreate>
 80005f4:	0002      	movs	r2, r0
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <main+0x11c>)
 80005f8:	601a      	str	r2, [r3, #0]

  	xTaskCreate(UltrasonicSensor_Task, "UltrasonicTask", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 80005fa:	4929      	ldr	r1, [pc, #164]	; (80006a0 <main+0x120>)
 80005fc:	4829      	ldr	r0, [pc, #164]	; (80006a4 <main+0x124>)
 80005fe:	2300      	movs	r3, #0
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2304      	movs	r3, #4
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	223c      	movs	r2, #60	; 0x3c
 800060a:	f004 fb28 	bl	8004c5e <xTaskCreate>
    xTaskCreate(ObstacleAvoidance_Task, "ObstacleTask", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
 800060e:	4926      	ldr	r1, [pc, #152]	; (80006a8 <main+0x128>)
 8000610:	4826      	ldr	r0, [pc, #152]	; (80006ac <main+0x12c>)
 8000612:	2300      	movs	r3, #0
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2305      	movs	r3, #5
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	223c      	movs	r2, #60	; 0x3c
 800061e:	f004 fb1e 	bl	8004c5e <xTaskCreate>
    xTaskCreate(LineController_Task, "LineTask", configMINIMAL_STACK_SIZE, NULL, 6, NULL);
 8000622:	4923      	ldr	r1, [pc, #140]	; (80006b0 <main+0x130>)
 8000624:	4823      	ldr	r0, [pc, #140]	; (80006b4 <main+0x134>)
 8000626:	2300      	movs	r3, #0
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2306      	movs	r3, #6
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	223c      	movs	r2, #60	; 0x3c
 8000632:	f004 fb14 	bl	8004c5e <xTaskCreate>
    xTaskCreate(Bluetooth_Task, "BluetoothTask", configMINIMAL_STACK_SIZE, NULL, 7, NULL);
 8000636:	4920      	ldr	r1, [pc, #128]	; (80006b8 <main+0x138>)
 8000638:	4820      	ldr	r0, [pc, #128]	; (80006bc <main+0x13c>)
 800063a:	2300      	movs	r3, #0
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2307      	movs	r3, #7
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	223c      	movs	r2, #60	; 0x3c
 8000646:	f004 fb0a 	bl	8004c5e <xTaskCreate>
    xTaskCreate(RFID_Task, "RFIDTask", configMINIMAL_STACK_SIZE, NULL, 8, NULL);
 800064a:	491d      	ldr	r1, [pc, #116]	; (80006c0 <main+0x140>)
 800064c:	481d      	ldr	r0, [pc, #116]	; (80006c4 <main+0x144>)
 800064e:	2300      	movs	r3, #0
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2308      	movs	r3, #8
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2300      	movs	r3, #0
 8000658:	223c      	movs	r2, #60	; 0x3c
 800065a:	f004 fb00 	bl	8004c5e <xTaskCreate>
    xTaskCreate(LDRLight_Task, "LDRTask", configMINIMAL_STACK_SIZE, NULL, 9, NULL);
 800065e:	491a      	ldr	r1, [pc, #104]	; (80006c8 <main+0x148>)
 8000660:	481a      	ldr	r0, [pc, #104]	; (80006cc <main+0x14c>)
 8000662:	2300      	movs	r3, #0
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2309      	movs	r3, #9
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	223c      	movs	r2, #60	; 0x3c
 800066e:	f004 faf6 	bl	8004c5e <xTaskCreate>
    xTaskCreate(LCD_Task, "LCDTask", configMINIMAL_STACK_SIZE, NULL, 1, &lcdTaskHandle);
 8000672:	4917      	ldr	r1, [pc, #92]	; (80006d0 <main+0x150>)
 8000674:	4817      	ldr	r0, [pc, #92]	; (80006d4 <main+0x154>)
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <main+0x158>)
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2301      	movs	r3, #1
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	223c      	movs	r2, #60	; 0x3c
 8000682:	f004 faec 	bl	8004c5e <xTaskCreate>

    vTaskStartScheduler();
 8000686:	f004 fc6d 	bl	8004f64 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x10a>
 800068c:	080068d0 	.word	0x080068d0
 8000690:	200001b8 	.word	0x200001b8
 8000694:	200001bc 	.word	0x200001bc
 8000698:	200001c0 	.word	0x200001c0
 800069c:	200001c4 	.word	0x200001c4
 80006a0:	080068e8 	.word	0x080068e8
 80006a4:	080003f5 	.word	0x080003f5
 80006a8:	080068f8 	.word	0x080068f8
 80006ac:	08000421 	.word	0x08000421
 80006b0:	08006908 	.word	0x08006908
 80006b4:	0800045d 	.word	0x0800045d
 80006b8:	08006914 	.word	0x08006914
 80006bc:	08000481 	.word	0x08000481
 80006c0:	08006924 	.word	0x08006924
 80006c4:	080004a5 	.word	0x080004a5
 80006c8:	08006930 	.word	0x08006930
 80006cc:	080004cd 	.word	0x080004cd
 80006d0:	08006938 	.word	0x08006938
 80006d4:	08000501 	.word	0x08000501
 80006d8:	200001c8 	.word	0x200001c8

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b093      	sub	sp, #76	; 0x4c
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	2414      	movs	r4, #20
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2334      	movs	r3, #52	; 0x34
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f006 f8da 	bl	80068a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	0018      	movs	r0, r3
 80006f6:	2310      	movs	r3, #16
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f006 f8d3 	bl	80068a6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	0018      	movs	r0, r3
 8000706:	f001 fb43 	bl	8001d90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2202      	movs	r2, #2
 800070e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	0052      	lsls	r2, r2, #1
 8000716:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2240      	movs	r2, #64	; 0x40
 8000722:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	193b      	adds	r3, r7, r4
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fb7b 	bl	8001e28 <HAL_RCC_OscConfig>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000736:	f000 fa03 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2100      	movs	r1, #0
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fe76 	bl	8002448 <HAL_RCC_ClockConfig>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000760:	f000 f9ee 	bl	8000b40 <Error_Handler>
  }
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b013      	add	sp, #76	; 0x4c
 800076a:	bd90      	pop	{r4, r7, pc}

0800076c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_I2C1_Init+0x78>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000778:	4a1b      	ldr	r2, [pc, #108]	; (80007e8 <MX_I2C1_Init+0x7c>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000784:	2201      	movs	r2, #1
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 fea5 	bl	80014f8 <HAL_I2C_Init>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007b2:	f000 f9c5 	bl	8000b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 fa50 	bl	8001c60 <HAL_I2CEx_ConfigAnalogFilter>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c4:	f000 f9bc 	bl	8000b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fa93 	bl	8001cf8 <HAL_I2CEx_ConfigDigitalFilter>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f9b3 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000030 	.word	0x20000030
 80007e4:	40005400 	.word	0x40005400
 80007e8:	00303d5b 	.word	0x00303d5b

080007ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_I2C2_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <MX_I2C2_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_I2C2_Init+0x74>)
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <MX_I2C2_Init+0x7c>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_I2C2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_I2C2_Init+0x74>)
 8000804:	2201      	movs	r2, #1
 8000806:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_I2C2_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_I2C2_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2C2_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2C2_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_I2C2_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_I2C2_Init+0x74>)
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fe65 	bl	80014f8 <HAL_I2C_Init>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000832:	f000 f985 	bl	8000b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_I2C2_Init+0x74>)
 8000838:	2100      	movs	r1, #0
 800083a:	0018      	movs	r0, r3
 800083c:	f001 fa10 	bl	8001c60 <HAL_I2CEx_ConfigAnalogFilter>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000844:	f000 f97c 	bl	8000b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <MX_I2C2_Init+0x74>)
 800084a:	2100      	movs	r1, #0
 800084c:	0018      	movs	r0, r3
 800084e:	f001 fa53 	bl	8001cf8 <HAL_I2CEx_ConfigDigitalFilter>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 f973 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000084 	.word	0x20000084
 8000864:	40005800 	.word	0x40005800
 8000868:	00303d5b 	.word	0x00303d5b

0800086c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000872:	2314      	movs	r3, #20
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	0018      	movs	r0, r3
 8000878:	230c      	movs	r3, #12
 800087a:	001a      	movs	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	f006 f812 	bl	80068a6 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	0018      	movs	r0, r3
 8000886:	2310      	movs	r3, #16
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f006 f80b 	bl	80068a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000890:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_TIM1_Init+0xbc>)
 8000892:	4a26      	ldr	r2, [pc, #152]	; (800092c <MX_TIM1_Init+0xc0>)
 8000894:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000896:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_TIM1_Init+0xbc>)
 8000898:	2247      	movs	r2, #71	; 0x47
 800089a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_TIM1_Init+0xbc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_TIM1_Init+0xbc>)
 80008a4:	4a22      	ldr	r2, [pc, #136]	; (8000930 <MX_TIM1_Init+0xc4>)
 80008a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_TIM1_Init+0xbc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_TIM1_Init+0xbc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_TIM1_Init+0xbc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_TIM1_Init+0xbc>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f002 f981 	bl	8002bc4 <HAL_TIM_IC_Init>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80008c6:	f000 f93b 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	2114      	movs	r1, #20
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008de:	187a      	adds	r2, r7, r1
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_TIM1_Init+0xbc>)
 80008e2:	0011      	movs	r1, r2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f002 fd51 	bl	800338c <HAL_TIMEx_MasterConfigSynchronization>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 80008ee:	f000 f927 	bl	8000b40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2201      	movs	r2, #1
 80008fc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800090a:	1d39      	adds	r1, r7, #4
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_TIM1_Init+0xbc>)
 800090e:	2200      	movs	r2, #0
 8000910:	0018      	movs	r0, r3
 8000912:	f002 fae1 	bl	8002ed8 <HAL_TIM_IC_ConfigChannel>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800091a:	f000 f911 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b008      	add	sp, #32
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	200000d8 	.word	0x200000d8
 800092c:	40012c00 	.word	0x40012c00
 8000930:	0000ffff 	.word	0x0000ffff

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800093a:	4a24      	ldr	r2, [pc, #144]	; (80009cc <MX_USART2_UART_Init+0x98>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000940:	22e1      	movs	r2, #225	; 0xe1
 8000942:	0252      	lsls	r2, r2, #9
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800097e:	0018      	movs	r0, r3
 8000980:	f002 fd84 	bl	800348c <HAL_UART_Init>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000988:	f000 f8da 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800098e:	2100      	movs	r1, #0
 8000990:	0018      	movs	r0, r3
 8000992:	f003 f979 	bl	8003c88 <HAL_UARTEx_SetTxFifoThreshold>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800099a:	f000 f8d1 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f003 f9b0 	bl	8003d08 <HAL_UARTEx_SetRxFifoThreshold>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009ac:	f000 f8c8 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f003 f92e 	bl	8003c14 <HAL_UARTEx_DisableFifoMode>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009bc:	f000 f8c0 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000124 	.word	0x20000124
 80009cc:	40004400 	.word	0x40004400

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b08b      	sub	sp, #44	; 0x2c
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	2414      	movs	r4, #20
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	0018      	movs	r0, r3
 80009dc:	2314      	movs	r3, #20
 80009de:	001a      	movs	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f005 ff60 	bl	80068a6 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b4a      	ldr	r3, [pc, #296]	; (8000b10 <MX_GPIO_Init+0x140>)
 80009e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ea:	4b49      	ldr	r3, [pc, #292]	; (8000b10 <MX_GPIO_Init+0x140>)
 80009ec:	2104      	movs	r1, #4
 80009ee:	430a      	orrs	r2, r1
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
 80009f2:	4b47      	ldr	r3, [pc, #284]	; (8000b10 <MX_GPIO_Init+0x140>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f6:	2204      	movs	r2, #4
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	4b44      	ldr	r3, [pc, #272]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a02:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a04:	2120      	movs	r1, #32
 8000a06:	430a      	orrs	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0a:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	2220      	movs	r2, #32
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1a:	4b3d      	ldr	r3, [pc, #244]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
 8000a22:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a26:	2201      	movs	r2, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a34:	2102      	movs	r1, #2
 8000a36:	430a      	orrs	r2, r1
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
 8000a3a:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3e:	2202      	movs	r2, #2
 8000a40:	4013      	ands	r3, r2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4a:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <MX_GPIO_Init+0x140>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	2208      	movs	r2, #8
 8000a58:	4013      	ands	r3, r2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	482c      	ldr	r0, [pc, #176]	; (8000b14 <MX_GPIO_Init+0x144>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	0019      	movs	r1, r3
 8000a68:	f000 fd28 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2160      	movs	r1, #96	; 0x60
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 fd22 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2270      	movs	r2, #112	; 0x70
 8000a7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	193a      	adds	r2, r7, r4
 8000a8c:	23a0      	movs	r3, #160	; 0xa0
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	0011      	movs	r1, r2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fbae 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a98:	0021      	movs	r1, r4
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	0212      	lsls	r2, r2, #8
 8000aa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	000c      	movs	r4, r1
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <MX_GPIO_Init+0x144>)
 8000aba:	0019      	movs	r1, r3
 8000abc:	0010      	movs	r0, r2
 8000abe:	f000 fb99 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2260      	movs	r2, #96	; 0x60
 8000ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2201      	movs	r2, #1
 8000acc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000ade:	0019      	movs	r1, r3
 8000ae0:	0010      	movs	r0, r2
 8000ae2:	f000 fb87 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000ae6:	0021      	movs	r1, r4
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	22d0      	movs	r2, #208	; 0xd0
 8000aec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <MX_GPIO_Init+0x144>)
 8000afe:	0019      	movs	r1, r3
 8000b00:	0010      	movs	r0, r2
 8000b02:	f000 fb77 	bl	80011f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b00b      	add	sp, #44	; 0x2c
 8000b0c:	bd90      	pop	{r4, r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	40021000 	.word	0x40021000
 8000b14:	50000400 	.word	0x50000400
 8000b18:	50000c00 	.word	0x50000c00

08000b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d101      	bne.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2e:	f000 fa73 	bl	8001018 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	40000400 	.word	0x40000400

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	2201      	movs	r2, #1
 8000b64:	4013      	ands	r3, r2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0549      	lsls	r1, r1, #21
 8000b74:	430a      	orrs	r2, r1
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_MspInit+0x44>)
 8000b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	055b      	lsls	r3, r3, #21
 8000b80:	4013      	ands	r3, r2
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b093      	sub	sp, #76	; 0x4c
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	2334      	movs	r3, #52	; 0x34
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	2314      	movs	r3, #20
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f005 fe7d 	bl	80068a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	2418      	movs	r4, #24
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	231c      	movs	r3, #28
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f005 fe75 	bl	80068a6 <memset>
  if(hi2c->Instance==I2C1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a3e      	ldr	r2, [pc, #248]	; (8000cbc <HAL_I2C_MspInit+0x128>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d140      	bne.n	8000c48 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	2220      	movs	r2, #32
 8000bca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f001 fe0b 	bl	80027f0 <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bde:	f7ff ffaf 	bl	8000b40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b37      	ldr	r3, [pc, #220]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000be6:	4b36      	ldr	r3, [pc, #216]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	430a      	orrs	r2, r1
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
 8000bee:	4b34      	ldr	r3, [pc, #208]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bfa:	2134      	movs	r1, #52	; 0x34
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	22c0      	movs	r2, #192	; 0xc0
 8000c00:	00d2      	lsls	r2, r2, #3
 8000c02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2212      	movs	r2, #18
 8000c08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2206      	movs	r2, #6
 8000c1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	187a      	adds	r2, r7, r1
 8000c1e:	23a0      	movs	r3, #160	; 0xa0
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f000 fae5 	bl	80011f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2a:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c2e:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	0389      	lsls	r1, r1, #14
 8000c34:	430a      	orrs	r2, r1
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	039b      	lsls	r3, r3, #14
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c46:	e035      	b.n	8000cb4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <HAL_I2C_MspInit+0x130>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d130      	bne.n	8000cb4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000c58:	2102      	movs	r1, #2
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c62:	2202      	movs	r2, #2
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c6a:	2134      	movs	r1, #52	; 0x34
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	22c0      	movs	r2, #192	; 0xc0
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2212      	movs	r2, #18
 8000c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2206      	movs	r2, #6
 8000c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_I2C_MspInit+0x134>)
 8000c90:	0019      	movs	r1, r3
 8000c92:	0010      	movs	r0, r2
 8000c94:	f000 faae 	bl	80011f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	03c9      	lsls	r1, r1, #15
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_I2C_MspInit+0x12c>)
 8000ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	03db      	lsls	r3, r3, #15
 8000cae:	4013      	ands	r3, r2
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b013      	add	sp, #76	; 0x4c
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40005800 	.word	0x40005800
 8000cc8:	50000400 	.word	0x50000400

08000ccc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b08b      	sub	sp, #44	; 0x2c
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	2414      	movs	r4, #20
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	0018      	movs	r0, r3
 8000cda:	2314      	movs	r3, #20
 8000cdc:	001a      	movs	r2, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f005 fde1 	bl	80068a6 <memset>
  if(htim_ic->Instance==TIM1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <HAL_TIM_IC_MspInit+0xa0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d139      	bne.n	8000d62 <HAL_TIM_IC_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_TIM_IC_MspInit+0xa4>)
 8000cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <HAL_TIM_IC_MspInit+0xa4>)
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	0109      	lsls	r1, r1, #4
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	641a      	str	r2, [r3, #64]	; 0x40
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_TIM_IC_MspInit+0xa4>)
 8000cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_TIM_IC_MspInit+0xa4>)
 8000d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_TIM_IC_MspInit+0xa4>)
 8000d10:	2101      	movs	r1, #1
 8000d12:	430a      	orrs	r2, r1
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_TIM_IC_MspInit+0xa4>)
 8000d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	0052      	lsls	r2, r2, #1
 8000d28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	0021      	movs	r1, r4
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2202      	movs	r2, #2
 8000d30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2202      	movs	r2, #2
 8000d42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	187a      	adds	r2, r7, r1
 8000d46:	23a0      	movs	r3, #160	; 0xa0
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 fa51 	bl	80011f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	200e      	movs	r0, #14
 8000d58:	f000 fa26 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d5c:	200e      	movs	r0, #14
 8000d5e:	f000 fa38 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b00b      	add	sp, #44	; 0x2c
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	40012c00 	.word	0x40012c00
 8000d70:	40021000 	.word	0x40021000

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b091      	sub	sp, #68	; 0x44
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	232c      	movs	r3, #44	; 0x2c
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	0018      	movs	r0, r3
 8000d82:	2314      	movs	r3, #20
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f005 fd8d 	bl	80068a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	2410      	movs	r4, #16
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	0018      	movs	r0, r3
 8000d92:	231c      	movs	r3, #28
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f005 fd85 	bl	80068a6 <memset>
  if(huart->Instance==USART2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <HAL_UART_MspInit+0xb8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d13e      	bne.n	8000e24 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2202      	movs	r2, #2
 8000daa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	0018      	movs	r0, r3
 8000db6:	f001 fd1b 	bl	80027f0 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dbe:	f7ff febf 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	0289      	lsls	r1, r1, #10
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	029b      	lsls	r3, r3, #10
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	430a      	orrs	r2, r1
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dee:	2201      	movs	r2, #1
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000df6:	212c      	movs	r1, #44	; 0x2c
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2202      	movs	r2, #2
 8000e02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2201      	movs	r2, #1
 8000e14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	187a      	adds	r2, r7, r1
 8000e18:	23a0      	movs	r3, #160	; 0xa0
 8000e1a:	05db      	lsls	r3, r3, #23
 8000e1c:	0011      	movs	r1, r2
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f000 f9e8 	bl	80011f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b011      	add	sp, #68	; 0x44
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e3c:	232b      	movs	r3, #43	; 0x2b
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000e44:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <HAL_InitTick+0xf0>)
 8000e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e48:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <HAL_InitTick+0xf0>)
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e50:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <HAL_InitTick+0xf0>)
 8000e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e54:	2202      	movs	r2, #2
 8000e56:	4013      	ands	r3, r2
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	18fa      	adds	r2, r7, r3
 8000e60:	2410      	movs	r4, #16
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	0011      	movs	r1, r2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 fc98 	bl	800279c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d104      	bne.n	8000e82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e78:	f001 fc7a 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e80:	e004      	b.n	8000e8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e82:	f001 fc75 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8000e86:	0003      	movs	r3, r0
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	4926      	ldr	r1, [pc, #152]	; (8000f28 <HAL_InitTick+0xf4>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff f939 	bl	8000108 <__udivsi3>
 8000e96:	0003      	movs	r3, r0
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_InitTick+0xf8>)
 8000e9e:	4a24      	ldr	r2, [pc, #144]	; (8000f30 <HAL_InitTick+0xfc>)
 8000ea0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <HAL_InitTick+0xf8>)
 8000ea4:	4a23      	ldr	r2, [pc, #140]	; (8000f34 <HAL_InitTick+0x100>)
 8000ea6:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_InitTick+0xf8>)
 8000eaa:	6a3a      	ldr	r2, [r7, #32]
 8000eac:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <HAL_InitTick+0xf8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_InitTick+0xf8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HAL_InitTick+0xf8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000ec0:	252b      	movs	r5, #43	; 0x2b
 8000ec2:	197c      	adds	r4, r7, r5
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_InitTick+0xf8>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f001 fdc6 	bl	8002a58 <HAL_TIM_Base_Init>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000ed0:	197b      	adds	r3, r7, r5
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d11e      	bne.n	8000f16 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000ed8:	197c      	adds	r4, r7, r5
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_InitTick+0xf8>)
 8000edc:	0018      	movs	r0, r3
 8000ede:	f001 fe1b 	bl	8002b18 <HAL_TIM_Base_Start_IT>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000ee6:	197b      	adds	r3, r7, r5
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d113      	bne.n	8000f16 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000eee:	2010      	movs	r0, #16
 8000ef0:	f000 f96f 	bl	80011d2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d809      	bhi.n	8000f0e <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	0019      	movs	r1, r3
 8000f00:	2010      	movs	r0, #16
 8000f02:	f000 f951 	bl	80011a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_InitTick+0x104>)
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e003      	b.n	8000f16 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000f0e:	232b      	movs	r3, #43	; 0x2b
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000f16:	232b      	movs	r3, #43	; 0x2b
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	781b      	ldrb	r3, [r3, #0]
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b00c      	add	sp, #48	; 0x30
 8000f22:	bdb0      	pop	{r4, r5, r7, pc}
 8000f24:	40021000 	.word	0x40021000
 8000f28:	000f4240 	.word	0x000f4240
 8000f2c:	200001d4 	.word	0x200001d4
 8000f30:	40000400 	.word	0x40000400
 8000f34:	000003e7 	.word	0x000003e7
 8000f38:	20000004 	.word	0x20000004

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <TIM1_CC_IRQHandler+0x14>)
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 fe90 	bl	8002c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	200000d8 	.word	0x200000d8

08000f60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <TIM3_IRQHandler+0x14>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f001 fe84 	bl	8002c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	200001d4 	.word	0x200001d4

08000f78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f88:	f7ff fff6 	bl	8000f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8e:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <LoopForever+0xe>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <LoopForever+0x16>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fb2:	f005 fc4b 	bl	800684c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fb6:	f7ff fae3 	bl	8000580 <main>

08000fba <LoopForever>:

LoopForever:
  b LoopForever
 8000fba:	e7fe      	b.n	8000fba <LoopForever>
  ldr   r0, =_estack
 8000fbc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fc8:	08006a10 	.word	0x08006a10
  ldr r2, =_sbss
 8000fcc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fd0:	20001d24 	.word	0x20001d24

08000fd4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC1_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_Init+0x3c>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Init+0x3c>)
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	0049      	lsls	r1, r1, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f7ff ff1e 	bl	8000e34 <HAL_InitTick>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e001      	b.n	8001008 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff fda2 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	781b      	ldrb	r3, [r3, #0]
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	b002      	add	sp, #8
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40022000 	.word	0x40022000

08001018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x1c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	001a      	movs	r2, r3
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_IncTick+0x20>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	18d2      	adds	r2, r2, r3
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_IncTick+0x20>)
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	20000008 	.word	0x20000008
 8001038:	20000220 	.word	0x20000220

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b02      	ldr	r3, [pc, #8]	; (800104c <HAL_GetTick+0x10>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	20000220 	.word	0x20000220

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff fff0 	bl	800103c <HAL_GetTick>
 800105c:	0003      	movs	r3, r0
 800105e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	d005      	beq.n	8001076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_Delay+0x44>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	001a      	movs	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	189b      	adds	r3, r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	f7ff ffe0 	bl	800103c <HAL_GetTick>
 800107c:	0002      	movs	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f7      	bhi.n	8001078 <HAL_Delay+0x28>
  {
  }
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b004      	add	sp, #16
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20000008 	.word	0x20000008

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	0002      	movs	r2, r0
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b7f      	cmp	r3, #127	; 0x7f
 80010aa:	d809      	bhi.n	80010c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	001a      	movs	r2, r3
 80010b2:	231f      	movs	r3, #31
 80010b4:	401a      	ands	r2, r3
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_EnableIRQ+0x30>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	4091      	lsls	r1, r2
 80010bc:	000a      	movs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	0002      	movs	r2, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b7f      	cmp	r3, #127	; 0x7f
 80010e0:	d828      	bhi.n	8001134 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e2:	4a2f      	ldr	r2, [pc, #188]	; (80011a0 <__NVIC_SetPriority+0xd4>)
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	33c0      	adds	r3, #192	; 0xc0
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	589b      	ldr	r3, [r3, r2]
 80010f2:	1dfa      	adds	r2, r7, #7
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	0011      	movs	r1, r2
 80010f8:	2203      	movs	r2, #3
 80010fa:	400a      	ands	r2, r1
 80010fc:	00d2      	lsls	r2, r2, #3
 80010fe:	21ff      	movs	r1, #255	; 0xff
 8001100:	4091      	lsls	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	43d2      	mvns	r2, r2
 8001106:	401a      	ands	r2, r3
 8001108:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	401a      	ands	r2, r3
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	0018      	movs	r0, r3
 8001118:	2303      	movs	r3, #3
 800111a:	4003      	ands	r3, r0
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001120:	481f      	ldr	r0, [pc, #124]	; (80011a0 <__NVIC_SetPriority+0xd4>)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b25b      	sxtb	r3, r3
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	430a      	orrs	r2, r1
 800112c:	33c0      	adds	r3, #192	; 0xc0
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001132:	e031      	b.n	8001198 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <__NVIC_SetPriority+0xd8>)
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	0019      	movs	r1, r3
 800113c:	230f      	movs	r3, #15
 800113e:	400b      	ands	r3, r1
 8001140:	3b08      	subs	r3, #8
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3306      	adds	r3, #6
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	18d3      	adds	r3, r2, r3
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	1dfa      	adds	r2, r7, #7
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	0011      	movs	r1, r2
 8001154:	2203      	movs	r2, #3
 8001156:	400a      	ands	r2, r1
 8001158:	00d2      	lsls	r2, r2, #3
 800115a:	21ff      	movs	r1, #255	; 0xff
 800115c:	4091      	lsls	r1, r2
 800115e:	000a      	movs	r2, r1
 8001160:	43d2      	mvns	r2, r2
 8001162:	401a      	ands	r2, r3
 8001164:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	22ff      	movs	r2, #255	; 0xff
 800116c:	401a      	ands	r2, r3
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	0018      	movs	r0, r3
 8001174:	2303      	movs	r3, #3
 8001176:	4003      	ands	r3, r0
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <__NVIC_SetPriority+0xd8>)
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	001c      	movs	r4, r3
 8001184:	230f      	movs	r3, #15
 8001186:	4023      	ands	r3, r4
 8001188:	3b08      	subs	r3, #8
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	430a      	orrs	r2, r1
 800118e:	3306      	adds	r3, #6
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	18c3      	adds	r3, r0, r3
 8001194:	3304      	adds	r3, #4
 8001196:	601a      	str	r2, [r3, #0]
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b003      	add	sp, #12
 800119e:	bd90      	pop	{r4, r7, pc}
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	210f      	movs	r1, #15
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	1c02      	adds	r2, r0, #0
 80011b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	0011      	movs	r1, r2
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff81 	bl	80010cc <__NVIC_SetPriority>
}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b004      	add	sp, #16
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	0002      	movs	r2, r0
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff ff57 	bl	8001098 <__NVIC_EnableIRQ>
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001202:	e147      	b.n	8001494 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4091      	lsls	r1, r2
 800120e:	000a      	movs	r2, r1
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d100      	bne.n	800121c <HAL_GPIO_Init+0x28>
 800121a:	e138      	b.n	800148e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2203      	movs	r2, #3
 8001222:	4013      	ands	r3, r2
 8001224:	2b01      	cmp	r3, #1
 8001226:	d005      	beq.n	8001234 <HAL_GPIO_Init+0x40>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	4013      	ands	r3, r2
 8001230:	2b02      	cmp	r3, #2
 8001232:	d130      	bne.n	8001296 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	43da      	mvns	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800126a:	2201      	movs	r2, #1
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	43da      	mvns	r2, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	2201      	movs	r2, #1
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2203      	movs	r2, #3
 800129c:	4013      	ands	r3, r2
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d017      	beq.n	80012d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	43da      	mvns	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2203      	movs	r2, #3
 80012d8:	4013      	ands	r3, r2
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d123      	bne.n	8001326 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3208      	adds	r2, #8
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	58d3      	ldr	r3, [r2, r3]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2207      	movs	r2, #7
 80012f0:	4013      	ands	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2107      	movs	r1, #7
 800130a:	400b      	ands	r3, r1
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	08da      	lsrs	r2, r3, #3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3208      	adds	r2, #8
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	6939      	ldr	r1, [r7, #16]
 8001324:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2203      	movs	r2, #3
 8001344:	401a      	ands	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	23c0      	movs	r3, #192	; 0xc0
 8001360:	029b      	lsls	r3, r3, #10
 8001362:	4013      	ands	r3, r2
 8001364:	d100      	bne.n	8001368 <HAL_GPIO_Init+0x174>
 8001366:	e092      	b.n	800148e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001368:	4a50      	ldr	r2, [pc, #320]	; (80014ac <HAL_GPIO_Init+0x2b8>)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3318      	adds	r3, #24
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	589b      	ldr	r3, [r3, r2]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2203      	movs	r2, #3
 800137a:	4013      	ands	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	220f      	movs	r2, #15
 8001380:	409a      	lsls	r2, r3
 8001382:	0013      	movs	r3, r2
 8001384:	43da      	mvns	r2, r3
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	429a      	cmp	r2, r3
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0x1ca>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a45      	ldr	r2, [pc, #276]	; (80014b0 <HAL_GPIO_Init+0x2bc>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00d      	beq.n	80013ba <HAL_GPIO_Init+0x1c6>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a44      	ldr	r2, [pc, #272]	; (80014b4 <HAL_GPIO_Init+0x2c0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x1c2>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a43      	ldr	r2, [pc, #268]	; (80014b8 <HAL_GPIO_Init+0x2c4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_GPIO_Init+0x1be>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x1cc>
 80013b2:	2305      	movs	r3, #5
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x1cc>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x1cc>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x1cc>
 80013be:	2300      	movs	r3, #0
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	2103      	movs	r1, #3
 80013c4:	400a      	ands	r2, r1
 80013c6:	00d2      	lsls	r2, r2, #3
 80013c8:	4093      	lsls	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013d0:	4936      	ldr	r1, [pc, #216]	; (80014ac <HAL_GPIO_Init+0x2b8>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3318      	adds	r3, #24
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013de:	4b33      	ldr	r3, [pc, #204]	; (80014ac <HAL_GPIO_Init+0x2b8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	035b      	lsls	r3, r3, #13
 80013f6:	4013      	ands	r3, r2
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_GPIO_Init+0x2b8>)
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <HAL_GPIO_Init+0x2b8>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	43da      	mvns	r2, r3
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	039b      	lsls	r3, r3, #14
 8001420:	4013      	ands	r3, r2
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_GPIO_Init+0x2b8>)
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_GPIO_Init+0x2b8>)
 8001434:	2384      	movs	r3, #132	; 0x84
 8001436:	58d3      	ldr	r3, [r2, r3]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	43da      	mvns	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	029b      	lsls	r3, r3, #10
 800144c:	4013      	ands	r3, r2
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001458:	4914      	ldr	r1, [pc, #80]	; (80014ac <HAL_GPIO_Init+0x2b8>)
 800145a:	2284      	movs	r2, #132	; 0x84
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <HAL_GPIO_Init+0x2b8>)
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	58d3      	ldr	r3, [r2, r3]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43da      	mvns	r2, r3
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	025b      	lsls	r3, r3, #9
 800147a:	4013      	ands	r3, r2
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001486:	4909      	ldr	r1, [pc, #36]	; (80014ac <HAL_GPIO_Init+0x2b8>)
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	40da      	lsrs	r2, r3
 800149c:	1e13      	subs	r3, r2, #0
 800149e:	d000      	beq.n	80014a2 <HAL_GPIO_Init+0x2ae>
 80014a0:	e6b0      	b.n	8001204 <HAL_GPIO_Init+0x10>
  }
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b006      	add	sp, #24
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021800 	.word	0x40021800
 80014b0:	50000400 	.word	0x50000400
 80014b4:	50000800 	.word	0x50000800
 80014b8:	50000c00 	.word	0x50000c00

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	0008      	movs	r0, r1
 80014c6:	0011      	movs	r1, r2
 80014c8:	1cbb      	adds	r3, r7, #2
 80014ca:	1c02      	adds	r2, r0, #0
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	1c7b      	adds	r3, r7, #1
 80014d0:	1c0a      	adds	r2, r1, #0
 80014d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d4:	1c7b      	adds	r3, r7, #1
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014dc:	1cbb      	adds	r3, r7, #2
 80014de:	881a      	ldrh	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014e6:	1cbb      	adds	r3, r7, #2
 80014e8:	881a      	ldrh	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e082      	b.n	8001610 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2241      	movs	r2, #65	; 0x41
 800150e:	5c9b      	ldrb	r3, [r3, r2]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d107      	bne.n	8001526 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2240      	movs	r2, #64	; 0x40
 800151a:	2100      	movs	r1, #0
 800151c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff fb37 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2241      	movs	r2, #65	; 0x41
 800152a:	2124      	movs	r1, #36	; 0x24
 800152c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	438a      	bics	r2, r1
 800153c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4934      	ldr	r1, [pc, #208]	; (8001618 <HAL_I2C_Init+0x120>)
 8001548:	400a      	ands	r2, r1
 800154a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4931      	ldr	r1, [pc, #196]	; (800161c <HAL_I2C_Init+0x124>)
 8001558:	400a      	ands	r2, r1
 800155a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	0209      	lsls	r1, r1, #8
 8001570:	430a      	orrs	r2, r1
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	e007      	b.n	8001586 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2184      	movs	r1, #132	; 0x84
 8001580:	0209      	lsls	r1, r1, #8
 8001582:	430a      	orrs	r2, r1
 8001584:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d104      	bne.n	8001598 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	491f      	ldr	r1, [pc, #124]	; (8001620 <HAL_I2C_Init+0x128>)
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	491a      	ldr	r1, [pc, #104]	; (800161c <HAL_I2C_Init+0x124>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69d9      	ldr	r1, [r3, #28]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1a      	ldr	r2, [r3, #32]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2241      	movs	r2, #65	; 0x41
 80015fc:	2120      	movs	r1, #32
 80015fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2242      	movs	r2, #66	; 0x42
 800160a:	2100      	movs	r1, #0
 800160c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}
 8001618:	f0ffffff 	.word	0xf0ffffff
 800161c:	ffff7fff 	.word	0xffff7fff
 8001620:	02008000 	.word	0x02008000

08001624 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af02      	add	r7, sp, #8
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	0008      	movs	r0, r1
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	0019      	movs	r1, r3
 8001632:	230a      	movs	r3, #10
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	1c02      	adds	r2, r0, #0
 8001638:	801a      	strh	r2, [r3, #0]
 800163a:	2308      	movs	r3, #8
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	1c0a      	adds	r2, r1, #0
 8001640:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2241      	movs	r2, #65	; 0x41
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b20      	cmp	r3, #32
 800164c:	d000      	beq.n	8001650 <HAL_I2C_Master_Transmit+0x2c>
 800164e:	e0e7      	b.n	8001820 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2240      	movs	r2, #64	; 0x40
 8001654:	5c9b      	ldrb	r3, [r3, r2]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d101      	bne.n	800165e <HAL_I2C_Master_Transmit+0x3a>
 800165a:	2302      	movs	r3, #2
 800165c:	e0e1      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1fe>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2240      	movs	r2, #64	; 0x40
 8001662:	2101      	movs	r1, #1
 8001664:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001666:	f7ff fce9 	bl	800103c <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	0219      	lsls	r1, r3, #8
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2319      	movs	r3, #25
 800167a:	2201      	movs	r2, #1
 800167c:	f000 f8fc 	bl	8001878 <I2C_WaitOnFlagUntilTimeout>
 8001680:	1e03      	subs	r3, r0, #0
 8001682:	d001      	beq.n	8001688 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0cc      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2241      	movs	r2, #65	; 0x41
 800168c:	2121      	movs	r1, #33	; 0x21
 800168e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2242      	movs	r2, #66	; 0x42
 8001694:	2110      	movs	r1, #16
 8001696:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2208      	movs	r2, #8
 80016a8:	18ba      	adds	r2, r7, r2
 80016aa:	8812      	ldrh	r2, [r2, #0]
 80016ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	2bff      	cmp	r3, #255	; 0xff
 80016bc:	d911      	bls.n	80016e2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	22ff      	movs	r2, #255	; 0xff
 80016c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	045c      	lsls	r4, r3, #17
 80016ce:	230a      	movs	r3, #10
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	8819      	ldrh	r1, [r3, #0]
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	4b55      	ldr	r3, [pc, #340]	; (800182c <HAL_I2C_Master_Transmit+0x208>)
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	0023      	movs	r3, r4
 80016dc:	f000 fa86 	bl	8001bec <I2C_TransferConfig>
 80016e0:	e075      	b.n	80017ce <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	049c      	lsls	r4, r3, #18
 80016f6:	230a      	movs	r3, #10
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	8819      	ldrh	r1, [r3, #0]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	4b4b      	ldr	r3, [pc, #300]	; (800182c <HAL_I2C_Master_Transmit+0x208>)
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	0023      	movs	r3, r4
 8001704:	f000 fa72 	bl	8001bec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001708:	e061      	b.n	80017ce <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	0018      	movs	r0, r3
 8001712:	f000 f8f0 	bl	80018f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001716:	1e03      	subs	r3, r0, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e081      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	781a      	ldrb	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001738:	b29b      	uxth	r3, r3
 800173a:	3b01      	subs	r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d03a      	beq.n	80017ce <HAL_I2C_Master_Transmit+0x1aa>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	2b00      	cmp	r3, #0
 800175e:	d136      	bne.n	80017ce <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	0013      	movs	r3, r2
 800176a:	2200      	movs	r2, #0
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	f000 f883 	bl	8001878 <I2C_WaitOnFlagUntilTimeout>
 8001772:	1e03      	subs	r3, r0, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e053      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	2bff      	cmp	r3, #255	; 0xff
 8001782:	d911      	bls.n	80017a8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	22ff      	movs	r2, #255	; 0xff
 8001788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	b2da      	uxtb	r2, r3
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	045c      	lsls	r4, r3, #17
 8001794:	230a      	movs	r3, #10
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	8819      	ldrh	r1, [r3, #0]
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	0023      	movs	r3, r4
 80017a2:	f000 fa23 	bl	8001bec <I2C_TransferConfig>
 80017a6:	e012      	b.n	80017ce <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	049c      	lsls	r4, r3, #18
 80017bc:	230a      	movs	r3, #10
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	8819      	ldrh	r1, [r3, #0]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	2300      	movs	r3, #0
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	0023      	movs	r3, r4
 80017ca:	f000 fa0f 	bl	8001bec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d198      	bne.n	800170a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 f8c8 	bl	8001974 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e4:	1e03      	subs	r3, r0, #0
 80017e6:	d001      	beq.n	80017ec <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e01a      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2220      	movs	r2, #32
 80017f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	490c      	ldr	r1, [pc, #48]	; (8001830 <HAL_I2C_Master_Transmit+0x20c>)
 8001800:	400a      	ands	r2, r1
 8001802:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2241      	movs	r2, #65	; 0x41
 8001808:	2120      	movs	r1, #32
 800180a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2242      	movs	r2, #66	; 0x42
 8001810:	2100      	movs	r1, #0
 8001812:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	2100      	movs	r1, #0
 800181a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	e000      	b.n	8001822 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001820:	2302      	movs	r3, #2
  }
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b007      	add	sp, #28
 8001828:	bd90      	pop	{r4, r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	80002000 	.word	0x80002000
 8001830:	fe00e800 	.word	0xfe00e800

08001834 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	2b02      	cmp	r3, #2
 8001848:	d103      	bne.n	8001852 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2201      	movs	r2, #1
 800185a:	4013      	ands	r3, r2
 800185c:	2b01      	cmp	r3, #1
 800185e:	d007      	beq.n	8001870 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699a      	ldr	r2, [r3, #24]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2101      	movs	r1, #1
 800186c:	430a      	orrs	r2, r1
 800186e:	619a      	str	r2, [r3, #24]
  }
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	1dfb      	adds	r3, r7, #7
 8001886:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001888:	e021      	b.n	80018ce <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	d01e      	beq.n	80018ce <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001890:	f7ff fbd4 	bl	800103c <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d302      	bcc.n	80018a6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d113      	bne.n	80018ce <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	2220      	movs	r2, #32
 80018ac:	431a      	orrs	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2241      	movs	r2, #65	; 0x41
 80018b6:	2120      	movs	r1, #32
 80018b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2242      	movs	r2, #66	; 0x42
 80018be:	2100      	movs	r1, #0
 80018c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2240      	movs	r2, #64	; 0x40
 80018c6:	2100      	movs	r1, #0
 80018c8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	4013      	ands	r3, r2
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	425a      	negs	r2, r3
 80018de:	4153      	adcs	r3, r2
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	001a      	movs	r2, r3
 80018e4:	1dfb      	adds	r3, r7, #7
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d0ce      	beq.n	800188a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b004      	add	sp, #16
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001902:	e02b      	b.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	68b9      	ldr	r1, [r7, #8]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	0018      	movs	r0, r3
 800190c:	f000 f86e 	bl	80019ec <I2C_IsErrorOccurred>
 8001910:	1e03      	subs	r3, r0, #0
 8001912:	d001      	beq.n	8001918 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e029      	b.n	800196c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3301      	adds	r3, #1
 800191c:	d01e      	beq.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800191e:	f7ff fb8d 	bl	800103c <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	429a      	cmp	r2, r3
 800192c:	d302      	bcc.n	8001934 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d113      	bne.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	2220      	movs	r2, #32
 800193a:	431a      	orrs	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2241      	movs	r2, #65	; 0x41
 8001944:	2120      	movs	r1, #32
 8001946:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2242      	movs	r2, #66	; 0x42
 800194c:	2100      	movs	r1, #0
 800194e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2240      	movs	r2, #64	; 0x40
 8001954:	2100      	movs	r1, #0
 8001956:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e007      	b.n	800196c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2202      	movs	r2, #2
 8001964:	4013      	ands	r3, r2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d1cc      	bne.n	8001904 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bd80      	pop	{r7, pc}

08001974 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001980:	e028      	b.n	80019d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	0018      	movs	r0, r3
 800198a:	f000 f82f 	bl	80019ec <I2C_IsErrorOccurred>
 800198e:	1e03      	subs	r3, r0, #0
 8001990:	d001      	beq.n	8001996 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e026      	b.n	80019e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001996:	f7ff fb51 	bl	800103c <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d302      	bcc.n	80019ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d113      	bne.n	80019d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	2220      	movs	r2, #32
 80019b2:	431a      	orrs	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2241      	movs	r2, #65	; 0x41
 80019bc:	2120      	movs	r1, #32
 80019be:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2242      	movs	r2, #66	; 0x42
 80019c4:	2100      	movs	r1, #0
 80019c6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2240      	movs	r2, #64	; 0x40
 80019cc:	2100      	movs	r1, #0
 80019ce:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e007      	b.n	80019e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2220      	movs	r2, #32
 80019dc:	4013      	ands	r3, r2
 80019de:	2b20      	cmp	r3, #32
 80019e0:	d1cf      	bne.n	8001982 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}

080019ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b08b      	sub	sp, #44	; 0x2c
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f8:	2327      	movs	r3, #39	; 0x27
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2210      	movs	r2, #16
 8001a14:	4013      	ands	r3, r2
 8001a16:	d100      	bne.n	8001a1a <I2C_IsErrorOccurred+0x2e>
 8001a18:	e082      	b.n	8001b20 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2210      	movs	r2, #16
 8001a20:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a22:	e060      	b.n	8001ae6 <I2C_IsErrorOccurred+0xfa>
 8001a24:	2427      	movs	r4, #39	; 0x27
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	193a      	adds	r2, r7, r4
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3301      	adds	r3, #1
 8001a32:	d058      	beq.n	8001ae6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a34:	f7ff fb02 	bl	800103c <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d306      	bcc.n	8001a52 <I2C_IsErrorOccurred+0x66>
 8001a44:	193b      	adds	r3, r7, r4
 8001a46:	193a      	adds	r2, r7, r4
 8001a48:	7812      	ldrb	r2, [r2, #0]
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d149      	bne.n	8001ae6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	01db      	lsls	r3, r3, #7
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a60:	2013      	movs	r0, #19
 8001a62:	183b      	adds	r3, r7, r0
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	2142      	movs	r1, #66	; 0x42
 8001a68:	5c52      	ldrb	r2, [r2, r1]
 8001a6a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699a      	ldr	r2, [r3, #24]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	401a      	ands	r2, r3
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d126      	bne.n	8001ace <I2C_IsErrorOccurred+0xe2>
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d021      	beq.n	8001ace <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	d01d      	beq.n	8001ace <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	01c9      	lsls	r1, r1, #7
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001aa4:	f7ff faca 	bl	800103c <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aac:	e00f      	b.n	8001ace <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001aae:	f7ff fac5 	bl	800103c <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b19      	cmp	r3, #25
 8001aba:	d908      	bls.n	8001ace <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ac4:	2327      	movs	r3, #39	; 0x27
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]

              break;
 8001acc:	e00b      	b.n	8001ae6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2127      	movs	r1, #39	; 0x27
 8001ada:	187a      	adds	r2, r7, r1
 8001adc:	1879      	adds	r1, r7, r1
 8001ade:	7809      	ldrb	r1, [r1, #0]
 8001ae0:	7011      	strb	r1, [r2, #0]
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	d1e3      	bne.n	8001aae <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2220      	movs	r2, #32
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d004      	beq.n	8001afe <I2C_IsErrorOccurred+0x112>
 8001af4:	2327      	movs	r3, #39	; 0x27
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d092      	beq.n	8001a24 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001afe:	2327      	movs	r3, #39	; 0x27
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	2204      	movs	r2, #4
 8001b14:	4313      	orrs	r3, r2
 8001b16:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b18:	2327      	movs	r3, #39	; 0x27
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d00c      	beq.n	8001b4c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4313      	orrs	r3, r2
 8001b38:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	0052      	lsls	r2, r2, #1
 8001b42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b44:	2327      	movs	r3, #39	; 0x27
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4013      	ands	r3, r2
 8001b54:	d00c      	beq.n	8001b70 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	2208      	movs	r2, #8
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	00d2      	lsls	r2, r2, #3
 8001b66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b68:	2327      	movs	r3, #39	; 0x27
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	d00c      	beq.n	8001b94 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b8c:	2327      	movs	r3, #39	; 0x27
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001b94:	2327      	movs	r3, #39	; 0x27
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d01d      	beq.n	8001bda <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff fe47 	bl	8001834 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	490d      	ldr	r1, [pc, #52]	; (8001be8 <I2C_IsErrorOccurred+0x1fc>)
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2241      	movs	r2, #65	; 0x41
 8001bc6:	2120      	movs	r1, #32
 8001bc8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2242      	movs	r2, #66	; 0x42
 8001bce:	2100      	movs	r1, #0
 8001bd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2240      	movs	r2, #64	; 0x40
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001bda:	2327      	movs	r3, #39	; 0x27
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	781b      	ldrb	r3, [r3, #0]
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b00b      	add	sp, #44	; 0x2c
 8001be6:	bd90      	pop	{r4, r7, pc}
 8001be8:	fe00e800 	.word	0xfe00e800

08001bec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	0008      	movs	r0, r1
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	240a      	movs	r4, #10
 8001bfc:	193b      	adds	r3, r7, r4
 8001bfe:	1c02      	adds	r2, r0, #0
 8001c00:	801a      	strh	r2, [r3, #0]
 8001c02:	2009      	movs	r0, #9
 8001c04:	183b      	adds	r3, r7, r0
 8001c06:	1c0a      	adds	r2, r1, #0
 8001c08:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c0a:	193b      	adds	r3, r7, r4
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	059b      	lsls	r3, r3, #22
 8001c10:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	0419      	lsls	r1, r3, #16
 8001c18:	23ff      	movs	r3, #255	; 0xff
 8001c1a:	041b      	lsls	r3, r3, #16
 8001c1c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c1e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	4313      	orrs	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c36:	0d51      	lsrs	r1, r2, #21
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	00d2      	lsls	r2, r2, #3
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	4907      	ldr	r1, [pc, #28]	; (8001c5c <I2C_TransferConfig+0x70>)
 8001c40:	430a      	orrs	r2, r1
 8001c42:	43d2      	mvns	r2, r2
 8001c44:	401a      	ands	r2, r3
 8001c46:	0011      	movs	r1, r2
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b007      	add	sp, #28
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	03ff63ff 	.word	0x03ff63ff

08001c60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2241      	movs	r2, #65	; 0x41
 8001c6e:	5c9b      	ldrb	r3, [r3, r2]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d138      	bne.n	8001ce8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2240      	movs	r2, #64	; 0x40
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e032      	b.n	8001cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	2101      	movs	r1, #1
 8001c8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2241      	movs	r2, #65	; 0x41
 8001c90:	2124      	movs	r1, #36	; 0x24
 8001c92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	438a      	bics	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4911      	ldr	r1, [pc, #68]	; (8001cf4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2241      	movs	r2, #65	; 0x41
 8001cd8:	2120      	movs	r1, #32
 8001cda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2240      	movs	r2, #64	; 0x40
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e000      	b.n	8001cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
  }
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	ffffefff 	.word	0xffffefff

08001cf8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2241      	movs	r2, #65	; 0x41
 8001d06:	5c9b      	ldrb	r3, [r3, r2]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	d139      	bne.n	8001d82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2240      	movs	r2, #64	; 0x40
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e033      	b.n	8001d84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	2101      	movs	r1, #1
 8001d22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2241      	movs	r2, #65	; 0x41
 8001d28:	2124      	movs	r1, #36	; 0x24
 8001d2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2101      	movs	r1, #1
 8001d38:	438a      	bics	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2241      	movs	r2, #65	; 0x41
 8001d72:	2120      	movs	r1, #32
 8001d74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e000      	b.n	8001d84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
  }
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b004      	add	sp, #16
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	fffff0ff 	.word	0xfffff0ff

08001d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	0019      	movs	r1, r3
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d11f      	bne.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	0013      	movs	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	189b      	adds	r3, r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4912      	ldr	r1, [pc, #72]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7fe f9a0 	bl	8000108 <__udivsi3>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dce:	e008      	b.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e001      	b.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e009      	b.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	401a      	ands	r2, r3
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d0ed      	beq.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b004      	add	sp, #16
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40007000 	.word	0x40007000
 8001e04:	fffff9ff 	.word	0xfffff9ff
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	000f4240 	.word	0x000f4240

08001e10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	23e0      	movs	r3, #224	; 0xe0
 8001e1a:	01db      	lsls	r3, r3, #7
 8001e1c:	4013      	ands	r3, r2
}
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e2f3      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	d100      	bne.n	8001e46 <HAL_RCC_OscConfig+0x1e>
 8001e44:	e07c      	b.n	8001f40 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e46:	4bc3      	ldr	r3, [pc, #780]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2238      	movs	r2, #56	; 0x38
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	4bc0      	ldr	r3, [pc, #768]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2203      	movs	r2, #3
 8001e56:	4013      	ands	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3e>
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d002      	beq.n	8001e6c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d10b      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	4bb9      	ldr	r3, [pc, #740]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	029b      	lsls	r3, r3, #10
 8001e74:	4013      	ands	r3, r2
 8001e76:	d062      	beq.n	8001f3e <HAL_RCC_OscConfig+0x116>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d15e      	bne.n	8001f3e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e2ce      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	025b      	lsls	r3, r3, #9
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x78>
 8001e90:	4bb0      	ldr	r3, [pc, #704]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4baf      	ldr	r3, [pc, #700]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	0249      	lsls	r1, r1, #9
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e020      	b.n	8001ee2 <HAL_RCC_OscConfig+0xba>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	23a0      	movs	r3, #160	; 0xa0
 8001ea6:	02db      	lsls	r3, r3, #11
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d10e      	bne.n	8001eca <HAL_RCC_OscConfig+0xa2>
 8001eac:	4ba9      	ldr	r3, [pc, #676]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4ba8      	ldr	r3, [pc, #672]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	2180      	movs	r1, #128	; 0x80
 8001eb4:	02c9      	lsls	r1, r1, #11
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	4ba6      	ldr	r3, [pc, #664]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4ba5      	ldr	r3, [pc, #660]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	0249      	lsls	r1, r1, #9
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0xba>
 8001eca:	4ba2      	ldr	r3, [pc, #648]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4ba1      	ldr	r3, [pc, #644]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ed0:	49a1      	ldr	r1, [pc, #644]	; (8002158 <HAL_RCC_OscConfig+0x330>)
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	4b9f      	ldr	r3, [pc, #636]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b9e      	ldr	r3, [pc, #632]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001edc:	499f      	ldr	r1, [pc, #636]	; (800215c <HAL_RCC_OscConfig+0x334>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d014      	beq.n	8001f14 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f8a7 	bl	800103c <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff f8a2 	bl	800103c <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e28d      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	4b93      	ldr	r3, [pc, #588]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	029b      	lsls	r3, r3, #10
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xcc>
 8001f12:	e015      	b.n	8001f40 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff f892 	bl	800103c <HAL_GetTick>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1e:	f7ff f88d 	bl	800103c <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	; 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e278      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f30:	4b88      	ldr	r3, [pc, #544]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	029b      	lsls	r3, r3, #10
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCC_OscConfig+0xf6>
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2202      	movs	r2, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	d100      	bne.n	8001f4c <HAL_RCC_OscConfig+0x124>
 8001f4a:	e099      	b.n	8002080 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2238      	movs	r2, #56	; 0x38
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f56:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2b10      	cmp	r3, #16
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_OscConfig+0x144>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d002      	beq.n	8001f72 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d135      	bne.n	8001fde <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f72:	4b78      	ldr	r3, [pc, #480]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x162>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e24b      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b72      	ldr	r3, [pc, #456]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a74      	ldr	r2, [pc, #464]	; (8002160 <HAL_RCC_OscConfig+0x338>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	021a      	lsls	r2, r3, #8
 8001f9a:	4b6e      	ldr	r3, [pc, #440]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d112      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fa6:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	; (8002164 <HAL_RCC_OscConfig+0x33c>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	4b67      	ldr	r3, [pc, #412]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001fba:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0adb      	lsrs	r3, r3, #11
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	4a68      	ldr	r2, [pc, #416]	; (8002168 <HAL_RCC_OscConfig+0x340>)
 8001fc6:	40da      	lsrs	r2, r3
 8001fc8:	4b68      	ldr	r3, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x344>)
 8001fca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fcc:	4b68      	ldr	r3, [pc, #416]	; (8002170 <HAL_RCC_OscConfig+0x348>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7fe ff2f 	bl	8000e34 <HAL_InitTick>
 8001fd6:	1e03      	subs	r3, r0, #0
 8001fd8:	d051      	beq.n	800207e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e221      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d030      	beq.n	8002048 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fe6:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a5e      	ldr	r2, [pc, #376]	; (8002164 <HAL_RCC_OscConfig+0x33c>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	4b57      	ldr	r3, [pc, #348]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ffa:	4b56      	ldr	r3, [pc, #344]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b55      	ldr	r3, [pc, #340]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	0049      	lsls	r1, r1, #1
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff f818 	bl	800103c <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff f813 	bl	800103c <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e1fe      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002024:	4b4b      	ldr	r3, [pc, #300]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4013      	ands	r3, r2
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b48      	ldr	r3, [pc, #288]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <HAL_RCC_OscConfig+0x338>)
 8002036:	4013      	ands	r3, r2
 8002038:	0019      	movs	r1, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	021a      	lsls	r2, r3, #8
 8002040:	4b44      	ldr	r3, [pc, #272]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	e01b      	b.n	8002080 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002048:	4b42      	ldr	r3, [pc, #264]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b41      	ldr	r3, [pc, #260]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 800204e:	4949      	ldr	r1, [pc, #292]	; (8002174 <HAL_RCC_OscConfig+0x34c>)
 8002050:	400a      	ands	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7fe fff2 	bl	800103c <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205e:	f7fe ffed 	bl	800103c <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1d8      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002070:	4b38      	ldr	r3, [pc, #224]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4013      	ands	r3, r2
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0x236>
 800207c:	e000      	b.n	8002080 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800207e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2208      	movs	r2, #8
 8002086:	4013      	ands	r3, r2
 8002088:	d047      	beq.n	800211a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2238      	movs	r2, #56	; 0x38
 8002090:	4013      	ands	r3, r2
 8002092:	2b18      	cmp	r3, #24
 8002094:	d10a      	bne.n	80020ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209a:	2202      	movs	r2, #2
 800209c:	4013      	ands	r3, r2
 800209e:	d03c      	beq.n	800211a <HAL_RCC_OscConfig+0x2f2>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d138      	bne.n	800211a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e1ba      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d019      	beq.n	80020e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 80020b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020b8:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	430a      	orrs	r2, r1
 80020be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7fe ffbc 	bl	800103c <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ca:	f7fe ffb7 	bl	800103c <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e1a2      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 80020de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e0:	2202      	movs	r2, #2
 80020e2:	4013      	ands	r3, r2
 80020e4:	d0f1      	beq.n	80020ca <HAL_RCC_OscConfig+0x2a2>
 80020e6:	e018      	b.n	800211a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 80020ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 80020ee:	2101      	movs	r1, #1
 80020f0:	438a      	bics	r2, r1
 80020f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe ffa2 	bl	800103c <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fe:	f7fe ff9d 	bl	800103c <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e188      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002114:	2202      	movs	r2, #2
 8002116:	4013      	ands	r3, r2
 8002118:	d1f1      	bne.n	80020fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2204      	movs	r2, #4
 8002120:	4013      	ands	r3, r2
 8002122:	d100      	bne.n	8002126 <HAL_RCC_OscConfig+0x2fe>
 8002124:	e0c6      	b.n	80022b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	231f      	movs	r3, #31
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2238      	movs	r2, #56	; 0x38
 8002134:	4013      	ands	r3, r2
 8002136:	2b20      	cmp	r3, #32
 8002138:	d11e      	bne.n	8002178 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_RCC_OscConfig+0x32c>)
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	2202      	movs	r2, #2
 8002140:	4013      	ands	r3, r2
 8002142:	d100      	bne.n	8002146 <HAL_RCC_OscConfig+0x31e>
 8002144:	e0b6      	b.n	80022b4 <HAL_RCC_OscConfig+0x48c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d000      	beq.n	8002150 <HAL_RCC_OscConfig+0x328>
 800214e:	e0b1      	b.n	80022b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e166      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
 8002154:	40021000 	.word	0x40021000
 8002158:	fffeffff 	.word	0xfffeffff
 800215c:	fffbffff 	.word	0xfffbffff
 8002160:	ffff80ff 	.word	0xffff80ff
 8002164:	ffffc7ff 	.word	0xffffc7ff
 8002168:	00f42400 	.word	0x00f42400
 800216c:	20000000 	.word	0x20000000
 8002170:	20000004 	.word	0x20000004
 8002174:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002178:	4bac      	ldr	r3, [pc, #688]	; (800242c <HAL_RCC_OscConfig+0x604>)
 800217a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	055b      	lsls	r3, r3, #21
 8002180:	4013      	ands	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_RCC_OscConfig+0x360>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x362>
 8002188:	2300      	movs	r3, #0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d011      	beq.n	80021b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4ba7      	ldr	r3, [pc, #668]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002192:	4ba6      	ldr	r3, [pc, #664]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0549      	lsls	r1, r1, #21
 8002198:	430a      	orrs	r2, r1
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c
 800219c:	4ba3      	ldr	r3, [pc, #652]	; (800242c <HAL_RCC_OscConfig+0x604>)
 800219e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	055b      	lsls	r3, r3, #21
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80021aa:	231f      	movs	r3, #31
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b2:	4b9f      	ldr	r3, [pc, #636]	; (8002430 <HAL_RCC_OscConfig+0x608>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4013      	ands	r3, r2
 80021bc:	d11a      	bne.n	80021f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021be:	4b9c      	ldr	r3, [pc, #624]	; (8002430 <HAL_RCC_OscConfig+0x608>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b9b      	ldr	r3, [pc, #620]	; (8002430 <HAL_RCC_OscConfig+0x608>)
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0049      	lsls	r1, r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80021cc:	f7fe ff36 	bl	800103c <HAL_GetTick>
 80021d0:	0003      	movs	r3, r0
 80021d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7fe ff31 	bl	800103c <HAL_GetTick>
 80021da:	0002      	movs	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e11c      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e8:	4b91      	ldr	r3, [pc, #580]	; (8002430 <HAL_RCC_OscConfig+0x608>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4013      	ands	r3, r2
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x3e2>
 80021fc:	4b8b      	ldr	r3, [pc, #556]	; (800242c <HAL_RCC_OscConfig+0x604>)
 80021fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002200:	4b8a      	ldr	r3, [pc, #552]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002202:	2101      	movs	r1, #1
 8002204:	430a      	orrs	r2, r1
 8002206:	65da      	str	r2, [r3, #92]	; 0x5c
 8002208:	e01c      	b.n	8002244 <HAL_RCC_OscConfig+0x41c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b05      	cmp	r3, #5
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x404>
 8002212:	4b86      	ldr	r3, [pc, #536]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002216:	4b85      	ldr	r3, [pc, #532]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002218:	2104      	movs	r1, #4
 800221a:	430a      	orrs	r2, r1
 800221c:	65da      	str	r2, [r3, #92]	; 0x5c
 800221e:	4b83      	ldr	r3, [pc, #524]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002220:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002222:	4b82      	ldr	r3, [pc, #520]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002224:	2101      	movs	r1, #1
 8002226:	430a      	orrs	r2, r1
 8002228:	65da      	str	r2, [r3, #92]	; 0x5c
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0x41c>
 800222c:	4b7f      	ldr	r3, [pc, #508]	; (800242c <HAL_RCC_OscConfig+0x604>)
 800222e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002230:	4b7e      	ldr	r3, [pc, #504]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002232:	2101      	movs	r1, #1
 8002234:	438a      	bics	r2, r1
 8002236:	65da      	str	r2, [r3, #92]	; 0x5c
 8002238:	4b7c      	ldr	r3, [pc, #496]	; (800242c <HAL_RCC_OscConfig+0x604>)
 800223a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800223c:	4b7b      	ldr	r3, [pc, #492]	; (800242c <HAL_RCC_OscConfig+0x604>)
 800223e:	2104      	movs	r1, #4
 8002240:	438a      	bics	r2, r1
 8002242:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d014      	beq.n	8002276 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fef6 	bl	800103c <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002254:	e009      	b.n	800226a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7fe fef1 	bl	800103c <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	4a74      	ldr	r2, [pc, #464]	; (8002434 <HAL_RCC_OscConfig+0x60c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e0db      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226a:	4b70      	ldr	r3, [pc, #448]	; (800242c <HAL_RCC_OscConfig+0x604>)
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	2202      	movs	r2, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x42e>
 8002274:	e013      	b.n	800229e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7fe fee1 	bl	800103c <HAL_GetTick>
 800227a:	0003      	movs	r3, r0
 800227c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800227e:	e009      	b.n	8002294 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f7fe fedc 	bl	800103c <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	4a6a      	ldr	r2, [pc, #424]	; (8002434 <HAL_RCC_OscConfig+0x60c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0c6      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002294:	4b65      	ldr	r3, [pc, #404]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	2202      	movs	r2, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800229e:	231f      	movs	r3, #31
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022a8:	4b60      	ldr	r3, [pc, #384]	; (800242c <HAL_RCC_OscConfig+0x604>)
 80022aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ac:	4b5f      	ldr	r3, [pc, #380]	; (800242c <HAL_RCC_OscConfig+0x604>)
 80022ae:	4962      	ldr	r1, [pc, #392]	; (8002438 <HAL_RCC_OscConfig+0x610>)
 80022b0:	400a      	ands	r2, r1
 80022b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d100      	bne.n	80022be <HAL_RCC_OscConfig+0x496>
 80022bc:	e0b0      	b.n	8002420 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022be:	4b5b      	ldr	r3, [pc, #364]	; (800242c <HAL_RCC_OscConfig+0x604>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2238      	movs	r2, #56	; 0x38
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d100      	bne.n	80022cc <HAL_RCC_OscConfig+0x4a4>
 80022ca:	e078      	b.n	80023be <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d153      	bne.n	800237c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d4:	4b55      	ldr	r3, [pc, #340]	; (800242c <HAL_RCC_OscConfig+0x604>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b54      	ldr	r3, [pc, #336]	; (800242c <HAL_RCC_OscConfig+0x604>)
 80022da:	4958      	ldr	r1, [pc, #352]	; (800243c <HAL_RCC_OscConfig+0x614>)
 80022dc:	400a      	ands	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe feac 	bl	800103c <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7fe fea7 	bl	800103c <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e092      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fc:	4b4b      	ldr	r3, [pc, #300]	; (800242c <HAL_RCC_OscConfig+0x604>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	049b      	lsls	r3, r3, #18
 8002304:	4013      	ands	r3, r2
 8002306:	d1f0      	bne.n	80022ea <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002308:	4b48      	ldr	r3, [pc, #288]	; (800242c <HAL_RCC_OscConfig+0x604>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a4c      	ldr	r2, [pc, #304]	; (8002440 <HAL_RCC_OscConfig+0x618>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	431a      	orrs	r2, r3
 8002330:	4b3e      	ldr	r3, [pc, #248]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002336:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b3c      	ldr	r3, [pc, #240]	; (800242c <HAL_RCC_OscConfig+0x604>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0449      	lsls	r1, r1, #17
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002344:	4b39      	ldr	r3, [pc, #228]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_RCC_OscConfig+0x604>)
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	0549      	lsls	r1, r1, #21
 800234e:	430a      	orrs	r2, r1
 8002350:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe fe73 	bl	800103c <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235c:	f7fe fe6e 	bl	800103c <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e059      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	049b      	lsls	r3, r3, #18
 8002376:	4013      	ands	r3, r2
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x534>
 800237a:	e051      	b.n	8002420 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <HAL_RCC_OscConfig+0x604>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_RCC_OscConfig+0x604>)
 8002382:	492e      	ldr	r1, [pc, #184]	; (800243c <HAL_RCC_OscConfig+0x614>)
 8002384:	400a      	ands	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fe58 	bl	800103c <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe fe53 	bl	800103c <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e03e      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <HAL_RCC_OscConfig+0x604>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	049b      	lsls	r3, r3, #18
 80023ac:	4013      	ands	r3, r2
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80023b0:	4b1e      	ldr	r3, [pc, #120]	; (800242c <HAL_RCC_OscConfig+0x604>)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_RCC_OscConfig+0x604>)
 80023b6:	4923      	ldr	r1, [pc, #140]	; (8002444 <HAL_RCC_OscConfig+0x61c>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]
 80023bc:	e030      	b.n	8002420 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e02b      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_RCC_OscConfig+0x604>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2203      	movs	r2, #3
 80023d4:	401a      	ands	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d11e      	bne.n	800241c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2270      	movs	r2, #112	; 0x70
 80023e2:	401a      	ands	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d117      	bne.n	800241c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	23fe      	movs	r3, #254	; 0xfe
 80023f0:	01db      	lsls	r3, r3, #7
 80023f2:	401a      	ands	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d10e      	bne.n	800241c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	23f8      	movs	r3, #248	; 0xf8
 8002402:	039b      	lsls	r3, r3, #14
 8002404:	401a      	ands	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d106      	bne.n	800241c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	0f5b      	lsrs	r3, r3, #29
 8002412:	075a      	lsls	r2, r3, #29
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b008      	add	sp, #32
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	40021000 	.word	0x40021000
 8002430:	40007000 	.word	0x40007000
 8002434:	00001388 	.word	0x00001388
 8002438:	efffffff 	.word	0xefffffff
 800243c:	feffffff 	.word	0xfeffffff
 8002440:	1fc1808c 	.word	0x1fc1808c
 8002444:	effefffc 	.word	0xeffefffc

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0e9      	b.n	8002630 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800245c:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2207      	movs	r2, #7
 8002462:	4013      	ands	r3, r2
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d91e      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b73      	ldr	r3, [pc, #460]	; (8002638 <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2207      	movs	r2, #7
 8002470:	4393      	bics	r3, r2
 8002472:	0019      	movs	r1, r3
 8002474:	4b70      	ldr	r3, [pc, #448]	; (8002638 <HAL_RCC_ClockConfig+0x1f0>)
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800247c:	f7fe fdde 	bl	800103c <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002484:	e009      	b.n	800249a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002486:	f7fe fdd9 	bl	800103c <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	4a6a      	ldr	r2, [pc, #424]	; (800263c <HAL_RCC_ClockConfig+0x1f4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e0ca      	b.n	8002630 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_ClockConfig+0x1f0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2207      	movs	r2, #7
 80024a0:	4013      	ands	r3, r2
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1ee      	bne.n	8002486 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2202      	movs	r2, #2
 80024ae:	4013      	ands	r3, r2
 80024b0:	d015      	beq.n	80024de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2204      	movs	r2, #4
 80024b8:	4013      	ands	r3, r2
 80024ba:	d006      	beq.n	80024ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024bc:	4b60      	ldr	r3, [pc, #384]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	4b5f      	ldr	r3, [pc, #380]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 80024c2:	21e0      	movs	r1, #224	; 0xe0
 80024c4:	01c9      	lsls	r1, r1, #7
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4a5d      	ldr	r2, [pc, #372]	; (8002644 <HAL_RCC_ClockConfig+0x1fc>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 80024da:	430a      	orrs	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d057      	beq.n	8002598 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	029b      	lsls	r3, r3, #10
 80024f8:	4013      	ands	r3, r2
 80024fa:	d12b      	bne.n	8002554 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e097      	b.n	8002630 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d107      	bne.n	8002518 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002508:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	049b      	lsls	r3, r3, #18
 8002510:	4013      	ands	r3, r2
 8002512:	d11f      	bne.n	8002554 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e08b      	b.n	8002630 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002520:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4013      	ands	r3, r2
 800252a:	d113      	bne.n	8002554 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e07f      	b.n	8002630 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d106      	bne.n	8002546 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	2202      	movs	r2, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d108      	bne.n	8002554 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e074      	b.n	8002630 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	2202      	movs	r2, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e06d      	b.n	8002630 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002554:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2207      	movs	r2, #7
 800255a:	4393      	bics	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 8002564:	430a      	orrs	r2, r1
 8002566:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002568:	f7fe fd68 	bl	800103c <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002570:	e009      	b.n	8002586 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002572:	f7fe fd63 	bl	800103c <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	4a2f      	ldr	r2, [pc, #188]	; (800263c <HAL_RCC_ClockConfig+0x1f4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e054      	b.n	8002630 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2238      	movs	r2, #56	; 0x38
 800258c:	401a      	ands	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	429a      	cmp	r2, r3
 8002596:	d1ec      	bne.n	8002572 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <HAL_RCC_ClockConfig+0x1f0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2207      	movs	r2, #7
 800259e:	4013      	ands	r3, r2
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d21e      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_ClockConfig+0x1f0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2207      	movs	r2, #7
 80025ac:	4393      	bics	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <HAL_RCC_ClockConfig+0x1f0>)
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fd40 	bl	800103c <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025c0:	e009      	b.n	80025d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c2:	f7fe fd3b 	bl	800103c <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_RCC_ClockConfig+0x1f4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e02c      	b.n	8002630 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_RCC_ClockConfig+0x1f0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2207      	movs	r2, #7
 80025dc:	4013      	ands	r3, r2
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1ee      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2204      	movs	r2, #4
 80025ea:	4013      	ands	r3, r2
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <HAL_RCC_ClockConfig+0x200>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	0019      	movs	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 80025fe:	430a      	orrs	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002602:	f000 f829 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002606:	0001      	movs	r1, r0
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCC_ClockConfig+0x1f8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	220f      	movs	r2, #15
 8002610:	401a      	ands	r2, r3
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_RCC_ClockConfig+0x204>)
 8002614:	0092      	lsls	r2, r2, #2
 8002616:	58d3      	ldr	r3, [r2, r3]
 8002618:	221f      	movs	r2, #31
 800261a:	4013      	ands	r3, r2
 800261c:	000a      	movs	r2, r1
 800261e:	40da      	lsrs	r2, r3
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_ClockConfig+0x208>)
 8002622:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_RCC_ClockConfig+0x20c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0018      	movs	r0, r3
 800262a:	f7fe fc03 	bl	8000e34 <HAL_InitTick>
 800262e:	0003      	movs	r3, r0
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b004      	add	sp, #16
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40022000 	.word	0x40022000
 800263c:	00001388 	.word	0x00001388
 8002640:	40021000 	.word	0x40021000
 8002644:	fffff0ff 	.word	0xfffff0ff
 8002648:	ffff8fff 	.word	0xffff8fff
 800264c:	08006958 	.word	0x08006958
 8002650:	20000000 	.word	0x20000000
 8002654:	20000004 	.word	0x20000004

08002658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2238      	movs	r2, #56	; 0x38
 8002664:	4013      	ands	r3, r2
 8002666:	d10f      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002668:	4b39      	ldr	r3, [pc, #228]	; (8002750 <HAL_RCC_GetSysClockFreq+0xf8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0adb      	lsrs	r3, r3, #11
 800266e:	2207      	movs	r2, #7
 8002670:	4013      	ands	r3, r2
 8002672:	2201      	movs	r2, #1
 8002674:	409a      	lsls	r2, r3
 8002676:	0013      	movs	r3, r2
 8002678:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800267a:	6839      	ldr	r1, [r7, #0]
 800267c:	4835      	ldr	r0, [pc, #212]	; (8002754 <HAL_RCC_GetSysClockFreq+0xfc>)
 800267e:	f7fd fd43 	bl	8000108 <__udivsi3>
 8002682:	0003      	movs	r3, r0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	e05d      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002688:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_RCC_GetSysClockFreq+0xf8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2238      	movs	r2, #56	; 0x38
 800268e:	4013      	ands	r3, r2
 8002690:	2b08      	cmp	r3, #8
 8002692:	d102      	bne.n	800269a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_RCC_GetSysClockFreq+0x100>)
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e054      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_RCC_GetSysClockFreq+0xf8>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2238      	movs	r2, #56	; 0x38
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b10      	cmp	r3, #16
 80026a4:	d138      	bne.n	8002718 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2203      	movs	r2, #3
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	2207      	movs	r2, #7
 80026b8:	4013      	ands	r3, r2
 80026ba:	3301      	adds	r3, #1
 80026bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d10d      	bne.n	80026e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	4824      	ldr	r0, [pc, #144]	; (8002758 <HAL_RCC_GetSysClockFreq+0x100>)
 80026c8:	f7fd fd1e 	bl	8000108 <__udivsi3>
 80026cc:	0003      	movs	r3, r0
 80026ce:	0019      	movs	r1, r3
 80026d0:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	227f      	movs	r2, #127	; 0x7f
 80026d8:	4013      	ands	r3, r2
 80026da:	434b      	muls	r3, r1
 80026dc:	617b      	str	r3, [r7, #20]
        break;
 80026de:	e00d      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	481c      	ldr	r0, [pc, #112]	; (8002754 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026e4:	f7fd fd10 	bl	8000108 <__udivsi3>
 80026e8:	0003      	movs	r3, r0
 80026ea:	0019      	movs	r1, r3
 80026ec:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	227f      	movs	r2, #127	; 0x7f
 80026f4:	4013      	ands	r3, r2
 80026f6:	434b      	muls	r3, r1
 80026f8:	617b      	str	r3, [r7, #20]
        break;
 80026fa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0f5b      	lsrs	r3, r3, #29
 8002702:	2207      	movs	r2, #7
 8002704:	4013      	ands	r3, r2
 8002706:	3301      	adds	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	f7fd fcfb 	bl	8000108 <__udivsi3>
 8002712:	0003      	movs	r3, r0
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	e015      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_RCC_GetSysClockFreq+0xf8>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2238      	movs	r2, #56	; 0x38
 800271e:	4013      	ands	r3, r2
 8002720:	2b20      	cmp	r3, #32
 8002722:	d103      	bne.n	800272c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	e00b      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <HAL_RCC_GetSysClockFreq+0xf8>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2238      	movs	r2, #56	; 0x38
 8002732:	4013      	ands	r3, r2
 8002734:	2b18      	cmp	r3, #24
 8002736:	d103      	bne.n	8002740 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002738:	23fa      	movs	r3, #250	; 0xfa
 800273a:	01db      	lsls	r3, r3, #7
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	e001      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002744:	693b      	ldr	r3, [r7, #16]
}
 8002746:	0018      	movs	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	b006      	add	sp, #24
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	40021000 	.word	0x40021000
 8002754:	00f42400 	.word	0x00f42400
 8002758:	007a1200 	.word	0x007a1200

0800275c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002760:	4b02      	ldr	r3, [pc, #8]	; (800276c <HAL_RCC_GetHCLKFreq+0x10>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	20000000 	.word	0x20000000

08002770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b5b0      	push	{r4, r5, r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002774:	f7ff fff2 	bl	800275c <HAL_RCC_GetHCLKFreq>
 8002778:	0004      	movs	r4, r0
 800277a:	f7ff fb49 	bl	8001e10 <LL_RCC_GetAPB1Prescaler>
 800277e:	0003      	movs	r3, r0
 8002780:	0b1a      	lsrs	r2, r3, #12
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002784:	0092      	lsls	r2, r2, #2
 8002786:	58d3      	ldr	r3, [r2, r3]
 8002788:	221f      	movs	r2, #31
 800278a:	4013      	ands	r3, r2
 800278c:	40dc      	lsrs	r4, r3
 800278e:	0023      	movs	r3, r4
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bdb0      	pop	{r4, r5, r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	08006998 	.word	0x08006998

0800279c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2207      	movs	r2, #7
 80027aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027ac:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_RCC_GetClockConfig+0x4c>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2207      	movs	r2, #7
 80027b2:	401a      	ands	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_GetClockConfig+0x4c>)
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	23f0      	movs	r3, #240	; 0xf0
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	401a      	ands	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_RCC_GetClockConfig+0x4c>)
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	23e0      	movs	r3, #224	; 0xe0
 80027cc:	01db      	lsls	r3, r3, #7
 80027ce:	401a      	ands	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetClockConfig+0x50>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2207      	movs	r2, #7
 80027da:	401a      	ands	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	601a      	str	r2, [r3, #0]
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40022000 	.word	0x40022000

080027f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80027f8:	2313      	movs	r3, #19
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002800:	2312      	movs	r3, #18
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	029b      	lsls	r3, r3, #10
 8002810:	4013      	ands	r3, r2
 8002812:	d100      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002814:	e0a3      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2011      	movs	r0, #17
 8002818:	183b      	adds	r3, r7, r0
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281e:	4b86      	ldr	r3, [pc, #536]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	055b      	lsls	r3, r3, #21
 8002826:	4013      	ands	r3, r2
 8002828:	d110      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	4b83      	ldr	r3, [pc, #524]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800282c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800282e:	4b82      	ldr	r3, [pc, #520]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	0549      	lsls	r1, r1, #21
 8002834:	430a      	orrs	r2, r1
 8002836:	63da      	str	r2, [r3, #60]	; 0x3c
 8002838:	4b7f      	ldr	r3, [pc, #508]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800283a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	055b      	lsls	r3, r3, #21
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002846:	183b      	adds	r3, r7, r0
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284c:	4b7b      	ldr	r3, [pc, #492]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b7a      	ldr	r3, [pc, #488]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	0049      	lsls	r1, r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800285a:	f7fe fbef 	bl	800103c <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002862:	e00b      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002864:	f7fe fbea 	bl	800103c <HAL_GetTick>
 8002868:	0002      	movs	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d904      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002872:	2313      	movs	r3, #19
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	2203      	movs	r2, #3
 8002878:	701a      	strb	r2, [r3, #0]
        break;
 800287a:	e005      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287c:	4b6f      	ldr	r3, [pc, #444]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4013      	ands	r3, r2
 8002886:	d0ed      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002888:	2313      	movs	r3, #19
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d154      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002892:	4b69      	ldr	r3, [pc, #420]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002894:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002896:	23c0      	movs	r3, #192	; 0xc0
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4013      	ands	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d019      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d014      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	4a63      	ldr	r2, [pc, #396]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b8:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028bc:	4b5e      	ldr	r3, [pc, #376]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	0249      	lsls	r1, r1, #9
 80028c2:	430a      	orrs	r2, r1
 80028c4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c6:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028ca:	4b5b      	ldr	r3, [pc, #364]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028cc:	495d      	ldr	r1, [pc, #372]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028d2:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2201      	movs	r2, #1
 80028dc:	4013      	ands	r3, r2
 80028de:	d016      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fbac 	bl	800103c <HAL_GetTick>
 80028e4:	0003      	movs	r3, r0
 80028e6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e8:	e00c      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fba7 	bl	800103c <HAL_GetTick>
 80028ee:	0002      	movs	r2, r0
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	4a54      	ldr	r2, [pc, #336]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d904      	bls.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80028fa:	2313      	movs	r3, #19
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2203      	movs	r2, #3
 8002900:	701a      	strb	r2, [r3, #0]
            break;
 8002902:	e004      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002904:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d0ed      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800290e:	2313      	movs	r3, #19
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002918:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	4a48      	ldr	r2, [pc, #288]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800291e:	4013      	ands	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	4b44      	ldr	r3, [pc, #272]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002928:	430a      	orrs	r2, r1
 800292a:	65da      	str	r2, [r3, #92]	; 0x5c
 800292c:	e00c      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800292e:	2312      	movs	r3, #18
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	2213      	movs	r2, #19
 8002934:	18ba      	adds	r2, r7, r2
 8002936:	7812      	ldrb	r2, [r2, #0]
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e005      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293c:	2312      	movs	r3, #18
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2213      	movs	r2, #19
 8002942:	18ba      	adds	r2, r7, r2
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002948:	2311      	movs	r3, #17
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002956:	4b38      	ldr	r3, [pc, #224]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002958:	493c      	ldr	r1, [pc, #240]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800295a:	400a      	ands	r2, r1
 800295c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2201      	movs	r2, #1
 8002964:	4013      	ands	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002968:	4b33      	ldr	r3, [pc, #204]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	2203      	movs	r2, #3
 800296e:	4393      	bics	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002978:	430a      	orrs	r2, r1
 800297a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2202      	movs	r2, #2
 8002982:	4013      	ands	r3, r2
 8002984:	d009      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002986:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	220c      	movs	r2, #12
 800298c:	4393      	bics	r3, r2
 800298e:	0019      	movs	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002996:	430a      	orrs	r2, r1
 8002998:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2220      	movs	r2, #32
 80029a0:	4013      	ands	r3, r2
 80029a2:	d009      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029a4:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a8:	4a29      	ldr	r2, [pc, #164]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029b4:	430a      	orrs	r2, r1
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	01db      	lsls	r3, r3, #7
 80029c0:	4013      	ands	r3, r2
 80029c2:	d015      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	0899      	lsrs	r1, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029d2:	430a      	orrs	r2, r1
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	05db      	lsls	r3, r3, #23
 80029de:	429a      	cmp	r2, r3
 80029e0:	d106      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	0249      	lsls	r1, r1, #9
 80029ec:	430a      	orrs	r2, r1
 80029ee:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	4013      	ands	r3, r2
 80029fa:	d016      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80029fc:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	01db      	lsls	r3, r3, #7
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	0249      	lsls	r1, r1, #9
 8002a26:	430a      	orrs	r2, r1
 8002a28:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a2a:	2312      	movs	r3, #18
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	781b      	ldrb	r3, [r3, #0]
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b006      	add	sp, #24
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	fffffcff 	.word	0xfffffcff
 8002a44:	fffeffff 	.word	0xfffeffff
 8002a48:	00001388 	.word	0x00001388
 8002a4c:	efffffff 	.word	0xefffffff
 8002a50:	ffffcfff 	.word	0xffffcfff
 8002a54:	ffff3fff 	.word	0xffff3fff

08002a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e04a      	b.n	8002b00 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223d      	movs	r2, #61	; 0x3d
 8002a6e:	5c9b      	ldrb	r3, [r3, r2]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	223c      	movs	r2, #60	; 0x3c
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 f841 	bl	8002b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	223d      	movs	r2, #61	; 0x3d
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3304      	adds	r3, #4
 8002a96:	0019      	movs	r1, r3
 8002a98:	0010      	movs	r0, r2
 8002a9a:	f000 fae1 	bl	8003060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2248      	movs	r2, #72	; 0x48
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223e      	movs	r2, #62	; 0x3e
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	223f      	movs	r2, #63	; 0x3f
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2240      	movs	r2, #64	; 0x40
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2241      	movs	r2, #65	; 0x41
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2242      	movs	r2, #66	; 0x42
 8002aca:	2101      	movs	r1, #1
 8002acc:	5499      	strb	r1, [r3, r2]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2243      	movs	r2, #67	; 0x43
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2244      	movs	r2, #68	; 0x44
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2245      	movs	r2, #69	; 0x45
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2246      	movs	r2, #70	; 0x46
 8002aea:	2101      	movs	r1, #1
 8002aec:	5499      	strb	r1, [r3, r2]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2247      	movs	r2, #71	; 0x47
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	223d      	movs	r2, #61	; 0x3d
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b002      	add	sp, #8
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	223d      	movs	r2, #61	; 0x3d
 8002b24:	5c9b      	ldrb	r3, [r3, r2]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d001      	beq.n	8002b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e03c      	b.n	8002baa <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	223d      	movs	r2, #61	; 0x3d
 8002b34:	2102      	movs	r1, #2
 8002b36:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2101      	movs	r1, #1
 8002b44:	430a      	orrs	r2, r1
 8002b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d009      	beq.n	8002b66 <HAL_TIM_Base_Start_IT+0x4e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d004      	beq.n	8002b66 <HAL_TIM_Base_Start_IT+0x4e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <HAL_TIM_Base_Start_IT+0xa4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d116      	bne.n	8002b94 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <HAL_TIM_Base_Start_IT+0xa8>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b06      	cmp	r3, #6
 8002b76:	d016      	beq.n	8002ba6 <HAL_TIM_Base_Start_IT+0x8e>
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	025b      	lsls	r3, r3, #9
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d011      	beq.n	8002ba6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b92:	e008      	b.n	8002ba6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	e000      	b.n	8002ba8 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	0018      	movs	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b004      	add	sp, #16
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40014000 	.word	0x40014000
 8002bc0:	00010007 	.word	0x00010007

08002bc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e04a      	b.n	8002c6c <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	223d      	movs	r2, #61	; 0x3d
 8002bda:	5c9b      	ldrb	r3, [r3, r2]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d107      	bne.n	8002bf2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	223c      	movs	r2, #60	; 0x3c
 8002be6:	2100      	movs	r1, #0
 8002be8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7fe f86d 	bl	8000ccc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	223d      	movs	r2, #61	; 0x3d
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	0019      	movs	r1, r3
 8002c04:	0010      	movs	r0, r2
 8002c06:	f000 fa2b 	bl	8003060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2248      	movs	r2, #72	; 0x48
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	223e      	movs	r2, #62	; 0x3e
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	223f      	movs	r2, #63	; 0x3f
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2240      	movs	r2, #64	; 0x40
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2241      	movs	r2, #65	; 0x41
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2242      	movs	r2, #66	; 0x42
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2243      	movs	r2, #67	; 0x43
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2244      	movs	r2, #68	; 0x44
 8002c46:	2101      	movs	r1, #1
 8002c48:	5499      	strb	r1, [r3, r2]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2245      	movs	r2, #69	; 0x45
 8002c4e:	2101      	movs	r1, #1
 8002c50:	5499      	strb	r1, [r3, r2]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2246      	movs	r2, #70	; 0x46
 8002c56:	2101      	movs	r1, #1
 8002c58:	5499      	strb	r1, [r3, r2]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2247      	movs	r2, #71	; 0x47
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	223d      	movs	r2, #61	; 0x3d
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b002      	add	sp, #8
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2202      	movs	r2, #2
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d124      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2202      	movs	r2, #2
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d11d      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	4252      	negs	r2, r2
 8002ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2203      	movs	r2, #3
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 f9ba 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e007      	b.n	8002cce <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 f9ad 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 f9b9 	bl	8003040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d125      	bne.n	8002d2e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2204      	movs	r2, #4
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d11e      	bne.n	8002d2e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2205      	movs	r2, #5
 8002cf6:	4252      	negs	r2, r2
 8002cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	23c0      	movs	r3, #192	; 0xc0
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 f98d 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002d16:	e007      	b.n	8002d28 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 f980 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f000 f98c 	bl	8003040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2208      	movs	r2, #8
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d124      	bne.n	8002d86 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2208      	movs	r2, #8
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d11d      	bne.n	8002d86 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2209      	movs	r2, #9
 8002d50:	4252      	negs	r2, r2
 8002d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2204      	movs	r2, #4
 8002d58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2203      	movs	r2, #3
 8002d62:	4013      	ands	r3, r2
 8002d64:	d004      	beq.n	8002d70 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 f961 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002d6e:	e007      	b.n	8002d80 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 f954 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f960 	bl	8003040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d125      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d11e      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2211      	movs	r2, #17
 8002da8:	4252      	negs	r2, r2
 8002daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2208      	movs	r2, #8
 8002db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	23c0      	movs	r3, #192	; 0xc0
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 f934 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e007      	b.n	8002dda <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 f927 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 f933 	bl	8003040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2201      	movs	r2, #1
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d10f      	bne.n	8002e0e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d108      	bne.n	8002e0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2202      	movs	r2, #2
 8002e02:	4252      	negs	r2, r2
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f7fd fe87 	bl	8000b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2280      	movs	r2, #128	; 0x80
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b80      	cmp	r3, #128	; 0x80
 8002e1a:	d10f      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b80      	cmp	r3, #128	; 0x80
 8002e28:	d108      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2281      	movs	r2, #129	; 0x81
 8002e30:	4252      	negs	r2, r2
 8002e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fb18 	bl	800346c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	401a      	ands	r2, r3
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d10e      	bne.n	8002e6e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b80      	cmp	r3, #128	; 0x80
 8002e5c:	d107      	bne.n	8002e6e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1c      	ldr	r2, [pc, #112]	; (8002ed4 <HAL_TIM_IRQHandler+0x260>)
 8002e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f000 fb07 	bl	800347c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2240      	movs	r2, #64	; 0x40
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	d10f      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2240      	movs	r2, #64	; 0x40
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d108      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2241      	movs	r2, #65	; 0x41
 8002e90:	4252      	negs	r2, r2
 8002e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 f8da 	bl	8003050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d10f      	bne.n	8002eca <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d108      	bne.n	8002eca <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2221      	movs	r2, #33	; 0x21
 8002ebe:	4252      	negs	r2, r2
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f000 fac9 	bl	800345c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	fffffeff 	.word	0xfffffeff

08002ed8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee4:	2317      	movs	r3, #23
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	223c      	movs	r2, #60	; 0x3c
 8002ef0:	5c9b      	ldrb	r3, [r3, r2]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_IC_ConfigChannel+0x22>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e08c      	b.n	8003014 <HAL_TIM_IC_ConfigChannel+0x13c>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	223c      	movs	r2, #60	; 0x3c
 8002efe:	2101      	movs	r1, #1
 8002f00:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d11b      	bne.n	8002f40 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f000 f918 	bl	800314c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	210c      	movs	r1, #12
 8002f28:	438a      	bics	r2, r1
 8002f2a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6999      	ldr	r1, [r3, #24]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	619a      	str	r2, [r3, #24]
 8002f3e:	e062      	b.n	8003006 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d11c      	bne.n	8002f80 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f000 f951 	bl	80031fc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	492d      	ldr	r1, [pc, #180]	; (800301c <HAL_TIM_IC_ConfigChannel+0x144>)
 8002f66:	400a      	ands	r2, r1
 8002f68:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6999      	ldr	r1, [r3, #24]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	021a      	lsls	r2, r3, #8
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	619a      	str	r2, [r3, #24]
 8002f7e:	e042      	b.n	8003006 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d11b      	bne.n	8002fbe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f000 f973 	bl	8003280 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	210c      	movs	r1, #12
 8002fa6:	438a      	bics	r2, r1
 8002fa8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69d9      	ldr	r1, [r3, #28]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	61da      	str	r2, [r3, #28]
 8002fbc:	e023      	b.n	8003006 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d11c      	bne.n	8002ffe <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f000 f994 	bl	8003300 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	490e      	ldr	r1, [pc, #56]	; (800301c <HAL_TIM_IC_ConfigChannel+0x144>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69d9      	ldr	r1, [r3, #28]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	021a      	lsls	r2, r3, #8
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	61da      	str	r2, [r3, #28]
 8002ffc:	e003      	b.n	8003006 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002ffe:	2317      	movs	r3, #23
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	223c      	movs	r2, #60	; 0x3c
 800300a:	2100      	movs	r1, #0
 800300c:	5499      	strb	r1, [r3, r2]

  return status;
 800300e:	2317      	movs	r3, #23
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	781b      	ldrb	r3, [r3, #0]
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b006      	add	sp, #24
 800301a:	bd80      	pop	{r7, pc}
 800301c:	fffff3ff 	.word	0xfffff3ff

08003020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b002      	add	sp, #8
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	b002      	add	sp, #8
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b002      	add	sp, #8
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}

08003060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <TIM_Base_SetConfig+0xd0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_Base_SetConfig+0x20>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a2e      	ldr	r2, [pc, #184]	; (8003134 <TIM_Base_SetConfig+0xd4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d108      	bne.n	8003092 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2270      	movs	r2, #112	; 0x70
 8003084:	4393      	bics	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a26      	ldr	r2, [pc, #152]	; (8003130 <TIM_Base_SetConfig+0xd0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <TIM_Base_SetConfig+0x62>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a25      	ldr	r2, [pc, #148]	; (8003134 <TIM_Base_SetConfig+0xd4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00f      	beq.n	80030c2 <TIM_Base_SetConfig+0x62>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a24      	ldr	r2, [pc, #144]	; (8003138 <TIM_Base_SetConfig+0xd8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <TIM_Base_SetConfig+0x62>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a23      	ldr	r2, [pc, #140]	; (800313c <TIM_Base_SetConfig+0xdc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d007      	beq.n	80030c2 <TIM_Base_SetConfig+0x62>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a22      	ldr	r2, [pc, #136]	; (8003140 <TIM_Base_SetConfig+0xe0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_Base_SetConfig+0x62>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a21      	ldr	r2, [pc, #132]	; (8003144 <TIM_Base_SetConfig+0xe4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d108      	bne.n	80030d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a20      	ldr	r2, [pc, #128]	; (8003148 <TIM_Base_SetConfig+0xe8>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	4393      	bics	r3, r2
 80030da:	001a      	movs	r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a0c      	ldr	r2, [pc, #48]	; (8003130 <TIM_Base_SetConfig+0xd0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00b      	beq.n	800311a <TIM_Base_SetConfig+0xba>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a0d      	ldr	r2, [pc, #52]	; (800313c <TIM_Base_SetConfig+0xdc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <TIM_Base_SetConfig+0xba>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a0c      	ldr	r2, [pc, #48]	; (8003140 <TIM_Base_SetConfig+0xe0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <TIM_Base_SetConfig+0xba>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <TIM_Base_SetConfig+0xe4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d103      	bne.n	8003122 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	615a      	str	r2, [r3, #20]
}
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	b004      	add	sp, #16
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40000400 	.word	0x40000400
 8003138:	40002000 	.word	0x40002000
 800313c:	40014000 	.word	0x40014000
 8003140:	40014400 	.word	0x40014400
 8003144:	40014800 	.word	0x40014800
 8003148:	fffffcff 	.word	0xfffffcff

0800314c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	2201      	movs	r2, #1
 8003160:	4393      	bics	r3, r2
 8003162:	001a      	movs	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <TIM_TI1_SetConfig+0xa4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d007      	beq.n	800318c <TIM_TI1_SetConfig+0x40>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <TIM_TI1_SetConfig+0xa8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <TIM_TI1_SetConfig+0x40>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <TIM_TI1_SetConfig+0xac>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d101      	bne.n	8003190 <TIM_TI1_SetConfig+0x44>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <TIM_TI1_SetConfig+0x46>
 8003190:	2300      	movs	r3, #0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2203      	movs	r2, #3
 800319a:	4393      	bics	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e003      	b.n	80031b0 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2201      	movs	r2, #1
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	22f0      	movs	r2, #240	; 0xf0
 80031b4:	4393      	bics	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	22ff      	movs	r2, #255	; 0xff
 80031be:	4013      	ands	r3, r2
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	220a      	movs	r2, #10
 80031ca:	4393      	bics	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	220a      	movs	r2, #10
 80031d2:	4013      	ands	r3, r2
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	621a      	str	r2, [r3, #32]
}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b006      	add	sp, #24
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40014000 	.word	0x40014000

080031fc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	2210      	movs	r2, #16
 8003210:	4393      	bics	r3, r2
 8003212:	001a      	movs	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	4a14      	ldr	r2, [pc, #80]	; (8003278 <TIM_TI2_SetConfig+0x7c>)
 8003228:	4013      	ands	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	4a10      	ldr	r2, [pc, #64]	; (800327c <TIM_TI2_SetConfig+0x80>)
 800323a:	4013      	ands	r3, r2
 800323c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	031b      	lsls	r3, r3, #12
 8003242:	041b      	lsls	r3, r3, #16
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	22a0      	movs	r2, #160	; 0xa0
 8003250:	4393      	bics	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	22a0      	movs	r2, #160	; 0xa0
 800325a:	4013      	ands	r3, r2
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	b006      	add	sp, #24
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	fffffcff 	.word	0xfffffcff
 800327c:	ffff0fff 	.word	0xffff0fff

08003280 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <TIM_TI3_SetConfig+0x78>)
 8003294:	401a      	ands	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2203      	movs	r2, #3
 80032aa:	4393      	bics	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	22f0      	movs	r2, #240	; 0xf0
 80032ba:	4393      	bics	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	22ff      	movs	r2, #255	; 0xff
 80032c4:	4013      	ands	r3, r2
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <TIM_TI3_SetConfig+0x7c>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	021a      	lsls	r2, r3, #8
 80032d8:	23a0      	movs	r3, #160	; 0xa0
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	4013      	ands	r3, r2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	621a      	str	r2, [r3, #32]
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b006      	add	sp, #24
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	fffffeff 	.word	0xfffffeff
 80032fc:	fffff5ff 	.word	0xfffff5ff

08003300 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a1a      	ldr	r2, [pc, #104]	; (800337c <TIM_TI4_SetConfig+0x7c>)
 8003314:	401a      	ands	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	4a15      	ldr	r2, [pc, #84]	; (8003380 <TIM_TI4_SetConfig+0x80>)
 800332a:	4013      	ands	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <TIM_TI4_SetConfig+0x84>)
 800333c:	4013      	ands	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	031b      	lsls	r3, r3, #12
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <TIM_TI4_SetConfig+0x88>)
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	031a      	lsls	r2, r3, #12
 800335a:	23a0      	movs	r3, #160	; 0xa0
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	4013      	ands	r3, r2
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	621a      	str	r2, [r3, #32]
}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	b006      	add	sp, #24
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	ffffefff 	.word	0xffffefff
 8003380:	fffffcff 	.word	0xfffffcff
 8003384:	ffff0fff 	.word	0xffff0fff
 8003388:	ffff5fff 	.word	0xffff5fff

0800338c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	223c      	movs	r2, #60	; 0x3c
 800339a:	5c9b      	ldrb	r3, [r3, r2]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e04f      	b.n	8003444 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	223c      	movs	r2, #60	; 0x3c
 80033a8:	2101      	movs	r1, #1
 80033aa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	223d      	movs	r2, #61	; 0x3d
 80033b0:	2102      	movs	r1, #2
 80033b2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a20      	ldr	r2, [pc, #128]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d108      	bne.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2270      	movs	r2, #112	; 0x70
 80033e4:	4393      	bics	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a13      	ldr	r2, [pc, #76]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d009      	beq.n	8003418 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a12      	ldr	r2, [pc, #72]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a11      	ldr	r2, [pc, #68]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d10c      	bne.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2280      	movs	r2, #128	; 0x80
 800341c:	4393      	bics	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	4313      	orrs	r3, r2
 8003428:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	223d      	movs	r2, #61	; 0x3d
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223c      	movs	r2, #60	; 0x3c
 800343e:	2100      	movs	r1, #0
 8003440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b004      	add	sp, #16
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40012c00 	.word	0x40012c00
 8003450:	ff0fffff 	.word	0xff0fffff
 8003454:	40000400 	.word	0x40000400
 8003458:	40014000 	.word	0x40014000

0800345c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e046      	b.n	800352c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2288      	movs	r2, #136	; 0x88
 80034a2:	589b      	ldr	r3, [r3, r2]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2284      	movs	r2, #132	; 0x84
 80034ac:	2100      	movs	r1, #0
 80034ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	0018      	movs	r0, r3
 80034b4:	f7fd fc5e 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2288      	movs	r2, #136	; 0x88
 80034bc:	2124      	movs	r1, #36	; 0x24
 80034be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2101      	movs	r1, #1
 80034cc:	438a      	bics	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f830 	bl	8003538 <UART_SetConfig>
 80034d8:	0003      	movs	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e024      	b.n	800352c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f000 f9c7 	bl	8003880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	490d      	ldr	r1, [pc, #52]	; (8003534 <HAL_UART_Init+0xa8>)
 80034fe:	400a      	ands	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	212a      	movs	r1, #42	; 0x2a
 800350e:	438a      	bics	r2, r1
 8003510:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0018      	movs	r0, r3
 8003526:	f000 fa5f 	bl	80039e8 <UART_CheckIdleState>
 800352a:	0003      	movs	r3, r0
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b002      	add	sp, #8
 8003532:	bd80      	pop	{r7, pc}
 8003534:	ffffb7ff 	.word	0xffffb7ff

08003538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003540:	231a      	movs	r3, #26
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	4313      	orrs	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4abc      	ldr	r2, [pc, #752]	; (8003858 <UART_SetConfig+0x320>)
 8003568:	4013      	ands	r3, r2
 800356a:	0019      	movs	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	430a      	orrs	r2, r1
 8003574:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4ab7      	ldr	r2, [pc, #732]	; (800385c <UART_SetConfig+0x324>)
 800357e:	4013      	ands	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	4313      	orrs	r3, r2
 800359c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4aae      	ldr	r2, [pc, #696]	; (8003860 <UART_SetConfig+0x328>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	220f      	movs	r2, #15
 80035bc:	4393      	bics	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4aa4      	ldr	r2, [pc, #656]	; (8003864 <UART_SetConfig+0x32c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d127      	bne.n	8003626 <UART_SetConfig+0xee>
 80035d6:	4ba4      	ldr	r3, [pc, #656]	; (8003868 <UART_SetConfig+0x330>)
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	2203      	movs	r2, #3
 80035dc:	4013      	ands	r3, r2
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d017      	beq.n	8003612 <UART_SetConfig+0xda>
 80035e2:	d81b      	bhi.n	800361c <UART_SetConfig+0xe4>
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d00a      	beq.n	80035fe <UART_SetConfig+0xc6>
 80035e8:	d818      	bhi.n	800361c <UART_SetConfig+0xe4>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <UART_SetConfig+0xbc>
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d00a      	beq.n	8003608 <UART_SetConfig+0xd0>
 80035f2:	e013      	b.n	800361c <UART_SetConfig+0xe4>
 80035f4:	231b      	movs	r3, #27
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e058      	b.n	80036b0 <UART_SetConfig+0x178>
 80035fe:	231b      	movs	r3, #27
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	2202      	movs	r2, #2
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	e053      	b.n	80036b0 <UART_SetConfig+0x178>
 8003608:	231b      	movs	r3, #27
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	2204      	movs	r2, #4
 800360e:	701a      	strb	r2, [r3, #0]
 8003610:	e04e      	b.n	80036b0 <UART_SetConfig+0x178>
 8003612:	231b      	movs	r3, #27
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	2208      	movs	r2, #8
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e049      	b.n	80036b0 <UART_SetConfig+0x178>
 800361c:	231b      	movs	r3, #27
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	2210      	movs	r2, #16
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e044      	b.n	80036b0 <UART_SetConfig+0x178>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a90      	ldr	r2, [pc, #576]	; (800386c <UART_SetConfig+0x334>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d127      	bne.n	8003680 <UART_SetConfig+0x148>
 8003630:	4b8d      	ldr	r3, [pc, #564]	; (8003868 <UART_SetConfig+0x330>)
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	220c      	movs	r2, #12
 8003636:	4013      	ands	r3, r2
 8003638:	2b0c      	cmp	r3, #12
 800363a:	d017      	beq.n	800366c <UART_SetConfig+0x134>
 800363c:	d81b      	bhi.n	8003676 <UART_SetConfig+0x13e>
 800363e:	2b08      	cmp	r3, #8
 8003640:	d00a      	beq.n	8003658 <UART_SetConfig+0x120>
 8003642:	d818      	bhi.n	8003676 <UART_SetConfig+0x13e>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <UART_SetConfig+0x116>
 8003648:	2b04      	cmp	r3, #4
 800364a:	d00a      	beq.n	8003662 <UART_SetConfig+0x12a>
 800364c:	e013      	b.n	8003676 <UART_SetConfig+0x13e>
 800364e:	231b      	movs	r3, #27
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	2200      	movs	r2, #0
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	e02b      	b.n	80036b0 <UART_SetConfig+0x178>
 8003658:	231b      	movs	r3, #27
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2202      	movs	r2, #2
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	e026      	b.n	80036b0 <UART_SetConfig+0x178>
 8003662:	231b      	movs	r3, #27
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	2204      	movs	r2, #4
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e021      	b.n	80036b0 <UART_SetConfig+0x178>
 800366c:	231b      	movs	r3, #27
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	2208      	movs	r2, #8
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e01c      	b.n	80036b0 <UART_SetConfig+0x178>
 8003676:	231b      	movs	r3, #27
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2210      	movs	r2, #16
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	e017      	b.n	80036b0 <UART_SetConfig+0x178>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a7a      	ldr	r2, [pc, #488]	; (8003870 <UART_SetConfig+0x338>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d104      	bne.n	8003694 <UART_SetConfig+0x15c>
 800368a:	231b      	movs	r3, #27
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e00d      	b.n	80036b0 <UART_SetConfig+0x178>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a76      	ldr	r2, [pc, #472]	; (8003874 <UART_SetConfig+0x33c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d104      	bne.n	80036a8 <UART_SetConfig+0x170>
 800369e:	231b      	movs	r3, #27
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e003      	b.n	80036b0 <UART_SetConfig+0x178>
 80036a8:	231b      	movs	r3, #27
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2210      	movs	r2, #16
 80036ae:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d000      	beq.n	80036be <UART_SetConfig+0x186>
 80036bc:	e065      	b.n	800378a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80036be:	231b      	movs	r3, #27
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d015      	beq.n	80036f4 <UART_SetConfig+0x1bc>
 80036c8:	dc18      	bgt.n	80036fc <UART_SetConfig+0x1c4>
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d00d      	beq.n	80036ea <UART_SetConfig+0x1b2>
 80036ce:	dc15      	bgt.n	80036fc <UART_SetConfig+0x1c4>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <UART_SetConfig+0x1a2>
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d005      	beq.n	80036e4 <UART_SetConfig+0x1ac>
 80036d8:	e010      	b.n	80036fc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036da:	f7ff f849 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 80036de:	0003      	movs	r3, r0
 80036e0:	617b      	str	r3, [r7, #20]
        break;
 80036e2:	e012      	b.n	800370a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e4:	4b64      	ldr	r3, [pc, #400]	; (8003878 <UART_SetConfig+0x340>)
 80036e6:	617b      	str	r3, [r7, #20]
        break;
 80036e8:	e00f      	b.n	800370a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ea:	f7fe ffb5 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 80036ee:	0003      	movs	r3, r0
 80036f0:	617b      	str	r3, [r7, #20]
        break;
 80036f2:	e00a      	b.n	800370a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	617b      	str	r3, [r7, #20]
        break;
 80036fa:	e006      	b.n	800370a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003700:	231a      	movs	r3, #26
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
        break;
 8003708:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d100      	bne.n	8003712 <UART_SetConfig+0x1da>
 8003710:	e08d      	b.n	800382e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003716:	4b59      	ldr	r3, [pc, #356]	; (800387c <UART_SetConfig+0x344>)
 8003718:	0052      	lsls	r2, r2, #1
 800371a:	5ad3      	ldrh	r3, [r2, r3]
 800371c:	0019      	movs	r1, r3
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7fc fcf2 	bl	8000108 <__udivsi3>
 8003724:	0003      	movs	r3, r0
 8003726:	005a      	lsls	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	18d2      	adds	r2, r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	0019      	movs	r1, r3
 8003736:	0010      	movs	r0, r2
 8003738:	f7fc fce6 	bl	8000108 <__udivsi3>
 800373c:	0003      	movs	r3, r0
 800373e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0f      	cmp	r3, #15
 8003744:	d91c      	bls.n	8003780 <UART_SetConfig+0x248>
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	025b      	lsls	r3, r3, #9
 800374c:	429a      	cmp	r2, r3
 800374e:	d217      	bcs.n	8003780 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	b29a      	uxth	r2, r3
 8003754:	200e      	movs	r0, #14
 8003756:	183b      	adds	r3, r7, r0
 8003758:	210f      	movs	r1, #15
 800375a:	438a      	bics	r2, r1
 800375c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	b29b      	uxth	r3, r3
 8003764:	2207      	movs	r2, #7
 8003766:	4013      	ands	r3, r2
 8003768:	b299      	uxth	r1, r3
 800376a:	183b      	adds	r3, r7, r0
 800376c:	183a      	adds	r2, r7, r0
 800376e:	8812      	ldrh	r2, [r2, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	183a      	adds	r2, r7, r0
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	e056      	b.n	800382e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003780:	231a      	movs	r3, #26
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	e051      	b.n	800382e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800378a:	231b      	movs	r3, #27
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d015      	beq.n	80037c0 <UART_SetConfig+0x288>
 8003794:	dc18      	bgt.n	80037c8 <UART_SetConfig+0x290>
 8003796:	2b04      	cmp	r3, #4
 8003798:	d00d      	beq.n	80037b6 <UART_SetConfig+0x27e>
 800379a:	dc15      	bgt.n	80037c8 <UART_SetConfig+0x290>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <UART_SetConfig+0x26e>
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d005      	beq.n	80037b0 <UART_SetConfig+0x278>
 80037a4:	e010      	b.n	80037c8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a6:	f7fe ffe3 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 80037aa:	0003      	movs	r3, r0
 80037ac:	617b      	str	r3, [r7, #20]
        break;
 80037ae:	e012      	b.n	80037d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b0:	4b31      	ldr	r3, [pc, #196]	; (8003878 <UART_SetConfig+0x340>)
 80037b2:	617b      	str	r3, [r7, #20]
        break;
 80037b4:	e00f      	b.n	80037d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b6:	f7fe ff4f 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 80037ba:	0003      	movs	r3, r0
 80037bc:	617b      	str	r3, [r7, #20]
        break;
 80037be:	e00a      	b.n	80037d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	617b      	str	r3, [r7, #20]
        break;
 80037c6:	e006      	b.n	80037d6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037cc:	231a      	movs	r3, #26
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
        break;
 80037d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d028      	beq.n	800382e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e0:	4b26      	ldr	r3, [pc, #152]	; (800387c <UART_SetConfig+0x344>)
 80037e2:	0052      	lsls	r2, r2, #1
 80037e4:	5ad3      	ldrh	r3, [r2, r3]
 80037e6:	0019      	movs	r1, r3
 80037e8:	6978      	ldr	r0, [r7, #20]
 80037ea:	f7fc fc8d 	bl	8000108 <__udivsi3>
 80037ee:	0003      	movs	r3, r0
 80037f0:	001a      	movs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	18d2      	adds	r2, r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0019      	movs	r1, r3
 8003800:	0010      	movs	r0, r2
 8003802:	f7fc fc81 	bl	8000108 <__udivsi3>
 8003806:	0003      	movs	r3, r0
 8003808:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b0f      	cmp	r3, #15
 800380e:	d90a      	bls.n	8003826 <UART_SetConfig+0x2ee>
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	025b      	lsls	r3, r3, #9
 8003816:	429a      	cmp	r2, r3
 8003818:	d205      	bcs.n	8003826 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60da      	str	r2, [r3, #12]
 8003824:	e003      	b.n	800382e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003826:	231a      	movs	r3, #26
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	226a      	movs	r2, #106	; 0x6a
 8003832:	2101      	movs	r1, #1
 8003834:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2268      	movs	r2, #104	; 0x68
 800383a:	2101      	movs	r1, #1
 800383c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800384a:	231a      	movs	r3, #26
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	781b      	ldrb	r3, [r3, #0]
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b008      	add	sp, #32
 8003856:	bd80      	pop	{r7, pc}
 8003858:	cfff69f3 	.word	0xcfff69f3
 800385c:	ffffcfff 	.word	0xffffcfff
 8003860:	11fff4ff 	.word	0x11fff4ff
 8003864:	40013800 	.word	0x40013800
 8003868:	40021000 	.word	0x40021000
 800386c:	40004400 	.word	0x40004400
 8003870:	40004800 	.word	0x40004800
 8003874:	40004c00 	.word	0x40004c00
 8003878:	00f42400 	.word	0x00f42400
 800387c:	080069b8 	.word	0x080069b8

08003880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	2201      	movs	r2, #1
 800388e:	4013      	ands	r3, r2
 8003890:	d00b      	beq.n	80038aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a4a      	ldr	r2, [pc, #296]	; (80039c4 <UART_AdvFeatureConfig+0x144>)
 800389a:	4013      	ands	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	2202      	movs	r2, #2
 80038b0:	4013      	ands	r3, r2
 80038b2:	d00b      	beq.n	80038cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4a43      	ldr	r2, [pc, #268]	; (80039c8 <UART_AdvFeatureConfig+0x148>)
 80038bc:	4013      	ands	r3, r2
 80038be:	0019      	movs	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	2204      	movs	r2, #4
 80038d2:	4013      	ands	r3, r2
 80038d4:	d00b      	beq.n	80038ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a3b      	ldr	r2, [pc, #236]	; (80039cc <UART_AdvFeatureConfig+0x14c>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	2208      	movs	r2, #8
 80038f4:	4013      	ands	r3, r2
 80038f6:	d00b      	beq.n	8003910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a34      	ldr	r2, [pc, #208]	; (80039d0 <UART_AdvFeatureConfig+0x150>)
 8003900:	4013      	ands	r3, r2
 8003902:	0019      	movs	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	2210      	movs	r2, #16
 8003916:	4013      	ands	r3, r2
 8003918:	d00b      	beq.n	8003932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a2c      	ldr	r2, [pc, #176]	; (80039d4 <UART_AdvFeatureConfig+0x154>)
 8003922:	4013      	ands	r3, r2
 8003924:	0019      	movs	r1, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	2220      	movs	r2, #32
 8003938:	4013      	ands	r3, r2
 800393a:	d00b      	beq.n	8003954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <UART_AdvFeatureConfig+0x158>)
 8003944:	4013      	ands	r3, r2
 8003946:	0019      	movs	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	2240      	movs	r2, #64	; 0x40
 800395a:	4013      	ands	r3, r2
 800395c:	d01d      	beq.n	800399a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <UART_AdvFeatureConfig+0x15c>)
 8003966:	4013      	ands	r3, r2
 8003968:	0019      	movs	r1, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	035b      	lsls	r3, r3, #13
 800397e:	429a      	cmp	r2, r3
 8003980:	d10b      	bne.n	800399a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <UART_AdvFeatureConfig+0x160>)
 800398a:	4013      	ands	r3, r2
 800398c:	0019      	movs	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	4013      	ands	r3, r2
 80039a2:	d00b      	beq.n	80039bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <UART_AdvFeatureConfig+0x164>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
  }
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b002      	add	sp, #8
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	fffdffff 	.word	0xfffdffff
 80039c8:	fffeffff 	.word	0xfffeffff
 80039cc:	fffbffff 	.word	0xfffbffff
 80039d0:	ffff7fff 	.word	0xffff7fff
 80039d4:	ffffefff 	.word	0xffffefff
 80039d8:	ffffdfff 	.word	0xffffdfff
 80039dc:	ffefffff 	.word	0xffefffff
 80039e0:	ff9fffff 	.word	0xff9fffff
 80039e4:	fff7ffff 	.word	0xfff7ffff

080039e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2290      	movs	r2, #144	; 0x90
 80039f4:	2100      	movs	r1, #0
 80039f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039f8:	f7fd fb20 	bl	800103c <HAL_GetTick>
 80039fc:	0003      	movs	r3, r0
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2208      	movs	r2, #8
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d10c      	bne.n	8003a28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	0391      	lsls	r1, r2, #14
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <UART_CheckIdleState+0x98>)
 8003a18:	9200      	str	r2, [sp, #0]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f000 f832 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 8003a20:	1e03      	subs	r3, r0, #0
 8003a22:	d001      	beq.n	8003a28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e026      	b.n	8003a76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d10c      	bne.n	8003a50 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	03d1      	lsls	r1, r2, #15
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4a10      	ldr	r2, [pc, #64]	; (8003a80 <UART_CheckIdleState+0x98>)
 8003a40:	9200      	str	r2, [sp, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f000 f81e 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 8003a48:	1e03      	subs	r3, r0, #0
 8003a4a:	d001      	beq.n	8003a50 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e012      	b.n	8003a76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2288      	movs	r2, #136	; 0x88
 8003a54:	2120      	movs	r1, #32
 8003a56:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	228c      	movs	r2, #140	; 0x8c
 8003a5c:	2120      	movs	r1, #32
 8003a5e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2284      	movs	r2, #132	; 0x84
 8003a70:	2100      	movs	r1, #0
 8003a72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	0018      	movs	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	01ffffff 	.word	0x01ffffff

08003a84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b094      	sub	sp, #80	; 0x50
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	1dfb      	adds	r3, r7, #7
 8003a92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a94:	e0a7      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a98:	3301      	adds	r3, #1
 8003a9a:	d100      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a9c:	e0a3      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fd facd 	bl	800103c <HAL_GetTick>
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d13f      	bne.n	8003b34 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003abc:	647b      	str	r3, [r7, #68]	; 0x44
 8003abe:	2301      	movs	r3, #1
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	f383 8810 	msr	PRIMASK, r3
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	494e      	ldr	r1, [pc, #312]	; (8003c10 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003adc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	f383 8810 	msr	PRIMASK, r3
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aee:	643b      	str	r3, [r7, #64]	; 0x40
 8003af0:	2301      	movs	r3, #1
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	f383 8810 	msr	PRIMASK, r3
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2101      	movs	r1, #1
 8003b08:	438a      	bics	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2288      	movs	r2, #136	; 0x88
 8003b1c:	2120      	movs	r1, #32
 8003b1e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	228c      	movs	r2, #140	; 0x8c
 8003b24:	2120      	movs	r1, #32
 8003b26:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2284      	movs	r2, #132	; 0x84
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e069      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d052      	beq.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d148      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b62:	613b      	str	r3, [r7, #16]
  return(result);
 8003b64:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f383 8810 	msr	PRIMASK, r3
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4924      	ldr	r1, [pc, #144]	; (8003c10 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b80:	400a      	ands	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f383 8810 	msr	PRIMASK, r3
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b90:	f3ef 8310 	mrs	r3, PRIMASK
 8003b94:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b96:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	f383 8810 	msr	PRIMASK, r3
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	438a      	bics	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]
 8003bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	f383 8810 	msr	PRIMASK, r3
}
 8003bc0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2288      	movs	r2, #136	; 0x88
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	228c      	movs	r2, #140	; 0x8c
 8003bce:	2120      	movs	r1, #32
 8003bd0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2290      	movs	r2, #144	; 0x90
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2284      	movs	r2, #132	; 0x84
 8003bde:	2100      	movs	r1, #0
 8003be0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e010      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	425a      	negs	r2, r3
 8003bf6:	4153      	adcs	r3, r2
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	001a      	movs	r2, r3
 8003bfc:	1dfb      	adds	r3, r7, #7
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d100      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x182>
 8003c04:	e747      	b.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b014      	add	sp, #80	; 0x50
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	fffffe5f 	.word	0xfffffe5f

08003c14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2284      	movs	r2, #132	; 0x84
 8003c20:	5c9b      	ldrb	r3, [r3, r2]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_UARTEx_DisableFifoMode+0x16>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e027      	b.n	8003c7a <HAL_UARTEx_DisableFifoMode+0x66>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2284      	movs	r2, #132	; 0x84
 8003c2e:	2101      	movs	r1, #1
 8003c30:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2288      	movs	r2, #136	; 0x88
 8003c36:	2124      	movs	r1, #36	; 0x24
 8003c38:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	438a      	bics	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a0b      	ldr	r2, [pc, #44]	; (8003c84 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2288      	movs	r2, #136	; 0x88
 8003c6c:	2120      	movs	r1, #32
 8003c6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2284      	movs	r2, #132	; 0x84
 8003c74:	2100      	movs	r1, #0
 8003c76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	dfffffff 	.word	0xdfffffff

08003c88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2284      	movs	r2, #132	; 0x84
 8003c96:	5c9b      	ldrb	r3, [r3, r2]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e02e      	b.n	8003cfe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2284      	movs	r2, #132	; 0x84
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2288      	movs	r2, #136	; 0x88
 8003cac:	2124      	movs	r1, #36	; 0x24
 8003cae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	438a      	bics	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	08d9      	lsrs	r1, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 f854 	bl	8003d8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2288      	movs	r2, #136	; 0x88
 8003cf0:	2120      	movs	r1, #32
 8003cf2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2284      	movs	r2, #132	; 0x84
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	0018      	movs	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b004      	add	sp, #16
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2284      	movs	r2, #132	; 0x84
 8003d16:	5c9b      	ldrb	r3, [r3, r2]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e02f      	b.n	8003d80 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2284      	movs	r2, #132	; 0x84
 8003d24:	2101      	movs	r1, #1
 8003d26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2288      	movs	r2, #136	; 0x88
 8003d2c:	2124      	movs	r1, #36	; 0x24
 8003d2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2101      	movs	r1, #1
 8003d44:	438a      	bics	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	0019      	movs	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 f813 	bl	8003d8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2288      	movs	r2, #136	; 0x88
 8003d72:	2120      	movs	r1, #32
 8003d74:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2284      	movs	r2, #132	; 0x84
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	0018      	movs	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b004      	add	sp, #16
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	f1ffffff 	.word	0xf1ffffff

08003d8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d108      	bne.n	8003dae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	226a      	movs	r2, #106	; 0x6a
 8003da0:	2101      	movs	r1, #1
 8003da2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2268      	movs	r2, #104	; 0x68
 8003da8:	2101      	movs	r1, #1
 8003daa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003dac:	e043      	b.n	8003e36 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dae:	260f      	movs	r6, #15
 8003db0:	19bb      	adds	r3, r7, r6
 8003db2:	2208      	movs	r2, #8
 8003db4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003db6:	200e      	movs	r0, #14
 8003db8:	183b      	adds	r3, r7, r0
 8003dba:	2208      	movs	r2, #8
 8003dbc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	0e5b      	lsrs	r3, r3, #25
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	240d      	movs	r4, #13
 8003dca:	193b      	adds	r3, r7, r4
 8003dcc:	2107      	movs	r1, #7
 8003dce:	400a      	ands	r2, r1
 8003dd0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	0f5b      	lsrs	r3, r3, #29
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	250c      	movs	r5, #12
 8003dde:	197b      	adds	r3, r7, r5
 8003de0:	2107      	movs	r1, #7
 8003de2:	400a      	ands	r2, r1
 8003de4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003de6:	183b      	adds	r3, r7, r0
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	197a      	adds	r2, r7, r5
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	4914      	ldr	r1, [pc, #80]	; (8003e40 <UARTEx_SetNbDataToProcess+0xb4>)
 8003df0:	5c8a      	ldrb	r2, [r1, r2]
 8003df2:	435a      	muls	r2, r3
 8003df4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003df6:	197b      	adds	r3, r7, r5
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	4a12      	ldr	r2, [pc, #72]	; (8003e44 <UARTEx_SetNbDataToProcess+0xb8>)
 8003dfc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dfe:	0019      	movs	r1, r3
 8003e00:	f7fc fa0c 	bl	800021c <__divsi3>
 8003e04:	0003      	movs	r3, r0
 8003e06:	b299      	uxth	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	226a      	movs	r2, #106	; 0x6a
 8003e0c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e0e:	19bb      	adds	r3, r7, r6
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	193a      	adds	r2, r7, r4
 8003e14:	7812      	ldrb	r2, [r2, #0]
 8003e16:	490a      	ldr	r1, [pc, #40]	; (8003e40 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e18:	5c8a      	ldrb	r2, [r1, r2]
 8003e1a:	435a      	muls	r2, r3
 8003e1c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e1e:	193b      	adds	r3, r7, r4
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e24:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e26:	0019      	movs	r1, r3
 8003e28:	f7fc f9f8 	bl	800021c <__divsi3>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	b299      	uxth	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2268      	movs	r2, #104	; 0x68
 8003e34:	5299      	strh	r1, [r3, r2]
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b005      	add	sp, #20
 8003e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	080069d0 	.word	0x080069d0
 8003e44:	080069d8 	.word	0x080069d8

08003e48 <LCD_Init>:
static void LCD_SendHalfByte(uint8_t data);
static void LCD_SendByte(uint8_t data, uint8_t mode);
static void LCD_SendString(const char* str);

void LCD_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  HAL_Delay(50);  // Wait for LCD power-up
 8003e4c:	2032      	movs	r0, #50	; 0x32
 8003e4e:	f7fd f8ff 	bl	8001050 <HAL_Delay>

  // Initialize LCD in 4-bit mode
  LCD_SendHalfByte(0x03);
 8003e52:	2003      	movs	r0, #3
 8003e54:	f000 f8b2 	bl	8003fbc <LCD_SendHalfByte>
  HAL_Delay(5);
 8003e58:	2005      	movs	r0, #5
 8003e5a:	f7fd f8f9 	bl	8001050 <HAL_Delay>
  LCD_SendHalfByte(0x03);
 8003e5e:	2003      	movs	r0, #3
 8003e60:	f000 f8ac 	bl	8003fbc <LCD_SendHalfByte>
  HAL_Delay(1);
 8003e64:	2001      	movs	r0, #1
 8003e66:	f7fd f8f3 	bl	8001050 <HAL_Delay>
  LCD_SendHalfByte(0x03);
 8003e6a:	2003      	movs	r0, #3
 8003e6c:	f000 f8a6 	bl	8003fbc <LCD_SendHalfByte>
  HAL_Delay(1);
 8003e70:	2001      	movs	r0, #1
 8003e72:	f7fd f8ed 	bl	8001050 <HAL_Delay>
  LCD_SendHalfByte(0x02);
 8003e76:	2002      	movs	r0, #2
 8003e78:	f000 f8a0 	bl	8003fbc <LCD_SendHalfByte>

  // Function Set
  LCD_SendCmd(LCD_CMD_FUNCTION_SET | lcd_display_function);
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <LCD_Init+0x74>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2220      	movs	r2, #32
 8003e82:	4313      	orrs	r3, r2
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	0018      	movs	r0, r3
 8003e88:	f000 f878 	bl	8003f7c <LCD_SendCmd>

  // Display On/Off Control
  LCD_SendCmd(LCD_CMD_DISPLAY_CONTROL | lcd_display_control);
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <LCD_Init+0x78>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2208      	movs	r2, #8
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	0018      	movs	r0, r3
 8003e98:	f000 f870 	bl	8003f7c <LCD_SendCmd>

  // Clear Display
  LCD_SendCmd(LCD_CMD_CLEAR_DISPLAY);
 8003e9c:	2001      	movs	r0, #1
 8003e9e:	f000 f86d 	bl	8003f7c <LCD_SendCmd>

  // Entry Mode Set
  LCD_SendCmd(LCD_CMD_ENTRY_MODE_SET | lcd_entry_mode);
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <LCD_Init+0x7c>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	0018      	movs	r0, r3
 8003eae:	f000 f865 	bl	8003f7c <LCD_SendCmd>

  // Set backlight on
  LCD_BacklightOn();
 8003eb2:	f000 f84d 	bl	8003f50 <LCD_BacklightOn>
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	2000000b 	.word	0x2000000b
 8003ec0:	20000009 	.word	0x20000009
 8003ec4:	2000000a 	.word	0x2000000a

08003ec8 <LCD_Clear>:

void LCD_Clear(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  LCD_SendCmd(LCD_CMD_CLEAR_DISPLAY);
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f000 f855 	bl	8003f7c <LCD_SendCmd>
  HAL_Delay(2);
 8003ed2:	2002      	movs	r0, #2
 8003ed4:	f7fd f8bc 	bl	8001050 <HAL_Delay>
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	1dfb      	adds	r3, r7, #7
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	1dbb      	adds	r3, r7, #6
 8003eee:	1c0a      	adds	r2, r1, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	4a0f      	ldr	r2, [pc, #60]	; (8003f34 <LCD_SetCursor+0x54>)
 8003ef8:	601a      	str	r2, [r3, #0]

  if (row >= 2) {
 8003efa:	1dbb      	adds	r3, r7, #6
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d902      	bls.n	8003f08 <LCD_SetCursor+0x28>
    row = 1;
 8003f02:	1dbb      	adds	r3, r7, #6
 8003f04:	2201      	movs	r2, #1
 8003f06:	701a      	strb	r2, [r3, #0]
  }

  LCD_SendCmd(LCD_CMD_SET_DDRAM_ADDR | (col + row_offsets[row]));
 8003f08:	1dbb      	adds	r3, r7, #6
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	220c      	movs	r2, #12
 8003f0e:	18ba      	adds	r2, r7, r2
 8003f10:	5cd2      	ldrb	r2, [r2, r3]
 8003f12:	1dfb      	adds	r3, r7, #7
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	18d3      	adds	r3, r2, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	b25b      	sxtb	r3, r3
 8003f1c:	2280      	movs	r2, #128	; 0x80
 8003f1e:	4252      	negs	r2, r2
 8003f20:	4313      	orrs	r3, r2
 8003f22:	b25b      	sxtb	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	0018      	movs	r0, r3
 8003f28:	f000 f828 	bl	8003f7c <LCD_SendCmd>
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b004      	add	sp, #16
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	54144000 	.word	0x54144000

08003f38 <LCD_Print>:

void LCD_Print(const char* str)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  LCD_SendString(str);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f8e8 	bl	8004118 <LCD_SendString>
}
 8003f48:	46c0      	nop			; (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <LCD_BacklightOn>:

void LCD_BacklightOn(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
  uint8_t data = 0x00;
 8003f56:	1dfb      	adds	r3, r7, #7
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
  data |= LCD_BACKLIGHT_ON;
 8003f5c:	1dfb      	adds	r3, r7, #7
 8003f5e:	1dfa      	adds	r2, r7, #7
 8003f60:	7812      	ldrb	r2, [r2, #0]
 8003f62:	2108      	movs	r1, #8
 8003f64:	430a      	orrs	r2, r1
 8003f66:	701a      	strb	r2, [r3, #0]
  LCD_SendByte(data, 0);
 8003f68:	1dfb      	adds	r3, r7, #7
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f000 f848 	bl	8004004 <LCD_SendByte>
}
 8003f74:	46c0      	nop			; (mov r8, r8)
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b002      	add	sp, #8
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <LCD_SendCmd>:
  data |= LCD_BACKLIGHT_OFF;
  LCD_SendByte(data, 0);
}

static void LCD_SendCmd(uint8_t cmd)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	0002      	movs	r2, r0
 8003f84:	1dfb      	adds	r3, r7, #7
 8003f86:	701a      	strb	r2, [r3, #0]
  LCD_SendByte(cmd, 0);
 8003f88:	1dfb      	adds	r3, r7, #7
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 f838 	bl	8004004 <LCD_SendByte>
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b002      	add	sp, #8
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <LCD_SendData>:

static void LCD_SendData(uint8_t data)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	1dfb      	adds	r3, r7, #7
 8003fa6:	701a      	strb	r2, [r3, #0]
  LCD_SendByte(data, 1);
 8003fa8:	1dfb      	adds	r3, r7, #7
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2101      	movs	r1, #1
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f000 f828 	bl	8004004 <LCD_SendByte>
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <LCD_SendHalfByte>:

static void LCD_SendHalfByte(uint8_t data)
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	0002      	movs	r2, r0
 8003fc4:	1dfb      	adds	r3, r7, #7
 8003fc6:	701a      	strb	r2, [r3, #0]
  uint8_t high_nibble = data & 0xF0;
 8003fc8:	200f      	movs	r0, #15
 8003fca:	183b      	adds	r3, r7, r0
 8003fcc:	1dfa      	adds	r2, r7, #7
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	210f      	movs	r1, #15
 8003fd2:	438a      	bics	r2, r1
 8003fd4:	701a      	strb	r2, [r3, #0]
  uint8_t low_nibble = (data << 4) & 0xF0;
 8003fd6:	1dfb      	adds	r3, r7, #7
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	011a      	lsls	r2, r3, #4
 8003fdc:	240e      	movs	r4, #14
 8003fde:	193b      	adds	r3, r7, r4
 8003fe0:	701a      	strb	r2, [r3, #0]

  LCD_SendByte(high_nibble, 1);
 8003fe2:	183b      	adds	r3, r7, r0
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f000 f80b 	bl	8004004 <LCD_SendByte>
  LCD_SendByte(low_nibble, 1);
 8003fee:	193b      	adds	r3, r7, r4
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 f805 	bl	8004004 <LCD_SendByte>
}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b005      	add	sp, #20
 8004000:	bd90      	pop	{r4, r7, pc}
	...

08004004 <LCD_SendByte>:

static void LCD_SendByte(uint8_t data, uint8_t mode)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b087      	sub	sp, #28
 8004008:	af02      	add	r7, sp, #8
 800400a:	0002      	movs	r2, r0
 800400c:	1dfb      	adds	r3, r7, #7
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	1dbb      	adds	r3, r7, #6
 8004012:	1c0a      	adds	r2, r1, #0
 8004014:	701a      	strb	r2, [r3, #0]
  uint8_t data_high = data & 0xF0;
 8004016:	200f      	movs	r0, #15
 8004018:	183b      	adds	r3, r7, r0
 800401a:	1dfa      	adds	r2, r7, #7
 800401c:	7812      	ldrb	r2, [r2, #0]
 800401e:	210f      	movs	r1, #15
 8004020:	438a      	bics	r2, r1
 8004022:	701a      	strb	r2, [r3, #0]
  //uint8_t data_low = (data << 4) & 0xF0;

  uint8_t lcd_data = 0x00;
 8004024:	210e      	movs	r1, #14
 8004026:	187b      	adds	r3, r7, r1
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
  lcd_data |= data_high;
 800402c:	187b      	adds	r3, r7, r1
 800402e:	781a      	ldrb	r2, [r3, #0]
 8004030:	183b      	adds	r3, r7, r0
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	4313      	orrs	r3, r2
 8004036:	b2da      	uxtb	r2, r3
 8004038:	187b      	adds	r3, r7, r1
 800403a:	701a      	strb	r2, [r3, #0]

  if (mode == 1) {
 800403c:	1dbb      	adds	r3, r7, #6
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d106      	bne.n	8004052 <LCD_SendByte+0x4e>
    lcd_data |= 0x01;  // RS = 1 for data
 8004044:	187b      	adds	r3, r7, r1
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	4313      	orrs	r3, r2
 800404c:	b2da      	uxtb	r2, r3
 800404e:	187b      	adds	r3, r7, r1
 8004050:	701a      	strb	r2, [r3, #0]
  }

  lcd_data |= LCD_BACKLIGHT_ON;
 8004052:	210e      	movs	r1, #14
 8004054:	187b      	adds	r3, r7, r1
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2208      	movs	r2, #8
 800405a:	4313      	orrs	r3, r2
 800405c:	b2da      	uxtb	r2, r3
 800405e:	187b      	adds	r3, r7, r1
 8004060:	701a      	strb	r2, [r3, #0]

  // Send the data via I2C
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, &lcd_data, 1, 100);
 8004062:	000c      	movs	r4, r1
 8004064:	187a      	adds	r2, r7, r1
 8004066:	482b      	ldr	r0, [pc, #172]	; (8004114 <LCD_SendByte+0x110>)
 8004068:	2364      	movs	r3, #100	; 0x64
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2301      	movs	r3, #1
 800406e:	213f      	movs	r1, #63	; 0x3f
 8004070:	f7fd fad8 	bl	8001624 <HAL_I2C_Master_Transmit>

  lcd_data &= ~0x04;  // E = 0
 8004074:	0021      	movs	r1, r4
 8004076:	187b      	adds	r3, r7, r1
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2204      	movs	r2, #4
 800407c:	4393      	bics	r3, r2
 800407e:	b2da      	uxtb	r2, r3
 8004080:	187b      	adds	r3, r7, r1
 8004082:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, &lcd_data, 1, 100);
 8004084:	000c      	movs	r4, r1
 8004086:	187a      	adds	r2, r7, r1
 8004088:	4822      	ldr	r0, [pc, #136]	; (8004114 <LCD_SendByte+0x110>)
 800408a:	2364      	movs	r3, #100	; 0x64
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2301      	movs	r3, #1
 8004090:	213f      	movs	r1, #63	; 0x3f
 8004092:	f7fd fac7 	bl	8001624 <HAL_I2C_Master_Transmit>

  lcd_data |= 0x04;   // E = 1
 8004096:	0021      	movs	r1, r4
 8004098:	187b      	adds	r3, r7, r1
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2204      	movs	r2, #4
 800409e:	4313      	orrs	r3, r2
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	187b      	adds	r3, r7, r1
 80040a4:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, &lcd_data, 1, 100);
 80040a6:	187a      	adds	r2, r7, r1
 80040a8:	481a      	ldr	r0, [pc, #104]	; (8004114 <LCD_SendByte+0x110>)
 80040aa:	2364      	movs	r3, #100	; 0x64
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2301      	movs	r3, #1
 80040b0:	213f      	movs	r1, #63	; 0x3f
 80040b2:	f7fd fab7 	bl	8001624 <HAL_I2C_Master_Transmit>

  if (mode == 0) {
 80040b6:	1dbb      	adds	r3, r7, #6
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <LCD_SendByte+0xc0>
    HAL_Delay(1);
 80040be:	2001      	movs	r0, #1
 80040c0:	f7fc ffc6 	bl	8001050 <HAL_Delay>
  }

  lcd_data &= ~0x04;  // E = 0
 80040c4:	210e      	movs	r1, #14
 80040c6:	187b      	adds	r3, r7, r1
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2204      	movs	r2, #4
 80040cc:	4393      	bics	r3, r2
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	187b      	adds	r3, r7, r1
 80040d2:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, &lcd_data, 1, 100);
 80040d4:	000c      	movs	r4, r1
 80040d6:	187a      	adds	r2, r7, r1
 80040d8:	480e      	ldr	r0, [pc, #56]	; (8004114 <LCD_SendByte+0x110>)
 80040da:	2364      	movs	r3, #100	; 0x64
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	2301      	movs	r3, #1
 80040e0:	213f      	movs	r1, #63	; 0x3f
 80040e2:	f7fd fa9f 	bl	8001624 <HAL_I2C_Master_Transmit>

  HAL_Delay(1);
 80040e6:	2001      	movs	r0, #1
 80040e8:	f7fc ffb2 	bl	8001050 <HAL_Delay>

  lcd_data |= 0x08;   // BL = 1
 80040ec:	0021      	movs	r1, r4
 80040ee:	187b      	adds	r3, r7, r1
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2208      	movs	r2, #8
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	187b      	adds	r3, r7, r1
 80040fa:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, &lcd_data, 1, 100);
 80040fc:	187a      	adds	r2, r7, r1
 80040fe:	4805      	ldr	r0, [pc, #20]	; (8004114 <LCD_SendByte+0x110>)
 8004100:	2364      	movs	r3, #100	; 0x64
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2301      	movs	r3, #1
 8004106:	213f      	movs	r1, #63	; 0x3f
 8004108:	f7fd fa8c 	bl	8001624 <HAL_I2C_Master_Transmit>
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b005      	add	sp, #20
 8004112:	bd90      	pop	{r4, r7, pc}
 8004114:	20000030 	.word	0x20000030

08004118 <LCD_SendString>:

static void LCD_SendString(const char* str)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  while (*str) {
 8004120:	e007      	b.n	8004132 <LCD_SendString+0x1a>
    LCD_SendData((uint8_t)(*str));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	0018      	movs	r0, r3
 8004128:	f7ff ff38 	bl	8003f9c <LCD_SendData>
    str++;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3301      	adds	r3, #1
 8004130:	607b      	str	r3, [r7, #4]
  while (*str) {
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f3      	bne.n	8004122 <LCD_SendString+0xa>
  }
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b002      	add	sp, #8
 8004142:	bd80      	pop	{r7, pc}

08004144 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3308      	adds	r3, #8
 8004150:	001a      	movs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	4252      	negs	r2, r2
 800415c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3308      	adds	r3, #8
 8004162:	001a      	movs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3308      	adds	r3, #8
 800416c:	001a      	movs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	b002      	add	sp, #8
 800417e:	bd80      	pop	{r7, pc}

08004180 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b002      	add	sp, #8
 8004194:	bd80      	pop	{r7, pc}

08004196 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	3301      	adds	r3, #1
 80041aa:	d103      	bne.n	80041b4 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	e00c      	b.n	80041ce <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3308      	adds	r3, #8
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e002      	b.n	80041c2 <vListInsert+0x2c>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d2f6      	bcs.n	80041bc <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]
}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b004      	add	sp, #16
 8004200:	bd80      	pop	{r7, pc}

08004202 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6892      	ldr	r2, [r2, #8]
 8004218:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6852      	ldr	r2, [r2, #4]
 8004222:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	429a      	cmp	r2, r3
 800422c:	d103      	bne.n	8004236 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	1e5a      	subs	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b004      	add	sp, #16
 8004250:	bd80      	pop	{r7, pc}

08004252 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004252:	b5b0      	push	{r4, r5, r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800425c:	2301      	movs	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <xQueueGenericReset+0x1c>
 800426a:	b672      	cpsid	i
 800426c:	e7fe      	b.n	800426c <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d100      	bne.n	8004276 <xQueueGenericReset+0x24>
 8004274:	e06a      	b.n	800434c <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800427a:	2b00      	cmp	r3, #0
 800427c:	d066      	beq.n	800434c <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	2400      	movs	r4, #0
 8004288:	0c15      	lsrs	r5, r2, #16
 800428a:	0c19      	lsrs	r1, r3, #16
 800428c:	b2a8      	uxth	r0, r5
 800428e:	2800      	cmp	r0, #0
 8004290:	d104      	bne.n	800429c <xQueueGenericReset+0x4a>
 8004292:	b288      	uxth	r0, r1
 8004294:	2800      	cmp	r0, #0
 8004296:	d013      	beq.n	80042c0 <xQueueGenericReset+0x6e>
 8004298:	1c10      	adds	r0, r2, #0
 800429a:	e004      	b.n	80042a6 <xQueueGenericReset+0x54>
 800429c:	b289      	uxth	r1, r1
 800429e:	2900      	cmp	r1, #0
 80042a0:	d10d      	bne.n	80042be <xQueueGenericReset+0x6c>
 80042a2:	1c29      	adds	r1, r5, #0
 80042a4:	1c18      	adds	r0, r3, #0
 80042a6:	b292      	uxth	r2, r2
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	435a      	muls	r2, r3
 80042ac:	b283      	uxth	r3, r0
 80042ae:	b289      	uxth	r1, r1
 80042b0:	434b      	muls	r3, r1
 80042b2:	0c12      	lsrs	r2, r2, #16
 80042b4:	189b      	adds	r3, r3, r2
 80042b6:	141b      	asrs	r3, r3, #16
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d000      	beq.n	80042c0 <xQueueGenericReset+0x6e>
 80042be:	2401      	movs	r4, #1
 80042c0:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80042c2:	d143      	bne.n	800434c <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 80042c4:	f002 f884 	bl	80063d0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	434b      	muls	r3, r1
 80042d6:	18d2      	adds	r2, r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	1e59      	subs	r1, r3, #1
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	434b      	muls	r3, r1
 80042fa:	18d2      	adds	r2, r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2244      	movs	r2, #68	; 0x44
 8004304:	21ff      	movs	r1, #255	; 0xff
 8004306:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2245      	movs	r2, #69	; 0x45
 800430c:	21ff      	movs	r1, #255	; 0xff
 800430e:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d013      	beq.n	8004346 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3310      	adds	r3, #16
 8004322:	0018      	movs	r0, r3
 8004324:	f001 f91a 	bl	800555c <xTaskRemoveFromEventList>
 8004328:	1e03      	subs	r3, r0, #0
 800432a:	d00c      	beq.n	8004346 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800432c:	f002 f840 	bl	80063b0 <vPortYield>
 8004330:	e009      	b.n	8004346 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	3310      	adds	r3, #16
 8004336:	0018      	movs	r0, r3
 8004338:	f7ff ff04 	bl	8004144 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	3324      	adds	r3, #36	; 0x24
 8004340:	0018      	movs	r0, r3
 8004342:	f7ff feff 	bl	8004144 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004346:	f002 f855 	bl	80063f4 <vPortExitCritical>
 800434a:	e001      	b.n	8004350 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <xQueueGenericReset+0x108>
 8004356:	b672      	cpsid	i
 8004358:	e7fe      	b.n	8004358 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800435a:	68fb      	ldr	r3, [r7, #12]
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	b004      	add	sp, #16
 8004362:	bdb0      	pop	{r4, r5, r7, pc}

08004364 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004366:	b08b      	sub	sp, #44	; 0x2c
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	1dfb      	adds	r3, r7, #7
 8004370:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d047      	beq.n	800440c <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800437c:	2000      	movs	r0, #0
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	0c19      	lsrs	r1, r3, #16
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	1c1e      	adds	r6, r3, #0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	1c15      	adds	r5, r2, #0
 800438e:	b28a      	uxth	r2, r1
 8004390:	2a00      	cmp	r2, #0
 8004392:	d105      	bne.n	80043a0 <xQueueGenericCreate+0x3c>
 8004394:	b29a      	uxth	r2, r3
 8004396:	2a00      	cmp	r2, #0
 8004398:	d013      	beq.n	80043c2 <xQueueGenericCreate+0x5e>
 800439a:	1c19      	adds	r1, r3, #0
 800439c:	1c34      	adds	r4, r6, #0
 800439e:	e003      	b.n	80043a8 <xQueueGenericCreate+0x44>
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10c      	bne.n	80043c0 <xQueueGenericCreate+0x5c>
 80043a6:	1c2c      	adds	r4, r5, #0
 80043a8:	b2b3      	uxth	r3, r6
 80043aa:	b2aa      	uxth	r2, r5
 80043ac:	435a      	muls	r2, r3
 80043ae:	b2a3      	uxth	r3, r4
 80043b0:	b289      	uxth	r1, r1
 80043b2:	434b      	muls	r3, r1
 80043b4:	0c12      	lsrs	r2, r2, #16
 80043b6:	189b      	adds	r3, r3, r2
 80043b8:	141b      	asrs	r3, r3, #16
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d000      	beq.n	80043c2 <xQueueGenericCreate+0x5e>
 80043c0:	2001      	movs	r0, #1
 80043c2:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80043c4:	d122      	bne.n	800440c <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80043cc:	3351      	adds	r3, #81	; 0x51
 80043ce:	d81d      	bhi.n	800440c <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4353      	muls	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	3350      	adds	r3, #80	; 0x50
 80043dc:	0018      	movs	r0, r3
 80043de:	f002 f88f 	bl	8006500 <pvPortMalloc>
 80043e2:	0003      	movs	r3, r0
 80043e4:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d014      	beq.n	8004416 <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3350      	adds	r3, #80	; 0x50
 80043f4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043f6:	1dfb      	adds	r3, r7, #7
 80043f8:	781c      	ldrb	r4, [r3, #0]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	0023      	movs	r3, r4
 8004406:	f000 f80b 	bl	8004420 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800440a:	e004      	b.n	8004416 <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <xQueueGenericCreate+0xb2>
 8004412:	b672      	cpsid	i
 8004414:	e7fe      	b.n	8004414 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004416:	69fb      	ldr	r3, [r7, #28]
    }
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b009      	add	sp, #36	; 0x24
 800441e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004420 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	001a      	movs	r2, r3
 800442e:	1cfb      	adds	r3, r7, #3
 8004430:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d103      	bne.n	8004440 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	e002      	b.n	8004446 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2101      	movs	r1, #1
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff fefb 	bl	8004252 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	1cfa      	adds	r2, r7, #3
 8004460:	214c      	movs	r1, #76	; 0x4c
 8004462:	7812      	ldrb	r2, [r2, #0]
 8004464:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	46bd      	mov	sp, r7
 800446a:	b004      	add	sp, #16
 800446c:	bd80      	pop	{r7, pc}

0800446e <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b08a      	sub	sp, #40	; 0x28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800447c:	2300      	movs	r3, #0
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <xQueueGenericSend+0x20>
 800448a:	b672      	cpsid	i
 800448c:	e7fe      	b.n	800448c <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <xQueueGenericSend+0x2e>
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <xQueueGenericSend+0x32>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <xQueueGenericSend+0x34>
 80044a0:	2300      	movs	r3, #0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <xQueueGenericSend+0x3c>
 80044a6:	b672      	cpsid	i
 80044a8:	e7fe      	b.n	80044a8 <xQueueGenericSend+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d103      	bne.n	80044b8 <xQueueGenericSend+0x4a>
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <xQueueGenericSend+0x4e>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <xQueueGenericSend+0x50>
 80044bc:	2300      	movs	r3, #0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <xQueueGenericSend+0x58>
 80044c2:	b672      	cpsid	i
 80044c4:	e7fe      	b.n	80044c4 <xQueueGenericSend+0x56>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044c6:	f001 fa33 	bl	8005930 <xTaskGetSchedulerState>
 80044ca:	1e03      	subs	r3, r0, #0
 80044cc:	d102      	bne.n	80044d4 <xQueueGenericSend+0x66>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <xQueueGenericSend+0x6a>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <xQueueGenericSend+0x6c>
 80044d8:	2300      	movs	r3, #0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <xQueueGenericSend+0x74>
 80044de:	b672      	cpsid	i
 80044e0:	e7fe      	b.n	80044e0 <xQueueGenericSend+0x72>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80044e2:	f001 ff75 	bl	80063d0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <xQueueGenericSend+0x8a>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d11e      	bne.n	8004536 <xQueueGenericSend+0xc8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	0018      	movs	r0, r3
 8004500:	f000 fa19 	bl	8004936 <prvCopyDataToQueue>
 8004504:	0003      	movs	r3, r0
 8004506:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <xQueueGenericSend+0xb6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	3324      	adds	r3, #36	; 0x24
 8004514:	0018      	movs	r0, r3
 8004516:	f001 f821 	bl	800555c <xTaskRemoveFromEventList>
 800451a:	1e03      	subs	r3, r0, #0
 800451c:	d007      	beq.n	800452e <xQueueGenericSend+0xc0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800451e:	f001 ff47 	bl	80063b0 <vPortYield>
 8004522:	e004      	b.n	800452e <xQueueGenericSend+0xc0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <xQueueGenericSend+0xc0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800452a:	f001 ff41 	bl	80063b0 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800452e:	f001 ff61 	bl	80063f4 <vPortExitCritical>
                return pdPASS;
 8004532:	2301      	movs	r3, #1
 8004534:	e05b      	b.n	80045ee <xQueueGenericSend+0x180>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d103      	bne.n	8004544 <xQueueGenericSend+0xd6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800453c:	f001 ff5a 	bl	80063f4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004540:	2300      	movs	r3, #0
 8004542:	e054      	b.n	80045ee <xQueueGenericSend+0x180>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <xQueueGenericSend+0xea>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800454a:	2314      	movs	r3, #20
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	0018      	movs	r0, r3
 8004550:	f001 f8ce 	bl	80056f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004558:	f001 ff4c 	bl	80063f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800455c:	f000 fd42 	bl	8004fe4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004560:	f001 ff36 	bl	80063d0 <vPortEnterCritical>
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	2244      	movs	r2, #68	; 0x44
 8004568:	5c9b      	ldrb	r3, [r3, r2]
 800456a:	b25b      	sxtb	r3, r3
 800456c:	3301      	adds	r3, #1
 800456e:	d103      	bne.n	8004578 <xQueueGenericSend+0x10a>
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	2244      	movs	r2, #68	; 0x44
 8004574:	2100      	movs	r1, #0
 8004576:	5499      	strb	r1, [r3, r2]
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	2245      	movs	r2, #69	; 0x45
 800457c:	5c9b      	ldrb	r3, [r3, r2]
 800457e:	b25b      	sxtb	r3, r3
 8004580:	3301      	adds	r3, #1
 8004582:	d103      	bne.n	800458c <xQueueGenericSend+0x11e>
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	2245      	movs	r2, #69	; 0x45
 8004588:	2100      	movs	r1, #0
 800458a:	5499      	strb	r1, [r3, r2]
 800458c:	f001 ff32 	bl	80063f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004590:	1d3a      	adds	r2, r7, #4
 8004592:	2314      	movs	r3, #20
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	0011      	movs	r1, r2
 8004598:	0018      	movs	r0, r3
 800459a:	f001 f8bd 	bl	8005718 <xTaskCheckForTimeOut>
 800459e:	1e03      	subs	r3, r0, #0
 80045a0:	d11e      	bne.n	80045e0 <xQueueGenericSend+0x172>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f000 facb 	bl	8004b40 <prvIsQueueFull>
 80045aa:	1e03      	subs	r3, r0, #0
 80045ac:	d011      	beq.n	80045d2 <xQueueGenericSend+0x164>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	3310      	adds	r3, #16
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	0011      	movs	r1, r2
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 ff74 	bl	80054a4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	0018      	movs	r0, r3
 80045c0:	f000 fa4a 	bl	8004a58 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80045c4:	f000 fd1a 	bl	8004ffc <xTaskResumeAll>
 80045c8:	1e03      	subs	r3, r0, #0
 80045ca:	d18a      	bne.n	80044e2 <xQueueGenericSend+0x74>
                {
                    portYIELD_WITHIN_API();
 80045cc:	f001 fef0 	bl	80063b0 <vPortYield>
 80045d0:	e787      	b.n	80044e2 <xQueueGenericSend+0x74>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f000 fa3f 	bl	8004a58 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80045da:	f000 fd0f 	bl	8004ffc <xTaskResumeAll>
 80045de:	e780      	b.n	80044e2 <xQueueGenericSend+0x74>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 fa38 	bl	8004a58 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80045e8:	f000 fd08 	bl	8004ffc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80045ec:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80045ee:	0018      	movs	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b00a      	add	sp, #40	; 0x28
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b08a      	sub	sp, #40	; 0x28
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004602:	2300      	movs	r3, #0
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <xQueueReceive+0x1e>
 8004610:	b672      	cpsid	i
 8004612:	e7fe      	b.n	8004612 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <xQueueReceive+0x2c>
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <xQueueReceive+0x30>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <xQueueReceive+0x32>
 8004626:	2300      	movs	r3, #0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <xQueueReceive+0x3a>
 800462c:	b672      	cpsid	i
 800462e:	e7fe      	b.n	800462e <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004630:	f001 f97e 	bl	8005930 <xTaskGetSchedulerState>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d102      	bne.n	800463e <xQueueReceive+0x48>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <xQueueReceive+0x4c>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <xQueueReceive+0x4e>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <xQueueReceive+0x56>
 8004648:	b672      	cpsid	i
 800464a:	e7fe      	b.n	800464a <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800464c:	f001 fec0 	bl	80063d0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01a      	beq.n	8004692 <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	0011      	movs	r1, r2
 8004662:	0018      	movs	r0, r3
 8004664:	f000 f9d2 	bl	8004a0c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	1e5a      	subs	r2, r3, #1
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	3310      	adds	r3, #16
 800467c:	0018      	movs	r0, r3
 800467e:	f000 ff6d 	bl	800555c <xTaskRemoveFromEventList>
 8004682:	1e03      	subs	r3, r0, #0
 8004684:	d001      	beq.n	800468a <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004686:	f001 fe93 	bl	80063b0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800468a:	f001 feb3 	bl	80063f4 <vPortExitCritical>
                return pdPASS;
 800468e:	2301      	movs	r3, #1
 8004690:	e062      	b.n	8004758 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004698:	f001 feac 	bl	80063f4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800469c:	2300      	movs	r3, #0
 800469e:	e05b      	b.n	8004758 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80046a6:	2314      	movs	r3, #20
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	0018      	movs	r0, r3
 80046ac:	f001 f820 	bl	80056f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80046b0:	2301      	movs	r3, #1
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80046b4:	f001 fe9e 	bl	80063f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80046b8:	f000 fc94 	bl	8004fe4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80046bc:	f001 fe88 	bl	80063d0 <vPortEnterCritical>
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	2244      	movs	r2, #68	; 0x44
 80046c4:	5c9b      	ldrb	r3, [r3, r2]
 80046c6:	b25b      	sxtb	r3, r3
 80046c8:	3301      	adds	r3, #1
 80046ca:	d103      	bne.n	80046d4 <xQueueReceive+0xde>
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2244      	movs	r2, #68	; 0x44
 80046d0:	2100      	movs	r1, #0
 80046d2:	5499      	strb	r1, [r3, r2]
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	2245      	movs	r2, #69	; 0x45
 80046d8:	5c9b      	ldrb	r3, [r3, r2]
 80046da:	b25b      	sxtb	r3, r3
 80046dc:	3301      	adds	r3, #1
 80046de:	d103      	bne.n	80046e8 <xQueueReceive+0xf2>
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	2245      	movs	r2, #69	; 0x45
 80046e4:	2100      	movs	r1, #0
 80046e6:	5499      	strb	r1, [r3, r2]
 80046e8:	f001 fe84 	bl	80063f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046ec:	1d3a      	adds	r2, r7, #4
 80046ee:	2314      	movs	r3, #20
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	0011      	movs	r1, r2
 80046f4:	0018      	movs	r0, r3
 80046f6:	f001 f80f 	bl	8005718 <xTaskCheckForTimeOut>
 80046fa:	1e03      	subs	r3, r0, #0
 80046fc:	d11e      	bne.n	800473c <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	0018      	movs	r0, r3
 8004702:	f000 fa07 	bl	8004b14 <prvIsQueueEmpty>
 8004706:	1e03      	subs	r3, r0, #0
 8004708:	d011      	beq.n	800472e <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	3324      	adds	r3, #36	; 0x24
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	0011      	movs	r1, r2
 8004712:	0018      	movs	r0, r3
 8004714:	f000 fec6 	bl	80054a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	0018      	movs	r0, r3
 800471c:	f000 f99c 	bl	8004a58 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004720:	f000 fc6c 	bl	8004ffc <xTaskResumeAll>
 8004724:	1e03      	subs	r3, r0, #0
 8004726:	d191      	bne.n	800464c <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 8004728:	f001 fe42 	bl	80063b0 <vPortYield>
 800472c:	e78e      	b.n	800464c <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	0018      	movs	r0, r3
 8004732:	f000 f991 	bl	8004a58 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004736:	f000 fc61 	bl	8004ffc <xTaskResumeAll>
 800473a:	e787      	b.n	800464c <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	0018      	movs	r0, r3
 8004740:	f000 f98a 	bl	8004a58 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004744:	f000 fc5a 	bl	8004ffc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	0018      	movs	r0, r3
 800474c:	f000 f9e2 	bl	8004b14 <prvIsQueueEmpty>
 8004750:	1e03      	subs	r3, r0, #0
 8004752:	d100      	bne.n	8004756 <xQueueReceive+0x160>
 8004754:	e77a      	b.n	800464c <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004756:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	b00a      	add	sp, #40	; 0x28
 800475e:	bd80      	pop	{r7, pc}

08004760 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8004772:	2300      	movs	r3, #0
 8004774:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <xQueueSemaphoreTake+0x20>
 800477c:	b672      	cpsid	i
 800477e:	e7fe      	b.n	800477e <xQueueSemaphoreTake+0x1e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <xQueueSemaphoreTake+0x2c>
 8004788:	b672      	cpsid	i
 800478a:	e7fe      	b.n	800478a <xQueueSemaphoreTake+0x2a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800478c:	f001 f8d0 	bl	8005930 <xTaskGetSchedulerState>
 8004790:	1e03      	subs	r3, r0, #0
 8004792:	d102      	bne.n	800479a <xQueueSemaphoreTake+0x3a>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <xQueueSemaphoreTake+0x3e>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <xQueueSemaphoreTake+0x40>
 800479e:	2300      	movs	r3, #0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <xQueueSemaphoreTake+0x48>
 80047a4:	b672      	cpsid	i
 80047a6:	e7fe      	b.n	80047a6 <xQueueSemaphoreTake+0x46>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80047a8:	f001 fe12 	bl	80063d0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01d      	beq.n	80047f4 <xQueueSemaphoreTake+0x94>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	1e5a      	subs	r2, r3, #1
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <xQueueSemaphoreTake+0x72>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80047c8:	f001 fa76 	bl	8005cb8 <pvTaskIncrementMutexHeldCount>
 80047cc:	0002      	movs	r2, r0
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <xQueueSemaphoreTake+0x8c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3310      	adds	r3, #16
 80047de:	0018      	movs	r0, r3
 80047e0:	f000 febc 	bl	800555c <xTaskRemoveFromEventList>
 80047e4:	1e03      	subs	r3, r0, #0
 80047e6:	d001      	beq.n	80047ec <xQueueSemaphoreTake+0x8c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80047e8:	f001 fde2 	bl	80063b0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80047ec:	f001 fe02 	bl	80063f4 <vPortExitCritical>
                return pdPASS;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e086      	b.n	8004902 <xQueueSemaphoreTake+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d103      	bne.n	8004802 <xQueueSemaphoreTake+0xa2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80047fa:	f001 fdfb 	bl	80063f4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80047fe:	2300      	movs	r3, #0
 8004800:	e07f      	b.n	8004902 <xQueueSemaphoreTake+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <xQueueSemaphoreTake+0xb6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004808:	230c      	movs	r3, #12
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	0018      	movs	r0, r3
 800480e:	f000 ff6f 	bl	80056f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004812:	2301      	movs	r3, #1
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004816:	f001 fded 	bl	80063f4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800481a:	f000 fbe3 	bl	8004fe4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800481e:	f001 fdd7 	bl	80063d0 <vPortEnterCritical>
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	2244      	movs	r2, #68	; 0x44
 8004826:	5c9b      	ldrb	r3, [r3, r2]
 8004828:	b25b      	sxtb	r3, r3
 800482a:	3301      	adds	r3, #1
 800482c:	d103      	bne.n	8004836 <xQueueSemaphoreTake+0xd6>
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	2244      	movs	r2, #68	; 0x44
 8004832:	2100      	movs	r1, #0
 8004834:	5499      	strb	r1, [r3, r2]
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	2245      	movs	r2, #69	; 0x45
 800483a:	5c9b      	ldrb	r3, [r3, r2]
 800483c:	b25b      	sxtb	r3, r3
 800483e:	3301      	adds	r3, #1
 8004840:	d103      	bne.n	800484a <xQueueSemaphoreTake+0xea>
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	2245      	movs	r2, #69	; 0x45
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]
 800484a:	f001 fdd3 	bl	80063f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800484e:	003a      	movs	r2, r7
 8004850:	230c      	movs	r3, #12
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	0011      	movs	r1, r2
 8004856:	0018      	movs	r0, r3
 8004858:	f000 ff5e 	bl	8005718 <xTaskCheckForTimeOut>
 800485c:	1e03      	subs	r3, r0, #0
 800485e:	d12e      	bne.n	80048be <xQueueSemaphoreTake+0x15e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	0018      	movs	r0, r3
 8004864:	f000 f956 	bl	8004b14 <prvIsQueueEmpty>
 8004868:	1e03      	subs	r3, r0, #0
 800486a:	d021      	beq.n	80048b0 <xQueueSemaphoreTake+0x150>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <xQueueSemaphoreTake+0x12a>
                    {
                        taskENTER_CRITICAL();
 8004874:	f001 fdac 	bl	80063d0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	0018      	movs	r0, r3
 800487e:	f001 f873 	bl	8005968 <xTaskPriorityInherit>
 8004882:	0003      	movs	r3, r0
 8004884:	623b      	str	r3, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8004886:	f001 fdb5 	bl	80063f4 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3324      	adds	r3, #36	; 0x24
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	0011      	movs	r1, r2
 8004892:	0018      	movs	r0, r3
 8004894:	f000 fe06 	bl	80054a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	0018      	movs	r0, r3
 800489c:	f000 f8dc 	bl	8004a58 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80048a0:	f000 fbac 	bl	8004ffc <xTaskResumeAll>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d000      	beq.n	80048aa <xQueueSemaphoreTake+0x14a>
 80048a8:	e77e      	b.n	80047a8 <xQueueSemaphoreTake+0x48>
                {
                    portYIELD_WITHIN_API();
 80048aa:	f001 fd81 	bl	80063b0 <vPortYield>
 80048ae:	e77b      	b.n	80047a8 <xQueueSemaphoreTake+0x48>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 f8d0 	bl	8004a58 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80048b8:	f000 fba0 	bl	8004ffc <xTaskResumeAll>
 80048bc:	e774      	b.n	80047a8 <xQueueSemaphoreTake+0x48>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 f8c9 	bl	8004a58 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80048c6:	f000 fb99 	bl	8004ffc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f000 f921 	bl	8004b14 <prvIsQueueEmpty>
 80048d2:	1e03      	subs	r3, r0, #0
 80048d4:	d100      	bne.n	80048d8 <xQueueSemaphoreTake+0x178>
 80048d6:	e767      	b.n	80047a8 <xQueueSemaphoreTake+0x48>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d010      	beq.n	8004900 <xQueueSemaphoreTake+0x1a0>
                    {
                        taskENTER_CRITICAL();
 80048de:	f001 fd77 	bl	80063d0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f000 f810 	bl	800490a <prvGetDisinheritPriorityAfterTimeout>
 80048ea:	0003      	movs	r3, r0
 80048ec:	617b      	str	r3, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	0011      	movs	r1, r2
 80048f6:	0018      	movs	r0, r3
 80048f8:	f001 f948 	bl	8005b8c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80048fc:	f001 fd7a 	bl	80063f4 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004900:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004902:	0018      	movs	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	b00a      	add	sp, #40	; 0x28
 8004908:	bd80      	pop	{r7, pc}

0800490a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d006      	beq.n	8004928 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2205      	movs	r2, #5
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e001      	b.n	800492c <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800492c:	68fb      	ldr	r3, [r7, #12]
    }
 800492e:	0018      	movs	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	b004      	add	sp, #16
 8004934:	bd80      	pop	{r7, pc}

08004936 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10e      	bne.n	8004972 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d14e      	bne.n	80049fa <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	0018      	movs	r0, r3
 8004962:	f001 f891 	bl	8005a88 <xTaskPriorityDisinherit>
 8004966:	0003      	movs	r3, r0
 8004968:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
 8004970:	e043      	b.n	80049fa <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d119      	bne.n	80049ac <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6858      	ldr	r0, [r3, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	0019      	movs	r1, r3
 8004984:	f001 ff86 	bl	8006894 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	18d2      	adds	r2, r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d32b      	bcc.n	80049fa <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	e026      	b.n	80049fa <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	68d8      	ldr	r0, [r3, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	0019      	movs	r1, r3
 80049b8:	f001 ff6c 	bl	8006894 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	425b      	negs	r3, r3
 80049c6:	18d2      	adds	r2, r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d207      	bcs.n	80049e8 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	425b      	negs	r3, r3
 80049e2:	18d2      	adds	r2, r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d105      	bne.n	80049fa <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004a02:	697b      	ldr	r3, [r7, #20]
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b006      	add	sp, #24
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d018      	beq.n	8004a50 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	18d2      	adds	r2, r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d303      	bcc.n	8004a40 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68d9      	ldr	r1, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f001 ff22 	bl	8006894 <memcpy>
    }
}
 8004a50:	46c0      	nop			; (mov r8, r8)
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b002      	add	sp, #8
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004a60:	f001 fcb6 	bl	80063d0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004a64:	230f      	movs	r3, #15
 8004a66:	18fb      	adds	r3, r7, r3
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	2145      	movs	r1, #69	; 0x45
 8004a6c:	5c52      	ldrb	r2, [r2, r1]
 8004a6e:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a70:	e013      	b.n	8004a9a <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3324      	adds	r3, #36	; 0x24
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 fd6c 	bl	800555c <xTaskRemoveFromEventList>
 8004a84:	1e03      	subs	r3, r0, #0
 8004a86:	d001      	beq.n	8004a8c <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004a88:	f000 fe9a 	bl	80057c0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004a8c:	210f      	movs	r1, #15
 8004a8e:	187b      	adds	r3, r7, r1
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	187b      	adds	r3, r7, r1
 8004a98:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a9a:	230f      	movs	r3, #15
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	dce5      	bgt.n	8004a72 <prvUnlockQueue+0x1a>
 8004aa6:	e000      	b.n	8004aaa <prvUnlockQueue+0x52>
                    break;
 8004aa8:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2245      	movs	r2, #69	; 0x45
 8004aae:	21ff      	movs	r1, #255	; 0xff
 8004ab0:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8004ab2:	f001 fc9f 	bl	80063f4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004ab6:	f001 fc8b 	bl	80063d0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004aba:	230e      	movs	r3, #14
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	2144      	movs	r1, #68	; 0x44
 8004ac2:	5c52      	ldrb	r2, [r2, r1]
 8004ac4:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ac6:	e013      	b.n	8004af0 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d016      	beq.n	8004afe <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3310      	adds	r3, #16
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f000 fd41 	bl	800555c <xTaskRemoveFromEventList>
 8004ada:	1e03      	subs	r3, r0, #0
 8004adc:	d001      	beq.n	8004ae2 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8004ade:	f000 fe6f 	bl	80057c0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004ae2:	210e      	movs	r1, #14
 8004ae4:	187b      	adds	r3, r7, r1
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	187b      	adds	r3, r7, r1
 8004aee:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004af0:	230e      	movs	r3, #14
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	b25b      	sxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	dce5      	bgt.n	8004ac8 <prvUnlockQueue+0x70>
 8004afc:	e000      	b.n	8004b00 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8004afe:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2244      	movs	r2, #68	; 0x44
 8004b04:	21ff      	movs	r1, #255	; 0xff
 8004b06:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8004b08:	f001 fc74 	bl	80063f4 <vPortExitCritical>
}
 8004b0c:	46c0      	nop			; (mov r8, r8)
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b004      	add	sp, #16
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b1c:	f001 fc58 	bl	80063d0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d102      	bne.n	8004b2e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e001      	b.n	8004b32 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004b32:	f001 fc5f 	bl	80063f4 <vPortExitCritical>

    return xReturn;
 8004b36:	68fb      	ldr	r3, [r7, #12]
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b004      	add	sp, #16
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b48:	f001 fc42 	bl	80063d0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d102      	bne.n	8004b5e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e001      	b.n	8004b62 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004b62:	f001 fc47 	bl	80063f4 <vPortExitCritical>

    return xReturn;
 8004b66:	68fb      	ldr	r3, [r7, #12]
}
 8004b68:	0018      	movs	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b004      	add	sp, #16
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <vQueueAddToRegistry+0x18>
 8004b84:	b672      	cpsid	i
 8004b86:	e7fe      	b.n	8004b86 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d025      	beq.n	8004bda <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	e01f      	b.n	8004bd4 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004b94:	4a17      	ldr	r2, [pc, #92]	; (8004bf4 <vQueueAddToRegistry+0x84>)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	18d3      	adds	r3, r2, r3
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d105      	bne.n	8004bb2 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	00da      	lsls	r2, r3, #3
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <vQueueAddToRegistry+0x84>)
 8004bac:	18d3      	adds	r3, r2, r3
 8004bae:	60bb      	str	r3, [r7, #8]
                    break;
 8004bb0:	e013      	b.n	8004bda <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <vQueueAddToRegistry+0x5e>
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <vQueueAddToRegistry+0x84>)
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	00d2      	lsls	r2, r2, #3
 8004bbe:	58d3      	ldr	r3, [r2, r3]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	00da      	lsls	r2, r3, #3
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <vQueueAddToRegistry+0x84>)
 8004bca:	18d3      	adds	r3, r2, r3
 8004bcc:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b07      	cmp	r3, #7
 8004bd8:	d9dc      	bls.n	8004b94 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004bec:	46c0      	nop			; (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b004      	add	sp, #16
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000224 	.word	0x20000224

08004bf8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004c08:	f001 fbe2 	bl	80063d0 <vPortEnterCritical>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2244      	movs	r2, #68	; 0x44
 8004c10:	5c9b      	ldrb	r3, [r3, r2]
 8004c12:	b25b      	sxtb	r3, r3
 8004c14:	3301      	adds	r3, #1
 8004c16:	d103      	bne.n	8004c20 <vQueueWaitForMessageRestricted+0x28>
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2244      	movs	r2, #68	; 0x44
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	5499      	strb	r1, [r3, r2]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2245      	movs	r2, #69	; 0x45
 8004c24:	5c9b      	ldrb	r3, [r3, r2]
 8004c26:	b25b      	sxtb	r3, r3
 8004c28:	3301      	adds	r3, #1
 8004c2a:	d103      	bne.n	8004c34 <vQueueWaitForMessageRestricted+0x3c>
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2245      	movs	r2, #69	; 0x45
 8004c30:	2100      	movs	r1, #0
 8004c32:	5499      	strb	r1, [r3, r2]
 8004c34:	f001 fbde 	bl	80063f4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	3324      	adds	r3, #36	; 0x24
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f000 fc49 	bl	80054e0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7ff ff01 	bl	8004a58 <prvUnlockQueue>
    }
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b006      	add	sp, #24
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004c5e:	b590      	push	{r4, r7, lr}
 8004c60:	b08d      	sub	sp, #52	; 0x34
 8004c62:	af04      	add	r7, sp, #16
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	1dbb      	adds	r3, r7, #6
 8004c6c:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c6e:	1dbb      	adds	r3, r7, #6
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	0018      	movs	r0, r3
 8004c76:	f001 fc43 	bl	8006500 <pvPortMalloc>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d016      	beq.n	8004cb2 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c84:	2054      	movs	r0, #84	; 0x54
 8004c86:	f001 fc3b 	bl	8006500 <pvPortMalloc>
 8004c8a:	0003      	movs	r3, r0
 8004c8c:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d009      	beq.n	8004ca8 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2254      	movs	r2, #84	; 0x54
 8004c98:	2100      	movs	r1, #0
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f001 fe03 	bl	80068a6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca6:	e006      	b.n	8004cb6 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	0018      	movs	r0, r3
 8004cac:	f001 fcd0 	bl	8006650 <vPortFree>
 8004cb0:	e001      	b.n	8004cb6 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d016      	beq.n	8004cea <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cbc:	1dbb      	adds	r3, r7, #6
 8004cbe:	881a      	ldrh	r2, [r3, #0]
 8004cc0:	683c      	ldr	r4, [r7, #0]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9303      	str	r3, [sp, #12]
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	9302      	str	r3, [sp, #8]
 8004cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	0023      	movs	r3, r4
 8004cd8:	f000 f810 	bl	8004cfc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f000 f88c 	bl	8004dfc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	e002      	b.n	8004cf0 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cea:	2301      	movs	r3, #1
 8004cec:	425b      	negs	r3, r3
 8004cee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004cf0:	69bb      	ldr	r3, [r7, #24]
    }
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b009      	add	sp, #36	; 0x24
 8004cf8:	bd90      	pop	{r4, r7, pc}
	...

08004cfc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	001a      	movs	r2, r3
 8004d14:	21a5      	movs	r1, #165	; 0xa5
 8004d16:	f001 fdc6 	bl	80068a6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4935      	ldr	r1, [pc, #212]	; (8004df8 <prvInitialiseNewTask+0xfc>)
 8004d22:	468c      	mov	ip, r1
 8004d24:	4463      	add	r3, ip
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	18d3      	adds	r3, r2, r3
 8004d2a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2207      	movs	r2, #7
 8004d30:	4393      	bics	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2207      	movs	r2, #7
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d001      	beq.n	8004d40 <prvInitialiseNewTask+0x44>
 8004d3c:	b672      	cpsid	i
 8004d3e:	e7fe      	b.n	8004d3e <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01f      	beq.n	8004d86 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	e013      	b.n	8004d74 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	18d3      	adds	r3, r2, r3
 8004d52:	7818      	ldrb	r0, [r3, #0]
 8004d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d56:	2134      	movs	r1, #52	; 0x34
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	18d3      	adds	r3, r2, r3
 8004d5c:	185b      	adds	r3, r3, r1
 8004d5e:	1c02      	adds	r2, r0, #0
 8004d60:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	18d3      	adds	r3, r2, r3
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d006      	beq.n	8004d7c <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3301      	adds	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d9e8      	bls.n	8004d4c <prvInitialiseNewTask+0x50>
 8004d7a:	e000      	b.n	8004d7e <prvInitialiseNewTask+0x82>
            {
                break;
 8004d7c:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	2238      	movs	r2, #56	; 0x38
 8004d82:	2100      	movs	r1, #0
 8004d84:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d901      	bls.n	8004d90 <prvInitialiseNewTask+0x94>
 8004d8c:	b672      	cpsid	i
 8004d8e:	e7fe      	b.n	8004d8e <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d901      	bls.n	8004d9a <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d96:	2304      	movs	r3, #4
 8004d98:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	6a3a      	ldr	r2, [r7, #32]
 8004d9e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	6a3a      	ldr	r2, [r7, #32]
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	3304      	adds	r3, #4
 8004daa:	0018      	movs	r0, r3
 8004dac:	f7ff f9e8 	bl	8004180 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	3318      	adds	r3, #24
 8004db4:	0018      	movs	r0, r3
 8004db6:	f7ff f9e3 	bl	8004180 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dbe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	2205      	movs	r2, #5
 8004dc4:	1ad2      	subs	r2, r2, r3
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	68f9      	ldr	r1, [r7, #12]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f001 fa5c 	bl	8006294 <pxPortInitialiseStack>
 8004ddc:	0002      	movs	r2, r0
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b006      	add	sp, #24
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	3fffffff 	.word	0x3fffffff

08004dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004e04:	f001 fae4 	bl	80063d0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004e08:	4b3d      	ldr	r3, [pc, #244]	; (8004f00 <prvAddNewTaskToReadyList+0x104>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	4b3c      	ldr	r3, [pc, #240]	; (8004f00 <prvAddNewTaskToReadyList+0x104>)
 8004e10:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8004e12:	4b3c      	ldr	r3, [pc, #240]	; (8004f04 <prvAddNewTaskToReadyList+0x108>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004e1a:	4b3a      	ldr	r3, [pc, #232]	; (8004f04 <prvAddNewTaskToReadyList+0x108>)
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e20:	4b37      	ldr	r3, [pc, #220]	; (8004f00 <prvAddNewTaskToReadyList+0x104>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d110      	bne.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004e28:	f000 fce4 	bl	80057f4 <prvInitialiseTaskLists>
 8004e2c:	e00d      	b.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004e2e:	4b36      	ldr	r3, [pc, #216]	; (8004f08 <prvAddNewTaskToReadyList+0x10c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e36:	4b33      	ldr	r3, [pc, #204]	; (8004f04 <prvAddNewTaskToReadyList+0x108>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d802      	bhi.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004e44:	4b2f      	ldr	r3, [pc, #188]	; (8004f04 <prvAddNewTaskToReadyList+0x108>)
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004e4a:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <prvAddNewTaskToReadyList+0x110>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	4b2e      	ldr	r3, [pc, #184]	; (8004f0c <prvAddNewTaskToReadyList+0x110>)
 8004e52:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e54:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <prvAddNewTaskToReadyList+0x110>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e60:	4b2b      	ldr	r3, [pc, #172]	; (8004f10 <prvAddNewTaskToReadyList+0x114>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d903      	bls.n	8004e70 <prvAddNewTaskToReadyList+0x74>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6c:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <prvAddNewTaskToReadyList+0x114>)
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	4927      	ldr	r1, [pc, #156]	; (8004f14 <prvAddNewTaskToReadyList+0x118>)
 8004e76:	0013      	movs	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	18cb      	adds	r3, r1, r3
 8004e80:	3304      	adds	r3, #4
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	3204      	adds	r2, #4
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	1d1a      	adds	r2, r3, #4
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	609a      	str	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eaa:	0013      	movs	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	189b      	adds	r3, r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4a18      	ldr	r2, [pc, #96]	; (8004f14 <prvAddNewTaskToReadyList+0x118>)
 8004eb4:	189a      	adds	r2, r3, r2
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	615a      	str	r2, [r3, #20]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebe:	4915      	ldr	r1, [pc, #84]	; (8004f14 <prvAddNewTaskToReadyList+0x118>)
 8004ec0:	0013      	movs	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	189b      	adds	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	585b      	ldr	r3, [r3, r1]
 8004eca:	1c58      	adds	r0, r3, #1
 8004ecc:	4911      	ldr	r1, [pc, #68]	; (8004f14 <prvAddNewTaskToReadyList+0x118>)
 8004ece:	0013      	movs	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	189b      	adds	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004ed8:	f001 fa8c 	bl	80063f4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004edc:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <prvAddNewTaskToReadyList+0x10c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ee4:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <prvAddNewTaskToReadyList+0x108>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d201      	bcs.n	8004ef6 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004ef2:	f001 fa5d 	bl	80063b0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b004      	add	sp, #16
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	2000033c 	.word	0x2000033c
 8004f04:	20000264 	.word	0x20000264
 8004f08:	20000348 	.word	0x20000348
 8004f0c:	20000358 	.word	0x20000358
 8004f10:	20000344 	.word	0x20000344
 8004f14:	20000268 	.word	0x20000268

08004f18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d010      	beq.n	8004f4c <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <vTaskDelay+0x48>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <vTaskDelay+0x1e>
 8004f32:	b672      	cpsid	i
 8004f34:	e7fe      	b.n	8004f34 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8004f36:	f000 f855 	bl	8004fe4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f000 fecc 	bl	8005cdc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004f44:	f000 f85a 	bl	8004ffc <xTaskResumeAll>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8004f52:	f001 fa2d 	bl	80063b0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b004      	add	sp, #16
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	20000364 	.word	0x20000364

08004f64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004f6a:	4917      	ldr	r1, [pc, #92]	; (8004fc8 <vTaskStartScheduler+0x64>)
 8004f6c:	4817      	ldr	r0, [pc, #92]	; (8004fcc <vTaskStartScheduler+0x68>)
 8004f6e:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <vTaskStartScheduler+0x6c>)
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	2300      	movs	r3, #0
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	2300      	movs	r3, #0
 8004f78:	223c      	movs	r2, #60	; 0x3c
 8004f7a:	f7ff fe70 	bl	8004c5e <xTaskCreate>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d103      	bne.n	8004f90 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8004f88:	f000 ff16 	bl	8005db8 <xTimerCreateTimerTask>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10d      	bne.n	8004fb2 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8004f96:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004f98:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <vTaskStartScheduler+0x70>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	4252      	negs	r2, r2
 8004f9e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004fa0:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <vTaskStartScheduler+0x74>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <vTaskStartScheduler+0x78>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004fac:	f001 f9dc 	bl	8006368 <xPortStartScheduler>
 8004fb0:	e004      	b.n	8004fbc <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <vTaskStartScheduler+0x58>
 8004fb8:	b672      	cpsid	i
 8004fba:	e7fe      	b.n	8004fba <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004fbc:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <vTaskStartScheduler+0x7c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b002      	add	sp, #8
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	08006940 	.word	0x08006940
 8004fcc:	080057d5 	.word	0x080057d5
 8004fd0:	20000360 	.word	0x20000360
 8004fd4:	2000035c 	.word	0x2000035c
 8004fd8:	20000348 	.word	0x20000348
 8004fdc:	20000340 	.word	0x20000340
 8004fe0:	2000000c 	.word	0x2000000c

08004fe4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <vTaskSuspendAll+0x14>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	4b02      	ldr	r3, [pc, #8]	; (8004ff8 <vTaskSuspendAll+0x14>)
 8004ff0:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000364 	.word	0x20000364

08004ffc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800500a:	4b68      	ldr	r3, [pc, #416]	; (80051ac <xTaskResumeAll+0x1b0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <xTaskResumeAll+0x1a>
 8005012:	b672      	cpsid	i
 8005014:	e7fe      	b.n	8005014 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005016:	f001 f9db 	bl	80063d0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800501a:	4b64      	ldr	r3, [pc, #400]	; (80051ac <xTaskResumeAll+0x1b0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	1e5a      	subs	r2, r3, #1
 8005020:	4b62      	ldr	r3, [pc, #392]	; (80051ac <xTaskResumeAll+0x1b0>)
 8005022:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005024:	4b61      	ldr	r3, [pc, #388]	; (80051ac <xTaskResumeAll+0x1b0>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d000      	beq.n	800502e <xTaskResumeAll+0x32>
 800502c:	e0b7      	b.n	800519e <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800502e:	4b60      	ldr	r3, [pc, #384]	; (80051b0 <xTaskResumeAll+0x1b4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d100      	bne.n	8005038 <xTaskResumeAll+0x3c>
 8005036:	e0b2      	b.n	800519e <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005038:	e089      	b.n	800514e <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800503a:	4b5e      	ldr	r3, [pc, #376]	; (80051b4 <xTaskResumeAll+0x1b8>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005046:	60bb      	str	r3, [r7, #8]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	6a12      	ldr	r2, [r2, #32]
 8005050:	609a      	str	r2, [r3, #8]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	69d2      	ldr	r2, [r2, #28]
 800505a:	605a      	str	r2, [r3, #4]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3318      	adds	r3, #24
 8005064:	429a      	cmp	r2, r3
 8005066:	d103      	bne.n	8005070 <xTaskResumeAll+0x74>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	6a1a      	ldr	r2, [r3, #32]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	605a      	str	r2, [r3, #4]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2200      	movs	r2, #0
 8005074:	629a      	str	r2, [r3, #40]	; 0x28
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	607b      	str	r3, [r7, #4]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	68d2      	ldr	r2, [r2, #12]
 800508e:	609a      	str	r2, [r3, #8]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	6892      	ldr	r2, [r2, #8]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	3304      	adds	r3, #4
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d103      	bne.n	80050ae <xTaskResumeAll+0xb2>
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2200      	movs	r2, #0
 80050b2:	615a      	str	r2, [r3, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	1e5a      	subs	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c2:	4b3d      	ldr	r3, [pc, #244]	; (80051b8 <xTaskResumeAll+0x1bc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d903      	bls.n	80050d2 <xTaskResumeAll+0xd6>
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ce:	4b3a      	ldr	r3, [pc, #232]	; (80051b8 <xTaskResumeAll+0x1bc>)
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	4939      	ldr	r1, [pc, #228]	; (80051bc <xTaskResumeAll+0x1c0>)
 80050d8:	0013      	movs	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	189b      	adds	r3, r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	18cb      	adds	r3, r1, r3
 80050e2:	3304      	adds	r3, #4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	609a      	str	r2, [r3, #8]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	60da      	str	r2, [r3, #12]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	3204      	adds	r2, #4
 80050fe:	605a      	str	r2, [r3, #4]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	1d1a      	adds	r2, r3, #4
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	609a      	str	r2, [r3, #8]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	0013      	movs	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	189b      	adds	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4a29      	ldr	r2, [pc, #164]	; (80051bc <xTaskResumeAll+0x1c0>)
 8005116:	189a      	adds	r2, r3, r2
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	615a      	str	r2, [r3, #20]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005120:	4926      	ldr	r1, [pc, #152]	; (80051bc <xTaskResumeAll+0x1c0>)
 8005122:	0013      	movs	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	189b      	adds	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	585b      	ldr	r3, [r3, r1]
 800512c:	1c58      	adds	r0, r3, #1
 800512e:	4923      	ldr	r1, [pc, #140]	; (80051bc <xTaskResumeAll+0x1c0>)
 8005130:	0013      	movs	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	189b      	adds	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513e:	4b20      	ldr	r3, [pc, #128]	; (80051c0 <xTaskResumeAll+0x1c4>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	429a      	cmp	r2, r3
 8005146:	d302      	bcc.n	800514e <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8005148:	4b1e      	ldr	r3, [pc, #120]	; (80051c4 <xTaskResumeAll+0x1c8>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800514e:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <xTaskResumeAll+0x1b8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d000      	beq.n	8005158 <xTaskResumeAll+0x15c>
 8005156:	e770      	b.n	800503a <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800515e:	f000 fbcd 	bl	80058fc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005162:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <xTaskResumeAll+0x1cc>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00f      	beq.n	800518e <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800516e:	f000 f83b 	bl	80051e8 <xTaskIncrementTick>
 8005172:	1e03      	subs	r3, r0, #0
 8005174:	d002      	beq.n	800517c <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8005176:	4b13      	ldr	r3, [pc, #76]	; (80051c4 <xTaskResumeAll+0x1c8>)
 8005178:	2201      	movs	r2, #1
 800517a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3b01      	subs	r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f2      	bne.n	800516e <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8005188:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <xTaskResumeAll+0x1cc>)
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <xTaskResumeAll+0x1c8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005196:	2301      	movs	r3, #1
 8005198:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800519a:	f001 f909 	bl	80063b0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800519e:	f001 f929 	bl	80063f4 <vPortExitCritical>

    return xAlreadyYielded;
 80051a2:	693b      	ldr	r3, [r7, #16]
}
 80051a4:	0018      	movs	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b006      	add	sp, #24
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20000364 	.word	0x20000364
 80051b0:	2000033c 	.word	0x2000033c
 80051b4:	200002fc 	.word	0x200002fc
 80051b8:	20000344 	.word	0x20000344
 80051bc:	20000268 	.word	0x20000268
 80051c0:	20000264 	.word	0x20000264
 80051c4:	20000350 	.word	0x20000350
 80051c8:	2000034c 	.word	0x2000034c

080051cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80051d2:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <xTaskGetTickCount+0x18>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80051d8:	687b      	ldr	r3, [r7, #4]
}
 80051da:	0018      	movs	r0, r3
 80051dc:	46bd      	mov	sp, r7
 80051de:	b002      	add	sp, #8
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	20000340 	.word	0x20000340

080051e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f2:	4b78      	ldr	r3, [pc, #480]	; (80053d4 <xTaskIncrementTick+0x1ec>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d000      	beq.n	80051fc <xTaskIncrementTick+0x14>
 80051fa:	e0e0      	b.n	80053be <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051fc:	4b76      	ldr	r3, [pc, #472]	; (80053d8 <xTaskIncrementTick+0x1f0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005204:	4b74      	ldr	r3, [pc, #464]	; (80053d8 <xTaskIncrementTick+0x1f0>)
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d117      	bne.n	8005240 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8005210:	4b72      	ldr	r3, [pc, #456]	; (80053dc <xTaskIncrementTick+0x1f4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <xTaskIncrementTick+0x36>
 800521a:	b672      	cpsid	i
 800521c:	e7fe      	b.n	800521c <xTaskIncrementTick+0x34>
 800521e:	4b6f      	ldr	r3, [pc, #444]	; (80053dc <xTaskIncrementTick+0x1f4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	4b6e      	ldr	r3, [pc, #440]	; (80053e0 <xTaskIncrementTick+0x1f8>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b6c      	ldr	r3, [pc, #432]	; (80053dc <xTaskIncrementTick+0x1f4>)
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	4b6c      	ldr	r3, [pc, #432]	; (80053e0 <xTaskIncrementTick+0x1f8>)
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	4b6c      	ldr	r3, [pc, #432]	; (80053e4 <xTaskIncrementTick+0x1fc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	4b6a      	ldr	r3, [pc, #424]	; (80053e4 <xTaskIncrementTick+0x1fc>)
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f000 fb5e 	bl	80058fc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005240:	4b69      	ldr	r3, [pc, #420]	; (80053e8 <xTaskIncrementTick+0x200>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	429a      	cmp	r2, r3
 8005248:	d200      	bcs.n	800524c <xTaskIncrementTick+0x64>
 800524a:	e0a4      	b.n	8005396 <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800524c:	4b63      	ldr	r3, [pc, #396]	; (80053dc <xTaskIncrementTick+0x1f4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005256:	4b64      	ldr	r3, [pc, #400]	; (80053e8 <xTaskIncrementTick+0x200>)
 8005258:	2201      	movs	r2, #1
 800525a:	4252      	negs	r2, r2
 800525c:	601a      	str	r2, [r3, #0]
                    break;
 800525e:	e09a      	b.n	8005396 <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005260:	4b5e      	ldr	r3, [pc, #376]	; (80053dc <xTaskIncrementTick+0x1f4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	429a      	cmp	r2, r3
 8005276:	d203      	bcs.n	8005280 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005278:	4b5b      	ldr	r3, [pc, #364]	; (80053e8 <xTaskIncrementTick+0x200>)
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800527e:	e08a      	b.n	8005396 <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	68d2      	ldr	r2, [r2, #12]
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	6892      	ldr	r2, [r2, #8]
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3304      	adds	r3, #4
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d103      	bne.n	80052ae <xTaskIncrementTick+0xc6>
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2200      	movs	r2, #0
 80052b2:	615a      	str	r2, [r3, #20]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	1e5a      	subs	r2, r3, #1
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01e      	beq.n	8005304 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	607b      	str	r3, [r7, #4]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	6a12      	ldr	r2, [r2, #32]
 80052d4:	609a      	str	r2, [r3, #8]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	69d2      	ldr	r2, [r2, #28]
 80052de:	605a      	str	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	3318      	adds	r3, #24
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d103      	bne.n	80052f4 <xTaskIncrementTick+0x10c>
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	605a      	str	r2, [r3, #4]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2200      	movs	r2, #0
 80052f8:	629a      	str	r2, [r3, #40]	; 0x28
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	1e5a      	subs	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	4b38      	ldr	r3, [pc, #224]	; (80053ec <xTaskIncrementTick+0x204>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d903      	bls.n	8005318 <xTaskIncrementTick+0x130>
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005314:	4b35      	ldr	r3, [pc, #212]	; (80053ec <xTaskIncrementTick+0x204>)
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	4934      	ldr	r1, [pc, #208]	; (80053f0 <xTaskIncrementTick+0x208>)
 800531e:	0013      	movs	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	189b      	adds	r3, r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	18cb      	adds	r3, r1, r3
 8005328:	3304      	adds	r3, #4
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	603b      	str	r3, [r7, #0]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	3204      	adds	r2, #4
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	609a      	str	r2, [r3, #8]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005352:	0013      	movs	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	189b      	adds	r3, r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <xTaskIncrementTick+0x208>)
 800535c:	189a      	adds	r2, r3, r2
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	615a      	str	r2, [r3, #20]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005366:	4922      	ldr	r1, [pc, #136]	; (80053f0 <xTaskIncrementTick+0x208>)
 8005368:	0013      	movs	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	189b      	adds	r3, r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	585b      	ldr	r3, [r3, r1]
 8005372:	1c58      	adds	r0, r3, #1
 8005374:	491e      	ldr	r1, [pc, #120]	; (80053f0 <xTaskIncrementTick+0x208>)
 8005376:	0013      	movs	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	189b      	adds	r3, r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <xTaskIncrementTick+0x20c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	429a      	cmp	r2, r3
 800538c:	d800      	bhi.n	8005390 <xTaskIncrementTick+0x1a8>
 800538e:	e75d      	b.n	800524c <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 8005390:	2301      	movs	r3, #1
 8005392:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005394:	e75a      	b.n	800524c <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005396:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <xTaskIncrementTick+0x20c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	4914      	ldr	r1, [pc, #80]	; (80053f0 <xTaskIncrementTick+0x208>)
 800539e:	0013      	movs	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	585b      	ldr	r3, [r3, r1]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d901      	bls.n	80053b0 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 80053ac:	2301      	movs	r3, #1
 80053ae:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <xTaskIncrementTick+0x210>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80053b8:	2301      	movs	r3, #1
 80053ba:	61fb      	str	r3, [r7, #28]
 80053bc:	e004      	b.n	80053c8 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80053be:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <xTaskIncrementTick+0x214>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <xTaskIncrementTick+0x214>)
 80053c6:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80053c8:	69fb      	ldr	r3, [r7, #28]
}
 80053ca:	0018      	movs	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b008      	add	sp, #32
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	20000364 	.word	0x20000364
 80053d8:	20000340 	.word	0x20000340
 80053dc:	200002f4 	.word	0x200002f4
 80053e0:	200002f8 	.word	0x200002f8
 80053e4:	20000354 	.word	0x20000354
 80053e8:	2000035c 	.word	0x2000035c
 80053ec:	20000344 	.word	0x20000344
 80053f0:	20000268 	.word	0x20000268
 80053f4:	20000264 	.word	0x20000264
 80053f8:	20000350 	.word	0x20000350
 80053fc:	2000034c 	.word	0x2000034c

08005400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005406:	4b22      	ldr	r3, [pc, #136]	; (8005490 <vTaskSwitchContext+0x90>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800540e:	4b21      	ldr	r3, [pc, #132]	; (8005494 <vTaskSwitchContext+0x94>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005414:	e037      	b.n	8005486 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8005416:	4b1f      	ldr	r3, [pc, #124]	; (8005494 <vTaskSwitchContext+0x94>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541c:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <vTaskSwitchContext+0x98>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	e007      	b.n	8005434 <vTaskSwitchContext+0x34>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <vTaskSwitchContext+0x2e>
 800542a:	b672      	cpsid	i
 800542c:	e7fe      	b.n	800542c <vTaskSwitchContext+0x2c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3b01      	subs	r3, #1
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	4919      	ldr	r1, [pc, #100]	; (800549c <vTaskSwitchContext+0x9c>)
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	0013      	movs	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	189b      	adds	r3, r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	585b      	ldr	r3, [r3, r1]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0ee      	beq.n	8005424 <vTaskSwitchContext+0x24>
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	0013      	movs	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	189b      	adds	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4a12      	ldr	r2, [pc, #72]	; (800549c <vTaskSwitchContext+0x9c>)
 8005452:	189b      	adds	r3, r3, r2
 8005454:	603b      	str	r3, [r7, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	605a      	str	r2, [r3, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	3308      	adds	r3, #8
 8005468:	429a      	cmp	r2, r3
 800546a:	d104      	bne.n	8005476 <vTaskSwitchContext+0x76>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <vTaskSwitchContext+0xa0>)
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <vTaskSwitchContext+0x98>)
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]
}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	46bd      	mov	sp, r7
 800548a:	b002      	add	sp, #8
 800548c:	bd80      	pop	{r7, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	20000364 	.word	0x20000364
 8005494:	20000350 	.word	0x20000350
 8005498:	20000344 	.word	0x20000344
 800549c:	20000268 	.word	0x20000268
 80054a0:	20000264 	.word	0x20000264

080054a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <vTaskPlaceOnEventList+0x14>
 80054b4:	b672      	cpsid	i
 80054b6:	e7fe      	b.n	80054b6 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054b8:	4b08      	ldr	r3, [pc, #32]	; (80054dc <vTaskPlaceOnEventList+0x38>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3318      	adds	r3, #24
 80054be:	001a      	movs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0011      	movs	r1, r2
 80054c4:	0018      	movs	r0, r3
 80054c6:	f7fe fe66 	bl	8004196 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2101      	movs	r1, #1
 80054ce:	0018      	movs	r0, r3
 80054d0:	f000 fc04 	bl	8005cdc <prvAddCurrentTaskToDelayedList>
}
 80054d4:	46c0      	nop			; (mov r8, r8)
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b002      	add	sp, #8
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000264 	.word	0x20000264

080054e0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <vTaskPlaceOnEventListRestricted+0x16>
 80054f2:	b672      	cpsid	i
 80054f4:	e7fe      	b.n	80054f4 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	4b16      	ldr	r3, [pc, #88]	; (8005558 <vTaskPlaceOnEventListRestricted+0x78>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	61da      	str	r2, [r3, #28]
 8005504:	4b14      	ldr	r3, [pc, #80]	; (8005558 <vTaskPlaceOnEventListRestricted+0x78>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	6892      	ldr	r2, [r2, #8]
 800550c:	621a      	str	r2, [r3, #32]
 800550e:	4b12      	ldr	r3, [pc, #72]	; (8005558 <vTaskPlaceOnEventListRestricted+0x78>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	3218      	adds	r2, #24
 8005518:	605a      	str	r2, [r3, #4]
 800551a:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <vTaskPlaceOnEventListRestricted+0x78>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3318      	adds	r3, #24
 8005520:	001a      	movs	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	609a      	str	r2, [r3, #8]
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <vTaskPlaceOnEventListRestricted+0x78>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	629a      	str	r2, [r3, #40]	; 0x28
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 800553e:	2301      	movs	r3, #1
 8005540:	425b      	negs	r3, r3
 8005542:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	0011      	movs	r1, r2
 800554a:	0018      	movs	r0, r3
 800554c:	f000 fbc6 	bl	8005cdc <prvAddCurrentTaskToDelayedList>
    }
 8005550:	46c0      	nop			; (mov r8, r8)
 8005552:	46bd      	mov	sp, r7
 8005554:	b006      	add	sp, #24
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000264 	.word	0x20000264

0800555c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <xTaskRemoveFromEventList+0x1a>
 8005572:	b672      	cpsid	i
 8005574:	e7fe      	b.n	8005574 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	6a12      	ldr	r2, [r2, #32]
 8005584:	609a      	str	r2, [r3, #8]
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	69d2      	ldr	r2, [r2, #28]
 800558e:	605a      	str	r2, [r3, #4]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	3318      	adds	r3, #24
 8005598:	429a      	cmp	r2, r3
 800559a:	d103      	bne.n	80055a4 <xTaskRemoveFromEventList+0x48>
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	6a1a      	ldr	r2, [r3, #32]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	605a      	str	r2, [r3, #4]
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2200      	movs	r2, #0
 80055a8:	629a      	str	r2, [r3, #40]	; 0x28
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	1e5a      	subs	r2, r3, #1
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b4:	4b48      	ldr	r3, [pc, #288]	; (80056d8 <xTaskRemoveFromEventList+0x17c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d15d      	bne.n	8005678 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	68d2      	ldr	r2, [r2, #12]
 80055ca:	609a      	str	r2, [r3, #8]
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	6892      	ldr	r2, [r2, #8]
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	3304      	adds	r3, #4
 80055de:	429a      	cmp	r2, r3
 80055e0:	d103      	bne.n	80055ea <xTaskRemoveFromEventList+0x8e>
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2200      	movs	r2, #0
 80055ee:	615a      	str	r2, [r3, #20]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	1e5a      	subs	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fe:	4b37      	ldr	r3, [pc, #220]	; (80056dc <xTaskRemoveFromEventList+0x180>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d903      	bls.n	800560e <xTaskRemoveFromEventList+0xb2>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560a:	4b34      	ldr	r3, [pc, #208]	; (80056dc <xTaskRemoveFromEventList+0x180>)
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	4933      	ldr	r1, [pc, #204]	; (80056e0 <xTaskRemoveFromEventList+0x184>)
 8005614:	0013      	movs	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	189b      	adds	r3, r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	18cb      	adds	r3, r1, r3
 800561e:	3304      	adds	r3, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	609a      	str	r2, [r3, #8]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	60da      	str	r2, [r3, #12]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	3204      	adds	r2, #4
 800563a:	605a      	str	r2, [r3, #4]
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	1d1a      	adds	r2, r3, #4
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	0013      	movs	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	189b      	adds	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4a23      	ldr	r2, [pc, #140]	; (80056e0 <xTaskRemoveFromEventList+0x184>)
 8005652:	189a      	adds	r2, r3, r2
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	615a      	str	r2, [r3, #20]
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	4920      	ldr	r1, [pc, #128]	; (80056e0 <xTaskRemoveFromEventList+0x184>)
 800565e:	0013      	movs	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	189b      	adds	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	585b      	ldr	r3, [r3, r1]
 8005668:	1c58      	adds	r0, r3, #1
 800566a:	491d      	ldr	r1, [pc, #116]	; (80056e0 <xTaskRemoveFromEventList+0x184>)
 800566c:	0013      	movs	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	189b      	adds	r3, r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	5058      	str	r0, [r3, r1]
 8005676:	e01b      	b.n	80056b0 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005678:	4b1a      	ldr	r3, [pc, #104]	; (80056e4 <xTaskRemoveFromEventList+0x188>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	61da      	str	r2, [r3, #28]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	621a      	str	r2, [r3, #32]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	3218      	adds	r2, #24
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	3318      	adds	r3, #24
 800569a:	001a      	movs	r2, r3
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	609a      	str	r2, [r3, #8]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	4a10      	ldr	r2, [pc, #64]	; (80056e4 <xTaskRemoveFromEventList+0x188>)
 80056a4:	629a      	str	r2, [r3, #40]	; 0x28
 80056a6:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <xTaskRemoveFromEventList+0x188>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <xTaskRemoveFromEventList+0x188>)
 80056ae:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <xTaskRemoveFromEventList+0x18c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d905      	bls.n	80056ca <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80056be:	2301      	movs	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80056c2:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <xTaskRemoveFromEventList+0x190>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	e001      	b.n	80056ce <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80056ce:	69fb      	ldr	r3, [r7, #28]
}
 80056d0:	0018      	movs	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b008      	add	sp, #32
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20000364 	.word	0x20000364
 80056dc:	20000344 	.word	0x20000344
 80056e0:	20000268 	.word	0x20000268
 80056e4:	200002fc 	.word	0x200002fc
 80056e8:	20000264 	.word	0x20000264
 80056ec:	20000350 	.word	0x20000350

080056f0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056f8:	4b05      	ldr	r3, [pc, #20]	; (8005710 <vTaskInternalSetTimeOutState+0x20>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005700:	4b04      	ldr	r3, [pc, #16]	; (8005714 <vTaskInternalSetTimeOutState+0x24>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	605a      	str	r2, [r3, #4]
}
 8005708:	46c0      	nop			; (mov r8, r8)
 800570a:	46bd      	mov	sp, r7
 800570c:	b002      	add	sp, #8
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20000354 	.word	0x20000354
 8005714:	20000340 	.word	0x20000340

08005718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <xTaskCheckForTimeOut+0x14>
 8005728:	b672      	cpsid	i
 800572a:	e7fe      	b.n	800572a <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <xTaskCheckForTimeOut+0x1e>
 8005732:	b672      	cpsid	i
 8005734:	e7fe      	b.n	8005734 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 8005736:	f000 fe4b 	bl	80063d0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800573a:	4b1f      	ldr	r3, [pc, #124]	; (80057b8 <xTaskCheckForTimeOut+0xa0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3301      	adds	r3, #1
 8005750:	d102      	bne.n	8005758 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	e027      	b.n	80057a8 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b17      	ldr	r3, [pc, #92]	; (80057bc <xTaskCheckForTimeOut+0xa4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d00a      	beq.n	800577a <xTaskCheckForTimeOut+0x62>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	429a      	cmp	r2, r3
 800576c:	d305      	bcc.n	800577a <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800576e:	2301      	movs	r3, #1
 8005770:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e016      	b.n	80057a8 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	429a      	cmp	r2, r3
 8005782:	d20c      	bcs.n	800579e <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1ad2      	subs	r2, r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	0018      	movs	r0, r3
 8005794:	f7ff ffac 	bl	80056f0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e004      	b.n	80057a8 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80057a8:	f000 fe24 	bl	80063f4 <vPortExitCritical>

    return xReturn;
 80057ac:	697b      	ldr	r3, [r7, #20]
}
 80057ae:	0018      	movs	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b006      	add	sp, #24
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	20000340 	.word	0x20000340
 80057bc:	20000354 	.word	0x20000354

080057c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80057c4:	4b02      	ldr	r3, [pc, #8]	; (80057d0 <vTaskMissedYield+0x10>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000350 	.word	0x20000350

080057d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80057dc:	f000 f84e 	bl	800587c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057e0:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <prvIdleTask+0x1c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d9f9      	bls.n	80057dc <prvIdleTask+0x8>
            {
                taskYIELD();
 80057e8:	f000 fde2 	bl	80063b0 <vPortYield>
        prvCheckTasksWaitingTermination();
 80057ec:	e7f6      	b.n	80057dc <prvIdleTask+0x8>
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	20000268 	.word	0x20000268

080057f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057fa:	2300      	movs	r3, #0
 80057fc:	607b      	str	r3, [r7, #4]
 80057fe:	e00c      	b.n	800581a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	0013      	movs	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	189b      	adds	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4a14      	ldr	r2, [pc, #80]	; (800585c <prvInitialiseTaskLists+0x68>)
 800580c:	189b      	adds	r3, r3, r2
 800580e:	0018      	movs	r0, r3
 8005810:	f7fe fc98 	bl	8004144 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3301      	adds	r3, #1
 8005818:	607b      	str	r3, [r7, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b04      	cmp	r3, #4
 800581e:	d9ef      	bls.n	8005800 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <prvInitialiseTaskLists+0x6c>)
 8005822:	0018      	movs	r0, r3
 8005824:	f7fe fc8e 	bl	8004144 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005828:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <prvInitialiseTaskLists+0x70>)
 800582a:	0018      	movs	r0, r3
 800582c:	f7fe fc8a 	bl	8004144 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <prvInitialiseTaskLists+0x74>)
 8005832:	0018      	movs	r0, r3
 8005834:	f7fe fc86 	bl	8004144 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005838:	4b0c      	ldr	r3, [pc, #48]	; (800586c <prvInitialiseTaskLists+0x78>)
 800583a:	0018      	movs	r0, r3
 800583c:	f7fe fc82 	bl	8004144 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <prvInitialiseTaskLists+0x7c>)
 8005842:	0018      	movs	r0, r3
 8005844:	f7fe fc7e 	bl	8004144 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <prvInitialiseTaskLists+0x80>)
 800584a:	4a05      	ldr	r2, [pc, #20]	; (8005860 <prvInitialiseTaskLists+0x6c>)
 800584c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <prvInitialiseTaskLists+0x84>)
 8005850:	4a04      	ldr	r2, [pc, #16]	; (8005864 <prvInitialiseTaskLists+0x70>)
 8005852:	601a      	str	r2, [r3, #0]
}
 8005854:	46c0      	nop			; (mov r8, r8)
 8005856:	46bd      	mov	sp, r7
 8005858:	b002      	add	sp, #8
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000268 	.word	0x20000268
 8005860:	200002cc 	.word	0x200002cc
 8005864:	200002e0 	.word	0x200002e0
 8005868:	200002fc 	.word	0x200002fc
 800586c:	20000310 	.word	0x20000310
 8005870:	20000328 	.word	0x20000328
 8005874:	200002f4 	.word	0x200002f4
 8005878:	200002f8 	.word	0x200002f8

0800587c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005882:	e01a      	b.n	80058ba <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8005884:	f000 fda4 	bl	80063d0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005888:	4b10      	ldr	r3, [pc, #64]	; (80058cc <prvCheckTasksWaitingTermination+0x50>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3304      	adds	r3, #4
 8005894:	0018      	movs	r0, r3
 8005896:	f7fe fcb4 	bl	8004202 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800589a:	4b0d      	ldr	r3, [pc, #52]	; (80058d0 <prvCheckTasksWaitingTermination+0x54>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <prvCheckTasksWaitingTermination+0x54>)
 80058a2:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 80058a4:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <prvCheckTasksWaitingTermination+0x58>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	1e5a      	subs	r2, r3, #1
 80058aa:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <prvCheckTasksWaitingTermination+0x58>)
 80058ac:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 80058ae:	f000 fda1 	bl	80063f4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	0018      	movs	r0, r3
 80058b6:	f000 f80f 	bl	80058d8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <prvCheckTasksWaitingTermination+0x58>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e0      	bne.n	8005884 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	46c0      	nop			; (mov r8, r8)
 80058c6:	46bd      	mov	sp, r7
 80058c8:	b002      	add	sp, #8
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20000310 	.word	0x20000310
 80058d0:	2000033c 	.word	0x2000033c
 80058d4:	20000324 	.word	0x20000324

080058d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	0018      	movs	r0, r3
 80058e6:	f000 feb3 	bl	8006650 <vPortFree>
            vPortFree( pxTCB );
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f000 feaf 	bl	8006650 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b002      	add	sp, #8
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005900:	4b09      	ldr	r3, [pc, #36]	; (8005928 <prvResetNextTaskUnblockTime+0x2c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d104      	bne.n	8005914 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800590a:	4b08      	ldr	r3, [pc, #32]	; (800592c <prvResetNextTaskUnblockTime+0x30>)
 800590c:	2201      	movs	r2, #1
 800590e:	4252      	negs	r2, r2
 8005910:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005912:	e005      	b.n	8005920 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <prvResetNextTaskUnblockTime+0x2c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <prvResetNextTaskUnblockTime+0x30>)
 800591e:	601a      	str	r2, [r3, #0]
}
 8005920:	46c0      	nop			; (mov r8, r8)
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	200002f4 	.word	0x200002f4
 800592c:	2000035c 	.word	0x2000035c

08005930 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005936:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <xTaskGetSchedulerState+0x30>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800593e:	2301      	movs	r3, #1
 8005940:	607b      	str	r3, [r7, #4]
 8005942:	e008      	b.n	8005956 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005944:	4b07      	ldr	r3, [pc, #28]	; (8005964 <xTaskGetSchedulerState+0x34>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800594c:	2302      	movs	r3, #2
 800594e:	607b      	str	r3, [r7, #4]
 8005950:	e001      	b.n	8005956 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005952:	2300      	movs	r3, #0
 8005954:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005956:	687b      	ldr	r3, [r7, #4]
    }
 8005958:	0018      	movs	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	b002      	add	sp, #8
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20000348 	.word	0x20000348
 8005964:	20000364 	.word	0x20000364

08005968 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d100      	bne.n	8005980 <xTaskPriorityInherit+0x18>
 800597e:	e077      	b.n	8005a70 <xTaskPriorityInherit+0x108>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	4b3d      	ldr	r3, [pc, #244]	; (8005a7c <xTaskPriorityInherit+0x114>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	429a      	cmp	r2, r3
 800598c:	d267      	bcs.n	8005a5e <xTaskPriorityInherit+0xf6>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	db06      	blt.n	80059a4 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005996:	4b39      	ldr	r3, [pc, #228]	; (8005a7c <xTaskPriorityInherit+0x114>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	2205      	movs	r2, #5
 800599e:	1ad2      	subs	r2, r2, r3
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6959      	ldr	r1, [r3, #20]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	0013      	movs	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	189b      	adds	r3, r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4a32      	ldr	r2, [pc, #200]	; (8005a80 <xTaskPriorityInherit+0x118>)
 80059b6:	189b      	adds	r3, r3, r2
 80059b8:	4299      	cmp	r1, r3
 80059ba:	d148      	bne.n	8005a4e <xTaskPriorityInherit+0xe6>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	3304      	adds	r3, #4
 80059c0:	0018      	movs	r0, r3
 80059c2:	f7fe fc1e 	bl	8004202 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059c6:	4b2d      	ldr	r3, [pc, #180]	; (8005a7c <xTaskPriorityInherit+0x114>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d4:	4b2b      	ldr	r3, [pc, #172]	; (8005a84 <xTaskPriorityInherit+0x11c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d903      	bls.n	80059e4 <xTaskPriorityInherit+0x7c>
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	4b28      	ldr	r3, [pc, #160]	; (8005a84 <xTaskPriorityInherit+0x11c>)
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e8:	4925      	ldr	r1, [pc, #148]	; (8005a80 <xTaskPriorityInherit+0x118>)
 80059ea:	0013      	movs	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	189b      	adds	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	18cb      	adds	r3, r1, r3
 80059f4:	3304      	adds	r3, #4
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	60da      	str	r2, [r3, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	3204      	adds	r2, #4
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1d1a      	adds	r2, r3, #4
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	609a      	str	r2, [r3, #8]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1e:	0013      	movs	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	189b      	adds	r3, r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4a16      	ldr	r2, [pc, #88]	; (8005a80 <xTaskPriorityInherit+0x118>)
 8005a28:	189a      	adds	r2, r3, r2
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	615a      	str	r2, [r3, #20]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4913      	ldr	r1, [pc, #76]	; (8005a80 <xTaskPriorityInherit+0x118>)
 8005a34:	0013      	movs	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	189b      	adds	r3, r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	585b      	ldr	r3, [r3, r1]
 8005a3e:	1c58      	adds	r0, r3, #1
 8005a40:	490f      	ldr	r1, [pc, #60]	; (8005a80 <xTaskPriorityInherit+0x118>)
 8005a42:	0013      	movs	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	189b      	adds	r3, r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	5058      	str	r0, [r3, r1]
 8005a4c:	e004      	b.n	8005a58 <xTaskPriorityInherit+0xf0>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <xTaskPriorityInherit+0x114>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e008      	b.n	8005a70 <xTaskPriorityInherit+0x108>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a62:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <xTaskPriorityInherit+0x114>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d201      	bcs.n	8005a70 <xTaskPriorityInherit+0x108>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005a70:	697b      	ldr	r3, [r7, #20]
    }
 8005a72:	0018      	movs	r0, r3
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b006      	add	sp, #24
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	20000264 	.word	0x20000264
 8005a80:	20000268 	.word	0x20000268
 8005a84:	20000344 	.word	0x20000344

08005a88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d06a      	beq.n	8005b74 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005a9e:	4b38      	ldr	r3, [pc, #224]	; (8005b80 <xTaskPriorityDisinherit+0xf8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d001      	beq.n	8005aac <xTaskPriorityDisinherit+0x24>
 8005aa8:	b672      	cpsid	i
 8005aaa:	e7fe      	b.n	8005aaa <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <xTaskPriorityDisinherit+0x30>
 8005ab4:	b672      	cpsid	i
 8005ab6:	e7fe      	b.n	8005ab6 <xTaskPriorityDisinherit+0x2e>
            ( pxTCB->uxMutexesHeld )--;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abc:	1e5a      	subs	r2, r3, #1
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d052      	beq.n	8005b74 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d14e      	bne.n	8005b74 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	0018      	movs	r0, r3
 8005adc:	f7fe fb91 	bl	8004202 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	2205      	movs	r2, #5
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af8:	4b22      	ldr	r3, [pc, #136]	; (8005b84 <xTaskPriorityDisinherit+0xfc>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d903      	bls.n	8005b08 <xTaskPriorityDisinherit+0x80>
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	4b1f      	ldr	r3, [pc, #124]	; (8005b84 <xTaskPriorityDisinherit+0xfc>)
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0c:	491e      	ldr	r1, [pc, #120]	; (8005b88 <xTaskPriorityDisinherit+0x100>)
 8005b0e:	0013      	movs	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	189b      	adds	r3, r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	18cb      	adds	r3, r1, r3
 8005b18:	3304      	adds	r3, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	609a      	str	r2, [r3, #8]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	60da      	str	r2, [r3, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	3204      	adds	r2, #4
 8005b34:	605a      	str	r2, [r3, #4]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1d1a      	adds	r2, r3, #4
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	609a      	str	r2, [r3, #8]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b42:	0013      	movs	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4a0f      	ldr	r2, [pc, #60]	; (8005b88 <xTaskPriorityDisinherit+0x100>)
 8005b4c:	189a      	adds	r2, r3, r2
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	615a      	str	r2, [r3, #20]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b56:	490c      	ldr	r1, [pc, #48]	; (8005b88 <xTaskPriorityDisinherit+0x100>)
 8005b58:	0013      	movs	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	189b      	adds	r3, r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	585b      	ldr	r3, [r3, r1]
 8005b62:	1c58      	adds	r0, r3, #1
 8005b64:	4908      	ldr	r1, [pc, #32]	; (8005b88 <xTaskPriorityDisinherit+0x100>)
 8005b66:	0013      	movs	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	189b      	adds	r3, r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005b70:	2301      	movs	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005b74:	697b      	ldr	r3, [r7, #20]
    }
 8005b76:	0018      	movs	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b006      	add	sp, #24
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	20000264 	.word	0x20000264
 8005b84:	20000344 	.word	0x20000344
 8005b88:	20000268 	.word	0x20000268

08005b8c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d100      	bne.n	8005ba6 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 8005ba4:	e07e      	b.n	8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x118>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <vTaskPriorityDisinheritAfterTimeout+0x26>
 8005bae:	b672      	cpsid	i
 8005bb0:	e7fe      	b.n	8005bb0 <vTaskPriorityDisinheritAfterTimeout+0x24>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d902      	bls.n	8005bc2 <vTaskPriorityDisinheritAfterTimeout+0x36>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	e002      	b.n	8005bc8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc6:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d068      	beq.n	8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x118>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d163      	bne.n	8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x118>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005bdc:	4b33      	ldr	r3, [pc, #204]	; (8005cac <vTaskPriorityDisinheritAfterTimeout+0x120>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d101      	bne.n	8005bea <vTaskPriorityDisinheritAfterTimeout+0x5e>
 8005be6:	b672      	cpsid	i
 8005be8:	e7fe      	b.n	8005be8 <vTaskPriorityDisinheritAfterTimeout+0x5c>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	db04      	blt.n	8005c08 <vTaskPriorityDisinheritAfterTimeout+0x7c>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2205      	movs	r2, #5
 8005c02:	1ad2      	subs	r2, r2, r3
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	6959      	ldr	r1, [r3, #20]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	0013      	movs	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8005c18:	189b      	adds	r3, r3, r2
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	d142      	bne.n	8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x118>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	3304      	adds	r3, #4
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7fe faed 	bl	8004202 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2c:	4b21      	ldr	r3, [pc, #132]	; (8005cb4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d903      	bls.n	8005c3c <vTaskPriorityDisinheritAfterTimeout+0xb0>
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c38:	4b1e      	ldr	r3, [pc, #120]	; (8005cb4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	491b      	ldr	r1, [pc, #108]	; (8005cb0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8005c42:	0013      	movs	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	189b      	adds	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	18cb      	adds	r3, r1, r3
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	609a      	str	r2, [r3, #8]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	60da      	str	r2, [r3, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	3204      	adds	r2, #4
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	1d1a      	adds	r2, r3, #4
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	609a      	str	r2, [r3, #8]
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c76:	0013      	movs	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4a0c      	ldr	r2, [pc, #48]	; (8005cb0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8005c80:	189a      	adds	r2, r3, r2
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	615a      	str	r2, [r3, #20]
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8a:	4909      	ldr	r1, [pc, #36]	; (8005cb0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8005c8c:	0013      	movs	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	189b      	adds	r3, r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	585b      	ldr	r3, [r3, r1]
 8005c96:	1c58      	adds	r0, r3, #1
 8005c98:	4905      	ldr	r1, [pc, #20]	; (8005cb0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8005c9a:	0013      	movs	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	189b      	adds	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	5058      	str	r0, [r3, r1]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005ca4:	46c0      	nop			; (mov r8, r8)
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b008      	add	sp, #32
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20000264 	.word	0x20000264
 8005cb0:	20000268 	.word	0x20000268
 8005cb4:	20000344 	.word	0x20000344

08005cb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <pvTaskIncrementMutexHeldCount+0x20>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005cc4:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <pvTaskIncrementMutexHeldCount+0x20>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cca:	3201      	adds	r2, #1
 8005ccc:	649a      	str	r2, [r3, #72]	; 0x48
        }

        return pxCurrentTCB;
 8005cce:	4b02      	ldr	r3, [pc, #8]	; (8005cd8 <pvTaskIncrementMutexHeldCount+0x20>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
    }
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	20000264 	.word	0x20000264

08005cdc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005ce6:	4b2e      	ldr	r3, [pc, #184]	; (8005da0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cec:	4b2d      	ldr	r3, [pc, #180]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f7fe fa85 	bl	8004202 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	d124      	bne.n	8005d48 <prvAddCurrentTaskToDelayedList+0x6c>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d021      	beq.n	8005d48 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d04:	4b28      	ldr	r3, [pc, #160]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	4b26      	ldr	r3, [pc, #152]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	609a      	str	r2, [r3, #8]
 8005d12:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	6892      	ldr	r2, [r2, #8]
 8005d1a:	60da      	str	r2, [r3, #12]
 8005d1c:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	3204      	adds	r2, #4
 8005d26:	605a      	str	r2, [r3, #4]
 8005d28:	4b1e      	ldr	r3, [pc, #120]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	1d1a      	adds	r2, r3, #4
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	609a      	str	r2, [r3, #8]
 8005d32:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1c      	ldr	r2, [pc, #112]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005d38:	615a      	str	r2, [r3, #20]
 8005d3a:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	4b19      	ldr	r3, [pc, #100]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005d46:	e026      	b.n	8005d96 <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	18d3      	adds	r3, r2, r3
 8005d4e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d50:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d209      	bcs.n	8005d74 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d60:	4b12      	ldr	r3, [pc, #72]	; (8005dac <prvAddCurrentTaskToDelayedList+0xd0>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	0019      	movs	r1, r3
 8005d6c:	0010      	movs	r0, r2
 8005d6e:	f7fe fa12 	bl	8004196 <vListInsert>
}
 8005d72:	e010      	b.n	8005d96 <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d74:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	0019      	movs	r1, r3
 8005d80:	0010      	movs	r0, r2
 8005d82:	f7fe fa08 	bl	8004196 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d202      	bcs.n	8005d96 <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8005d90:	4b08      	ldr	r3, [pc, #32]	; (8005db4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	b006      	add	sp, #24
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	46c0      	nop			; (mov r8, r8)
 8005da0:	20000340 	.word	0x20000340
 8005da4:	20000264 	.word	0x20000264
 8005da8:	20000328 	.word	0x20000328
 8005dac:	200002f8 	.word	0x200002f8
 8005db0:	200002f4 	.word	0x200002f4
 8005db4:	2000035c 	.word	0x2000035c

08005db8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005dc2:	f000 fa2d 	bl	8006220 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <xTimerCreateTimerTask+0x44>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005dce:	490c      	ldr	r1, [pc, #48]	; (8005e00 <xTimerCreateTimerTask+0x48>)
 8005dd0:	480c      	ldr	r0, [pc, #48]	; (8005e04 <xTimerCreateTimerTask+0x4c>)
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <xTimerCreateTimerTask+0x50>)
 8005dd4:	9301      	str	r3, [sp, #4]
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2250      	movs	r2, #80	; 0x50
 8005dde:	f7fe ff3e 	bl	8004c5e <xTaskCreate>
 8005de2:	0003      	movs	r3, r0
 8005de4:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <xTimerCreateTimerTask+0x38>
 8005dec:	b672      	cpsid	i
 8005dee:	e7fe      	b.n	8005dee <xTimerCreateTimerTask+0x36>
        return xReturn;
 8005df0:	687b      	ldr	r3, [r7, #4]
    }
 8005df2:	0018      	movs	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b002      	add	sp, #8
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	20000398 	.word	0x20000398
 8005e00:	08006948 	.word	0x08006948
 8005e04:	08005eb5 	.word	0x08005eb5
 8005e08:	2000039c 	.word	0x2000039c

08005e0c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005e18:	e009      	b.n	8005e2e <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	18d3      	adds	r3, r2, r3
 8005e22:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	0010      	movs	r0, r2
 8005e2c:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	18d1      	adds	r1, r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 f8d8 	bl	8005ff0 <prvInsertTimerInActiveList>
 8005e40:	1e03      	subs	r3, r0, #0
 8005e42:	d1ea      	bne.n	8005e1a <prvReloadTimer+0xe>
        }
    }
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	b004      	add	sp, #16
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e5a:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <prvProcessExpiredTimer+0x60>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3304      	adds	r3, #4
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f7fe f9ca 	bl	8004202 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2228      	movs	r2, #40	; 0x28
 8005e72:	5c9b      	ldrb	r3, [r3, r2]
 8005e74:	001a      	movs	r2, r3
 8005e76:	2304      	movs	r3, #4
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d006      	beq.n	8005e8a <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	0018      	movs	r0, r3
 8005e84:	f7ff ffc2 	bl	8005e0c <prvReloadTimer>
 8005e88:	e008      	b.n	8005e9c <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2228      	movs	r2, #40	; 0x28
 8005e8e:	5c9b      	ldrb	r3, [r3, r2]
 8005e90:	2201      	movs	r2, #1
 8005e92:	4393      	bics	r3, r2
 8005e94:	b2d9      	uxtb	r1, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2228      	movs	r2, #40	; 0x28
 8005e9a:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	0010      	movs	r0, r2
 8005ea4:	4798      	blx	r3
    }
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b004      	add	sp, #16
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	20000390 	.word	0x20000390

08005eb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	18fb      	adds	r3, r7, r3
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f000 f853 	bl	8005f6c <prvGetNextExpireTime>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	0011      	movs	r1, r2
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f000 f803 	bl	8005edc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005ed6:	f000 f8cd 	bl	8006074 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eda:	e7ef      	b.n	8005ebc <prvTimerTask+0x8>

08005edc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005ee6:	f7ff f87d 	bl	8004fe4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eea:	2308      	movs	r3, #8
 8005eec:	18fb      	adds	r3, r7, r3
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 f85e 	bl	8005fb0 <prvSampleTimeNow>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d12b      	bne.n	8005f56 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10c      	bne.n	8005f1e <prvProcessTimerOrBlockTask+0x42>
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d808      	bhi.n	8005f1e <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8005f0c:	f7ff f876 	bl	8004ffc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0011      	movs	r1, r2
 8005f16:	0018      	movs	r0, r3
 8005f18:	f7ff ff9a 	bl	8005e50 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005f1c:	e01d      	b.n	8005f5a <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <prvProcessTimerOrBlockTask+0x88>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <prvProcessTimerOrBlockTask+0x56>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <prvProcessTimerOrBlockTask+0x58>
 8005f32:	2300      	movs	r3, #0
 8005f34:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <prvProcessTimerOrBlockTask+0x8c>)
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	0019      	movs	r1, r3
 8005f44:	f7fe fe58 	bl	8004bf8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005f48:	f7ff f858 	bl	8004ffc <xTaskResumeAll>
 8005f4c:	1e03      	subs	r3, r0, #0
 8005f4e:	d104      	bne.n	8005f5a <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8005f50:	f000 fa2e 	bl	80063b0 <vPortYield>
    }
 8005f54:	e001      	b.n	8005f5a <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8005f56:	f7ff f851 	bl	8004ffc <xTaskResumeAll>
    }
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b004      	add	sp, #16
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	20000394 	.word	0x20000394
 8005f68:	20000398 	.word	0x20000398

08005f6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f74:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <prvGetNextExpireTime+0x40>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <prvGetNextExpireTime+0x16>
 8005f7e:	2201      	movs	r2, #1
 8005f80:	e000      	b.n	8005f84 <prvGetNextExpireTime+0x18>
 8005f82:	2200      	movs	r2, #0
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d105      	bne.n	8005f9c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <prvGetNextExpireTime+0x40>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	e001      	b.n	8005fa0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
    }
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	b004      	add	sp, #16
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	20000390 	.word	0x20000390

08005fb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005fb8:	f7ff f908 	bl	80051cc <xTaskGetTickCount>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <prvSampleTimeNow+0x3c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d205      	bcs.n	8005fd6 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8005fca:	f000 f901 	bl	80061d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	e002      	b.n	8005fdc <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <prvSampleTimeNow+0x3c>)
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
    }
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	b004      	add	sp, #16
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	200003a0 	.word	0x200003a0

08005ff0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	429a      	cmp	r2, r3
 8006014:	d812      	bhi.n	800603c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	1ad2      	subs	r2, r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e01b      	b.n	8006062 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800602a:	4b10      	ldr	r3, [pc, #64]	; (800606c <prvInsertTimerInActiveList+0x7c>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3304      	adds	r3, #4
 8006032:	0019      	movs	r1, r3
 8006034:	0010      	movs	r0, r2
 8006036:	f7fe f8ae 	bl	8004196 <vListInsert>
 800603a:	e012      	b.n	8006062 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d206      	bcs.n	8006052 <prvInsertTimerInActiveList+0x62>
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d302      	bcc.n	8006052 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e007      	b.n	8006062 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <prvInsertTimerInActiveList+0x80>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3304      	adds	r3, #4
 800605a:	0019      	movs	r1, r3
 800605c:	0010      	movs	r0, r2
 800605e:	f7fe f89a 	bl	8004196 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006062:	697b      	ldr	r3, [r7, #20]
    }
 8006064:	0018      	movs	r0, r3
 8006066:	46bd      	mov	sp, r7
 8006068:	b006      	add	sp, #24
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20000394 	.word	0x20000394
 8006070:	20000390 	.word	0x20000390

08006074 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800607a:	e095      	b.n	80061a8 <prvProcessReceivedCommands+0x134>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800607c:	1d3b      	adds	r3, r7, #4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	da00      	bge.n	8006086 <prvProcessReceivedCommands+0x12>
 8006084:	e08f      	b.n	80061a6 <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006086:	1d3b      	adds	r3, r7, #4
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	3304      	adds	r3, #4
 8006098:	0018      	movs	r0, r3
 800609a:	f7fe f8b2 	bl	8004202 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800609e:	003b      	movs	r3, r7
 80060a0:	0018      	movs	r0, r3
 80060a2:	f7ff ff85 	bl	8005fb0 <prvSampleTimeNow>
 80060a6:	0003      	movs	r3, r0
 80060a8:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b09      	cmp	r3, #9
 80060b0:	d900      	bls.n	80060b4 <prvProcessReceivedCommands+0x40>
 80060b2:	e079      	b.n	80061a8 <prvProcessReceivedCommands+0x134>
 80060b4:	009a      	lsls	r2, r3, #2
 80060b6:	4b44      	ldr	r3, [pc, #272]	; (80061c8 <prvProcessReceivedCommands+0x154>)
 80060b8:	18d3      	adds	r3, r2, r3
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2228      	movs	r2, #40	; 0x28
 80060c2:	5c9b      	ldrb	r3, [r3, r2]
 80060c4:	2201      	movs	r2, #1
 80060c6:	4313      	orrs	r3, r2
 80060c8:	b2d9      	uxtb	r1, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2228      	movs	r2, #40	; 0x28
 80060ce:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060d0:	1d3b      	adds	r3, r7, #4
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	18d1      	adds	r1, r2, r3
 80060da:	1d3b      	adds	r3, r7, #4
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	6978      	ldr	r0, [r7, #20]
 80060e2:	f7ff ff85 	bl	8005ff0 <prvInsertTimerInActiveList>
 80060e6:	1e03      	subs	r3, r0, #0
 80060e8:	d05e      	beq.n	80061a8 <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2228      	movs	r2, #40	; 0x28
 80060ee:	5c9b      	ldrb	r3, [r3, r2]
 80060f0:	001a      	movs	r2, r3
 80060f2:	2304      	movs	r3, #4
 80060f4:	4013      	ands	r3, r2
 80060f6:	d00a      	beq.n	800610e <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80060f8:	1d3b      	adds	r3, r7, #4
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	18d1      	adds	r1, r2, r3
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	0018      	movs	r0, r3
 8006108:	f7ff fe80 	bl	8005e0c <prvReloadTimer>
 800610c:	e008      	b.n	8006120 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2228      	movs	r2, #40	; 0x28
 8006112:	5c9b      	ldrb	r3, [r3, r2]
 8006114:	2201      	movs	r2, #1
 8006116:	4393      	bics	r3, r2
 8006118:	b2d9      	uxtb	r1, r3
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2228      	movs	r2, #40	; 0x28
 800611e:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	0010      	movs	r0, r2
 8006128:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800612a:	e03d      	b.n	80061a8 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2228      	movs	r2, #40	; 0x28
 8006130:	5c9b      	ldrb	r3, [r3, r2]
 8006132:	2201      	movs	r2, #1
 8006134:	4393      	bics	r3, r2
 8006136:	b2d9      	uxtb	r1, r3
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2228      	movs	r2, #40	; 0x28
 800613c:	5499      	strb	r1, [r3, r2]
                        break;
 800613e:	e033      	b.n	80061a8 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2228      	movs	r2, #40	; 0x28
 8006144:	5c9b      	ldrb	r3, [r3, r2]
 8006146:	2201      	movs	r2, #1
 8006148:	4313      	orrs	r3, r2
 800614a:	b2d9      	uxtb	r1, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2228      	movs	r2, #40	; 0x28
 8006150:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <prvProcessReceivedCommands+0xf2>
 8006162:	b672      	cpsid	i
 8006164:	e7fe      	b.n	8006164 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	18d1      	adds	r1, r2, r3
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	6978      	ldr	r0, [r7, #20]
 8006174:	f7ff ff3c 	bl	8005ff0 <prvInsertTimerInActiveList>
                        break;
 8006178:	e016      	b.n	80061a8 <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2228      	movs	r2, #40	; 0x28
 800617e:	5c9b      	ldrb	r3, [r3, r2]
 8006180:	001a      	movs	r2, r3
 8006182:	2302      	movs	r3, #2
 8006184:	4013      	ands	r3, r2
 8006186:	d104      	bne.n	8006192 <prvProcessReceivedCommands+0x11e>
                            {
                                vPortFree( pxTimer );
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	0018      	movs	r0, r3
 800618c:	f000 fa60 	bl	8006650 <vPortFree>
 8006190:	e00a      	b.n	80061a8 <prvProcessReceivedCommands+0x134>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2228      	movs	r2, #40	; 0x28
 8006196:	5c9b      	ldrb	r3, [r3, r2]
 8006198:	2201      	movs	r2, #1
 800619a:	4393      	bics	r3, r2
 800619c:	b2d9      	uxtb	r1, r3
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2228      	movs	r2, #40	; 0x28
 80061a2:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80061a4:	e000      	b.n	80061a8 <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80061a6:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061a8:	4b08      	ldr	r3, [pc, #32]	; (80061cc <prvProcessReceivedCommands+0x158>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	1d39      	adds	r1, r7, #4
 80061ae:	2200      	movs	r2, #0
 80061b0:	0018      	movs	r0, r3
 80061b2:	f7fe fa20 	bl	80045f6 <xQueueReceive>
 80061b6:	1e03      	subs	r3, r0, #0
 80061b8:	d000      	beq.n	80061bc <prvProcessReceivedCommands+0x148>
 80061ba:	e75f      	b.n	800607c <prvProcessReceivedCommands+0x8>
        }
    }
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	46bd      	mov	sp, r7
 80061c2:	b006      	add	sp, #24
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	080069e0 	.word	0x080069e0
 80061cc:	20000398 	.word	0x20000398

080061d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061d6:	e00b      	b.n	80061f0 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <prvSwitchTimerLists+0x48>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80061e2:	2301      	movs	r3, #1
 80061e4:	425a      	negs	r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	0011      	movs	r1, r2
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7ff fe30 	bl	8005e50 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061f0:	4b09      	ldr	r3, [pc, #36]	; (8006218 <prvSwitchTimerLists+0x48>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ee      	bne.n	80061d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80061fa:	4b07      	ldr	r3, [pc, #28]	; (8006218 <prvSwitchTimerLists+0x48>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006200:	4b06      	ldr	r3, [pc, #24]	; (800621c <prvSwitchTimerLists+0x4c>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <prvSwitchTimerLists+0x48>)
 8006206:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <prvSwitchTimerLists+0x4c>)
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	601a      	str	r2, [r3, #0]
    }
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	46bd      	mov	sp, r7
 8006212:	b002      	add	sp, #8
 8006214:	bd80      	pop	{r7, pc}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	20000390 	.word	0x20000390
 800621c:	20000394 	.word	0x20000394

08006220 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006224:	f000 f8d4 	bl	80063d0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006228:	4b14      	ldr	r3, [pc, #80]	; (800627c <prvCheckForValidListAndQueue+0x5c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d120      	bne.n	8006272 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8006230:	4b13      	ldr	r3, [pc, #76]	; (8006280 <prvCheckForValidListAndQueue+0x60>)
 8006232:	0018      	movs	r0, r3
 8006234:	f7fd ff86 	bl	8004144 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006238:	4b12      	ldr	r3, [pc, #72]	; (8006284 <prvCheckForValidListAndQueue+0x64>)
 800623a:	0018      	movs	r0, r3
 800623c:	f7fd ff82 	bl	8004144 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006240:	4b11      	ldr	r3, [pc, #68]	; (8006288 <prvCheckForValidListAndQueue+0x68>)
 8006242:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <prvCheckForValidListAndQueue+0x60>)
 8006244:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006246:	4b11      	ldr	r3, [pc, #68]	; (800628c <prvCheckForValidListAndQueue+0x6c>)
 8006248:	4a0e      	ldr	r2, [pc, #56]	; (8006284 <prvCheckForValidListAndQueue+0x64>)
 800624a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800624c:	2200      	movs	r2, #0
 800624e:	210c      	movs	r1, #12
 8006250:	2005      	movs	r0, #5
 8006252:	f7fe f887 	bl	8004364 <xQueueGenericCreate>
 8006256:	0002      	movs	r2, r0
 8006258:	4b08      	ldr	r3, [pc, #32]	; (800627c <prvCheckForValidListAndQueue+0x5c>)
 800625a:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800625c:	4b07      	ldr	r3, [pc, #28]	; (800627c <prvCheckForValidListAndQueue+0x5c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d006      	beq.n	8006272 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <prvCheckForValidListAndQueue+0x5c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a09      	ldr	r2, [pc, #36]	; (8006290 <prvCheckForValidListAndQueue+0x70>)
 800626a:	0011      	movs	r1, r2
 800626c:	0018      	movs	r0, r3
 800626e:	f7fe fc7f 	bl	8004b70 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006272:	f000 f8bf 	bl	80063f4 <vPortExitCritical>
    }
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20000398 	.word	0x20000398
 8006280:	20000368 	.word	0x20000368
 8006284:	2000037c 	.word	0x2000037c
 8006288:	20000390 	.word	0x20000390
 800628c:	20000394 	.word	0x20000394
 8006290:	08006950 	.word	0x08006950

08006294 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3b04      	subs	r3, #4
 80062a4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2280      	movs	r2, #128	; 0x80
 80062aa:	0452      	lsls	r2, r2, #17
 80062ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3b04      	subs	r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3b04      	subs	r3, #4
 80062be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 80062c0:	4a08      	ldr	r2, [pc, #32]	; (80062e4 <pxPortInitialiseStack+0x50>)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3b14      	subs	r3, #20
 80062ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3b20      	subs	r3, #32
 80062d6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80062d8:	68fb      	ldr	r3, [r7, #12]
}
 80062da:	0018      	movs	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	b004      	add	sp, #16
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	080062e9 	.word	0x080062e9

080062e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80062f2:	4b08      	ldr	r3, [pc, #32]	; (8006314 <prvTaskExitError+0x2c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3301      	adds	r3, #1
 80062f8:	d001      	beq.n	80062fe <prvTaskExitError+0x16>
 80062fa:	b672      	cpsid	i
 80062fc:	e7fe      	b.n	80062fc <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 80062fe:	b672      	cpsid	i

    while( ulDummy == 0 )
 8006300:	46c0      	nop			; (mov r8, r8)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0fc      	beq.n	8006302 <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006308:	46c0      	nop			; (mov r8, r8)
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	46bd      	mov	sp, r7
 800630e:	b002      	add	sp, #8
 8006310:	bd80      	pop	{r7, pc}
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	20000010 	.word	0x20000010

08006318 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 800631c:	46c0      	nop			; (mov r8, r8)
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006330 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8006330:	4a0b      	ldr	r2, [pc, #44]	; (8006360 <pxCurrentTCBConst2>)
 8006332:	6813      	ldr	r3, [r2, #0]
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	3020      	adds	r0, #32
 8006338:	f380 8809 	msr	PSP, r0
 800633c:	2002      	movs	r0, #2
 800633e:	f380 8814 	msr	CONTROL, r0
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006348:	46ae      	mov	lr, r5
 800634a:	bc08      	pop	{r3}
 800634c:	bc04      	pop	{r2}
 800634e:	b662      	cpsie	i
 8006350:	4718      	bx	r3
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	46c0      	nop			; (mov r8, r8)
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	46c0      	nop			; (mov r8, r8)
 800635a:	46c0      	nop			; (mov r8, r8)
 800635c:	46c0      	nop			; (mov r8, r8)
 800635e:	46c0      	nop			; (mov r8, r8)

08006360 <pxCurrentTCBConst2>:
 8006360:	20000264 	.word	0x20000264
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8006364:	46c0      	nop			; (mov r8, r8)
 8006366:	46c0      	nop			; (mov r8, r8)

08006368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800636c:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <xPortStartScheduler+0x40>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <xPortStartScheduler+0x40>)
 8006372:	21ff      	movs	r1, #255	; 0xff
 8006374:	0409      	lsls	r1, r1, #16
 8006376:	430a      	orrs	r2, r1
 8006378:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <xPortStartScheduler+0x40>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <xPortStartScheduler+0x40>)
 8006380:	21ff      	movs	r1, #255	; 0xff
 8006382:	0609      	lsls	r1, r1, #24
 8006384:	430a      	orrs	r2, r1
 8006386:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006388:	f000 f898 	bl	80064bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <xPortStartScheduler+0x44>)
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8006392:	f7ff ffcd 	bl	8006330 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006396:	f7ff f833 	bl	8005400 <vTaskSwitchContext>
    prvTaskExitError();
 800639a:	f7ff ffa5 	bl	80062e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	0018      	movs	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	e000ed20 	.word	0xe000ed20
 80063ac:	20000010 	.word	0x20000010

080063b0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <vPortYield+0x1c>)
 80063b6:	2280      	movs	r2, #128	; 0x80
 80063b8:	0552      	lsls	r2, r2, #21
 80063ba:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80063bc:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80063c0:	f3bf 8f6f 	isb	sy
}
 80063c4:	46c0      	nop			; (mov r8, r8)
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	e000ed04 	.word	0xe000ed04

080063d0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80063d4:	b672      	cpsid	i
    uxCriticalNesting++;
 80063d6:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <vPortEnterCritical+0x20>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <vPortEnterCritical+0x20>)
 80063de:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 80063e0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80063e4:	f3bf 8f6f 	isb	sy
}
 80063e8:	46c0      	nop			; (mov r8, r8)
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	20000010 	.word	0x20000010

080063f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80063f8:	4b09      	ldr	r3, [pc, #36]	; (8006420 <vPortExitCritical+0x2c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <vPortExitCritical+0x10>
 8006400:	b672      	cpsid	i
 8006402:	e7fe      	b.n	8006402 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <vPortExitCritical+0x2c>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	1e5a      	subs	r2, r3, #1
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <vPortExitCritical+0x2c>)
 800640c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 800640e:	4b04      	ldr	r3, [pc, #16]	; (8006420 <vPortExitCritical+0x2c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d100      	bne.n	8006418 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006416:	b662      	cpsie	i
    }
}
 8006418:	46c0      	nop			; (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	20000010 	.word	0x20000010

08006424 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8006424:	f3ef 8010 	mrs	r0, PRIMASK
 8006428:	b672      	cpsid	i
 800642a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800642c:	46c0      	nop			; (mov r8, r8)
 800642e:	0018      	movs	r0, r3

08006430 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8006430:	f380 8810 	msr	PRIMASK, r0
 8006434:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8006436:	46c0      	nop			; (mov r8, r8)
	...

08006440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006440:	f3ef 8009 	mrs	r0, PSP
 8006444:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <pxCurrentTCBConst>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	3820      	subs	r0, #32
 800644a:	6010      	str	r0, [r2, #0]
 800644c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800644e:	4644      	mov	r4, r8
 8006450:	464d      	mov	r5, r9
 8006452:	4656      	mov	r6, sl
 8006454:	465f      	mov	r7, fp
 8006456:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006458:	b508      	push	{r3, lr}
 800645a:	b672      	cpsid	i
 800645c:	f7fe ffd0 	bl	8005400 <vTaskSwitchContext>
 8006460:	b662      	cpsie	i
 8006462:	bc0c      	pop	{r2, r3}
 8006464:	6811      	ldr	r1, [r2, #0]
 8006466:	6808      	ldr	r0, [r1, #0]
 8006468:	3010      	adds	r0, #16
 800646a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800646c:	46a0      	mov	r8, r4
 800646e:	46a9      	mov	r9, r5
 8006470:	46b2      	mov	sl, r6
 8006472:	46bb      	mov	fp, r7
 8006474:	f380 8809 	msr	PSP, r0
 8006478:	3820      	subs	r0, #32
 800647a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800647c:	4718      	bx	r3
 800647e:	46c0      	nop			; (mov r8, r8)

08006480 <pxCurrentTCBConst>:
 8006480:	20000264 	.word	0x20000264
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8006484:	46c0      	nop			; (mov r8, r8)
 8006486:	46c0      	nop			; (mov r8, r8)

08006488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800648e:	f7ff ffc9 	bl	8006424 <ulSetInterruptMaskFromISR>
 8006492:	0003      	movs	r3, r0
 8006494:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006496:	f7fe fea7 	bl	80051e8 <xTaskIncrementTick>
 800649a:	1e03      	subs	r3, r0, #0
 800649c:	d003      	beq.n	80064a6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800649e:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <SysTick_Handler+0x30>)
 80064a0:	2280      	movs	r2, #128	; 0x80
 80064a2:	0552      	lsls	r2, r2, #21
 80064a4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	0018      	movs	r0, r3
 80064aa:	f7ff ffc1 	bl	8006430 <vClearInterruptMaskFromISR>
}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b002      	add	sp, #8
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <vPortSetupTimerInterrupt+0x38>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <vPortSetupTimerInterrupt+0x3c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	22fa      	movs	r2, #250	; 0xfa
 80064d2:	0091      	lsls	r1, r2, #2
 80064d4:	0018      	movs	r0, r3
 80064d6:	f7f9 fe17 	bl	8000108 <__udivsi3>
 80064da:	0003      	movs	r3, r0
 80064dc:	001a      	movs	r2, r3
 80064de:	4b07      	ldr	r3, [pc, #28]	; (80064fc <vPortSetupTimerInterrupt+0x40>)
 80064e0:	3a01      	subs	r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064e4:	4b02      	ldr	r3, [pc, #8]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064e6:	2207      	movs	r2, #7
 80064e8:	601a      	str	r2, [r3, #0]
}
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	e000e010 	.word	0xe000e010
 80064f4:	e000e018 	.word	0xe000e018
 80064f8:	20000000 	.word	0x20000000
 80064fc:	e000e014 	.word	0xe000e014

08006500 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800650c:	f7fe fd6a 	bl	8004fe4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006510:	4b4a      	ldr	r3, [pc, #296]	; (800663c <pvPortMalloc+0x13c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006518:	f000 f8e6 	bl	80066e8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d012      	beq.n	8006548 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006522:	2208      	movs	r2, #8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2107      	movs	r1, #7
 8006528:	400b      	ands	r3, r1
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	3308      	adds	r3, #8
 800652e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	43db      	mvns	r3, r3
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	d804      	bhi.n	8006544 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	18d3      	adds	r3, r2, r3
 8006540:	607b      	str	r3, [r7, #4]
 8006542:	e001      	b.n	8006548 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	db68      	blt.n	8006620 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d065      	beq.n	8006620 <pvPortMalloc+0x120>
 8006554:	4b3a      	ldr	r3, [pc, #232]	; (8006640 <pvPortMalloc+0x140>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	429a      	cmp	r2, r3
 800655c:	d860      	bhi.n	8006620 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800655e:	4b39      	ldr	r3, [pc, #228]	; (8006644 <pvPortMalloc+0x144>)
 8006560:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8006562:	4b38      	ldr	r3, [pc, #224]	; (8006644 <pvPortMalloc+0x144>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006568:	e004      	b.n	8006574 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	429a      	cmp	r2, r3
 800657c:	d903      	bls.n	8006586 <pvPortMalloc+0x86>
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f1      	bne.n	800656a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006586:	4b2d      	ldr	r3, [pc, #180]	; (800663c <pvPortMalloc+0x13c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	429a      	cmp	r2, r3
 800658e:	d047      	beq.n	8006620 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2208      	movs	r2, #8
 8006596:	189b      	adds	r3, r3, r2
 8006598:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	1ad2      	subs	r2, r2, r3
 80065aa:	2308      	movs	r3, #8
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d916      	bls.n	80065e0 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	18d3      	adds	r3, r2, r3
 80065b8:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2207      	movs	r2, #7
 80065be:	4013      	ands	r3, r2
 80065c0:	d001      	beq.n	80065c6 <pvPortMalloc+0xc6>
 80065c2:	b672      	cpsid	i
 80065c4:	e7fe      	b.n	80065c4 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	1ad2      	subs	r2, r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	0018      	movs	r0, r3
 80065dc:	f000 f8de 	bl	800679c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065e0:	4b17      	ldr	r3, [pc, #92]	; (8006640 <pvPortMalloc+0x140>)
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	1ad2      	subs	r2, r2, r3
 80065ea:	4b15      	ldr	r3, [pc, #84]	; (8006640 <pvPortMalloc+0x140>)
 80065ec:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065ee:	4b14      	ldr	r3, [pc, #80]	; (8006640 <pvPortMalloc+0x140>)
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b15      	ldr	r3, [pc, #84]	; (8006648 <pvPortMalloc+0x148>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d203      	bcs.n	8006602 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065fa:	4b11      	ldr	r3, [pc, #68]	; (8006640 <pvPortMalloc+0x140>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b12      	ldr	r3, [pc, #72]	; (8006648 <pvPortMalloc+0x148>)
 8006600:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2280      	movs	r2, #128	; 0x80
 8006608:	0612      	lsls	r2, r2, #24
 800660a:	431a      	orrs	r2, r3
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006616:	4b0d      	ldr	r3, [pc, #52]	; (800664c <pvPortMalloc+0x14c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	4b0b      	ldr	r3, [pc, #44]	; (800664c <pvPortMalloc+0x14c>)
 800661e:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006620:	f7fe fcec 	bl	8004ffc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2207      	movs	r2, #7
 8006628:	4013      	ands	r3, r2
 800662a:	d001      	beq.n	8006630 <pvPortMalloc+0x130>
 800662c:	b672      	cpsid	i
 800662e:	e7fe      	b.n	800662e <pvPortMalloc+0x12e>
    return pvReturn;
 8006630:	697b      	ldr	r3, [r7, #20]
}
 8006632:	0018      	movs	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	b008      	add	sp, #32
 8006638:	bd80      	pop	{r7, pc}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	20001d10 	.word	0x20001d10
 8006640:	20001d14 	.word	0x20001d14
 8006644:	20001d08 	.word	0x20001d08
 8006648:	20001d18 	.word	0x20001d18
 800664c:	20001d1c 	.word	0x20001d1c

08006650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d039      	beq.n	80066d6 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006662:	2308      	movs	r3, #8
 8006664:	425b      	negs	r3, r3
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	18d3      	adds	r3, r2, r3
 800666a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	db01      	blt.n	800667c <vPortFree+0x2c>
 8006678:	b672      	cpsid	i
 800667a:	e7fe      	b.n	800667a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <vPortFree+0x38>
 8006684:	b672      	cpsid	i
 8006686:	e7fe      	b.n	8006686 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	0fdb      	lsrs	r3, r3, #31
 800668e:	1c1a      	adds	r2, r3, #0
 8006690:	2301      	movs	r3, #1
 8006692:	4013      	ands	r3, r2
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01d      	beq.n	80066d6 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d119      	bne.n	80066d6 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	085a      	lsrs	r2, r3, #1
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80066ae:	f7fe fc99 	bl	8004fe4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <vPortFree+0x90>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	18d2      	adds	r2, r2, r3
 80066bc:	4b08      	ldr	r3, [pc, #32]	; (80066e0 <vPortFree+0x90>)
 80066be:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	0018      	movs	r0, r3
 80066c4:	f000 f86a 	bl	800679c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80066c8:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <vPortFree+0x94>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <vPortFree+0x94>)
 80066d0:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 80066d2:	f7fe fc93 	bl	8004ffc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	46bd      	mov	sp, r7
 80066da:	b004      	add	sp, #16
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	20001d14 	.word	0x20001d14
 80066e4:	20001d20 	.word	0x20001d20

080066e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066ee:	4b25      	ldr	r3, [pc, #148]	; (8006784 <prvHeapInit+0x9c>)
 80066f0:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80066f2:	4b25      	ldr	r3, [pc, #148]	; (8006788 <prvHeapInit+0xa0>)
 80066f4:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2207      	movs	r2, #7
 80066fa:	4013      	ands	r3, r2
 80066fc:	d00c      	beq.n	8006718 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3307      	adds	r3, #7
 8006702:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2207      	movs	r2, #7
 8006708:	4393      	bics	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1ad2      	subs	r2, r2, r3
 8006712:	4b1d      	ldr	r3, [pc, #116]	; (8006788 <prvHeapInit+0xa0>)
 8006714:	18d3      	adds	r3, r2, r3
 8006716:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800671c:	4b1b      	ldr	r3, [pc, #108]	; (800678c <prvHeapInit+0xa4>)
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006722:	4b1a      	ldr	r3, [pc, #104]	; (800678c <prvHeapInit+0xa4>)
 8006724:	2200      	movs	r2, #0
 8006726:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	18d3      	adds	r3, r2, r3
 800672e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006730:	2208      	movs	r2, #8
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2207      	movs	r2, #7
 800673c:	4393      	bics	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4b13      	ldr	r3, [pc, #76]	; (8006790 <prvHeapInit+0xa8>)
 8006744:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8006746:	4b12      	ldr	r3, [pc, #72]	; (8006790 <prvHeapInit+0xa8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2200      	movs	r2, #0
 800674c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800674e:	4b10      	ldr	r3, [pc, #64]	; (8006790 <prvHeapInit+0xa8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <prvHeapInit+0xa8>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	4b08      	ldr	r3, [pc, #32]	; (8006794 <prvHeapInit+0xac>)
 8006772:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	4b07      	ldr	r3, [pc, #28]	; (8006798 <prvHeapInit+0xb0>)
 800677a:	601a      	str	r2, [r3, #0]
}
 800677c:	46c0      	nop			; (mov r8, r8)
 800677e:	46bd      	mov	sp, r7
 8006780:	b004      	add	sp, #16
 8006782:	bd80      	pop	{r7, pc}
 8006784:	00001964 	.word	0x00001964
 8006788:	200003a4 	.word	0x200003a4
 800678c:	20001d08 	.word	0x20001d08
 8006790:	20001d10 	.word	0x20001d10
 8006794:	20001d18 	.word	0x20001d18
 8006798:	20001d14 	.word	0x20001d14

0800679c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067a4:	4b27      	ldr	r3, [pc, #156]	; (8006844 <prvInsertBlockIntoFreeList+0xa8>)
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e002      	b.n	80067b0 <prvInsertBlockIntoFreeList+0x14>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d8f7      	bhi.n	80067aa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	18d3      	adds	r3, r2, r3
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d108      	bne.n	80067de <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	18d2      	adds	r2, r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	18d2      	adds	r2, r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d118      	bne.n	8006824 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	4b14      	ldr	r3, [pc, #80]	; (8006848 <prvInsertBlockIntoFreeList+0xac>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d00d      	beq.n	800681a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	18d2      	adds	r2, r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	e008      	b.n	800682c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800681a:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <prvInsertBlockIntoFreeList+0xac>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e003      	b.n	800682c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d002      	beq.n	800683a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800683a:	46c0      	nop			; (mov r8, r8)
 800683c:	46bd      	mov	sp, r7
 800683e:	b004      	add	sp, #16
 8006840:	bd80      	pop	{r7, pc}
 8006842:	46c0      	nop			; (mov r8, r8)
 8006844:	20001d08 	.word	0x20001d08
 8006848:	20001d10 	.word	0x20001d10

0800684c <__libc_init_array>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	2600      	movs	r6, #0
 8006850:	4d0c      	ldr	r5, [pc, #48]	; (8006884 <__libc_init_array+0x38>)
 8006852:	4c0d      	ldr	r4, [pc, #52]	; (8006888 <__libc_init_array+0x3c>)
 8006854:	1b64      	subs	r4, r4, r5
 8006856:	10a4      	asrs	r4, r4, #2
 8006858:	42a6      	cmp	r6, r4
 800685a:	d109      	bne.n	8006870 <__libc_init_array+0x24>
 800685c:	2600      	movs	r6, #0
 800685e:	f000 f82b 	bl	80068b8 <_init>
 8006862:	4d0a      	ldr	r5, [pc, #40]	; (800688c <__libc_init_array+0x40>)
 8006864:	4c0a      	ldr	r4, [pc, #40]	; (8006890 <__libc_init_array+0x44>)
 8006866:	1b64      	subs	r4, r4, r5
 8006868:	10a4      	asrs	r4, r4, #2
 800686a:	42a6      	cmp	r6, r4
 800686c:	d105      	bne.n	800687a <__libc_init_array+0x2e>
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	00b3      	lsls	r3, r6, #2
 8006872:	58eb      	ldr	r3, [r5, r3]
 8006874:	4798      	blx	r3
 8006876:	3601      	adds	r6, #1
 8006878:	e7ee      	b.n	8006858 <__libc_init_array+0xc>
 800687a:	00b3      	lsls	r3, r6, #2
 800687c:	58eb      	ldr	r3, [r5, r3]
 800687e:	4798      	blx	r3
 8006880:	3601      	adds	r6, #1
 8006882:	e7f2      	b.n	800686a <__libc_init_array+0x1e>
 8006884:	08006a08 	.word	0x08006a08
 8006888:	08006a08 	.word	0x08006a08
 800688c:	08006a08 	.word	0x08006a08
 8006890:	08006a0c 	.word	0x08006a0c

08006894 <memcpy>:
 8006894:	2300      	movs	r3, #0
 8006896:	b510      	push	{r4, lr}
 8006898:	429a      	cmp	r2, r3
 800689a:	d100      	bne.n	800689e <memcpy+0xa>
 800689c:	bd10      	pop	{r4, pc}
 800689e:	5ccc      	ldrb	r4, [r1, r3]
 80068a0:	54c4      	strb	r4, [r0, r3]
 80068a2:	3301      	adds	r3, #1
 80068a4:	e7f8      	b.n	8006898 <memcpy+0x4>

080068a6 <memset>:
 80068a6:	0003      	movs	r3, r0
 80068a8:	1882      	adds	r2, r0, r2
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d100      	bne.n	80068b0 <memset+0xa>
 80068ae:	4770      	bx	lr
 80068b0:	7019      	strb	r1, [r3, #0]
 80068b2:	3301      	adds	r3, #1
 80068b4:	e7f9      	b.n	80068aa <memset+0x4>
	...

080068b8 <_init>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068be:	bc08      	pop	{r3}
 80068c0:	469e      	mov	lr, r3
 80068c2:	4770      	bx	lr

080068c4 <_fini>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ca:	bc08      	pop	{r3}
 80068cc:	469e      	mov	lr, r3
 80068ce:	4770      	bx	lr


Concurrency_async.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f4  080054f4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080054f4  080054f4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054f4  080054f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f4  080054f4  000154f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080054fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c08  20000014  08005510  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c1c  08005510  00021c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015199  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f8d  00000000  00000000  000351d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00038168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  000393e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a33  00000000  00000000  0003a540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cd8  00000000  00000000  00051f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000973d2  00000000  00000000  00067c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff01d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  000ff070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005388 	.word	0x08005388

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08005388 	.word	0x08005388

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040a:	f000 fb0b 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040e:	f000 f849 	bl	80004a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000412:	f000 f8dd 	bl	80005d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000416:	f000 f88d 	bl	8000534 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xMutex = xSemaphoreCreateMutex();
 800041a:	2001      	movs	r0, #1
 800041c:	f002 fd73 	bl	8002f06 <xQueueCreateMutex>
 8000420:	0002      	movs	r2, r0
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <main+0x88>)
 8000424:	601a      	str	r2, [r3, #0]
  yMutex = xSemaphoreCreateMutex();
 8000426:	2001      	movs	r0, #1
 8000428:	f002 fd6d 	bl	8002f06 <xQueueCreateMutex>
 800042c:	0002      	movs	r2, r0
 800042e:	4b18      	ldr	r3, [pc, #96]	; (8000490 <main+0x8c>)
 8000430:	601a      	str	r2, [r3, #0]


if(xMutex!= NULL)
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <main+0x88>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d00d      	beq.n	8000456 <main+0x52>
{
  char *str = "Mutex Created\r\n\n";
 800043a:	4b16      	ldr	r3, [pc, #88]	; (8000494 <main+0x90>)
 800043c:	607b      	str	r3, [r7, #4]
  	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str),HAL_MAX_DELAY);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff fe61 	bl	8000108 <strlen>
 8000446:	0003      	movs	r3, r0
 8000448:	b29a      	uxth	r2, r3
 800044a:	2301      	movs	r3, #1
 800044c:	425b      	negs	r3, r3
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	4811      	ldr	r0, [pc, #68]	; (8000498 <main+0x94>)
 8000452:	f001 fe85 	bl	8002160 <HAL_UART_Transmit>
}
xTaskCreate(First_Task, "Task-1" ,200, NULL, 1, NULL);
 8000456:	4911      	ldr	r1, [pc, #68]	; (800049c <main+0x98>)
 8000458:	4811      	ldr	r0, [pc, #68]	; (80004a0 <main+0x9c>)
 800045a:	2300      	movs	r3, #0
 800045c:	9301      	str	r3, [sp, #4]
 800045e:	2301      	movs	r3, #1
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2300      	movs	r3, #0
 8000464:	22c8      	movs	r2, #200	; 0xc8
 8000466:	f003 f962 	bl	800372e <xTaskCreate>
// xTaskCreate (Second_Task, "Task-2", 200, NULL, 2, NULL);
vTaskStartScheduler();
 800046a:	f003 fae3 	bl	8003a34 <vTaskStartScheduler>

xSemaphoreGive(xMutex);
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <main+0x88>)
 8000470:	6818      	ldr	r0, [r3, #0]
 8000472:	2300      	movs	r3, #0
 8000474:	2200      	movs	r2, #0
 8000476:	2100      	movs	r1, #0
 8000478:	f002 fd61 	bl	8002f3e <xQueueGenericSend>
xSemaphoreGive(yMutex);
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <main+0x8c>)
 800047e:	6818      	ldr	r0, [r3, #0]
 8000480:	2300      	movs	r3, #0
 8000482:	2200      	movs	r2, #0
 8000484:	2100      	movs	r1, #0
 8000486:	f002 fd5a 	bl	8002f3e <xQueueGenericSend>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048a:	e7fe      	b.n	800048a <main+0x86>
 800048c:	200000c4 	.word	0x200000c4
 8000490:	200000c8 	.word	0x200000c8
 8000494:	080053a0 	.word	0x080053a0
 8000498:	20000030 	.word	0x20000030
 800049c:	080053b4 	.word	0x080053b4
 80004a0:	0800062d 	.word	0x0800062d

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b093      	sub	sp, #76	; 0x4c
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	2414      	movs	r4, #20
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	0018      	movs	r0, r3
 80004b0:	2334      	movs	r3, #52	; 0x34
 80004b2:	001a      	movs	r2, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	f004 ff5e 	bl	8005376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	0018      	movs	r0, r3
 80004be:	2310      	movs	r3, #16
 80004c0:	001a      	movs	r2, r3
 80004c2:	2100      	movs	r1, #0
 80004c4:	f004 ff57 	bl	8005376 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fcf7 	bl	8000ec0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2202      	movs	r2, #2
 80004d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2280      	movs	r2, #128	; 0x80
 80004dc:	0052      	lsls	r2, r2, #1
 80004de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2240      	movs	r2, #64	; 0x40
 80004ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 fd2f 	bl	8000f58 <HAL_RCC_OscConfig>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004fe:	f000 f941 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2207      	movs	r2, #7
 8000506:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2100      	movs	r1, #0
 800051e:	0018      	movs	r0, r3
 8000520:	f001 f82a 	bl	8001578 <HAL_RCC_ClockConfig>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000528:	f000 f92c 	bl	8000784 <Error_Handler>
  }
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	b013      	add	sp, #76	; 0x4c
 8000532:	bd90      	pop	{r4, r7, pc}

08000534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 800053a:	4a24      	ldr	r2, [pc, #144]	; (80005cc <MX_USART2_UART_Init+0x98>)
 800053c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 8000540:	22e1      	movs	r2, #225	; 0xe1
 8000542:	0252      	lsls	r2, r2, #9
 8000544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 800055a:	220c      	movs	r2, #12
 800055c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 8000578:	2200      	movs	r2, #0
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 800057e:	0018      	movs	r0, r3
 8000580:	f001 fd98 	bl	80020b4 <HAL_UART_Init>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000588:	f000 f8fc 	bl	8000784 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 800058e:	2100      	movs	r1, #0
 8000590:	0018      	movs	r0, r3
 8000592:	f002 fa29 	bl	80029e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800059a:	f000 f8f3 	bl	8000784 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 80005a0:	2100      	movs	r1, #0
 80005a2:	0018      	movs	r0, r3
 80005a4:	f002 fa60 	bl	8002a68 <HAL_UARTEx_SetRxFifoThreshold>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80005ac:	f000 f8ea 	bl	8000784 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <MX_USART2_UART_Init+0x94>)
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 f9de 	bl	8002974 <HAL_UARTEx_DisableFifoMode>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80005bc:	f000 f8e2 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	20000030 	.word	0x20000030
 80005cc:	40004400 	.word	0x40004400

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_GPIO_Init+0x58>)
 80005d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_GPIO_Init+0x58>)
 80005dc:	2104      	movs	r1, #4
 80005de:	430a      	orrs	r2, r1
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_GPIO_Init+0x58>)
 80005e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005e6:	2204      	movs	r2, #4
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_GPIO_Init+0x58>)
 80005f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_GPIO_Init+0x58>)
 80005f4:	2120      	movs	r1, #32
 80005f6:	430a      	orrs	r2, r1
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_GPIO_Init+0x58>)
 80005fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fe:	2220      	movs	r2, #32
 8000600:	4013      	ands	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_GPIO_Init+0x58>)
 8000608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_GPIO_Init+0x58>)
 800060c:	2101      	movs	r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MX_GPIO_Init+0x58>)
 8000614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000616:	2201      	movs	r2, #1
 8000618:	4013      	ands	r3, r2
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40021000 	.word	0x40021000

0800062c <First_Task>:

/* USER CODE BEGIN 4 */

static void First_Task(void *parameters) //LD2 - - USER pas
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af02      	add	r7, sp, #8
 8000632:	6078      	str	r0, [r7, #4]
	while(1)
	{
	xSemaphoreTake (xMutex, portMAX_DELAY);
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <First_Task+0x8c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2201      	movs	r2, #1
 800063a:	4252      	negs	r2, r2
 800063c:	0011      	movs	r1, r2
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fdf6 	bl	8003230 <xQueueSemaphoreTake>
	char *str = "Inside Task1\r\n";
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <First_Task+0x90>)
 8000646:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str),HAL_MAX_DELAY);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff fd5c 	bl	8000108 <strlen>
 8000650:	0003      	movs	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	2301      	movs	r3, #1
 8000656:	425b      	negs	r3, r3
 8000658:	68f9      	ldr	r1, [r7, #12]
 800065a:	4819      	ldr	r0, [pc, #100]	; (80006c0 <First_Task+0x94>)
 800065c:	f001 fd80 	bl	8002160 <HAL_UART_Transmit>
	xTaskCreate (Second_Task, "Task2", 100, NULL, 2, NULL);
 8000660:	4918      	ldr	r1, [pc, #96]	; (80006c4 <First_Task+0x98>)
 8000662:	4819      	ldr	r0, [pc, #100]	; (80006c8 <First_Task+0x9c>)
 8000664:	2300      	movs	r3, #0
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2302      	movs	r3, #2
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	2264      	movs	r2, #100	; 0x64
 8000670:	f003 f85d 	bl	800372e <xTaskCreate>
	char *str2 = "Task1 attempting to take yMutex\r\n";
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <First_Task+0xa0>)
 8000676:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2),HAL_MAX_DELAY);
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	0018      	movs	r0, r3
 800067c:	f7ff fd44 	bl	8000108 <strlen>
 8000680:	0003      	movs	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	2301      	movs	r3, #1
 8000686:	425b      	negs	r3, r3
 8000688:	68b9      	ldr	r1, [r7, #8]
 800068a:	480d      	ldr	r0, [pc, #52]	; (80006c0 <First_Task+0x94>)
 800068c:	f001 fd68 	bl	8002160 <HAL_UART_Transmit>
	xSemaphoreTake (yMutex, portMAX_DELAY);
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <First_Task+0xa4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2201      	movs	r2, #1
 8000696:	4252      	negs	r2, r2
 8000698:	0011      	movs	r1, r2
 800069a:	0018      	movs	r0, r3
 800069c:	f002 fdc8 	bl	8003230 <xQueueSemaphoreTake>
	xSemaphoreGive (xMutex);
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <First_Task+0x8c>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	2300      	movs	r3, #0
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	f002 fc48 	bl	8002f3e <xQueueGenericSend>
	vTaskDelay (1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f003 f99a 	bl	80039e8 <vTaskDelay>
	{
 80006b4:	e7be      	b.n	8000634 <First_Task+0x8>
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	200000c4 	.word	0x200000c4
 80006bc:	080053bc 	.word	0x080053bc
 80006c0:	20000030 	.word	0x20000030
 80006c4:	080053cc 	.word	0x080053cc
 80006c8:	080006d5 	.word	0x080006d5
 80006cc:	080053d4 	.word	0x080053d4
 80006d0:	200000c8 	.word	0x200000c8

080006d4 <Second_Task>:
}
}

static void Second_Task(void *parameters)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	while(1)
	{
	xSemaphoreTake (yMutex, portMAX_DELAY);
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <Second_Task+0x78>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2201      	movs	r2, #1
 80006e2:	4252      	negs	r2, r2
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 fda2 	bl	8003230 <xQueueSemaphoreTake>
	char *str = "Inside Task2\r\n\n";
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <Second_Task+0x7c>)
 80006ee:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str),HAL_MAX_DELAY);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	0018      	movs	r0, r3
 80006f4:	f7ff fd08 	bl	8000108 <strlen>
 80006f8:	0003      	movs	r3, r0
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	2301      	movs	r3, #1
 80006fe:	425b      	negs	r3, r3
 8000700:	68f9      	ldr	r1, [r7, #12]
 8000702:	4814      	ldr	r0, [pc, #80]	; (8000754 <Second_Task+0x80>)
 8000704:	f001 fd2c 	bl	8002160 <HAL_UART_Transmit>
	char *str2 = "Task2 attempting to take xMutex\r\n";
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <Second_Task+0x84>)
 800070a:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2),HAL_MAX_DELAY);
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	0018      	movs	r0, r3
 8000710:	f7ff fcfa 	bl	8000108 <strlen>
 8000714:	0003      	movs	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	2301      	movs	r3, #1
 800071a:	425b      	negs	r3, r3
 800071c:	68b9      	ldr	r1, [r7, #8]
 800071e:	480d      	ldr	r0, [pc, #52]	; (8000754 <Second_Task+0x80>)
 8000720:	f001 fd1e 	bl	8002160 <HAL_UART_Transmit>
	xSemaphoreTake(xMutex, portMAX_DELAY);
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <Second_Task+0x88>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2201      	movs	r2, #1
 800072a:	4252      	negs	r2, r2
 800072c:	0011      	movs	r1, r2
 800072e:	0018      	movs	r0, r3
 8000730:	f002 fd7e 	bl	8003230 <xQueueSemaphoreTake>
	xSemaphoreGive (yMutex);
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <Second_Task+0x78>)
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	f002 fbfe 	bl	8002f3e <xQueueGenericSend>
	vTaskDelay(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f003 f950 	bl	80039e8 <vTaskDelay>
	{
 8000748:	e7c8      	b.n	80006dc <Second_Task+0x8>
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200000c8 	.word	0x200000c8
 8000750:	080053f8 	.word	0x080053f8
 8000754:	20000030 	.word	0x20000030
 8000758:	08005408 	.word	0x08005408
 800075c:	200000c4 	.word	0x200000c4

08000760 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d101      	bne.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000772:	f000 f977 	bl	8000a64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40000400 	.word	0x40000400

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x44>)
 8000798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_MspInit+0x44>)
 800079c:	2101      	movs	r1, #1
 800079e:	430a      	orrs	r2, r1
 80007a0:	641a      	str	r2, [r3, #64]	; 0x40
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x44>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	2201      	movs	r2, #1
 80007a8:	4013      	ands	r3, r2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x44>)
 80007b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_MspInit+0x44>)
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	0549      	lsls	r1, r1, #21
 80007b8:	430a      	orrs	r2, r1
 80007ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_MspInit+0x44>)
 80007be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	055b      	lsls	r3, r3, #21
 80007c4:	4013      	ands	r3, r2
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b091      	sub	sp, #68	; 0x44
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	232c      	movs	r3, #44	; 0x2c
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	0018      	movs	r0, r3
 80007e6:	2314      	movs	r3, #20
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f004 fdc3 	bl	8005376 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	2410      	movs	r4, #16
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	0018      	movs	r0, r3
 80007f6:	231c      	movs	r3, #28
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f004 fdbb 	bl	8005376 <memset>
  if(huart->Instance==USART2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <HAL_UART_MspInit+0xb8>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d13e      	bne.n	8000888 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2202      	movs	r2, #2
 800080e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000816:	193b      	adds	r3, r7, r4
 8000818:	0018      	movs	r0, r3
 800081a:	f001 f881 	bl	8001920 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000822:	f7ff ffaf 	bl	8000784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <HAL_UART_MspInit+0xbc>)
 8000828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_UART_MspInit+0xbc>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0289      	lsls	r1, r1, #10
 8000830:	430a      	orrs	r2, r1
 8000832:	63da      	str	r2, [r3, #60]	; 0x3c
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_UART_MspInit+0xbc>)
 8000836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	029b      	lsls	r3, r3, #10
 800083c:	4013      	ands	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_UART_MspInit+0xbc>)
 8000844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_UART_MspInit+0xbc>)
 8000848:	2101      	movs	r1, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_UART_MspInit+0xbc>)
 8000850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000852:	2201      	movs	r2, #1
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800085a:	212c      	movs	r1, #44	; 0x2c
 800085c:	187b      	adds	r3, r7, r1
 800085e:	220c      	movs	r2, #12
 8000860:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2202      	movs	r2, #2
 8000866:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2201      	movs	r2, #1
 8000878:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	187a      	adds	r2, r7, r1
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f000 f9b8 	bl	8000bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b011      	add	sp, #68	; 0x44
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b5b0      	push	{r4, r5, r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008a0:	232b      	movs	r3, #43	; 0x2b
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80008a8:	4b37      	ldr	r3, [pc, #220]	; (8000988 <HAL_InitTick+0xf0>)
 80008aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ac:	4b36      	ldr	r3, [pc, #216]	; (8000988 <HAL_InitTick+0xf0>)
 80008ae:	2102      	movs	r1, #2
 80008b0:	430a      	orrs	r2, r1
 80008b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b4:	4b34      	ldr	r3, [pc, #208]	; (8000988 <HAL_InitTick+0xf0>)
 80008b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008b8:	2202      	movs	r2, #2
 80008ba:	4013      	ands	r3, r2
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c0:	230c      	movs	r3, #12
 80008c2:	18fa      	adds	r2, r7, r3
 80008c4:	2410      	movs	r4, #16
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0011      	movs	r1, r2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fffe 	bl	80018cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d104      	bne.n	80008e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008dc:	f000 ffe0 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 80008e0:	0003      	movs	r3, r0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008e4:	e004      	b.n	80008f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008e6:	f000 ffdb 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 80008ea:	0003      	movs	r3, r0
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f2:	4926      	ldr	r1, [pc, #152]	; (800098c <HAL_InitTick+0xf4>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff fc0f 	bl	8000118 <__udivsi3>
 80008fa:	0003      	movs	r3, r0
 80008fc:	3b01      	subs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <HAL_InitTick+0xf8>)
 8000902:	4a24      	ldr	r2, [pc, #144]	; (8000994 <HAL_InitTick+0xfc>)
 8000904:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <HAL_InitTick+0xf8>)
 8000908:	4a23      	ldr	r2, [pc, #140]	; (8000998 <HAL_InitTick+0x100>)
 800090a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <HAL_InitTick+0xf8>)
 800090e:	6a3a      	ldr	r2, [r7, #32]
 8000910:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <HAL_InitTick+0xf8>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <HAL_InitTick+0xf8>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_InitTick+0xf8>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000924:	252b      	movs	r5, #43	; 0x2b
 8000926:	197c      	adds	r4, r7, r5
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_InitTick+0xf8>)
 800092a:	0018      	movs	r0, r3
 800092c:	f001 f92c 	bl	8001b88 <HAL_TIM_Base_Init>
 8000930:	0003      	movs	r3, r0
 8000932:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000934:	197b      	adds	r3, r7, r5
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d11e      	bne.n	800097a <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800093c:	197c      	adds	r4, r7, r5
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_InitTick+0xf8>)
 8000940:	0018      	movs	r0, r3
 8000942:	f001 f981 	bl	8001c48 <HAL_TIM_Base_Start_IT>
 8000946:	0003      	movs	r3, r0
 8000948:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800094a:	197b      	adds	r3, r7, r5
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d113      	bne.n	800097a <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000952:	2010      	movs	r0, #16
 8000954:	f000 f93f 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b03      	cmp	r3, #3
 800095c:	d809      	bhi.n	8000972 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	0019      	movs	r1, r3
 8000964:	2010      	movs	r0, #16
 8000966:	f000 f921 	bl	8000bac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_InitTick+0x104>)
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e003      	b.n	800097a <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000972:	232b      	movs	r3, #43	; 0x2b
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800097a:	232b      	movs	r3, #43	; 0x2b
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	781b      	ldrb	r3, [r3, #0]
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	b00c      	add	sp, #48	; 0x30
 8000986:	bdb0      	pop	{r4, r5, r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	000f4240 	.word	0x000f4240
 8000990:	200000cc 	.word	0x200000cc
 8000994:	40000400 	.word	0x40000400
 8000998:	000003e7 	.word	0x000003e7
 800099c:	20000004 	.word	0x20000004

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <TIM3_IRQHandler+0x14>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f001 f99e 	bl	8001cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	200000cc 	.word	0x200000cc

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009d4:	f7ff fff6 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	; (8000a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <LoopForever+0xe>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	; (8000a1c <LoopForever+0x16>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009fe:	f004 fc8d 	bl	800531c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a02:	f7ff fcff 	bl	8000404 <main>

08000a06 <LoopForever>:

LoopForever:
  b LoopForever
 8000a06:	e7fe      	b.n	8000a06 <LoopForever>
  ldr   r0, =_estack
 8000a08:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a14:	080054fc 	.word	0x080054fc
  ldr r2, =_sbss
 8000a18:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a1c:	20001c1c 	.word	0x20001c1c

08000a20 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_Init+0x3c>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_Init+0x3c>)
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	0049      	lsls	r1, r1, #1
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f7ff ff2a 	bl	8000898 <HAL_InitTick>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d003      	beq.n	8000a50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	e001      	b.n	8000a54 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fe9e 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781b      	ldrb	r3, [r3, #0]
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b002      	add	sp, #8
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40022000 	.word	0x40022000

08000a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x1c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x20>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	18d2      	adds	r2, r2, r3
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_IncTick+0x20>)
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000118 	.word	0x20000118

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <HAL_GetTick+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000118 	.word	0x20000118

08000a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b7f      	cmp	r3, #127	; 0x7f
 8000aae:	d809      	bhi.n	8000ac4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	231f      	movs	r3, #31
 8000ab8:	401a      	ands	r2, r3
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_EnableIRQ+0x30>)
 8000abc:	2101      	movs	r1, #1
 8000abe:	4091      	lsls	r1, r2
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae4:	d828      	bhi.n	8000b38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae6:	4a2f      	ldr	r2, [pc, #188]	; (8000ba4 <__NVIC_SetPriority+0xd4>)
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	33c0      	adds	r3, #192	; 0xc0
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	589b      	ldr	r3, [r3, r2]
 8000af6:	1dfa      	adds	r2, r7, #7
 8000af8:	7812      	ldrb	r2, [r2, #0]
 8000afa:	0011      	movs	r1, r2
 8000afc:	2203      	movs	r2, #3
 8000afe:	400a      	ands	r2, r1
 8000b00:	00d2      	lsls	r2, r2, #3
 8000b02:	21ff      	movs	r1, #255	; 0xff
 8000b04:	4091      	lsls	r1, r2
 8000b06:	000a      	movs	r2, r1
 8000b08:	43d2      	mvns	r2, r2
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	019b      	lsls	r3, r3, #6
 8000b12:	22ff      	movs	r2, #255	; 0xff
 8000b14:	401a      	ands	r2, r3
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	4003      	ands	r3, r0
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b24:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <__NVIC_SetPriority+0xd4>)
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	33c0      	adds	r3, #192	; 0xc0
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b36:	e031      	b.n	8000b9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <__NVIC_SetPriority+0xd8>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0019      	movs	r1, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	400b      	ands	r3, r1
 8000b44:	3b08      	subs	r3, #8
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	3306      	adds	r3, #6
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	18d3      	adds	r3, r2, r3
 8000b4e:	3304      	adds	r3, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	1dfa      	adds	r2, r7, #7
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	0011      	movs	r1, r2
 8000b58:	2203      	movs	r2, #3
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	00d2      	lsls	r2, r2, #3
 8000b5e:	21ff      	movs	r1, #255	; 0xff
 8000b60:	4091      	lsls	r1, r2
 8000b62:	000a      	movs	r2, r1
 8000b64:	43d2      	mvns	r2, r2
 8000b66:	401a      	ands	r2, r3
 8000b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	019b      	lsls	r3, r3, #6
 8000b6e:	22ff      	movs	r2, #255	; 0xff
 8000b70:	401a      	ands	r2, r3
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0018      	movs	r0, r3
 8000b78:	2303      	movs	r3, #3
 8000b7a:	4003      	ands	r3, r0
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <__NVIC_SetPriority+0xd8>)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	001c      	movs	r4, r3
 8000b88:	230f      	movs	r3, #15
 8000b8a:	4023      	ands	r3, r4
 8000b8c:	3b08      	subs	r3, #8
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	430a      	orrs	r2, r1
 8000b92:	3306      	adds	r3, #6
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	18c3      	adds	r3, r0, r3
 8000b98:	3304      	adds	r3, #4
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b003      	add	sp, #12
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	1c02      	adds	r2, r0, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ff81 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	0002      	movs	r2, r0
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ff57 	bl	8000a9c <__NVIC_EnableIRQ>
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	e147      	b.n	8000e98 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	4091      	lsls	r1, r2
 8000c12:	000a      	movs	r2, r1
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d100      	bne.n	8000c20 <HAL_GPIO_Init+0x28>
 8000c1e:	e138      	b.n	8000e92 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	4013      	ands	r3, r2
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d005      	beq.n	8000c38 <HAL_GPIO_Init+0x40>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2203      	movs	r2, #3
 8000c32:	4013      	ands	r3, r2
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d130      	bne.n	8000c9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	409a      	lsls	r2, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	43da      	mvns	r2, r3
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	2201      	movs	r2, #1
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d017      	beq.n	8000cd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2203      	movs	r2, #3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d123      	bne.n	8000d2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	58d3      	ldr	r3, [r2, r3]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	691a      	ldr	r2, [r3, #16]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	400b      	ands	r3, r1
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	08da      	lsrs	r2, r3, #3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	6939      	ldr	r1, [r7, #16]
 8000d28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	2203      	movs	r2, #3
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2203      	movs	r2, #3
 8000d48:	401a      	ands	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	23c0      	movs	r3, #192	; 0xc0
 8000d64:	029b      	lsls	r3, r3, #10
 8000d66:	4013      	ands	r3, r2
 8000d68:	d100      	bne.n	8000d6c <HAL_GPIO_Init+0x174>
 8000d6a:	e092      	b.n	8000e92 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d6c:	4a50      	ldr	r2, [pc, #320]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3318      	adds	r3, #24
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	589b      	ldr	r3, [r3, r2]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	220f      	movs	r2, #15
 8000d84:	409a      	lsls	r2, r3
 8000d86:	0013      	movs	r3, r2
 8000d88:	43da      	mvns	r2, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	23a0      	movs	r3, #160	; 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x1ca>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a45      	ldr	r2, [pc, #276]	; (8000eb4 <HAL_GPIO_Init+0x2bc>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x1c6>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a44      	ldr	r2, [pc, #272]	; (8000eb8 <HAL_GPIO_Init+0x2c0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x1c2>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a43      	ldr	r2, [pc, #268]	; (8000ebc <HAL_GPIO_Init+0x2c4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x1be>
 8000db2:	2303      	movs	r3, #3
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x1cc>
 8000db6:	2305      	movs	r3, #5
 8000db8:	e004      	b.n	8000dc4 <HAL_GPIO_Init+0x1cc>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e002      	b.n	8000dc4 <HAL_GPIO_Init+0x1cc>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <HAL_GPIO_Init+0x1cc>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	400a      	ands	r2, r1
 8000dca:	00d2      	lsls	r2, r2, #3
 8000dcc:	4093      	lsls	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000dd4:	4936      	ldr	r1, [pc, #216]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3318      	adds	r3, #24
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000de2:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	035b      	lsls	r3, r3, #13
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43da      	mvns	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	039b      	lsls	r3, r3, #14
 8000e24:	4013      	ands	r3, r2
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e30:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e36:	4a1e      	ldr	r2, [pc, #120]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e38:	2384      	movs	r3, #132	; 0x84
 8000e3a:	58d3      	ldr	r3, [r2, r3]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43da      	mvns	r2, r3
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	029b      	lsls	r3, r3, #10
 8000e50:	4013      	ands	r3, r2
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e5c:	4914      	ldr	r1, [pc, #80]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e5e:	2284      	movs	r2, #132	; 0x84
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e64:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	58d3      	ldr	r3, [r2, r3]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	025b      	lsls	r3, r3, #9
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e8a:	4909      	ldr	r1, [pc, #36]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	40da      	lsrs	r2, r3
 8000ea0:	1e13      	subs	r3, r2, #0
 8000ea2:	d000      	beq.n	8000ea6 <HAL_GPIO_Init+0x2ae>
 8000ea4:	e6b0      	b.n	8000c08 <HAL_GPIO_Init+0x10>
  }
}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b006      	add	sp, #24
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021800 	.word	0x40021800
 8000eb4:	50000400 	.word	0x50000400
 8000eb8:	50000800 	.word	0x50000800
 8000ebc:	50000c00 	.word	0x50000c00

08000ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d11f      	bne.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	0013      	movs	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	189b      	adds	r3, r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4912      	ldr	r1, [pc, #72]	; (8000f3c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff f910 	bl	8000118 <__udivsi3>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	3301      	adds	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000efe:	e008      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e001      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e009      	b.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f14:	695a      	ldr	r2, [r3, #20]
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d0ed      	beq.n	8000f00 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b004      	add	sp, #16
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	40007000 	.word	0x40007000
 8000f34:	fffff9ff 	.word	0xfffff9ff
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	000f4240 	.word	0x000f4240

08000f40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	23e0      	movs	r3, #224	; 0xe0
 8000f4a:	01db      	lsls	r3, r3, #7
 8000f4c:	4013      	ands	r3, r2
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e2f3      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4013      	ands	r3, r2
 8000f72:	d100      	bne.n	8000f76 <HAL_RCC_OscConfig+0x1e>
 8000f74:	e07c      	b.n	8001070 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f76:	4bc3      	ldr	r3, [pc, #780]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2238      	movs	r2, #56	; 0x38
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f80:	4bc0      	ldr	r3, [pc, #768]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	2203      	movs	r2, #3
 8000f86:	4013      	ands	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2b10      	cmp	r3, #16
 8000f8e:	d102      	bne.n	8000f96 <HAL_RCC_OscConfig+0x3e>
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d002      	beq.n	8000f9c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d10b      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	4bb9      	ldr	r3, [pc, #740]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	029b      	lsls	r3, r3, #10
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d062      	beq.n	800106e <HAL_RCC_OscConfig+0x116>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d15e      	bne.n	800106e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e2ce      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	025b      	lsls	r3, r3, #9
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d107      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x78>
 8000fc0:	4bb0      	ldr	r3, [pc, #704]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4baf      	ldr	r3, [pc, #700]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	0249      	lsls	r1, r1, #9
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e020      	b.n	8001012 <HAL_RCC_OscConfig+0xba>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	23a0      	movs	r3, #160	; 0xa0
 8000fd6:	02db      	lsls	r3, r3, #11
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d10e      	bne.n	8000ffa <HAL_RCC_OscConfig+0xa2>
 8000fdc:	4ba9      	ldr	r3, [pc, #676]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4ba8      	ldr	r3, [pc, #672]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	02c9      	lsls	r1, r1, #11
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	4ba6      	ldr	r3, [pc, #664]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4ba5      	ldr	r3, [pc, #660]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	0249      	lsls	r1, r1, #9
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e00b      	b.n	8001012 <HAL_RCC_OscConfig+0xba>
 8000ffa:	4ba2      	ldr	r3, [pc, #648]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4ba1      	ldr	r3, [pc, #644]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001000:	49a1      	ldr	r1, [pc, #644]	; (8001288 <HAL_RCC_OscConfig+0x330>)
 8001002:	400a      	ands	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	4b9f      	ldr	r3, [pc, #636]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b9e      	ldr	r3, [pc, #632]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 800100c:	499f      	ldr	r1, [pc, #636]	; (800128c <HAL_RCC_OscConfig+0x334>)
 800100e:	400a      	ands	r2, r1
 8001010:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d014      	beq.n	8001044 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101a:	f7ff fd35 	bl	8000a88 <HAL_GetTick>
 800101e:	0003      	movs	r3, r0
 8001020:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fd30 	bl	8000a88 <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e28d      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001036:	4b93      	ldr	r3, [pc, #588]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d0f0      	beq.n	8001024 <HAL_RCC_OscConfig+0xcc>
 8001042:	e015      	b.n	8001070 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001044:	f7ff fd20 	bl	8000a88 <HAL_GetTick>
 8001048:	0003      	movs	r3, r0
 800104a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800104e:	f7ff fd1b 	bl	8000a88 <HAL_GetTick>
 8001052:	0002      	movs	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b64      	cmp	r3, #100	; 0x64
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e278      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001060:	4b88      	ldr	r3, [pc, #544]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	029b      	lsls	r3, r3, #10
 8001068:	4013      	ands	r3, r2
 800106a:	d1f0      	bne.n	800104e <HAL_RCC_OscConfig+0xf6>
 800106c:	e000      	b.n	8001070 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2202      	movs	r2, #2
 8001076:	4013      	ands	r3, r2
 8001078:	d100      	bne.n	800107c <HAL_RCC_OscConfig+0x124>
 800107a:	e099      	b.n	80011b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800107c:	4b81      	ldr	r3, [pc, #516]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	2238      	movs	r2, #56	; 0x38
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001086:	4b7f      	ldr	r3, [pc, #508]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2203      	movs	r2, #3
 800108c:	4013      	ands	r3, r2
 800108e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2b10      	cmp	r3, #16
 8001094:	d102      	bne.n	800109c <HAL_RCC_OscConfig+0x144>
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d002      	beq.n	80010a2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d135      	bne.n	800110e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010a2:	4b78      	ldr	r3, [pc, #480]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4013      	ands	r3, r2
 80010ac:	d005      	beq.n	80010ba <HAL_RCC_OscConfig+0x162>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e24b      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ba:	4b72      	ldr	r3, [pc, #456]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	4a74      	ldr	r2, [pc, #464]	; (8001290 <HAL_RCC_OscConfig+0x338>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	0019      	movs	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	021a      	lsls	r2, r3, #8
 80010ca:	4b6e      	ldr	r3, [pc, #440]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010cc:	430a      	orrs	r2, r1
 80010ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d112      	bne.n	80010fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010d6:	4b6b      	ldr	r3, [pc, #428]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a6e      	ldr	r2, [pc, #440]	; (8001294 <HAL_RCC_OscConfig+0x33c>)
 80010dc:	4013      	ands	r3, r2
 80010de:	0019      	movs	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	4b67      	ldr	r3, [pc, #412]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010ea:	4b66      	ldr	r3, [pc, #408]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	0adb      	lsrs	r3, r3, #11
 80010f0:	2207      	movs	r2, #7
 80010f2:	4013      	ands	r3, r2
 80010f4:	4a68      	ldr	r2, [pc, #416]	; (8001298 <HAL_RCC_OscConfig+0x340>)
 80010f6:	40da      	lsrs	r2, r3
 80010f8:	4b68      	ldr	r3, [pc, #416]	; (800129c <HAL_RCC_OscConfig+0x344>)
 80010fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010fc:	4b68      	ldr	r3, [pc, #416]	; (80012a0 <HAL_RCC_OscConfig+0x348>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff fbc9 	bl	8000898 <HAL_InitTick>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d051      	beq.n	80011ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e221      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d030      	beq.n	8001178 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001116:	4b5b      	ldr	r3, [pc, #364]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a5e      	ldr	r2, [pc, #376]	; (8001294 <HAL_RCC_OscConfig+0x33c>)
 800111c:	4013      	ands	r3, r2
 800111e:	0019      	movs	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	4b57      	ldr	r3, [pc, #348]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001126:	430a      	orrs	r2, r1
 8001128:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800112a:	4b56      	ldr	r3, [pc, #344]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b55      	ldr	r3, [pc, #340]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	0049      	lsls	r1, r1, #1
 8001134:	430a      	orrs	r2, r1
 8001136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001138:	f7ff fca6 	bl	8000a88 <HAL_GetTick>
 800113c:	0003      	movs	r3, r0
 800113e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fca1 	bl	8000a88 <HAL_GetTick>
 8001146:	0002      	movs	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e1fe      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4013      	ands	r3, r2
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b48      	ldr	r3, [pc, #288]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4a4a      	ldr	r2, [pc, #296]	; (8001290 <HAL_RCC_OscConfig+0x338>)
 8001166:	4013      	ands	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	021a      	lsls	r2, r3, #8
 8001170:	4b44      	ldr	r3, [pc, #272]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001172:	430a      	orrs	r2, r1
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	e01b      	b.n	80011b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001178:	4b42      	ldr	r3, [pc, #264]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b41      	ldr	r3, [pc, #260]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 800117e:	4949      	ldr	r1, [pc, #292]	; (80012a4 <HAL_RCC_OscConfig+0x34c>)
 8001180:	400a      	ands	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff fc80 	bl	8000a88 <HAL_GetTick>
 8001188:	0003      	movs	r3, r0
 800118a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fc7b 	bl	8000a88 <HAL_GetTick>
 8001192:	0002      	movs	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e1d8      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011a0:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4013      	ands	r3, r2
 80011aa:	d1f0      	bne.n	800118e <HAL_RCC_OscConfig+0x236>
 80011ac:	e000      	b.n	80011b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2208      	movs	r2, #8
 80011b6:	4013      	ands	r3, r2
 80011b8:	d047      	beq.n	800124a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80011ba:	4b32      	ldr	r3, [pc, #200]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2238      	movs	r2, #56	; 0x38
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b18      	cmp	r3, #24
 80011c4:	d10a      	bne.n	80011dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80011c6:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	2202      	movs	r2, #2
 80011cc:	4013      	ands	r3, r2
 80011ce:	d03c      	beq.n	800124a <HAL_RCC_OscConfig+0x2f2>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d138      	bne.n	800124a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e1ba      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d019      	beq.n	8001218 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc4a 	bl	8000a88 <HAL_GetTick>
 80011f4:	0003      	movs	r3, r0
 80011f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fa:	f7ff fc45 	bl	8000a88 <HAL_GetTick>
 80011fe:	0002      	movs	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1a2      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 800120e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001210:	2202      	movs	r2, #2
 8001212:	4013      	ands	r3, r2
 8001214:	d0f1      	beq.n	80011fa <HAL_RCC_OscConfig+0x2a2>
 8001216:	e018      	b.n	800124a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 800121a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 800121e:	2101      	movs	r1, #1
 8001220:	438a      	bics	r2, r1
 8001222:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fc30 	bl	8000a88 <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122e:	f7ff fc2b 	bl	8000a88 <HAL_GetTick>
 8001232:	0002      	movs	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e188      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001244:	2202      	movs	r2, #2
 8001246:	4013      	ands	r3, r2
 8001248:	d1f1      	bne.n	800122e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2204      	movs	r2, #4
 8001250:	4013      	ands	r3, r2
 8001252:	d100      	bne.n	8001256 <HAL_RCC_OscConfig+0x2fe>
 8001254:	e0c6      	b.n	80013e4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001256:	231f      	movs	r3, #31
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2238      	movs	r2, #56	; 0x38
 8001264:	4013      	ands	r3, r2
 8001266:	2b20      	cmp	r3, #32
 8001268:	d11e      	bne.n	80012a8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_RCC_OscConfig+0x32c>)
 800126c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126e:	2202      	movs	r2, #2
 8001270:	4013      	ands	r3, r2
 8001272:	d100      	bne.n	8001276 <HAL_RCC_OscConfig+0x31e>
 8001274:	e0b6      	b.n	80013e4 <HAL_RCC_OscConfig+0x48c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d000      	beq.n	8001280 <HAL_RCC_OscConfig+0x328>
 800127e:	e0b1      	b.n	80013e4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e166      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
 8001284:	40021000 	.word	0x40021000
 8001288:	fffeffff 	.word	0xfffeffff
 800128c:	fffbffff 	.word	0xfffbffff
 8001290:	ffff80ff 	.word	0xffff80ff
 8001294:	ffffc7ff 	.word	0xffffc7ff
 8001298:	00f42400 	.word	0x00f42400
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004
 80012a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012a8:	4bac      	ldr	r3, [pc, #688]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80012aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	055b      	lsls	r3, r3, #21
 80012b0:	4013      	ands	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_RCC_OscConfig+0x360>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x362>
 80012b8:	2300      	movs	r3, #0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d011      	beq.n	80012e2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4ba7      	ldr	r3, [pc, #668]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80012c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012c2:	4ba6      	ldr	r3, [pc, #664]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	0549      	lsls	r1, r1, #21
 80012c8:	430a      	orrs	r2, r1
 80012ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80012cc:	4ba3      	ldr	r3, [pc, #652]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80012ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	055b      	lsls	r3, r3, #21
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80012da:	231f      	movs	r3, #31
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e2:	4b9f      	ldr	r3, [pc, #636]	; (8001560 <HAL_RCC_OscConfig+0x608>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4013      	ands	r3, r2
 80012ec:	d11a      	bne.n	8001324 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012ee:	4b9c      	ldr	r3, [pc, #624]	; (8001560 <HAL_RCC_OscConfig+0x608>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b9b      	ldr	r3, [pc, #620]	; (8001560 <HAL_RCC_OscConfig+0x608>)
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	0049      	lsls	r1, r1, #1
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fbc4 	bl	8000a88 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001306:	f7ff fbbf 	bl	8000a88 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e11c      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001318:	4b91      	ldr	r3, [pc, #580]	; (8001560 <HAL_RCC_OscConfig+0x608>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4013      	ands	r3, r2
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x3e2>
 800132c:	4b8b      	ldr	r3, [pc, #556]	; (800155c <HAL_RCC_OscConfig+0x604>)
 800132e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001330:	4b8a      	ldr	r3, [pc, #552]	; (800155c <HAL_RCC_OscConfig+0x604>)
 8001332:	2101      	movs	r1, #1
 8001334:	430a      	orrs	r2, r1
 8001336:	65da      	str	r2, [r3, #92]	; 0x5c
 8001338:	e01c      	b.n	8001374 <HAL_RCC_OscConfig+0x41c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b05      	cmp	r3, #5
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x404>
 8001342:	4b86      	ldr	r3, [pc, #536]	; (800155c <HAL_RCC_OscConfig+0x604>)
 8001344:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001346:	4b85      	ldr	r3, [pc, #532]	; (800155c <HAL_RCC_OscConfig+0x604>)
 8001348:	2104      	movs	r1, #4
 800134a:	430a      	orrs	r2, r1
 800134c:	65da      	str	r2, [r3, #92]	; 0x5c
 800134e:	4b83      	ldr	r3, [pc, #524]	; (800155c <HAL_RCC_OscConfig+0x604>)
 8001350:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001352:	4b82      	ldr	r3, [pc, #520]	; (800155c <HAL_RCC_OscConfig+0x604>)
 8001354:	2101      	movs	r1, #1
 8001356:	430a      	orrs	r2, r1
 8001358:	65da      	str	r2, [r3, #92]	; 0x5c
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0x41c>
 800135c:	4b7f      	ldr	r3, [pc, #508]	; (800155c <HAL_RCC_OscConfig+0x604>)
 800135e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001360:	4b7e      	ldr	r3, [pc, #504]	; (800155c <HAL_RCC_OscConfig+0x604>)
 8001362:	2101      	movs	r1, #1
 8001364:	438a      	bics	r2, r1
 8001366:	65da      	str	r2, [r3, #92]	; 0x5c
 8001368:	4b7c      	ldr	r3, [pc, #496]	; (800155c <HAL_RCC_OscConfig+0x604>)
 800136a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800136c:	4b7b      	ldr	r3, [pc, #492]	; (800155c <HAL_RCC_OscConfig+0x604>)
 800136e:	2104      	movs	r1, #4
 8001370:	438a      	bics	r2, r1
 8001372:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d014      	beq.n	80013a6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fb84 	bl	8000a88 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001384:	e009      	b.n	800139a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fb7f 	bl	8000a88 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	4a74      	ldr	r2, [pc, #464]	; (8001564 <HAL_RCC_OscConfig+0x60c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e0db      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800139a:	4b70      	ldr	r3, [pc, #448]	; (800155c <HAL_RCC_OscConfig+0x604>)
 800139c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139e:	2202      	movs	r2, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x42e>
 80013a4:	e013      	b.n	80013ce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fb6f 	bl	8000a88 <HAL_GetTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ae:	e009      	b.n	80013c4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b0:	f7ff fb6a 	bl	8000a88 <HAL_GetTick>
 80013b4:	0002      	movs	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	4a6a      	ldr	r2, [pc, #424]	; (8001564 <HAL_RCC_OscConfig+0x60c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e0c6      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c4:	4b65      	ldr	r3, [pc, #404]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80013c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c8:	2202      	movs	r2, #2
 80013ca:	4013      	ands	r3, r2
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013ce:	231f      	movs	r3, #31
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013d8:	4b60      	ldr	r3, [pc, #384]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80013da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013dc:	4b5f      	ldr	r3, [pc, #380]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80013de:	4962      	ldr	r1, [pc, #392]	; (8001568 <HAL_RCC_OscConfig+0x610>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d100      	bne.n	80013ee <HAL_RCC_OscConfig+0x496>
 80013ec:	e0b0      	b.n	8001550 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ee:	4b5b      	ldr	r3, [pc, #364]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2238      	movs	r2, #56	; 0x38
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d100      	bne.n	80013fc <HAL_RCC_OscConfig+0x4a4>
 80013fa:	e078      	b.n	80014ee <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d153      	bne.n	80014ac <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001404:	4b55      	ldr	r3, [pc, #340]	; (800155c <HAL_RCC_OscConfig+0x604>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b54      	ldr	r3, [pc, #336]	; (800155c <HAL_RCC_OscConfig+0x604>)
 800140a:	4958      	ldr	r1, [pc, #352]	; (800156c <HAL_RCC_OscConfig+0x614>)
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fb3a 	bl	8000a88 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff fb35 	bl	8000a88 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e092      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142c:	4b4b      	ldr	r3, [pc, #300]	; (800155c <HAL_RCC_OscConfig+0x604>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	049b      	lsls	r3, r3, #18
 8001434:	4013      	ands	r3, r2
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001438:	4b48      	ldr	r3, [pc, #288]	; (800155c <HAL_RCC_OscConfig+0x604>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a4c      	ldr	r2, [pc, #304]	; (8001570 <HAL_RCC_OscConfig+0x618>)
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	431a      	orrs	r2, r3
 8001460:	4b3e      	ldr	r3, [pc, #248]	; (800155c <HAL_RCC_OscConfig+0x604>)
 8001462:	430a      	orrs	r2, r1
 8001464:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001466:	4b3d      	ldr	r3, [pc, #244]	; (800155c <HAL_RCC_OscConfig+0x604>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b3c      	ldr	r3, [pc, #240]	; (800155c <HAL_RCC_OscConfig+0x604>)
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	0449      	lsls	r1, r1, #17
 8001470:	430a      	orrs	r2, r1
 8001472:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001474:	4b39      	ldr	r3, [pc, #228]	; (800155c <HAL_RCC_OscConfig+0x604>)
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <HAL_RCC_OscConfig+0x604>)
 800147a:	2180      	movs	r1, #128	; 0x80
 800147c:	0549      	lsls	r1, r1, #21
 800147e:	430a      	orrs	r2, r1
 8001480:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001482:	f7ff fb01 	bl	8000a88 <HAL_GetTick>
 8001486:	0003      	movs	r3, r0
 8001488:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff fafc 	bl	8000a88 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e059      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	049b      	lsls	r3, r3, #18
 80014a6:	4013      	ands	r3, r2
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x534>
 80014aa:	e051      	b.n	8001550 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80014b2:	492e      	ldr	r1, [pc, #184]	; (800156c <HAL_RCC_OscConfig+0x614>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fae6 	bl	8000a88 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fae1 	bl	8000a88 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e03e      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	049b      	lsls	r3, r3, #18
 80014dc:	4013      	ands	r3, r2
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80014e6:	4923      	ldr	r1, [pc, #140]	; (8001574 <HAL_RCC_OscConfig+0x61c>)
 80014e8:	400a      	ands	r2, r1
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	e030      	b.n	8001550 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e02b      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_RCC_OscConfig+0x604>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2203      	movs	r2, #3
 8001504:	401a      	ands	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	429a      	cmp	r2, r3
 800150c:	d11e      	bne.n	800154c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2270      	movs	r2, #112	; 0x70
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001518:	429a      	cmp	r2, r3
 800151a:	d117      	bne.n	800154c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	23fe      	movs	r3, #254	; 0xfe
 8001520:	01db      	lsls	r3, r3, #7
 8001522:	401a      	ands	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d10e      	bne.n	800154c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	23f8      	movs	r3, #248	; 0xf8
 8001532:	039b      	lsls	r3, r3, #14
 8001534:	401a      	ands	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d106      	bne.n	800154c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	0f5b      	lsrs	r3, r3, #29
 8001542:	075a      	lsls	r2, r3, #29
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b008      	add	sp, #32
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	40021000 	.word	0x40021000
 8001560:	40007000 	.word	0x40007000
 8001564:	00001388 	.word	0x00001388
 8001568:	efffffff 	.word	0xefffffff
 800156c:	feffffff 	.word	0xfeffffff
 8001570:	1fc1808c 	.word	0x1fc1808c
 8001574:	effefffc 	.word	0xeffefffc

08001578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0e9      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800158c:	4b76      	ldr	r3, [pc, #472]	; (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2207      	movs	r2, #7
 8001592:	4013      	ands	r3, r2
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d91e      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b73      	ldr	r3, [pc, #460]	; (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2207      	movs	r2, #7
 80015a0:	4393      	bics	r3, r2
 80015a2:	0019      	movs	r1, r3
 80015a4:	4b70      	ldr	r3, [pc, #448]	; (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015ac:	f7ff fa6c 	bl	8000a88 <HAL_GetTick>
 80015b0:	0003      	movs	r3, r0
 80015b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015b4:	e009      	b.n	80015ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b6:	f7ff fa67 	bl	8000a88 <HAL_GetTick>
 80015ba:	0002      	movs	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	4a6a      	ldr	r2, [pc, #424]	; (800176c <HAL_RCC_ClockConfig+0x1f4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0ca      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ca:	4b67      	ldr	r3, [pc, #412]	; (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2207      	movs	r2, #7
 80015d0:	4013      	ands	r3, r2
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d1ee      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2202      	movs	r2, #2
 80015de:	4013      	ands	r3, r2
 80015e0:	d015      	beq.n	800160e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2204      	movs	r2, #4
 80015e8:	4013      	ands	r3, r2
 80015ea:	d006      	beq.n	80015fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015ec:	4b60      	ldr	r3, [pc, #384]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 80015f2:	21e0      	movs	r1, #224	; 0xe0
 80015f4:	01c9      	lsls	r1, r1, #7
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fa:	4b5d      	ldr	r3, [pc, #372]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4a5d      	ldr	r2, [pc, #372]	; (8001774 <HAL_RCC_ClockConfig+0x1fc>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 800160a:	430a      	orrs	r2, r1
 800160c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2201      	movs	r2, #1
 8001614:	4013      	ands	r3, r2
 8001616:	d057      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	029b      	lsls	r3, r3, #10
 8001628:	4013      	ands	r3, r2
 800162a:	d12b      	bne.n	8001684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e097      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d107      	bne.n	8001648 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001638:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	049b      	lsls	r3, r3, #18
 8001640:	4013      	ands	r3, r2
 8001642:	d11f      	bne.n	8001684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e08b      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d107      	bne.n	8001660 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001650:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4013      	ands	r3, r2
 800165a:	d113      	bne.n	8001684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e07f      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d106      	bne.n	8001676 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001668:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 800166a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166c:	2202      	movs	r2, #2
 800166e:	4013      	ands	r3, r2
 8001670:	d108      	bne.n	8001684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e074      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001676:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	2202      	movs	r2, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e06d      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001684:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2207      	movs	r2, #7
 800168a:	4393      	bics	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4b37      	ldr	r3, [pc, #220]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001694:	430a      	orrs	r2, r1
 8001696:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001698:	f7ff f9f6 	bl	8000a88 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a0:	e009      	b.n	80016b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a2:	f7ff f9f1 	bl	8000a88 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a2f      	ldr	r2, [pc, #188]	; (800176c <HAL_RCC_ClockConfig+0x1f4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e054      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2238      	movs	r2, #56	; 0x38
 80016bc:	401a      	ands	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1ec      	bne.n	80016a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2207      	movs	r2, #7
 80016ce:	4013      	ands	r3, r2
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d21e      	bcs.n	8001714 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2207      	movs	r2, #7
 80016dc:	4393      	bics	r3, r2
 80016de:	0019      	movs	r1, r3
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016e8:	f7ff f9ce 	bl	8000a88 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016f0:	e009      	b.n	8001706 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f2:	f7ff f9c9 	bl	8000a88 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	4a1b      	ldr	r2, [pc, #108]	; (800176c <HAL_RCC_ClockConfig+0x1f4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e02c      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2207      	movs	r2, #7
 800170c:	4013      	ands	r3, r2
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d1ee      	bne.n	80016f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2204      	movs	r2, #4
 800171a:	4013      	ands	r3, r2
 800171c:	d009      	beq.n	8001732 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4a15      	ldr	r2, [pc, #84]	; (8001778 <HAL_RCC_ClockConfig+0x200>)
 8001724:	4013      	ands	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001732:	f000 f829 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001736:	0001      	movs	r1, r0
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	220f      	movs	r2, #15
 8001740:	401a      	ands	r2, r3
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_RCC_ClockConfig+0x204>)
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	58d3      	ldr	r3, [r2, r3]
 8001748:	221f      	movs	r2, #31
 800174a:	4013      	ands	r3, r2
 800174c:	000a      	movs	r2, r1
 800174e:	40da      	lsrs	r2, r3
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_ClockConfig+0x208>)
 8001752:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_ClockConfig+0x20c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff f89d 	bl	8000898 <HAL_InitTick>
 800175e:	0003      	movs	r3, r0
}
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	b004      	add	sp, #16
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40022000 	.word	0x40022000
 800176c:	00001388 	.word	0x00001388
 8001770:	40021000 	.word	0x40021000
 8001774:	fffff0ff 	.word	0xfffff0ff
 8001778:	ffff8fff 	.word	0xffff8fff
 800177c:	08005444 	.word	0x08005444
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800178e:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2238      	movs	r2, #56	; 0x38
 8001794:	4013      	ands	r3, r2
 8001796:	d10f      	bne.n	80017b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001798:	4b39      	ldr	r3, [pc, #228]	; (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0adb      	lsrs	r3, r3, #11
 800179e:	2207      	movs	r2, #7
 80017a0:	4013      	ands	r3, r2
 80017a2:	2201      	movs	r2, #1
 80017a4:	409a      	lsls	r2, r3
 80017a6:	0013      	movs	r3, r2
 80017a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80017aa:	6839      	ldr	r1, [r7, #0]
 80017ac:	4835      	ldr	r0, [pc, #212]	; (8001884 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017ae:	f7fe fcb3 	bl	8000118 <__udivsi3>
 80017b2:	0003      	movs	r3, r0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	e05d      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b8:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2238      	movs	r2, #56	; 0x38
 80017be:	4013      	ands	r3, r2
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d102      	bne.n	80017ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017c4:	4b30      	ldr	r3, [pc, #192]	; (8001888 <HAL_RCC_GetSysClockFreq+0x100>)
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	e054      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2238      	movs	r2, #56	; 0x38
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d138      	bne.n	8001848 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2203      	movs	r2, #3
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	2207      	movs	r2, #7
 80017e8:	4013      	ands	r3, r2
 80017ea:	3301      	adds	r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d10d      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	4824      	ldr	r0, [pc, #144]	; (8001888 <HAL_RCC_GetSysClockFreq+0x100>)
 80017f8:	f7fe fc8e 	bl	8000118 <__udivsi3>
 80017fc:	0003      	movs	r3, r0
 80017fe:	0019      	movs	r1, r3
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	227f      	movs	r2, #127	; 0x7f
 8001808:	4013      	ands	r3, r2
 800180a:	434b      	muls	r3, r1
 800180c:	617b      	str	r3, [r7, #20]
        break;
 800180e:	e00d      	b.n	800182c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	481c      	ldr	r0, [pc, #112]	; (8001884 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001814:	f7fe fc80 	bl	8000118 <__udivsi3>
 8001818:	0003      	movs	r3, r0
 800181a:	0019      	movs	r1, r3
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	227f      	movs	r2, #127	; 0x7f
 8001824:	4013      	ands	r3, r2
 8001826:	434b      	muls	r3, r1
 8001828:	617b      	str	r3, [r7, #20]
        break;
 800182a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0f5b      	lsrs	r3, r3, #29
 8001832:	2207      	movs	r2, #7
 8001834:	4013      	ands	r3, r2
 8001836:	3301      	adds	r3, #1
 8001838:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	6978      	ldr	r0, [r7, #20]
 800183e:	f7fe fc6b 	bl	8000118 <__udivsi3>
 8001842:	0003      	movs	r3, r0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e015      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2238      	movs	r2, #56	; 0x38
 800184e:	4013      	ands	r3, r2
 8001850:	2b20      	cmp	r3, #32
 8001852:	d103      	bne.n	800185c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2238      	movs	r2, #56	; 0x38
 8001862:	4013      	ands	r3, r2
 8001864:	2b18      	cmp	r3, #24
 8001866:	d103      	bne.n	8001870 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001868:	23fa      	movs	r3, #250	; 0xfa
 800186a:	01db      	lsls	r3, r3, #7
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	e001      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001874:	693b      	ldr	r3, [r7, #16]
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b006      	add	sp, #24
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	40021000 	.word	0x40021000
 8001884:	00f42400 	.word	0x00f42400
 8001888:	007a1200 	.word	0x007a1200

0800188c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <HAL_RCC_GetHCLKFreq+0x10>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80018a4:	f7ff fff2 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018a8:	0004      	movs	r4, r0
 80018aa:	f7ff fb49 	bl	8000f40 <LL_RCC_GetAPB1Prescaler>
 80018ae:	0003      	movs	r3, r0
 80018b0:	0b1a      	lsrs	r2, r3, #12
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	58d3      	ldr	r3, [r2, r3]
 80018b8:	221f      	movs	r2, #31
 80018ba:	4013      	ands	r3, r2
 80018bc:	40dc      	lsrs	r4, r3
 80018be:	0023      	movs	r3, r4
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bdb0      	pop	{r4, r5, r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	08005484 	.word	0x08005484

080018cc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_RCC_GetClockConfig+0x4c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2207      	movs	r2, #7
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_GetClockConfig+0x4c>)
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	23f0      	movs	r3, #240	; 0xf0
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	401a      	ands	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_RCC_GetClockConfig+0x4c>)
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	23e0      	movs	r3, #224	; 0xe0
 80018fc:	01db      	lsls	r3, r3, #7
 80018fe:	401a      	ands	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_GetClockConfig+0x50>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2207      	movs	r2, #7
 800190a:	401a      	ands	r2, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	601a      	str	r2, [r3, #0]
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	40022000 	.word	0x40022000

08001920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001928:	2313      	movs	r3, #19
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001930:	2312      	movs	r3, #18
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	029b      	lsls	r3, r3, #10
 8001940:	4013      	ands	r3, r2
 8001942:	d100      	bne.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001944:	e0a3      	b.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001946:	2011      	movs	r0, #17
 8001948:	183b      	adds	r3, r7, r0
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b86      	ldr	r3, [pc, #536]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	055b      	lsls	r3, r3, #21
 8001956:	4013      	ands	r3, r2
 8001958:	d110      	bne.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b83      	ldr	r3, [pc, #524]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800195c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800195e:	4b82      	ldr	r3, [pc, #520]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	0549      	lsls	r1, r1, #21
 8001964:	430a      	orrs	r2, r1
 8001966:	63da      	str	r2, [r3, #60]	; 0x3c
 8001968:	4b7f      	ldr	r3, [pc, #508]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800196a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	055b      	lsls	r3, r3, #21
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001976:	183b      	adds	r3, r7, r0
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800197c:	4b7b      	ldr	r3, [pc, #492]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b7a      	ldr	r3, [pc, #488]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	0049      	lsls	r1, r1, #1
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800198a:	f7ff f87d 	bl	8000a88 <HAL_GetTick>
 800198e:	0003      	movs	r3, r0
 8001990:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001992:	e00b      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001994:	f7ff f878 	bl	8000a88 <HAL_GetTick>
 8001998:	0002      	movs	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d904      	bls.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80019a2:	2313      	movs	r3, #19
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2203      	movs	r2, #3
 80019a8:	701a      	strb	r2, [r3, #0]
        break;
 80019aa:	e005      	b.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019ac:	4b6f      	ldr	r3, [pc, #444]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	d0ed      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80019b8:	2313      	movs	r3, #19
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d154      	bne.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80019c2:	4b69      	ldr	r3, [pc, #420]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4013      	ands	r3, r2
 80019cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d019      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d014      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80019de:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	4a63      	ldr	r2, [pc, #396]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80019e8:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ec:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	0249      	lsls	r1, r1, #9
 80019f2:	430a      	orrs	r2, r1
 80019f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019f6:	4b5c      	ldr	r3, [pc, #368]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019fa:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019fc:	495d      	ldr	r1, [pc, #372]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a02:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d016      	beq.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff f83a 	bl	8000a88 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a18:	e00c      	b.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff f835 	bl	8000a88 <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	4a54      	ldr	r2, [pc, #336]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d904      	bls.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001a2a:	2313      	movs	r3, #19
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	2203      	movs	r2, #3
 8001a30:	701a      	strb	r2, [r3, #0]
            break;
 8001a32:	e004      	b.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a34:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d0ed      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001a3e:	2313      	movs	r3, #19
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10a      	bne.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a48:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	4a48      	ldr	r2, [pc, #288]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a5c:	e00c      	b.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001a5e:	2312      	movs	r3, #18
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	2213      	movs	r2, #19
 8001a64:	18ba      	adds	r2, r7, r2
 8001a66:	7812      	ldrb	r2, [r2, #0]
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	e005      	b.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a6c:	2312      	movs	r3, #18
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	2213      	movs	r2, #19
 8001a72:	18ba      	adds	r2, r7, r2
 8001a74:	7812      	ldrb	r2, [r2, #0]
 8001a76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a78:	2311      	movs	r3, #17
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d105      	bne.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a82:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a88:	493c      	ldr	r1, [pc, #240]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	d009      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	4393      	bics	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d009      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aba:	220c      	movs	r2, #12
 8001abc:	4393      	bics	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d009      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad8:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	0019      	movs	r1, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	01db      	lsls	r3, r3, #7
 8001af0:	4013      	ands	r3, r2
 8001af2:	d015      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	0899      	lsrs	r1, r3, #2
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b02:	430a      	orrs	r2, r1
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	05db      	lsls	r3, r3, #23
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d106      	bne.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0249      	lsls	r1, r1, #9
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d016      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	01db      	lsls	r3, r3, #7
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	0249      	lsls	r1, r1, #9
 8001b56:	430a      	orrs	r2, r1
 8001b58:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001b5a:	2312      	movs	r3, #18
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	781b      	ldrb	r3, [r3, #0]
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b006      	add	sp, #24
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	fffffcff 	.word	0xfffffcff
 8001b74:	fffeffff 	.word	0xfffeffff
 8001b78:	00001388 	.word	0x00001388
 8001b7c:	efffffff 	.word	0xefffffff
 8001b80:	ffffcfff 	.word	0xffffcfff
 8001b84:	ffff3fff 	.word	0xffff3fff

08001b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e04a      	b.n	8001c30 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	223d      	movs	r2, #61	; 0x3d
 8001b9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d107      	bne.n	8001bb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	223c      	movs	r2, #60	; 0x3c
 8001baa:	2100      	movs	r1, #0
 8001bac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 f841 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	223d      	movs	r2, #61	; 0x3d
 8001bba:	2102      	movs	r1, #2
 8001bbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	0010      	movs	r0, r2
 8001bca:	f000 f9e5 	bl	8001f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2248      	movs	r2, #72	; 0x48
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	223e      	movs	r2, #62	; 0x3e
 8001bda:	2101      	movs	r1, #1
 8001bdc:	5499      	strb	r1, [r3, r2]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	223f      	movs	r2, #63	; 0x3f
 8001be2:	2101      	movs	r1, #1
 8001be4:	5499      	strb	r1, [r3, r2]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2240      	movs	r2, #64	; 0x40
 8001bea:	2101      	movs	r1, #1
 8001bec:	5499      	strb	r1, [r3, r2]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2241      	movs	r2, #65	; 0x41
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	5499      	strb	r1, [r3, r2]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2242      	movs	r2, #66	; 0x42
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	5499      	strb	r1, [r3, r2]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2243      	movs	r2, #67	; 0x43
 8001c02:	2101      	movs	r1, #1
 8001c04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2244      	movs	r2, #68	; 0x44
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	5499      	strb	r1, [r3, r2]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2245      	movs	r2, #69	; 0x45
 8001c12:	2101      	movs	r1, #1
 8001c14:	5499      	strb	r1, [r3, r2]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2246      	movs	r2, #70	; 0x46
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	5499      	strb	r1, [r3, r2]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2247      	movs	r2, #71	; 0x47
 8001c22:	2101      	movs	r1, #1
 8001c24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	223d      	movs	r2, #61	; 0x3d
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b002      	add	sp, #8
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	223d      	movs	r2, #61	; 0x3d
 8001c54:	5c9b      	ldrb	r3, [r3, r2]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d001      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e03c      	b.n	8001cda <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	223d      	movs	r2, #61	; 0x3d
 8001c64:	2102      	movs	r1, #2
 8001c66:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2101      	movs	r1, #1
 8001c74:	430a      	orrs	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d009      	beq.n	8001c96 <HAL_TIM_Base_Start_IT+0x4e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d004      	beq.n	8001c96 <HAL_TIM_Base_Start_IT+0x4e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a16      	ldr	r2, [pc, #88]	; (8001cec <HAL_TIM_Base_Start_IT+0xa4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d116      	bne.n	8001cc4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_TIM_Base_Start_IT+0xa8>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b06      	cmp	r3, #6
 8001ca6:	d016      	beq.n	8001cd6 <HAL_TIM_Base_Start_IT+0x8e>
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	025b      	lsls	r3, r3, #9
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d011      	beq.n	8001cd6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc2:	e008      	b.n	8001cd6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e000      	b.n	8001cd8 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	0018      	movs	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b004      	add	sp, #16
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	40012c00 	.word	0x40012c00
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	40014000 	.word	0x40014000
 8001cf0:	00010007 	.word	0x00010007

08001cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2202      	movs	r2, #2
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d124      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2202      	movs	r2, #2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d11d      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	4252      	negs	r2, r2
 8001d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2203      	movs	r2, #3
 8001d30:	4013      	ands	r3, r2
 8001d32:	d004      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 f916 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e007      	b.n	8001d4e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f000 f909 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 f915 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d125      	bne.n	8001dae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d11e      	bne.n	8001dae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2205      	movs	r2, #5
 8001d76:	4252      	negs	r2, r2
 8001d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	23c0      	movs	r3, #192	; 0xc0
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f000 f8e9 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 8001d96:	e007      	b.n	8001da8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 f8dc 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 f8e8 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	2208      	movs	r2, #8
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d124      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d11d      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2209      	movs	r2, #9
 8001dd0:	4252      	negs	r2, r2
 8001dd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2203      	movs	r2, #3
 8001de2:	4013      	ands	r3, r2
 8001de4:	d004      	beq.n	8001df0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 f8bd 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 8001dee:	e007      	b.n	8001e00 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f000 f8b0 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 f8bc 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d125      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b10      	cmp	r3, #16
 8001e20:	d11e      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2211      	movs	r2, #17
 8001e28:	4252      	negs	r2, r2
 8001e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2208      	movs	r2, #8
 8001e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69da      	ldr	r2, [r3, #28]
 8001e38:	23c0      	movs	r3, #192	; 0xc0
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 f890 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 8001e48:	e007      	b.n	8001e5a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f000 f883 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	0018      	movs	r0, r3
 8001e56:	f000 f88f 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2201      	movs	r2, #1
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d10f      	bne.n	8001e8e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d108      	bne.n	8001e8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2202      	movs	r2, #2
 8001e82:	4252      	negs	r2, r2
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7fe fc69 	bl	8000760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b80      	cmp	r3, #128	; 0x80
 8001e9a:	d10f      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b80      	cmp	r3, #128	; 0x80
 8001ea8:	d108      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2281      	movs	r2, #129	; 0x81
 8001eb0:	4252      	negs	r2, r2
 8001eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 f8ec 	bl	8002094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d10e      	bne.n	8001eee <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b80      	cmp	r3, #128	; 0x80
 8001edc:	d107      	bne.n	8001eee <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <HAL_TIM_IRQHandler+0x260>)
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 f8db 	bl	80020a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2240      	movs	r2, #64	; 0x40
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d10f      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2240      	movs	r2, #64	; 0x40
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d108      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2241      	movs	r2, #65	; 0x41
 8001f10:	4252      	negs	r2, r2
 8001f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 f836 	bl	8001f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	2220      	movs	r2, #32
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d10f      	bne.n	8001f4a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d108      	bne.n	8001f4a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2221      	movs	r2, #33	; 0x21
 8001f3e:	4252      	negs	r2, r2
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 f89d 	bl	8002084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	fffffeff 	.word	0xfffffeff

08001f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <TIM_Base_SetConfig+0xd0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d003      	beq.n	8001fb8 <TIM_Base_SetConfig+0x20>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a2e      	ldr	r2, [pc, #184]	; (800206c <TIM_Base_SetConfig+0xd4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d108      	bne.n	8001fca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2270      	movs	r2, #112	; 0x70
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a26      	ldr	r2, [pc, #152]	; (8002068 <TIM_Base_SetConfig+0xd0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <TIM_Base_SetConfig+0x62>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a25      	ldr	r2, [pc, #148]	; (800206c <TIM_Base_SetConfig+0xd4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00f      	beq.n	8001ffa <TIM_Base_SetConfig+0x62>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a24      	ldr	r2, [pc, #144]	; (8002070 <TIM_Base_SetConfig+0xd8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00b      	beq.n	8001ffa <TIM_Base_SetConfig+0x62>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a23      	ldr	r2, [pc, #140]	; (8002074 <TIM_Base_SetConfig+0xdc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <TIM_Base_SetConfig+0x62>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a22      	ldr	r2, [pc, #136]	; (8002078 <TIM_Base_SetConfig+0xe0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <TIM_Base_SetConfig+0x62>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a21      	ldr	r2, [pc, #132]	; (800207c <TIM_Base_SetConfig+0xe4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d108      	bne.n	800200c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4a20      	ldr	r2, [pc, #128]	; (8002080 <TIM_Base_SetConfig+0xe8>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	4393      	bics	r3, r2
 8002012:	001a      	movs	r2, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <TIM_Base_SetConfig+0xd0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00b      	beq.n	8002052 <TIM_Base_SetConfig+0xba>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <TIM_Base_SetConfig+0xdc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <TIM_Base_SetConfig+0xba>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <TIM_Base_SetConfig+0xe0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d003      	beq.n	8002052 <TIM_Base_SetConfig+0xba>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a0b      	ldr	r2, [pc, #44]	; (800207c <TIM_Base_SetConfig+0xe4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d103      	bne.n	800205a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	615a      	str	r2, [r3, #20]
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b004      	add	sp, #16
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40000400 	.word	0x40000400
 8002070:	40002000 	.word	0x40002000
 8002074:	40014000 	.word	0x40014000
 8002078:	40014400 	.word	0x40014400
 800207c:	40014800 	.word	0x40014800
 8002080:	fffffcff 	.word	0xfffffcff

08002084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e046      	b.n	8002154 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2288      	movs	r2, #136	; 0x88
 80020ca:	589b      	ldr	r3, [r3, r2]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d107      	bne.n	80020e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2284      	movs	r2, #132	; 0x84
 80020d4:	2100      	movs	r1, #0
 80020d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	0018      	movs	r0, r3
 80020dc:	f7fe fb7c 	bl	80007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2288      	movs	r2, #136	; 0x88
 80020e4:	2124      	movs	r1, #36	; 0x24
 80020e6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2101      	movs	r1, #1
 80020f4:	438a      	bics	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 f8cc 	bl	8002298 <UART_SetConfig>
 8002100:	0003      	movs	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e024      	b.n	8002154 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f000 fa63 	bl	80025e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	490d      	ldr	r1, [pc, #52]	; (800215c <HAL_UART_Init+0xa8>)
 8002126:	400a      	ands	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	212a      	movs	r1, #42	; 0x2a
 8002136:	438a      	bics	r2, r1
 8002138:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	430a      	orrs	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f000 fafb 	bl	8002748 <UART_CheckIdleState>
 8002152:	0003      	movs	r3, r0
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b002      	add	sp, #8
 800215a:	bd80      	pop	{r7, pc}
 800215c:	ffffb7ff 	.word	0xffffb7ff

08002160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	1dbb      	adds	r3, r7, #6
 800216e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2288      	movs	r2, #136	; 0x88
 8002174:	589b      	ldr	r3, [r3, r2]
 8002176:	2b20      	cmp	r3, #32
 8002178:	d000      	beq.n	800217c <HAL_UART_Transmit+0x1c>
 800217a:	e088      	b.n	800228e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_UART_Transmit+0x2a>
 8002182:	1dbb      	adds	r3, r7, #6
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e080      	b.n	8002290 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	015b      	lsls	r3, r3, #5
 8002196:	429a      	cmp	r2, r3
 8002198:	d109      	bne.n	80021ae <HAL_UART_Transmit+0x4e>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2201      	movs	r2, #1
 80021a6:	4013      	ands	r3, r2
 80021a8:	d001      	beq.n	80021ae <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e070      	b.n	8002290 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2290      	movs	r2, #144	; 0x90
 80021b2:	2100      	movs	r1, #0
 80021b4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2288      	movs	r2, #136	; 0x88
 80021ba:	2121      	movs	r1, #33	; 0x21
 80021bc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021be:	f7fe fc63 	bl	8000a88 <HAL_GetTick>
 80021c2:	0003      	movs	r3, r0
 80021c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1dba      	adds	r2, r7, #6
 80021ca:	2154      	movs	r1, #84	; 0x54
 80021cc:	8812      	ldrh	r2, [r2, #0]
 80021ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1dba      	adds	r2, r7, #6
 80021d4:	2156      	movs	r1, #86	; 0x56
 80021d6:	8812      	ldrh	r2, [r2, #0]
 80021d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	015b      	lsls	r3, r3, #5
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d108      	bne.n	80021f8 <HAL_UART_Transmit+0x98>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d104      	bne.n	80021f8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	e003      	b.n	8002200 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002200:	e02c      	b.n	800225c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	0013      	movs	r3, r2
 800220c:	2200      	movs	r2, #0
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	f000 fae8 	bl	80027e4 <UART_WaitOnFlagUntilTimeout>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d001      	beq.n	800221c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e039      	b.n	8002290 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	001a      	movs	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	05d2      	lsls	r2, r2, #23
 800222e:	0dd2      	lsrs	r2, r2, #23
 8002230:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	3302      	adds	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	e007      	b.n	800224a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2256      	movs	r2, #86	; 0x56
 800224e:	5a9b      	ldrh	r3, [r3, r2]
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b299      	uxth	r1, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2256      	movs	r2, #86	; 0x56
 800225a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2256      	movs	r2, #86	; 0x56
 8002260:	5a9b      	ldrh	r3, [r3, r2]
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1cc      	bne.n	8002202 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	0013      	movs	r3, r2
 8002272:	2200      	movs	r2, #0
 8002274:	2140      	movs	r1, #64	; 0x40
 8002276:	f000 fab5 	bl	80027e4 <UART_WaitOnFlagUntilTimeout>
 800227a:	1e03      	subs	r3, r0, #0
 800227c:	d001      	beq.n	8002282 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e006      	b.n	8002290 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2288      	movs	r2, #136	; 0x88
 8002286:	2120      	movs	r1, #32
 8002288:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800228e:	2302      	movs	r3, #2
  }
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b008      	add	sp, #32
 8002296:	bd80      	pop	{r7, pc}

08002298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022a0:	231a      	movs	r3, #26
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4abc      	ldr	r2, [pc, #752]	; (80025b8 <UART_SetConfig+0x320>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4ab7      	ldr	r2, [pc, #732]	; (80025bc <UART_SetConfig+0x324>)
 80022de:	4013      	ands	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4aae      	ldr	r2, [pc, #696]	; (80025c0 <UART_SetConfig+0x328>)
 8002306:	4013      	ands	r3, r2
 8002308:	0019      	movs	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	220f      	movs	r2, #15
 800231c:	4393      	bics	r3, r2
 800231e:	0019      	movs	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4aa4      	ldr	r2, [pc, #656]	; (80025c4 <UART_SetConfig+0x32c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d127      	bne.n	8002386 <UART_SetConfig+0xee>
 8002336:	4ba4      	ldr	r3, [pc, #656]	; (80025c8 <UART_SetConfig+0x330>)
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	2203      	movs	r2, #3
 800233c:	4013      	ands	r3, r2
 800233e:	2b03      	cmp	r3, #3
 8002340:	d017      	beq.n	8002372 <UART_SetConfig+0xda>
 8002342:	d81b      	bhi.n	800237c <UART_SetConfig+0xe4>
 8002344:	2b02      	cmp	r3, #2
 8002346:	d00a      	beq.n	800235e <UART_SetConfig+0xc6>
 8002348:	d818      	bhi.n	800237c <UART_SetConfig+0xe4>
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <UART_SetConfig+0xbc>
 800234e:	2b01      	cmp	r3, #1
 8002350:	d00a      	beq.n	8002368 <UART_SetConfig+0xd0>
 8002352:	e013      	b.n	800237c <UART_SetConfig+0xe4>
 8002354:	231b      	movs	r3, #27
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	e058      	b.n	8002410 <UART_SetConfig+0x178>
 800235e:	231b      	movs	r3, #27
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	2202      	movs	r2, #2
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e053      	b.n	8002410 <UART_SetConfig+0x178>
 8002368:	231b      	movs	r3, #27
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	2204      	movs	r2, #4
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e04e      	b.n	8002410 <UART_SetConfig+0x178>
 8002372:	231b      	movs	r3, #27
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	2208      	movs	r2, #8
 8002378:	701a      	strb	r2, [r3, #0]
 800237a:	e049      	b.n	8002410 <UART_SetConfig+0x178>
 800237c:	231b      	movs	r3, #27
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	2210      	movs	r2, #16
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	e044      	b.n	8002410 <UART_SetConfig+0x178>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a90      	ldr	r2, [pc, #576]	; (80025cc <UART_SetConfig+0x334>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d127      	bne.n	80023e0 <UART_SetConfig+0x148>
 8002390:	4b8d      	ldr	r3, [pc, #564]	; (80025c8 <UART_SetConfig+0x330>)
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	220c      	movs	r2, #12
 8002396:	4013      	ands	r3, r2
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d017      	beq.n	80023cc <UART_SetConfig+0x134>
 800239c:	d81b      	bhi.n	80023d6 <UART_SetConfig+0x13e>
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d00a      	beq.n	80023b8 <UART_SetConfig+0x120>
 80023a2:	d818      	bhi.n	80023d6 <UART_SetConfig+0x13e>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <UART_SetConfig+0x116>
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d00a      	beq.n	80023c2 <UART_SetConfig+0x12a>
 80023ac:	e013      	b.n	80023d6 <UART_SetConfig+0x13e>
 80023ae:	231b      	movs	r3, #27
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	e02b      	b.n	8002410 <UART_SetConfig+0x178>
 80023b8:	231b      	movs	r3, #27
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2202      	movs	r2, #2
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e026      	b.n	8002410 <UART_SetConfig+0x178>
 80023c2:	231b      	movs	r3, #27
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2204      	movs	r2, #4
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e021      	b.n	8002410 <UART_SetConfig+0x178>
 80023cc:	231b      	movs	r3, #27
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2208      	movs	r2, #8
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e01c      	b.n	8002410 <UART_SetConfig+0x178>
 80023d6:	231b      	movs	r3, #27
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2210      	movs	r2, #16
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e017      	b.n	8002410 <UART_SetConfig+0x178>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a7a      	ldr	r2, [pc, #488]	; (80025d0 <UART_SetConfig+0x338>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d104      	bne.n	80023f4 <UART_SetConfig+0x15c>
 80023ea:	231b      	movs	r3, #27
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e00d      	b.n	8002410 <UART_SetConfig+0x178>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a76      	ldr	r2, [pc, #472]	; (80025d4 <UART_SetConfig+0x33c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d104      	bne.n	8002408 <UART_SetConfig+0x170>
 80023fe:	231b      	movs	r3, #27
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e003      	b.n	8002410 <UART_SetConfig+0x178>
 8002408:	231b      	movs	r3, #27
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2210      	movs	r2, #16
 800240e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	429a      	cmp	r2, r3
 800241a:	d000      	beq.n	800241e <UART_SetConfig+0x186>
 800241c:	e065      	b.n	80024ea <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800241e:	231b      	movs	r3, #27
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d015      	beq.n	8002454 <UART_SetConfig+0x1bc>
 8002428:	dc18      	bgt.n	800245c <UART_SetConfig+0x1c4>
 800242a:	2b04      	cmp	r3, #4
 800242c:	d00d      	beq.n	800244a <UART_SetConfig+0x1b2>
 800242e:	dc15      	bgt.n	800245c <UART_SetConfig+0x1c4>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <UART_SetConfig+0x1a2>
 8002434:	2b02      	cmp	r3, #2
 8002436:	d005      	beq.n	8002444 <UART_SetConfig+0x1ac>
 8002438:	e010      	b.n	800245c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800243a:	f7ff fa31 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 800243e:	0003      	movs	r3, r0
 8002440:	617b      	str	r3, [r7, #20]
        break;
 8002442:	e012      	b.n	800246a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002444:	4b64      	ldr	r3, [pc, #400]	; (80025d8 <UART_SetConfig+0x340>)
 8002446:	617b      	str	r3, [r7, #20]
        break;
 8002448:	e00f      	b.n	800246a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800244a:	f7ff f99d 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 800244e:	0003      	movs	r3, r0
 8002450:	617b      	str	r3, [r7, #20]
        break;
 8002452:	e00a      	b.n	800246a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	617b      	str	r3, [r7, #20]
        break;
 800245a:	e006      	b.n	800246a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002460:	231a      	movs	r3, #26
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
        break;
 8002468:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d100      	bne.n	8002472 <UART_SetConfig+0x1da>
 8002470:	e08d      	b.n	800258e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002476:	4b59      	ldr	r3, [pc, #356]	; (80025dc <UART_SetConfig+0x344>)
 8002478:	0052      	lsls	r2, r2, #1
 800247a:	5ad3      	ldrh	r3, [r2, r3]
 800247c:	0019      	movs	r1, r3
 800247e:	6978      	ldr	r0, [r7, #20]
 8002480:	f7fd fe4a 	bl	8000118 <__udivsi3>
 8002484:	0003      	movs	r3, r0
 8002486:	005a      	lsls	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	18d2      	adds	r2, r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0019      	movs	r1, r3
 8002496:	0010      	movs	r0, r2
 8002498:	f7fd fe3e 	bl	8000118 <__udivsi3>
 800249c:	0003      	movs	r3, r0
 800249e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	d91c      	bls.n	80024e0 <UART_SetConfig+0x248>
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	025b      	lsls	r3, r3, #9
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d217      	bcs.n	80024e0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	200e      	movs	r0, #14
 80024b6:	183b      	adds	r3, r7, r0
 80024b8:	210f      	movs	r1, #15
 80024ba:	438a      	bics	r2, r1
 80024bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2207      	movs	r2, #7
 80024c6:	4013      	ands	r3, r2
 80024c8:	b299      	uxth	r1, r3
 80024ca:	183b      	adds	r3, r7, r0
 80024cc:	183a      	adds	r2, r7, r0
 80024ce:	8812      	ldrh	r2, [r2, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	183a      	adds	r2, r7, r0
 80024da:	8812      	ldrh	r2, [r2, #0]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	e056      	b.n	800258e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80024e0:	231a      	movs	r3, #26
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e051      	b.n	800258e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024ea:	231b      	movs	r3, #27
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d015      	beq.n	8002520 <UART_SetConfig+0x288>
 80024f4:	dc18      	bgt.n	8002528 <UART_SetConfig+0x290>
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d00d      	beq.n	8002516 <UART_SetConfig+0x27e>
 80024fa:	dc15      	bgt.n	8002528 <UART_SetConfig+0x290>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <UART_SetConfig+0x26e>
 8002500:	2b02      	cmp	r3, #2
 8002502:	d005      	beq.n	8002510 <UART_SetConfig+0x278>
 8002504:	e010      	b.n	8002528 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002506:	f7ff f9cb 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 800250a:	0003      	movs	r3, r0
 800250c:	617b      	str	r3, [r7, #20]
        break;
 800250e:	e012      	b.n	8002536 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002510:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <UART_SetConfig+0x340>)
 8002512:	617b      	str	r3, [r7, #20]
        break;
 8002514:	e00f      	b.n	8002536 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002516:	f7ff f937 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 800251a:	0003      	movs	r3, r0
 800251c:	617b      	str	r3, [r7, #20]
        break;
 800251e:	e00a      	b.n	8002536 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	617b      	str	r3, [r7, #20]
        break;
 8002526:	e006      	b.n	8002536 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800252c:	231a      	movs	r3, #26
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
        break;
 8002534:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d028      	beq.n	800258e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002540:	4b26      	ldr	r3, [pc, #152]	; (80025dc <UART_SetConfig+0x344>)
 8002542:	0052      	lsls	r2, r2, #1
 8002544:	5ad3      	ldrh	r3, [r2, r3]
 8002546:	0019      	movs	r1, r3
 8002548:	6978      	ldr	r0, [r7, #20]
 800254a:	f7fd fde5 	bl	8000118 <__udivsi3>
 800254e:	0003      	movs	r3, r0
 8002550:	001a      	movs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	085b      	lsrs	r3, r3, #1
 8002558:	18d2      	adds	r2, r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	0019      	movs	r1, r3
 8002560:	0010      	movs	r0, r2
 8002562:	f7fd fdd9 	bl	8000118 <__udivsi3>
 8002566:	0003      	movs	r3, r0
 8002568:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b0f      	cmp	r3, #15
 800256e:	d90a      	bls.n	8002586 <UART_SetConfig+0x2ee>
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	025b      	lsls	r3, r3, #9
 8002576:	429a      	cmp	r2, r3
 8002578:	d205      	bcs.n	8002586 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60da      	str	r2, [r3, #12]
 8002584:	e003      	b.n	800258e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002586:	231a      	movs	r3, #26
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	226a      	movs	r2, #106	; 0x6a
 8002592:	2101      	movs	r1, #1
 8002594:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2268      	movs	r2, #104	; 0x68
 800259a:	2101      	movs	r1, #1
 800259c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80025aa:	231a      	movs	r3, #26
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	781b      	ldrb	r3, [r3, #0]
}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b008      	add	sp, #32
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	cfff69f3 	.word	0xcfff69f3
 80025bc:	ffffcfff 	.word	0xffffcfff
 80025c0:	11fff4ff 	.word	0x11fff4ff
 80025c4:	40013800 	.word	0x40013800
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40004400 	.word	0x40004400
 80025d0:	40004800 	.word	0x40004800
 80025d4:	40004c00 	.word	0x40004c00
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	080054a4 	.word	0x080054a4

080025e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	2201      	movs	r2, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	d00b      	beq.n	800260a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a4a      	ldr	r2, [pc, #296]	; (8002724 <UART_AdvFeatureConfig+0x144>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d00b      	beq.n	800262c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a43      	ldr	r2, [pc, #268]	; (8002728 <UART_AdvFeatureConfig+0x148>)
 800261c:	4013      	ands	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	2204      	movs	r2, #4
 8002632:	4013      	ands	r3, r2
 8002634:	d00b      	beq.n	800264e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a3b      	ldr	r2, [pc, #236]	; (800272c <UART_AdvFeatureConfig+0x14c>)
 800263e:	4013      	ands	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	2208      	movs	r2, #8
 8002654:	4013      	ands	r3, r2
 8002656:	d00b      	beq.n	8002670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4a34      	ldr	r2, [pc, #208]	; (8002730 <UART_AdvFeatureConfig+0x150>)
 8002660:	4013      	ands	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	2210      	movs	r2, #16
 8002676:	4013      	ands	r3, r2
 8002678:	d00b      	beq.n	8002692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a2c      	ldr	r2, [pc, #176]	; (8002734 <UART_AdvFeatureConfig+0x154>)
 8002682:	4013      	ands	r3, r2
 8002684:	0019      	movs	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	2220      	movs	r2, #32
 8002698:	4013      	ands	r3, r2
 800269a:	d00b      	beq.n	80026b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4a25      	ldr	r2, [pc, #148]	; (8002738 <UART_AdvFeatureConfig+0x158>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	2240      	movs	r2, #64	; 0x40
 80026ba:	4013      	ands	r3, r2
 80026bc:	d01d      	beq.n	80026fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a1d      	ldr	r2, [pc, #116]	; (800273c <UART_AdvFeatureConfig+0x15c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	035b      	lsls	r3, r3, #13
 80026de:	429a      	cmp	r2, r3
 80026e0:	d10b      	bne.n	80026fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a15      	ldr	r2, [pc, #84]	; (8002740 <UART_AdvFeatureConfig+0x160>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	4013      	ands	r3, r2
 8002702:	d00b      	beq.n	800271c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <UART_AdvFeatureConfig+0x164>)
 800270c:	4013      	ands	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]
  }
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}
 8002724:	fffdffff 	.word	0xfffdffff
 8002728:	fffeffff 	.word	0xfffeffff
 800272c:	fffbffff 	.word	0xfffbffff
 8002730:	ffff7fff 	.word	0xffff7fff
 8002734:	ffffefff 	.word	0xffffefff
 8002738:	ffffdfff 	.word	0xffffdfff
 800273c:	ffefffff 	.word	0xffefffff
 8002740:	ff9fffff 	.word	0xff9fffff
 8002744:	fff7ffff 	.word	0xfff7ffff

08002748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af02      	add	r7, sp, #8
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2290      	movs	r2, #144	; 0x90
 8002754:	2100      	movs	r1, #0
 8002756:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002758:	f7fe f996 	bl	8000a88 <HAL_GetTick>
 800275c:	0003      	movs	r3, r0
 800275e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2208      	movs	r2, #8
 8002768:	4013      	ands	r3, r2
 800276a:	2b08      	cmp	r3, #8
 800276c:	d10c      	bne.n	8002788 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	0391      	lsls	r1, r2, #14
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <UART_CheckIdleState+0x98>)
 8002778:	9200      	str	r2, [sp, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	f000 f832 	bl	80027e4 <UART_WaitOnFlagUntilTimeout>
 8002780:	1e03      	subs	r3, r0, #0
 8002782:	d001      	beq.n	8002788 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e026      	b.n	80027d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2204      	movs	r2, #4
 8002790:	4013      	ands	r3, r2
 8002792:	2b04      	cmp	r3, #4
 8002794:	d10c      	bne.n	80027b0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	03d1      	lsls	r1, r2, #15
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	4a10      	ldr	r2, [pc, #64]	; (80027e0 <UART_CheckIdleState+0x98>)
 80027a0:	9200      	str	r2, [sp, #0]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f000 f81e 	bl	80027e4 <UART_WaitOnFlagUntilTimeout>
 80027a8:	1e03      	subs	r3, r0, #0
 80027aa:	d001      	beq.n	80027b0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e012      	b.n	80027d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2288      	movs	r2, #136	; 0x88
 80027b4:	2120      	movs	r1, #32
 80027b6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	228c      	movs	r2, #140	; 0x8c
 80027bc:	2120      	movs	r1, #32
 80027be:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2284      	movs	r2, #132	; 0x84
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b004      	add	sp, #16
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	01ffffff 	.word	0x01ffffff

080027e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b094      	sub	sp, #80	; 0x50
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f4:	e0a7      	b.n	8002946 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f8:	3301      	adds	r3, #1
 80027fa:	d100      	bne.n	80027fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80027fc:	e0a3      	b.n	8002946 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7fe f943 	bl	8000a88 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800280a:	429a      	cmp	r2, r3
 800280c:	d302      	bcc.n	8002814 <UART_WaitOnFlagUntilTimeout+0x30>
 800280e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002810:	2b00      	cmp	r3, #0
 8002812:	d13f      	bne.n	8002894 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002814:	f3ef 8310 	mrs	r3, PRIMASK
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800281c:	647b      	str	r3, [r7, #68]	; 0x44
 800281e:	2301      	movs	r3, #1
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	f383 8810 	msr	PRIMASK, r3
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	494e      	ldr	r1, [pc, #312]	; (8002970 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002836:	400a      	ands	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800283c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	f383 8810 	msr	PRIMASK, r3
}
 8002844:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002846:	f3ef 8310 	mrs	r3, PRIMASK
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284e:	643b      	str	r3, [r7, #64]	; 0x40
 8002850:	2301      	movs	r3, #1
 8002852:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	f383 8810 	msr	PRIMASK, r3
}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2101      	movs	r1, #1
 8002868:	438a      	bics	r2, r1
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002872:	f383 8810 	msr	PRIMASK, r3
}
 8002876:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2288      	movs	r2, #136	; 0x88
 800287c:	2120      	movs	r1, #32
 800287e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	228c      	movs	r2, #140	; 0x8c
 8002884:	2120      	movs	r1, #32
 8002886:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2284      	movs	r2, #132	; 0x84
 800288c:	2100      	movs	r1, #0
 800288e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e069      	b.n	8002968 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2204      	movs	r2, #4
 800289c:	4013      	ands	r3, r2
 800289e:	d052      	beq.n	8002946 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	401a      	ands	r2, r3
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d148      	bne.n	8002946 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028be:	f3ef 8310 	mrs	r3, PRIMASK
 80028c2:	613b      	str	r3, [r7, #16]
  return(result);
 80028c4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80028c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c8:	2301      	movs	r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f383 8810 	msr	PRIMASK, r3
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4924      	ldr	r1, [pc, #144]	; (8002970 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	f383 8810 	msr	PRIMASK, r3
}
 80028ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f0:	f3ef 8310 	mrs	r3, PRIMASK
 80028f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80028f6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028fa:	2301      	movs	r3, #1
 80028fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f383 8810 	msr	PRIMASK, r3
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	438a      	bics	r2, r1
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	f383 8810 	msr	PRIMASK, r3
}
 8002920:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2288      	movs	r2, #136	; 0x88
 8002926:	2120      	movs	r1, #32
 8002928:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	228c      	movs	r2, #140	; 0x8c
 800292e:	2120      	movs	r1, #32
 8002930:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2290      	movs	r2, #144	; 0x90
 8002936:	2120      	movs	r1, #32
 8002938:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2284      	movs	r2, #132	; 0x84
 800293e:	2100      	movs	r1, #0
 8002940:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e010      	b.n	8002968 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	425a      	negs	r2, r3
 8002956:	4153      	adcs	r3, r2
 8002958:	b2db      	uxtb	r3, r3
 800295a:	001a      	movs	r2, r3
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d100      	bne.n	8002966 <UART_WaitOnFlagUntilTimeout+0x182>
 8002964:	e747      	b.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b014      	add	sp, #80	; 0x50
 800296e:	bd80      	pop	{r7, pc}
 8002970:	fffffe5f 	.word	0xfffffe5f

08002974 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2284      	movs	r2, #132	; 0x84
 8002980:	5c9b      	ldrb	r3, [r3, r2]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_UARTEx_DisableFifoMode+0x16>
 8002986:	2302      	movs	r3, #2
 8002988:	e027      	b.n	80029da <HAL_UARTEx_DisableFifoMode+0x66>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2284      	movs	r2, #132	; 0x84
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2288      	movs	r2, #136	; 0x88
 8002996:	2124      	movs	r1, #36	; 0x24
 8002998:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	438a      	bics	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2288      	movs	r2, #136	; 0x88
 80029cc:	2120      	movs	r1, #32
 80029ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2284      	movs	r2, #132	; 0x84
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	dfffffff 	.word	0xdfffffff

080029e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2284      	movs	r2, #132	; 0x84
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e02e      	b.n	8002a5e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2284      	movs	r2, #132	; 0x84
 8002a04:	2101      	movs	r1, #1
 8002a06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2288      	movs	r2, #136	; 0x88
 8002a0c:	2124      	movs	r1, #36	; 0x24
 8002a0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	438a      	bics	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	08d9      	lsrs	r1, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f854 	bl	8002aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2288      	movs	r2, #136	; 0x88
 8002a50:	2120      	movs	r1, #32
 8002a52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2284      	movs	r2, #132	; 0x84
 8002a58:	2100      	movs	r1, #0
 8002a5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b004      	add	sp, #16
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2284      	movs	r2, #132	; 0x84
 8002a76:	5c9b      	ldrb	r3, [r3, r2]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e02f      	b.n	8002ae0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2284      	movs	r2, #132	; 0x84
 8002a84:	2101      	movs	r1, #1
 8002a86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2288      	movs	r2, #136	; 0x88
 8002a8c:	2124      	movs	r1, #36	; 0x24
 8002a8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	4a0e      	ldr	r2, [pc, #56]	; (8002ae8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f000 f813 	bl	8002aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2288      	movs	r2, #136	; 0x88
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2284      	movs	r2, #132	; 0x84
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	f1ffffff 	.word	0xf1ffffff

08002aec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d108      	bne.n	8002b0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	226a      	movs	r2, #106	; 0x6a
 8002b00:	2101      	movs	r1, #1
 8002b02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2268      	movs	r2, #104	; 0x68
 8002b08:	2101      	movs	r1, #1
 8002b0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002b0c:	e043      	b.n	8002b96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002b0e:	260f      	movs	r6, #15
 8002b10:	19bb      	adds	r3, r7, r6
 8002b12:	2208      	movs	r2, #8
 8002b14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002b16:	200e      	movs	r0, #14
 8002b18:	183b      	adds	r3, r7, r0
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	0e5b      	lsrs	r3, r3, #25
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	240d      	movs	r4, #13
 8002b2a:	193b      	adds	r3, r7, r4
 8002b2c:	2107      	movs	r1, #7
 8002b2e:	400a      	ands	r2, r1
 8002b30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	0f5b      	lsrs	r3, r3, #29
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	250c      	movs	r5, #12
 8002b3e:	197b      	adds	r3, r7, r5
 8002b40:	2107      	movs	r1, #7
 8002b42:	400a      	ands	r2, r1
 8002b44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002b46:	183b      	adds	r3, r7, r0
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	197a      	adds	r2, r7, r5
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	4914      	ldr	r1, [pc, #80]	; (8002ba0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002b50:	5c8a      	ldrb	r2, [r1, r2]
 8002b52:	435a      	muls	r2, r3
 8002b54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002b56:	197b      	adds	r3, r7, r5
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002b5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002b5e:	0019      	movs	r1, r3
 8002b60:	f7fd fb64 	bl	800022c <__divsi3>
 8002b64:	0003      	movs	r3, r0
 8002b66:	b299      	uxth	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	226a      	movs	r2, #106	; 0x6a
 8002b6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002b6e:	19bb      	adds	r3, r7, r6
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	193a      	adds	r2, r7, r4
 8002b74:	7812      	ldrb	r2, [r2, #0]
 8002b76:	490a      	ldr	r1, [pc, #40]	; (8002ba0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002b78:	5c8a      	ldrb	r2, [r1, r2]
 8002b7a:	435a      	muls	r2, r3
 8002b7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002b84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002b86:	0019      	movs	r1, r3
 8002b88:	f7fd fb50 	bl	800022c <__divsi3>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	b299      	uxth	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2268      	movs	r2, #104	; 0x68
 8002b94:	5299      	strh	r1, [r3, r2]
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b005      	add	sp, #20
 8002b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	080054bc 	.word	0x080054bc
 8002ba4:	080054c4 	.word	0x080054c4

08002ba8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	001a      	movs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4252      	negs	r2, r2
 8002bc0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3308      	adds	r3, #8
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b002      	add	sp, #8
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	d103      	bne.n	8002c18 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e00c      	b.n	8002c32 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	e002      	b.n	8002c26 <vListInsert+0x2c>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d2f6      	bcs.n	8002c20 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	601a      	str	r2, [r3, #0]
}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b004      	add	sp, #16
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6892      	ldr	r2, [r2, #8]
 8002c7c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6852      	ldr	r2, [r2, #4]
 8002c86:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d103      	bne.n	8002c9a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	1e5a      	subs	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b004      	add	sp, #16
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002cb6:	b5b0      	push	{r4, r5, r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <xQueueGenericReset+0x1c>
 8002cce:	b672      	cpsid	i
 8002cd0:	e7fe      	b.n	8002cd0 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d100      	bne.n	8002cda <xQueueGenericReset+0x24>
 8002cd8:	e06a      	b.n	8002db0 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d066      	beq.n	8002db0 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	2400      	movs	r4, #0
 8002cec:	0c15      	lsrs	r5, r2, #16
 8002cee:	0c19      	lsrs	r1, r3, #16
 8002cf0:	b2a8      	uxth	r0, r5
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d104      	bne.n	8002d00 <xQueueGenericReset+0x4a>
 8002cf6:	b288      	uxth	r0, r1
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	d013      	beq.n	8002d24 <xQueueGenericReset+0x6e>
 8002cfc:	1c10      	adds	r0, r2, #0
 8002cfe:	e004      	b.n	8002d0a <xQueueGenericReset+0x54>
 8002d00:	b289      	uxth	r1, r1
 8002d02:	2900      	cmp	r1, #0
 8002d04:	d10d      	bne.n	8002d22 <xQueueGenericReset+0x6c>
 8002d06:	1c29      	adds	r1, r5, #0
 8002d08:	1c18      	adds	r0, r3, #0
 8002d0a:	b292      	uxth	r2, r2
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	435a      	muls	r2, r3
 8002d10:	b283      	uxth	r3, r0
 8002d12:	b289      	uxth	r1, r1
 8002d14:	434b      	muls	r3, r1
 8002d16:	0c12      	lsrs	r2, r2, #16
 8002d18:	189b      	adds	r3, r3, r2
 8002d1a:	141b      	asrs	r3, r3, #16
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d000      	beq.n	8002d24 <xQueueGenericReset+0x6e>
 8002d22:	2401      	movs	r4, #1
 8002d24:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8002d26:	d143      	bne.n	8002db0 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8002d28:	f002 f8ba 	bl	8004ea0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	434b      	muls	r3, r1
 8002d3a:	18d2      	adds	r2, r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2200      	movs	r2, #0
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	1e59      	subs	r1, r3, #1
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	434b      	muls	r3, r1
 8002d5e:	18d2      	adds	r2, r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2244      	movs	r2, #68	; 0x44
 8002d68:	21ff      	movs	r1, #255	; 0xff
 8002d6a:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2245      	movs	r2, #69	; 0x45
 8002d70:	21ff      	movs	r1, #255	; 0xff
 8002d72:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10d      	bne.n	8002d96 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d013      	beq.n	8002daa <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	3310      	adds	r3, #16
 8002d86:	0018      	movs	r0, r3
 8002d88:	f001 f950 	bl	800402c <xTaskRemoveFromEventList>
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d00c      	beq.n	8002daa <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002d90:	f002 f876 	bl	8004e80 <vPortYield>
 8002d94:	e009      	b.n	8002daa <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3310      	adds	r3, #16
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f7ff ff04 	bl	8002ba8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	3324      	adds	r3, #36	; 0x24
 8002da4:	0018      	movs	r0, r3
 8002da6:	f7ff feff 	bl	8002ba8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002daa:	f002 f88b 	bl	8004ec4 <vPortExitCritical>
 8002dae:	e001      	b.n	8002db4 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <xQueueGenericReset+0x108>
 8002dba:	b672      	cpsid	i
 8002dbc:	e7fe      	b.n	8002dbc <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b004      	add	sp, #16
 8002dc6:	bdb0      	pop	{r4, r5, r7, pc}

08002dc8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dca:	b08b      	sub	sp, #44	; 0x2c
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d047      	beq.n	8002e70 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002de0:	2000      	movs	r0, #0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	0c19      	lsrs	r1, r3, #16
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1c1e      	adds	r6, r3, #0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	1c15      	adds	r5, r2, #0
 8002df2:	b28a      	uxth	r2, r1
 8002df4:	2a00      	cmp	r2, #0
 8002df6:	d105      	bne.n	8002e04 <xQueueGenericCreate+0x3c>
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	2a00      	cmp	r2, #0
 8002dfc:	d013      	beq.n	8002e26 <xQueueGenericCreate+0x5e>
 8002dfe:	1c19      	adds	r1, r3, #0
 8002e00:	1c34      	adds	r4, r6, #0
 8002e02:	e003      	b.n	8002e0c <xQueueGenericCreate+0x44>
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <xQueueGenericCreate+0x5c>
 8002e0a:	1c2c      	adds	r4, r5, #0
 8002e0c:	b2b3      	uxth	r3, r6
 8002e0e:	b2aa      	uxth	r2, r5
 8002e10:	435a      	muls	r2, r3
 8002e12:	b2a3      	uxth	r3, r4
 8002e14:	b289      	uxth	r1, r1
 8002e16:	434b      	muls	r3, r1
 8002e18:	0c12      	lsrs	r2, r2, #16
 8002e1a:	189b      	adds	r3, r3, r2
 8002e1c:	141b      	asrs	r3, r3, #16
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d000      	beq.n	8002e26 <xQueueGenericCreate+0x5e>
 8002e24:	2001      	movs	r0, #1
 8002e26:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002e28:	d122      	bne.n	8002e70 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002e30:	3351      	adds	r3, #81	; 0x51
 8002e32:	d81d      	bhi.n	8002e70 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4353      	muls	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	3350      	adds	r3, #80	; 0x50
 8002e40:	0018      	movs	r0, r3
 8002e42:	f002 f8c5 	bl	8004fd0 <pvPortMalloc>
 8002e46:	0003      	movs	r3, r0
 8002e48:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d014      	beq.n	8002e7a <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3350      	adds	r3, #80	; 0x50
 8002e58:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	781c      	ldrb	r4, [r3, #0]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	0023      	movs	r3, r4
 8002e6a:	f000 f80b 	bl	8002e84 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002e6e:	e004      	b.n	8002e7a <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <xQueueGenericCreate+0xb2>
 8002e76:	b672      	cpsid	i
 8002e78:	e7fe      	b.n	8002e78 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
    }
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b009      	add	sp, #36	; 0x24
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e84 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	001a      	movs	r2, r3
 8002e92:	1cfb      	adds	r3, r7, #3
 8002e94:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d103      	bne.n	8002ea4 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	e002      	b.n	8002eaa <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f7ff fefb 	bl	8002cb6 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	1cfa      	adds	r2, r7, #3
 8002ec4:	214c      	movs	r1, #76	; 0x4c
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b004      	add	sp, #16
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00e      	beq.n	8002efe <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	f000 f820 	bl	8002f3e <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b002      	add	sp, #8
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	1dfb      	adds	r3, r7, #7
 8002f10:	701a      	strb	r2, [r3, #0]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002f12:	2301      	movs	r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002f1a:	1dfb      	adds	r3, r7, #7
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	6939      	ldr	r1, [r7, #16]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7ff ff50 	bl	8002dc8 <xQueueGenericCreate>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	60fb      	str	r3, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7ff ffcf 	bl	8002ed2 <prvInitialiseMutex>

        return xNewQueue;
 8002f34:	68fb      	ldr	r3, [r7, #12]
    }
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b006      	add	sp, #24
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b08a      	sub	sp, #40	; 0x28
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <xQueueGenericSend+0x20>
 8002f5a:	b672      	cpsid	i
 8002f5c:	e7fe      	b.n	8002f5c <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <xQueueGenericSend+0x2e>
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <xQueueGenericSend+0x32>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <xQueueGenericSend+0x34>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <xQueueGenericSend+0x3c>
 8002f76:	b672      	cpsid	i
 8002f78:	e7fe      	b.n	8002f78 <xQueueGenericSend+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d103      	bne.n	8002f88 <xQueueGenericSend+0x4a>
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <xQueueGenericSend+0x4e>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <xQueueGenericSend+0x50>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <xQueueGenericSend+0x58>
 8002f92:	b672      	cpsid	i
 8002f94:	e7fe      	b.n	8002f94 <xQueueGenericSend+0x56>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f96:	f001 fa33 	bl	8004400 <xTaskGetSchedulerState>
 8002f9a:	1e03      	subs	r3, r0, #0
 8002f9c:	d102      	bne.n	8002fa4 <xQueueGenericSend+0x66>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <xQueueGenericSend+0x6a>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <xQueueGenericSend+0x6c>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <xQueueGenericSend+0x74>
 8002fae:	b672      	cpsid	i
 8002fb0:	e7fe      	b.n	8002fb0 <xQueueGenericSend+0x72>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002fb2:	f001 ff75 	bl	8004ea0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <xQueueGenericSend+0x8a>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d11e      	bne.n	8003006 <xQueueGenericSend+0xc8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 fa19 	bl	8003406 <prvCopyDataToQueue>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d009      	beq.n	8002ff4 <xQueueGenericSend+0xb6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	3324      	adds	r3, #36	; 0x24
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f001 f821 	bl	800402c <xTaskRemoveFromEventList>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d007      	beq.n	8002ffe <xQueueGenericSend+0xc0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002fee:	f001 ff47 	bl	8004e80 <vPortYield>
 8002ff2:	e004      	b.n	8002ffe <xQueueGenericSend+0xc0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <xQueueGenericSend+0xc0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002ffa:	f001 ff41 	bl	8004e80 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002ffe:	f001 ff61 	bl	8004ec4 <vPortExitCritical>
                return pdPASS;
 8003002:	2301      	movs	r3, #1
 8003004:	e05b      	b.n	80030be <xQueueGenericSend+0x180>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d103      	bne.n	8003014 <xQueueGenericSend+0xd6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800300c:	f001 ff5a 	bl	8004ec4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003010:	2300      	movs	r3, #0
 8003012:	e054      	b.n	80030be <xQueueGenericSend+0x180>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <xQueueGenericSend+0xea>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800301a:	2314      	movs	r3, #20
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	0018      	movs	r0, r3
 8003020:	f001 f8ce 	bl	80041c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003024:	2301      	movs	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003028:	f001 ff4c 	bl	8004ec4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800302c:	f000 fd42 	bl	8003ab4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003030:	f001 ff36 	bl	8004ea0 <vPortEnterCritical>
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	2244      	movs	r2, #68	; 0x44
 8003038:	5c9b      	ldrb	r3, [r3, r2]
 800303a:	b25b      	sxtb	r3, r3
 800303c:	3301      	adds	r3, #1
 800303e:	d103      	bne.n	8003048 <xQueueGenericSend+0x10a>
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	2244      	movs	r2, #68	; 0x44
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	2245      	movs	r2, #69	; 0x45
 800304c:	5c9b      	ldrb	r3, [r3, r2]
 800304e:	b25b      	sxtb	r3, r3
 8003050:	3301      	adds	r3, #1
 8003052:	d103      	bne.n	800305c <xQueueGenericSend+0x11e>
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	2245      	movs	r2, #69	; 0x45
 8003058:	2100      	movs	r1, #0
 800305a:	5499      	strb	r1, [r3, r2]
 800305c:	f001 ff32 	bl	8004ec4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003060:	1d3a      	adds	r2, r7, #4
 8003062:	2314      	movs	r3, #20
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	0011      	movs	r1, r2
 8003068:	0018      	movs	r0, r3
 800306a:	f001 f8bd 	bl	80041e8 <xTaskCheckForTimeOut>
 800306e:	1e03      	subs	r3, r0, #0
 8003070:	d11e      	bne.n	80030b0 <xQueueGenericSend+0x172>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 facb 	bl	8003610 <prvIsQueueFull>
 800307a:	1e03      	subs	r3, r0, #0
 800307c:	d011      	beq.n	80030a2 <xQueueGenericSend+0x164>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	3310      	adds	r3, #16
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	0011      	movs	r1, r2
 8003086:	0018      	movs	r0, r3
 8003088:	f000 ff74 	bl	8003f74 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	0018      	movs	r0, r3
 8003090:	f000 fa4a 	bl	8003528 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003094:	f000 fd1a 	bl	8003acc <xTaskResumeAll>
 8003098:	1e03      	subs	r3, r0, #0
 800309a:	d18a      	bne.n	8002fb2 <xQueueGenericSend+0x74>
                {
                    portYIELD_WITHIN_API();
 800309c:	f001 fef0 	bl	8004e80 <vPortYield>
 80030a0:	e787      	b.n	8002fb2 <xQueueGenericSend+0x74>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 fa3f 	bl	8003528 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030aa:	f000 fd0f 	bl	8003acc <xTaskResumeAll>
 80030ae:	e780      	b.n	8002fb2 <xQueueGenericSend+0x74>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 fa38 	bl	8003528 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80030b8:	f000 fd08 	bl	8003acc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80030bc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80030be:	0018      	movs	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b00a      	add	sp, #40	; 0x28
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b08a      	sub	sp, #40	; 0x28
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <xQueueReceive+0x1e>
 80030e0:	b672      	cpsid	i
 80030e2:	e7fe      	b.n	80030e2 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <xQueueReceive+0x2c>
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <xQueueReceive+0x30>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <xQueueReceive+0x32>
 80030f6:	2300      	movs	r3, #0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <xQueueReceive+0x3a>
 80030fc:	b672      	cpsid	i
 80030fe:	e7fe      	b.n	80030fe <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003100:	f001 f97e 	bl	8004400 <xTaskGetSchedulerState>
 8003104:	1e03      	subs	r3, r0, #0
 8003106:	d102      	bne.n	800310e <xQueueReceive+0x48>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <xQueueReceive+0x4c>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <xQueueReceive+0x4e>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <xQueueReceive+0x56>
 8003118:	b672      	cpsid	i
 800311a:	e7fe      	b.n	800311a <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800311c:	f001 fec0 	bl	8004ea0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01a      	beq.n	8003162 <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	0011      	movs	r1, r2
 8003132:	0018      	movs	r0, r3
 8003134:	f000 f9d2 	bl	80034dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	1e5a      	subs	r2, r3, #1
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	3310      	adds	r3, #16
 800314c:	0018      	movs	r0, r3
 800314e:	f000 ff6d 	bl	800402c <xTaskRemoveFromEventList>
 8003152:	1e03      	subs	r3, r0, #0
 8003154:	d001      	beq.n	800315a <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003156:	f001 fe93 	bl	8004e80 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800315a:	f001 feb3 	bl	8004ec4 <vPortExitCritical>
                return pdPASS;
 800315e:	2301      	movs	r3, #1
 8003160:	e062      	b.n	8003228 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003168:	f001 feac 	bl	8004ec4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800316c:	2300      	movs	r3, #0
 800316e:	e05b      	b.n	8003228 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003176:	2314      	movs	r3, #20
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	0018      	movs	r0, r3
 800317c:	f001 f820 	bl	80041c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003180:	2301      	movs	r3, #1
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003184:	f001 fe9e 	bl	8004ec4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003188:	f000 fc94 	bl	8003ab4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800318c:	f001 fe88 	bl	8004ea0 <vPortEnterCritical>
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	2244      	movs	r2, #68	; 0x44
 8003194:	5c9b      	ldrb	r3, [r3, r2]
 8003196:	b25b      	sxtb	r3, r3
 8003198:	3301      	adds	r3, #1
 800319a:	d103      	bne.n	80031a4 <xQueueReceive+0xde>
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	2244      	movs	r2, #68	; 0x44
 80031a0:	2100      	movs	r1, #0
 80031a2:	5499      	strb	r1, [r3, r2]
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	2245      	movs	r2, #69	; 0x45
 80031a8:	5c9b      	ldrb	r3, [r3, r2]
 80031aa:	b25b      	sxtb	r3, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	d103      	bne.n	80031b8 <xQueueReceive+0xf2>
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	2245      	movs	r2, #69	; 0x45
 80031b4:	2100      	movs	r1, #0
 80031b6:	5499      	strb	r1, [r3, r2]
 80031b8:	f001 fe84 	bl	8004ec4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031bc:	1d3a      	adds	r2, r7, #4
 80031be:	2314      	movs	r3, #20
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	0011      	movs	r1, r2
 80031c4:	0018      	movs	r0, r3
 80031c6:	f001 f80f 	bl	80041e8 <xTaskCheckForTimeOut>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d11e      	bne.n	800320c <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 fa07 	bl	80035e4 <prvIsQueueEmpty>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d011      	beq.n	80031fe <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	3324      	adds	r3, #36	; 0x24
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	0011      	movs	r1, r2
 80031e2:	0018      	movs	r0, r3
 80031e4:	f000 fec6 	bl	8003f74 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 f99c 	bl	8003528 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80031f0:	f000 fc6c 	bl	8003acc <xTaskResumeAll>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d191      	bne.n	800311c <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 80031f8:	f001 fe42 	bl	8004e80 <vPortYield>
 80031fc:	e78e      	b.n	800311c <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	0018      	movs	r0, r3
 8003202:	f000 f991 	bl	8003528 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003206:	f000 fc61 	bl	8003acc <xTaskResumeAll>
 800320a:	e787      	b.n	800311c <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f98a 	bl	8003528 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003214:	f000 fc5a 	bl	8003acc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	0018      	movs	r0, r3
 800321c:	f000 f9e2 	bl	80035e4 <prvIsQueueEmpty>
 8003220:	1e03      	subs	r3, r0, #0
 8003222:	d100      	bne.n	8003226 <xQueueReceive+0x160>
 8003224:	e77a      	b.n	800311c <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003226:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003228:	0018      	movs	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	b00a      	add	sp, #40	; 0x28
 800322e:	bd80      	pop	{r7, pc}

08003230 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003242:	2300      	movs	r3, #0
 8003244:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <xQueueSemaphoreTake+0x20>
 800324c:	b672      	cpsid	i
 800324e:	e7fe      	b.n	800324e <xQueueSemaphoreTake+0x1e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <xQueueSemaphoreTake+0x2c>
 8003258:	b672      	cpsid	i
 800325a:	e7fe      	b.n	800325a <xQueueSemaphoreTake+0x2a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800325c:	f001 f8d0 	bl	8004400 <xTaskGetSchedulerState>
 8003260:	1e03      	subs	r3, r0, #0
 8003262:	d102      	bne.n	800326a <xQueueSemaphoreTake+0x3a>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <xQueueSemaphoreTake+0x3e>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <xQueueSemaphoreTake+0x40>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <xQueueSemaphoreTake+0x48>
 8003274:	b672      	cpsid	i
 8003276:	e7fe      	b.n	8003276 <xQueueSemaphoreTake+0x46>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003278:	f001 fe12 	bl	8004ea0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01d      	beq.n	80032c4 <xQueueSemaphoreTake+0x94>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	1e5a      	subs	r2, r3, #1
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <xQueueSemaphoreTake+0x72>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003298:	f001 fa76 	bl	8004788 <pvTaskIncrementMutexHeldCount>
 800329c:	0002      	movs	r2, r0
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <xQueueSemaphoreTake+0x8c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3310      	adds	r3, #16
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 febc 	bl	800402c <xTaskRemoveFromEventList>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d001      	beq.n	80032bc <xQueueSemaphoreTake+0x8c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80032b8:	f001 fde2 	bl	8004e80 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80032bc:	f001 fe02 	bl	8004ec4 <vPortExitCritical>
                return pdPASS;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e086      	b.n	80033d2 <xQueueSemaphoreTake+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <xQueueSemaphoreTake+0xa2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80032ca:	f001 fdfb 	bl	8004ec4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e07f      	b.n	80033d2 <xQueueSemaphoreTake+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <xQueueSemaphoreTake+0xb6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80032d8:	230c      	movs	r3, #12
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	0018      	movs	r0, r3
 80032de:	f000 ff6f 	bl	80041c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80032e2:	2301      	movs	r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80032e6:	f001 fded 	bl	8004ec4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80032ea:	f000 fbe3 	bl	8003ab4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80032ee:	f001 fdd7 	bl	8004ea0 <vPortEnterCritical>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	2244      	movs	r2, #68	; 0x44
 80032f6:	5c9b      	ldrb	r3, [r3, r2]
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	d103      	bne.n	8003306 <xQueueSemaphoreTake+0xd6>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	2244      	movs	r2, #68	; 0x44
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2245      	movs	r2, #69	; 0x45
 800330a:	5c9b      	ldrb	r3, [r3, r2]
 800330c:	b25b      	sxtb	r3, r3
 800330e:	3301      	adds	r3, #1
 8003310:	d103      	bne.n	800331a <xQueueSemaphoreTake+0xea>
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2245      	movs	r2, #69	; 0x45
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]
 800331a:	f001 fdd3 	bl	8004ec4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800331e:	003a      	movs	r2, r7
 8003320:	230c      	movs	r3, #12
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	0011      	movs	r1, r2
 8003326:	0018      	movs	r0, r3
 8003328:	f000 ff5e 	bl	80041e8 <xTaskCheckForTimeOut>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d12e      	bne.n	800338e <xQueueSemaphoreTake+0x15e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 f956 	bl	80035e4 <prvIsQueueEmpty>
 8003338:	1e03      	subs	r3, r0, #0
 800333a:	d021      	beq.n	8003380 <xQueueSemaphoreTake+0x150>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <xQueueSemaphoreTake+0x12a>
                    {
                        taskENTER_CRITICAL();
 8003344:	f001 fdac 	bl	8004ea0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	0018      	movs	r0, r3
 800334e:	f001 f873 	bl	8004438 <xTaskPriorityInherit>
 8003352:	0003      	movs	r3, r0
 8003354:	623b      	str	r3, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8003356:	f001 fdb5 	bl	8004ec4 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3324      	adds	r3, #36	; 0x24
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	0011      	movs	r1, r2
 8003362:	0018      	movs	r0, r3
 8003364:	f000 fe06 	bl	8003f74 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	0018      	movs	r0, r3
 800336c:	f000 f8dc 	bl	8003528 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003370:	f000 fbac 	bl	8003acc <xTaskResumeAll>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d000      	beq.n	800337a <xQueueSemaphoreTake+0x14a>
 8003378:	e77e      	b.n	8003278 <xQueueSemaphoreTake+0x48>
                {
                    portYIELD_WITHIN_API();
 800337a:	f001 fd81 	bl	8004e80 <vPortYield>
 800337e:	e77b      	b.n	8003278 <xQueueSemaphoreTake+0x48>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	0018      	movs	r0, r3
 8003384:	f000 f8d0 	bl	8003528 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003388:	f000 fba0 	bl	8003acc <xTaskResumeAll>
 800338c:	e774      	b.n	8003278 <xQueueSemaphoreTake+0x48>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	0018      	movs	r0, r3
 8003392:	f000 f8c9 	bl	8003528 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003396:	f000 fb99 	bl	8003acc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	0018      	movs	r0, r3
 800339e:	f000 f921 	bl	80035e4 <prvIsQueueEmpty>
 80033a2:	1e03      	subs	r3, r0, #0
 80033a4:	d100      	bne.n	80033a8 <xQueueSemaphoreTake+0x178>
 80033a6:	e767      	b.n	8003278 <xQueueSemaphoreTake+0x48>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d010      	beq.n	80033d0 <xQueueSemaphoreTake+0x1a0>
                    {
                        taskENTER_CRITICAL();
 80033ae:	f001 fd77 	bl	8004ea0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 f810 	bl	80033da <prvGetDisinheritPriorityAfterTimeout>
 80033ba:	0003      	movs	r3, r0
 80033bc:	617b      	str	r3, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	0011      	movs	r1, r2
 80033c6:	0018      	movs	r0, r3
 80033c8:	f001 f948 	bl	800465c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80033cc:	f001 fd7a 	bl	8004ec4 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80033d0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b00a      	add	sp, #40	; 0x28
 80033d8:	bd80      	pop	{r7, pc}

080033da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d006      	beq.n	80033f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2205      	movs	r2, #5
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	e001      	b.n	80033fc <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80033fc:	68fb      	ldr	r3, [r7, #12]
    }
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b004      	add	sp, #16
 8003404:	bd80      	pop	{r7, pc}

08003406 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10e      	bne.n	8003442 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d14e      	bne.n	80034ca <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	0018      	movs	r0, r3
 8003432:	f001 f891 	bl	8004558 <xTaskPriorityDisinherit>
 8003436:	0003      	movs	r3, r0
 8003438:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	e043      	b.n	80034ca <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d119      	bne.n	800347c <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6858      	ldr	r0, [r3, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	0019      	movs	r1, r3
 8003454:	f001 ff86 	bl	8005364 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	18d2      	adds	r2, r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d32b      	bcc.n	80034ca <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	e026      	b.n	80034ca <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68d8      	ldr	r0, [r3, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	0019      	movs	r1, r3
 8003488:	f001 ff6c 	bl	8005364 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	425b      	negs	r3, r3
 8003496:	18d2      	adds	r2, r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d207      	bcs.n	80034b8 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	425b      	negs	r3, r3
 80034b2:	18d2      	adds	r2, r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d105      	bne.n	80034ca <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80034d2:	697b      	ldr	r3, [r7, #20]
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b006      	add	sp, #24
 80034da:	bd80      	pop	{r7, pc}

080034dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d018      	beq.n	8003520 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	18d2      	adds	r2, r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d303      	bcc.n	8003510 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68d9      	ldr	r1, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	0018      	movs	r0, r3
 800351c:	f001 ff22 	bl	8005364 <memcpy>
    }
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}

08003528 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003530:	f001 fcb6 	bl	8004ea0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003534:	230f      	movs	r3, #15
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	2145      	movs	r1, #69	; 0x45
 800353c:	5c52      	ldrb	r2, [r2, r1]
 800353e:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003540:	e013      	b.n	800356a <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2b00      	cmp	r3, #0
 8003548:	d016      	beq.n	8003578 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3324      	adds	r3, #36	; 0x24
 800354e:	0018      	movs	r0, r3
 8003550:	f000 fd6c 	bl	800402c <xTaskRemoveFromEventList>
 8003554:	1e03      	subs	r3, r0, #0
 8003556:	d001      	beq.n	800355c <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003558:	f000 fe9a 	bl	8004290 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800355c:	210f      	movs	r1, #15
 800355e:	187b      	adds	r3, r7, r1
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	3b01      	subs	r3, #1
 8003564:	b2da      	uxtb	r2, r3
 8003566:	187b      	adds	r3, r7, r1
 8003568:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800356a:	230f      	movs	r3, #15
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b25b      	sxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	dce5      	bgt.n	8003542 <prvUnlockQueue+0x1a>
 8003576:	e000      	b.n	800357a <prvUnlockQueue+0x52>
                    break;
 8003578:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2245      	movs	r2, #69	; 0x45
 800357e:	21ff      	movs	r1, #255	; 0xff
 8003580:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003582:	f001 fc9f 	bl	8004ec4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003586:	f001 fc8b 	bl	8004ea0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800358a:	230e      	movs	r3, #14
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	2144      	movs	r1, #68	; 0x44
 8003592:	5c52      	ldrb	r2, [r2, r1]
 8003594:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003596:	e013      	b.n	80035c0 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d016      	beq.n	80035ce <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3310      	adds	r3, #16
 80035a4:	0018      	movs	r0, r3
 80035a6:	f000 fd41 	bl	800402c <xTaskRemoveFromEventList>
 80035aa:	1e03      	subs	r3, r0, #0
 80035ac:	d001      	beq.n	80035b2 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 80035ae:	f000 fe6f 	bl	8004290 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80035b2:	210e      	movs	r1, #14
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80035c0:	230e      	movs	r3, #14
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	b25b      	sxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	dce5      	bgt.n	8003598 <prvUnlockQueue+0x70>
 80035cc:	e000      	b.n	80035d0 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 80035ce:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2244      	movs	r2, #68	; 0x44
 80035d4:	21ff      	movs	r1, #255	; 0xff
 80035d6:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80035d8:	f001 fc74 	bl	8004ec4 <vPortExitCritical>
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b004      	add	sp, #16
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80035ec:	f001 fc58 	bl	8004ea0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80035f8:	2301      	movs	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e001      	b.n	8003602 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003602:	f001 fc5f 	bl	8004ec4 <vPortExitCritical>

    return xReturn;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}

08003610 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003618:	f001 fc42 	bl	8004ea0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	429a      	cmp	r2, r3
 8003626:	d102      	bne.n	800362e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e001      	b.n	8003632 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003632:	f001 fc47 	bl	8004ec4 <vPortExitCritical>

    return xReturn;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	b004      	add	sp, #16
 800363e:	bd80      	pop	{r7, pc}

08003640 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <vQueueAddToRegistry+0x18>
 8003654:	b672      	cpsid	i
 8003656:	e7fe      	b.n	8003656 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d025      	beq.n	80036aa <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e01f      	b.n	80036a4 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003664:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <vQueueAddToRegistry+0x84>)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	18d3      	adds	r3, r2, r3
 800366c:	3304      	adds	r3, #4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	429a      	cmp	r2, r3
 8003674:	d105      	bne.n	8003682 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	00da      	lsls	r2, r3, #3
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <vQueueAddToRegistry+0x84>)
 800367c:	18d3      	adds	r3, r2, r3
 800367e:	60bb      	str	r3, [r7, #8]
                    break;
 8003680:	e013      	b.n	80036aa <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <vQueueAddToRegistry+0x5e>
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <vQueueAddToRegistry+0x84>)
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	00d2      	lsls	r2, r2, #3
 800368e:	58d3      	ldr	r3, [r2, r3]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	00da      	lsls	r2, r3, #3
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <vQueueAddToRegistry+0x84>)
 800369a:	18d3      	adds	r3, r2, r3
 800369c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3301      	adds	r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b07      	cmp	r3, #7
 80036a8:	d9dc      	bls.n	8003664 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b004      	add	sp, #16
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	2000011c 	.word	0x2000011c

080036c8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80036d8:	f001 fbe2 	bl	8004ea0 <vPortEnterCritical>
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2244      	movs	r2, #68	; 0x44
 80036e0:	5c9b      	ldrb	r3, [r3, r2]
 80036e2:	b25b      	sxtb	r3, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	d103      	bne.n	80036f0 <vQueueWaitForMessageRestricted+0x28>
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2244      	movs	r2, #68	; 0x44
 80036ec:	2100      	movs	r1, #0
 80036ee:	5499      	strb	r1, [r3, r2]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2245      	movs	r2, #69	; 0x45
 80036f4:	5c9b      	ldrb	r3, [r3, r2]
 80036f6:	b25b      	sxtb	r3, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	d103      	bne.n	8003704 <vQueueWaitForMessageRestricted+0x3c>
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2245      	movs	r2, #69	; 0x45
 8003700:	2100      	movs	r1, #0
 8003702:	5499      	strb	r1, [r3, r2]
 8003704:	f001 fbde 	bl	8004ec4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3324      	adds	r3, #36	; 0x24
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	0018      	movs	r0, r3
 800371a:	f000 fc49 	bl	8003fb0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	0018      	movs	r0, r3
 8003722:	f7ff ff01 	bl	8003528 <prvUnlockQueue>
    }
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b006      	add	sp, #24
 800372c:	bd80      	pop	{r7, pc}

0800372e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800372e:	b590      	push	{r4, r7, lr}
 8003730:	b08d      	sub	sp, #52	; 0x34
 8003732:	af04      	add	r7, sp, #16
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	1dbb      	adds	r3, r7, #6
 800373c:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800373e:	1dbb      	adds	r3, r7, #6
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	0018      	movs	r0, r3
 8003746:	f001 fc43 	bl	8004fd0 <pvPortMalloc>
 800374a:	0003      	movs	r3, r0
 800374c:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d016      	beq.n	8003782 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003754:	2054      	movs	r0, #84	; 0x54
 8003756:	f001 fc3b 	bl	8004fd0 <pvPortMalloc>
 800375a:	0003      	movs	r3, r0
 800375c:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2254      	movs	r2, #84	; 0x54
 8003768:	2100      	movs	r1, #0
 800376a:	0018      	movs	r0, r3
 800376c:	f001 fe03 	bl	8005376 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
 8003776:	e006      	b.n	8003786 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	0018      	movs	r0, r3
 800377c:	f001 fcd0 	bl	8005120 <vPortFree>
 8003780:	e001      	b.n	8003786 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d016      	beq.n	80037ba <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800378c:	1dbb      	adds	r3, r7, #6
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	683c      	ldr	r4, [r7, #0]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	2300      	movs	r3, #0
 8003798:	9303      	str	r3, [sp, #12]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	9302      	str	r3, [sp, #8]
 800379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	0023      	movs	r3, r4
 80037a8:	f000 f810 	bl	80037cc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 f88c 	bl	80038cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80037b4:	2301      	movs	r3, #1
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	e002      	b.n	80037c0 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037ba:	2301      	movs	r3, #1
 80037bc:	425b      	negs	r3, r3
 80037be:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80037c0:	69bb      	ldr	r3, [r7, #24]
    }
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b009      	add	sp, #36	; 0x24
 80037c8:	bd90      	pop	{r4, r7, pc}
	...

080037cc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	001a      	movs	r2, r3
 80037e4:	21a5      	movs	r1, #165	; 0xa5
 80037e6:	f001 fdc6 	bl	8005376 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4935      	ldr	r1, [pc, #212]	; (80038c8 <prvInitialiseNewTask+0xfc>)
 80037f2:	468c      	mov	ip, r1
 80037f4:	4463      	add	r3, ip
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	18d3      	adds	r3, r2, r3
 80037fa:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2207      	movs	r2, #7
 8003800:	4393      	bics	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2207      	movs	r2, #7
 8003808:	4013      	ands	r3, r2
 800380a:	d001      	beq.n	8003810 <prvInitialiseNewTask+0x44>
 800380c:	b672      	cpsid	i
 800380e:	e7fe      	b.n	800380e <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01f      	beq.n	8003856 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e013      	b.n	8003844 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	18d3      	adds	r3, r2, r3
 8003822:	7818      	ldrb	r0, [r3, #0]
 8003824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003826:	2134      	movs	r1, #52	; 0x34
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	18d3      	adds	r3, r2, r3
 800382c:	185b      	adds	r3, r3, r1
 800382e:	1c02      	adds	r2, r0, #0
 8003830:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	18d3      	adds	r3, r2, r3
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	3301      	adds	r3, #1
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d9e8      	bls.n	800381c <prvInitialiseNewTask+0x50>
 800384a:	e000      	b.n	800384e <prvInitialiseNewTask+0x82>
            {
                break;
 800384c:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	2238      	movs	r2, #56	; 0x38
 8003852:	2100      	movs	r1, #0
 8003854:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d901      	bls.n	8003860 <prvInitialiseNewTask+0x94>
 800385c:	b672      	cpsid	i
 800385e:	e7fe      	b.n	800385e <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	2b04      	cmp	r3, #4
 8003864:	d901      	bls.n	800386a <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003866:	2304      	movs	r3, #4
 8003868:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	6a3a      	ldr	r2, [r7, #32]
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	6a3a      	ldr	r2, [r7, #32]
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	3304      	adds	r3, #4
 800387a:	0018      	movs	r0, r3
 800387c:	f7ff f9b2 	bl	8002be4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	3318      	adds	r3, #24
 8003884:	0018      	movs	r0, r3
 8003886:	f7ff f9ad 	bl	8002be4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800388e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	2205      	movs	r2, #5
 8003894:	1ad2      	subs	r2, r2, r3
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	68f9      	ldr	r1, [r7, #12]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	0018      	movs	r0, r3
 80038a8:	f001 fa5c 	bl	8004d64 <pxPortInitialiseStack>
 80038ac:	0002      	movs	r2, r0
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b006      	add	sp, #24
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	3fffffff 	.word	0x3fffffff

080038cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80038d4:	f001 fae4 	bl	8004ea0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80038d8:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <prvAddNewTaskToReadyList+0x104>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	4b3c      	ldr	r3, [pc, #240]	; (80039d0 <prvAddNewTaskToReadyList+0x104>)
 80038e0:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 80038e2:	4b3c      	ldr	r3, [pc, #240]	; (80039d4 <prvAddNewTaskToReadyList+0x108>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80038ea:	4b3a      	ldr	r3, [pc, #232]	; (80039d4 <prvAddNewTaskToReadyList+0x108>)
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <prvAddNewTaskToReadyList+0x104>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d110      	bne.n	800391a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80038f8:	f000 fce4 	bl	80042c4 <prvInitialiseTaskLists>
 80038fc:	e00d      	b.n	800391a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80038fe:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <prvAddNewTaskToReadyList+0x10c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003906:	4b33      	ldr	r3, [pc, #204]	; (80039d4 <prvAddNewTaskToReadyList+0x108>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	429a      	cmp	r2, r3
 8003912:	d802      	bhi.n	800391a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003914:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <prvAddNewTaskToReadyList+0x108>)
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800391a:	4b30      	ldr	r3, [pc, #192]	; (80039dc <prvAddNewTaskToReadyList+0x110>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <prvAddNewTaskToReadyList+0x110>)
 8003922:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003924:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <prvAddNewTaskToReadyList+0x110>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	4b2b      	ldr	r3, [pc, #172]	; (80039e0 <prvAddNewTaskToReadyList+0x114>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d903      	bls.n	8003940 <prvAddNewTaskToReadyList+0x74>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393c:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <prvAddNewTaskToReadyList+0x114>)
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	4927      	ldr	r1, [pc, #156]	; (80039e4 <prvAddNewTaskToReadyList+0x118>)
 8003946:	0013      	movs	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	189b      	adds	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	18cb      	adds	r3, r1, r3
 8003950:	3304      	adds	r3, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	60da      	str	r2, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	3204      	adds	r2, #4
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	1d1a      	adds	r2, r3, #4
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397a:	0013      	movs	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	189b      	adds	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <prvAddNewTaskToReadyList+0x118>)
 8003984:	189a      	adds	r2, r3, r2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	615a      	str	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398e:	4915      	ldr	r1, [pc, #84]	; (80039e4 <prvAddNewTaskToReadyList+0x118>)
 8003990:	0013      	movs	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	189b      	adds	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	585b      	ldr	r3, [r3, r1]
 800399a:	1c58      	adds	r0, r3, #1
 800399c:	4911      	ldr	r1, [pc, #68]	; (80039e4 <prvAddNewTaskToReadyList+0x118>)
 800399e:	0013      	movs	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	189b      	adds	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80039a8:	f001 fa8c 	bl	8004ec4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <prvAddNewTaskToReadyList+0x10c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039b4:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <prvAddNewTaskToReadyList+0x108>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	429a      	cmp	r2, r3
 80039c0:	d201      	bcs.n	80039c6 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80039c2:	f001 fa5d 	bl	8004e80 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b004      	add	sp, #16
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	20000234 	.word	0x20000234
 80039d4:	2000015c 	.word	0x2000015c
 80039d8:	20000240 	.word	0x20000240
 80039dc:	20000250 	.word	0x20000250
 80039e0:	2000023c 	.word	0x2000023c
 80039e4:	20000160 	.word	0x20000160

080039e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d010      	beq.n	8003a1c <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80039fa:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <vTaskDelay+0x48>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <vTaskDelay+0x1e>
 8003a02:	b672      	cpsid	i
 8003a04:	e7fe      	b.n	8003a04 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8003a06:	f000 f855 	bl	8003ab4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f000 fecc 	bl	80047ac <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003a14:	f000 f85a 	bl	8003acc <xTaskResumeAll>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8003a22:	f001 fa2d 	bl	8004e80 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b004      	add	sp, #16
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	2000025c 	.word	0x2000025c

08003a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003a3a:	4917      	ldr	r1, [pc, #92]	; (8003a98 <vTaskStartScheduler+0x64>)
 8003a3c:	4817      	ldr	r0, [pc, #92]	; (8003a9c <vTaskStartScheduler+0x68>)
 8003a3e:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <vTaskStartScheduler+0x6c>)
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	2300      	movs	r3, #0
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	223c      	movs	r2, #60	; 0x3c
 8003a4a:	f7ff fe70 	bl	800372e <xTaskCreate>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d103      	bne.n	8003a60 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8003a58:	f000 ff16 	bl	8004888 <xTimerCreateTimerTask>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d10d      	bne.n	8003a82 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8003a66:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <vTaskStartScheduler+0x70>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	4252      	negs	r2, r2
 8003a6e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <vTaskStartScheduler+0x74>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <vTaskStartScheduler+0x78>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003a7c:	f001 f9dc 	bl	8004e38 <xPortStartScheduler>
 8003a80:	e004      	b.n	8003a8c <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3301      	adds	r3, #1
 8003a86:	d101      	bne.n	8003a8c <vTaskStartScheduler+0x58>
 8003a88:	b672      	cpsid	i
 8003a8a:	e7fe      	b.n	8003a8a <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003a8c:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <vTaskStartScheduler+0x7c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	0800542c 	.word	0x0800542c
 8003a9c:	080042a5 	.word	0x080042a5
 8003aa0:	20000258 	.word	0x20000258
 8003aa4:	20000254 	.word	0x20000254
 8003aa8:	20000240 	.word	0x20000240
 8003aac:	20000238 	.word	0x20000238
 8003ab0:	2000000c 	.word	0x2000000c

08003ab4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003ab8:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <vTaskSuspendAll+0x14>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	4b02      	ldr	r3, [pc, #8]	; (8003ac8 <vTaskSuspendAll+0x14>)
 8003ac0:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	2000025c 	.word	0x2000025c

08003acc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003ada:	4b68      	ldr	r3, [pc, #416]	; (8003c7c <xTaskResumeAll+0x1b0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <xTaskResumeAll+0x1a>
 8003ae2:	b672      	cpsid	i
 8003ae4:	e7fe      	b.n	8003ae4 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003ae6:	f001 f9db 	bl	8004ea0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003aea:	4b64      	ldr	r3, [pc, #400]	; (8003c7c <xTaskResumeAll+0x1b0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	1e5a      	subs	r2, r3, #1
 8003af0:	4b62      	ldr	r3, [pc, #392]	; (8003c7c <xTaskResumeAll+0x1b0>)
 8003af2:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af4:	4b61      	ldr	r3, [pc, #388]	; (8003c7c <xTaskResumeAll+0x1b0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d000      	beq.n	8003afe <xTaskResumeAll+0x32>
 8003afc:	e0b7      	b.n	8003c6e <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003afe:	4b60      	ldr	r3, [pc, #384]	; (8003c80 <xTaskResumeAll+0x1b4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d100      	bne.n	8003b08 <xTaskResumeAll+0x3c>
 8003b06:	e0b2      	b.n	8003c6e <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b08:	e089      	b.n	8003c1e <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b0a:	4b5e      	ldr	r3, [pc, #376]	; (8003c84 <xTaskResumeAll+0x1b8>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	6a12      	ldr	r2, [r2, #32]
 8003b20:	609a      	str	r2, [r3, #8]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	69d2      	ldr	r2, [r2, #28]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	3318      	adds	r3, #24
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d103      	bne.n	8003b40 <xTaskResumeAll+0x74>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	6a1a      	ldr	r2, [r3, #32]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2200      	movs	r2, #0
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	1e5a      	subs	r2, r3, #1
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	68d2      	ldr	r2, [r2, #12]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	6892      	ldr	r2, [r2, #8]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3304      	adds	r3, #4
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d103      	bne.n	8003b7e <xTaskResumeAll+0xb2>
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	615a      	str	r2, [r3, #20]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1e5a      	subs	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b92:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <xTaskResumeAll+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d903      	bls.n	8003ba2 <xTaskResumeAll+0xd6>
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9e:	4b3a      	ldr	r3, [pc, #232]	; (8003c88 <xTaskResumeAll+0x1bc>)
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba6:	4939      	ldr	r1, [pc, #228]	; (8003c8c <xTaskResumeAll+0x1c0>)
 8003ba8:	0013      	movs	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	18cb      	adds	r3, r1, r3
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	609a      	str	r2, [r3, #8]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	3204      	adds	r2, #4
 8003bce:	605a      	str	r2, [r3, #4]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	0013      	movs	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	189b      	adds	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4a29      	ldr	r2, [pc, #164]	; (8003c8c <xTaskResumeAll+0x1c0>)
 8003be6:	189a      	adds	r2, r3, r2
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	615a      	str	r2, [r3, #20]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf0:	4926      	ldr	r1, [pc, #152]	; (8003c8c <xTaskResumeAll+0x1c0>)
 8003bf2:	0013      	movs	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	189b      	adds	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	585b      	ldr	r3, [r3, r1]
 8003bfc:	1c58      	adds	r0, r3, #1
 8003bfe:	4923      	ldr	r1, [pc, #140]	; (8003c8c <xTaskResumeAll+0x1c0>)
 8003c00:	0013      	movs	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	189b      	adds	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <xTaskResumeAll+0x1c4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d302      	bcc.n	8003c1e <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <xTaskResumeAll+0x1c8>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c1e:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <xTaskResumeAll+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d000      	beq.n	8003c28 <xTaskResumeAll+0x15c>
 8003c26:	e770      	b.n	8003b0a <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003c2e:	f000 fbcd 	bl	80043cc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <xTaskResumeAll+0x1cc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00f      	beq.n	8003c5e <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003c3e:	f000 f83b 	bl	8003cb8 <xTaskIncrementTick>
 8003c42:	1e03      	subs	r3, r0, #0
 8003c44:	d002      	beq.n	8003c4c <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8003c46:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <xTaskResumeAll+0x1c8>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f2      	bne.n	8003c3e <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <xTaskResumeAll+0x1cc>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <xTaskResumeAll+0x1c8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003c6a:	f001 f909 	bl	8004e80 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003c6e:	f001 f929 	bl	8004ec4 <vPortExitCritical>

    return xAlreadyYielded;
 8003c72:	693b      	ldr	r3, [r7, #16]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b006      	add	sp, #24
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	2000025c 	.word	0x2000025c
 8003c80:	20000234 	.word	0x20000234
 8003c84:	200001f4 	.word	0x200001f4
 8003c88:	2000023c 	.word	0x2000023c
 8003c8c:	20000160 	.word	0x20000160
 8003c90:	2000015c 	.word	0x2000015c
 8003c94:	20000248 	.word	0x20000248
 8003c98:	20000244 	.word	0x20000244

08003c9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003ca2:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <xTaskGetTickCount+0x18>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003ca8:	687b      	ldr	r3, [r7, #4]
}
 8003caa:	0018      	movs	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b002      	add	sp, #8
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	20000238 	.word	0x20000238

08003cb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc2:	4b78      	ldr	r3, [pc, #480]	; (8003ea4 <xTaskIncrementTick+0x1ec>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d000      	beq.n	8003ccc <xTaskIncrementTick+0x14>
 8003cca:	e0e0      	b.n	8003e8e <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ccc:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <xTaskIncrementTick+0x1f0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003cd4:	4b74      	ldr	r3, [pc, #464]	; (8003ea8 <xTaskIncrementTick+0x1f0>)
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d117      	bne.n	8003d10 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8003ce0:	4b72      	ldr	r3, [pc, #456]	; (8003eac <xTaskIncrementTick+0x1f4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <xTaskIncrementTick+0x36>
 8003cea:	b672      	cpsid	i
 8003cec:	e7fe      	b.n	8003cec <xTaskIncrementTick+0x34>
 8003cee:	4b6f      	ldr	r3, [pc, #444]	; (8003eac <xTaskIncrementTick+0x1f4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	4b6e      	ldr	r3, [pc, #440]	; (8003eb0 <xTaskIncrementTick+0x1f8>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4b6c      	ldr	r3, [pc, #432]	; (8003eac <xTaskIncrementTick+0x1f4>)
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	4b6c      	ldr	r3, [pc, #432]	; (8003eb0 <xTaskIncrementTick+0x1f8>)
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	4b6c      	ldr	r3, [pc, #432]	; (8003eb4 <xTaskIncrementTick+0x1fc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <xTaskIncrementTick+0x1fc>)
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f000 fb5e 	bl	80043cc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003d10:	4b69      	ldr	r3, [pc, #420]	; (8003eb8 <xTaskIncrementTick+0x200>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d200      	bcs.n	8003d1c <xTaskIncrementTick+0x64>
 8003d1a:	e0a4      	b.n	8003e66 <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d1c:	4b63      	ldr	r3, [pc, #396]	; (8003eac <xTaskIncrementTick+0x1f4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d26:	4b64      	ldr	r3, [pc, #400]	; (8003eb8 <xTaskIncrementTick+0x200>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	4252      	negs	r2, r2
 8003d2c:	601a      	str	r2, [r3, #0]
                    break;
 8003d2e:	e09a      	b.n	8003e66 <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d30:	4b5e      	ldr	r3, [pc, #376]	; (8003eac <xTaskIncrementTick+0x1f4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d203      	bcs.n	8003d50 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003d48:	4b5b      	ldr	r3, [pc, #364]	; (8003eb8 <xTaskIncrementTick+0x200>)
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003d4e:	e08a      	b.n	8003e66 <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	68d2      	ldr	r2, [r2, #12]
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	6892      	ldr	r2, [r2, #8]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	3304      	adds	r3, #4
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d103      	bne.n	8003d7e <xTaskIncrementTick+0xc6>
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2200      	movs	r2, #0
 8003d82:	615a      	str	r2, [r3, #20]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1e5a      	subs	r2, r3, #1
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01e      	beq.n	8003dd4 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	6a12      	ldr	r2, [r2, #32]
 8003da4:	609a      	str	r2, [r3, #8]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	69d2      	ldr	r2, [r2, #28]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	3318      	adds	r3, #24
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d103      	bne.n	8003dc4 <xTaskIncrementTick+0x10c>
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6a1a      	ldr	r2, [r3, #32]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	629a      	str	r2, [r3, #40]	; 0x28
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	1e5a      	subs	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <xTaskIncrementTick+0x204>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d903      	bls.n	8003de8 <xTaskIncrementTick+0x130>
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <xTaskIncrementTick+0x204>)
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dec:	4934      	ldr	r1, [pc, #208]	; (8003ec0 <xTaskIncrementTick+0x208>)
 8003dee:	0013      	movs	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	18cb      	adds	r3, r1, r3
 8003df8:	3304      	adds	r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	603b      	str	r3, [r7, #0]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	60da      	str	r2, [r3, #12]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	3204      	adds	r2, #4
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1d1a      	adds	r2, r3, #4
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	0013      	movs	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4a25      	ldr	r2, [pc, #148]	; (8003ec0 <xTaskIncrementTick+0x208>)
 8003e2c:	189a      	adds	r2, r3, r2
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	615a      	str	r2, [r3, #20]
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e36:	4922      	ldr	r1, [pc, #136]	; (8003ec0 <xTaskIncrementTick+0x208>)
 8003e38:	0013      	movs	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	189b      	adds	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	585b      	ldr	r3, [r3, r1]
 8003e42:	1c58      	adds	r0, r3, #1
 8003e44:	491e      	ldr	r1, [pc, #120]	; (8003ec0 <xTaskIncrementTick+0x208>)
 8003e46:	0013      	movs	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	189b      	adds	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <xTaskIncrementTick+0x20c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d800      	bhi.n	8003e60 <xTaskIncrementTick+0x1a8>
 8003e5e:	e75d      	b.n	8003d1c <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e64:	e75a      	b.n	8003d1c <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <xTaskIncrementTick+0x20c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6c:	4914      	ldr	r1, [pc, #80]	; (8003ec0 <xTaskIncrementTick+0x208>)
 8003e6e:	0013      	movs	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	585b      	ldr	r3, [r3, r1]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d901      	bls.n	8003e80 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003e80:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <xTaskIncrementTick+0x210>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	e004      	b.n	8003e98 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003e8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <xTaskIncrementTick+0x214>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <xTaskIncrementTick+0x214>)
 8003e96:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003e98:	69fb      	ldr	r3, [r7, #28]
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b008      	add	sp, #32
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	2000025c 	.word	0x2000025c
 8003ea8:	20000238 	.word	0x20000238
 8003eac:	200001ec 	.word	0x200001ec
 8003eb0:	200001f0 	.word	0x200001f0
 8003eb4:	2000024c 	.word	0x2000024c
 8003eb8:	20000254 	.word	0x20000254
 8003ebc:	2000023c 	.word	0x2000023c
 8003ec0:	20000160 	.word	0x20000160
 8003ec4:	2000015c 	.word	0x2000015c
 8003ec8:	20000248 	.word	0x20000248
 8003ecc:	20000244 	.word	0x20000244

08003ed0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ed6:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <vTaskSwitchContext+0x90>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003ede:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <vTaskSwitchContext+0x94>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003ee4:	e037      	b.n	8003f56 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <vTaskSwitchContext+0x94>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eec:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <vTaskSwitchContext+0x98>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	e007      	b.n	8003f04 <vTaskSwitchContext+0x34>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <vTaskSwitchContext+0x2e>
 8003efa:	b672      	cpsid	i
 8003efc:	e7fe      	b.n	8003efc <vTaskSwitchContext+0x2c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	4919      	ldr	r1, [pc, #100]	; (8003f6c <vTaskSwitchContext+0x9c>)
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	0013      	movs	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	189b      	adds	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	585b      	ldr	r3, [r3, r1]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0ee      	beq.n	8003ef4 <vTaskSwitchContext+0x24>
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	0013      	movs	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	189b      	adds	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <vTaskSwitchContext+0x9c>)
 8003f22:	189b      	adds	r3, r3, r2
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	3308      	adds	r3, #8
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d104      	bne.n	8003f46 <vTaskSwitchContext+0x76>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <vTaskSwitchContext+0xa0>)
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <vTaskSwitchContext+0x98>)
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b002      	add	sp, #8
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	2000025c 	.word	0x2000025c
 8003f64:	20000248 	.word	0x20000248
 8003f68:	2000023c 	.word	0x2000023c
 8003f6c:	20000160 	.word	0x20000160
 8003f70:	2000015c 	.word	0x2000015c

08003f74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <vTaskPlaceOnEventList+0x14>
 8003f84:	b672      	cpsid	i
 8003f86:	e7fe      	b.n	8003f86 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f88:	4b08      	ldr	r3, [pc, #32]	; (8003fac <vTaskPlaceOnEventList+0x38>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3318      	adds	r3, #24
 8003f8e:	001a      	movs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	0011      	movs	r1, r2
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7fe fe30 	bl	8002bfa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f000 fc04 	bl	80047ac <prvAddCurrentTaskToDelayedList>
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	2000015c 	.word	0x2000015c

08003fb0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <vTaskPlaceOnEventListRestricted+0x16>
 8003fc2:	b672      	cpsid	i
 8003fc4:	e7fe      	b.n	8003fc4 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	4b16      	ldr	r3, [pc, #88]	; (8004028 <vTaskPlaceOnEventListRestricted+0x78>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	61da      	str	r2, [r3, #28]
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <vTaskPlaceOnEventListRestricted+0x78>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	6892      	ldr	r2, [r2, #8]
 8003fdc:	621a      	str	r2, [r3, #32]
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <vTaskPlaceOnEventListRestricted+0x78>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	3218      	adds	r2, #24
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <vTaskPlaceOnEventListRestricted+0x78>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3318      	adds	r3, #24
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	609a      	str	r2, [r3, #8]
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <vTaskPlaceOnEventListRestricted+0x78>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	629a      	str	r2, [r3, #40]	; 0x28
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 800400e:	2301      	movs	r3, #1
 8004010:	425b      	negs	r3, r3
 8004012:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	0011      	movs	r1, r2
 800401a:	0018      	movs	r0, r3
 800401c:	f000 fbc6 	bl	80047ac <prvAddCurrentTaskToDelayedList>
    }
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b006      	add	sp, #24
 8004026:	bd80      	pop	{r7, pc}
 8004028:	2000015c 	.word	0x2000015c

0800402c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <xTaskRemoveFromEventList+0x1a>
 8004042:	b672      	cpsid	i
 8004044:	e7fe      	b.n	8004044 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	6a12      	ldr	r2, [r2, #32]
 8004054:	609a      	str	r2, [r3, #8]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	69d2      	ldr	r2, [r2, #28]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	3318      	adds	r3, #24
 8004068:	429a      	cmp	r2, r3
 800406a:	d103      	bne.n	8004074 <xTaskRemoveFromEventList+0x48>
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2200      	movs	r2, #0
 8004078:	629a      	str	r2, [r3, #40]	; 0x28
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	1e5a      	subs	r2, r3, #1
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004084:	4b48      	ldr	r3, [pc, #288]	; (80041a8 <xTaskRemoveFromEventList+0x17c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d15d      	bne.n	8004148 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	68d2      	ldr	r2, [r2, #12]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	6892      	ldr	r2, [r2, #8]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	3304      	adds	r3, #4
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d103      	bne.n	80040ba <xTaskRemoveFromEventList+0x8e>
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	2200      	movs	r2, #0
 80040be:	615a      	str	r2, [r3, #20]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	1e5a      	subs	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	4b37      	ldr	r3, [pc, #220]	; (80041ac <xTaskRemoveFromEventList+0x180>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d903      	bls.n	80040de <xTaskRemoveFromEventList+0xb2>
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040da:	4b34      	ldr	r3, [pc, #208]	; (80041ac <xTaskRemoveFromEventList+0x180>)
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e2:	4933      	ldr	r1, [pc, #204]	; (80041b0 <xTaskRemoveFromEventList+0x184>)
 80040e4:	0013      	movs	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	189b      	adds	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	18cb      	adds	r3, r1, r3
 80040ee:	3304      	adds	r3, #4
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	3204      	adds	r2, #4
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	1d1a      	adds	r2, r3, #4
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	0013      	movs	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	189b      	adds	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <xTaskRemoveFromEventList+0x184>)
 8004122:	189a      	adds	r2, r3, r2
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	615a      	str	r2, [r3, #20]
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	4920      	ldr	r1, [pc, #128]	; (80041b0 <xTaskRemoveFromEventList+0x184>)
 800412e:	0013      	movs	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	189b      	adds	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	585b      	ldr	r3, [r3, r1]
 8004138:	1c58      	adds	r0, r3, #1
 800413a:	491d      	ldr	r1, [pc, #116]	; (80041b0 <xTaskRemoveFromEventList+0x184>)
 800413c:	0013      	movs	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	189b      	adds	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	5058      	str	r0, [r3, r1]
 8004146:	e01b      	b.n	8004180 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <xTaskRemoveFromEventList+0x188>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	61da      	str	r2, [r3, #28]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	621a      	str	r2, [r3, #32]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	3218      	adds	r2, #24
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	3318      	adds	r3, #24
 800416a:	001a      	movs	r2, r3
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <xTaskRemoveFromEventList+0x188>)
 8004174:	629a      	str	r2, [r3, #40]	; 0x28
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <xTaskRemoveFromEventList+0x188>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <xTaskRemoveFromEventList+0x188>)
 800417e:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <xTaskRemoveFromEventList+0x18c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	429a      	cmp	r2, r3
 800418c:	d905      	bls.n	800419a <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800418e:	2301      	movs	r3, #1
 8004190:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <xTaskRemoveFromEventList+0x190>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e001      	b.n	800419e <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800419e:	69fb      	ldr	r3, [r7, #28]
}
 80041a0:	0018      	movs	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b008      	add	sp, #32
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	2000025c 	.word	0x2000025c
 80041ac:	2000023c 	.word	0x2000023c
 80041b0:	20000160 	.word	0x20000160
 80041b4:	200001f4 	.word	0x200001f4
 80041b8:	2000015c 	.word	0x2000015c
 80041bc:	20000248 	.word	0x20000248

080041c0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <vTaskInternalSetTimeOutState+0x20>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <vTaskInternalSetTimeOutState+0x24>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	605a      	str	r2, [r3, #4]
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b002      	add	sp, #8
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	2000024c 	.word	0x2000024c
 80041e4:	20000238 	.word	0x20000238

080041e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <xTaskCheckForTimeOut+0x14>
 80041f8:	b672      	cpsid	i
 80041fa:	e7fe      	b.n	80041fa <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <xTaskCheckForTimeOut+0x1e>
 8004202:	b672      	cpsid	i
 8004204:	e7fe      	b.n	8004204 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 8004206:	f000 fe4b 	bl	8004ea0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800420a:	4b1f      	ldr	r3, [pc, #124]	; (8004288 <xTaskCheckForTimeOut+0xa0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3301      	adds	r3, #1
 8004220:	d102      	bne.n	8004228 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	e027      	b.n	8004278 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b17      	ldr	r3, [pc, #92]	; (800428c <xTaskCheckForTimeOut+0xa4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d00a      	beq.n	800424a <xTaskCheckForTimeOut+0x62>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	429a      	cmp	r2, r3
 800423c:	d305      	bcc.n	800424a <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800423e:	2301      	movs	r3, #1
 8004240:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e016      	b.n	8004278 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	429a      	cmp	r2, r3
 8004252:	d20c      	bcs.n	800426e <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	0018      	movs	r0, r3
 8004264:	f7ff ffac 	bl	80041c0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e004      	b.n	8004278 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004274:	2301      	movs	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8004278:	f000 fe24 	bl	8004ec4 <vPortExitCritical>

    return xReturn;
 800427c:	697b      	ldr	r3, [r7, #20]
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b006      	add	sp, #24
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	20000238 	.word	0x20000238
 800428c:	2000024c 	.word	0x2000024c

08004290 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004294:	4b02      	ldr	r3, [pc, #8]	; (80042a0 <vTaskMissedYield+0x10>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]
}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20000248 	.word	0x20000248

080042a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80042ac:	f000 f84e 	bl	800434c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <prvIdleTask+0x1c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d9f9      	bls.n	80042ac <prvIdleTask+0x8>
            {
                taskYIELD();
 80042b8:	f000 fde2 	bl	8004e80 <vPortYield>
        prvCheckTasksWaitingTermination();
 80042bc:	e7f6      	b.n	80042ac <prvIdleTask+0x8>
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	20000160 	.word	0x20000160

080042c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	e00c      	b.n	80042ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	0013      	movs	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	189b      	adds	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4a14      	ldr	r2, [pc, #80]	; (800432c <prvInitialiseTaskLists+0x68>)
 80042dc:	189b      	adds	r3, r3, r2
 80042de:	0018      	movs	r0, r3
 80042e0:	f7fe fc62 	bl	8002ba8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3301      	adds	r3, #1
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d9ef      	bls.n	80042d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80042f0:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <prvInitialiseTaskLists+0x6c>)
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7fe fc58 	bl	8002ba8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <prvInitialiseTaskLists+0x70>)
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7fe fc54 	bl	8002ba8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004300:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <prvInitialiseTaskLists+0x74>)
 8004302:	0018      	movs	r0, r3
 8004304:	f7fe fc50 	bl	8002ba8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <prvInitialiseTaskLists+0x78>)
 800430a:	0018      	movs	r0, r3
 800430c:	f7fe fc4c 	bl	8002ba8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <prvInitialiseTaskLists+0x7c>)
 8004312:	0018      	movs	r0, r3
 8004314:	f7fe fc48 	bl	8002ba8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <prvInitialiseTaskLists+0x80>)
 800431a:	4a05      	ldr	r2, [pc, #20]	; (8004330 <prvInitialiseTaskLists+0x6c>)
 800431c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <prvInitialiseTaskLists+0x84>)
 8004320:	4a04      	ldr	r2, [pc, #16]	; (8004334 <prvInitialiseTaskLists+0x70>)
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b002      	add	sp, #8
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000160 	.word	0x20000160
 8004330:	200001c4 	.word	0x200001c4
 8004334:	200001d8 	.word	0x200001d8
 8004338:	200001f4 	.word	0x200001f4
 800433c:	20000208 	.word	0x20000208
 8004340:	20000220 	.word	0x20000220
 8004344:	200001ec 	.word	0x200001ec
 8004348:	200001f0 	.word	0x200001f0

0800434c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004352:	e01a      	b.n	800438a <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8004354:	f000 fda4 	bl	8004ea0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004358:	4b10      	ldr	r3, [pc, #64]	; (800439c <prvCheckTasksWaitingTermination+0x50>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	0018      	movs	r0, r3
 8004366:	f7fe fc7e 	bl	8002c66 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800436a:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <prvCheckTasksWaitingTermination+0x54>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	1e5a      	subs	r2, r3, #1
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <prvCheckTasksWaitingTermination+0x54>)
 8004372:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <prvCheckTasksWaitingTermination+0x58>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	1e5a      	subs	r2, r3, #1
 800437a:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <prvCheckTasksWaitingTermination+0x58>)
 800437c:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 800437e:	f000 fda1 	bl	8004ec4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	0018      	movs	r0, r3
 8004386:	f000 f80f 	bl	80043a8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <prvCheckTasksWaitingTermination+0x58>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e0      	bne.n	8004354 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b002      	add	sp, #8
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000208 	.word	0x20000208
 80043a0:	20000234 	.word	0x20000234
 80043a4:	2000021c 	.word	0x2000021c

080043a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 feb3 	bl	8005120 <vPortFree>
            vPortFree( pxTCB );
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0018      	movs	r0, r3
 80043be:	f000 feaf 	bl	8005120 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b002      	add	sp, #8
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <prvResetNextTaskUnblockTime+0x2c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <prvResetNextTaskUnblockTime+0x30>)
 80043dc:	2201      	movs	r2, #1
 80043de:	4252      	negs	r2, r2
 80043e0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80043e2:	e005      	b.n	80043f0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <prvResetNextTaskUnblockTime+0x2c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <prvResetNextTaskUnblockTime+0x30>)
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	46c0      	nop			; (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	200001ec 	.word	0x200001ec
 80043fc:	20000254 	.word	0x20000254

08004400 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <xTaskGetSchedulerState+0x30>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800440e:	2301      	movs	r3, #1
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	e008      	b.n	8004426 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004414:	4b07      	ldr	r3, [pc, #28]	; (8004434 <xTaskGetSchedulerState+0x34>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800441c:	2302      	movs	r3, #2
 800441e:	607b      	str	r3, [r7, #4]
 8004420:	e001      	b.n	8004426 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004426:	687b      	ldr	r3, [r7, #4]
    }
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b002      	add	sp, #8
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000240 	.word	0x20000240
 8004434:	2000025c 	.word	0x2000025c

08004438 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d100      	bne.n	8004450 <xTaskPriorityInherit+0x18>
 800444e:	e077      	b.n	8004540 <xTaskPriorityInherit+0x108>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004454:	4b3d      	ldr	r3, [pc, #244]	; (800454c <xTaskPriorityInherit+0x114>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	429a      	cmp	r2, r3
 800445c:	d267      	bcs.n	800452e <xTaskPriorityInherit+0xf6>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	db06      	blt.n	8004474 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004466:	4b39      	ldr	r3, [pc, #228]	; (800454c <xTaskPriorityInherit+0x114>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	2205      	movs	r2, #5
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	6959      	ldr	r1, [r3, #20]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447c:	0013      	movs	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	189b      	adds	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4a32      	ldr	r2, [pc, #200]	; (8004550 <xTaskPriorityInherit+0x118>)
 8004486:	189b      	adds	r3, r3, r2
 8004488:	4299      	cmp	r1, r3
 800448a:	d148      	bne.n	800451e <xTaskPriorityInherit+0xe6>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	3304      	adds	r3, #4
 8004490:	0018      	movs	r0, r3
 8004492:	f7fe fbe8 	bl	8002c66 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004496:	4b2d      	ldr	r3, [pc, #180]	; (800454c <xTaskPriorityInherit+0x114>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <xTaskPriorityInherit+0x11c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d903      	bls.n	80044b4 <xTaskPriorityInherit+0x7c>
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	4b28      	ldr	r3, [pc, #160]	; (8004554 <xTaskPriorityInherit+0x11c>)
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	4925      	ldr	r1, [pc, #148]	; (8004550 <xTaskPriorityInherit+0x118>)
 80044ba:	0013      	movs	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	189b      	adds	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	18cb      	adds	r3, r1, r3
 80044c4:	3304      	adds	r3, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	3204      	adds	r2, #4
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1d1a      	adds	r2, r3, #4
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ee:	0013      	movs	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4a16      	ldr	r2, [pc, #88]	; (8004550 <xTaskPriorityInherit+0x118>)
 80044f8:	189a      	adds	r2, r3, r2
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	615a      	str	r2, [r3, #20]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	4913      	ldr	r1, [pc, #76]	; (8004550 <xTaskPriorityInherit+0x118>)
 8004504:	0013      	movs	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	189b      	adds	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	585b      	ldr	r3, [r3, r1]
 800450e:	1c58      	adds	r0, r3, #1
 8004510:	490f      	ldr	r1, [pc, #60]	; (8004550 <xTaskPriorityInherit+0x118>)
 8004512:	0013      	movs	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	189b      	adds	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	5058      	str	r0, [r3, r1]
 800451c:	e004      	b.n	8004528 <xTaskPriorityInherit+0xf0>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <xTaskPriorityInherit+0x114>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004528:	2301      	movs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	e008      	b.n	8004540 <xTaskPriorityInherit+0x108>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <xTaskPriorityInherit+0x114>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	429a      	cmp	r2, r3
 800453a:	d201      	bcs.n	8004540 <xTaskPriorityInherit+0x108>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800453c:	2301      	movs	r3, #1
 800453e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004540:	697b      	ldr	r3, [r7, #20]
    }
 8004542:	0018      	movs	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	b006      	add	sp, #24
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	2000015c 	.word	0x2000015c
 8004550:	20000160 	.word	0x20000160
 8004554:	2000023c 	.word	0x2000023c

08004558 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d06a      	beq.n	8004644 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800456e:	4b38      	ldr	r3, [pc, #224]	; (8004650 <xTaskPriorityDisinherit+0xf8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <xTaskPriorityDisinherit+0x24>
 8004578:	b672      	cpsid	i
 800457a:	e7fe      	b.n	800457a <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <xTaskPriorityDisinherit+0x30>
 8004584:	b672      	cpsid	i
 8004586:	e7fe      	b.n	8004586 <xTaskPriorityDisinherit+0x2e>
            ( pxTCB->uxMutexesHeld )--;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458c:	1e5a      	subs	r2, r3, #1
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	429a      	cmp	r2, r3
 800459c:	d052      	beq.n	8004644 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d14e      	bne.n	8004644 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	3304      	adds	r3, #4
 80045aa:	0018      	movs	r0, r3
 80045ac:	f7fe fb5b 	bl	8002c66 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	2205      	movs	r2, #5
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	4b22      	ldr	r3, [pc, #136]	; (8004654 <xTaskPriorityDisinherit+0xfc>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d903      	bls.n	80045d8 <xTaskPriorityDisinherit+0x80>
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	4b1f      	ldr	r3, [pc, #124]	; (8004654 <xTaskPriorityDisinherit+0xfc>)
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	491e      	ldr	r1, [pc, #120]	; (8004658 <xTaskPriorityDisinherit+0x100>)
 80045de:	0013      	movs	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	189b      	adds	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	18cb      	adds	r3, r1, r3
 80045e8:	3304      	adds	r3, #4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	60da      	str	r2, [r3, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	3204      	adds	r2, #4
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1d1a      	adds	r2, r3, #4
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	609a      	str	r2, [r3, #8]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004612:	0013      	movs	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	189b      	adds	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4a0f      	ldr	r2, [pc, #60]	; (8004658 <xTaskPriorityDisinherit+0x100>)
 800461c:	189a      	adds	r2, r3, r2
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	615a      	str	r2, [r3, #20]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004626:	490c      	ldr	r1, [pc, #48]	; (8004658 <xTaskPriorityDisinherit+0x100>)
 8004628:	0013      	movs	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	189b      	adds	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	585b      	ldr	r3, [r3, r1]
 8004632:	1c58      	adds	r0, r3, #1
 8004634:	4908      	ldr	r1, [pc, #32]	; (8004658 <xTaskPriorityDisinherit+0x100>)
 8004636:	0013      	movs	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	189b      	adds	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004640:	2301      	movs	r3, #1
 8004642:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004644:	697b      	ldr	r3, [r7, #20]
    }
 8004646:	0018      	movs	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	b006      	add	sp, #24
 800464c:	bd80      	pop	{r7, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	2000015c 	.word	0x2000015c
 8004654:	2000023c 	.word	0x2000023c
 8004658:	20000160 	.word	0x20000160

0800465c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800466a:	2301      	movs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d100      	bne.n	8004676 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 8004674:	e07e      	b.n	8004774 <vTaskPriorityDisinheritAfterTimeout+0x118>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <vTaskPriorityDisinheritAfterTimeout+0x26>
 800467e:	b672      	cpsid	i
 8004680:	e7fe      	b.n	8004680 <vTaskPriorityDisinheritAfterTimeout+0x24>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d902      	bls.n	8004692 <vTaskPriorityDisinheritAfterTimeout+0x36>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	e002      	b.n	8004698 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d068      	beq.n	8004774 <vTaskPriorityDisinheritAfterTimeout+0x118>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d163      	bne.n	8004774 <vTaskPriorityDisinheritAfterTimeout+0x118>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80046ac:	4b33      	ldr	r3, [pc, #204]	; (800477c <vTaskPriorityDisinheritAfterTimeout+0x120>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d101      	bne.n	80046ba <vTaskPriorityDisinheritAfterTimeout+0x5e>
 80046b6:	b672      	cpsid	i
 80046b8:	e7fe      	b.n	80046b8 <vTaskPriorityDisinheritAfterTimeout+0x5c>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	db04      	blt.n	80046d8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	2205      	movs	r2, #5
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	6959      	ldr	r1, [r3, #20]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	0013      	movs	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	189b      	adds	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4a26      	ldr	r2, [pc, #152]	; (8004780 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80046e8:	189b      	adds	r3, r3, r2
 80046ea:	4299      	cmp	r1, r3
 80046ec:	d142      	bne.n	8004774 <vTaskPriorityDisinheritAfterTimeout+0x118>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	3304      	adds	r3, #4
 80046f2:	0018      	movs	r0, r3
 80046f4:	f7fe fab7 	bl	8002c66 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	4b21      	ldr	r3, [pc, #132]	; (8004784 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d903      	bls.n	800470c <vTaskPriorityDisinheritAfterTimeout+0xb0>
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004708:	4b1e      	ldr	r3, [pc, #120]	; (8004784 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004710:	491b      	ldr	r1, [pc, #108]	; (8004780 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004712:	0013      	movs	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	189b      	adds	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	18cb      	adds	r3, r1, r3
 800471c:	3304      	adds	r3, #4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	60da      	str	r2, [r3, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	3204      	adds	r2, #4
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1d1a      	adds	r2, r3, #4
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004746:	0013      	movs	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	189b      	adds	r3, r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4a0c      	ldr	r2, [pc, #48]	; (8004780 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004750:	189a      	adds	r2, r3, r2
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	615a      	str	r2, [r3, #20]
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475a:	4909      	ldr	r1, [pc, #36]	; (8004780 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800475c:	0013      	movs	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	189b      	adds	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	585b      	ldr	r3, [r3, r1]
 8004766:	1c58      	adds	r0, r3, #1
 8004768:	4905      	ldr	r1, [pc, #20]	; (8004780 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800476a:	0013      	movs	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	189b      	adds	r3, r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	5058      	str	r0, [r3, r1]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	46bd      	mov	sp, r7
 8004778:	b008      	add	sp, #32
 800477a:	bd80      	pop	{r7, pc}
 800477c:	2000015c 	.word	0x2000015c
 8004780:	20000160 	.word	0x20000160
 8004784:	2000023c 	.word	0x2000023c

08004788 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <pvTaskIncrementMutexHeldCount+0x20>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004794:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <pvTaskIncrementMutexHeldCount+0x20>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800479a:	3201      	adds	r2, #1
 800479c:	649a      	str	r2, [r3, #72]	; 0x48
        }

        return pxCurrentTCB;
 800479e:	4b02      	ldr	r3, [pc, #8]	; (80047a8 <pvTaskIncrementMutexHeldCount+0x20>)
 80047a0:	681b      	ldr	r3, [r3, #0]
    }
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	2000015c 	.word	0x2000015c

080047ac <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80047b6:	4b2e      	ldr	r3, [pc, #184]	; (8004870 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047bc:	4b2d      	ldr	r3, [pc, #180]	; (8004874 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3304      	adds	r3, #4
 80047c2:	0018      	movs	r0, r3
 80047c4:	f7fe fa4f 	bl	8002c66 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3301      	adds	r3, #1
 80047cc:	d124      	bne.n	8004818 <prvAddCurrentTaskToDelayedList+0x6c>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d021      	beq.n	8004818 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047d4:	4b28      	ldr	r3, [pc, #160]	; (8004878 <prvAddCurrentTaskToDelayedList+0xcc>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	4b26      	ldr	r3, [pc, #152]	; (8004874 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	609a      	str	r2, [r3, #8]
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	6892      	ldr	r2, [r2, #8]
 80047ea:	60da      	str	r2, [r3, #12]
 80047ec:	4b21      	ldr	r3, [pc, #132]	; (8004874 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	3204      	adds	r2, #4
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	1d1a      	adds	r2, r3, #4
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	609a      	str	r2, [r3, #8]
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1c      	ldr	r2, [pc, #112]	; (8004878 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004808:	615a      	str	r2, [r3, #20]
 800480a:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <prvAddCurrentTaskToDelayedList+0xcc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004816:	e026      	b.n	8004866 <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	18d3      	adds	r3, r2, r3
 800481e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	429a      	cmp	r2, r3
 800482e:	d209      	bcs.n	8004844 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004830:	4b12      	ldr	r3, [pc, #72]	; (800487c <prvAddCurrentTaskToDelayedList+0xd0>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3304      	adds	r3, #4
 800483a:	0019      	movs	r1, r3
 800483c:	0010      	movs	r0, r2
 800483e:	f7fe f9dc 	bl	8002bfa <vListInsert>
}
 8004842:	e010      	b.n	8004866 <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <prvAddCurrentTaskToDelayedList+0xc8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3304      	adds	r3, #4
 800484e:	0019      	movs	r1, r3
 8004850:	0010      	movs	r0, r2
 8004852:	f7fe f9d2 	bl	8002bfa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	429a      	cmp	r2, r3
 800485e:	d202      	bcs.n	8004866 <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8004860:	4b08      	ldr	r3, [pc, #32]	; (8004884 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]
}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	46bd      	mov	sp, r7
 800486a:	b006      	add	sp, #24
 800486c:	bd80      	pop	{r7, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	20000238 	.word	0x20000238
 8004874:	2000015c 	.word	0x2000015c
 8004878:	20000220 	.word	0x20000220
 800487c:	200001f0 	.word	0x200001f0
 8004880:	200001ec 	.word	0x200001ec
 8004884:	20000254 	.word	0x20000254

08004888 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800488e:	2300      	movs	r3, #0
 8004890:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004892:	f000 fa2d 	bl	8004cf0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <xTimerCreateTimerTask+0x44>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800489e:	490c      	ldr	r1, [pc, #48]	; (80048d0 <xTimerCreateTimerTask+0x48>)
 80048a0:	480c      	ldr	r0, [pc, #48]	; (80048d4 <xTimerCreateTimerTask+0x4c>)
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <xTimerCreateTimerTask+0x50>)
 80048a4:	9301      	str	r3, [sp, #4]
 80048a6:	2302      	movs	r3, #2
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	2300      	movs	r3, #0
 80048ac:	2250      	movs	r2, #80	; 0x50
 80048ae:	f7fe ff3e 	bl	800372e <xTaskCreate>
 80048b2:	0003      	movs	r3, r0
 80048b4:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <xTimerCreateTimerTask+0x38>
 80048bc:	b672      	cpsid	i
 80048be:	e7fe      	b.n	80048be <xTimerCreateTimerTask+0x36>
        return xReturn;
 80048c0:	687b      	ldr	r3, [r7, #4]
    }
 80048c2:	0018      	movs	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b002      	add	sp, #8
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	20000290 	.word	0x20000290
 80048d0:	08005434 	.word	0x08005434
 80048d4:	08004985 	.word	0x08004985
 80048d8:	20000294 	.word	0x20000294

080048dc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80048e8:	e009      	b.n	80048fe <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	18d3      	adds	r3, r2, r3
 80048f2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	0010      	movs	r0, r2
 80048fc:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	18d1      	adds	r1, r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f8d8 	bl	8004ac0 <prvInsertTimerInActiveList>
 8004910:	1e03      	subs	r3, r0, #0
 8004912:	d1ea      	bne.n	80048ea <prvReloadTimer+0xe>
        }
    }
 8004914:	46c0      	nop			; (mov r8, r8)
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b004      	add	sp, #16
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <prvProcessExpiredTimer+0x60>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3304      	adds	r3, #4
 8004938:	0018      	movs	r0, r3
 800493a:	f7fe f994 	bl	8002c66 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2228      	movs	r2, #40	; 0x28
 8004942:	5c9b      	ldrb	r3, [r3, r2]
 8004944:	001a      	movs	r2, r3
 8004946:	2304      	movs	r3, #4
 8004948:	4013      	ands	r3, r2
 800494a:	d006      	beq.n	800495a <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	0018      	movs	r0, r3
 8004954:	f7ff ffc2 	bl	80048dc <prvReloadTimer>
 8004958:	e008      	b.n	800496c <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2228      	movs	r2, #40	; 0x28
 800495e:	5c9b      	ldrb	r3, [r3, r2]
 8004960:	2201      	movs	r2, #1
 8004962:	4393      	bics	r3, r2
 8004964:	b2d9      	uxtb	r1, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2228      	movs	r2, #40	; 0x28
 800496a:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	0010      	movs	r0, r2
 8004974:	4798      	blx	r3
    }
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b004      	add	sp, #16
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	20000288 	.word	0x20000288

08004984 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800498c:	2308      	movs	r3, #8
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	0018      	movs	r0, r3
 8004992:	f000 f853 	bl	8004a3c <prvGetNextExpireTime>
 8004996:	0003      	movs	r3, r0
 8004998:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	0011      	movs	r1, r2
 80049a0:	0018      	movs	r0, r3
 80049a2:	f000 f803 	bl	80049ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80049a6:	f000 f8cd 	bl	8004b44 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049aa:	e7ef      	b.n	800498c <prvTimerTask+0x8>

080049ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80049b6:	f7ff f87d 	bl	8003ab4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049ba:	2308      	movs	r3, #8
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	0018      	movs	r0, r3
 80049c0:	f000 f85e 	bl	8004a80 <prvSampleTimeNow>
 80049c4:	0003      	movs	r3, r0
 80049c6:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d12b      	bne.n	8004a26 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10c      	bne.n	80049ee <prvProcessTimerOrBlockTask+0x42>
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d808      	bhi.n	80049ee <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80049dc:	f7ff f876 	bl	8003acc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0011      	movs	r1, r2
 80049e6:	0018      	movs	r0, r3
 80049e8:	f7ff ff9a 	bl	8004920 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80049ec:	e01d      	b.n	8004a2a <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049f4:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <prvProcessTimerOrBlockTask+0x88>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <prvProcessTimerOrBlockTask+0x56>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <prvProcessTimerOrBlockTask+0x58>
 8004a02:	2300      	movs	r3, #0
 8004a04:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a06:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <prvProcessTimerOrBlockTask+0x8c>)
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	0019      	movs	r1, r3
 8004a14:	f7fe fe58 	bl	80036c8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004a18:	f7ff f858 	bl	8003acc <xTaskResumeAll>
 8004a1c:	1e03      	subs	r3, r0, #0
 8004a1e:	d104      	bne.n	8004a2a <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8004a20:	f000 fa2e 	bl	8004e80 <vPortYield>
    }
 8004a24:	e001      	b.n	8004a2a <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8004a26:	f7ff f851 	bl	8003acc <xTaskResumeAll>
    }
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b004      	add	sp, #16
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	2000028c 	.word	0x2000028c
 8004a38:	20000290 	.word	0x20000290

08004a3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a44:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <prvGetNextExpireTime+0x40>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <prvGetNextExpireTime+0x16>
 8004a4e:	2201      	movs	r2, #1
 8004a50:	e000      	b.n	8004a54 <prvGetNextExpireTime+0x18>
 8004a52:	2200      	movs	r2, #0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <prvGetNextExpireTime+0x40>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e001      	b.n	8004a70 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004a70:	68fb      	ldr	r3, [r7, #12]
    }
 8004a72:	0018      	movs	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b004      	add	sp, #16
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	20000288 	.word	0x20000288

08004a80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004a88:	f7ff f908 	bl	8003c9c <xTaskGetTickCount>
 8004a8c:	0003      	movs	r3, r0
 8004a8e:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <prvSampleTimeNow+0x3c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d205      	bcs.n	8004aa6 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8004a9a:	f000 f901 	bl	8004ca0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e002      	b.n	8004aac <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <prvSampleTimeNow+0x3c>)
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
    }
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b004      	add	sp, #16
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20000298 	.word	0x20000298

08004ac0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d812      	bhi.n	8004b0c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	1ad2      	subs	r2, r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d302      	bcc.n	8004afa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004af4:	2301      	movs	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	e01b      	b.n	8004b32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004afa:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <prvInsertTimerInActiveList+0x7c>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3304      	adds	r3, #4
 8004b02:	0019      	movs	r1, r3
 8004b04:	0010      	movs	r0, r2
 8004b06:	f7fe f878 	bl	8002bfa <vListInsert>
 8004b0a:	e012      	b.n	8004b32 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d206      	bcs.n	8004b22 <prvInsertTimerInActiveList+0x62>
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d302      	bcc.n	8004b22 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e007      	b.n	8004b32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <prvInsertTimerInActiveList+0x80>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	0019      	movs	r1, r3
 8004b2c:	0010      	movs	r0, r2
 8004b2e:	f7fe f864 	bl	8002bfa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004b32:	697b      	ldr	r3, [r7, #20]
    }
 8004b34:	0018      	movs	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	b006      	add	sp, #24
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	2000028c 	.word	0x2000028c
 8004b40:	20000288 	.word	0x20000288

08004b44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b4a:	e095      	b.n	8004c78 <prvProcessReceivedCommands+0x134>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b4c:	1d3b      	adds	r3, r7, #4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	da00      	bge.n	8004b56 <prvProcessReceivedCommands+0x12>
 8004b54:	e08f      	b.n	8004c76 <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3304      	adds	r3, #4
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7fe f87c 	bl	8002c66 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b6e:	003b      	movs	r3, r7
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7ff ff85 	bl	8004a80 <prvSampleTimeNow>
 8004b76:	0003      	movs	r3, r0
 8004b78:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8004b7a:	1d3b      	adds	r3, r7, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b09      	cmp	r3, #9
 8004b80:	d900      	bls.n	8004b84 <prvProcessReceivedCommands+0x40>
 8004b82:	e079      	b.n	8004c78 <prvProcessReceivedCommands+0x134>
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	4b44      	ldr	r3, [pc, #272]	; (8004c98 <prvProcessReceivedCommands+0x154>)
 8004b88:	18d3      	adds	r3, r2, r3
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2228      	movs	r2, #40	; 0x28
 8004b92:	5c9b      	ldrb	r3, [r3, r2]
 8004b94:	2201      	movs	r2, #1
 8004b96:	4313      	orrs	r3, r2
 8004b98:	b2d9      	uxtb	r1, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2228      	movs	r2, #40	; 0x28
 8004b9e:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ba0:	1d3b      	adds	r3, r7, #4
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	18d1      	adds	r1, r2, r3
 8004baa:	1d3b      	adds	r3, r7, #4
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	6978      	ldr	r0, [r7, #20]
 8004bb2:	f7ff ff85 	bl	8004ac0 <prvInsertTimerInActiveList>
 8004bb6:	1e03      	subs	r3, r0, #0
 8004bb8:	d05e      	beq.n	8004c78 <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2228      	movs	r2, #40	; 0x28
 8004bbe:	5c9b      	ldrb	r3, [r3, r2]
 8004bc0:	001a      	movs	r2, r3
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d00a      	beq.n	8004bde <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004bc8:	1d3b      	adds	r3, r7, #4
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	18d1      	adds	r1, r2, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f7ff fe80 	bl	80048dc <prvReloadTimer>
 8004bdc:	e008      	b.n	8004bf0 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2228      	movs	r2, #40	; 0x28
 8004be2:	5c9b      	ldrb	r3, [r3, r2]
 8004be4:	2201      	movs	r2, #1
 8004be6:	4393      	bics	r3, r2
 8004be8:	b2d9      	uxtb	r1, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2228      	movs	r2, #40	; 0x28
 8004bee:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	0010      	movs	r0, r2
 8004bf8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004bfa:	e03d      	b.n	8004c78 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2228      	movs	r2, #40	; 0x28
 8004c00:	5c9b      	ldrb	r3, [r3, r2]
 8004c02:	2201      	movs	r2, #1
 8004c04:	4393      	bics	r3, r2
 8004c06:	b2d9      	uxtb	r1, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2228      	movs	r2, #40	; 0x28
 8004c0c:	5499      	strb	r1, [r3, r2]
                        break;
 8004c0e:	e033      	b.n	8004c78 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2228      	movs	r2, #40	; 0x28
 8004c14:	5c9b      	ldrb	r3, [r3, r2]
 8004c16:	2201      	movs	r2, #1
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	b2d9      	uxtb	r1, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2228      	movs	r2, #40	; 0x28
 8004c20:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c22:	1d3b      	adds	r3, r7, #4
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <prvProcessReceivedCommands+0xf2>
 8004c32:	b672      	cpsid	i
 8004c34:	e7fe      	b.n	8004c34 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	18d1      	adds	r1, r2, r3
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	6978      	ldr	r0, [r7, #20]
 8004c44:	f7ff ff3c 	bl	8004ac0 <prvInsertTimerInActiveList>
                        break;
 8004c48:	e016      	b.n	8004c78 <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2228      	movs	r2, #40	; 0x28
 8004c4e:	5c9b      	ldrb	r3, [r3, r2]
 8004c50:	001a      	movs	r2, r3
 8004c52:	2302      	movs	r3, #2
 8004c54:	4013      	ands	r3, r2
 8004c56:	d104      	bne.n	8004c62 <prvProcessReceivedCommands+0x11e>
                            {
                                vPortFree( pxTimer );
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f000 fa60 	bl	8005120 <vPortFree>
 8004c60:	e00a      	b.n	8004c78 <prvProcessReceivedCommands+0x134>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2228      	movs	r2, #40	; 0x28
 8004c66:	5c9b      	ldrb	r3, [r3, r2]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	4393      	bics	r3, r2
 8004c6c:	b2d9      	uxtb	r1, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2228      	movs	r2, #40	; 0x28
 8004c72:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004c74:	e000      	b.n	8004c78 <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004c76:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c78:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <prvProcessReceivedCommands+0x158>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	1d39      	adds	r1, r7, #4
 8004c7e:	2200      	movs	r2, #0
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7fe fa20 	bl	80030c6 <xQueueReceive>
 8004c86:	1e03      	subs	r3, r0, #0
 8004c88:	d000      	beq.n	8004c8c <prvProcessReceivedCommands+0x148>
 8004c8a:	e75f      	b.n	8004b4c <prvProcessReceivedCommands+0x8>
        }
    }
 8004c8c:	46c0      	nop			; (mov r8, r8)
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b006      	add	sp, #24
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	080054cc 	.word	0x080054cc
 8004c9c:	20000290 	.word	0x20000290

08004ca0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ca6:	e00b      	b.n	8004cc0 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <prvSwitchTimerLists+0x48>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	425a      	negs	r2, r3
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	0011      	movs	r1, r2
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7ff fe30 	bl	8004920 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <prvSwitchTimerLists+0x48>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ee      	bne.n	8004ca8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <prvSwitchTimerLists+0x48>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <prvSwitchTimerLists+0x4c>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <prvSwitchTimerLists+0x48>)
 8004cd6:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <prvSwitchTimerLists+0x4c>)
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	601a      	str	r2, [r3, #0]
    }
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b002      	add	sp, #8
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	20000288 	.word	0x20000288
 8004cec:	2000028c 	.word	0x2000028c

08004cf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004cf4:	f000 f8d4 	bl	8004ea0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004cf8:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <prvCheckForValidListAndQueue+0x5c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d120      	bne.n	8004d42 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8004d00:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <prvCheckForValidListAndQueue+0x60>)
 8004d02:	0018      	movs	r0, r3
 8004d04:	f7fd ff50 	bl	8002ba8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004d08:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <prvCheckForValidListAndQueue+0x64>)
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f7fd ff4c 	bl	8002ba8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <prvCheckForValidListAndQueue+0x68>)
 8004d12:	4a0f      	ldr	r2, [pc, #60]	; (8004d50 <prvCheckForValidListAndQueue+0x60>)
 8004d14:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <prvCheckForValidListAndQueue+0x6c>)
 8004d18:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <prvCheckForValidListAndQueue+0x64>)
 8004d1a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	210c      	movs	r1, #12
 8004d20:	2005      	movs	r0, #5
 8004d22:	f7fe f851 	bl	8002dc8 <xQueueGenericCreate>
 8004d26:	0002      	movs	r2, r0
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <prvCheckForValidListAndQueue+0x5c>)
 8004d2a:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004d2c:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <prvCheckForValidListAndQueue+0x5c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d006      	beq.n	8004d42 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <prvCheckForValidListAndQueue+0x5c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <prvCheckForValidListAndQueue+0x70>)
 8004d3a:	0011      	movs	r1, r2
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7fe fc7f 	bl	8003640 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004d42:	f000 f8bf 	bl	8004ec4 <vPortExitCritical>
    }
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20000290 	.word	0x20000290
 8004d50:	20000260 	.word	0x20000260
 8004d54:	20000274 	.word	0x20000274
 8004d58:	20000288 	.word	0x20000288
 8004d5c:	2000028c 	.word	0x2000028c
 8004d60:	0800543c 	.word	0x0800543c

08004d64 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3b04      	subs	r3, #4
 8004d74:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2280      	movs	r2, #128	; 0x80
 8004d7a:	0452      	lsls	r2, r2, #17
 8004d7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3b04      	subs	r3, #4
 8004d82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3b04      	subs	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8004d90:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <pxPortInitialiseStack+0x50>)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3b14      	subs	r3, #20
 8004d9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3b20      	subs	r3, #32
 8004da6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004da8:	68fb      	ldr	r3, [r7, #12]
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b004      	add	sp, #16
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	08004db9 	.word	0x08004db9

08004db8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <prvTaskExitError+0x2c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	d001      	beq.n	8004dce <prvTaskExitError+0x16>
 8004dca:	b672      	cpsid	i
 8004dcc:	e7fe      	b.n	8004dcc <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8004dce:	b672      	cpsid	i

    while( ulDummy == 0 )
 8004dd0:	46c0      	nop			; (mov r8, r8)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0fc      	beq.n	8004dd2 <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b002      	add	sp, #8
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	20000010 	.word	0x20000010

08004de8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8004dec:	46c0      	nop			; (mov r8, r8)
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004e00 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8004e00:	4a0b      	ldr	r2, [pc, #44]	; (8004e30 <pxCurrentTCBConst2>)
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	3020      	adds	r0, #32
 8004e08:	f380 8809 	msr	PSP, r0
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	f380 8814 	msr	CONTROL, r0
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004e18:	46ae      	mov	lr, r5
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	bc04      	pop	{r2}
 8004e1e:	b662      	cpsie	i
 8004e20:	4718      	bx	r3
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	46c0      	nop			; (mov r8, r8)

08004e30 <pxCurrentTCBConst2>:
 8004e30:	2000015c 	.word	0x2000015c
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8004e34:	46c0      	nop			; (mov r8, r8)
 8004e36:	46c0      	nop			; (mov r8, r8)

08004e38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <xPortStartScheduler+0x40>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <xPortStartScheduler+0x40>)
 8004e42:	21ff      	movs	r1, #255	; 0xff
 8004e44:	0409      	lsls	r1, r1, #16
 8004e46:	430a      	orrs	r2, r1
 8004e48:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <xPortStartScheduler+0x40>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <xPortStartScheduler+0x40>)
 8004e50:	21ff      	movs	r1, #255	; 0xff
 8004e52:	0609      	lsls	r1, r1, #24
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004e58:	f000 f898 	bl	8004f8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <xPortStartScheduler+0x44>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8004e62:	f7ff ffcd 	bl	8004e00 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004e66:	f7ff f833 	bl	8003ed0 <vTaskSwitchContext>
    prvTaskExitError();
 8004e6a:	f7ff ffa5 	bl	8004db8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	0018      	movs	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	e000ed20 	.word	0xe000ed20
 8004e7c:	20000010 	.word	0x20000010

08004e80 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <vPortYield+0x1c>)
 8004e86:	2280      	movs	r2, #128	; 0x80
 8004e88:	0552      	lsls	r2, r2, #21
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8004e8c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004e90:	f3bf 8f6f 	isb	sy
}
 8004e94:	46c0      	nop			; (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	e000ed04 	.word	0xe000ed04

08004ea0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004ea4:	b672      	cpsid	i
    uxCriticalNesting++;
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <vPortEnterCritical+0x20>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <vPortEnterCritical+0x20>)
 8004eae:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8004eb0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004eb4:	f3bf 8f6f 	isb	sy
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	20000010 	.word	0x20000010

08004ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <vPortExitCritical+0x2c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <vPortExitCritical+0x10>
 8004ed0:	b672      	cpsid	i
 8004ed2:	e7fe      	b.n	8004ed2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004ed4:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <vPortExitCritical+0x2c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <vPortExitCritical+0x2c>)
 8004edc:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8004ede:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <vPortExitCritical+0x2c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d100      	bne.n	8004ee8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004ee6:	b662      	cpsie	i
    }
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	20000010 	.word	0x20000010

08004ef4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8004ef4:	f3ef 8010 	mrs	r0, PRIMASK
 8004ef8:	b672      	cpsid	i
 8004efa:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	0018      	movs	r0, r3

08004f00 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8004f00:	f380 8810 	msr	PRIMASK, r0
 8004f04:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004f06:	46c0      	nop			; (mov r8, r8)
	...

08004f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004f10:	f3ef 8009 	mrs	r0, PSP
 8004f14:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <pxCurrentTCBConst>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	3820      	subs	r0, #32
 8004f1a:	6010      	str	r0, [r2, #0]
 8004f1c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004f1e:	4644      	mov	r4, r8
 8004f20:	464d      	mov	r5, r9
 8004f22:	4656      	mov	r6, sl
 8004f24:	465f      	mov	r7, fp
 8004f26:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004f28:	b508      	push	{r3, lr}
 8004f2a:	b672      	cpsid	i
 8004f2c:	f7fe ffd0 	bl	8003ed0 <vTaskSwitchContext>
 8004f30:	b662      	cpsie	i
 8004f32:	bc0c      	pop	{r2, r3}
 8004f34:	6811      	ldr	r1, [r2, #0]
 8004f36:	6808      	ldr	r0, [r1, #0]
 8004f38:	3010      	adds	r0, #16
 8004f3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004f3c:	46a0      	mov	r8, r4
 8004f3e:	46a9      	mov	r9, r5
 8004f40:	46b2      	mov	sl, r6
 8004f42:	46bb      	mov	fp, r7
 8004f44:	f380 8809 	msr	PSP, r0
 8004f48:	3820      	subs	r0, #32
 8004f4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004f4c:	4718      	bx	r3
 8004f4e:	46c0      	nop			; (mov r8, r8)

08004f50 <pxCurrentTCBConst>:
 8004f50:	2000015c 	.word	0x2000015c
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46c0      	nop			; (mov r8, r8)

08004f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f5e:	f7ff ffc9 	bl	8004ef4 <ulSetInterruptMaskFromISR>
 8004f62:	0003      	movs	r3, r0
 8004f64:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004f66:	f7fe fea7 	bl	8003cb8 <xTaskIncrementTick>
 8004f6a:	1e03      	subs	r3, r0, #0
 8004f6c:	d003      	beq.n	8004f76 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <SysTick_Handler+0x30>)
 8004f70:	2280      	movs	r2, #128	; 0x80
 8004f72:	0552      	lsls	r2, r2, #21
 8004f74:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f7ff ffc1 	bl	8004f00 <vClearInterruptMaskFromISR>
}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b002      	add	sp, #8
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	e000ed04 	.word	0xe000ed04

08004f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <vPortSetupTimerInterrupt+0x34>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <vPortSetupTimerInterrupt+0x38>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <vPortSetupTimerInterrupt+0x3c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	22fa      	movs	r2, #250	; 0xfa
 8004fa2:	0091      	lsls	r1, r2, #2
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f7fb f8b7 	bl	8000118 <__udivsi3>
 8004faa:	0003      	movs	r3, r0
 8004fac:	001a      	movs	r2, r3
 8004fae:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <vPortSetupTimerInterrupt+0x40>)
 8004fb0:	3a01      	subs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fb4:	4b02      	ldr	r3, [pc, #8]	; (8004fc0 <vPortSetupTimerInterrupt+0x34>)
 8004fb6:	2207      	movs	r2, #7
 8004fb8:	601a      	str	r2, [r3, #0]
}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	e000e010 	.word	0xe000e010
 8004fc4:	e000e018 	.word	0xe000e018
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	e000e014 	.word	0xe000e014

08004fd0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004fdc:	f7fe fd6a 	bl	8003ab4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004fe0:	4b4a      	ldr	r3, [pc, #296]	; (800510c <pvPortMalloc+0x13c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004fe8:	f000 f8e6 	bl	80051b8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d012      	beq.n	8005018 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2107      	movs	r1, #7
 8004ff8:	400b      	ands	r3, r1
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	43db      	mvns	r3, r3
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d804      	bhi.n	8005014 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	18d3      	adds	r3, r2, r3
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	e001      	b.n	8005018 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	db68      	blt.n	80050f0 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d065      	beq.n	80050f0 <pvPortMalloc+0x120>
 8005024:	4b3a      	ldr	r3, [pc, #232]	; (8005110 <pvPortMalloc+0x140>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d860      	bhi.n	80050f0 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800502e:	4b39      	ldr	r3, [pc, #228]	; (8005114 <pvPortMalloc+0x144>)
 8005030:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8005032:	4b38      	ldr	r3, [pc, #224]	; (8005114 <pvPortMalloc+0x144>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005038:	e004      	b.n	8005044 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	429a      	cmp	r2, r3
 800504c:	d903      	bls.n	8005056 <pvPortMalloc+0x86>
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f1      	bne.n	800503a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005056:	4b2d      	ldr	r3, [pc, #180]	; (800510c <pvPortMalloc+0x13c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	429a      	cmp	r2, r3
 800505e:	d047      	beq.n	80050f0 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2208      	movs	r2, #8
 8005066:	189b      	adds	r3, r3, r2
 8005068:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	1ad2      	subs	r2, r2, r3
 800507a:	2308      	movs	r3, #8
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	429a      	cmp	r2, r3
 8005080:	d916      	bls.n	80050b0 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	18d3      	adds	r3, r2, r3
 8005088:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2207      	movs	r2, #7
 800508e:	4013      	ands	r3, r2
 8005090:	d001      	beq.n	8005096 <pvPortMalloc+0xc6>
 8005092:	b672      	cpsid	i
 8005094:	e7fe      	b.n	8005094 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	1ad2      	subs	r2, r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	0018      	movs	r0, r3
 80050ac:	f000 f8de 	bl	800526c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050b0:	4b17      	ldr	r3, [pc, #92]	; (8005110 <pvPortMalloc+0x140>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	1ad2      	subs	r2, r2, r3
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <pvPortMalloc+0x140>)
 80050bc:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050be:	4b14      	ldr	r3, [pc, #80]	; (8005110 <pvPortMalloc+0x140>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4b15      	ldr	r3, [pc, #84]	; (8005118 <pvPortMalloc+0x148>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d203      	bcs.n	80050d2 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050ca:	4b11      	ldr	r3, [pc, #68]	; (8005110 <pvPortMalloc+0x140>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b12      	ldr	r3, [pc, #72]	; (8005118 <pvPortMalloc+0x148>)
 80050d0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2280      	movs	r2, #128	; 0x80
 80050d8:	0612      	lsls	r2, r2, #24
 80050da:	431a      	orrs	r2, r3
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <pvPortMalloc+0x14c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <pvPortMalloc+0x14c>)
 80050ee:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80050f0:	f7fe fcec 	bl	8003acc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2207      	movs	r2, #7
 80050f8:	4013      	ands	r3, r2
 80050fa:	d001      	beq.n	8005100 <pvPortMalloc+0x130>
 80050fc:	b672      	cpsid	i
 80050fe:	e7fe      	b.n	80050fe <pvPortMalloc+0x12e>
    return pvReturn;
 8005100:	697b      	ldr	r3, [r7, #20]
}
 8005102:	0018      	movs	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	b008      	add	sp, #32
 8005108:	bd80      	pop	{r7, pc}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	20001c08 	.word	0x20001c08
 8005110:	20001c0c 	.word	0x20001c0c
 8005114:	20001c00 	.word	0x20001c00
 8005118:	20001c10 	.word	0x20001c10
 800511c:	20001c14 	.word	0x20001c14

08005120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d039      	beq.n	80051a6 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005132:	2308      	movs	r3, #8
 8005134:	425b      	negs	r3, r3
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	18d3      	adds	r3, r2, r3
 800513a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	db01      	blt.n	800514c <vPortFree+0x2c>
 8005148:	b672      	cpsid	i
 800514a:	e7fe      	b.n	800514a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <vPortFree+0x38>
 8005154:	b672      	cpsid	i
 8005156:	e7fe      	b.n	8005156 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	0fdb      	lsrs	r3, r3, #31
 800515e:	1c1a      	adds	r2, r3, #0
 8005160:	2301      	movs	r3, #1
 8005162:	4013      	ands	r3, r2
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01d      	beq.n	80051a6 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d119      	bne.n	80051a6 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	085a      	lsrs	r2, r3, #1
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800517e:	f7fe fc99 	bl	8003ab4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <vPortFree+0x90>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	18d2      	adds	r2, r2, r3
 800518c:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <vPortFree+0x90>)
 800518e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	0018      	movs	r0, r3
 8005194:	f000 f86a 	bl	800526c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <vPortFree+0x94>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <vPortFree+0x94>)
 80051a0:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 80051a2:	f7fe fc93 	bl	8003acc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b004      	add	sp, #16
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	20001c0c 	.word	0x20001c0c
 80051b4:	20001c18 	.word	0x20001c18

080051b8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051be:	4b25      	ldr	r3, [pc, #148]	; (8005254 <prvHeapInit+0x9c>)
 80051c0:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80051c2:	4b25      	ldr	r3, [pc, #148]	; (8005258 <prvHeapInit+0xa0>)
 80051c4:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2207      	movs	r2, #7
 80051ca:	4013      	ands	r3, r2
 80051cc:	d00c      	beq.n	80051e8 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3307      	adds	r3, #7
 80051d2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2207      	movs	r2, #7
 80051d8:	4393      	bics	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1ad2      	subs	r2, r2, r3
 80051e2:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <prvHeapInit+0xa0>)
 80051e4:	18d3      	adds	r3, r2, r3
 80051e6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051ec:	4b1b      	ldr	r3, [pc, #108]	; (800525c <prvHeapInit+0xa4>)
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80051f2:	4b1a      	ldr	r3, [pc, #104]	; (800525c <prvHeapInit+0xa4>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	18d3      	adds	r3, r2, r3
 80051fe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005200:	2208      	movs	r2, #8
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1a9b      	subs	r3, r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2207      	movs	r2, #7
 800520c:	4393      	bics	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4b13      	ldr	r3, [pc, #76]	; (8005260 <prvHeapInit+0xa8>)
 8005214:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <prvHeapInit+0xa8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2200      	movs	r2, #0
 800521c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <prvHeapInit+0xa8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005234:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <prvHeapInit+0xa8>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	4b08      	ldr	r3, [pc, #32]	; (8005264 <prvHeapInit+0xac>)
 8005242:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	4b07      	ldr	r3, [pc, #28]	; (8005268 <prvHeapInit+0xb0>)
 800524a:	601a      	str	r2, [r3, #0]
}
 800524c:	46c0      	nop			; (mov r8, r8)
 800524e:	46bd      	mov	sp, r7
 8005250:	b004      	add	sp, #16
 8005252:	bd80      	pop	{r7, pc}
 8005254:	00001964 	.word	0x00001964
 8005258:	2000029c 	.word	0x2000029c
 800525c:	20001c00 	.word	0x20001c00
 8005260:	20001c08 	.word	0x20001c08
 8005264:	20001c10 	.word	0x20001c10
 8005268:	20001c0c 	.word	0x20001c0c

0800526c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005274:	4b27      	ldr	r3, [pc, #156]	; (8005314 <prvInsertBlockIntoFreeList+0xa8>)
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e002      	b.n	8005280 <prvInsertBlockIntoFreeList+0x14>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d8f7      	bhi.n	800527a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	18d3      	adds	r3, r2, r3
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	429a      	cmp	r2, r3
 800529a:	d108      	bne.n	80052ae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	18d2      	adds	r2, r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	18d2      	adds	r2, r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d118      	bne.n	80052f4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <prvInsertBlockIntoFreeList+0xac>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d00d      	beq.n	80052ea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	18d2      	adds	r2, r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	e008      	b.n	80052fc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052ea:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <prvInsertBlockIntoFreeList+0xac>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e003      	b.n	80052fc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	429a      	cmp	r2, r3
 8005302:	d002      	beq.n	800530a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	46bd      	mov	sp, r7
 800530e:	b004      	add	sp, #16
 8005310:	bd80      	pop	{r7, pc}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	20001c00 	.word	0x20001c00
 8005318:	20001c08 	.word	0x20001c08

0800531c <__libc_init_array>:
 800531c:	b570      	push	{r4, r5, r6, lr}
 800531e:	2600      	movs	r6, #0
 8005320:	4d0c      	ldr	r5, [pc, #48]	; (8005354 <__libc_init_array+0x38>)
 8005322:	4c0d      	ldr	r4, [pc, #52]	; (8005358 <__libc_init_array+0x3c>)
 8005324:	1b64      	subs	r4, r4, r5
 8005326:	10a4      	asrs	r4, r4, #2
 8005328:	42a6      	cmp	r6, r4
 800532a:	d109      	bne.n	8005340 <__libc_init_array+0x24>
 800532c:	2600      	movs	r6, #0
 800532e:	f000 f82b 	bl	8005388 <_init>
 8005332:	4d0a      	ldr	r5, [pc, #40]	; (800535c <__libc_init_array+0x40>)
 8005334:	4c0a      	ldr	r4, [pc, #40]	; (8005360 <__libc_init_array+0x44>)
 8005336:	1b64      	subs	r4, r4, r5
 8005338:	10a4      	asrs	r4, r4, #2
 800533a:	42a6      	cmp	r6, r4
 800533c:	d105      	bne.n	800534a <__libc_init_array+0x2e>
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	00b3      	lsls	r3, r6, #2
 8005342:	58eb      	ldr	r3, [r5, r3]
 8005344:	4798      	blx	r3
 8005346:	3601      	adds	r6, #1
 8005348:	e7ee      	b.n	8005328 <__libc_init_array+0xc>
 800534a:	00b3      	lsls	r3, r6, #2
 800534c:	58eb      	ldr	r3, [r5, r3]
 800534e:	4798      	blx	r3
 8005350:	3601      	adds	r6, #1
 8005352:	e7f2      	b.n	800533a <__libc_init_array+0x1e>
 8005354:	080054f4 	.word	0x080054f4
 8005358:	080054f4 	.word	0x080054f4
 800535c:	080054f4 	.word	0x080054f4
 8005360:	080054f8 	.word	0x080054f8

08005364 <memcpy>:
 8005364:	2300      	movs	r3, #0
 8005366:	b510      	push	{r4, lr}
 8005368:	429a      	cmp	r2, r3
 800536a:	d100      	bne.n	800536e <memcpy+0xa>
 800536c:	bd10      	pop	{r4, pc}
 800536e:	5ccc      	ldrb	r4, [r1, r3]
 8005370:	54c4      	strb	r4, [r0, r3]
 8005372:	3301      	adds	r3, #1
 8005374:	e7f8      	b.n	8005368 <memcpy+0x4>

08005376 <memset>:
 8005376:	0003      	movs	r3, r0
 8005378:	1882      	adds	r2, r0, r2
 800537a:	4293      	cmp	r3, r2
 800537c:	d100      	bne.n	8005380 <memset+0xa>
 800537e:	4770      	bx	lr
 8005380:	7019      	strb	r1, [r3, #0]
 8005382:	3301      	adds	r3, #1
 8005384:	e7f9      	b.n	800537a <memset+0x4>
	...

08005388 <_init>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr

08005394 <_fini>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr


LCD_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000257c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800268c  0800268c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800268c  0800268c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800268c  0800268c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080026a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080026a0  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3e7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8d  00000000  00000000  0002a41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002cd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001468a  00000000  00000000  0002d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cced  00000000  00000000  00041d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f35  00000000  00000000  0004e9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d592c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c0  00000000  00000000  000d597c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002624 	.word	0x08002624

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002624 	.word	0x08002624

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f982 	bl	800052c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f814 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f89a 	bl	8000364 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f858 	bl	80002e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize LCD
      LCD_Init();
 8000234:	f001 fe84 	bl	8001f40 <LCD_Init>

      // Clear the LCD display
      LCD_Clear();
 8000238:	f001 fec2 	bl	8001fc0 <LCD_Clear>

      // Set cursor to the first line, first column
      LCD_SetCursor(0, 0);
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f001 feca 	bl	8001fd8 <LCD_SetCursor>

      // Print "Hello, World!" on the LCD
      LCD_Print("Hello, World!");
 8000244:	4b02      	ldr	r3, [pc, #8]	; (8000250 <main+0x30>)
 8000246:	0018      	movs	r0, r3
 8000248:	f001 fef2 	bl	8002030 <LCD_Print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024c:	e7fe      	b.n	800024c <main+0x2c>
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	0800263c 	.word	0x0800263c

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b093      	sub	sp, #76	; 0x4c
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	2414      	movs	r4, #20
 800025c:	193b      	adds	r3, r7, r4
 800025e:	0018      	movs	r0, r3
 8000260:	2334      	movs	r3, #52	; 0x34
 8000262:	001a      	movs	r2, r3
 8000264:	2100      	movs	r1, #0
 8000266:	f002 f9d5 	bl	8002614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	0018      	movs	r0, r3
 800026e:	2310      	movs	r3, #16
 8000270:	001a      	movs	r2, r3
 8000272:	2100      	movs	r1, #0
 8000274:	f002 f9ce 	bl	8002614 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	0018      	movs	r0, r3
 800027e:	f001 f851 	bl	8001324 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2202      	movs	r2, #2
 8000286:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	0052      	lsls	r2, r2, #1
 800028e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2200      	movs	r2, #0
 8000294:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2240      	movs	r2, #64	; 0x40
 800029a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	0018      	movs	r0, r3
 80002a6:	f001 f87d 	bl	80013a4 <HAL_RCC_OscConfig>
 80002aa:	1e03      	subs	r3, r0, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002ae:	f000 f86f 	bl	8000390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2207      	movs	r2, #7
 80002b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2100      	movs	r1, #0
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fb78 	bl	80019c4 <HAL_RCC_ClockConfig>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002d8:	f000 f85a 	bl	8000390 <Error_Handler>
  }
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b013      	add	sp, #76	; 0x4c
 80002e2:	bd90      	pop	{r4, r7, pc}

080002e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 1 */
	// __HAL_RCC_I2C1_CLK_ENABLE();

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_I2C1_Init+0x74>)
 80002ea:	4a1c      	ldr	r2, [pc, #112]	; (800035c <MX_I2C1_Init+0x78>)
 80002ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_I2C1_Init+0x74>)
 80002f0:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <MX_I2C1_Init+0x7c>)
 80002f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_I2C1_Init+0x74>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000306:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_I2C1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_I2C1_Init+0x74>)
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fbb3 	bl	8000a8c <HAL_I2C_Init>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800032a:	f000 f831 	bl	8000390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800032e:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <MX_I2C1_Init+0x74>)
 8000330:	2100      	movs	r1, #0
 8000332:	0018      	movs	r0, r3
 8000334:	f000 ff5e 	bl	80011f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800033c:	f000 f828 	bl	8000390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <MX_I2C1_Init+0x74>)
 8000342:	2100      	movs	r1, #0
 8000344:	0018      	movs	r0, r3
 8000346:	f000 ffa1 	bl	800128c <HAL_I2CEx_ConfigDigitalFilter>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800034e:	f000 f81f 	bl	8000390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000028 	.word	0x20000028
 800035c:	40005400 	.word	0x40005400
 8000360:	00303d5b 	.word	0x00303d5b

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_GPIO_Init+0x28>)
 800036c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800036e:	4b07      	ldr	r3, [pc, #28]	; (800038c <MX_GPIO_Init+0x28>)
 8000370:	2101      	movs	r1, #1
 8000372:	430a      	orrs	r2, r1
 8000374:	635a      	str	r2, [r3, #52]	; 0x34
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <MX_GPIO_Init+0x28>)
 8000378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800037a:	2201      	movs	r2, #1
 800037c:	4013      	ands	r3, r2
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b002      	add	sp, #8
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	40021000 	.word	0x40021000

08000390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000394:	b672      	cpsid	i
}
 8000396:	46c0      	nop			; (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  // Clear the LCD display
	        LCD_Clear();
 8000398:	f001 fe12 	bl	8001fc0 <LCD_Clear>

	        // Set cursor to the first line, first column
	        LCD_SetCursor(1, 1);
 800039c:	2101      	movs	r1, #1
 800039e:	2001      	movs	r0, #1
 80003a0:	f001 fe1a 	bl	8001fd8 <LCD_SetCursor>

	        // Print "Hello, World!" on the LCD
	        LCD_Print("Hello, World!");
 80003a4:	4b02      	ldr	r3, [pc, #8]	; (80003b0 <Error_Handler+0x20>)
 80003a6:	0018      	movs	r0, r3
 80003a8:	f001 fe42 	bl	8002030 <LCD_Print>
	        LCD_Clear();
 80003ac:	e7f4      	b.n	8000398 <Error_Handler+0x8>
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	0800263c 	.word	0x0800263c

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <HAL_MspInit+0x44>)
 80003bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <HAL_MspInit+0x44>)
 80003c0:	2101      	movs	r1, #1
 80003c2:	430a      	orrs	r2, r1
 80003c4:	641a      	str	r2, [r3, #64]	; 0x40
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <HAL_MspInit+0x44>)
 80003c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ca:	2201      	movs	r2, #1
 80003cc:	4013      	ands	r3, r2
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <HAL_MspInit+0x44>)
 80003d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <HAL_MspInit+0x44>)
 80003d8:	2180      	movs	r1, #128	; 0x80
 80003da:	0549      	lsls	r1, r1, #21
 80003dc:	430a      	orrs	r2, r1
 80003de:	63da      	str	r2, [r3, #60]	; 0x3c
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <HAL_MspInit+0x44>)
 80003e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003e4:	2380      	movs	r3, #128	; 0x80
 80003e6:	055b      	lsls	r3, r3, #21
 80003e8:	4013      	ands	r3, r2
 80003ea:	603b      	str	r3, [r7, #0]
 80003ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000

080003fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b091      	sub	sp, #68	; 0x44
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000404:	232c      	movs	r3, #44	; 0x2c
 8000406:	18fb      	adds	r3, r7, r3
 8000408:	0018      	movs	r0, r3
 800040a:	2314      	movs	r3, #20
 800040c:	001a      	movs	r2, r3
 800040e:	2100      	movs	r1, #0
 8000410:	f002 f900 	bl	8002614 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000414:	2410      	movs	r4, #16
 8000416:	193b      	adds	r3, r7, r4
 8000418:	0018      	movs	r0, r3
 800041a:	231c      	movs	r3, #28
 800041c:	001a      	movs	r2, r3
 800041e:	2100      	movs	r1, #0
 8000420:	f002 f8f8 	bl	8002614 <memset>
  if(hi2c->Instance==I2C1)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a23      	ldr	r2, [pc, #140]	; (80004b8 <HAL_I2C_MspInit+0xbc>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d13f      	bne.n	80004ae <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800042e:	193b      	adds	r3, r7, r4
 8000430:	2220      	movs	r2, #32
 8000432:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000434:	193b      	adds	r3, r7, r4
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043a:	193b      	adds	r3, r7, r4
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fc4b 	bl	8001cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000446:	f7ff ffa3 	bl	8000390 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <HAL_I2C_MspInit+0xc0>)
 800044c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800044e:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <HAL_I2C_MspInit+0xc0>)
 8000450:	2101      	movs	r1, #1
 8000452:	430a      	orrs	r2, r1
 8000454:	635a      	str	r2, [r3, #52]	; 0x34
 8000456:	4b19      	ldr	r3, [pc, #100]	; (80004bc <HAL_I2C_MspInit+0xc0>)
 8000458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800045a:	2201      	movs	r2, #1
 800045c:	4013      	ands	r3, r2
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000462:	212c      	movs	r1, #44	; 0x2c
 8000464:	187b      	adds	r3, r7, r1
 8000466:	22c0      	movs	r2, #192	; 0xc0
 8000468:	00d2      	lsls	r2, r2, #3
 800046a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2212      	movs	r2, #18
 8000470:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2206      	movs	r2, #6
 8000482:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	187a      	adds	r2, r7, r1
 8000486:	23a0      	movs	r3, #160	; 0xa0
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	0011      	movs	r1, r2
 800048c:	0018      	movs	r0, r3
 800048e:	f000 f999 	bl	80007c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_I2C_MspInit+0xc0>)
 8000494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <HAL_I2C_MspInit+0xc0>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	0389      	lsls	r1, r1, #14
 800049c:	430a      	orrs	r2, r1
 800049e:	63da      	str	r2, [r3, #60]	; 0x3c
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <HAL_I2C_MspInit+0xc0>)
 80004a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	039b      	lsls	r3, r3, #14
 80004a8:	4013      	ands	r3, r2
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b011      	add	sp, #68	; 0x44
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40005400 	.word	0x40005400
 80004bc:	40021000 	.word	0x40021000

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <NMI_Handler+0x4>

080004c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <HardFault_Handler+0x4>

080004cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004dc:	f7ff fff6 	bl	80004cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e2:	490d      	ldr	r1, [pc, #52]	; (8000518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <LoopForever+0xe>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f8:	4c0a      	ldr	r4, [pc, #40]	; (8000524 <LoopForever+0x16>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000506:	f002 f861 	bl	80025cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800050a:	f7ff fe89 	bl	8000220 <main>

0800050e <LoopForever>:

LoopForever:
  b LoopForever
 800050e:	e7fe      	b.n	800050e <LoopForever>
  ldr   r0, =_estack
 8000510:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800051c:	08002694 	.word	0x08002694
  ldr r2, =_sbss
 8000520:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000524:	2000010c 	.word	0x2000010c

08000528 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC1_IRQHandler>
	...

0800052c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_Init+0x3c>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_Init+0x3c>)
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	0049      	lsls	r1, r1, #1
 8000542:	430a      	orrs	r2, r1
 8000544:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000546:	2000      	movs	r0, #0
 8000548:	f000 f810 	bl	800056c <HAL_InitTick>
 800054c:	1e03      	subs	r3, r0, #0
 800054e:	d003      	beq.n	8000558 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
 8000556:	e001      	b.n	800055c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f7ff ff2c 	bl	80003b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800055c:	1dfb      	adds	r3, r7, #7
 800055e:	781b      	ldrb	r3, [r3, #0]
}
 8000560:	0018      	movs	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	b002      	add	sp, #8
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40022000 	.word	0x40022000

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000574:	230f      	movs	r3, #15
 8000576:	18fb      	adds	r3, r7, r3
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <HAL_InitTick+0x88>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d02b      	beq.n	80005dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <HAL_InitTick+0x8c>)
 8000586:	681c      	ldr	r4, [r3, #0]
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <HAL_InitTick+0x88>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	0019      	movs	r1, r3
 800058e:	23fa      	movs	r3, #250	; 0xfa
 8000590:	0098      	lsls	r0, r3, #2
 8000592:	f7ff fdb9 	bl	8000108 <__udivsi3>
 8000596:	0003      	movs	r3, r0
 8000598:	0019      	movs	r1, r3
 800059a:	0020      	movs	r0, r4
 800059c:	f7ff fdb4 	bl	8000108 <__udivsi3>
 80005a0:	0003      	movs	r3, r0
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 f901 	bl	80007aa <HAL_SYSTICK_Config>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d112      	bne.n	80005d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d80a      	bhi.n	80005c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	2301      	movs	r3, #1
 80005b6:	425b      	negs	r3, r3
 80005b8:	2200      	movs	r2, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 f8e0 	bl	8000780 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_InitTick+0x90>)
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	e00d      	b.n	80005e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80005c8:	230f      	movs	r3, #15
 80005ca:	18fb      	adds	r3, r7, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	e008      	b.n	80005e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005d2:	230f      	movs	r3, #15
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	e003      	b.n	80005e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005dc:	230f      	movs	r3, #15
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80005e4:	230f      	movs	r3, #15
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	781b      	ldrb	r3, [r3, #0]
}
 80005ea:	0018      	movs	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b005      	add	sp, #20
 80005f0:	bd90      	pop	{r4, r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  return uwTick;
 8000604:	4b02      	ldr	r3, [pc, #8]	; (8000610 <HAL_GetTick+0x10>)
 8000606:	681b      	ldr	r3, [r3, #0]
}
 8000608:	0018      	movs	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	2000007c 	.word	0x2000007c

08000614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800061c:	f7ff fff0 	bl	8000600 <HAL_GetTick>
 8000620:	0003      	movs	r3, r0
 8000622:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3301      	adds	r3, #1
 800062c:	d005      	beq.n	800063a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_Delay+0x44>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	001a      	movs	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	189b      	adds	r3, r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	f7ff ffe0 	bl	8000600 <HAL_GetTick>
 8000640:	0002      	movs	r2, r0
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	429a      	cmp	r2, r3
 800064a:	d8f7      	bhi.n	800063c <HAL_Delay+0x28>
  {
  }
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b004      	add	sp, #16
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000008 	.word	0x20000008

0800065c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	0002      	movs	r2, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b7f      	cmp	r3, #127	; 0x7f
 8000670:	d828      	bhi.n	80006c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000672:	4a2f      	ldr	r2, [pc, #188]	; (8000730 <__NVIC_SetPriority+0xd4>)
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b25b      	sxtb	r3, r3
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	33c0      	adds	r3, #192	; 0xc0
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	589b      	ldr	r3, [r3, r2]
 8000682:	1dfa      	adds	r2, r7, #7
 8000684:	7812      	ldrb	r2, [r2, #0]
 8000686:	0011      	movs	r1, r2
 8000688:	2203      	movs	r2, #3
 800068a:	400a      	ands	r2, r1
 800068c:	00d2      	lsls	r2, r2, #3
 800068e:	21ff      	movs	r1, #255	; 0xff
 8000690:	4091      	lsls	r1, r2
 8000692:	000a      	movs	r2, r1
 8000694:	43d2      	mvns	r2, r2
 8000696:	401a      	ands	r2, r3
 8000698:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	019b      	lsls	r3, r3, #6
 800069e:	22ff      	movs	r2, #255	; 0xff
 80006a0:	401a      	ands	r2, r3
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	0018      	movs	r0, r3
 80006a8:	2303      	movs	r3, #3
 80006aa:	4003      	ands	r3, r0
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b0:	481f      	ldr	r0, [pc, #124]	; (8000730 <__NVIC_SetPriority+0xd4>)
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	089b      	lsrs	r3, r3, #2
 80006ba:	430a      	orrs	r2, r1
 80006bc:	33c0      	adds	r3, #192	; 0xc0
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006c2:	e031      	b.n	8000728 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <__NVIC_SetPriority+0xd8>)
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	0019      	movs	r1, r3
 80006cc:	230f      	movs	r3, #15
 80006ce:	400b      	ands	r3, r1
 80006d0:	3b08      	subs	r3, #8
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	3306      	adds	r3, #6
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	18d3      	adds	r3, r2, r3
 80006da:	3304      	adds	r3, #4
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	1dfa      	adds	r2, r7, #7
 80006e0:	7812      	ldrb	r2, [r2, #0]
 80006e2:	0011      	movs	r1, r2
 80006e4:	2203      	movs	r2, #3
 80006e6:	400a      	ands	r2, r1
 80006e8:	00d2      	lsls	r2, r2, #3
 80006ea:	21ff      	movs	r1, #255	; 0xff
 80006ec:	4091      	lsls	r1, r2
 80006ee:	000a      	movs	r2, r1
 80006f0:	43d2      	mvns	r2, r2
 80006f2:	401a      	ands	r2, r3
 80006f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	019b      	lsls	r3, r3, #6
 80006fa:	22ff      	movs	r2, #255	; 0xff
 80006fc:	401a      	ands	r2, r3
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	0018      	movs	r0, r3
 8000704:	2303      	movs	r3, #3
 8000706:	4003      	ands	r3, r0
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <__NVIC_SetPriority+0xd8>)
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	001c      	movs	r4, r3
 8000714:	230f      	movs	r3, #15
 8000716:	4023      	ands	r3, r4
 8000718:	3b08      	subs	r3, #8
 800071a:	089b      	lsrs	r3, r3, #2
 800071c:	430a      	orrs	r2, r1
 800071e:	3306      	adds	r3, #6
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	18c3      	adds	r3, r0, r3
 8000724:	3304      	adds	r3, #4
 8000726:	601a      	str	r2, [r3, #0]
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b003      	add	sp, #12
 800072e:	bd90      	pop	{r4, r7, pc}
 8000730:	e000e100 	.word	0xe000e100
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1e5a      	subs	r2, r3, #1
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	045b      	lsls	r3, r3, #17
 8000748:	429a      	cmp	r2, r3
 800074a:	d301      	bcc.n	8000750 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074c:	2301      	movs	r3, #1
 800074e:	e010      	b.n	8000772 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <SysTick_Config+0x44>)
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	3a01      	subs	r2, #1
 8000756:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000758:	2301      	movs	r3, #1
 800075a:	425b      	negs	r3, r3
 800075c:	2103      	movs	r1, #3
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff ff7c 	bl	800065c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <SysTick_Config+0x44>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SysTick_Config+0x44>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000770:	2300      	movs	r3, #0
}
 8000772:	0018      	movs	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	210f      	movs	r1, #15
 800078c:	187b      	adds	r3, r7, r1
 800078e:	1c02      	adds	r2, r0, #0
 8000790:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	187b      	adds	r3, r7, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b25b      	sxtb	r3, r3
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f7ff ff5d 	bl	800065c <__NVIC_SetPriority>
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b004      	add	sp, #16
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff ffbf 	bl	8000738 <SysTick_Config>
 80007ba:	0003      	movs	r3, r0
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007d2:	e147      	b.n	8000a64 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2101      	movs	r1, #1
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	4091      	lsls	r1, r2
 80007de:	000a      	movs	r2, r1
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d100      	bne.n	80007ec <HAL_GPIO_Init+0x28>
 80007ea:	e138      	b.n	8000a5e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2203      	movs	r2, #3
 80007f2:	4013      	ands	r3, r2
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d005      	beq.n	8000804 <HAL_GPIO_Init+0x40>
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	2203      	movs	r2, #3
 80007fe:	4013      	ands	r3, r2
 8000800:	2b02      	cmp	r3, #2
 8000802:	d130      	bne.n	8000866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	2203      	movs	r2, #3
 8000810:	409a      	lsls	r2, r3
 8000812:	0013      	movs	r3, r2
 8000814:	43da      	mvns	r2, r3
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	409a      	lsls	r2, r3
 8000826:	0013      	movs	r3, r2
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	4313      	orrs	r3, r2
 800082c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800083a:	2201      	movs	r2, #1
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
 8000840:	0013      	movs	r3, r2
 8000842:	43da      	mvns	r2, r3
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	4013      	ands	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	091b      	lsrs	r3, r3, #4
 8000850:	2201      	movs	r2, #1
 8000852:	401a      	ands	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	409a      	lsls	r2, r3
 8000858:	0013      	movs	r3, r2
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4313      	orrs	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2203      	movs	r2, #3
 800086c:	4013      	ands	r3, r2
 800086e:	2b03      	cmp	r3, #3
 8000870:	d017      	beq.n	80008a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	2203      	movs	r2, #3
 800087e:	409a      	lsls	r2, r3
 8000880:	0013      	movs	r3, r2
 8000882:	43da      	mvns	r2, r3
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	4013      	ands	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	689a      	ldr	r2, [r3, #8]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	409a      	lsls	r2, r3
 8000894:	0013      	movs	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4313      	orrs	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2203      	movs	r2, #3
 80008a8:	4013      	ands	r3, r2
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d123      	bne.n	80008f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	08da      	lsrs	r2, r3, #3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3208      	adds	r2, #8
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	58d3      	ldr	r3, [r2, r3]
 80008ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	2207      	movs	r2, #7
 80008c0:	4013      	ands	r3, r2
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	220f      	movs	r2, #15
 80008c6:	409a      	lsls	r2, r3
 80008c8:	0013      	movs	r3, r2
 80008ca:	43da      	mvns	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	4013      	ands	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	691a      	ldr	r2, [r3, #16]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	2107      	movs	r1, #7
 80008da:	400b      	ands	r3, r1
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	409a      	lsls	r2, r3
 80008e0:	0013      	movs	r3, r2
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	08da      	lsrs	r2, r3, #3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3208      	adds	r2, #8
 80008f0:	0092      	lsls	r2, r2, #2
 80008f2:	6939      	ldr	r1, [r7, #16]
 80008f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	409a      	lsls	r2, r3
 8000904:	0013      	movs	r3, r2
 8000906:	43da      	mvns	r2, r3
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2203      	movs	r2, #3
 8000914:	401a      	ands	r2, r3
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	409a      	lsls	r2, r3
 800091c:	0013      	movs	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4313      	orrs	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	23c0      	movs	r3, #192	; 0xc0
 8000930:	029b      	lsls	r3, r3, #10
 8000932:	4013      	ands	r3, r2
 8000934:	d100      	bne.n	8000938 <HAL_GPIO_Init+0x174>
 8000936:	e092      	b.n	8000a5e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000938:	4a50      	ldr	r2, [pc, #320]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	089b      	lsrs	r3, r3, #2
 800093e:	3318      	adds	r3, #24
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	589b      	ldr	r3, [r3, r2]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	2203      	movs	r2, #3
 800094a:	4013      	ands	r3, r2
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	220f      	movs	r2, #15
 8000950:	409a      	lsls	r2, r3
 8000952:	0013      	movs	r3, r2
 8000954:	43da      	mvns	r2, r3
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	23a0      	movs	r3, #160	; 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	429a      	cmp	r2, r3
 8000964:	d013      	beq.n	800098e <HAL_GPIO_Init+0x1ca>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a45      	ldr	r2, [pc, #276]	; (8000a80 <HAL_GPIO_Init+0x2bc>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d00d      	beq.n	800098a <HAL_GPIO_Init+0x1c6>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a44      	ldr	r2, [pc, #272]	; (8000a84 <HAL_GPIO_Init+0x2c0>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d007      	beq.n	8000986 <HAL_GPIO_Init+0x1c2>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a43      	ldr	r2, [pc, #268]	; (8000a88 <HAL_GPIO_Init+0x2c4>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_GPIO_Init+0x1be>
 800097e:	2303      	movs	r3, #3
 8000980:	e006      	b.n	8000990 <HAL_GPIO_Init+0x1cc>
 8000982:	2305      	movs	r3, #5
 8000984:	e004      	b.n	8000990 <HAL_GPIO_Init+0x1cc>
 8000986:	2302      	movs	r3, #2
 8000988:	e002      	b.n	8000990 <HAL_GPIO_Init+0x1cc>
 800098a:	2301      	movs	r3, #1
 800098c:	e000      	b.n	8000990 <HAL_GPIO_Init+0x1cc>
 800098e:	2300      	movs	r3, #0
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	2103      	movs	r1, #3
 8000994:	400a      	ands	r2, r1
 8000996:	00d2      	lsls	r2, r2, #3
 8000998:	4093      	lsls	r3, r2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80009a0:	4936      	ldr	r1, [pc, #216]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	089b      	lsrs	r3, r3, #2
 80009a6:	3318      	adds	r3, #24
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009ae:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	43da      	mvns	r2, r3
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	035b      	lsls	r3, r3, #13
 80009c6:	4013      	ands	r3, r2
 80009c8:	d003      	beq.n	80009d2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	43da      	mvns	r2, r3
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	039b      	lsls	r3, r3, #14
 80009f0:	4013      	ands	r3, r2
 80009f2:	d003      	beq.n	80009fc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a02:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a04:	2384      	movs	r3, #132	; 0x84
 8000a06:	58d3      	ldr	r3, [r2, r3]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	43da      	mvns	r2, r3
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685a      	ldr	r2, [r3, #4]
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	029b      	lsls	r3, r3, #10
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a28:	4914      	ldr	r1, [pc, #80]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a2a:	2284      	movs	r2, #132	; 0x84
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	58d3      	ldr	r3, [r2, r3]
 8000a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	025b      	lsls	r3, r3, #9
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	d003      	beq.n	8000a56 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a56:	4909      	ldr	r1, [pc, #36]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	40da      	lsrs	r2, r3
 8000a6c:	1e13      	subs	r3, r2, #0
 8000a6e:	d000      	beq.n	8000a72 <HAL_GPIO_Init+0x2ae>
 8000a70:	e6b0      	b.n	80007d4 <HAL_GPIO_Init+0x10>
  }
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b006      	add	sp, #24
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021800 	.word	0x40021800
 8000a80:	50000400 	.word	0x50000400
 8000a84:	50000800 	.word	0x50000800
 8000a88:	50000c00 	.word	0x50000c00

08000a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e082      	b.n	8000ba4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2241      	movs	r2, #65	; 0x41
 8000aa2:	5c9b      	ldrb	r3, [r3, r2]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d107      	bne.n	8000aba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2240      	movs	r2, #64	; 0x40
 8000aae:	2100      	movs	r1, #0
 8000ab0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fca1 	bl	80003fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2241      	movs	r2, #65	; 0x41
 8000abe:	2124      	movs	r1, #36	; 0x24
 8000ac0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2101      	movs	r1, #1
 8000ace:	438a      	bics	r2, r1
 8000ad0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4934      	ldr	r1, [pc, #208]	; (8000bac <HAL_I2C_Init+0x120>)
 8000adc:	400a      	ands	r2, r1
 8000ade:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4931      	ldr	r1, [pc, #196]	; (8000bb0 <HAL_I2C_Init+0x124>)
 8000aec:	400a      	ands	r2, r1
 8000aee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d108      	bne.n	8000b0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0209      	lsls	r1, r1, #8
 8000b04:	430a      	orrs	r2, r1
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	e007      	b.n	8000b1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2184      	movs	r1, #132	; 0x84
 8000b14:	0209      	lsls	r1, r1, #8
 8000b16:	430a      	orrs	r2, r1
 8000b18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d104      	bne.n	8000b2c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	491f      	ldr	r1, [pc, #124]	; (8000bb4 <HAL_I2C_Init+0x128>)
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	491a      	ldr	r1, [pc, #104]	; (8000bb0 <HAL_I2C_Init+0x124>)
 8000b48:	400a      	ands	r2, r1
 8000b4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	691a      	ldr	r2, [r3, #16]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	69d9      	ldr	r1, [r3, #28]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a1a      	ldr	r2, [r3, #32]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2241      	movs	r2, #65	; 0x41
 8000b90:	2120      	movs	r1, #32
 8000b92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2242      	movs	r2, #66	; 0x42
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	f0ffffff 	.word	0xf0ffffff
 8000bb0:	ffff7fff 	.word	0xffff7fff
 8000bb4:	02008000 	.word	0x02008000

08000bb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	0008      	movs	r0, r1
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	230a      	movs	r3, #10
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	1c02      	adds	r2, r0, #0
 8000bcc:	801a      	strh	r2, [r3, #0]
 8000bce:	2308      	movs	r3, #8
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	1c0a      	adds	r2, r1, #0
 8000bd4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2241      	movs	r2, #65	; 0x41
 8000bda:	5c9b      	ldrb	r3, [r3, r2]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b20      	cmp	r3, #32
 8000be0:	d000      	beq.n	8000be4 <HAL_I2C_Master_Transmit+0x2c>
 8000be2:	e0e7      	b.n	8000db4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2240      	movs	r2, #64	; 0x40
 8000be8:	5c9b      	ldrb	r3, [r3, r2]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d101      	bne.n	8000bf2 <HAL_I2C_Master_Transmit+0x3a>
 8000bee:	2302      	movs	r3, #2
 8000bf0:	e0e1      	b.n	8000db6 <HAL_I2C_Master_Transmit+0x1fe>
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2240      	movs	r2, #64	; 0x40
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000bfa:	f7ff fd01 	bl	8000600 <HAL_GetTick>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	0219      	lsls	r1, r3, #8
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2319      	movs	r3, #25
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f000 f8fc 	bl	8000e0c <I2C_WaitOnFlagUntilTimeout>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e0cc      	b.n	8000db6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2241      	movs	r2, #65	; 0x41
 8000c20:	2121      	movs	r1, #33	; 0x21
 8000c22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2242      	movs	r2, #66	; 0x42
 8000c28:	2110      	movs	r1, #16
 8000c2a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	18ba      	adds	r2, r7, r2
 8000c3e:	8812      	ldrh	r2, [r2, #0]
 8000c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2200      	movs	r2, #0
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	2bff      	cmp	r3, #255	; 0xff
 8000c50:	d911      	bls.n	8000c76 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	22ff      	movs	r2, #255	; 0xff
 8000c56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	045c      	lsls	r4, r3, #17
 8000c62:	230a      	movs	r3, #10
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	8819      	ldrh	r1, [r3, #0]
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	4b55      	ldr	r3, [pc, #340]	; (8000dc0 <HAL_I2C_Master_Transmit+0x208>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	0023      	movs	r3, r4
 8000c70:	f000 fa86 	bl	8001180 <I2C_TransferConfig>
 8000c74:	e075      	b.n	8000d62 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	049c      	lsls	r4, r3, #18
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	8819      	ldrh	r1, [r3, #0]
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	4b4b      	ldr	r3, [pc, #300]	; (8000dc0 <HAL_I2C_Master_Transmit+0x208>)
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	0023      	movs	r3, r4
 8000c98:	f000 fa72 	bl	8001180 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000c9c:	e061      	b.n	8000d62 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 f8f0 	bl	8000e8a <I2C_WaitOnTXISFlagUntilTimeout>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e081      	b.n	8000db6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d03a      	beq.n	8000d62 <HAL_I2C_Master_Transmit+0x1aa>
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d136      	bne.n	8000d62 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	f000 f883 	bl	8000e0c <I2C_WaitOnFlagUntilTimeout>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e053      	b.n	8000db6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	2bff      	cmp	r3, #255	; 0xff
 8000d16:	d911      	bls.n	8000d3c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	22ff      	movs	r2, #255	; 0xff
 8000d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	045c      	lsls	r4, r3, #17
 8000d28:	230a      	movs	r3, #10
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	8819      	ldrh	r1, [r3, #0]
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	2300      	movs	r3, #0
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	0023      	movs	r3, r4
 8000d36:	f000 fa23 	bl	8001180 <I2C_TransferConfig>
 8000d3a:	e012      	b.n	8000d62 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	049c      	lsls	r4, r3, #18
 8000d50:	230a      	movs	r3, #10
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	8819      	ldrh	r1, [r3, #0]
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	0023      	movs	r3, r4
 8000d5e:	f000 fa0f 	bl	8001180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d198      	bne.n	8000c9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 f8c8 	bl	8000f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e01a      	b.n	8000db6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2220      	movs	r2, #32
 8000d86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <HAL_I2C_Master_Transmit+0x20c>)
 8000d94:	400a      	ands	r2, r1
 8000d96:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2241      	movs	r2, #65	; 0x41
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2242      	movs	r2, #66	; 0x42
 8000da4:	2100      	movs	r1, #0
 8000da6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2240      	movs	r2, #64	; 0x40
 8000dac:	2100      	movs	r1, #0
 8000dae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e000      	b.n	8000db6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8000db4:	2302      	movs	r3, #2
  }
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b007      	add	sp, #28
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	80002000 	.word	0x80002000
 8000dc4:	fe00e800 	.word	0xfe00e800

08000dc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	4013      	ands	r3, r2
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d103      	bne.n	8000de6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	2201      	movs	r2, #1
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d007      	beq.n	8000e04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2101      	movs	r1, #1
 8000e00:	430a      	orrs	r2, r1
 8000e02:	619a      	str	r2, [r3, #24]
  }
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b002      	add	sp, #8
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e1c:	e021      	b.n	8000e62 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	3301      	adds	r3, #1
 8000e22:	d01e      	beq.n	8000e62 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e24:	f7ff fbec 	bl	8000600 <HAL_GetTick>
 8000e28:	0002      	movs	r2, r0
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d302      	bcc.n	8000e3a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d113      	bne.n	8000e62 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	2220      	movs	r2, #32
 8000e40:	431a      	orrs	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2241      	movs	r2, #65	; 0x41
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2242      	movs	r2, #66	; 0x42
 8000e52:	2100      	movs	r1, #0
 8000e54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2240      	movs	r2, #64	; 0x40
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	425a      	negs	r2, r3
 8000e72:	4153      	adcs	r3, r2
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	001a      	movs	r2, r3
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d0ce      	beq.n	8000e1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b004      	add	sp, #16
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e96:	e02b      	b.n	8000ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 f86e 	bl	8000f80 <I2C_IsErrorOccurred>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e029      	b.n	8000f00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	d01e      	beq.n	8000ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000eb2:	f7ff fba5 	bl	8000600 <HAL_GetTick>
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d302      	bcc.n	8000ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d113      	bne.n	8000ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	2220      	movs	r2, #32
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2241      	movs	r2, #65	; 0x41
 8000ed8:	2120      	movs	r1, #32
 8000eda:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2242      	movs	r2, #66	; 0x42
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2240      	movs	r2, #64	; 0x40
 8000ee8:	2100      	movs	r1, #0
 8000eea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e007      	b.n	8000f00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d1cc      	bne.n	8000e98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f14:	e028      	b.n	8000f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f000 f82f 	bl	8000f80 <I2C_IsErrorOccurred>
 8000f22:	1e03      	subs	r3, r0, #0
 8000f24:	d001      	beq.n	8000f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e026      	b.n	8000f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f2a:	f7ff fb69 	bl	8000600 <HAL_GetTick>
 8000f2e:	0002      	movs	r2, r0
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d302      	bcc.n	8000f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d113      	bne.n	8000f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f44:	2220      	movs	r2, #32
 8000f46:	431a      	orrs	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2241      	movs	r2, #65	; 0x41
 8000f50:	2120      	movs	r1, #32
 8000f52:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2242      	movs	r2, #66	; 0x42
 8000f58:	2100      	movs	r1, #0
 8000f5a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2240      	movs	r2, #64	; 0x40
 8000f60:	2100      	movs	r1, #0
 8000f62:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e007      	b.n	8000f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2220      	movs	r2, #32
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b20      	cmp	r3, #32
 8000f74:	d1cf      	bne.n	8000f16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b004      	add	sp, #16
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b08b      	sub	sp, #44	; 0x2c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8c:	2327      	movs	r3, #39	; 0x27
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d100      	bne.n	8000fae <I2C_IsErrorOccurred+0x2e>
 8000fac:	e082      	b.n	80010b4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000fb6:	e060      	b.n	800107a <I2C_IsErrorOccurred+0xfa>
 8000fb8:	2427      	movs	r4, #39	; 0x27
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	193a      	adds	r2, r7, r4
 8000fbe:	7812      	ldrb	r2, [r2, #0]
 8000fc0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	d058      	beq.n	800107a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000fc8:	f7ff fb1a 	bl	8000600 <HAL_GetTick>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d306      	bcc.n	8000fe6 <I2C_IsErrorOccurred+0x66>
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	193a      	adds	r2, r7, r4
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d149      	bne.n	800107a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	01db      	lsls	r3, r3, #7
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8000ff4:	2013      	movs	r0, #19
 8000ff6:	183b      	adds	r3, r7, r0
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	2142      	movs	r1, #66	; 0x42
 8000ffc:	5c52      	ldrb	r2, [r2, r1]
 8000ffe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	401a      	ands	r2, r3
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	429a      	cmp	r2, r3
 8001012:	d126      	bne.n	8001062 <I2C_IsErrorOccurred+0xe2>
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	01db      	lsls	r3, r3, #7
 800101a:	429a      	cmp	r2, r3
 800101c:	d021      	beq.n	8001062 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800101e:	183b      	adds	r3, r7, r0
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b20      	cmp	r3, #32
 8001024:	d01d      	beq.n	8001062 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	01c9      	lsls	r1, r1, #7
 8001034:	430a      	orrs	r2, r1
 8001036:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001038:	f7ff fae2 	bl	8000600 <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001040:	e00f      	b.n	8001062 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001042:	f7ff fadd 	bl	8000600 <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b19      	cmp	r3, #25
 800104e:	d908      	bls.n	8001062 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	2220      	movs	r2, #32
 8001054:	4313      	orrs	r3, r2
 8001056:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001058:	2327      	movs	r3, #39	; 0x27
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]

              break;
 8001060:	e00b      	b.n	800107a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	2220      	movs	r2, #32
 800106a:	4013      	ands	r3, r2
 800106c:	2127      	movs	r1, #39	; 0x27
 800106e:	187a      	adds	r2, r7, r1
 8001070:	1879      	adds	r1, r7, r1
 8001072:	7809      	ldrb	r1, [r1, #0]
 8001074:	7011      	strb	r1, [r2, #0]
 8001076:	2b20      	cmp	r3, #32
 8001078:	d1e3      	bne.n	8001042 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2220      	movs	r2, #32
 8001082:	4013      	ands	r3, r2
 8001084:	2b20      	cmp	r3, #32
 8001086:	d004      	beq.n	8001092 <I2C_IsErrorOccurred+0x112>
 8001088:	2327      	movs	r3, #39	; 0x27
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d092      	beq.n	8000fb8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001092:	2327      	movs	r3, #39	; 0x27
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2220      	movs	r2, #32
 80010a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	2204      	movs	r2, #4
 80010a8:	4313      	orrs	r3, r2
 80010aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80010ac:	2327      	movs	r3, #39	; 0x27
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4013      	ands	r3, r2
 80010c4:	d00c      	beq.n	80010e0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	2201      	movs	r2, #1
 80010ca:	4313      	orrs	r3, r2
 80010cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	0052      	lsls	r2, r2, #1
 80010d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80010d8:	2327      	movs	r3, #39	; 0x27
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4013      	ands	r3, r2
 80010e8:	d00c      	beq.n	8001104 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	2208      	movs	r2, #8
 80010ee:	4313      	orrs	r3, r2
 80010f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	00d2      	lsls	r2, r2, #3
 80010fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80010fc:	2327      	movs	r3, #39	; 0x27
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4013      	ands	r3, r2
 800110c:	d00c      	beq.n	8001128 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	2202      	movs	r2, #2
 8001112:	4313      	orrs	r3, r2
 8001114:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001120:	2327      	movs	r3, #39	; 0x27
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001128:	2327      	movs	r3, #39	; 0x27
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d01d      	beq.n	800116e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff fe47 	bl	8000dc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	490d      	ldr	r1, [pc, #52]	; (800117c <I2C_IsErrorOccurred+0x1fc>)
 8001146:	400a      	ands	r2, r1
 8001148:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	431a      	orrs	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2241      	movs	r2, #65	; 0x41
 800115a:	2120      	movs	r1, #32
 800115c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2242      	movs	r2, #66	; 0x42
 8001162:	2100      	movs	r1, #0
 8001164:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2240      	movs	r2, #64	; 0x40
 800116a:	2100      	movs	r1, #0
 800116c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800116e:	2327      	movs	r3, #39	; 0x27
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	781b      	ldrb	r3, [r3, #0]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b00b      	add	sp, #44	; 0x2c
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	fe00e800 	.word	0xfe00e800

08001180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	0008      	movs	r0, r1
 800118a:	0011      	movs	r1, r2
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	240a      	movs	r4, #10
 8001190:	193b      	adds	r3, r7, r4
 8001192:	1c02      	adds	r2, r0, #0
 8001194:	801a      	strh	r2, [r3, #0]
 8001196:	2009      	movs	r0, #9
 8001198:	183b      	adds	r3, r7, r0
 800119a:	1c0a      	adds	r2, r1, #0
 800119c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	059b      	lsls	r3, r3, #22
 80011a4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80011a6:	183b      	adds	r3, r7, r0
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	0419      	lsls	r1, r3, #16
 80011ac:	23ff      	movs	r3, #255	; 0xff
 80011ae:	041b      	lsls	r3, r3, #16
 80011b0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80011b2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80011b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ba:	4313      	orrs	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	085b      	lsrs	r3, r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ca:	0d51      	lsrs	r1, r2, #21
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	00d2      	lsls	r2, r2, #3
 80011d0:	400a      	ands	r2, r1
 80011d2:	4907      	ldr	r1, [pc, #28]	; (80011f0 <I2C_TransferConfig+0x70>)
 80011d4:	430a      	orrs	r2, r1
 80011d6:	43d2      	mvns	r2, r2
 80011d8:	401a      	ands	r2, r3
 80011da:	0011      	movs	r1, r2
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b007      	add	sp, #28
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	03ff63ff 	.word	0x03ff63ff

080011f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2241      	movs	r2, #65	; 0x41
 8001202:	5c9b      	ldrb	r3, [r3, r2]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b20      	cmp	r3, #32
 8001208:	d138      	bne.n	800127c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2240      	movs	r2, #64	; 0x40
 800120e:	5c9b      	ldrb	r3, [r3, r2]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001214:	2302      	movs	r3, #2
 8001216:	e032      	b.n	800127e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2240      	movs	r2, #64	; 0x40
 800121c:	2101      	movs	r1, #1
 800121e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2241      	movs	r2, #65	; 0x41
 8001224:	2124      	movs	r1, #36	; 0x24
 8001226:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2101      	movs	r1, #1
 8001234:	438a      	bics	r2, r1
 8001236:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4911      	ldr	r1, [pc, #68]	; (8001288 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001244:	400a      	ands	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2241      	movs	r2, #65	; 0x41
 800126c:	2120      	movs	r1, #32
 800126e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2240      	movs	r2, #64	; 0x40
 8001274:	2100      	movs	r1, #0
 8001276:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	e000      	b.n	800127e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800127c:	2302      	movs	r3, #2
  }
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	ffffefff 	.word	0xffffefff

0800128c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2241      	movs	r2, #65	; 0x41
 800129a:	5c9b      	ldrb	r3, [r3, r2]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b20      	cmp	r3, #32
 80012a0:	d139      	bne.n	8001316 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2240      	movs	r2, #64	; 0x40
 80012a6:	5c9b      	ldrb	r3, [r3, r2]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e033      	b.n	8001318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2240      	movs	r2, #64	; 0x40
 80012b4:	2101      	movs	r1, #1
 80012b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2241      	movs	r2, #65	; 0x41
 80012bc:	2124      	movs	r1, #36	; 0x24
 80012be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2101      	movs	r1, #1
 80012cc:	438a      	bics	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2241      	movs	r2, #65	; 0x41
 8001306:	2120      	movs	r1, #32
 8001308:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2240      	movs	r2, #64	; 0x40
 800130e:	2100      	movs	r1, #0
 8001310:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001316:	2302      	movs	r3, #2
  }
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b004      	add	sp, #16
 800131e:	bd80      	pop	{r7, pc}
 8001320:	fffff0ff 	.word	0xfffff0ff

08001324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001332:	4013      	ands	r3, r2
 8001334:	0019      	movs	r1, r3
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	429a      	cmp	r2, r3
 8001346:	d11f      	bne.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	0013      	movs	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	189b      	adds	r3, r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4912      	ldr	r1, [pc, #72]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001356:	0018      	movs	r0, r3
 8001358:	f7fe fed6 	bl	8000108 <__udivsi3>
 800135c:	0003      	movs	r3, r0
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001362:	e008      	b.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3b01      	subs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	e001      	b.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e009      	b.n	800138a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	401a      	ands	r2, r3
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	429a      	cmp	r2, r3
 8001386:	d0ed      	beq.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	40007000 	.word	0x40007000
 8001398:	fffff9ff 	.word	0xfffff9ff
 800139c:	20000000 	.word	0x20000000
 80013a0:	000f4240 	.word	0x000f4240

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e2f3      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2201      	movs	r2, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	d100      	bne.n	80013c2 <HAL_RCC_OscConfig+0x1e>
 80013c0:	e07c      	b.n	80014bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c2:	4bc3      	ldr	r3, [pc, #780]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2238      	movs	r2, #56	; 0x38
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013cc:	4bc0      	ldr	r3, [pc, #768]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2203      	movs	r2, #3
 80013d2:	4013      	ands	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	2b10      	cmp	r3, #16
 80013da:	d102      	bne.n	80013e2 <HAL_RCC_OscConfig+0x3e>
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d002      	beq.n	80013e8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d10b      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	4bb9      	ldr	r3, [pc, #740]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	029b      	lsls	r3, r3, #10
 80013f0:	4013      	ands	r3, r2
 80013f2:	d062      	beq.n	80014ba <HAL_RCC_OscConfig+0x116>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d15e      	bne.n	80014ba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e2ce      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	025b      	lsls	r3, r3, #9
 8001408:	429a      	cmp	r2, r3
 800140a:	d107      	bne.n	800141c <HAL_RCC_OscConfig+0x78>
 800140c:	4bb0      	ldr	r3, [pc, #704]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4baf      	ldr	r3, [pc, #700]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	0249      	lsls	r1, r1, #9
 8001416:	430a      	orrs	r2, r1
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e020      	b.n	800145e <HAL_RCC_OscConfig+0xba>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	23a0      	movs	r3, #160	; 0xa0
 8001422:	02db      	lsls	r3, r3, #11
 8001424:	429a      	cmp	r2, r3
 8001426:	d10e      	bne.n	8001446 <HAL_RCC_OscConfig+0xa2>
 8001428:	4ba9      	ldr	r3, [pc, #676]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4ba8      	ldr	r3, [pc, #672]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	02c9      	lsls	r1, r1, #11
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	4ba6      	ldr	r3, [pc, #664]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4ba5      	ldr	r3, [pc, #660]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	0249      	lsls	r1, r1, #9
 8001440:	430a      	orrs	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e00b      	b.n	800145e <HAL_RCC_OscConfig+0xba>
 8001446:	4ba2      	ldr	r3, [pc, #648]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4ba1      	ldr	r3, [pc, #644]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 800144c:	49a1      	ldr	r1, [pc, #644]	; (80016d4 <HAL_RCC_OscConfig+0x330>)
 800144e:	400a      	ands	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	4b9f      	ldr	r3, [pc, #636]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b9e      	ldr	r3, [pc, #632]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001458:	499f      	ldr	r1, [pc, #636]	; (80016d8 <HAL_RCC_OscConfig+0x334>)
 800145a:	400a      	ands	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d014      	beq.n	8001490 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff f8cb 	bl	8000600 <HAL_GetTick>
 800146a:	0003      	movs	r3, r0
 800146c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff f8c6 	bl	8000600 <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e28d      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001482:	4b93      	ldr	r3, [pc, #588]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	029b      	lsls	r3, r3, #10
 800148a:	4013      	ands	r3, r2
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0xcc>
 800148e:	e015      	b.n	80014bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff f8b6 	bl	8000600 <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149a:	f7ff f8b1 	bl	8000600 <HAL_GetTick>
 800149e:	0002      	movs	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b64      	cmp	r3, #100	; 0x64
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e278      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ac:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	029b      	lsls	r3, r3, #10
 80014b4:	4013      	ands	r3, r2
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0xf6>
 80014b8:	e000      	b.n	80014bc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2202      	movs	r2, #2
 80014c2:	4013      	ands	r3, r2
 80014c4:	d100      	bne.n	80014c8 <HAL_RCC_OscConfig+0x124>
 80014c6:	e099      	b.n	80015fc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c8:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2238      	movs	r2, #56	; 0x38
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d2:	4b7f      	ldr	r3, [pc, #508]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2203      	movs	r2, #3
 80014d8:	4013      	ands	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d102      	bne.n	80014e8 <HAL_RCC_OscConfig+0x144>
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d002      	beq.n	80014ee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d135      	bne.n	800155a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ee:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4013      	ands	r3, r2
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x162>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e24b      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b72      	ldr	r3, [pc, #456]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4a74      	ldr	r2, [pc, #464]	; (80016dc <HAL_RCC_OscConfig+0x338>)
 800150c:	4013      	ands	r3, r2
 800150e:	0019      	movs	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	021a      	lsls	r2, r3, #8
 8001516:	4b6e      	ldr	r3, [pc, #440]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001518:	430a      	orrs	r2, r1
 800151a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d112      	bne.n	8001548 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a6e      	ldr	r2, [pc, #440]	; (80016e0 <HAL_RCC_OscConfig+0x33c>)
 8001528:	4013      	ands	r3, r2
 800152a:	0019      	movs	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	4b67      	ldr	r3, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001536:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	0adb      	lsrs	r3, r3, #11
 800153c:	2207      	movs	r2, #7
 800153e:	4013      	ands	r3, r2
 8001540:	4a68      	ldr	r2, [pc, #416]	; (80016e4 <HAL_RCC_OscConfig+0x340>)
 8001542:	40da      	lsrs	r2, r3
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <HAL_RCC_OscConfig+0x344>)
 8001546:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001548:	4b68      	ldr	r3, [pc, #416]	; (80016ec <HAL_RCC_OscConfig+0x348>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff f80d 	bl	800056c <HAL_InitTick>
 8001552:	1e03      	subs	r3, r0, #0
 8001554:	d051      	beq.n	80015fa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e221      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d030      	beq.n	80015c4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001562:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a5e      	ldr	r2, [pc, #376]	; (80016e0 <HAL_RCC_OscConfig+0x33c>)
 8001568:	4013      	ands	r3, r2
 800156a:	0019      	movs	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	4b57      	ldr	r3, [pc, #348]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001576:	4b56      	ldr	r3, [pc, #344]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0049      	lsls	r1, r1, #1
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff f83c 	bl	8000600 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158e:	f7ff f837 	bl	8000600 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e1fe      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4013      	ands	r3, r2
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ac:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_RCC_OscConfig+0x338>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	021a      	lsls	r2, r3, #8
 80015bc:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80015be:	430a      	orrs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	e01b      	b.n	80015fc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	4949      	ldr	r1, [pc, #292]	; (80016f0 <HAL_RCC_OscConfig+0x34c>)
 80015cc:	400a      	ands	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff f816 	bl	8000600 <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff f811 	bl	8000600 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1d8      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ec:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4013      	ands	r3, r2
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x236>
 80015f8:	e000      	b.n	80015fc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2208      	movs	r2, #8
 8001602:	4013      	ands	r3, r2
 8001604:	d047      	beq.n	8001696 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001606:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2238      	movs	r2, #56	; 0x38
 800160c:	4013      	ands	r3, r2
 800160e:	2b18      	cmp	r3, #24
 8001610:	d10a      	bne.n	8001628 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001612:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	2202      	movs	r2, #2
 8001618:	4013      	ands	r3, r2
 800161a:	d03c      	beq.n	8001696 <HAL_RCC_OscConfig+0x2f2>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d138      	bne.n	8001696 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e1ba      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d019      	beq.n	8001664 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001632:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001636:	2101      	movs	r1, #1
 8001638:	430a      	orrs	r2, r1
 800163a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7fe ffe0 	bl	8000600 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001646:	f7fe ffdb 	bl	8000600 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1a2      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 800165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165c:	2202      	movs	r2, #2
 800165e:	4013      	ands	r3, r2
 8001660:	d0f1      	beq.n	8001646 <HAL_RCC_OscConfig+0x2a2>
 8001662:	e018      	b.n	8001696 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 8001666:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 800166a:	2101      	movs	r1, #1
 800166c:	438a      	bics	r2, r1
 800166e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7fe ffc6 	bl	8000600 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167a:	f7fe ffc1 	bl	8000600 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e188      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 800168e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d1f1      	bne.n	800167a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2204      	movs	r2, #4
 800169c:	4013      	ands	r3, r2
 800169e:	d100      	bne.n	80016a2 <HAL_RCC_OscConfig+0x2fe>
 80016a0:	e0c6      	b.n	8001830 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a2:	231f      	movs	r3, #31
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2238      	movs	r2, #56	; 0x38
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b20      	cmp	r3, #32
 80016b4:	d11e      	bne.n	80016f4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x32c>)
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	2202      	movs	r2, #2
 80016bc:	4013      	ands	r3, r2
 80016be:	d100      	bne.n	80016c2 <HAL_RCC_OscConfig+0x31e>
 80016c0:	e0b6      	b.n	8001830 <HAL_RCC_OscConfig+0x48c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d000      	beq.n	80016cc <HAL_RCC_OscConfig+0x328>
 80016ca:	e0b1      	b.n	8001830 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e166      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
 80016d0:	40021000 	.word	0x40021000
 80016d4:	fffeffff 	.word	0xfffeffff
 80016d8:	fffbffff 	.word	0xfffbffff
 80016dc:	ffff80ff 	.word	0xffff80ff
 80016e0:	ffffc7ff 	.word	0xffffc7ff
 80016e4:	00f42400 	.word	0x00f42400
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000004 	.word	0x20000004
 80016f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016f4:	4bac      	ldr	r3, [pc, #688]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80016f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	055b      	lsls	r3, r3, #21
 80016fc:	4013      	ands	r3, r2
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_OscConfig+0x360>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x362>
 8001704:	2300      	movs	r3, #0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d011      	beq.n	800172e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4ba7      	ldr	r3, [pc, #668]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 800170c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800170e:	4ba6      	ldr	r3, [pc, #664]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0549      	lsls	r1, r1, #21
 8001714:	430a      	orrs	r2, r1
 8001716:	63da      	str	r2, [r3, #60]	; 0x3c
 8001718:	4ba3      	ldr	r3, [pc, #652]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 800171a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	055b      	lsls	r3, r3, #21
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001726:	231f      	movs	r3, #31
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172e:	4b9f      	ldr	r3, [pc, #636]	; (80019ac <HAL_RCC_OscConfig+0x608>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4013      	ands	r3, r2
 8001738:	d11a      	bne.n	8001770 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800173a:	4b9c      	ldr	r3, [pc, #624]	; (80019ac <HAL_RCC_OscConfig+0x608>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b9b      	ldr	r3, [pc, #620]	; (80019ac <HAL_RCC_OscConfig+0x608>)
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	0049      	lsls	r1, r1, #1
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001748:	f7fe ff5a 	bl	8000600 <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001752:	f7fe ff55 	bl	8000600 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e11c      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001764:	4b91      	ldr	r3, [pc, #580]	; (80019ac <HAL_RCC_OscConfig+0x608>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4013      	ands	r3, r2
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0x3e2>
 8001778:	4b8b      	ldr	r3, [pc, #556]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 800177a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800177c:	4b8a      	ldr	r3, [pc, #552]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 800177e:	2101      	movs	r1, #1
 8001780:	430a      	orrs	r2, r1
 8001782:	65da      	str	r2, [r3, #92]	; 0x5c
 8001784:	e01c      	b.n	80017c0 <HAL_RCC_OscConfig+0x41c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b05      	cmp	r3, #5
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x404>
 800178e:	4b86      	ldr	r3, [pc, #536]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 8001790:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001792:	4b85      	ldr	r3, [pc, #532]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 8001794:	2104      	movs	r1, #4
 8001796:	430a      	orrs	r2, r1
 8001798:	65da      	str	r2, [r3, #92]	; 0x5c
 800179a:	4b83      	ldr	r3, [pc, #524]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 800179c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800179e:	4b82      	ldr	r3, [pc, #520]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0x41c>
 80017a8:	4b7f      	ldr	r3, [pc, #508]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80017aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ac:	4b7e      	ldr	r3, [pc, #504]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	438a      	bics	r2, r1
 80017b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80017b4:	4b7c      	ldr	r3, [pc, #496]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80017b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017b8:	4b7b      	ldr	r3, [pc, #492]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80017ba:	2104      	movs	r1, #4
 80017bc:	438a      	bics	r2, r1
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d014      	beq.n	80017f2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7fe ff1a 	bl	8000600 <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d0:	e009      	b.n	80017e6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7fe ff15 	bl	8000600 <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <HAL_RCC_OscConfig+0x60c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0db      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e6:	4b70      	ldr	r3, [pc, #448]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x42e>
 80017f0:	e013      	b.n	800181a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7fe ff05 	bl	8000600 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017fa:	e009      	b.n	8001810 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7fe ff00 	bl	8000600 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	4a6a      	ldr	r2, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0x60c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e0c6      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001810:	4b65      	ldr	r3, [pc, #404]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	2202      	movs	r2, #2
 8001816:	4013      	ands	r3, r2
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800181a:	231f      	movs	r3, #31
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001824:	4b60      	ldr	r3, [pc, #384]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 8001826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001828:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 800182a:	4962      	ldr	r1, [pc, #392]	; (80019b4 <HAL_RCC_OscConfig+0x610>)
 800182c:	400a      	ands	r2, r1
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d100      	bne.n	800183a <HAL_RCC_OscConfig+0x496>
 8001838:	e0b0      	b.n	800199c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800183a:	4b5b      	ldr	r3, [pc, #364]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2238      	movs	r2, #56	; 0x38
 8001840:	4013      	ands	r3, r2
 8001842:	2b10      	cmp	r3, #16
 8001844:	d100      	bne.n	8001848 <HAL_RCC_OscConfig+0x4a4>
 8001846:	e078      	b.n	800193a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d153      	bne.n	80018f8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001850:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b54      	ldr	r3, [pc, #336]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 8001856:	4958      	ldr	r1, [pc, #352]	; (80019b8 <HAL_RCC_OscConfig+0x614>)
 8001858:	400a      	ands	r2, r1
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7fe fed0 	bl	8000600 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7fe fecb 	bl	8000600 <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e092      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001878:	4b4b      	ldr	r3, [pc, #300]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	049b      	lsls	r3, r3, #18
 8001880:	4013      	ands	r3, r2
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001884:	4b48      	ldr	r3, [pc, #288]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_RCC_OscConfig+0x618>)
 800188a:	4013      	ands	r3, r2
 800188c:	0019      	movs	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1a      	ldr	r2, [r3, #32]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	431a      	orrs	r2, r3
 80018ac:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b3c      	ldr	r3, [pc, #240]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0449      	lsls	r1, r1, #17
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	0549      	lsls	r1, r1, #21
 80018ca:	430a      	orrs	r2, r1
 80018cc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7fe fe97 	bl	8000600 <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7fe fe92 	bl	8000600 <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e059      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	049b      	lsls	r3, r3, #18
 80018f2:	4013      	ands	r3, r2
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x534>
 80018f6:	e051      	b.n	800199c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 80018fe:	492e      	ldr	r1, [pc, #184]	; (80019b8 <HAL_RCC_OscConfig+0x614>)
 8001900:	400a      	ands	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7fe fe7c 	bl	8000600 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7fe fe77 	bl	8000600 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e03e      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	049b      	lsls	r3, r3, #18
 8001928:	4013      	ands	r3, r2
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 8001932:	4923      	ldr	r1, [pc, #140]	; (80019c0 <HAL_RCC_OscConfig+0x61c>)
 8001934:	400a      	ands	r2, r1
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	e030      	b.n	800199c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e02b      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_RCC_OscConfig+0x604>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2203      	movs	r2, #3
 8001950:	401a      	ands	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	429a      	cmp	r2, r3
 8001958:	d11e      	bne.n	8001998 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2270      	movs	r2, #112	; 0x70
 800195e:	401a      	ands	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d117      	bne.n	8001998 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	23fe      	movs	r3, #254	; 0xfe
 800196c:	01db      	lsls	r3, r3, #7
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d10e      	bne.n	8001998 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	23f8      	movs	r3, #248	; 0xf8
 800197e:	039b      	lsls	r3, r3, #14
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d106      	bne.n	8001998 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	0f5b      	lsrs	r3, r3, #29
 800198e:	075a      	lsls	r2, r3, #29
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b008      	add	sp, #32
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40007000 	.word	0x40007000
 80019b0:	00001388 	.word	0x00001388
 80019b4:	efffffff 	.word	0xefffffff
 80019b8:	feffffff 	.word	0xfeffffff
 80019bc:	1fc1808c 	.word	0x1fc1808c
 80019c0:	effefffc 	.word	0xeffefffc

080019c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0e9      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2207      	movs	r2, #7
 80019de:	4013      	ands	r3, r2
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d91e      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2207      	movs	r2, #7
 80019ec:	4393      	bics	r3, r2
 80019ee:	0019      	movs	r1, r3
 80019f0:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019f8:	f7fe fe02 	bl	8000600 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a00:	e009      	b.n	8001a16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a02:	f7fe fdfd 	bl	8000600 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	4a6a      	ldr	r2, [pc, #424]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e0ca      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a16:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1ee      	bne.n	8001a02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d015      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2204      	movs	r2, #4
 8001a34:	4013      	ands	r3, r2
 8001a36:	d006      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a38:	4b60      	ldr	r3, [pc, #384]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	4b5f      	ldr	r3, [pc, #380]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001a3e:	21e0      	movs	r1, #224	; 0xe0
 8001a40:	01c9      	lsls	r1, r1, #7
 8001a42:	430a      	orrs	r2, r1
 8001a44:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a46:	4b5d      	ldr	r3, [pc, #372]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	4a5d      	ldr	r2, [pc, #372]	; (8001bc0 <HAL_RCC_ClockConfig+0x1fc>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	0019      	movs	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b59      	ldr	r3, [pc, #356]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001a56:	430a      	orrs	r2, r1
 8001a58:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4013      	ands	r3, r2
 8001a62:	d057      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6c:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	029b      	lsls	r3, r3, #10
 8001a74:	4013      	ands	r3, r2
 8001a76:	d12b      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e097      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a84:	4b4d      	ldr	r3, [pc, #308]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	049b      	lsls	r3, r3, #18
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d11f      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e08b      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9c:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d113      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e07f      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab4:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d108      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e074      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e06d      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4393      	bics	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae4:	f7fe fd8c 	bl	8000600 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aec:	e009      	b.n	8001b02 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aee:	f7fe fd87 	bl	8000600 <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	4a2f      	ldr	r2, [pc, #188]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e054      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2238      	movs	r2, #56	; 0x38
 8001b08:	401a      	ands	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1ec      	bne.n	8001aee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2207      	movs	r2, #7
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d21e      	bcs.n	8001b60 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2207      	movs	r2, #7
 8001b28:	4393      	bics	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b34:	f7fe fd64 	bl	8000600 <HAL_GetTick>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b3c:	e009      	b.n	8001b52 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3e:	f7fe fd5f 	bl	8000600 <HAL_GetTick>
 8001b42:	0002      	movs	r2, r0
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e02c      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2207      	movs	r2, #7
 8001b58:	4013      	ands	r3, r2
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1ee      	bne.n	8001b3e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2204      	movs	r2, #4
 8001b66:	4013      	ands	r3, r2
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4a15      	ldr	r2, [pc, #84]	; (8001bc4 <HAL_RCC_ClockConfig+0x200>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b7e:	f000 f829 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b82:	0001      	movs	r1, r0
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <HAL_RCC_ClockConfig+0x204>)
 8001b90:	0092      	lsls	r2, r2, #2
 8001b92:	58d3      	ldr	r3, [r2, r3]
 8001b94:	221f      	movs	r2, #31
 8001b96:	4013      	ands	r3, r2
 8001b98:	000a      	movs	r2, r1
 8001b9a:	40da      	lsrs	r2, r3
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_ClockConfig+0x208>)
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_ClockConfig+0x20c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7fe fce1 	bl	800056c <HAL_InitTick>
 8001baa:	0003      	movs	r3, r0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	00001388 	.word	0x00001388
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	fffff0ff 	.word	0xfffff0ff
 8001bc4:	ffff8fff 	.word	0xffff8fff
 8001bc8:	0800264c 	.word	0x0800264c
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bda:	4b3c      	ldr	r3, [pc, #240]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2238      	movs	r2, #56	; 0x38
 8001be0:	4013      	ands	r3, r2
 8001be2:	d10f      	bne.n	8001c04 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001be4:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0adb      	lsrs	r3, r3, #11
 8001bea:	2207      	movs	r2, #7
 8001bec:	4013      	ands	r3, r2
 8001bee:	2201      	movs	r2, #1
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	0013      	movs	r3, r2
 8001bf4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	4835      	ldr	r0, [pc, #212]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bfa:	f7fe fa85 	bl	8000108 <__udivsi3>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	e05d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2238      	movs	r2, #56	; 0x38
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d102      	bne.n	8001c16 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	e054      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c16:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2238      	movs	r2, #56	; 0x38
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d138      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2203      	movs	r2, #3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	2207      	movs	r2, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	3301      	adds	r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d10d      	bne.n	8001c5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	4824      	ldr	r0, [pc, #144]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c44:	f7fe fa60 	bl	8000108 <__udivsi3>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	227f      	movs	r2, #127	; 0x7f
 8001c54:	4013      	ands	r3, r2
 8001c56:	434b      	muls	r3, r1
 8001c58:	617b      	str	r3, [r7, #20]
        break;
 8001c5a:	e00d      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	481c      	ldr	r0, [pc, #112]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c60:	f7fe fa52 	bl	8000108 <__udivsi3>
 8001c64:	0003      	movs	r3, r0
 8001c66:	0019      	movs	r1, r3
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	227f      	movs	r2, #127	; 0x7f
 8001c70:	4013      	ands	r3, r2
 8001c72:	434b      	muls	r3, r1
 8001c74:	617b      	str	r3, [r7, #20]
        break;
 8001c76:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0f5b      	lsrs	r3, r3, #29
 8001c7e:	2207      	movs	r2, #7
 8001c80:	4013      	ands	r3, r2
 8001c82:	3301      	adds	r3, #1
 8001c84:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	6978      	ldr	r0, [r7, #20]
 8001c8a:	f7fe fa3d 	bl	8000108 <__udivsi3>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	e015      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c94:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2238      	movs	r2, #56	; 0x38
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d103      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2238      	movs	r2, #56	; 0x38
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b18      	cmp	r3, #24
 8001cb2:	d103      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001cb4:	23fa      	movs	r3, #250	; 0xfa
 8001cb6:	01db      	lsls	r3, r3, #7
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	e001      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cc0:	693b      	ldr	r3, [r7, #16]
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b006      	add	sp, #24
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	007a1200 	.word	0x007a1200

08001cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ce0:	2313      	movs	r3, #19
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ce8:	2312      	movs	r3, #18
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001cfc:	e0a3      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2011      	movs	r0, #17
 8001d00:	183b      	adds	r3, r7, r0
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b86      	ldr	r3, [pc, #536]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	055b      	lsls	r3, r3, #21
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d110      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b83      	ldr	r3, [pc, #524]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d16:	4b82      	ldr	r3, [pc, #520]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	0549      	lsls	r1, r1, #21
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d20:	4b7f      	ldr	r3, [pc, #508]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	055b      	lsls	r3, r3, #21
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2e:	183b      	adds	r3, r7, r0
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d34:	4b7b      	ldr	r3, [pc, #492]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b7a      	ldr	r3, [pc, #488]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	0049      	lsls	r1, r1, #1
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d42:	f7fe fc5d 	bl	8000600 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4c:	f7fe fc58 	bl	8000600 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d904      	bls.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d5a:	2313      	movs	r3, #19
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2203      	movs	r2, #3
 8001d60:	701a      	strb	r2, [r3, #0]
        break;
 8001d62:	e005      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d64:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d0ed      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d70:	2313      	movs	r3, #19
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d154      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d7a:	4b69      	ldr	r3, [pc, #420]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d7e:	23c0      	movs	r3, #192	; 0xc0
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4013      	ands	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d019      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d014      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d96:	4b62      	ldr	r3, [pc, #392]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	4a63      	ldr	r2, [pc, #396]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001da0:	4b5f      	ldr	r3, [pc, #380]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001da2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001da4:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	0249      	lsls	r1, r1, #9
 8001daa:	430a      	orrs	r2, r1
 8001dac:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dae:	4b5c      	ldr	r3, [pc, #368]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001db0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001db2:	4b5b      	ldr	r3, [pc, #364]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001db4:	495d      	ldr	r1, [pc, #372]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001db6:	400a      	ands	r2, r1
 8001db8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dba:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d016      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe fc1a 	bl	8000600 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd0:	e00c      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f7fe fc15 	bl	8000600 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	4a54      	ldr	r2, [pc, #336]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d904      	bls.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001de2:	2313      	movs	r3, #19
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2203      	movs	r2, #3
 8001de8:	701a      	strb	r2, [r3, #0]
            break;
 8001dea:	e004      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dec:	4b4c      	ldr	r3, [pc, #304]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d0ed      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001df6:	2313      	movs	r3, #19
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e00:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	4a48      	ldr	r2, [pc, #288]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	4b44      	ldr	r3, [pc, #272]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e14:	e00c      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e16:	2312      	movs	r3, #18
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2213      	movs	r2, #19
 8001e1c:	18ba      	adds	r2, r7, r2
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e005      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e24:	2312      	movs	r3, #18
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2213      	movs	r2, #19
 8001e2a:	18ba      	adds	r2, r7, r2
 8001e2c:	7812      	ldrb	r2, [r2, #0]
 8001e2e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e30:	2311      	movs	r3, #17
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d105      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e40:	493c      	ldr	r1, [pc, #240]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e42:	400a      	ands	r2, r1
 8001e44:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e50:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	2203      	movs	r2, #3
 8001e56:	4393      	bics	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4b30      	ldr	r3, [pc, #192]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e60:	430a      	orrs	r2, r1
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	220c      	movs	r2, #12
 8001e74:	4393      	bics	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2220      	movs	r2, #32
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d009      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	01db      	lsls	r3, r3, #7
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d015      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	0899      	lsrs	r1, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	05db      	lsls	r3, r3, #23
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	0249      	lsls	r1, r1, #9
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d016      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	0019      	movs	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	01db      	lsls	r3, r3, #7
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d106      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	0249      	lsls	r1, r1, #9
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f12:	2312      	movs	r3, #18
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	781b      	ldrb	r3, [r3, #0]
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b006      	add	sp, #24
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40007000 	.word	0x40007000
 8001f28:	fffffcff 	.word	0xfffffcff
 8001f2c:	fffeffff 	.word	0xfffeffff
 8001f30:	00001388 	.word	0x00001388
 8001f34:	efffffff 	.word	0xefffffff
 8001f38:	ffffcfff 	.word	0xffffcfff
 8001f3c:	ffff3fff 	.word	0xffff3fff

08001f40 <LCD_Init>:
static void LCD_SendHalfByte(uint8_t data);
static void LCD_SendByte(uint8_t data, uint8_t mode);
static void LCD_SendString(const char* str);

void LCD_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  //Error_Handler();
  HAL_Delay(50);  // Wait for LCD power-up
 8001f44:	2032      	movs	r0, #50	; 0x32
 8001f46:	f7fe fb65 	bl	8000614 <HAL_Delay>

  // Initialize LCD in 4-bit mode
  LCD_SendHalfByte(0x03);
 8001f4a:	2003      	movs	r0, #3
 8001f4c:	f000 f8b2 	bl	80020b4 <LCD_SendHalfByte>
  HAL_Delay(5);
 8001f50:	2005      	movs	r0, #5
 8001f52:	f7fe fb5f 	bl	8000614 <HAL_Delay>
  LCD_SendHalfByte(0x03);
 8001f56:	2003      	movs	r0, #3
 8001f58:	f000 f8ac 	bl	80020b4 <LCD_SendHalfByte>
  HAL_Delay(1);
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7fe fb59 	bl	8000614 <HAL_Delay>
  LCD_SendHalfByte(0x03);
 8001f62:	2003      	movs	r0, #3
 8001f64:	f000 f8a6 	bl	80020b4 <LCD_SendHalfByte>
  HAL_Delay(1);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7fe fb53 	bl	8000614 <HAL_Delay>
  LCD_SendHalfByte(0x02);
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f000 f8a0 	bl	80020b4 <LCD_SendHalfByte>

  // Function Set
  LCD_SendCmd(LCD_CMD_FUNCTION_SET | lcd_display_function);
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <LCD_Init+0x74>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f000 f878 	bl	8002074 <LCD_SendCmd>

  // Display On/Off Control
  LCD_SendCmd(LCD_CMD_DISPLAY_CONTROL | lcd_display_control);
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LCD_Init+0x78>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2208      	movs	r2, #8
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 f870 	bl	8002074 <LCD_SendCmd>

  // Clear Display
  LCD_SendCmd(LCD_CMD_CLEAR_DISPLAY);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f000 f86d 	bl	8002074 <LCD_SendCmd>

  // Entry Mode Set
  LCD_SendCmd(LCD_CMD_ENTRY_MODE_SET | lcd_entry_mode);
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <LCD_Init+0x7c>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 f865 	bl	8002074 <LCD_SendCmd>

  // Set backlight on
  LCD_BacklightOn();
 8001faa:	f000 f84d 	bl	8002048 <LCD_BacklightOn>
}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	2000000b 	.word	0x2000000b
 8001fb8:	20000009 	.word	0x20000009
 8001fbc:	2000000a 	.word	0x2000000a

08001fc0 <LCD_Clear>:

void LCD_Clear(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  LCD_SendCmd(LCD_CMD_CLEAR_DISPLAY);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f000 f855 	bl	8002074 <LCD_SendCmd>
  HAL_Delay(2);
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f7fe fb22 	bl	8000614 <HAL_Delay>
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	0002      	movs	r2, r0
 8001fe0:	1dfb      	adds	r3, r7, #7
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	1dbb      	adds	r3, r7, #6
 8001fe6:	1c0a      	adds	r2, r1, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001fea:	230c      	movs	r3, #12
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <LCD_SetCursor+0x54>)
 8001ff0:	601a      	str	r2, [r3, #0]

  if (row >= 1) {
 8001ff2:	1dbb      	adds	r3, r7, #6
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <LCD_SetCursor+0x28>
    row = 0;
 8001ffa:	1dbb      	adds	r3, r7, #6
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
  }

  LCD_SendCmd(LCD_CMD_SET_DDRAM_ADDR | (col + row_offsets[row]));
 8002000:	1dbb      	adds	r3, r7, #6
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	220c      	movs	r2, #12
 8002006:	18ba      	adds	r2, r7, r2
 8002008:	5cd2      	ldrb	r2, [r2, r3]
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	18d3      	adds	r3, r2, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	b25b      	sxtb	r3, r3
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	4252      	negs	r2, r2
 8002018:	4313      	orrs	r3, r2
 800201a:	b25b      	sxtb	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	0018      	movs	r0, r3
 8002020:	f000 f828 	bl	8002074 <LCD_SendCmd>
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b004      	add	sp, #16
 800202a:	bd80      	pop	{r7, pc}
 800202c:	54144000 	.word	0x54144000

08002030 <LCD_Print>:

void LCD_Print(const char* str)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  LCD_SendString(str);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	0018      	movs	r0, r3
 800203c:	f000 f8e8 	bl	8002210 <LCD_SendString>
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <LCD_BacklightOn>:

void LCD_BacklightOn(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
  uint8_t data = 0x00;
 800204e:	1dfb      	adds	r3, r7, #7
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
  data |= LCD_BACKLIGHT_ON;
 8002054:	1dfb      	adds	r3, r7, #7
 8002056:	1dfa      	adds	r2, r7, #7
 8002058:	7812      	ldrb	r2, [r2, #0]
 800205a:	2108      	movs	r1, #8
 800205c:	430a      	orrs	r2, r1
 800205e:	701a      	strb	r2, [r3, #0]
  LCD_SendByte(data, 0);
 8002060:	1dfb      	adds	r3, r7, #7
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2100      	movs	r1, #0
 8002066:	0018      	movs	r0, r3
 8002068:	f000 f848 	bl	80020fc <LCD_SendByte>
}
 800206c:	46c0      	nop			; (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	b002      	add	sp, #8
 8002072:	bd80      	pop	{r7, pc}

08002074 <LCD_SendCmd>:
  data |= LCD_BACKLIGHT_OFF;
  LCD_SendByte(data, 0);
}

static void LCD_SendCmd(uint8_t cmd)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	0002      	movs	r2, r0
 800207c:	1dfb      	adds	r3, r7, #7
 800207e:	701a      	strb	r2, [r3, #0]
  LCD_SendByte(cmd, 0);
 8002080:	1dfb      	adds	r3, r7, #7
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2100      	movs	r1, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f838 	bl	80020fc <LCD_SendByte>
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}

08002094 <LCD_SendData>:

static void LCD_SendData(uint8_t data)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	0002      	movs	r2, r0
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	701a      	strb	r2, [r3, #0]
  LCD_SendByte(data, 1);
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 f828 	bl	80020fc <LCD_SendByte>
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <LCD_SendHalfByte>:

static void LCD_SendHalfByte(uint8_t data)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	0002      	movs	r2, r0
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	701a      	strb	r2, [r3, #0]
  uint8_t high_nibble = data & 0xF0;
 80020c0:	200f      	movs	r0, #15
 80020c2:	183b      	adds	r3, r7, r0
 80020c4:	1dfa      	adds	r2, r7, #7
 80020c6:	7812      	ldrb	r2, [r2, #0]
 80020c8:	210f      	movs	r1, #15
 80020ca:	438a      	bics	r2, r1
 80020cc:	701a      	strb	r2, [r3, #0]
  uint8_t low_nibble = (data << 4) & 0xF0;
 80020ce:	1dfb      	adds	r3, r7, #7
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	011a      	lsls	r2, r3, #4
 80020d4:	240e      	movs	r4, #14
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	701a      	strb	r2, [r3, #0]

  LCD_SendByte(high_nibble, 1);
 80020da:	183b      	adds	r3, r7, r0
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 f80b 	bl	80020fc <LCD_SendByte>
  LCD_SendByte(low_nibble, 1);
 80020e6:	193b      	adds	r3, r7, r4
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2101      	movs	r1, #1
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f805 	bl	80020fc <LCD_SendByte>
}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b005      	add	sp, #20
 80020f8:	bd90      	pop	{r4, r7, pc}
	...

080020fc <LCD_SendByte>:

static void LCD_SendByte(uint8_t data, uint8_t mode)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b087      	sub	sp, #28
 8002100:	af02      	add	r7, sp, #8
 8002102:	0002      	movs	r2, r0
 8002104:	1dfb      	adds	r3, r7, #7
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	1dbb      	adds	r3, r7, #6
 800210a:	1c0a      	adds	r2, r1, #0
 800210c:	701a      	strb	r2, [r3, #0]
  uint8_t data_high = data & 0xF0;
 800210e:	200f      	movs	r0, #15
 8002110:	183b      	adds	r3, r7, r0
 8002112:	1dfa      	adds	r2, r7, #7
 8002114:	7812      	ldrb	r2, [r2, #0]
 8002116:	210f      	movs	r1, #15
 8002118:	438a      	bics	r2, r1
 800211a:	701a      	strb	r2, [r3, #0]
  //uint8_t data_low = (data << 4) & 0xF0;

  uint8_t lcd_data = 0x00;
 800211c:	210e      	movs	r1, #14
 800211e:	187b      	adds	r3, r7, r1
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
  lcd_data |= data_high;
 8002124:	187b      	adds	r3, r7, r1
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	183b      	adds	r3, r7, r0
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4313      	orrs	r3, r2
 800212e:	b2da      	uxtb	r2, r3
 8002130:	187b      	adds	r3, r7, r1
 8002132:	701a      	strb	r2, [r3, #0]

  if (mode == 1) {
 8002134:	1dbb      	adds	r3, r7, #6
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d106      	bne.n	800214a <LCD_SendByte+0x4e>
    lcd_data |= 0x01;  // RS = 1 for data
 800213c:	187b      	adds	r3, r7, r1
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	4313      	orrs	r3, r2
 8002144:	b2da      	uxtb	r2, r3
 8002146:	187b      	adds	r3, r7, r1
 8002148:	701a      	strb	r2, [r3, #0]
  }

  lcd_data |= LCD_BACKLIGHT_ON;
 800214a:	210e      	movs	r1, #14
 800214c:	187b      	adds	r3, r7, r1
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2208      	movs	r2, #8
 8002152:	4313      	orrs	r3, r2
 8002154:	b2da      	uxtb	r2, r3
 8002156:	187b      	adds	r3, r7, r1
 8002158:	701a      	strb	r2, [r3, #0]

  // Send the data via I2C
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, &lcd_data, 1, 100);
 800215a:	000c      	movs	r4, r1
 800215c:	187a      	adds	r2, r7, r1
 800215e:	482b      	ldr	r0, [pc, #172]	; (800220c <LCD_SendByte+0x110>)
 8002160:	2364      	movs	r3, #100	; 0x64
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2301      	movs	r3, #1
 8002166:	213f      	movs	r1, #63	; 0x3f
 8002168:	f7fe fd26 	bl	8000bb8 <HAL_I2C_Master_Transmit>

  lcd_data &= ~0x04;  // E = 0
 800216c:	0021      	movs	r1, r4
 800216e:	187b      	adds	r3, r7, r1
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2204      	movs	r2, #4
 8002174:	4393      	bics	r3, r2
 8002176:	b2da      	uxtb	r2, r3
 8002178:	187b      	adds	r3, r7, r1
 800217a:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, &lcd_data, 1, 100);
 800217c:	000c      	movs	r4, r1
 800217e:	187a      	adds	r2, r7, r1
 8002180:	4822      	ldr	r0, [pc, #136]	; (800220c <LCD_SendByte+0x110>)
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2301      	movs	r3, #1
 8002188:	213f      	movs	r1, #63	; 0x3f
 800218a:	f7fe fd15 	bl	8000bb8 <HAL_I2C_Master_Transmit>

  lcd_data |= 0x04;   // E = 1
 800218e:	0021      	movs	r1, r4
 8002190:	187b      	adds	r3, r7, r1
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2204      	movs	r2, #4
 8002196:	4313      	orrs	r3, r2
 8002198:	b2da      	uxtb	r2, r3
 800219a:	187b      	adds	r3, r7, r1
 800219c:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, &lcd_data, 1, 100);
 800219e:	187a      	adds	r2, r7, r1
 80021a0:	481a      	ldr	r0, [pc, #104]	; (800220c <LCD_SendByte+0x110>)
 80021a2:	2364      	movs	r3, #100	; 0x64
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2301      	movs	r3, #1
 80021a8:	213f      	movs	r1, #63	; 0x3f
 80021aa:	f7fe fd05 	bl	8000bb8 <HAL_I2C_Master_Transmit>

  if (mode == 0) {
 80021ae:	1dbb      	adds	r3, r7, #6
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <LCD_SendByte+0xc0>
    HAL_Delay(1);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7fe fa2c 	bl	8000614 <HAL_Delay>
  }

  lcd_data &= ~0x04;  // E = 0
 80021bc:	210e      	movs	r1, #14
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2204      	movs	r2, #4
 80021c4:	4393      	bics	r3, r2
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	187b      	adds	r3, r7, r1
 80021ca:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, &lcd_data, 1, 100);
 80021cc:	000c      	movs	r4, r1
 80021ce:	187a      	adds	r2, r7, r1
 80021d0:	480e      	ldr	r0, [pc, #56]	; (800220c <LCD_SendByte+0x110>)
 80021d2:	2364      	movs	r3, #100	; 0x64
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	213f      	movs	r1, #63	; 0x3f
 80021da:	f7fe fced 	bl	8000bb8 <HAL_I2C_Master_Transmit>

  HAL_Delay(1);
 80021de:	2001      	movs	r0, #1
 80021e0:	f7fe fa18 	bl	8000614 <HAL_Delay>

  lcd_data |= 0x08;   // BL = 1
 80021e4:	0021      	movs	r1, r4
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2208      	movs	r2, #8
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, &lcd_data, 1, 100);
 80021f4:	187a      	adds	r2, r7, r1
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <LCD_SendByte+0x110>)
 80021f8:	2364      	movs	r3, #100	; 0x64
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2301      	movs	r3, #1
 80021fe:	213f      	movs	r1, #63	; 0x3f
 8002200:	f7fe fcda 	bl	8000bb8 <HAL_I2C_Master_Transmit>
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b005      	add	sp, #20
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	20000028 	.word	0x20000028

08002210 <LCD_SendString>:

static void LCD_SendString(const char* str)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  while (*str) {
 8002218:	e007      	b.n	800222a <LCD_SendString+0x1a>
    LCD_SendData((uint8_t)(*str));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	0018      	movs	r0, r3
 8002220:	f7ff ff38 	bl	8002094 <LCD_SendData>
    str++;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3301      	adds	r3, #1
 8002228:	607b      	str	r3, [r7, #4]
  while (*str) {
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f3      	bne.n	800221a <LCD_SendString+0xa>
  }
}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}

0800223c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <xTaskIncrementTick+0x1ec>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d000      	beq.n	8002250 <xTaskIncrementTick+0x14>
 800224e:	e0e0      	b.n	8002412 <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002250:	4b76      	ldr	r3, [pc, #472]	; (800242c <xTaskIncrementTick+0x1f0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002258:	4b74      	ldr	r3, [pc, #464]	; (800242c <xTaskIncrementTick+0x1f0>)
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d117      	bne.n	8002294 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8002264:	4b72      	ldr	r3, [pc, #456]	; (8002430 <xTaskIncrementTick+0x1f4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <xTaskIncrementTick+0x36>
 800226e:	b672      	cpsid	i
 8002270:	e7fe      	b.n	8002270 <xTaskIncrementTick+0x34>
 8002272:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <xTaskIncrementTick+0x1f4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	4b6e      	ldr	r3, [pc, #440]	; (8002434 <xTaskIncrementTick+0x1f8>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b6c      	ldr	r3, [pc, #432]	; (8002430 <xTaskIncrementTick+0x1f4>)
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	4b6c      	ldr	r3, [pc, #432]	; (8002434 <xTaskIncrementTick+0x1f8>)
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	4b6c      	ldr	r3, [pc, #432]	; (8002438 <xTaskIncrementTick+0x1fc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	4b6a      	ldr	r3, [pc, #424]	; (8002438 <xTaskIncrementTick+0x1fc>)
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f000 f932 	bl	80024f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002294:	4b69      	ldr	r3, [pc, #420]	; (800243c <xTaskIncrementTick+0x200>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	429a      	cmp	r2, r3
 800229c:	d200      	bcs.n	80022a0 <xTaskIncrementTick+0x64>
 800229e:	e0a4      	b.n	80023ea <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022a0:	4b63      	ldr	r3, [pc, #396]	; (8002430 <xTaskIncrementTick+0x1f4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d104      	bne.n	80022b4 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022aa:	4b64      	ldr	r3, [pc, #400]	; (800243c <xTaskIncrementTick+0x200>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	4252      	negs	r2, r2
 80022b0:	601a      	str	r2, [r3, #0]
                    break;
 80022b2:	e09a      	b.n	80023ea <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022b4:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <xTaskIncrementTick+0x1f4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d203      	bcs.n	80022d4 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80022cc:	4b5b      	ldr	r3, [pc, #364]	; (800243c <xTaskIncrementTick+0x200>)
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80022d2:	e08a      	b.n	80023ea <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	68d2      	ldr	r2, [r2, #12]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	6892      	ldr	r2, [r2, #8]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	3304      	adds	r3, #4
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d103      	bne.n	8002302 <xTaskIncrementTick+0xc6>
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	1e5a      	subs	r2, r3, #1
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01e      	beq.n	8002358 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	6a12      	ldr	r2, [r2, #32]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	69d2      	ldr	r2, [r2, #28]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	3318      	adds	r3, #24
 800233c:	429a      	cmp	r2, r3
 800233e:	d103      	bne.n	8002348 <xTaskIncrementTick+0x10c>
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	6a1a      	ldr	r2, [r3, #32]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2200      	movs	r2, #0
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1e5a      	subs	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235c:	4b38      	ldr	r3, [pc, #224]	; (8002440 <xTaskIncrementTick+0x204>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d903      	bls.n	800236c <xTaskIncrementTick+0x130>
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002368:	4b35      	ldr	r3, [pc, #212]	; (8002440 <xTaskIncrementTick+0x204>)
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002370:	4934      	ldr	r1, [pc, #208]	; (8002444 <xTaskIncrementTick+0x208>)
 8002372:	0013      	movs	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	189b      	adds	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	18cb      	adds	r3, r1, r3
 800237c:	3304      	adds	r3, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	3204      	adds	r2, #4
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1d1a      	adds	r2, r3, #4
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a6:	0013      	movs	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	189b      	adds	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4a25      	ldr	r2, [pc, #148]	; (8002444 <xTaskIncrementTick+0x208>)
 80023b0:	189a      	adds	r2, r3, r2
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	615a      	str	r2, [r3, #20]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ba:	4922      	ldr	r1, [pc, #136]	; (8002444 <xTaskIncrementTick+0x208>)
 80023bc:	0013      	movs	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	189b      	adds	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	585b      	ldr	r3, [r3, r1]
 80023c6:	1c58      	adds	r0, r3, #1
 80023c8:	491e      	ldr	r1, [pc, #120]	; (8002444 <xTaskIncrementTick+0x208>)
 80023ca:	0013      	movs	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	189b      	adds	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <xTaskIncrementTick+0x20c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	429a      	cmp	r2, r3
 80023e0:	d800      	bhi.n	80023e4 <xTaskIncrementTick+0x1a8>
 80023e2:	e75d      	b.n	80022a0 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 80023e4:	2301      	movs	r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023e8:	e75a      	b.n	80022a0 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <xTaskIncrementTick+0x20c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f0:	4914      	ldr	r1, [pc, #80]	; (8002444 <xTaskIncrementTick+0x208>)
 80023f2:	0013      	movs	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	189b      	adds	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	585b      	ldr	r3, [r3, r1]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d901      	bls.n	8002404 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8002400:	2301      	movs	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <xTaskIncrementTick+0x210>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800240c:	2301      	movs	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	e004      	b.n	800241c <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <xTaskIncrementTick+0x214>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <xTaskIncrementTick+0x214>)
 800241a:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800241c:	69fb      	ldr	r3, [r7, #28]
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b008      	add	sp, #32
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	20000108 	.word	0x20000108
 800242c:	200000f0 	.word	0x200000f0
 8002430:	200000e8 	.word	0x200000e8
 8002434:	200000ec 	.word	0x200000ec
 8002438:	20000100 	.word	0x20000100
 800243c:	20000104 	.word	0x20000104
 8002440:	200000f4 	.word	0x200000f4
 8002444:	20000084 	.word	0x20000084
 8002448:	20000080 	.word	0x20000080
 800244c:	200000fc 	.word	0x200000fc
 8002450:	200000f8 	.word	0x200000f8

08002454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <vTaskSwitchContext+0x90>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <vTaskSwitchContext+0x94>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002468:	e037      	b.n	80024da <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <vTaskSwitchContext+0x94>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002470:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <vTaskSwitchContext+0x98>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	e007      	b.n	8002488 <vTaskSwitchContext+0x34>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <vTaskSwitchContext+0x2e>
 800247e:	b672      	cpsid	i
 8002480:	e7fe      	b.n	8002480 <vTaskSwitchContext+0x2c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3b01      	subs	r3, #1
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	4919      	ldr	r1, [pc, #100]	; (80024f0 <vTaskSwitchContext+0x9c>)
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	0013      	movs	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	189b      	adds	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	585b      	ldr	r3, [r3, r1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0ee      	beq.n	8002478 <vTaskSwitchContext+0x24>
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	0013      	movs	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	189b      	adds	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <vTaskSwitchContext+0x9c>)
 80024a6:	189b      	adds	r3, r3, r2
 80024a8:	603b      	str	r3, [r7, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3308      	adds	r3, #8
 80024bc:	429a      	cmp	r2, r3
 80024be:	d104      	bne.n	80024ca <vTaskSwitchContext+0x76>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <vTaskSwitchContext+0xa0>)
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <vTaskSwitchContext+0x98>)
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	20000108 	.word	0x20000108
 80024e8:	200000fc 	.word	0x200000fc
 80024ec:	200000f4 	.word	0x200000f4
 80024f0:	20000084 	.word	0x20000084
 80024f4:	20000080 	.word	0x20000080

080024f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <prvResetNextTaskUnblockTime+0x2c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <prvResetNextTaskUnblockTime+0x30>)
 8002508:	2201      	movs	r2, #1
 800250a:	4252      	negs	r2, r2
 800250c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800250e:	e005      	b.n	800251c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <prvResetNextTaskUnblockTime+0x2c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <prvResetNextTaskUnblockTime+0x30>)
 800251a:	601a      	str	r2, [r3, #0]
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	200000e8 	.word	0x200000e8
 8002528:	20000104 	.word	0x20000104

0800252c <SVC_Handler>:
    }
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002536:	f3ef 8010 	mrs	r0, PRIMASK
 800253a:	b672      	cpsid	i
 800253c:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	0018      	movs	r0, r3

08002542 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002542:	f380 8810 	msr	PRIMASK, r0
 8002546:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	0000      	movs	r0, r0
 800254c:	0000      	movs	r0, r0
	...

08002550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002550:	f3ef 8009 	mrs	r0, PSP
 8002554:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <pxCurrentTCBConst>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	3820      	subs	r0, #32
 800255a:	6010      	str	r0, [r2, #0]
 800255c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800255e:	4644      	mov	r4, r8
 8002560:	464d      	mov	r5, r9
 8002562:	4656      	mov	r6, sl
 8002564:	465f      	mov	r7, fp
 8002566:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002568:	b508      	push	{r3, lr}
 800256a:	b672      	cpsid	i
 800256c:	f7ff ff72 	bl	8002454 <vTaskSwitchContext>
 8002570:	b662      	cpsie	i
 8002572:	bc0c      	pop	{r2, r3}
 8002574:	6811      	ldr	r1, [r2, #0]
 8002576:	6808      	ldr	r0, [r1, #0]
 8002578:	3010      	adds	r0, #16
 800257a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800257c:	46a0      	mov	r8, r4
 800257e:	46a9      	mov	r9, r5
 8002580:	46b2      	mov	sl, r6
 8002582:	46bb      	mov	fp, r7
 8002584:	f380 8809 	msr	PSP, r0
 8002588:	3820      	subs	r0, #32
 800258a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800258c:	4718      	bx	r3
 800258e:	46c0      	nop			; (mov r8, r8)

08002590 <pxCurrentTCBConst>:
 8002590:	20000080 	.word	0x20000080
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46c0      	nop			; (mov r8, r8)

08002598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800259e:	f7ff ffca 	bl	8002536 <ulSetInterruptMaskFromISR>
 80025a2:	0003      	movs	r3, r0
 80025a4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80025a6:	f7ff fe49 	bl	800223c <xTaskIncrementTick>
 80025aa:	1e03      	subs	r3, r0, #0
 80025ac:	d003      	beq.n	80025b6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <SysTick_Handler+0x30>)
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	0552      	lsls	r2, r2, #21
 80025b4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f7ff ffc2 	bl	8002542 <vClearInterruptMaskFromISR>
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	e000ed04 	.word	0xe000ed04

080025cc <__libc_init_array>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	2600      	movs	r6, #0
 80025d0:	4d0c      	ldr	r5, [pc, #48]	; (8002604 <__libc_init_array+0x38>)
 80025d2:	4c0d      	ldr	r4, [pc, #52]	; (8002608 <__libc_init_array+0x3c>)
 80025d4:	1b64      	subs	r4, r4, r5
 80025d6:	10a4      	asrs	r4, r4, #2
 80025d8:	42a6      	cmp	r6, r4
 80025da:	d109      	bne.n	80025f0 <__libc_init_array+0x24>
 80025dc:	2600      	movs	r6, #0
 80025de:	f000 f821 	bl	8002624 <_init>
 80025e2:	4d0a      	ldr	r5, [pc, #40]	; (800260c <__libc_init_array+0x40>)
 80025e4:	4c0a      	ldr	r4, [pc, #40]	; (8002610 <__libc_init_array+0x44>)
 80025e6:	1b64      	subs	r4, r4, r5
 80025e8:	10a4      	asrs	r4, r4, #2
 80025ea:	42a6      	cmp	r6, r4
 80025ec:	d105      	bne.n	80025fa <__libc_init_array+0x2e>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	00b3      	lsls	r3, r6, #2
 80025f2:	58eb      	ldr	r3, [r5, r3]
 80025f4:	4798      	blx	r3
 80025f6:	3601      	adds	r6, #1
 80025f8:	e7ee      	b.n	80025d8 <__libc_init_array+0xc>
 80025fa:	00b3      	lsls	r3, r6, #2
 80025fc:	58eb      	ldr	r3, [r5, r3]
 80025fe:	4798      	blx	r3
 8002600:	3601      	adds	r6, #1
 8002602:	e7f2      	b.n	80025ea <__libc_init_array+0x1e>
 8002604:	0800268c 	.word	0x0800268c
 8002608:	0800268c 	.word	0x0800268c
 800260c:	0800268c 	.word	0x0800268c
 8002610:	08002690 	.word	0x08002690

08002614 <memset>:
 8002614:	0003      	movs	r3, r0
 8002616:	1882      	adds	r2, r0, r2
 8002618:	4293      	cmp	r3, r2
 800261a:	d100      	bne.n	800261e <memset+0xa>
 800261c:	4770      	bx	lr
 800261e:	7019      	strb	r1, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	e7f9      	b.n	8002618 <memset+0x4>

08002624 <_init>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr

08002630 <_fini>:
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002636:	bc08      	pop	{r3}
 8002638:	469e      	mov	lr, r3
 800263a:	4770      	bx	lr

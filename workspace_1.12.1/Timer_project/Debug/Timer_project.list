
Timer_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052cc  080052cc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080052cc  080052cc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052cc  080052cc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052cc  080052cc  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052d0  080052d0  000152d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080052d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c08  20000014  080052e8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c1c  080052e8  00021c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015300  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f77  00000000  00000000  0003533c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  000382b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  00039548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a3e  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c96  00000000  00000000  000520ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096d17  00000000  00000000  00067d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fea9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c4  00000000  00000000  000feaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005198 	.word	0x08005198

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08005198 	.word	0x08005198

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(unsigned int a)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<a;i++)
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	e00c      	b.n	800041c <delay+0x28>
	for(j=0;j<5000;j++);
 8000402:	2300      	movs	r3, #0
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	e002      	b.n	800040e <delay+0x1a>
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	3301      	adds	r3, #1
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	4a07      	ldr	r2, [pc, #28]	; (8000430 <delay+0x3c>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d9f8      	bls.n	8000408 <delay+0x14>
	for(i=0;i<a;i++)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	3301      	adds	r3, #1
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	429a      	cmp	r2, r3
 8000422:	d3ee      	bcc.n	8000402 <delay+0xe>
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b004      	add	sp, #16
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	00001387 	.word	0x00001387

08000434 <AutoreloadCallback>:
{
	uint8_t data[] = "BOTH TIMERS CREATED\r\n";
	HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
}
void AutoreloadCallback(TimerHandle_t timer)
{
 8000434:	b5b0      	push	{r4, r5, r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = "AUTORELOAD EXECUTING\r\n";
 800043c:	2008      	movs	r0, #8
 800043e:	183b      	adds	r3, r7, r0
 8000440:	4a13      	ldr	r2, [pc, #76]	; (8000490 <AutoreloadCallback+0x5c>)
 8000442:	ca32      	ldmia	r2!, {r1, r4, r5}
 8000444:	c332      	stmia	r3!, {r1, r4, r5}
 8000446:	ca12      	ldmia	r2!, {r1, r4}
 8000448:	c312      	stmia	r3!, {r1, r4}
 800044a:	8811      	ldrh	r1, [r2, #0]
 800044c:	8019      	strh	r1, [r3, #0]
 800044e:	7892      	ldrb	r2, [r2, #2]
 8000450:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 8000452:	23fa      	movs	r3, #250	; 0xfa
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	1839      	adds	r1, r7, r0
 8000458:	480e      	ldr	r0, [pc, #56]	; (8000494 <AutoreloadCallback+0x60>)
 800045a:	2217      	movs	r2, #23
 800045c:	f001 feda 	bl	8002214 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,SET);
 8000460:	23a0      	movs	r3, #160	; 0xa0
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	2201      	movs	r2, #1
 8000466:	2120      	movs	r1, #32
 8000468:	0018      	movs	r0, r3
 800046a:	f000 fd4b 	bl	8000f04 <HAL_GPIO_WritePin>
	delay(200);
 800046e:	20c8      	movs	r0, #200	; 0xc8
 8000470:	f7ff ffc0 	bl	80003f4 <delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,RESET);
 8000474:	23a0      	movs	r3, #160	; 0xa0
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	2200      	movs	r2, #0
 800047a:	2120      	movs	r1, #32
 800047c:	0018      	movs	r0, r3
 800047e:	f000 fd41 	bl	8000f04 <HAL_GPIO_WritePin>
	delay(200);
 8000482:	20c8      	movs	r0, #200	; 0xc8
 8000484:	f7ff ffb6 	bl	80003f4 <delay>
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b008      	add	sp, #32
 800048e:	bdb0      	pop	{r4, r5, r7, pc}
 8000490:	080051c8 	.word	0x080051c8
 8000494:	20000030 	.word	0x20000030

08000498 <AutoreloadCallback2>:

void AutoreloadCallback2(TimerHandle_t timer)
{
 8000498:	b5b0      	push	{r4, r5, r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = "AUTORELOAD2 EXECUTE\r\n";
 80004a0:	2108      	movs	r1, #8
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <AutoreloadCallback2+0x44>)
 80004a6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004a8:	c331      	stmia	r3!, {r0, r4, r5}
 80004aa:	ca11      	ldmia	r2!, {r0, r4}
 80004ac:	c311      	stmia	r3!, {r0, r4}
 80004ae:	8812      	ldrh	r2, [r2, #0]
 80004b0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 80004b2:	23fa      	movs	r3, #250	; 0xfa
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	1879      	adds	r1, r7, r1
 80004b8:	4809      	ldr	r0, [pc, #36]	; (80004e0 <AutoreloadCallback2+0x48>)
 80004ba:	2216      	movs	r2, #22
 80004bc:	f001 feaa 	bl	8002214 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	01db      	lsls	r3, r3, #7
 80004c4:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <AutoreloadCallback2+0x4c>)
 80004c6:	0019      	movs	r1, r3
 80004c8:	0010      	movs	r0, r2
 80004ca:	f000 fd38 	bl	8000f3e <HAL_GPIO_TogglePin>
	delay(100);
 80004ce:	2064      	movs	r0, #100	; 0x64
 80004d0:	f7ff ff90 	bl	80003f4 <delay>
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b008      	add	sp, #32
 80004da:	bdb0      	pop	{r4, r5, r7, pc}
 80004dc:	080051e0 	.word	0x080051e0
 80004e0:	20000030 	.word	0x20000030
 80004e4:	50000400 	.word	0x50000400

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fabb 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f849 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f8dd 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004fa:	f000 f88d 	bl	8000618 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  AutoreloadHandle=xTimerCreate("Autoreload", 1000, pdTRUE,0, AutoreloadCallback);
 80004fe:	23fa      	movs	r3, #250	; 0xfa
 8000500:	0099      	lsls	r1, r3, #2
 8000502:	481c      	ldr	r0, [pc, #112]	; (8000574 <main+0x8c>)
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <main+0x90>)
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2300      	movs	r3, #0
 800050a:	2201      	movs	r2, #1
 800050c:	f004 f852 	bl	80045b4 <xTimerCreate>
 8000510:	0002      	movs	r2, r0
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <main+0x94>)
 8000514:	601a      	str	r2, [r3, #0]

    AutoreloadHandle2=xTimerCreate("Autoreload", 2000, pdTRUE,0, AutoreloadCallback2);
 8000516:	23fa      	movs	r3, #250	; 0xfa
 8000518:	00d9      	lsls	r1, r3, #3
 800051a:	4816      	ldr	r0, [pc, #88]	; (8000574 <main+0x8c>)
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <main+0x98>)
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2300      	movs	r3, #0
 8000522:	2201      	movs	r2, #1
 8000524:	f004 f846 	bl	80045b4 <xTimerCreate>
 8000528:	0002      	movs	r2, r0
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <main+0x9c>)
 800052c:	601a      	str	r2, [r3, #0]

    if(AutoreloadHandle != NULL && AutoreloadHandle2 != NULL)
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <main+0x94>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d01b      	beq.n	800056e <main+0x86>
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <main+0x9c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d017      	beq.n	800056e <main+0x86>
    {

    	xTimerStart(AutoreloadHandle,0);
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <main+0x94>)
 8000540:	681c      	ldr	r4, [r3, #0]
 8000542:	f003 fb45 	bl	8003bd0 <xTaskGetTickCount>
 8000546:	0002      	movs	r2, r0
 8000548:	2300      	movs	r3, #0
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2300      	movs	r3, #0
 800054e:	2101      	movs	r1, #1
 8000550:	0020      	movs	r0, r4
 8000552:	f004 f881 	bl	8004658 <xTimerGenericCommand>
    	xTimerStart(AutoreloadHandle2,0);
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <main+0x9c>)
 8000558:	681c      	ldr	r4, [r3, #0]
 800055a:	f003 fb39 	bl	8003bd0 <xTaskGetTickCount>
 800055e:	0002      	movs	r2, r0
 8000560:	2300      	movs	r3, #0
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	2101      	movs	r1, #1
 8000568:	0020      	movs	r0, r4
 800056a:	f004 f875 	bl	8004658 <xTimerGenericCommand>
    }

     vTaskStartScheduler();
 800056e:	f003 f9fb 	bl	8003968 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x8a>
 8000574:	080051f8 	.word	0x080051f8
 8000578:	08000435 	.word	0x08000435
 800057c:	200000c4 	.word	0x200000c4
 8000580:	08000499 	.word	0x08000499
 8000584:	200000c8 	.word	0x200000c8

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b093      	sub	sp, #76	; 0x4c
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	2414      	movs	r4, #20
 8000590:	193b      	adds	r3, r7, r4
 8000592:	0018      	movs	r0, r3
 8000594:	2334      	movs	r3, #52	; 0x34
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f004 fdf4 	bl	8005186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	0018      	movs	r0, r3
 80005a2:	2310      	movs	r3, #16
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f004 fded 	bl	8005186 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fcdf 	bl	8000f74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2202      	movs	r2, #2
 80005ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	0052      	lsls	r2, r2, #1
 80005c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2240      	movs	r2, #64	; 0x40
 80005ce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 fd17 	bl	800100c <HAL_RCC_OscConfig>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005e2:	f000 f8f1 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2207      	movs	r2, #7
 80005ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2100      	movs	r1, #0
 8000602:	0018      	movs	r0, r3
 8000604:	f001 f812 	bl	800162c <HAL_RCC_ClockConfig>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800060c:	f000 f8dc 	bl	80007c8 <Error_Handler>
  }
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b013      	add	sp, #76	; 0x4c
 8000616:	bd90      	pop	{r4, r7, pc}

08000618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_USART2_UART_Init+0x94>)
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <MX_USART2_UART_Init+0x98>)
 8000620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000624:	22e1      	movs	r2, #225	; 0xe1
 8000626:	0252      	lsls	r2, r2, #9
 8000628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_USART2_UART_Init+0x94>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_USART2_UART_Init+0x94>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_USART2_UART_Init+0x94>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_USART2_UART_Init+0x94>)
 800065c:	2200      	movs	r2, #0
 800065e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000662:	0018      	movs	r0, r3
 8000664:	f001 fd80 	bl	8002168 <HAL_UART_Init>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800066c:	f000 f8ac 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000672:	2100      	movs	r1, #0
 8000674:	0018      	movs	r0, r3
 8000676:	f002 fa11 	bl	8002a9c <HAL_UARTEx_SetTxFifoThreshold>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800067e:	f000 f8a3 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000684:	2100      	movs	r1, #0
 8000686:	0018      	movs	r0, r3
 8000688:	f002 fa48 	bl	8002b1c <HAL_UARTEx_SetRxFifoThreshold>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000690:	f000 f89a 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MX_USART2_UART_Init+0x94>)
 8000696:	0018      	movs	r0, r3
 8000698:	f002 f9c6 	bl	8002a28 <HAL_UARTEx_DisableFifoMode>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006a0:	f000 f892 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	20000030 	.word	0x20000030
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b08b      	sub	sp, #44	; 0x2c
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	2414      	movs	r4, #20
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	0018      	movs	r0, r3
 80006c0:	2314      	movs	r3, #20
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f004 fd5e 	bl	8005186 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b34      	ldr	r3, [pc, #208]	; (800079c <MX_GPIO_Init+0xe8>)
 80006cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ce:	4b33      	ldr	r3, [pc, #204]	; (800079c <MX_GPIO_Init+0xe8>)
 80006d0:	2104      	movs	r1, #4
 80006d2:	430a      	orrs	r2, r1
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <MX_GPIO_Init+0xe8>)
 80006d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006da:	2204      	movs	r2, #4
 80006dc:	4013      	ands	r3, r2
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	4b2e      	ldr	r3, [pc, #184]	; (800079c <MX_GPIO_Init+0xe8>)
 80006e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_GPIO_Init+0xe8>)
 80006e8:	2120      	movs	r1, #32
 80006ea:	430a      	orrs	r2, r1
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_GPIO_Init+0xe8>)
 80006f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f2:	2220      	movs	r2, #32
 80006f4:	4013      	ands	r3, r2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <MX_GPIO_Init+0xe8>)
 80006fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_GPIO_Init+0xe8>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	635a      	str	r2, [r3, #52]	; 0x34
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <MX_GPIO_Init+0xe8>)
 8000708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_GPIO_Init+0xe8>)
 8000714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_GPIO_Init+0xe8>)
 8000718:	2102      	movs	r1, #2
 800071a:	430a      	orrs	r2, r1
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0xe8>)
 8000720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000722:	2202      	movs	r2, #2
 8000724:	4013      	ands	r3, r2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800072a:	23a0      	movs	r3, #160	; 0xa0
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	2200      	movs	r2, #0
 8000730:	2120      	movs	r1, #32
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fbe6 	bl	8000f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	01db      	lsls	r3, r3, #7
 800073c:	4818      	ldr	r0, [pc, #96]	; (80007a0 <MX_GPIO_Init+0xec>)
 800073e:	2200      	movs	r2, #0
 8000740:	0019      	movs	r1, r3
 8000742:	f000 fbdf 	bl	8000f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2220      	movs	r2, #32
 800074a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2201      	movs	r2, #1
 8000750:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	193a      	adds	r2, r7, r4
 8000760:	23a0      	movs	r3, #160	; 0xa0
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	0011      	movs	r1, r2
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fa68 	bl	8000c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800076c:	0021      	movs	r1, r4
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	01d2      	lsls	r2, r2, #7
 8000774:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2201      	movs	r2, #1
 800077a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	187b      	adds	r3, r7, r1
 800078a:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <MX_GPIO_Init+0xec>)
 800078c:	0019      	movs	r1, r3
 800078e:	0010      	movs	r0, r2
 8000790:	f000 fa54 	bl	8000c3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b00b      	add	sp, #44	; 0x2c
 800079a:	bd90      	pop	{r4, r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	50000400 	.word	0x50000400

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b6:	f000 f977 	bl	8000aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	40000400 	.word	0x40000400

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <HAL_MspInit+0x44>)
 80007dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_MspInit+0x44>)
 80007e0:	2101      	movs	r1, #1
 80007e2:	430a      	orrs	r2, r1
 80007e4:	641a      	str	r2, [r3, #64]	; 0x40
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <HAL_MspInit+0x44>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	2201      	movs	r2, #1
 80007ec:	4013      	ands	r3, r2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_MspInit+0x44>)
 80007f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_MspInit+0x44>)
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	0549      	lsls	r1, r1, #21
 80007fc:	430a      	orrs	r2, r1
 80007fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_MspInit+0x44>)
 8000802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	055b      	lsls	r3, r3, #21
 8000808:	4013      	ands	r3, r2
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b091      	sub	sp, #68	; 0x44
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	232c      	movs	r3, #44	; 0x2c
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	0018      	movs	r0, r3
 800082a:	2314      	movs	r3, #20
 800082c:	001a      	movs	r2, r3
 800082e:	2100      	movs	r1, #0
 8000830:	f004 fca9 	bl	8005186 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000834:	2410      	movs	r4, #16
 8000836:	193b      	adds	r3, r7, r4
 8000838:	0018      	movs	r0, r3
 800083a:	231c      	movs	r3, #28
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f004 fca1 	bl	8005186 <memset>
  if(huart->Instance==USART2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a22      	ldr	r2, [pc, #136]	; (80008d4 <HAL_UART_MspInit+0xb8>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d13e      	bne.n	80008cc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2202      	movs	r2, #2
 8000852:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085a:	193b      	adds	r3, r7, r4
 800085c:	0018      	movs	r0, r3
 800085e:	f001 f8b9 	bl	80019d4 <HAL_RCCEx_PeriphCLKConfig>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000866:	f7ff ffaf 	bl	80007c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <HAL_UART_MspInit+0xbc>)
 800086c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_UART_MspInit+0xbc>)
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	0289      	lsls	r1, r1, #10
 8000874:	430a      	orrs	r2, r1
 8000876:	63da      	str	r2, [r3, #60]	; 0x3c
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_UART_MspInit+0xbc>)
 800087a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	029b      	lsls	r3, r3, #10
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_UART_MspInit+0xbc>)
 8000888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_UART_MspInit+0xbc>)
 800088c:	2101      	movs	r1, #1
 800088e:	430a      	orrs	r2, r1
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_UART_MspInit+0xbc>)
 8000894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000896:	2201      	movs	r2, #1
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089e:	212c      	movs	r1, #44	; 0x2c
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2202      	movs	r2, #2
 80008aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2201      	movs	r2, #1
 80008bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	187a      	adds	r2, r7, r1
 80008c0:	23a0      	movs	r3, #160	; 0xa0
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 f9b8 	bl	8000c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b011      	add	sp, #68	; 0x44
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b5b0      	push	{r4, r5, r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008e4:	232b      	movs	r3, #43	; 0x2b
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <HAL_InitTick+0xf0>)
 80008ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f0:	4b36      	ldr	r3, [pc, #216]	; (80009cc <HAL_InitTick+0xf0>)
 80008f2:	2102      	movs	r1, #2
 80008f4:	430a      	orrs	r2, r1
 80008f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <HAL_InitTick+0xf0>)
 80008fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008fc:	2202      	movs	r2, #2
 80008fe:	4013      	ands	r3, r2
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000904:	230c      	movs	r3, #12
 8000906:	18fa      	adds	r2, r7, r3
 8000908:	2410      	movs	r4, #16
 800090a:	193b      	adds	r3, r7, r4
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f001 f836 	bl	8001980 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	2b00      	cmp	r3, #0
 800091e:	d104      	bne.n	800092a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000920:	f001 f818 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8000924:	0003      	movs	r3, r0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000928:	e004      	b.n	8000934 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800092a:	f001 f813 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 800092e:	0003      	movs	r3, r0
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000936:	4926      	ldr	r1, [pc, #152]	; (80009d0 <HAL_InitTick+0xf4>)
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff fbe5 	bl	8000108 <__udivsi3>
 800093e:	0003      	movs	r3, r0
 8000940:	3b01      	subs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000944:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <HAL_InitTick+0xf8>)
 8000946:	4a24      	ldr	r2, [pc, #144]	; (80009d8 <HAL_InitTick+0xfc>)
 8000948:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <HAL_InitTick+0xf8>)
 800094c:	4a23      	ldr	r2, [pc, #140]	; (80009dc <HAL_InitTick+0x100>)
 800094e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <HAL_InitTick+0xf8>)
 8000952:	6a3a      	ldr	r2, [r7, #32]
 8000954:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <HAL_InitTick+0xf8>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <HAL_InitTick+0xf8>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <HAL_InitTick+0xf8>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000968:	252b      	movs	r5, #43	; 0x2b
 800096a:	197c      	adds	r4, r7, r5
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <HAL_InitTick+0xf8>)
 800096e:	0018      	movs	r0, r3
 8000970:	f001 f964 	bl	8001c3c <HAL_TIM_Base_Init>
 8000974:	0003      	movs	r3, r0
 8000976:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000978:	197b      	adds	r3, r7, r5
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d11e      	bne.n	80009be <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000980:	197c      	adds	r4, r7, r5
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_InitTick+0xf8>)
 8000984:	0018      	movs	r0, r3
 8000986:	f001 f9b9 	bl	8001cfc <HAL_TIM_Base_Start_IT>
 800098a:	0003      	movs	r3, r0
 800098c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800098e:	197b      	adds	r3, r7, r5
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d113      	bne.n	80009be <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000996:	2010      	movs	r0, #16
 8000998:	f000 f93f 	bl	8000c1a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d809      	bhi.n	80009b6 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	0019      	movs	r1, r3
 80009a8:	2010      	movs	r0, #16
 80009aa:	f000 f921 	bl	8000bf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_InitTick+0x104>)
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	e003      	b.n	80009be <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80009b6:	232b      	movs	r3, #43	; 0x2b
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80009be:	232b      	movs	r3, #43	; 0x2b
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	781b      	ldrb	r3, [r3, #0]
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b00c      	add	sp, #48	; 0x30
 80009ca:	bdb0      	pop	{r4, r5, r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	000f4240 	.word	0x000f4240
 80009d4:	200000cc 	.word	0x200000cc
 80009d8:	40000400 	.word	0x40000400
 80009dc:	000003e7 	.word	0x000003e7
 80009e0:	20000004 	.word	0x20000004

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <TIM3_IRQHandler+0x14>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f001 f9d6 	bl	8001da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	200000cc 	.word	0x200000cc

08000a08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a18:	f7ff fff6 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	; (8000a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	; (8000a60 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a42:	f004 fb73 	bl	800512c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a46:	f7ff fd4f 	bl	80004e8 <main>

08000a4a <LoopForever>:

LoopForever:
  b LoopForever
 8000a4a:	e7fe      	b.n	8000a4a <LoopForever>
  ldr   r0, =_estack
 8000a4c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a58:	080052d4 	.word	0x080052d4
  ldr r2, =_sbss
 8000a5c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a60:	20001c1c 	.word	0x20001c1c

08000a64 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC1_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_Init+0x3c>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_Init+0x3c>)
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	0049      	lsls	r1, r1, #1
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a82:	2003      	movs	r0, #3
 8000a84:	f7ff ff2a 	bl	80008dc <HAL_InitTick>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e001      	b.n	8000a98 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fe9e 	bl	80007d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	781b      	ldrb	r3, [r3, #0]
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x1c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x20>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	18d2      	adds	r2, r2, r3
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aba:	601a      	str	r2, [r3, #0]
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000118 	.word	0x20000118

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <HAL_GetTick+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000118 	.word	0x20000118

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b7f      	cmp	r3, #127	; 0x7f
 8000af2:	d809      	bhi.n	8000b08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	001a      	movs	r2, r3
 8000afa:	231f      	movs	r3, #31
 8000afc:	401a      	ands	r2, r3
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_EnableIRQ+0x30>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	4091      	lsls	r1, r2
 8000b04:	000a      	movs	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b7f      	cmp	r3, #127	; 0x7f
 8000b28:	d828      	bhi.n	8000b7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2a:	4a2f      	ldr	r2, [pc, #188]	; (8000be8 <__NVIC_SetPriority+0xd4>)
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	089b      	lsrs	r3, r3, #2
 8000b34:	33c0      	adds	r3, #192	; 0xc0
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	589b      	ldr	r3, [r3, r2]
 8000b3a:	1dfa      	adds	r2, r7, #7
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	0011      	movs	r1, r2
 8000b40:	2203      	movs	r2, #3
 8000b42:	400a      	ands	r2, r1
 8000b44:	00d2      	lsls	r2, r2, #3
 8000b46:	21ff      	movs	r1, #255	; 0xff
 8000b48:	4091      	lsls	r1, r2
 8000b4a:	000a      	movs	r2, r1
 8000b4c:	43d2      	mvns	r2, r2
 8000b4e:	401a      	ands	r2, r3
 8000b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	019b      	lsls	r3, r3, #6
 8000b56:	22ff      	movs	r2, #255	; 0xff
 8000b58:	401a      	ands	r2, r3
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	2303      	movs	r3, #3
 8000b62:	4003      	ands	r3, r0
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b68:	481f      	ldr	r0, [pc, #124]	; (8000be8 <__NVIC_SetPriority+0xd4>)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	430a      	orrs	r2, r1
 8000b74:	33c0      	adds	r3, #192	; 0xc0
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b7a:	e031      	b.n	8000be0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <__NVIC_SetPriority+0xd8>)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0019      	movs	r1, r3
 8000b84:	230f      	movs	r3, #15
 8000b86:	400b      	ands	r3, r1
 8000b88:	3b08      	subs	r3, #8
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	3306      	adds	r3, #6
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	18d3      	adds	r3, r2, r3
 8000b92:	3304      	adds	r3, #4
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	1dfa      	adds	r2, r7, #7
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	400a      	ands	r2, r1
 8000ba0:	00d2      	lsls	r2, r2, #3
 8000ba2:	21ff      	movs	r1, #255	; 0xff
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	000a      	movs	r2, r1
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	401a      	ands	r2, r3
 8000bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	019b      	lsls	r3, r3, #6
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <__NVIC_SetPriority+0xd8>)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	001c      	movs	r4, r3
 8000bcc:	230f      	movs	r3, #15
 8000bce:	4023      	ands	r3, r4
 8000bd0:	3b08      	subs	r3, #8
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	3306      	adds	r3, #6
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	18c3      	adds	r3, r0, r3
 8000bdc:	3304      	adds	r3, #4
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b003      	add	sp, #12
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	1c02      	adds	r2, r0, #0
 8000c00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff ff81 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b004      	add	sp, #16
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	0002      	movs	r2, r0
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff ff57 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4a:	e147      	b.n	8000edc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2101      	movs	r1, #1
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4091      	lsls	r1, r2
 8000c56:	000a      	movs	r2, r1
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d100      	bne.n	8000c64 <HAL_GPIO_Init+0x28>
 8000c62:	e138      	b.n	8000ed6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2203      	movs	r2, #3
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d005      	beq.n	8000c7c <HAL_GPIO_Init+0x40>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2203      	movs	r2, #3
 8000c76:	4013      	ands	r3, r2
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d130      	bne.n	8000cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	409a      	lsls	r2, r3
 8000c8a:	0013      	movs	r3, r2
 8000c8c:	43da      	mvns	r2, r3
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	0013      	movs	r3, r2
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	091b      	lsrs	r3, r3, #4
 8000cc8:	2201      	movs	r2, #1
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d017      	beq.n	8000d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2203      	movs	r2, #3
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d123      	bne.n	8000d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	08da      	lsrs	r2, r3, #3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3208      	adds	r2, #8
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	58d3      	ldr	r3, [r2, r3]
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	2207      	movs	r2, #7
 8000d38:	4013      	ands	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	43da      	mvns	r2, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	691a      	ldr	r2, [r3, #16]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2107      	movs	r1, #7
 8000d52:	400b      	ands	r3, r1
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	08da      	lsrs	r2, r3, #3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3208      	adds	r2, #8
 8000d68:	0092      	lsls	r2, r2, #2
 8000d6a:	6939      	ldr	r1, [r7, #16]
 8000d6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	23c0      	movs	r3, #192	; 0xc0
 8000da8:	029b      	lsls	r3, r3, #10
 8000daa:	4013      	ands	r3, r2
 8000dac:	d100      	bne.n	8000db0 <HAL_GPIO_Init+0x174>
 8000dae:	e092      	b.n	8000ed6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000db0:	4a50      	ldr	r2, [pc, #320]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3318      	adds	r3, #24
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	589b      	ldr	r3, [r3, r2]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	23a0      	movs	r3, #160	; 0xa0
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0x1ca>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a45      	ldr	r2, [pc, #276]	; (8000ef8 <HAL_GPIO_Init+0x2bc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d00d      	beq.n	8000e02 <HAL_GPIO_Init+0x1c6>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a44      	ldr	r2, [pc, #272]	; (8000efc <HAL_GPIO_Init+0x2c0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d007      	beq.n	8000dfe <HAL_GPIO_Init+0x1c2>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a43      	ldr	r2, [pc, #268]	; (8000f00 <HAL_GPIO_Init+0x2c4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_GPIO_Init+0x1be>
 8000df6:	2303      	movs	r3, #3
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x1cc>
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	e004      	b.n	8000e08 <HAL_GPIO_Init+0x1cc>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_Init+0x1cc>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <HAL_GPIO_Init+0x1cc>
 8000e06:	2300      	movs	r3, #0
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	2103      	movs	r1, #3
 8000e0c:	400a      	ands	r2, r1
 8000e0e:	00d2      	lsls	r2, r2, #3
 8000e10:	4093      	lsls	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e18:	4936      	ldr	r1, [pc, #216]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3318      	adds	r3, #24
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e26:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	035b      	lsls	r3, r3, #13
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e50:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43da      	mvns	r2, r3
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	039b      	lsls	r3, r3, #14
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000e7c:	2384      	movs	r3, #132	; 0x84
 8000e7e:	58d3      	ldr	r3, [r2, r3]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	43da      	mvns	r2, r3
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	029b      	lsls	r3, r3, #10
 8000e94:	4013      	ands	r3, r2
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ea0:	4914      	ldr	r1, [pc, #80]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000ea2:	2284      	movs	r2, #132	; 0x84
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	58d3      	ldr	r3, [r2, r3]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	025b      	lsls	r3, r3, #9
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ece:	4909      	ldr	r1, [pc, #36]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	40da      	lsrs	r2, r3
 8000ee4:	1e13      	subs	r3, r2, #0
 8000ee6:	d000      	beq.n	8000eea <HAL_GPIO_Init+0x2ae>
 8000ee8:	e6b0      	b.n	8000c4c <HAL_GPIO_Init+0x10>
  }
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b006      	add	sp, #24
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021800 	.word	0x40021800
 8000ef8:	50000400 	.word	0x50000400
 8000efc:	50000800 	.word	0x50000800
 8000f00:	50000c00 	.word	0x50000c00

08000f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	0008      	movs	r0, r1
 8000f0e:	0011      	movs	r1, r2
 8000f10:	1cbb      	adds	r3, r7, #2
 8000f12:	1c02      	adds	r2, r0, #0
 8000f14:	801a      	strh	r2, [r3, #0]
 8000f16:	1c7b      	adds	r3, r7, #1
 8000f18:	1c0a      	adds	r2, r1, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f1c:	1c7b      	adds	r3, r7, #1
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f24:	1cbb      	adds	r3, r7, #2
 8000f26:	881a      	ldrh	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f2c:	e003      	b.n	8000f36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f2e:	1cbb      	adds	r3, r7, #2
 8000f30:	881a      	ldrh	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b002      	add	sp, #8
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	000a      	movs	r2, r1
 8000f48:	1cbb      	adds	r3, r7, #2
 8000f4a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f52:	1cbb      	adds	r3, r7, #2
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	041a      	lsls	r2, r3, #16
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	1cb9      	adds	r1, r7, #2
 8000f62:	8809      	ldrh	r1, [r1, #0]
 8000f64:	400b      	ands	r3, r1
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b004      	add	sp, #16
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	0019      	movs	r1, r3
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d11f      	bne.n	8000fd8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4912      	ldr	r1, [pc, #72]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f7ff f8ae 	bl	8000108 <__udivsi3>
 8000fac:	0003      	movs	r3, r0
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fb2:	e008      	b.n	8000fc6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	e001      	b.n	8000fc6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e009      	b.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d0ed      	beq.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	0018      	movs	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b004      	add	sp, #16
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	fffff9ff 	.word	0xfffff9ff
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	000f4240 	.word	0x000f4240

08000ff4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	23e0      	movs	r3, #224	; 0xe0
 8000ffe:	01db      	lsls	r3, r3, #7
 8001000:	4013      	ands	r3, r2
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000

0800100c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e2f3      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2201      	movs	r2, #1
 8001024:	4013      	ands	r3, r2
 8001026:	d100      	bne.n	800102a <HAL_RCC_OscConfig+0x1e>
 8001028:	e07c      	b.n	8001124 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800102a:	4bc3      	ldr	r3, [pc, #780]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2238      	movs	r2, #56	; 0x38
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001034:	4bc0      	ldr	r3, [pc, #768]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	2b10      	cmp	r3, #16
 8001042:	d102      	bne.n	800104a <HAL_RCC_OscConfig+0x3e>
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d002      	beq.n	8001050 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b08      	cmp	r3, #8
 800104e:	d10b      	bne.n	8001068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001050:	4bb9      	ldr	r3, [pc, #740]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	029b      	lsls	r3, r3, #10
 8001058:	4013      	ands	r3, r2
 800105a:	d062      	beq.n	8001122 <HAL_RCC_OscConfig+0x116>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d15e      	bne.n	8001122 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e2ce      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	429a      	cmp	r2, r3
 8001072:	d107      	bne.n	8001084 <HAL_RCC_OscConfig+0x78>
 8001074:	4bb0      	ldr	r3, [pc, #704]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4baf      	ldr	r3, [pc, #700]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	0249      	lsls	r1, r1, #9
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e020      	b.n	80010c6 <HAL_RCC_OscConfig+0xba>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	23a0      	movs	r3, #160	; 0xa0
 800108a:	02db      	lsls	r3, r3, #11
 800108c:	429a      	cmp	r2, r3
 800108e:	d10e      	bne.n	80010ae <HAL_RCC_OscConfig+0xa2>
 8001090:	4ba9      	ldr	r3, [pc, #676]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4ba8      	ldr	r3, [pc, #672]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	02c9      	lsls	r1, r1, #11
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	4ba6      	ldr	r3, [pc, #664]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4ba5      	ldr	r3, [pc, #660]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	0249      	lsls	r1, r1, #9
 80010a8:	430a      	orrs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e00b      	b.n	80010c6 <HAL_RCC_OscConfig+0xba>
 80010ae:	4ba2      	ldr	r3, [pc, #648]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4ba1      	ldr	r3, [pc, #644]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80010b4:	49a1      	ldr	r1, [pc, #644]	; (800133c <HAL_RCC_OscConfig+0x330>)
 80010b6:	400a      	ands	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	4b9f      	ldr	r3, [pc, #636]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b9e      	ldr	r3, [pc, #632]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80010c0:	499f      	ldr	r1, [pc, #636]	; (8001340 <HAL_RCC_OscConfig+0x334>)
 80010c2:	400a      	ands	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d014      	beq.n	80010f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ce:	f7ff fcfd 	bl	8000acc <HAL_GetTick>
 80010d2:	0003      	movs	r3, r0
 80010d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fcf8 	bl	8000acc <HAL_GetTick>
 80010dc:	0002      	movs	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e28d      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ea:	4b93      	ldr	r3, [pc, #588]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	4013      	ands	r3, r2
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0xcc>
 80010f6:	e015      	b.n	8001124 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fce8 	bl	8000acc <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001102:	f7ff fce3 	bl	8000acc <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b64      	cmp	r3, #100	; 0x64
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e278      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001114:	4b88      	ldr	r3, [pc, #544]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	4013      	ands	r3, r2
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0xf6>
 8001120:	e000      	b.n	8001124 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2202      	movs	r2, #2
 800112a:	4013      	ands	r3, r2
 800112c:	d100      	bne.n	8001130 <HAL_RCC_OscConfig+0x124>
 800112e:	e099      	b.n	8001264 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001130:	4b81      	ldr	r3, [pc, #516]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2238      	movs	r2, #56	; 0x38
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800113a:	4b7f      	ldr	r3, [pc, #508]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2203      	movs	r2, #3
 8001140:	4013      	ands	r3, r2
 8001142:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	2b10      	cmp	r3, #16
 8001148:	d102      	bne.n	8001150 <HAL_RCC_OscConfig+0x144>
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d002      	beq.n	8001156 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d135      	bne.n	80011c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001156:	4b78      	ldr	r3, [pc, #480]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4013      	ands	r3, r2
 8001160:	d005      	beq.n	800116e <HAL_RCC_OscConfig+0x162>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e24b      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116e:	4b72      	ldr	r3, [pc, #456]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a74      	ldr	r2, [pc, #464]	; (8001344 <HAL_RCC_OscConfig+0x338>)
 8001174:	4013      	ands	r3, r2
 8001176:	0019      	movs	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	021a      	lsls	r2, r3, #8
 800117e:	4b6e      	ldr	r3, [pc, #440]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001180:	430a      	orrs	r2, r1
 8001182:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d112      	bne.n	80011b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800118a:	4b6b      	ldr	r3, [pc, #428]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6e      	ldr	r2, [pc, #440]	; (8001348 <HAL_RCC_OscConfig+0x33c>)
 8001190:	4013      	ands	r3, r2
 8001192:	0019      	movs	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	4b67      	ldr	r3, [pc, #412]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800119e:	4b66      	ldr	r3, [pc, #408]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	0adb      	lsrs	r3, r3, #11
 80011a4:	2207      	movs	r2, #7
 80011a6:	4013      	ands	r3, r2
 80011a8:	4a68      	ldr	r2, [pc, #416]	; (800134c <HAL_RCC_OscConfig+0x340>)
 80011aa:	40da      	lsrs	r2, r3
 80011ac:	4b68      	ldr	r3, [pc, #416]	; (8001350 <HAL_RCC_OscConfig+0x344>)
 80011ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011b0:	4b68      	ldr	r3, [pc, #416]	; (8001354 <HAL_RCC_OscConfig+0x348>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff fb91 	bl	80008dc <HAL_InitTick>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d051      	beq.n	8001262 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e221      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d030      	beq.n	800122c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011ca:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <HAL_RCC_OscConfig+0x33c>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	0019      	movs	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	4b57      	ldr	r3, [pc, #348]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80011da:	430a      	orrs	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80011de:	4b56      	ldr	r3, [pc, #344]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b55      	ldr	r3, [pc, #340]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80011e4:	2180      	movs	r1, #128	; 0x80
 80011e6:	0049      	lsls	r1, r1, #1
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc6e 	bl	8000acc <HAL_GetTick>
 80011f0:	0003      	movs	r3, r0
 80011f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fc69 	bl	8000acc <HAL_GetTick>
 80011fa:	0002      	movs	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e1fe      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4013      	ands	r3, r2
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4b48      	ldr	r3, [pc, #288]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a4a      	ldr	r2, [pc, #296]	; (8001344 <HAL_RCC_OscConfig+0x338>)
 800121a:	4013      	ands	r3, r2
 800121c:	0019      	movs	r1, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	021a      	lsls	r2, r3, #8
 8001224:	4b44      	ldr	r3, [pc, #272]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001226:	430a      	orrs	r2, r1
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	e01b      	b.n	8001264 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800122c:	4b42      	ldr	r3, [pc, #264]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b41      	ldr	r3, [pc, #260]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001232:	4949      	ldr	r1, [pc, #292]	; (8001358 <HAL_RCC_OscConfig+0x34c>)
 8001234:	400a      	ands	r2, r1
 8001236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fc48 	bl	8000acc <HAL_GetTick>
 800123c:	0003      	movs	r3, r0
 800123e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff fc43 	bl	8000acc <HAL_GetTick>
 8001246:	0002      	movs	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e1d8      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4013      	ands	r3, r2
 800125e:	d1f0      	bne.n	8001242 <HAL_RCC_OscConfig+0x236>
 8001260:	e000      	b.n	8001264 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001262:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2208      	movs	r2, #8
 800126a:	4013      	ands	r3, r2
 800126c:	d047      	beq.n	80012fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800126e:	4b32      	ldr	r3, [pc, #200]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2238      	movs	r2, #56	; 0x38
 8001274:	4013      	ands	r3, r2
 8001276:	2b18      	cmp	r3, #24
 8001278:	d10a      	bne.n	8001290 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	2202      	movs	r2, #2
 8001280:	4013      	ands	r3, r2
 8001282:	d03c      	beq.n	80012fe <HAL_RCC_OscConfig+0x2f2>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d138      	bne.n	80012fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e1ba      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d019      	beq.n	80012cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 800129a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 800129e:	2101      	movs	r1, #1
 80012a0:	430a      	orrs	r2, r1
 80012a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fc12 	bl	8000acc <HAL_GetTick>
 80012a8:	0003      	movs	r3, r0
 80012aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ae:	f7ff fc0d 	bl	8000acc <HAL_GetTick>
 80012b2:	0002      	movs	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e1a2      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c4:	2202      	movs	r2, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	d0f1      	beq.n	80012ae <HAL_RCC_OscConfig+0x2a2>
 80012ca:	e018      	b.n	80012fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80012ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	2101      	movs	r1, #1
 80012d4:	438a      	bics	r2, r1
 80012d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fbf8 	bl	8000acc <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e2:	f7ff fbf3 	bl	8000acc <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e188      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f8:	2202      	movs	r2, #2
 80012fa:	4013      	ands	r3, r2
 80012fc:	d1f1      	bne.n	80012e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2204      	movs	r2, #4
 8001304:	4013      	ands	r3, r2
 8001306:	d100      	bne.n	800130a <HAL_RCC_OscConfig+0x2fe>
 8001308:	e0c6      	b.n	8001498 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130a:	231f      	movs	r3, #31
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2238      	movs	r2, #56	; 0x38
 8001318:	4013      	ands	r3, r2
 800131a:	2b20      	cmp	r3, #32
 800131c:	d11e      	bne.n	800135c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_RCC_OscConfig+0x32c>)
 8001320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001322:	2202      	movs	r2, #2
 8001324:	4013      	ands	r3, r2
 8001326:	d100      	bne.n	800132a <HAL_RCC_OscConfig+0x31e>
 8001328:	e0b6      	b.n	8001498 <HAL_RCC_OscConfig+0x48c>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d000      	beq.n	8001334 <HAL_RCC_OscConfig+0x328>
 8001332:	e0b1      	b.n	8001498 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e166      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
 8001338:	40021000 	.word	0x40021000
 800133c:	fffeffff 	.word	0xfffeffff
 8001340:	fffbffff 	.word	0xfffbffff
 8001344:	ffff80ff 	.word	0xffff80ff
 8001348:	ffffc7ff 	.word	0xffffc7ff
 800134c:	00f42400 	.word	0x00f42400
 8001350:	20000000 	.word	0x20000000
 8001354:	20000004 	.word	0x20000004
 8001358:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800135c:	4bac      	ldr	r3, [pc, #688]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 800135e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	055b      	lsls	r3, r3, #21
 8001364:	4013      	ands	r3, r2
 8001366:	d101      	bne.n	800136c <HAL_RCC_OscConfig+0x360>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x362>
 800136c:	2300      	movs	r3, #0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d011      	beq.n	8001396 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4ba7      	ldr	r3, [pc, #668]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001376:	4ba6      	ldr	r3, [pc, #664]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0549      	lsls	r1, r1, #21
 800137c:	430a      	orrs	r2, r1
 800137e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001380:	4ba3      	ldr	r3, [pc, #652]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	055b      	lsls	r3, r3, #21
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800138e:	231f      	movs	r3, #31
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001396:	4b9f      	ldr	r3, [pc, #636]	; (8001614 <HAL_RCC_OscConfig+0x608>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4013      	ands	r3, r2
 80013a0:	d11a      	bne.n	80013d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013a2:	4b9c      	ldr	r3, [pc, #624]	; (8001614 <HAL_RCC_OscConfig+0x608>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b9b      	ldr	r3, [pc, #620]	; (8001614 <HAL_RCC_OscConfig+0x608>)
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	0049      	lsls	r1, r1, #1
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fb8c 	bl	8000acc <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fb87 	bl	8000acc <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e11c      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013cc:	4b91      	ldr	r3, [pc, #580]	; (8001614 <HAL_RCC_OscConfig+0x608>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4013      	ands	r3, r2
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x3e2>
 80013e0:	4b8b      	ldr	r3, [pc, #556]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 80013e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013e4:	4b8a      	ldr	r3, [pc, #552]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	430a      	orrs	r2, r1
 80013ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80013ec:	e01c      	b.n	8001428 <HAL_RCC_OscConfig+0x41c>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x404>
 80013f6:	4b86      	ldr	r3, [pc, #536]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 80013f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013fa:	4b85      	ldr	r3, [pc, #532]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 80013fc:	2104      	movs	r1, #4
 80013fe:	430a      	orrs	r2, r1
 8001400:	65da      	str	r2, [r3, #92]	; 0x5c
 8001402:	4b83      	ldr	r3, [pc, #524]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001406:	4b82      	ldr	r3, [pc, #520]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001408:	2101      	movs	r1, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	65da      	str	r2, [r3, #92]	; 0x5c
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0x41c>
 8001410:	4b7f      	ldr	r3, [pc, #508]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001412:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001414:	4b7e      	ldr	r3, [pc, #504]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001416:	2101      	movs	r1, #1
 8001418:	438a      	bics	r2, r1
 800141a:	65da      	str	r2, [r3, #92]	; 0x5c
 800141c:	4b7c      	ldr	r3, [pc, #496]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 800141e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001420:	4b7b      	ldr	r3, [pc, #492]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001422:	2104      	movs	r1, #4
 8001424:	438a      	bics	r2, r1
 8001426:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d014      	beq.n	800145a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fb4c 	bl	8000acc <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001438:	e009      	b.n	800144e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff fb47 	bl	8000acc <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	4a74      	ldr	r2, [pc, #464]	; (8001618 <HAL_RCC_OscConfig+0x60c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0db      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800144e:	4b70      	ldr	r3, [pc, #448]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001452:	2202      	movs	r2, #2
 8001454:	4013      	ands	r3, r2
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x42e>
 8001458:	e013      	b.n	8001482 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145a:	f7ff fb37 	bl	8000acc <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001462:	e009      	b.n	8001478 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff fb32 	bl	8000acc <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	4a6a      	ldr	r2, [pc, #424]	; (8001618 <HAL_RCC_OscConfig+0x60c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e0c6      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001478:	4b65      	ldr	r3, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 800147a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147c:	2202      	movs	r2, #2
 800147e:	4013      	ands	r3, r2
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001482:	231f      	movs	r3, #31
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800148c:	4b60      	ldr	r3, [pc, #384]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 800148e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001490:	4b5f      	ldr	r3, [pc, #380]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001492:	4962      	ldr	r1, [pc, #392]	; (800161c <HAL_RCC_OscConfig+0x610>)
 8001494:	400a      	ands	r2, r1
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d100      	bne.n	80014a2 <HAL_RCC_OscConfig+0x496>
 80014a0:	e0b0      	b.n	8001604 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a2:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2238      	movs	r2, #56	; 0x38
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d100      	bne.n	80014b0 <HAL_RCC_OscConfig+0x4a4>
 80014ae:	e078      	b.n	80015a2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d153      	bne.n	8001560 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b8:	4b55      	ldr	r3, [pc, #340]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b54      	ldr	r3, [pc, #336]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 80014be:	4958      	ldr	r1, [pc, #352]	; (8001620 <HAL_RCC_OscConfig+0x614>)
 80014c0:	400a      	ands	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fb02 	bl	8000acc <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff fafd 	bl	8000acc <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e092      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e0:	4b4b      	ldr	r3, [pc, #300]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	049b      	lsls	r3, r3, #18
 80014e8:	4013      	ands	r3, r2
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ec:	4b48      	ldr	r3, [pc, #288]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_RCC_OscConfig+0x618>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1a      	ldr	r2, [r3, #32]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	431a      	orrs	r2, r3
 8001514:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001516:	430a      	orrs	r2, r1
 8001518:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	0449      	lsls	r1, r1, #17
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	0549      	lsls	r1, r1, #21
 8001532:	430a      	orrs	r2, r1
 8001534:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001536:	f7ff fac9 	bl	8000acc <HAL_GetTick>
 800153a:	0003      	movs	r3, r0
 800153c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fac4 	bl	8000acc <HAL_GetTick>
 8001544:	0002      	movs	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e059      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	049b      	lsls	r3, r3, #18
 800155a:	4013      	ands	r3, r2
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x534>
 800155e:	e051      	b.n	8001604 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001566:	492e      	ldr	r1, [pc, #184]	; (8001620 <HAL_RCC_OscConfig+0x614>)
 8001568:	400a      	ands	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff faae 	bl	8000acc <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff faa9 	bl	8000acc <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e03e      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	049b      	lsls	r3, r3, #18
 8001590:	4013      	ands	r3, r2
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 800159a:	4923      	ldr	r1, [pc, #140]	; (8001628 <HAL_RCC_OscConfig+0x61c>)
 800159c:	400a      	ands	r2, r1
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	e030      	b.n	8001604 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e02b      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_RCC_OscConfig+0x604>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2203      	movs	r2, #3
 80015b8:	401a      	ands	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d11e      	bne.n	8001600 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2270      	movs	r2, #112	; 0x70
 80015c6:	401a      	ands	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d117      	bne.n	8001600 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	23fe      	movs	r3, #254	; 0xfe
 80015d4:	01db      	lsls	r3, r3, #7
 80015d6:	401a      	ands	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015de:	429a      	cmp	r2, r3
 80015e0:	d10e      	bne.n	8001600 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	23f8      	movs	r3, #248	; 0xf8
 80015e6:	039b      	lsls	r3, r3, #14
 80015e8:	401a      	ands	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	0f5b      	lsrs	r3, r3, #29
 80015f6:	075a      	lsls	r2, r3, #29
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b008      	add	sp, #32
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40021000 	.word	0x40021000
 8001614:	40007000 	.word	0x40007000
 8001618:	00001388 	.word	0x00001388
 800161c:	efffffff 	.word	0xefffffff
 8001620:	feffffff 	.word	0xfeffffff
 8001624:	1fc1808c 	.word	0x1fc1808c
 8001628:	effefffc 	.word	0xeffefffc

0800162c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0e9      	b.n	8001814 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001640:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2207      	movs	r2, #7
 8001646:	4013      	ands	r3, r2
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d91e      	bls.n	800168c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b73      	ldr	r3, [pc, #460]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2207      	movs	r2, #7
 8001654:	4393      	bics	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	4b70      	ldr	r3, [pc, #448]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001660:	f7ff fa34 	bl	8000acc <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001668:	e009      	b.n	800167e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166a:	f7ff fa2f 	bl	8000acc <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	4a6a      	ldr	r2, [pc, #424]	; (8001820 <HAL_RCC_ClockConfig+0x1f4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e0ca      	b.n	8001814 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800167e:	4b67      	ldr	r3, [pc, #412]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2207      	movs	r2, #7
 8001684:	4013      	ands	r3, r2
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d1ee      	bne.n	800166a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d015      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2204      	movs	r2, #4
 800169c:	4013      	ands	r3, r2
 800169e:	d006      	beq.n	80016ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016a0:	4b60      	ldr	r3, [pc, #384]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	4b5f      	ldr	r3, [pc, #380]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 80016a6:	21e0      	movs	r1, #224	; 0xe0
 80016a8:	01c9      	lsls	r1, r1, #7
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ae:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	4a5d      	ldr	r2, [pc, #372]	; (8001828 <HAL_RCC_ClockConfig+0x1fc>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	0019      	movs	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	4b59      	ldr	r3, [pc, #356]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 80016be:	430a      	orrs	r2, r1
 80016c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	d057      	beq.n	800177c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d4:	4b53      	ldr	r3, [pc, #332]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	029b      	lsls	r3, r3, #10
 80016dc:	4013      	ands	r3, r2
 80016de:	d12b      	bne.n	8001738 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e097      	b.n	8001814 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ec:	4b4d      	ldr	r3, [pc, #308]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	049b      	lsls	r3, r3, #18
 80016f4:	4013      	ands	r3, r2
 80016f6:	d11f      	bne.n	8001738 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e08b      	b.n	8001814 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001704:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4013      	ands	r3, r2
 800170e:	d113      	bne.n	8001738 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e07f      	b.n	8001814 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d106      	bne.n	800172a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800171c:	4b41      	ldr	r3, [pc, #260]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 800171e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001720:	2202      	movs	r2, #2
 8001722:	4013      	ands	r3, r2
 8001724:	d108      	bne.n	8001738 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e074      	b.n	8001814 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172a:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 800172c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e06d      	b.n	8001814 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001738:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2207      	movs	r2, #7
 800173e:	4393      	bics	r3, r2
 8001740:	0019      	movs	r1, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800174c:	f7ff f9be 	bl	8000acc <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001754:	e009      	b.n	800176a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001756:	f7ff f9b9 	bl	8000acc <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <HAL_RCC_ClockConfig+0x1f4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e054      	b.n	8001814 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2238      	movs	r2, #56	; 0x38
 8001770:	401a      	ands	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	429a      	cmp	r2, r3
 800177a:	d1ec      	bne.n	8001756 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2207      	movs	r2, #7
 8001782:	4013      	ands	r3, r2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d21e      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2207      	movs	r2, #7
 8001790:	4393      	bics	r3, r2
 8001792:	0019      	movs	r1, r3
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800179c:	f7ff f996 	bl	8000acc <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017a4:	e009      	b.n	80017ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a6:	f7ff f991 	bl	8000acc <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <HAL_RCC_ClockConfig+0x1f4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e02c      	b.n	8001814 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2207      	movs	r2, #7
 80017c0:	4013      	ands	r3, r2
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2204      	movs	r2, #4
 80017ce:	4013      	ands	r3, r2
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	4a15      	ldr	r2, [pc, #84]	; (800182c <HAL_RCC_ClockConfig+0x200>)
 80017d8:	4013      	ands	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017e6:	f000 f829 	bl	800183c <HAL_RCC_GetSysClockFreq>
 80017ea:	0001      	movs	r1, r0
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	220f      	movs	r2, #15
 80017f4:	401a      	ands	r2, r3
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_RCC_ClockConfig+0x204>)
 80017f8:	0092      	lsls	r2, r2, #2
 80017fa:	58d3      	ldr	r3, [r2, r3]
 80017fc:	221f      	movs	r2, #31
 80017fe:	4013      	ands	r3, r2
 8001800:	000a      	movs	r2, r1
 8001802:	40da      	lsrs	r2, r3
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x208>)
 8001806:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x20c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff f865 	bl	80008dc <HAL_InitTick>
 8001812:	0003      	movs	r3, r0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b004      	add	sp, #16
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40022000 	.word	0x40022000
 8001820:	00001388 	.word	0x00001388
 8001824:	40021000 	.word	0x40021000
 8001828:	fffff0ff 	.word	0xfffff0ff
 800182c:	ffff8fff 	.word	0xffff8fff
 8001830:	0800521c 	.word	0x0800521c
 8001834:	20000000 	.word	0x20000000
 8001838:	20000004 	.word	0x20000004

0800183c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001842:	4b3c      	ldr	r3, [pc, #240]	; (8001934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2238      	movs	r2, #56	; 0x38
 8001848:	4013      	ands	r3, r2
 800184a:	d10f      	bne.n	800186c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800184c:	4b39      	ldr	r3, [pc, #228]	; (8001934 <HAL_RCC_GetSysClockFreq+0xf8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0adb      	lsrs	r3, r3, #11
 8001852:	2207      	movs	r2, #7
 8001854:	4013      	ands	r3, r2
 8001856:	2201      	movs	r2, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	4835      	ldr	r0, [pc, #212]	; (8001938 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001862:	f7fe fc51 	bl	8000108 <__udivsi3>
 8001866:	0003      	movs	r3, r0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	e05d      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <HAL_RCC_GetSysClockFreq+0xf8>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2238      	movs	r2, #56	; 0x38
 8001872:	4013      	ands	r3, r2
 8001874:	2b08      	cmp	r3, #8
 8001876:	d102      	bne.n	800187e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_RCC_GetSysClockFreq+0x100>)
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	e054      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2238      	movs	r2, #56	; 0x38
 8001884:	4013      	ands	r3, r2
 8001886:	2b10      	cmp	r3, #16
 8001888:	d138      	bne.n	80018fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_RCC_GetSysClockFreq+0xf8>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2203      	movs	r2, #3
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001894:	4b27      	ldr	r3, [pc, #156]	; (8001934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	2207      	movs	r2, #7
 800189c:	4013      	ands	r3, r2
 800189e:	3301      	adds	r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d10d      	bne.n	80018c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	4824      	ldr	r0, [pc, #144]	; (800193c <HAL_RCC_GetSysClockFreq+0x100>)
 80018ac:	f7fe fc2c 	bl	8000108 <__udivsi3>
 80018b0:	0003      	movs	r3, r0
 80018b2:	0019      	movs	r1, r3
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	227f      	movs	r2, #127	; 0x7f
 80018bc:	4013      	ands	r3, r2
 80018be:	434b      	muls	r3, r1
 80018c0:	617b      	str	r3, [r7, #20]
        break;
 80018c2:	e00d      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	481c      	ldr	r0, [pc, #112]	; (8001938 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018c8:	f7fe fc1e 	bl	8000108 <__udivsi3>
 80018cc:	0003      	movs	r3, r0
 80018ce:	0019      	movs	r1, r3
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	227f      	movs	r2, #127	; 0x7f
 80018d8:	4013      	ands	r3, r2
 80018da:	434b      	muls	r3, r1
 80018dc:	617b      	str	r3, [r7, #20]
        break;
 80018de:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0f5b      	lsrs	r3, r3, #29
 80018e6:	2207      	movs	r2, #7
 80018e8:	4013      	ands	r3, r2
 80018ea:	3301      	adds	r3, #1
 80018ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	6978      	ldr	r0, [r7, #20]
 80018f2:	f7fe fc09 	bl	8000108 <__udivsi3>
 80018f6:	0003      	movs	r3, r0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	e015      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2238      	movs	r2, #56	; 0x38
 8001902:	4013      	ands	r3, r2
 8001904:	2b20      	cmp	r3, #32
 8001906:	d103      	bne.n	8001910 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	e00b      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2238      	movs	r2, #56	; 0x38
 8001916:	4013      	ands	r3, r2
 8001918:	2b18      	cmp	r3, #24
 800191a:	d103      	bne.n	8001924 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800191c:	23fa      	movs	r3, #250	; 0xfa
 800191e:	01db      	lsls	r3, r3, #7
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	e001      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001928:	693b      	ldr	r3, [r7, #16]
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b006      	add	sp, #24
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	40021000 	.word	0x40021000
 8001938:	00f42400 	.word	0x00f42400
 800193c:	007a1200 	.word	0x007a1200

08001940 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <HAL_RCC_GetHCLKFreq+0x10>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	0018      	movs	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	20000000 	.word	0x20000000

08001954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001958:	f7ff fff2 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 800195c:	0004      	movs	r4, r0
 800195e:	f7ff fb49 	bl	8000ff4 <LL_RCC_GetAPB1Prescaler>
 8001962:	0003      	movs	r3, r0
 8001964:	0b1a      	lsrs	r2, r3, #12
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	58d3      	ldr	r3, [r2, r3]
 800196c:	221f      	movs	r2, #31
 800196e:	4013      	ands	r3, r2
 8001970:	40dc      	lsrs	r4, r3
 8001972:	0023      	movs	r3, r4
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bdb0      	pop	{r4, r5, r7, pc}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	0800525c 	.word	0x0800525c

08001980 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_RCC_GetClockConfig+0x4c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2207      	movs	r2, #7
 8001996:	401a      	ands	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCC_GetClockConfig+0x4c>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	23f0      	movs	r3, #240	; 0xf0
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	401a      	ands	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_RCC_GetClockConfig+0x4c>)
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	23e0      	movs	r3, #224	; 0xe0
 80019b0:	01db      	lsls	r3, r3, #7
 80019b2:	401a      	ands	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetClockConfig+0x50>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2207      	movs	r2, #7
 80019be:	401a      	ands	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	601a      	str	r2, [r3, #0]
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b002      	add	sp, #8
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40022000 	.word	0x40022000

080019d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80019dc:	2313      	movs	r3, #19
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019e4:	2312      	movs	r3, #18
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	029b      	lsls	r3, r3, #10
 80019f4:	4013      	ands	r3, r2
 80019f6:	d100      	bne.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80019f8:	e0a3      	b.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2011      	movs	r0, #17
 80019fc:	183b      	adds	r3, r7, r0
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a02:	4b86      	ldr	r3, [pc, #536]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	055b      	lsls	r3, r3, #21
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d110      	bne.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b83      	ldr	r3, [pc, #524]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a12:	4b82      	ldr	r3, [pc, #520]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a1c:	4b7f      	ldr	r3, [pc, #508]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	055b      	lsls	r3, r3, #21
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2a:	183b      	adds	r3, r7, r0
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a30:	4b7b      	ldr	r3, [pc, #492]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b7a      	ldr	r3, [pc, #488]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	0049      	lsls	r1, r1, #1
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a3e:	f7ff f845 	bl	8000acc <HAL_GetTick>
 8001a42:	0003      	movs	r3, r0
 8001a44:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a46:	e00b      	b.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a48:	f7ff f840 	bl	8000acc <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d904      	bls.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001a56:	2313      	movs	r3, #19
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	701a      	strb	r2, [r3, #0]
        break;
 8001a5e:	e005      	b.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a60:	4b6f      	ldr	r3, [pc, #444]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d0ed      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001a6c:	2313      	movs	r3, #19
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d154      	bne.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a76:	4b69      	ldr	r3, [pc, #420]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a7a:	23c0      	movs	r3, #192	; 0xc0
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d019      	beq.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d014      	beq.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a92:	4b62      	ldr	r3, [pc, #392]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a9c:	4b5f      	ldr	r3, [pc, #380]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aa0:	4b5e      	ldr	r3, [pc, #376]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	0249      	lsls	r1, r1, #9
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001aaa:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aae:	4b5b      	ldr	r3, [pc, #364]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ab0:	495d      	ldr	r1, [pc, #372]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ab6:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d016      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f802 	bl	8000acc <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001acc:	e00c      	b.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7fe fffd 	bl	8000acc <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	4a54      	ldr	r2, [pc, #336]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d904      	bls.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001ade:	2313      	movs	r3, #19
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	701a      	strb	r2, [r3, #0]
            break;
 8001ae6:	e004      	b.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	2202      	movs	r2, #2
 8001aee:	4013      	ands	r3, r2
 8001af0:	d0ed      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001af2:	2313      	movs	r3, #19
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10a      	bne.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001afc:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	4a48      	ldr	r2, [pc, #288]	; (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b10:	e00c      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b12:	2312      	movs	r3, #18
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2213      	movs	r2, #19
 8001b18:	18ba      	adds	r2, r7, r2
 8001b1a:	7812      	ldrb	r2, [r2, #0]
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e005      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b20:	2312      	movs	r3, #18
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	2213      	movs	r2, #19
 8001b26:	18ba      	adds	r2, r7, r2
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b2c:	2311      	movs	r3, #17
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b3a:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b3c:	493c      	ldr	r1, [pc, #240]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d009      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b4c:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b50:	2203      	movs	r2, #3
 8001b52:	4393      	bics	r3, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2202      	movs	r2, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	d009      	beq.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	220c      	movs	r2, #12
 8001b70:	4393      	bics	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2220      	movs	r2, #32
 8001b84:	4013      	ands	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8c:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	01db      	lsls	r3, r3, #7
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d015      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	0899      	lsrs	r1, r3, #2
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	05db      	lsls	r3, r3, #23
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d106      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0249      	lsls	r1, r1, #9
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d016      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	01db      	lsls	r3, r3, #7
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	0249      	lsls	r1, r1, #9
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001c0e:	2312      	movs	r3, #18
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	781b      	ldrb	r3, [r3, #0]
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b006      	add	sp, #24
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40007000 	.word	0x40007000
 8001c24:	fffffcff 	.word	0xfffffcff
 8001c28:	fffeffff 	.word	0xfffeffff
 8001c2c:	00001388 	.word	0x00001388
 8001c30:	efffffff 	.word	0xefffffff
 8001c34:	ffffcfff 	.word	0xffffcfff
 8001c38:	ffff3fff 	.word	0xffff3fff

08001c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e04a      	b.n	8001ce4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	223d      	movs	r2, #61	; 0x3d
 8001c52:	5c9b      	ldrb	r3, [r3, r2]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d107      	bne.n	8001c6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	223c      	movs	r2, #60	; 0x3c
 8001c5e:	2100      	movs	r1, #0
 8001c60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 f841 	bl	8001cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	223d      	movs	r2, #61	; 0x3d
 8001c6e:	2102      	movs	r1, #2
 8001c70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	f000 f9e5 	bl	800204c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2248      	movs	r2, #72	; 0x48
 8001c86:	2101      	movs	r1, #1
 8001c88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	223e      	movs	r2, #62	; 0x3e
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	223f      	movs	r2, #63	; 0x3f
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2240      	movs	r2, #64	; 0x40
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	5499      	strb	r1, [r3, r2]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2241      	movs	r2, #65	; 0x41
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	5499      	strb	r1, [r3, r2]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2242      	movs	r2, #66	; 0x42
 8001cae:	2101      	movs	r1, #1
 8001cb0:	5499      	strb	r1, [r3, r2]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2243      	movs	r2, #67	; 0x43
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2244      	movs	r2, #68	; 0x44
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2245      	movs	r2, #69	; 0x45
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2246      	movs	r2, #70	; 0x46
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2247      	movs	r2, #71	; 0x47
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	223d      	movs	r2, #61	; 0x3d
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	223d      	movs	r2, #61	; 0x3d
 8001d08:	5c9b      	ldrb	r3, [r3, r2]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d001      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e03c      	b.n	8001d8e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	223d      	movs	r2, #61	; 0x3d
 8001d18:	2102      	movs	r1, #2
 8001d1a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2101      	movs	r1, #1
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_TIM_Base_Start_IT+0x4e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_TIM_Base_Start_IT+0xa0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d004      	beq.n	8001d4a <HAL_TIM_Base_Start_IT+0x4e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <HAL_TIM_Base_Start_IT+0xa4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d116      	bne.n	8001d78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <HAL_TIM_Base_Start_IT+0xa8>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b06      	cmp	r3, #6
 8001d5a:	d016      	beq.n	8001d8a <HAL_TIM_Base_Start_IT+0x8e>
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	025b      	lsls	r3, r3, #9
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d011      	beq.n	8001d8a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	e008      	b.n	8001d8a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2101      	movs	r1, #1
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	e000      	b.n	8001d8c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b004      	add	sp, #16
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40014000 	.word	0x40014000
 8001da4:	00010007 	.word	0x00010007

08001da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2202      	movs	r2, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d124      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d11d      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	4252      	negs	r2, r2
 8001dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2203      	movs	r2, #3
 8001de4:	4013      	ands	r3, r2
 8001de6:	d004      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 f916 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8001df0:	e007      	b.n	8001e02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f000 f909 	bl	800200c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 f915 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d125      	bne.n	8001e62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d11e      	bne.n	8001e62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2205      	movs	r2, #5
 8001e2a:	4252      	negs	r2, r2
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	23c0      	movs	r3, #192	; 0xc0
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 f8e9 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8001e4a:	e007      	b.n	8001e5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 f8dc 	bl	800200c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 f8e8 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d124      	bne.n	8001eba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2208      	movs	r2, #8
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d11d      	bne.n	8001eba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2209      	movs	r2, #9
 8001e84:	4252      	negs	r2, r2
 8001e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2203      	movs	r2, #3
 8001e96:	4013      	ands	r3, r2
 8001e98:	d004      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f000 f8bd 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8001ea2:	e007      	b.n	8001eb4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 f8b0 	bl	800200c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 f8bc 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b10      	cmp	r3, #16
 8001ec6:	d125      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2210      	movs	r2, #16
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	d11e      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2211      	movs	r2, #17
 8001edc:	4252      	negs	r2, r2
 8001ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69da      	ldr	r2, [r3, #28]
 8001eec:	23c0      	movs	r3, #192	; 0xc0
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d004      	beq.n	8001efe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 f890 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8001efc:	e007      	b.n	8001f0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f883 	bl	800200c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 f88f 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10f      	bne.n	8001f42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d108      	bne.n	8001f42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2202      	movs	r2, #2
 8001f36:	4252      	negs	r2, r2
 8001f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7fe fc31 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b80      	cmp	r3, #128	; 0x80
 8001f4e:	d10f      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b80      	cmp	r3, #128	; 0x80
 8001f5c:	d108      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2281      	movs	r2, #129	; 0x81
 8001f64:	4252      	negs	r2, r2
 8001f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 f8ec 	bl	8002148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d10e      	bne.n	8001fa2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2280      	movs	r2, #128	; 0x80
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b80      	cmp	r3, #128	; 0x80
 8001f90:	d107      	bne.n	8001fa2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_TIM_IRQHandler+0x260>)
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 f8db 	bl	8002158 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b40      	cmp	r3, #64	; 0x40
 8001fae:	d10f      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b40      	cmp	r3, #64	; 0x40
 8001fbc:	d108      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2241      	movs	r2, #65	; 0x41
 8001fc4:	4252      	negs	r2, r2
 8001fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 f836 	bl	800203c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d10f      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d108      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2221      	movs	r2, #33	; 0x21
 8001ff2:	4252      	negs	r2, r2
 8001ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f000 f89d 	bl	8002138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	fffffeff 	.word	0xfffffeff

0800200c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}

0800204c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a2f      	ldr	r2, [pc, #188]	; (800211c <TIM_Base_SetConfig+0xd0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <TIM_Base_SetConfig+0x20>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <TIM_Base_SetConfig+0xd4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d108      	bne.n	800207e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2270      	movs	r2, #112	; 0x70
 8002070:	4393      	bics	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <TIM_Base_SetConfig+0xd0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <TIM_Base_SetConfig+0x62>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <TIM_Base_SetConfig+0xd4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00f      	beq.n	80020ae <TIM_Base_SetConfig+0x62>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a24      	ldr	r2, [pc, #144]	; (8002124 <TIM_Base_SetConfig+0xd8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00b      	beq.n	80020ae <TIM_Base_SetConfig+0x62>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a23      	ldr	r2, [pc, #140]	; (8002128 <TIM_Base_SetConfig+0xdc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <TIM_Base_SetConfig+0x62>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a22      	ldr	r2, [pc, #136]	; (800212c <TIM_Base_SetConfig+0xe0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <TIM_Base_SetConfig+0x62>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a21      	ldr	r2, [pc, #132]	; (8002130 <TIM_Base_SetConfig+0xe4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d108      	bne.n	80020c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a20      	ldr	r2, [pc, #128]	; (8002134 <TIM_Base_SetConfig+0xe8>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	4393      	bics	r3, r2
 80020c6:	001a      	movs	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a0c      	ldr	r2, [pc, #48]	; (800211c <TIM_Base_SetConfig+0xd0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00b      	beq.n	8002106 <TIM_Base_SetConfig+0xba>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <TIM_Base_SetConfig+0xdc>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d007      	beq.n	8002106 <TIM_Base_SetConfig+0xba>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a0c      	ldr	r2, [pc, #48]	; (800212c <TIM_Base_SetConfig+0xe0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d003      	beq.n	8002106 <TIM_Base_SetConfig+0xba>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <TIM_Base_SetConfig+0xe4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d103      	bne.n	800210e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	615a      	str	r2, [r3, #20]
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b004      	add	sp, #16
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40012c00 	.word	0x40012c00
 8002120:	40000400 	.word	0x40000400
 8002124:	40002000 	.word	0x40002000
 8002128:	40014000 	.word	0x40014000
 800212c:	40014400 	.word	0x40014400
 8002130:	40014800 	.word	0x40014800
 8002134:	fffffcff 	.word	0xfffffcff

08002138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b002      	add	sp, #8
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e046      	b.n	8002208 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2288      	movs	r2, #136	; 0x88
 800217e:	589b      	ldr	r3, [r3, r2]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d107      	bne.n	8002194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2284      	movs	r2, #132	; 0x84
 8002188:	2100      	movs	r1, #0
 800218a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	0018      	movs	r0, r3
 8002190:	f7fe fb44 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2288      	movs	r2, #136	; 0x88
 8002198:	2124      	movs	r1, #36	; 0x24
 800219a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2101      	movs	r1, #1
 80021a8:	438a      	bics	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 f8cc 	bl	800234c <UART_SetConfig>
 80021b4:	0003      	movs	r3, r0
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e024      	b.n	8002208 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 fa63 	bl	8002694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	490d      	ldr	r1, [pc, #52]	; (8002210 <HAL_UART_Init+0xa8>)
 80021da:	400a      	ands	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	212a      	movs	r1, #42	; 0x2a
 80021ea:	438a      	bics	r2, r1
 80021ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 fafb 	bl	80027fc <UART_CheckIdleState>
 8002206:	0003      	movs	r3, r0
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}
 8002210:	ffffb7ff 	.word	0xffffb7ff

08002214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	1dbb      	adds	r3, r7, #6
 8002222:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2288      	movs	r2, #136	; 0x88
 8002228:	589b      	ldr	r3, [r3, r2]
 800222a:	2b20      	cmp	r3, #32
 800222c:	d000      	beq.n	8002230 <HAL_UART_Transmit+0x1c>
 800222e:	e088      	b.n	8002342 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_UART_Transmit+0x2a>
 8002236:	1dbb      	adds	r3, r7, #6
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e080      	b.n	8002344 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	015b      	lsls	r3, r3, #5
 800224a:	429a      	cmp	r2, r3
 800224c:	d109      	bne.n	8002262 <HAL_UART_Transmit+0x4e>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2201      	movs	r2, #1
 800225a:	4013      	ands	r3, r2
 800225c:	d001      	beq.n	8002262 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e070      	b.n	8002344 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2290      	movs	r2, #144	; 0x90
 8002266:	2100      	movs	r1, #0
 8002268:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2288      	movs	r2, #136	; 0x88
 800226e:	2121      	movs	r1, #33	; 0x21
 8002270:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002272:	f7fe fc2b 	bl	8000acc <HAL_GetTick>
 8002276:	0003      	movs	r3, r0
 8002278:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1dba      	adds	r2, r7, #6
 800227e:	2154      	movs	r1, #84	; 0x54
 8002280:	8812      	ldrh	r2, [r2, #0]
 8002282:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1dba      	adds	r2, r7, #6
 8002288:	2156      	movs	r1, #86	; 0x56
 800228a:	8812      	ldrh	r2, [r2, #0]
 800228c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	015b      	lsls	r3, r3, #5
 8002296:	429a      	cmp	r2, r3
 8002298:	d108      	bne.n	80022ac <HAL_UART_Transmit+0x98>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d104      	bne.n	80022ac <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	e003      	b.n	80022b4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022b4:	e02c      	b.n	8002310 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	0013      	movs	r3, r2
 80022c0:	2200      	movs	r2, #0
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	f000 fae8 	bl	8002898 <UART_WaitOnFlagUntilTimeout>
 80022c8:	1e03      	subs	r3, r0, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e039      	b.n	8002344 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10b      	bne.n	80022ee <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	001a      	movs	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	05d2      	lsls	r2, r2, #23
 80022e2:	0dd2      	lsrs	r2, r2, #23
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	3302      	adds	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	e007      	b.n	80022fe <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3301      	adds	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2256      	movs	r2, #86	; 0x56
 8002302:	5a9b      	ldrh	r3, [r3, r2]
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b299      	uxth	r1, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2256      	movs	r2, #86	; 0x56
 800230e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2256      	movs	r2, #86	; 0x56
 8002314:	5a9b      	ldrh	r3, [r3, r2]
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1cc      	bne.n	80022b6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	0013      	movs	r3, r2
 8002326:	2200      	movs	r2, #0
 8002328:	2140      	movs	r1, #64	; 0x40
 800232a:	f000 fab5 	bl	8002898 <UART_WaitOnFlagUntilTimeout>
 800232e:	1e03      	subs	r3, r0, #0
 8002330:	d001      	beq.n	8002336 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e006      	b.n	8002344 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2288      	movs	r2, #136	; 0x88
 800233a:	2120      	movs	r1, #32
 800233c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e000      	b.n	8002344 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002342:	2302      	movs	r3, #2
  }
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b008      	add	sp, #32
 800234a:	bd80      	pop	{r7, pc}

0800234c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002354:	231a      	movs	r3, #26
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	4313      	orrs	r3, r2
 8002372:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4abc      	ldr	r2, [pc, #752]	; (800266c <UART_SetConfig+0x320>)
 800237c:	4013      	ands	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	430a      	orrs	r2, r1
 8002388:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4ab7      	ldr	r2, [pc, #732]	; (8002670 <UART_SetConfig+0x324>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4aae      	ldr	r2, [pc, #696]	; (8002674 <UART_SetConfig+0x328>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	220f      	movs	r2, #15
 80023d0:	4393      	bics	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4aa4      	ldr	r2, [pc, #656]	; (8002678 <UART_SetConfig+0x32c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d127      	bne.n	800243a <UART_SetConfig+0xee>
 80023ea:	4ba4      	ldr	r3, [pc, #656]	; (800267c <UART_SetConfig+0x330>)
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	2203      	movs	r2, #3
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d017      	beq.n	8002426 <UART_SetConfig+0xda>
 80023f6:	d81b      	bhi.n	8002430 <UART_SetConfig+0xe4>
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d00a      	beq.n	8002412 <UART_SetConfig+0xc6>
 80023fc:	d818      	bhi.n	8002430 <UART_SetConfig+0xe4>
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <UART_SetConfig+0xbc>
 8002402:	2b01      	cmp	r3, #1
 8002404:	d00a      	beq.n	800241c <UART_SetConfig+0xd0>
 8002406:	e013      	b.n	8002430 <UART_SetConfig+0xe4>
 8002408:	231b      	movs	r3, #27
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e058      	b.n	80024c4 <UART_SetConfig+0x178>
 8002412:	231b      	movs	r3, #27
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2202      	movs	r2, #2
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e053      	b.n	80024c4 <UART_SetConfig+0x178>
 800241c:	231b      	movs	r3, #27
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2204      	movs	r2, #4
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e04e      	b.n	80024c4 <UART_SetConfig+0x178>
 8002426:	231b      	movs	r3, #27
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	2208      	movs	r2, #8
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e049      	b.n	80024c4 <UART_SetConfig+0x178>
 8002430:	231b      	movs	r3, #27
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2210      	movs	r2, #16
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e044      	b.n	80024c4 <UART_SetConfig+0x178>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a90      	ldr	r2, [pc, #576]	; (8002680 <UART_SetConfig+0x334>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d127      	bne.n	8002494 <UART_SetConfig+0x148>
 8002444:	4b8d      	ldr	r3, [pc, #564]	; (800267c <UART_SetConfig+0x330>)
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	220c      	movs	r2, #12
 800244a:	4013      	ands	r3, r2
 800244c:	2b0c      	cmp	r3, #12
 800244e:	d017      	beq.n	8002480 <UART_SetConfig+0x134>
 8002450:	d81b      	bhi.n	800248a <UART_SetConfig+0x13e>
 8002452:	2b08      	cmp	r3, #8
 8002454:	d00a      	beq.n	800246c <UART_SetConfig+0x120>
 8002456:	d818      	bhi.n	800248a <UART_SetConfig+0x13e>
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <UART_SetConfig+0x116>
 800245c:	2b04      	cmp	r3, #4
 800245e:	d00a      	beq.n	8002476 <UART_SetConfig+0x12a>
 8002460:	e013      	b.n	800248a <UART_SetConfig+0x13e>
 8002462:	231b      	movs	r3, #27
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e02b      	b.n	80024c4 <UART_SetConfig+0x178>
 800246c:	231b      	movs	r3, #27
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
 8002474:	e026      	b.n	80024c4 <UART_SetConfig+0x178>
 8002476:	231b      	movs	r3, #27
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2204      	movs	r2, #4
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	e021      	b.n	80024c4 <UART_SetConfig+0x178>
 8002480:	231b      	movs	r3, #27
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	2208      	movs	r2, #8
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	e01c      	b.n	80024c4 <UART_SetConfig+0x178>
 800248a:	231b      	movs	r3, #27
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	2210      	movs	r2, #16
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e017      	b.n	80024c4 <UART_SetConfig+0x178>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a7a      	ldr	r2, [pc, #488]	; (8002684 <UART_SetConfig+0x338>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d104      	bne.n	80024a8 <UART_SetConfig+0x15c>
 800249e:	231b      	movs	r3, #27
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e00d      	b.n	80024c4 <UART_SetConfig+0x178>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a76      	ldr	r2, [pc, #472]	; (8002688 <UART_SetConfig+0x33c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d104      	bne.n	80024bc <UART_SetConfig+0x170>
 80024b2:	231b      	movs	r3, #27
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e003      	b.n	80024c4 <UART_SetConfig+0x178>
 80024bc:	231b      	movs	r3, #27
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2210      	movs	r2, #16
 80024c2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69da      	ldr	r2, [r3, #28]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d000      	beq.n	80024d2 <UART_SetConfig+0x186>
 80024d0:	e065      	b.n	800259e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80024d2:	231b      	movs	r3, #27
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d015      	beq.n	8002508 <UART_SetConfig+0x1bc>
 80024dc:	dc18      	bgt.n	8002510 <UART_SetConfig+0x1c4>
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d00d      	beq.n	80024fe <UART_SetConfig+0x1b2>
 80024e2:	dc15      	bgt.n	8002510 <UART_SetConfig+0x1c4>
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <UART_SetConfig+0x1a2>
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d005      	beq.n	80024f8 <UART_SetConfig+0x1ac>
 80024ec:	e010      	b.n	8002510 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024ee:	f7ff fa31 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 80024f2:	0003      	movs	r3, r0
 80024f4:	617b      	str	r3, [r7, #20]
        break;
 80024f6:	e012      	b.n	800251e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024f8:	4b64      	ldr	r3, [pc, #400]	; (800268c <UART_SetConfig+0x340>)
 80024fa:	617b      	str	r3, [r7, #20]
        break;
 80024fc:	e00f      	b.n	800251e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024fe:	f7ff f99d 	bl	800183c <HAL_RCC_GetSysClockFreq>
 8002502:	0003      	movs	r3, r0
 8002504:	617b      	str	r3, [r7, #20]
        break;
 8002506:	e00a      	b.n	800251e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	617b      	str	r3, [r7, #20]
        break;
 800250e:	e006      	b.n	800251e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002514:	231a      	movs	r3, #26
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
        break;
 800251c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d100      	bne.n	8002526 <UART_SetConfig+0x1da>
 8002524:	e08d      	b.n	8002642 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800252a:	4b59      	ldr	r3, [pc, #356]	; (8002690 <UART_SetConfig+0x344>)
 800252c:	0052      	lsls	r2, r2, #1
 800252e:	5ad3      	ldrh	r3, [r2, r3]
 8002530:	0019      	movs	r1, r3
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7fd fde8 	bl	8000108 <__udivsi3>
 8002538:	0003      	movs	r3, r0
 800253a:	005a      	lsls	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	18d2      	adds	r2, r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	0019      	movs	r1, r3
 800254a:	0010      	movs	r0, r2
 800254c:	f7fd fddc 	bl	8000108 <__udivsi3>
 8002550:	0003      	movs	r3, r0
 8002552:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2b0f      	cmp	r3, #15
 8002558:	d91c      	bls.n	8002594 <UART_SetConfig+0x248>
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	025b      	lsls	r3, r3, #9
 8002560:	429a      	cmp	r2, r3
 8002562:	d217      	bcs.n	8002594 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	b29a      	uxth	r2, r3
 8002568:	200e      	movs	r0, #14
 800256a:	183b      	adds	r3, r7, r0
 800256c:	210f      	movs	r1, #15
 800256e:	438a      	bics	r2, r1
 8002570:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	b29b      	uxth	r3, r3
 8002578:	2207      	movs	r2, #7
 800257a:	4013      	ands	r3, r2
 800257c:	b299      	uxth	r1, r3
 800257e:	183b      	adds	r3, r7, r0
 8002580:	183a      	adds	r2, r7, r0
 8002582:	8812      	ldrh	r2, [r2, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	183a      	adds	r2, r7, r0
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	e056      	b.n	8002642 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002594:	231a      	movs	r3, #26
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	e051      	b.n	8002642 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800259e:	231b      	movs	r3, #27
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d015      	beq.n	80025d4 <UART_SetConfig+0x288>
 80025a8:	dc18      	bgt.n	80025dc <UART_SetConfig+0x290>
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d00d      	beq.n	80025ca <UART_SetConfig+0x27e>
 80025ae:	dc15      	bgt.n	80025dc <UART_SetConfig+0x290>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <UART_SetConfig+0x26e>
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d005      	beq.n	80025c4 <UART_SetConfig+0x278>
 80025b8:	e010      	b.n	80025dc <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025ba:	f7ff f9cb 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 80025be:	0003      	movs	r3, r0
 80025c0:	617b      	str	r3, [r7, #20]
        break;
 80025c2:	e012      	b.n	80025ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025c4:	4b31      	ldr	r3, [pc, #196]	; (800268c <UART_SetConfig+0x340>)
 80025c6:	617b      	str	r3, [r7, #20]
        break;
 80025c8:	e00f      	b.n	80025ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025ca:	f7ff f937 	bl	800183c <HAL_RCC_GetSysClockFreq>
 80025ce:	0003      	movs	r3, r0
 80025d0:	617b      	str	r3, [r7, #20]
        break;
 80025d2:	e00a      	b.n	80025ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	617b      	str	r3, [r7, #20]
        break;
 80025da:	e006      	b.n	80025ea <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025e0:	231a      	movs	r3, #26
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
        break;
 80025e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d028      	beq.n	8002642 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <UART_SetConfig+0x344>)
 80025f6:	0052      	lsls	r2, r2, #1
 80025f8:	5ad3      	ldrh	r3, [r2, r3]
 80025fa:	0019      	movs	r1, r3
 80025fc:	6978      	ldr	r0, [r7, #20]
 80025fe:	f7fd fd83 	bl	8000108 <__udivsi3>
 8002602:	0003      	movs	r3, r0
 8002604:	001a      	movs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	18d2      	adds	r2, r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0019      	movs	r1, r3
 8002614:	0010      	movs	r0, r2
 8002616:	f7fd fd77 	bl	8000108 <__udivsi3>
 800261a:	0003      	movs	r3, r0
 800261c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d90a      	bls.n	800263a <UART_SetConfig+0x2ee>
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	025b      	lsls	r3, r3, #9
 800262a:	429a      	cmp	r2, r3
 800262c:	d205      	bcs.n	800263a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	b29a      	uxth	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60da      	str	r2, [r3, #12]
 8002638:	e003      	b.n	8002642 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800263a:	231a      	movs	r3, #26
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	226a      	movs	r2, #106	; 0x6a
 8002646:	2101      	movs	r1, #1
 8002648:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2268      	movs	r2, #104	; 0x68
 800264e:	2101      	movs	r1, #1
 8002650:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800265e:	231a      	movs	r3, #26
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	781b      	ldrb	r3, [r3, #0]
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	b008      	add	sp, #32
 800266a:	bd80      	pop	{r7, pc}
 800266c:	cfff69f3 	.word	0xcfff69f3
 8002670:	ffffcfff 	.word	0xffffcfff
 8002674:	11fff4ff 	.word	0x11fff4ff
 8002678:	40013800 	.word	0x40013800
 800267c:	40021000 	.word	0x40021000
 8002680:	40004400 	.word	0x40004400
 8002684:	40004800 	.word	0x40004800
 8002688:	40004c00 	.word	0x40004c00
 800268c:	00f42400 	.word	0x00f42400
 8002690:	0800527c 	.word	0x0800527c

08002694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	2201      	movs	r2, #1
 80026a2:	4013      	ands	r3, r2
 80026a4:	d00b      	beq.n	80026be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a4a      	ldr	r2, [pc, #296]	; (80027d8 <UART_AdvFeatureConfig+0x144>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	2202      	movs	r2, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	d00b      	beq.n	80026e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4a43      	ldr	r2, [pc, #268]	; (80027dc <UART_AdvFeatureConfig+0x148>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	2204      	movs	r2, #4
 80026e6:	4013      	ands	r3, r2
 80026e8:	d00b      	beq.n	8002702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a3b      	ldr	r2, [pc, #236]	; (80027e0 <UART_AdvFeatureConfig+0x14c>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	2208      	movs	r2, #8
 8002708:	4013      	ands	r3, r2
 800270a:	d00b      	beq.n	8002724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a34      	ldr	r2, [pc, #208]	; (80027e4 <UART_AdvFeatureConfig+0x150>)
 8002714:	4013      	ands	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	2210      	movs	r2, #16
 800272a:	4013      	ands	r3, r2
 800272c:	d00b      	beq.n	8002746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a2c      	ldr	r2, [pc, #176]	; (80027e8 <UART_AdvFeatureConfig+0x154>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	2220      	movs	r2, #32
 800274c:	4013      	ands	r3, r2
 800274e:	d00b      	beq.n	8002768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4a25      	ldr	r2, [pc, #148]	; (80027ec <UART_AdvFeatureConfig+0x158>)
 8002758:	4013      	ands	r3, r2
 800275a:	0019      	movs	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	2240      	movs	r2, #64	; 0x40
 800276e:	4013      	ands	r3, r2
 8002770:	d01d      	beq.n	80027ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <UART_AdvFeatureConfig+0x15c>)
 800277a:	4013      	ands	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	035b      	lsls	r3, r3, #13
 8002792:	429a      	cmp	r2, r3
 8002794:	d10b      	bne.n	80027ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <UART_AdvFeatureConfig+0x160>)
 800279e:	4013      	ands	r3, r2
 80027a0:	0019      	movs	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	4013      	ands	r3, r2
 80027b6:	d00b      	beq.n	80027d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <UART_AdvFeatureConfig+0x164>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	605a      	str	r2, [r3, #4]
  }
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	fffdffff 	.word	0xfffdffff
 80027dc:	fffeffff 	.word	0xfffeffff
 80027e0:	fffbffff 	.word	0xfffbffff
 80027e4:	ffff7fff 	.word	0xffff7fff
 80027e8:	ffffefff 	.word	0xffffefff
 80027ec:	ffffdfff 	.word	0xffffdfff
 80027f0:	ffefffff 	.word	0xffefffff
 80027f4:	ff9fffff 	.word	0xff9fffff
 80027f8:	fff7ffff 	.word	0xfff7ffff

080027fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af02      	add	r7, sp, #8
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2290      	movs	r2, #144	; 0x90
 8002808:	2100      	movs	r1, #0
 800280a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800280c:	f7fe f95e 	bl	8000acc <HAL_GetTick>
 8002810:	0003      	movs	r3, r0
 8002812:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2208      	movs	r2, #8
 800281c:	4013      	ands	r3, r2
 800281e:	2b08      	cmp	r3, #8
 8002820:	d10c      	bne.n	800283c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	0391      	lsls	r1, r2, #14
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <UART_CheckIdleState+0x98>)
 800282c:	9200      	str	r2, [sp, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	f000 f832 	bl	8002898 <UART_WaitOnFlagUntilTimeout>
 8002834:	1e03      	subs	r3, r0, #0
 8002836:	d001      	beq.n	800283c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e026      	b.n	800288a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2204      	movs	r2, #4
 8002844:	4013      	ands	r3, r2
 8002846:	2b04      	cmp	r3, #4
 8002848:	d10c      	bne.n	8002864 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	03d1      	lsls	r1, r2, #15
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4a10      	ldr	r2, [pc, #64]	; (8002894 <UART_CheckIdleState+0x98>)
 8002854:	9200      	str	r2, [sp, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	f000 f81e 	bl	8002898 <UART_WaitOnFlagUntilTimeout>
 800285c:	1e03      	subs	r3, r0, #0
 800285e:	d001      	beq.n	8002864 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e012      	b.n	800288a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2288      	movs	r2, #136	; 0x88
 8002868:	2120      	movs	r1, #32
 800286a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	228c      	movs	r2, #140	; 0x8c
 8002870:	2120      	movs	r1, #32
 8002872:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2284      	movs	r2, #132	; 0x84
 8002884:	2100      	movs	r1, #0
 8002886:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b004      	add	sp, #16
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	01ffffff 	.word	0x01ffffff

08002898 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b094      	sub	sp, #80	; 0x50
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	1dfb      	adds	r3, r7, #7
 80028a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a8:	e0a7      	b.n	80029fa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ac:	3301      	adds	r3, #1
 80028ae:	d100      	bne.n	80028b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80028b0:	e0a3      	b.n	80029fa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b2:	f7fe f90b 	bl	8000acc <HAL_GetTick>
 80028b6:	0002      	movs	r2, r0
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028be:	429a      	cmp	r2, r3
 80028c0:	d302      	bcc.n	80028c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80028c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d13f      	bne.n	8002948 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c8:	f3ef 8310 	mrs	r3, PRIMASK
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80028d0:	647b      	str	r3, [r7, #68]	; 0x44
 80028d2:	2301      	movs	r3, #1
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	f383 8810 	msr	PRIMASK, r3
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	494e      	ldr	r1, [pc, #312]	; (8002a24 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80028ea:	400a      	ands	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	f383 8810 	msr	PRIMASK, r3
}
 80028f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028fa:	f3ef 8310 	mrs	r3, PRIMASK
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002902:	643b      	str	r3, [r7, #64]	; 0x40
 8002904:	2301      	movs	r3, #1
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	f383 8810 	msr	PRIMASK, r3
}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2101      	movs	r1, #1
 800291c:	438a      	bics	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002926:	f383 8810 	msr	PRIMASK, r3
}
 800292a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2288      	movs	r2, #136	; 0x88
 8002930:	2120      	movs	r1, #32
 8002932:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	228c      	movs	r2, #140	; 0x8c
 8002938:	2120      	movs	r1, #32
 800293a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2284      	movs	r2, #132	; 0x84
 8002940:	2100      	movs	r1, #0
 8002942:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e069      	b.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	d052      	beq.n	80029fa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	401a      	ands	r2, r3
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	429a      	cmp	r2, r3
 8002966:	d148      	bne.n	80029fa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002972:	f3ef 8310 	mrs	r3, PRIMASK
 8002976:	613b      	str	r3, [r7, #16]
  return(result);
 8002978:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800297a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800297c:	2301      	movs	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f383 8810 	msr	PRIMASK, r3
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4924      	ldr	r1, [pc, #144]	; (8002a24 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002994:	400a      	ands	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f383 8810 	msr	PRIMASK, r3
}
 80029a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a4:	f3ef 8310 	mrs	r3, PRIMASK
 80029a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80029aa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ae:	2301      	movs	r3, #1
 80029b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	f383 8810 	msr	PRIMASK, r3
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2101      	movs	r1, #1
 80029c6:	438a      	bics	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	f383 8810 	msr	PRIMASK, r3
}
 80029d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2288      	movs	r2, #136	; 0x88
 80029da:	2120      	movs	r1, #32
 80029dc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	228c      	movs	r2, #140	; 0x8c
 80029e2:	2120      	movs	r1, #32
 80029e4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2290      	movs	r2, #144	; 0x90
 80029ea:	2120      	movs	r1, #32
 80029ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2284      	movs	r2, #132	; 0x84
 80029f2:	2100      	movs	r1, #0
 80029f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e010      	b.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	4013      	ands	r3, r2
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	425a      	negs	r2, r3
 8002a0a:	4153      	adcs	r3, r2
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	001a      	movs	r2, r3
 8002a10:	1dfb      	adds	r3, r7, #7
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d100      	bne.n	8002a1a <UART_WaitOnFlagUntilTimeout+0x182>
 8002a18:	e747      	b.n	80028aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b014      	add	sp, #80	; 0x50
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	fffffe5f 	.word	0xfffffe5f

08002a28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2284      	movs	r2, #132	; 0x84
 8002a34:	5c9b      	ldrb	r3, [r3, r2]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_UARTEx_DisableFifoMode+0x16>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e027      	b.n	8002a8e <HAL_UARTEx_DisableFifoMode+0x66>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2284      	movs	r2, #132	; 0x84
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2288      	movs	r2, #136	; 0x88
 8002a4a:	2124      	movs	r1, #36	; 0x24
 8002a4c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	438a      	bics	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2288      	movs	r2, #136	; 0x88
 8002a80:	2120      	movs	r1, #32
 8002a82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2284      	movs	r2, #132	; 0x84
 8002a88:	2100      	movs	r1, #0
 8002a8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b004      	add	sp, #16
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	dfffffff 	.word	0xdfffffff

08002a9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2284      	movs	r2, #132	; 0x84
 8002aaa:	5c9b      	ldrb	r3, [r3, r2]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e02e      	b.n	8002b12 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2284      	movs	r2, #132	; 0x84
 8002ab8:	2101      	movs	r1, #1
 8002aba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2288      	movs	r2, #136	; 0x88
 8002ac0:	2124      	movs	r1, #36	; 0x24
 8002ac2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	438a      	bics	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	08d9      	lsrs	r1, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f854 	bl	8002ba0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2288      	movs	r2, #136	; 0x88
 8002b04:	2120      	movs	r1, #32
 8002b06:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2284      	movs	r2, #132	; 0x84
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b004      	add	sp, #16
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2284      	movs	r2, #132	; 0x84
 8002b2a:	5c9b      	ldrb	r3, [r3, r2]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e02f      	b.n	8002b94 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2284      	movs	r2, #132	; 0x84
 8002b38:	2101      	movs	r1, #1
 8002b3a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2288      	movs	r2, #136	; 0x88
 8002b40:	2124      	movs	r1, #36	; 0x24
 8002b42:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2101      	movs	r1, #1
 8002b58:	438a      	bics	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f813 	bl	8002ba0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2288      	movs	r2, #136	; 0x88
 8002b86:	2120      	movs	r1, #32
 8002b88:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2284      	movs	r2, #132	; 0x84
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b004      	add	sp, #16
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	f1ffffff 	.word	0xf1ffffff

08002ba0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d108      	bne.n	8002bc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	226a      	movs	r2, #106	; 0x6a
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2268      	movs	r2, #104	; 0x68
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002bc0:	e043      	b.n	8002c4a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002bc2:	260f      	movs	r6, #15
 8002bc4:	19bb      	adds	r3, r7, r6
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002bca:	200e      	movs	r0, #14
 8002bcc:	183b      	adds	r3, r7, r0
 8002bce:	2208      	movs	r2, #8
 8002bd0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	0e5b      	lsrs	r3, r3, #25
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	240d      	movs	r4, #13
 8002bde:	193b      	adds	r3, r7, r4
 8002be0:	2107      	movs	r1, #7
 8002be2:	400a      	ands	r2, r1
 8002be4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	0f5b      	lsrs	r3, r3, #29
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	250c      	movs	r5, #12
 8002bf2:	197b      	adds	r3, r7, r5
 8002bf4:	2107      	movs	r1, #7
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002bfa:	183b      	adds	r3, r7, r0
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	197a      	adds	r2, r7, r5
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	4914      	ldr	r1, [pc, #80]	; (8002c54 <UARTEx_SetNbDataToProcess+0xb4>)
 8002c04:	5c8a      	ldrb	r2, [r1, r2]
 8002c06:	435a      	muls	r2, r3
 8002c08:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002c0a:	197b      	adds	r3, r7, r5
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <UARTEx_SetNbDataToProcess+0xb8>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c12:	0019      	movs	r1, r3
 8002c14:	f7fd fb02 	bl	800021c <__divsi3>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	b299      	uxth	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	226a      	movs	r2, #106	; 0x6a
 8002c20:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c22:	19bb      	adds	r3, r7, r6
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	193a      	adds	r2, r7, r4
 8002c28:	7812      	ldrb	r2, [r2, #0]
 8002c2a:	490a      	ldr	r1, [pc, #40]	; (8002c54 <UARTEx_SetNbDataToProcess+0xb4>)
 8002c2c:	5c8a      	ldrb	r2, [r1, r2]
 8002c2e:	435a      	muls	r2, r3
 8002c30:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <UARTEx_SetNbDataToProcess+0xb8>)
 8002c38:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	f7fd faee 	bl	800021c <__divsi3>
 8002c40:	0003      	movs	r3, r0
 8002c42:	b299      	uxth	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2268      	movs	r2, #104	; 0x68
 8002c48:	5299      	strh	r1, [r3, r2]
}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b005      	add	sp, #20
 8002c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	08005294 	.word	0x08005294
 8002c58:	0800529c 	.word	0x0800529c

08002c5c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3308      	adds	r3, #8
 8002c68:	001a      	movs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	4252      	negs	r2, r2
 8002c74:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3308      	adds	r3, #8
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3308      	adds	r3, #8
 8002c84:	001a      	movs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}

08002cae <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	d103      	bne.n	8002ccc <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e00c      	b.n	8002ce6 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3308      	adds	r3, #8
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e002      	b.n	8002cda <vListInsert+0x2c>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d2f6      	bcs.n	8002cd4 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b004      	add	sp, #16
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6892      	ldr	r2, [r2, #8]
 8002d30:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6852      	ldr	r2, [r2, #4]
 8002d3a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d103      	bne.n	8002d4e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	1e5a      	subs	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002d6a:	b5b0      	push	{r4, r5, r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002d74:	2301      	movs	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <xQueueGenericReset+0x1c>
 8002d82:	b672      	cpsid	i
 8002d84:	e7fe      	b.n	8002d84 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d100      	bne.n	8002d8e <xQueueGenericReset+0x24>
 8002d8c:	e06a      	b.n	8002e64 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d066      	beq.n	8002e64 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	2400      	movs	r4, #0
 8002da0:	0c15      	lsrs	r5, r2, #16
 8002da2:	0c19      	lsrs	r1, r3, #16
 8002da4:	b2a8      	uxth	r0, r5
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d104      	bne.n	8002db4 <xQueueGenericReset+0x4a>
 8002daa:	b288      	uxth	r0, r1
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d013      	beq.n	8002dd8 <xQueueGenericReset+0x6e>
 8002db0:	1c10      	adds	r0, r2, #0
 8002db2:	e004      	b.n	8002dbe <xQueueGenericReset+0x54>
 8002db4:	b289      	uxth	r1, r1
 8002db6:	2900      	cmp	r1, #0
 8002db8:	d10d      	bne.n	8002dd6 <xQueueGenericReset+0x6c>
 8002dba:	1c29      	adds	r1, r5, #0
 8002dbc:	1c18      	adds	r0, r3, #0
 8002dbe:	b292      	uxth	r2, r2
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	435a      	muls	r2, r3
 8002dc4:	b283      	uxth	r3, r0
 8002dc6:	b289      	uxth	r1, r1
 8002dc8:	434b      	muls	r3, r1
 8002dca:	0c12      	lsrs	r2, r2, #16
 8002dcc:	189b      	adds	r3, r3, r2
 8002dce:	141b      	asrs	r3, r3, #16
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d000      	beq.n	8002dd8 <xQueueGenericReset+0x6e>
 8002dd6:	2401      	movs	r4, #1
 8002dd8:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8002dda:	d143      	bne.n	8002e64 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8002ddc:	f001 ff68 	bl	8004cb0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	434b      	muls	r3, r1
 8002dee:	18d2      	adds	r2, r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2200      	movs	r2, #0
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	1e59      	subs	r1, r3, #1
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	434b      	muls	r3, r1
 8002e12:	18d2      	adds	r2, r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2244      	movs	r2, #68	; 0x44
 8002e1c:	21ff      	movs	r1, #255	; 0xff
 8002e1e:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2245      	movs	r2, #69	; 0x45
 8002e24:	21ff      	movs	r1, #255	; 0xff
 8002e26:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d013      	beq.n	8002e5e <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3310      	adds	r3, #16
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f001 f89a 	bl	8003f74 <xTaskRemoveFromEventList>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d00c      	beq.n	8002e5e <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e44:	f001 ff24 	bl	8004c90 <vPortYield>
 8002e48:	e009      	b.n	8002e5e <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3310      	adds	r3, #16
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7ff ff04 	bl	8002c5c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3324      	adds	r3, #36	; 0x24
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7ff feff 	bl	8002c5c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002e5e:	f001 ff39 	bl	8004cd4 <vPortExitCritical>
 8002e62:	e001      	b.n	8002e68 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <xQueueGenericReset+0x108>
 8002e6e:	b672      	cpsid	i
 8002e70:	e7fe      	b.n	8002e70 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002e72:	68fb      	ldr	r3, [r7, #12]
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b004      	add	sp, #16
 8002e7a:	bdb0      	pop	{r4, r5, r7, pc}

08002e7c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7e:	b08b      	sub	sp, #44	; 0x2c
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	1dfb      	adds	r3, r7, #7
 8002e88:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d047      	beq.n	8002f24 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002e94:	2000      	movs	r0, #0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	0c19      	lsrs	r1, r3, #16
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1c1e      	adds	r6, r3, #0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	1c15      	adds	r5, r2, #0
 8002ea6:	b28a      	uxth	r2, r1
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d105      	bne.n	8002eb8 <xQueueGenericCreate+0x3c>
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	2a00      	cmp	r2, #0
 8002eb0:	d013      	beq.n	8002eda <xQueueGenericCreate+0x5e>
 8002eb2:	1c19      	adds	r1, r3, #0
 8002eb4:	1c34      	adds	r4, r6, #0
 8002eb6:	e003      	b.n	8002ec0 <xQueueGenericCreate+0x44>
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10c      	bne.n	8002ed8 <xQueueGenericCreate+0x5c>
 8002ebe:	1c2c      	adds	r4, r5, #0
 8002ec0:	b2b3      	uxth	r3, r6
 8002ec2:	b2aa      	uxth	r2, r5
 8002ec4:	435a      	muls	r2, r3
 8002ec6:	b2a3      	uxth	r3, r4
 8002ec8:	b289      	uxth	r1, r1
 8002eca:	434b      	muls	r3, r1
 8002ecc:	0c12      	lsrs	r2, r2, #16
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	141b      	asrs	r3, r3, #16
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d000      	beq.n	8002eda <xQueueGenericCreate+0x5e>
 8002ed8:	2001      	movs	r0, #1
 8002eda:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002edc:	d122      	bne.n	8002f24 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002ee4:	3351      	adds	r3, #81	; 0x51
 8002ee6:	d81d      	bhi.n	8002f24 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4353      	muls	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	3350      	adds	r3, #80	; 0x50
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f001 ff73 	bl	8004de0 <pvPortMalloc>
 8002efa:	0003      	movs	r3, r0
 8002efc:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d014      	beq.n	8002f2e <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3350      	adds	r3, #80	; 0x50
 8002f0c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f0e:	1dfb      	adds	r3, r7, #7
 8002f10:	781c      	ldrb	r4, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	0023      	movs	r3, r4
 8002f1e:	f000 f80b 	bl	8002f38 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002f22:	e004      	b.n	8002f2e <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <xQueueGenericCreate+0xb2>
 8002f2a:	b672      	cpsid	i
 8002f2c:	e7fe      	b.n	8002f2c <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
    }
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b009      	add	sp, #36	; 0x24
 8002f36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f38 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	001a      	movs	r2, r3
 8002f46:	1cfb      	adds	r3, r7, #3
 8002f48:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d103      	bne.n	8002f58 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e002      	b.n	8002f5e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7ff fefb 	bl	8002d6a <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1cfa      	adds	r2, r7, #3
 8002f78:	214c      	movs	r1, #76	; 0x4c
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b08a      	sub	sp, #40	; 0x28
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <xQueueGenericSend+0x20>
 8002fa2:	b672      	cpsid	i
 8002fa4:	e7fe      	b.n	8002fa4 <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d103      	bne.n	8002fb4 <xQueueGenericSend+0x2e>
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <xQueueGenericSend+0x32>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <xQueueGenericSend+0x34>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <xQueueGenericSend+0x3c>
 8002fbe:	b672      	cpsid	i
 8002fc0:	e7fe      	b.n	8002fc0 <xQueueGenericSend+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d103      	bne.n	8002fd0 <xQueueGenericSend+0x4a>
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <xQueueGenericSend+0x4e>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <xQueueGenericSend+0x50>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <xQueueGenericSend+0x58>
 8002fda:	b672      	cpsid	i
 8002fdc:	e7fe      	b.n	8002fdc <xQueueGenericSend+0x56>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fde:	f001 f9b3 	bl	8004348 <xTaskGetSchedulerState>
 8002fe2:	1e03      	subs	r3, r0, #0
 8002fe4:	d102      	bne.n	8002fec <xQueueGenericSend+0x66>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <xQueueGenericSend+0x6a>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <xQueueGenericSend+0x6c>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <xQueueGenericSend+0x74>
 8002ff6:	b672      	cpsid	i
 8002ff8:	e7fe      	b.n	8002ff8 <xQueueGenericSend+0x72>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002ffa:	f001 fe59 	bl	8004cb0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	429a      	cmp	r2, r3
 8003008:	d302      	bcc.n	8003010 <xQueueGenericSend+0x8a>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d11e      	bne.n	800304e <xQueueGenericSend+0xc8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f9b4 	bl	8003384 <prvCopyDataToQueue>
 800301c:	0003      	movs	r3, r0
 800301e:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <xQueueGenericSend+0xb6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	3324      	adds	r3, #36	; 0x24
 800302c:	0018      	movs	r0, r3
 800302e:	f000 ffa1 	bl	8003f74 <xTaskRemoveFromEventList>
 8003032:	1e03      	subs	r3, r0, #0
 8003034:	d007      	beq.n	8003046 <xQueueGenericSend+0xc0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003036:	f001 fe2b 	bl	8004c90 <vPortYield>
 800303a:	e004      	b.n	8003046 <xQueueGenericSend+0xc0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <xQueueGenericSend+0xc0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003042:	f001 fe25 	bl	8004c90 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003046:	f001 fe45 	bl	8004cd4 <vPortExitCritical>
                return pdPASS;
 800304a:	2301      	movs	r3, #1
 800304c:	e05b      	b.n	8003106 <xQueueGenericSend+0x180>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <xQueueGenericSend+0xd6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003054:	f001 fe3e 	bl	8004cd4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003058:	2300      	movs	r3, #0
 800305a:	e054      	b.n	8003106 <xQueueGenericSend+0x180>
                }
                else if( xEntryTimeSet == pdFALSE )
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <xQueueGenericSend+0xea>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003062:	2314      	movs	r3, #20
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	0018      	movs	r0, r3
 8003068:	f001 f84e 	bl	8004108 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800306c:	2301      	movs	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003070:	f001 fe30 	bl	8004cd4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003074:	f000 fcb8 	bl	80039e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003078:	f001 fe1a 	bl	8004cb0 <vPortEnterCritical>
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	2244      	movs	r2, #68	; 0x44
 8003080:	5c9b      	ldrb	r3, [r3, r2]
 8003082:	b25b      	sxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	d103      	bne.n	8003090 <xQueueGenericSend+0x10a>
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	2244      	movs	r2, #68	; 0x44
 800308c:	2100      	movs	r1, #0
 800308e:	5499      	strb	r1, [r3, r2]
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	2245      	movs	r2, #69	; 0x45
 8003094:	5c9b      	ldrb	r3, [r3, r2]
 8003096:	b25b      	sxtb	r3, r3
 8003098:	3301      	adds	r3, #1
 800309a:	d103      	bne.n	80030a4 <xQueueGenericSend+0x11e>
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2245      	movs	r2, #69	; 0x45
 80030a0:	2100      	movs	r1, #0
 80030a2:	5499      	strb	r1, [r3, r2]
 80030a4:	f001 fe16 	bl	8004cd4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030a8:	1d3a      	adds	r2, r7, #4
 80030aa:	2314      	movs	r3, #20
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	0011      	movs	r1, r2
 80030b0:	0018      	movs	r0, r3
 80030b2:	f001 f83d 	bl	8004130 <xTaskCheckForTimeOut>
 80030b6:	1e03      	subs	r3, r0, #0
 80030b8:	d11e      	bne.n	80030f8 <xQueueGenericSend+0x172>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 fa66 	bl	800358e <prvIsQueueFull>
 80030c2:	1e03      	subs	r3, r0, #0
 80030c4:	d011      	beq.n	80030ea <xQueueGenericSend+0x164>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	3310      	adds	r3, #16
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	0011      	movs	r1, r2
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 fef4 	bl	8003ebc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 f9e5 	bl	80034a6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80030dc:	f000 fc90 	bl	8003a00 <xTaskResumeAll>
 80030e0:	1e03      	subs	r3, r0, #0
 80030e2:	d18a      	bne.n	8002ffa <xQueueGenericSend+0x74>
                {
                    portYIELD_WITHIN_API();
 80030e4:	f001 fdd4 	bl	8004c90 <vPortYield>
 80030e8:	e787      	b.n	8002ffa <xQueueGenericSend+0x74>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f000 f9da 	bl	80034a6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030f2:	f000 fc85 	bl	8003a00 <xTaskResumeAll>
 80030f6:	e780      	b.n	8002ffa <xQueueGenericSend+0x74>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 f9d3 	bl	80034a6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003100:	f000 fc7e 	bl	8003a00 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003104:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b00a      	add	sp, #40	; 0x28
 800310c:	bd80      	pop	{r7, pc}

0800310e <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800310e:	b590      	push	{r4, r7, lr}
 8003110:	b08b      	sub	sp, #44	; 0x2c
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <xQueueGenericSendFromISR+0x1c>
 8003126:	b672      	cpsid	i
 8003128:	e7fe      	b.n	8003128 <xQueueGenericSendFromISR+0x1a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <xQueueGenericSendFromISR+0x2a>
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <xQueueGenericSendFromISR+0x2e>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <xQueueGenericSendFromISR+0x30>
 800313c:	2300      	movs	r3, #0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <xQueueGenericSendFromISR+0x38>
 8003142:	b672      	cpsid	i
 8003144:	e7fe      	b.n	8003144 <xQueueGenericSendFromISR+0x36>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d103      	bne.n	8003154 <xQueueGenericSendFromISR+0x46>
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <xQueueGenericSendFromISR+0x4a>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <xQueueGenericSendFromISR+0x4c>
 8003158:	2300      	movs	r3, #0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <xQueueGenericSendFromISR+0x54>
 800315e:	b672      	cpsid	i
 8003160:	e7fe      	b.n	8003160 <xQueueGenericSendFromISR+0x52>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003162:	f001 fdcf 	bl	8004d04 <ulSetInterruptMaskFromISR>
 8003166:	0003      	movs	r3, r0
 8003168:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <xQueueGenericSendFromISR+0x6e>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d143      	bne.n	8003204 <xQueueGenericSendFromISR+0xf6>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800317c:	241b      	movs	r4, #27
 800317e:	193b      	adds	r3, r7, r4
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	2145      	movs	r1, #69	; 0x45
 8003184:	5c52      	ldrb	r2, [r2, r1]
 8003186:	701a      	strb	r2, [r3, #0]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	0018      	movs	r0, r3
 8003196:	f000 f8f5 	bl	8003384 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800319a:	193b      	adds	r3, r7, r4
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b25b      	sxtb	r3, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	d111      	bne.n	80031c8 <xQueueGenericSendFromISR+0xba>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d028      	beq.n	80031fe <xQueueGenericSendFromISR+0xf0>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	3324      	adds	r3, #36	; 0x24
 80031b0:	0018      	movs	r0, r3
 80031b2:	f000 fedf 	bl	8003f74 <xTaskRemoveFromEventList>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d021      	beq.n	80031fe <xQueueGenericSendFromISR+0xf0>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01e      	beq.n	80031fe <xQueueGenericSendFromISR+0xf0>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e01a      	b.n	80031fe <xQueueGenericSendFromISR+0xf0>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80031c8:	f000 fd10 	bl	8003bec <uxTaskGetNumberOfTasks>
 80031cc:	0003      	movs	r3, r0
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	211b      	movs	r1, #27
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d90f      	bls.n	80031fe <xQueueGenericSendFromISR+0xf0>
 80031de:	187b      	adds	r3, r7, r1
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	2b7f      	cmp	r3, #127	; 0x7f
 80031e6:	d101      	bne.n	80031ec <xQueueGenericSendFromISR+0xde>
 80031e8:	b672      	cpsid	i
 80031ea:	e7fe      	b.n	80031ea <xQueueGenericSendFromISR+0xdc>
 80031ec:	231b      	movs	r3, #27
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	b259      	sxtb	r1, r3
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	2245      	movs	r2, #69	; 0x45
 80031fc:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 80031fe:	2301      	movs	r3, #1
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
        {
 8003202:	e001      	b.n	8003208 <xQueueGenericSendFromISR+0xfa>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	0018      	movs	r0, r3
 800320c:	f001 fd80 	bl	8004d10 <vClearInterruptMaskFromISR>

    return xReturn;
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b00b      	add	sp, #44	; 0x2c
 8003218:	bd90      	pop	{r4, r7, pc}

0800321a <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b08a      	sub	sp, #40	; 0x28
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <xQueueReceive+0x1e>
 8003234:	b672      	cpsid	i
 8003236:	e7fe      	b.n	8003236 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <xQueueReceive+0x2c>
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <xQueueReceive+0x30>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <xQueueReceive+0x32>
 800324a:	2300      	movs	r3, #0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <xQueueReceive+0x3a>
 8003250:	b672      	cpsid	i
 8003252:	e7fe      	b.n	8003252 <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003254:	f001 f878 	bl	8004348 <xTaskGetSchedulerState>
 8003258:	1e03      	subs	r3, r0, #0
 800325a:	d102      	bne.n	8003262 <xQueueReceive+0x48>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <xQueueReceive+0x4c>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <xQueueReceive+0x4e>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <xQueueReceive+0x56>
 800326c:	b672      	cpsid	i
 800326e:	e7fe      	b.n	800326e <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003270:	f001 fd1e 	bl	8004cb0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01a      	beq.n	80032b6 <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	0011      	movs	r1, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f000 f8e7 	bl	800345a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	1e5a      	subs	r2, r3, #1
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	3310      	adds	r3, #16
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 fe67 	bl	8003f74 <xTaskRemoveFromEventList>
 80032a6:	1e03      	subs	r3, r0, #0
 80032a8:	d001      	beq.n	80032ae <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80032aa:	f001 fcf1 	bl	8004c90 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80032ae:	f001 fd11 	bl	8004cd4 <vPortExitCritical>
                return pdPASS;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e062      	b.n	800337c <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d103      	bne.n	80032c4 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80032bc:	f001 fd0a 	bl	8004cd4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e05b      	b.n	800337c <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80032ca:	2314      	movs	r3, #20
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 ff1a 	bl	8004108 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80032d4:	2301      	movs	r3, #1
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80032d8:	f001 fcfc 	bl	8004cd4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80032dc:	f000 fb84 	bl	80039e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80032e0:	f001 fce6 	bl	8004cb0 <vPortEnterCritical>
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	2244      	movs	r2, #68	; 0x44
 80032e8:	5c9b      	ldrb	r3, [r3, r2]
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	d103      	bne.n	80032f8 <xQueueReceive+0xde>
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	2244      	movs	r2, #68	; 0x44
 80032f4:	2100      	movs	r1, #0
 80032f6:	5499      	strb	r1, [r3, r2]
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	2245      	movs	r2, #69	; 0x45
 80032fc:	5c9b      	ldrb	r3, [r3, r2]
 80032fe:	b25b      	sxtb	r3, r3
 8003300:	3301      	adds	r3, #1
 8003302:	d103      	bne.n	800330c <xQueueReceive+0xf2>
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2245      	movs	r2, #69	; 0x45
 8003308:	2100      	movs	r1, #0
 800330a:	5499      	strb	r1, [r3, r2]
 800330c:	f001 fce2 	bl	8004cd4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003310:	1d3a      	adds	r2, r7, #4
 8003312:	2314      	movs	r3, #20
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	0011      	movs	r1, r2
 8003318:	0018      	movs	r0, r3
 800331a:	f000 ff09 	bl	8004130 <xTaskCheckForTimeOut>
 800331e:	1e03      	subs	r3, r0, #0
 8003320:	d11e      	bne.n	8003360 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	0018      	movs	r0, r3
 8003326:	f000 f91c 	bl	8003562 <prvIsQueueEmpty>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d011      	beq.n	8003352 <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	3324      	adds	r3, #36	; 0x24
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	0011      	movs	r1, r2
 8003336:	0018      	movs	r0, r3
 8003338:	f000 fdc0 	bl	8003ebc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	0018      	movs	r0, r3
 8003340:	f000 f8b1 	bl	80034a6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003344:	f000 fb5c 	bl	8003a00 <xTaskResumeAll>
 8003348:	1e03      	subs	r3, r0, #0
 800334a:	d191      	bne.n	8003270 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 800334c:	f001 fca0 	bl	8004c90 <vPortYield>
 8003350:	e78e      	b.n	8003270 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	0018      	movs	r0, r3
 8003356:	f000 f8a6 	bl	80034a6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800335a:	f000 fb51 	bl	8003a00 <xTaskResumeAll>
 800335e:	e787      	b.n	8003270 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	0018      	movs	r0, r3
 8003364:	f000 f89f 	bl	80034a6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003368:	f000 fb4a 	bl	8003a00 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 f8f7 	bl	8003562 <prvIsQueueEmpty>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d100      	bne.n	800337a <xQueueReceive+0x160>
 8003378:	e77a      	b.n	8003270 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800337a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b00a      	add	sp, #40	; 0x28
 8003382:	bd80      	pop	{r7, pc}

08003384 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10e      	bne.n	80033c0 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d14e      	bne.n	8003448 <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 ffe6 	bl	8004380 <xTaskPriorityDisinherit>
 80033b4:	0003      	movs	r3, r0
 80033b6:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	e043      	b.n	8003448 <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d119      	bne.n	80033fa <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6858      	ldr	r0, [r3, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	0019      	movs	r1, r3
 80033d2:	f001 fecf 	bl	8005174 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	18d2      	adds	r2, r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d32b      	bcc.n	8003448 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	e026      	b.n	8003448 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68d8      	ldr	r0, [r3, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	0019      	movs	r1, r3
 8003406:	f001 feb5 	bl	8005174 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	425b      	negs	r3, r3
 8003414:	18d2      	adds	r2, r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d207      	bcs.n	8003436 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	425b      	negs	r3, r3
 8003430:	18d2      	adds	r2, r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d105      	bne.n	8003448 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	3b01      	subs	r3, #1
 8003446:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003450:	697b      	ldr	r3, [r7, #20]
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	b006      	add	sp, #24
 8003458:	bd80      	pop	{r7, pc}

0800345a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d018      	beq.n	800349e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	18d2      	adds	r2, r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d303      	bcc.n	800348e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68d9      	ldr	r1, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	0018      	movs	r0, r3
 800349a:	f001 fe6b 	bl	8005174 <memcpy>
    }
}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b002      	add	sp, #8
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80034ae:	f001 fbff 	bl	8004cb0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80034b2:	230f      	movs	r3, #15
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	2145      	movs	r1, #69	; 0x45
 80034ba:	5c52      	ldrb	r2, [r2, r1]
 80034bc:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80034be:	e013      	b.n	80034e8 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d016      	beq.n	80034f6 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3324      	adds	r3, #36	; 0x24
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 fd51 	bl	8003f74 <xTaskRemoveFromEventList>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d001      	beq.n	80034da <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80034d6:	f000 fe7f 	bl	80041d8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80034da:	210f      	movs	r1, #15
 80034dc:	187b      	adds	r3, r7, r1
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80034e8:	230f      	movs	r3, #15
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b25b      	sxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	dce5      	bgt.n	80034c0 <prvUnlockQueue+0x1a>
 80034f4:	e000      	b.n	80034f8 <prvUnlockQueue+0x52>
                    break;
 80034f6:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2245      	movs	r2, #69	; 0x45
 80034fc:	21ff      	movs	r1, #255	; 0xff
 80034fe:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003500:	f001 fbe8 	bl	8004cd4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003504:	f001 fbd4 	bl	8004cb0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003508:	230e      	movs	r3, #14
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	2144      	movs	r1, #68	; 0x44
 8003510:	5c52      	ldrb	r2, [r2, r1]
 8003512:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003514:	e013      	b.n	800353e <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3310      	adds	r3, #16
 8003522:	0018      	movs	r0, r3
 8003524:	f000 fd26 	bl	8003f74 <xTaskRemoveFromEventList>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d001      	beq.n	8003530 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 800352c:	f000 fe54 	bl	80041d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003530:	210e      	movs	r1, #14
 8003532:	187b      	adds	r3, r7, r1
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	3b01      	subs	r3, #1
 8003538:	b2da      	uxtb	r2, r3
 800353a:	187b      	adds	r3, r7, r1
 800353c:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800353e:	230e      	movs	r3, #14
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b25b      	sxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	dce5      	bgt.n	8003516 <prvUnlockQueue+0x70>
 800354a:	e000      	b.n	800354e <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 800354c:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2244      	movs	r2, #68	; 0x44
 8003552:	21ff      	movs	r1, #255	; 0xff
 8003554:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003556:	f001 fbbd 	bl	8004cd4 <vPortExitCritical>
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b004      	add	sp, #16
 8003560:	bd80      	pop	{r7, pc}

08003562 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800356a:	f001 fba1 	bl	8004cb0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003576:	2301      	movs	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e001      	b.n	8003580 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003580:	f001 fba8 	bl	8004cd4 <vPortExitCritical>

    return xReturn;
 8003584:	68fb      	ldr	r3, [r7, #12]
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bd80      	pop	{r7, pc}

0800358e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003596:	f001 fb8b 	bl	8004cb0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d102      	bne.n	80035ac <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80035a6:	2301      	movs	r3, #1
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	e001      	b.n	80035b0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035b0:	f001 fb90 	bl	8004cd4 <vPortExitCritical>

    return xReturn;
 80035b4:	68fb      	ldr	r3, [r7, #12]
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b004      	add	sp, #16
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <vQueueAddToRegistry+0x18>
 80035d4:	b672      	cpsid	i
 80035d6:	e7fe      	b.n	80035d6 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d025      	beq.n	800362a <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	e01f      	b.n	8003624 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80035e4:	4a17      	ldr	r2, [pc, #92]	; (8003644 <vQueueAddToRegistry+0x84>)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	18d3      	adds	r3, r2, r3
 80035ec:	3304      	adds	r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d105      	bne.n	8003602 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	00da      	lsls	r2, r3, #3
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <vQueueAddToRegistry+0x84>)
 80035fc:	18d3      	adds	r3, r2, r3
 80035fe:	60bb      	str	r3, [r7, #8]
                    break;
 8003600:	e013      	b.n	800362a <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <vQueueAddToRegistry+0x5e>
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <vQueueAddToRegistry+0x84>)
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	00d2      	lsls	r2, r2, #3
 800360e:	58d3      	ldr	r3, [r2, r3]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	00da      	lsls	r2, r3, #3
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <vQueueAddToRegistry+0x84>)
 800361a:	18d3      	adds	r3, r2, r3
 800361c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3301      	adds	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b07      	cmp	r3, #7
 8003628:	d9dc      	bls.n	80035e4 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b004      	add	sp, #16
 8003642:	bd80      	pop	{r7, pc}
 8003644:	2000011c 	.word	0x2000011c

08003648 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003658:	f001 fb2a 	bl	8004cb0 <vPortEnterCritical>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2244      	movs	r2, #68	; 0x44
 8003660:	5c9b      	ldrb	r3, [r3, r2]
 8003662:	b25b      	sxtb	r3, r3
 8003664:	3301      	adds	r3, #1
 8003666:	d103      	bne.n	8003670 <vQueueWaitForMessageRestricted+0x28>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2244      	movs	r2, #68	; 0x44
 800366c:	2100      	movs	r1, #0
 800366e:	5499      	strb	r1, [r3, r2]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2245      	movs	r2, #69	; 0x45
 8003674:	5c9b      	ldrb	r3, [r3, r2]
 8003676:	b25b      	sxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	d103      	bne.n	8003684 <vQueueWaitForMessageRestricted+0x3c>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2245      	movs	r2, #69	; 0x45
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]
 8003684:	f001 fb26 	bl	8004cd4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	2b00      	cmp	r3, #0
 800368e:	d106      	bne.n	800369e <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3324      	adds	r3, #36	; 0x24
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	0018      	movs	r0, r3
 800369a:	f000 fc2d 	bl	8003ef8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7ff ff00 	bl	80034a6 <prvUnlockQueue>
    }
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b006      	add	sp, #24
 80036ac:	bd80      	pop	{r7, pc}

080036ae <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80036ae:	b590      	push	{r4, r7, lr}
 80036b0:	b08d      	sub	sp, #52	; 0x34
 80036b2:	af04      	add	r7, sp, #16
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	1dbb      	adds	r3, r7, #6
 80036bc:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036be:	1dbb      	adds	r3, r7, #6
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	0018      	movs	r0, r3
 80036c6:	f001 fb8b 	bl	8004de0 <pvPortMalloc>
 80036ca:	0003      	movs	r3, r0
 80036cc:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d016      	beq.n	8003702 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036d4:	2054      	movs	r0, #84	; 0x54
 80036d6:	f001 fb83 	bl	8004de0 <pvPortMalloc>
 80036da:	0003      	movs	r3, r0
 80036dc:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2254      	movs	r2, #84	; 0x54
 80036e8:	2100      	movs	r1, #0
 80036ea:	0018      	movs	r0, r3
 80036ec:	f001 fd4b 	bl	8005186 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
 80036f6:	e006      	b.n	8003706 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f001 fc18 	bl	8004f30 <vPortFree>
 8003700:	e001      	b.n	8003706 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d016      	beq.n	800373a <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800370c:	1dbb      	adds	r3, r7, #6
 800370e:	881a      	ldrh	r2, [r3, #0]
 8003710:	683c      	ldr	r4, [r7, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	2300      	movs	r3, #0
 8003718:	9303      	str	r3, [sp, #12]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	0023      	movs	r3, r4
 8003728:	f000 f810 	bl	800374c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	0018      	movs	r0, r3
 8003730:	f000 f88c 	bl	800384c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003734:	2301      	movs	r3, #1
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e002      	b.n	8003740 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800373a:	2301      	movs	r3, #1
 800373c:	425b      	negs	r3, r3
 800373e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003740:	69bb      	ldr	r3, [r7, #24]
    }
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b009      	add	sp, #36	; 0x24
 8003748:	bd90      	pop	{r4, r7, pc}
	...

0800374c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	001a      	movs	r2, r3
 8003764:	21a5      	movs	r1, #165	; 0xa5
 8003766:	f001 fd0e 	bl	8005186 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4935      	ldr	r1, [pc, #212]	; (8003848 <prvInitialiseNewTask+0xfc>)
 8003772:	468c      	mov	ip, r1
 8003774:	4463      	add	r3, ip
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	18d3      	adds	r3, r2, r3
 800377a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2207      	movs	r2, #7
 8003780:	4393      	bics	r3, r2
 8003782:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2207      	movs	r2, #7
 8003788:	4013      	ands	r3, r2
 800378a:	d001      	beq.n	8003790 <prvInitialiseNewTask+0x44>
 800378c:	b672      	cpsid	i
 800378e:	e7fe      	b.n	800378e <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01f      	beq.n	80037d6 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e013      	b.n	80037c4 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	18d3      	adds	r3, r2, r3
 80037a2:	7818      	ldrb	r0, [r3, #0]
 80037a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a6:	2134      	movs	r1, #52	; 0x34
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	18d3      	adds	r3, r2, r3
 80037ac:	185b      	adds	r3, r3, r1
 80037ae:	1c02      	adds	r2, r0, #0
 80037b0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	18d3      	adds	r3, r2, r3
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d006      	beq.n	80037cc <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	3301      	adds	r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d9e8      	bls.n	800379c <prvInitialiseNewTask+0x50>
 80037ca:	e000      	b.n	80037ce <prvInitialiseNewTask+0x82>
            {
                break;
 80037cc:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	2238      	movs	r2, #56	; 0x38
 80037d2:	2100      	movs	r1, #0
 80037d4:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d901      	bls.n	80037e0 <prvInitialiseNewTask+0x94>
 80037dc:	b672      	cpsid	i
 80037de:	e7fe      	b.n	80037de <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d901      	bls.n	80037ea <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037e6:	2304      	movs	r3, #4
 80037e8:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	6a3a      	ldr	r2, [r7, #32]
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	6a3a      	ldr	r2, [r7, #32]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	3304      	adds	r3, #4
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7ff fa4c 	bl	8002c98 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	3318      	adds	r3, #24
 8003804:	0018      	movs	r0, r3
 8003806:	f7ff fa47 	bl	8002c98 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2205      	movs	r2, #5
 8003814:	1ad2      	subs	r2, r2, r3
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800381e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	68f9      	ldr	r1, [r7, #12]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	0018      	movs	r0, r3
 8003828:	f001 f9a4 	bl	8004b74 <pxPortInitialiseStack>
 800382c:	0002      	movs	r2, r0
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800383c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b006      	add	sp, #24
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	3fffffff 	.word	0x3fffffff

0800384c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003854:	f001 fa2c 	bl	8004cb0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003858:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <prvAddNewTaskToReadyList+0x104>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	4b3c      	ldr	r3, [pc, #240]	; (8003950 <prvAddNewTaskToReadyList+0x104>)
 8003860:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8003862:	4b3c      	ldr	r3, [pc, #240]	; (8003954 <prvAddNewTaskToReadyList+0x108>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800386a:	4b3a      	ldr	r3, [pc, #232]	; (8003954 <prvAddNewTaskToReadyList+0x108>)
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003870:	4b37      	ldr	r3, [pc, #220]	; (8003950 <prvAddNewTaskToReadyList+0x104>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d110      	bne.n	800389a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003878:	f000 fcc8 	bl	800420c <prvInitialiseTaskLists>
 800387c:	e00d      	b.n	800389a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800387e:	4b36      	ldr	r3, [pc, #216]	; (8003958 <prvAddNewTaskToReadyList+0x10c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003886:	4b33      	ldr	r3, [pc, #204]	; (8003954 <prvAddNewTaskToReadyList+0x108>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	429a      	cmp	r2, r3
 8003892:	d802      	bhi.n	800389a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003894:	4b2f      	ldr	r3, [pc, #188]	; (8003954 <prvAddNewTaskToReadyList+0x108>)
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800389a:	4b30      	ldr	r3, [pc, #192]	; (800395c <prvAddNewTaskToReadyList+0x110>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	4b2e      	ldr	r3, [pc, #184]	; (800395c <prvAddNewTaskToReadyList+0x110>)
 80038a2:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038a4:	4b2d      	ldr	r3, [pc, #180]	; (800395c <prvAddNewTaskToReadyList+0x110>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <prvAddNewTaskToReadyList+0x114>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d903      	bls.n	80038c0 <prvAddNewTaskToReadyList+0x74>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <prvAddNewTaskToReadyList+0x114>)
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	4927      	ldr	r1, [pc, #156]	; (8003964 <prvAddNewTaskToReadyList+0x118>)
 80038c6:	0013      	movs	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	189b      	adds	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	18cb      	adds	r3, r1, r3
 80038d0:	3304      	adds	r3, #4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	60da      	str	r2, [r3, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	3204      	adds	r2, #4
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	1d1a      	adds	r2, r3, #4
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fa:	0013      	movs	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4a18      	ldr	r2, [pc, #96]	; (8003964 <prvAddNewTaskToReadyList+0x118>)
 8003904:	189a      	adds	r2, r3, r2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	615a      	str	r2, [r3, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390e:	4915      	ldr	r1, [pc, #84]	; (8003964 <prvAddNewTaskToReadyList+0x118>)
 8003910:	0013      	movs	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	189b      	adds	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	585b      	ldr	r3, [r3, r1]
 800391a:	1c58      	adds	r0, r3, #1
 800391c:	4911      	ldr	r1, [pc, #68]	; (8003964 <prvAddNewTaskToReadyList+0x118>)
 800391e:	0013      	movs	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	189b      	adds	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003928:	f001 f9d4 	bl	8004cd4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <prvAddNewTaskToReadyList+0x10c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003934:	4b07      	ldr	r3, [pc, #28]	; (8003954 <prvAddNewTaskToReadyList+0x108>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	429a      	cmp	r2, r3
 8003940:	d201      	bcs.n	8003946 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003942:	f001 f9a5 	bl	8004c90 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b004      	add	sp, #16
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	20000234 	.word	0x20000234
 8003954:	2000015c 	.word	0x2000015c
 8003958:	20000240 	.word	0x20000240
 800395c:	20000250 	.word	0x20000250
 8003960:	2000023c 	.word	0x2000023c
 8003964:	20000160 	.word	0x20000160

08003968 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800396e:	4917      	ldr	r1, [pc, #92]	; (80039cc <vTaskStartScheduler+0x64>)
 8003970:	4817      	ldr	r0, [pc, #92]	; (80039d0 <vTaskStartScheduler+0x68>)
 8003972:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <vTaskStartScheduler+0x6c>)
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2300      	movs	r3, #0
 800397c:	223c      	movs	r2, #60	; 0x3c
 800397e:	f7ff fe96 	bl	80036ae <xTaskCreate>
 8003982:	0003      	movs	r3, r0
 8003984:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d103      	bne.n	8003994 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 800398c:	f000 fde8 	bl	8004560 <xTimerCreateTimerTask>
 8003990:	0003      	movs	r3, r0
 8003992:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d10d      	bne.n	80039b6 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800399a:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <vTaskStartScheduler+0x70>)
 800399e:	2201      	movs	r2, #1
 80039a0:	4252      	negs	r2, r2
 80039a2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80039a4:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <vTaskStartScheduler+0x74>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <vTaskStartScheduler+0x78>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80039b0:	f001 f94a 	bl	8004c48 <xPortStartScheduler>
 80039b4:	e004      	b.n	80039c0 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3301      	adds	r3, #1
 80039ba:	d101      	bne.n	80039c0 <vTaskStartScheduler+0x58>
 80039bc:	b672      	cpsid	i
 80039be:	e7fe      	b.n	80039be <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80039c0:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <vTaskStartScheduler+0x7c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	08005204 	.word	0x08005204
 80039d0:	080041ed 	.word	0x080041ed
 80039d4:	20000258 	.word	0x20000258
 80039d8:	20000254 	.word	0x20000254
 80039dc:	20000240 	.word	0x20000240
 80039e0:	20000238 	.word	0x20000238
 80039e4:	2000000c 	.word	0x2000000c

080039e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <vTaskSuspendAll+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	4b02      	ldr	r3, [pc, #8]	; (80039fc <vTaskSuspendAll+0x14>)
 80039f4:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	2000025c 	.word	0x2000025c

08003a00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003a0e:	4b68      	ldr	r3, [pc, #416]	; (8003bb0 <xTaskResumeAll+0x1b0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <xTaskResumeAll+0x1a>
 8003a16:	b672      	cpsid	i
 8003a18:	e7fe      	b.n	8003a18 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003a1a:	f001 f949 	bl	8004cb0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003a1e:	4b64      	ldr	r3, [pc, #400]	; (8003bb0 <xTaskResumeAll+0x1b0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1e5a      	subs	r2, r3, #1
 8003a24:	4b62      	ldr	r3, [pc, #392]	; (8003bb0 <xTaskResumeAll+0x1b0>)
 8003a26:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a28:	4b61      	ldr	r3, [pc, #388]	; (8003bb0 <xTaskResumeAll+0x1b0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d000      	beq.n	8003a32 <xTaskResumeAll+0x32>
 8003a30:	e0b7      	b.n	8003ba2 <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a32:	4b60      	ldr	r3, [pc, #384]	; (8003bb4 <xTaskResumeAll+0x1b4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d100      	bne.n	8003a3c <xTaskResumeAll+0x3c>
 8003a3a:	e0b2      	b.n	8003ba2 <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a3c:	e089      	b.n	8003b52 <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a3e:	4b5e      	ldr	r3, [pc, #376]	; (8003bb8 <xTaskResumeAll+0x1b8>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	6a12      	ldr	r2, [r2, #32]
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	69d2      	ldr	r2, [r2, #28]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3318      	adds	r3, #24
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d103      	bne.n	8003a74 <xTaskResumeAll+0x74>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1e5a      	subs	r2, r3, #1
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	68d2      	ldr	r2, [r2, #12]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	6892      	ldr	r2, [r2, #8]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d103      	bne.n	8003ab2 <xTaskResumeAll+0xb2>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	615a      	str	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	1e5a      	subs	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac6:	4b3d      	ldr	r3, [pc, #244]	; (8003bbc <xTaskResumeAll+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d903      	bls.n	8003ad6 <xTaskResumeAll+0xd6>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <xTaskResumeAll+0x1bc>)
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	4939      	ldr	r1, [pc, #228]	; (8003bc0 <xTaskResumeAll+0x1c0>)
 8003adc:	0013      	movs	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	189b      	adds	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	18cb      	adds	r3, r1, r3
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	609a      	str	r2, [r3, #8]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	60da      	str	r2, [r3, #12]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	3204      	adds	r2, #4
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1d1a      	adds	r2, r3, #4
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	0013      	movs	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	189b      	adds	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4a29      	ldr	r2, [pc, #164]	; (8003bc0 <xTaskResumeAll+0x1c0>)
 8003b1a:	189a      	adds	r2, r3, r2
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	615a      	str	r2, [r3, #20]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b24:	4926      	ldr	r1, [pc, #152]	; (8003bc0 <xTaskResumeAll+0x1c0>)
 8003b26:	0013      	movs	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	585b      	ldr	r3, [r3, r1]
 8003b30:	1c58      	adds	r0, r3, #1
 8003b32:	4923      	ldr	r1, [pc, #140]	; (8003bc0 <xTaskResumeAll+0x1c0>)
 8003b34:	0013      	movs	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	189b      	adds	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <xTaskResumeAll+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d302      	bcc.n	8003b52 <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <xTaskResumeAll+0x1c8>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <xTaskResumeAll+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d000      	beq.n	8003b5c <xTaskResumeAll+0x15c>
 8003b5a:	e770      	b.n	8003a3e <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003b62:	f000 fbd7 	bl	8004314 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b66:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <xTaskResumeAll+0x1cc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00f      	beq.n	8003b92 <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003b72:	f000 f845 	bl	8003c00 <xTaskIncrementTick>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d002      	beq.n	8003b80 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <xTaskResumeAll+0x1c8>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f2      	bne.n	8003b72 <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <xTaskResumeAll+0x1cc>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <xTaskResumeAll+0x1c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003b9e:	f001 f877 	bl	8004c90 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003ba2:	f001 f897 	bl	8004cd4 <vPortExitCritical>

    return xAlreadyYielded;
 8003ba6:	693b      	ldr	r3, [r7, #16]
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b006      	add	sp, #24
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	2000025c 	.word	0x2000025c
 8003bb4:	20000234 	.word	0x20000234
 8003bb8:	200001f4 	.word	0x200001f4
 8003bbc:	2000023c 	.word	0x2000023c
 8003bc0:	20000160 	.word	0x20000160
 8003bc4:	2000015c 	.word	0x2000015c
 8003bc8:	20000248 	.word	0x20000248
 8003bcc:	20000244 	.word	0x20000244

08003bd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003bd6:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <xTaskGetTickCount+0x18>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003bdc:	687b      	ldr	r3, [r7, #4]
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b002      	add	sp, #8
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	20000238 	.word	0x20000238

08003bec <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8003bf0:	4b02      	ldr	r3, [pc, #8]	; (8003bfc <uxTaskGetNumberOfTasks+0x10>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	20000234 	.word	0x20000234

08003c00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c0a:	4b78      	ldr	r3, [pc, #480]	; (8003dec <xTaskIncrementTick+0x1ec>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d000      	beq.n	8003c14 <xTaskIncrementTick+0x14>
 8003c12:	e0e0      	b.n	8003dd6 <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c14:	4b76      	ldr	r3, [pc, #472]	; (8003df0 <xTaskIncrementTick+0x1f0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003c1c:	4b74      	ldr	r3, [pc, #464]	; (8003df0 <xTaskIncrementTick+0x1f0>)
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d117      	bne.n	8003c58 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8003c28:	4b72      	ldr	r3, [pc, #456]	; (8003df4 <xTaskIncrementTick+0x1f4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <xTaskIncrementTick+0x36>
 8003c32:	b672      	cpsid	i
 8003c34:	e7fe      	b.n	8003c34 <xTaskIncrementTick+0x34>
 8003c36:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <xTaskIncrementTick+0x1f4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	4b6e      	ldr	r3, [pc, #440]	; (8003df8 <xTaskIncrementTick+0x1f8>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <xTaskIncrementTick+0x1f4>)
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	4b6c      	ldr	r3, [pc, #432]	; (8003df8 <xTaskIncrementTick+0x1f8>)
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	4b6c      	ldr	r3, [pc, #432]	; (8003dfc <xTaskIncrementTick+0x1fc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	4b6a      	ldr	r3, [pc, #424]	; (8003dfc <xTaskIncrementTick+0x1fc>)
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f000 fb5e 	bl	8004314 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003c58:	4b69      	ldr	r3, [pc, #420]	; (8003e00 <xTaskIncrementTick+0x200>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d200      	bcs.n	8003c64 <xTaskIncrementTick+0x64>
 8003c62:	e0a4      	b.n	8003dae <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c64:	4b63      	ldr	r3, [pc, #396]	; (8003df4 <xTaskIncrementTick+0x1f4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c6e:	4b64      	ldr	r3, [pc, #400]	; (8003e00 <xTaskIncrementTick+0x200>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	4252      	negs	r2, r2
 8003c74:	601a      	str	r2, [r3, #0]
                    break;
 8003c76:	e09a      	b.n	8003dae <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c78:	4b5e      	ldr	r3, [pc, #376]	; (8003df4 <xTaskIncrementTick+0x1f4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d203      	bcs.n	8003c98 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003c90:	4b5b      	ldr	r3, [pc, #364]	; (8003e00 <xTaskIncrementTick+0x200>)
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003c96:	e08a      	b.n	8003dae <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d103      	bne.n	8003cc6 <xTaskIncrementTick+0xc6>
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	615a      	str	r2, [r3, #20]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	1e5a      	subs	r2, r3, #1
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01e      	beq.n	8003d1c <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	6a12      	ldr	r2, [r2, #32]
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	69d2      	ldr	r2, [r2, #28]
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	3318      	adds	r3, #24
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d103      	bne.n	8003d0c <xTaskIncrementTick+0x10c>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	6a1a      	ldr	r2, [r3, #32]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	605a      	str	r2, [r3, #4]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1e5a      	subs	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	4b38      	ldr	r3, [pc, #224]	; (8003e04 <xTaskIncrementTick+0x204>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d903      	bls.n	8003d30 <xTaskIncrementTick+0x130>
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	4b35      	ldr	r3, [pc, #212]	; (8003e04 <xTaskIncrementTick+0x204>)
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	4934      	ldr	r1, [pc, #208]	; (8003e08 <xTaskIncrementTick+0x208>)
 8003d36:	0013      	movs	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	18cb      	adds	r3, r1, r3
 8003d40:	3304      	adds	r3, #4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	60da      	str	r2, [r3, #12]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	3204      	adds	r2, #4
 8003d5c:	605a      	str	r2, [r3, #4]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1d1a      	adds	r2, r3, #4
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	609a      	str	r2, [r3, #8]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	0013      	movs	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <xTaskIncrementTick+0x208>)
 8003d74:	189a      	adds	r2, r3, r2
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	615a      	str	r2, [r3, #20]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7e:	4922      	ldr	r1, [pc, #136]	; (8003e08 <xTaskIncrementTick+0x208>)
 8003d80:	0013      	movs	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	585b      	ldr	r3, [r3, r1]
 8003d8a:	1c58      	adds	r0, r3, #1
 8003d8c:	491e      	ldr	r1, [pc, #120]	; (8003e08 <xTaskIncrementTick+0x208>)
 8003d8e:	0013      	movs	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <xTaskIncrementTick+0x20c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d800      	bhi.n	8003da8 <xTaskIncrementTick+0x1a8>
 8003da6:	e75d      	b.n	8003c64 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dac:	e75a      	b.n	8003c64 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dae:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <xTaskIncrementTick+0x20c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	4914      	ldr	r1, [pc, #80]	; (8003e08 <xTaskIncrementTick+0x208>)
 8003db6:	0013      	movs	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	585b      	ldr	r3, [r3, r1]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d901      	bls.n	8003dc8 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <xTaskIncrementTick+0x210>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	e004      	b.n	8003de0 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <xTaskIncrementTick+0x214>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <xTaskIncrementTick+0x214>)
 8003dde:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003de0:	69fb      	ldr	r3, [r7, #28]
}
 8003de2:	0018      	movs	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b008      	add	sp, #32
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	2000025c 	.word	0x2000025c
 8003df0:	20000238 	.word	0x20000238
 8003df4:	200001ec 	.word	0x200001ec
 8003df8:	200001f0 	.word	0x200001f0
 8003dfc:	2000024c 	.word	0x2000024c
 8003e00:	20000254 	.word	0x20000254
 8003e04:	2000023c 	.word	0x2000023c
 8003e08:	20000160 	.word	0x20000160
 8003e0c:	2000015c 	.word	0x2000015c
 8003e10:	20000248 	.word	0x20000248
 8003e14:	20000244 	.word	0x20000244

08003e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <vTaskSwitchContext+0x90>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003e26:	4b21      	ldr	r3, [pc, #132]	; (8003eac <vTaskSwitchContext+0x94>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003e2c:	e037      	b.n	8003e9e <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8003e2e:	4b1f      	ldr	r3, [pc, #124]	; (8003eac <vTaskSwitchContext+0x94>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e34:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <vTaskSwitchContext+0x98>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	e007      	b.n	8003e4c <vTaskSwitchContext+0x34>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <vTaskSwitchContext+0x2e>
 8003e42:	b672      	cpsid	i
 8003e44:	e7fe      	b.n	8003e44 <vTaskSwitchContext+0x2c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	4919      	ldr	r1, [pc, #100]	; (8003eb4 <vTaskSwitchContext+0x9c>)
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	0013      	movs	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	189b      	adds	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	585b      	ldr	r3, [r3, r1]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0ee      	beq.n	8003e3c <vTaskSwitchContext+0x24>
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	0013      	movs	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	189b      	adds	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4a12      	ldr	r2, [pc, #72]	; (8003eb4 <vTaskSwitchContext+0x9c>)
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d104      	bne.n	8003e8e <vTaskSwitchContext+0x76>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <vTaskSwitchContext+0xa0>)
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <vTaskSwitchContext+0x98>)
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b002      	add	sp, #8
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	2000025c 	.word	0x2000025c
 8003eac:	20000248 	.word	0x20000248
 8003eb0:	2000023c 	.word	0x2000023c
 8003eb4:	20000160 	.word	0x20000160
 8003eb8:	2000015c 	.word	0x2000015c

08003ebc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <vTaskPlaceOnEventList+0x14>
 8003ecc:	b672      	cpsid	i
 8003ece:	e7fe      	b.n	8003ece <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ed0:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <vTaskPlaceOnEventList+0x38>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3318      	adds	r3, #24
 8003ed6:	001a      	movs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	0011      	movs	r1, r2
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fe fee6 	bl	8002cae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 facc 	bl	8004484 <prvAddCurrentTaskToDelayedList>
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b002      	add	sp, #8
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	2000015c 	.word	0x2000015c

08003ef8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <vTaskPlaceOnEventListRestricted+0x16>
 8003f0a:	b672      	cpsid	i
 8003f0c:	e7fe      	b.n	8003f0c <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <vTaskPlaceOnEventListRestricted+0x78>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	61da      	str	r2, [r3, #28]
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <vTaskPlaceOnEventListRestricted+0x78>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	6892      	ldr	r2, [r2, #8]
 8003f24:	621a      	str	r2, [r3, #32]
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <vTaskPlaceOnEventListRestricted+0x78>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	3218      	adds	r2, #24
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <vTaskPlaceOnEventListRestricted+0x78>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3318      	adds	r3, #24
 8003f38:	001a      	movs	r2, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <vTaskPlaceOnEventListRestricted+0x78>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 8003f56:	2301      	movs	r3, #1
 8003f58:	425b      	negs	r3, r3
 8003f5a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	0011      	movs	r1, r2
 8003f62:	0018      	movs	r0, r3
 8003f64:	f000 fa8e 	bl	8004484 <prvAddCurrentTaskToDelayedList>
    }
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b006      	add	sp, #24
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	2000015c 	.word	0x2000015c

08003f74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <xTaskRemoveFromEventList+0x1a>
 8003f8a:	b672      	cpsid	i
 8003f8c:	e7fe      	b.n	8003f8c <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	6a12      	ldr	r2, [r2, #32]
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	69d2      	ldr	r2, [r2, #28]
 8003fa6:	605a      	str	r2, [r3, #4]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	3318      	adds	r3, #24
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d103      	bne.n	8003fbc <xTaskRemoveFromEventList+0x48>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	6a1a      	ldr	r2, [r3, #32]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	629a      	str	r2, [r3, #40]	; 0x28
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	1e5a      	subs	r2, r3, #1
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fcc:	4b48      	ldr	r3, [pc, #288]	; (80040f0 <xTaskRemoveFromEventList+0x17c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d15d      	bne.n	8004090 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	68d2      	ldr	r2, [r2, #12]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	6892      	ldr	r2, [r2, #8]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d103      	bne.n	8004002 <xTaskRemoveFromEventList+0x8e>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2200      	movs	r2, #0
 8004006:	615a      	str	r2, [r3, #20]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	1e5a      	subs	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004016:	4b37      	ldr	r3, [pc, #220]	; (80040f4 <xTaskRemoveFromEventList+0x180>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d903      	bls.n	8004026 <xTaskRemoveFromEventList+0xb2>
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	4b34      	ldr	r3, [pc, #208]	; (80040f4 <xTaskRemoveFromEventList+0x180>)
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402a:	4933      	ldr	r1, [pc, #204]	; (80040f8 <xTaskRemoveFromEventList+0x184>)
 800402c:	0013      	movs	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	189b      	adds	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	18cb      	adds	r3, r1, r3
 8004036:	3304      	adds	r3, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	3204      	adds	r2, #4
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	1d1a      	adds	r2, r3, #4
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	0013      	movs	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	189b      	adds	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4a23      	ldr	r2, [pc, #140]	; (80040f8 <xTaskRemoveFromEventList+0x184>)
 800406a:	189a      	adds	r2, r3, r2
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	615a      	str	r2, [r3, #20]
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	4920      	ldr	r1, [pc, #128]	; (80040f8 <xTaskRemoveFromEventList+0x184>)
 8004076:	0013      	movs	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	189b      	adds	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	585b      	ldr	r3, [r3, r1]
 8004080:	1c58      	adds	r0, r3, #1
 8004082:	491d      	ldr	r1, [pc, #116]	; (80040f8 <xTaskRemoveFromEventList+0x184>)
 8004084:	0013      	movs	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	189b      	adds	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	5058      	str	r0, [r3, r1]
 800408e:	e01b      	b.n	80040c8 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004090:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <xTaskRemoveFromEventList+0x188>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	61da      	str	r2, [r3, #28]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	621a      	str	r2, [r3, #32]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	3218      	adds	r2, #24
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	3318      	adds	r3, #24
 80040b2:	001a      	movs	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	4a10      	ldr	r2, [pc, #64]	; (80040fc <xTaskRemoveFromEventList+0x188>)
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <xTaskRemoveFromEventList+0x188>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <xTaskRemoveFromEventList+0x188>)
 80040c6:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <xTaskRemoveFromEventList+0x18c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d905      	bls.n	80040e2 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80040d6:	2301      	movs	r3, #1
 80040d8:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80040da:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <xTaskRemoveFromEventList+0x190>)
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	e001      	b.n	80040e6 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80040e6:	69fb      	ldr	r3, [r7, #28]
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b008      	add	sp, #32
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	2000025c 	.word	0x2000025c
 80040f4:	2000023c 	.word	0x2000023c
 80040f8:	20000160 	.word	0x20000160
 80040fc:	200001f4 	.word	0x200001f4
 8004100:	2000015c 	.word	0x2000015c
 8004104:	20000248 	.word	0x20000248

08004108 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <vTaskInternalSetTimeOutState+0x20>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <vTaskInternalSetTimeOutState+0x24>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	605a      	str	r2, [r3, #4]
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}
 8004128:	2000024c 	.word	0x2000024c
 800412c:	20000238 	.word	0x20000238

08004130 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <xTaskCheckForTimeOut+0x14>
 8004140:	b672      	cpsid	i
 8004142:	e7fe      	b.n	8004142 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <xTaskCheckForTimeOut+0x1e>
 800414a:	b672      	cpsid	i
 800414c:	e7fe      	b.n	800414c <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 800414e:	f000 fdaf 	bl	8004cb0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004152:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <xTaskCheckForTimeOut+0xa0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3301      	adds	r3, #1
 8004168:	d102      	bne.n	8004170 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e027      	b.n	80041c0 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <xTaskCheckForTimeOut+0xa4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d00a      	beq.n	8004192 <xTaskCheckForTimeOut+0x62>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	429a      	cmp	r2, r3
 8004184:	d305      	bcc.n	8004192 <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004186:	2301      	movs	r3, #1
 8004188:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e016      	b.n	80041c0 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	429a      	cmp	r2, r3
 800419a:	d20c      	bcs.n	80041b6 <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1ad2      	subs	r2, r2, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7ff ffac 	bl	8004108 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e004      	b.n	80041c0 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80041c0:	f000 fd88 	bl	8004cd4 <vPortExitCritical>

    return xReturn;
 80041c4:	697b      	ldr	r3, [r7, #20]
}
 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b006      	add	sp, #24
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	20000238 	.word	0x20000238
 80041d4:	2000024c 	.word	0x2000024c

080041d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80041dc:	4b02      	ldr	r3, [pc, #8]	; (80041e8 <vTaskMissedYield+0x10>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000248 	.word	0x20000248

080041ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80041f4:	f000 f84e 	bl	8004294 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <prvIdleTask+0x1c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d9f9      	bls.n	80041f4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004200:	f000 fd46 	bl	8004c90 <vPortYield>
        prvCheckTasksWaitingTermination();
 8004204:	e7f6      	b.n	80041f4 <prvIdleTask+0x8>
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	20000160 	.word	0x20000160

0800420c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	e00c      	b.n	8004232 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	0013      	movs	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	189b      	adds	r3, r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4a14      	ldr	r2, [pc, #80]	; (8004274 <prvInitialiseTaskLists+0x68>)
 8004224:	189b      	adds	r3, r3, r2
 8004226:	0018      	movs	r0, r3
 8004228:	f7fe fd18 	bl	8002c5c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3301      	adds	r3, #1
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d9ef      	bls.n	8004218 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <prvInitialiseTaskLists+0x6c>)
 800423a:	0018      	movs	r0, r3
 800423c:	f7fe fd0e 	bl	8002c5c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004240:	4b0e      	ldr	r3, [pc, #56]	; (800427c <prvInitialiseTaskLists+0x70>)
 8004242:	0018      	movs	r0, r3
 8004244:	f7fe fd0a 	bl	8002c5c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004248:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <prvInitialiseTaskLists+0x74>)
 800424a:	0018      	movs	r0, r3
 800424c:	f7fe fd06 	bl	8002c5c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <prvInitialiseTaskLists+0x78>)
 8004252:	0018      	movs	r0, r3
 8004254:	f7fe fd02 	bl	8002c5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <prvInitialiseTaskLists+0x7c>)
 800425a:	0018      	movs	r0, r3
 800425c:	f7fe fcfe 	bl	8002c5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <prvInitialiseTaskLists+0x80>)
 8004262:	4a05      	ldr	r2, [pc, #20]	; (8004278 <prvInitialiseTaskLists+0x6c>)
 8004264:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <prvInitialiseTaskLists+0x84>)
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <prvInitialiseTaskLists+0x70>)
 800426a:	601a      	str	r2, [r3, #0]
}
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	b002      	add	sp, #8
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000160 	.word	0x20000160
 8004278:	200001c4 	.word	0x200001c4
 800427c:	200001d8 	.word	0x200001d8
 8004280:	200001f4 	.word	0x200001f4
 8004284:	20000208 	.word	0x20000208
 8004288:	20000220 	.word	0x20000220
 800428c:	200001ec 	.word	0x200001ec
 8004290:	200001f0 	.word	0x200001f0

08004294 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800429a:	e01a      	b.n	80042d2 <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 800429c:	f000 fd08 	bl	8004cb0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <prvCheckTasksWaitingTermination+0x50>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7fe fd34 	bl	8002d1a <uxListRemove>
                --uxCurrentNumberOfTasks;
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <prvCheckTasksWaitingTermination+0x54>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	1e5a      	subs	r2, r3, #1
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <prvCheckTasksWaitingTermination+0x54>)
 80042ba:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <prvCheckTasksWaitingTermination+0x58>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	1e5a      	subs	r2, r3, #1
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <prvCheckTasksWaitingTermination+0x58>)
 80042c4:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 80042c6:	f000 fd05 	bl	8004cd4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	0018      	movs	r0, r3
 80042ce:	f000 f80f 	bl	80042f0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <prvCheckTasksWaitingTermination+0x58>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e0      	bne.n	800429c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b002      	add	sp, #8
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000208 	.word	0x20000208
 80042e8:	20000234 	.word	0x20000234
 80042ec:	2000021c 	.word	0x2000021c

080042f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	0018      	movs	r0, r3
 80042fe:	f000 fe17 	bl	8004f30 <vPortFree>
            vPortFree( pxTCB );
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	0018      	movs	r0, r3
 8004306:	f000 fe13 	bl	8004f30 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <prvResetNextTaskUnblockTime+0x2c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d104      	bne.n	800432c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <prvResetNextTaskUnblockTime+0x30>)
 8004324:	2201      	movs	r2, #1
 8004326:	4252      	negs	r2, r2
 8004328:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800432a:	e005      	b.n	8004338 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800432c:	4b04      	ldr	r3, [pc, #16]	; (8004340 <prvResetNextTaskUnblockTime+0x2c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b03      	ldr	r3, [pc, #12]	; (8004344 <prvResetNextTaskUnblockTime+0x30>)
 8004336:	601a      	str	r2, [r3, #0]
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	200001ec 	.word	0x200001ec
 8004344:	20000254 	.word	0x20000254

08004348 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <xTaskGetSchedulerState+0x30>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004356:	2301      	movs	r3, #1
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	e008      	b.n	800436e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800435c:	4b07      	ldr	r3, [pc, #28]	; (800437c <xTaskGetSchedulerState+0x34>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004364:	2302      	movs	r3, #2
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	e001      	b.n	800436e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800436e:	687b      	ldr	r3, [r7, #4]
    }
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000240 	.word	0x20000240
 800437c:	2000025c 	.word	0x2000025c

08004380 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d06a      	beq.n	800446c <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004396:	4b38      	ldr	r3, [pc, #224]	; (8004478 <xTaskPriorityDisinherit+0xf8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <xTaskPriorityDisinherit+0x24>
 80043a0:	b672      	cpsid	i
 80043a2:	e7fe      	b.n	80043a2 <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <xTaskPriorityDisinherit+0x30>
 80043ac:	b672      	cpsid	i
 80043ae:	e7fe      	b.n	80043ae <xTaskPriorityDisinherit+0x2e>
            ( pxTCB->uxMutexesHeld )--;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b4:	1e5a      	subs	r2, r3, #1
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d052      	beq.n	800446c <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d14e      	bne.n	800446c <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3304      	adds	r3, #4
 80043d2:	0018      	movs	r0, r3
 80043d4:	f7fe fca1 	bl	8002d1a <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	2205      	movs	r2, #5
 80043e6:	1ad2      	subs	r2, r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f0:	4b22      	ldr	r3, [pc, #136]	; (800447c <xTaskPriorityDisinherit+0xfc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d903      	bls.n	8004400 <xTaskPriorityDisinherit+0x80>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	4b1f      	ldr	r3, [pc, #124]	; (800447c <xTaskPriorityDisinherit+0xfc>)
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	491e      	ldr	r1, [pc, #120]	; (8004480 <xTaskPriorityDisinherit+0x100>)
 8004406:	0013      	movs	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	189b      	adds	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	18cb      	adds	r3, r1, r3
 8004410:	3304      	adds	r3, #4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	60da      	str	r2, [r3, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	3204      	adds	r2, #4
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1d1a      	adds	r2, r3, #4
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	609a      	str	r2, [r3, #8]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443a:	0013      	movs	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	189b      	adds	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4a0f      	ldr	r2, [pc, #60]	; (8004480 <xTaskPriorityDisinherit+0x100>)
 8004444:	189a      	adds	r2, r3, r2
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	615a      	str	r2, [r3, #20]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444e:	490c      	ldr	r1, [pc, #48]	; (8004480 <xTaskPriorityDisinherit+0x100>)
 8004450:	0013      	movs	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	189b      	adds	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	585b      	ldr	r3, [r3, r1]
 800445a:	1c58      	adds	r0, r3, #1
 800445c:	4908      	ldr	r1, [pc, #32]	; (8004480 <xTaskPriorityDisinherit+0x100>)
 800445e:	0013      	movs	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	189b      	adds	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004468:	2301      	movs	r3, #1
 800446a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800446c:	697b      	ldr	r3, [r7, #20]
    }
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b006      	add	sp, #24
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	2000015c 	.word	0x2000015c
 800447c:	2000023c 	.word	0x2000023c
 8004480:	20000160 	.word	0x20000160

08004484 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800448e:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004494:	4b2d      	ldr	r3, [pc, #180]	; (800454c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3304      	adds	r3, #4
 800449a:	0018      	movs	r0, r3
 800449c:	f7fe fc3d 	bl	8002d1a <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3301      	adds	r3, #1
 80044a4:	d124      	bne.n	80044f0 <prvAddCurrentTaskToDelayedList+0x6c>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d021      	beq.n	80044f0 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ac:	4b28      	ldr	r3, [pc, #160]	; (8004550 <prvAddCurrentTaskToDelayedList+0xcc>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <prvAddCurrentTaskToDelayedList+0xc8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <prvAddCurrentTaskToDelayedList+0xc8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	6892      	ldr	r2, [r2, #8]
 80044c2:	60da      	str	r2, [r3, #12]
 80044c4:	4b21      	ldr	r3, [pc, #132]	; (800454c <prvAddCurrentTaskToDelayedList+0xc8>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	3204      	adds	r2, #4
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	4b1e      	ldr	r3, [pc, #120]	; (800454c <prvAddCurrentTaskToDelayedList+0xc8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	1d1a      	adds	r2, r3, #4
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	4b1c      	ldr	r3, [pc, #112]	; (800454c <prvAddCurrentTaskToDelayedList+0xc8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <prvAddCurrentTaskToDelayedList+0xcc>)
 80044e0:	615a      	str	r2, [r3, #20]
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <prvAddCurrentTaskToDelayedList+0xcc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <prvAddCurrentTaskToDelayedList+0xcc>)
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80044ee:	e026      	b.n	800453e <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	18d3      	adds	r3, r2, r3
 80044f6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <prvAddCurrentTaskToDelayedList+0xc8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	429a      	cmp	r2, r3
 8004506:	d209      	bcs.n	800451c <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <prvAddCurrentTaskToDelayedList+0xd0>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <prvAddCurrentTaskToDelayedList+0xc8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3304      	adds	r3, #4
 8004512:	0019      	movs	r1, r3
 8004514:	0010      	movs	r0, r2
 8004516:	f7fe fbca 	bl	8002cae <vListInsert>
}
 800451a:	e010      	b.n	800453e <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800451c:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <prvAddCurrentTaskToDelayedList+0xd4>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3304      	adds	r3, #4
 8004526:	0019      	movs	r1, r3
 8004528:	0010      	movs	r0, r2
 800452a:	f7fe fbc0 	bl	8002cae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	429a      	cmp	r2, r3
 8004536:	d202      	bcs.n	800453e <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <prvAddCurrentTaskToDelayedList+0xd8>)
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	601a      	str	r2, [r3, #0]
}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	46bd      	mov	sp, r7
 8004542:	b006      	add	sp, #24
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	20000238 	.word	0x20000238
 800454c:	2000015c 	.word	0x2000015c
 8004550:	20000220 	.word	0x20000220
 8004554:	200001f0 	.word	0x200001f0
 8004558:	200001ec 	.word	0x200001ec
 800455c:	20000254 	.word	0x20000254

08004560 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800456a:	f000 fac9 	bl	8004b00 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800456e:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <xTimerCreateTimerTask+0x44>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004576:	490c      	ldr	r1, [pc, #48]	; (80045a8 <xTimerCreateTimerTask+0x48>)
 8004578:	480c      	ldr	r0, [pc, #48]	; (80045ac <xTimerCreateTimerTask+0x4c>)
 800457a:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <xTimerCreateTimerTask+0x50>)
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	2302      	movs	r3, #2
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	2300      	movs	r3, #0
 8004584:	2250      	movs	r2, #80	; 0x50
 8004586:	f7ff f892 	bl	80036ae <xTaskCreate>
 800458a:	0003      	movs	r3, r0
 800458c:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <xTimerCreateTimerTask+0x38>
 8004594:	b672      	cpsid	i
 8004596:	e7fe      	b.n	8004596 <xTimerCreateTimerTask+0x36>
        return xReturn;
 8004598:	687b      	ldr	r3, [r7, #4]
    }
 800459a:	0018      	movs	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	b002      	add	sp, #8
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	20000290 	.word	0x20000290
 80045a8:	0800520c 	.word	0x0800520c
 80045ac:	08004795 	.word	0x08004795
 80045b0:	20000294 	.word	0x20000294

080045b4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80045b4:	b590      	push	{r4, r7, lr}
 80045b6:	b089      	sub	sp, #36	; 0x24
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80045c2:	202c      	movs	r0, #44	; 0x2c
 80045c4:	f000 fc0c 	bl	8004de0 <pvPortMalloc>
 80045c8:	0003      	movs	r3, r0
 80045ca:	617b      	str	r3, [r7, #20]

            if( pxNewTimer != NULL )
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00e      	beq.n	80045f0 <xTimerCreate+0x3c>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2228      	movs	r2, #40	; 0x28
 80045d6:	2100      	movs	r1, #0
 80045d8:	5499      	strb	r1, [r3, r2]
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80045da:	683c      	ldr	r4, [r7, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	0023      	movs	r3, r4
 80045ec:	f000 f805 	bl	80045fa <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80045f0:	697b      	ldr	r3, [r7, #20]
        }
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b007      	add	sp, #28
 80045f8:	bd90      	pop	{r4, r7, pc}

080045fa <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <prvInitialiseNewTimer+0x18>
 800460e:	b672      	cpsid	i
 8004610:	e7fe      	b.n	8004610 <prvInitialiseNewTimer+0x16>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8004612:	f000 fa75 	bl	8004b00 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3304      	adds	r3, #4
 8004632:	0018      	movs	r0, r3
 8004634:	f7fe fb30 	bl	8002c98 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <prvInitialiseNewTimer+0x56>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	2228      	movs	r2, #40	; 0x28
 8004642:	5c9b      	ldrb	r3, [r3, r2]
 8004644:	2204      	movs	r2, #4
 8004646:	4313      	orrs	r3, r2
 8004648:	b2d9      	uxtb	r1, r3
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	2228      	movs	r2, #40	; 0x28
 800464e:	5499      	strb	r1, [r3, r2]
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b004      	add	sp, #16
 8004656:	bd80      	pop	{r7, pc}

08004658 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004658:	b590      	push	{r4, r7, lr}
 800465a:	b089      	sub	sp, #36	; 0x24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <xTimerGenericCommand+0x1c>
 8004670:	b672      	cpsid	i
 8004672:	e7fe      	b.n	8004672 <xTimerGenericCommand+0x1a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004674:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <xTimerGenericCommand+0x90>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d030      	beq.n	80046de <xTimerGenericCommand+0x86>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800467c:	2410      	movs	r4, #16
 800467e:	193b      	adds	r3, r7, r4
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	601a      	str	r2, [r3, #0]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004684:	193b      	adds	r3, r7, r4
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	605a      	str	r2, [r3, #4]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800468a:	193b      	adds	r3, r7, r4
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	609a      	str	r2, [r3, #8]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b05      	cmp	r3, #5
 8004694:	dc19      	bgt.n	80046ca <xTimerGenericCommand+0x72>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004696:	f7ff fe57 	bl	8004348 <xTaskGetSchedulerState>
 800469a:	0003      	movs	r3, r0
 800469c:	2b02      	cmp	r3, #2
 800469e:	d109      	bne.n	80046b4 <xTimerGenericCommand+0x5c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046a0:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <xTimerGenericCommand+0x90>)
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a6:	1939      	adds	r1, r7, r4
 80046a8:	2300      	movs	r3, #0
 80046aa:	f7fe fc6c 	bl	8002f86 <xQueueGenericSend>
 80046ae:	0003      	movs	r3, r0
 80046b0:	61fb      	str	r3, [r7, #28]
 80046b2:	e014      	b.n	80046de <xTimerGenericCommand+0x86>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <xTimerGenericCommand+0x90>)
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	2310      	movs	r3, #16
 80046ba:	18f9      	adds	r1, r7, r3
 80046bc:	2300      	movs	r3, #0
 80046be:	2200      	movs	r2, #0
 80046c0:	f7fe fc61 	bl	8002f86 <xQueueGenericSend>
 80046c4:	0003      	movs	r3, r0
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	e009      	b.n	80046de <xTimerGenericCommand+0x86>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <xTimerGenericCommand+0x90>)
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	2310      	movs	r3, #16
 80046d2:	18f9      	adds	r1, r7, r3
 80046d4:	2300      	movs	r3, #0
 80046d6:	f7fe fd1a 	bl	800310e <xQueueGenericSendFromISR>
 80046da:	0003      	movs	r3, r0
 80046dc:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80046de:	69fb      	ldr	r3, [r7, #28]
    }
 80046e0:	0018      	movs	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b009      	add	sp, #36	; 0x24
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	20000290 	.word	0x20000290

080046ec <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80046f8:	e009      	b.n	800470e <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	18d3      	adds	r3, r2, r3
 8004702:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	0010      	movs	r0, r2
 800470c:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	18d1      	adds	r1, r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f8d8 	bl	80048d0 <prvInsertTimerInActiveList>
 8004720:	1e03      	subs	r3, r0, #0
 8004722:	d1ea      	bne.n	80046fa <prvReloadTimer+0xe>
        }
    }
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b004      	add	sp, #16
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <prvProcessExpiredTimer+0x60>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3304      	adds	r3, #4
 8004748:	0018      	movs	r0, r3
 800474a:	f7fe fae6 	bl	8002d1a <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2228      	movs	r2, #40	; 0x28
 8004752:	5c9b      	ldrb	r3, [r3, r2]
 8004754:	001a      	movs	r2, r3
 8004756:	2304      	movs	r3, #4
 8004758:	4013      	ands	r3, r2
 800475a:	d006      	beq.n	800476a <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	0018      	movs	r0, r3
 8004764:	f7ff ffc2 	bl	80046ec <prvReloadTimer>
 8004768:	e008      	b.n	800477c <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2228      	movs	r2, #40	; 0x28
 800476e:	5c9b      	ldrb	r3, [r3, r2]
 8004770:	2201      	movs	r2, #1
 8004772:	4393      	bics	r3, r2
 8004774:	b2d9      	uxtb	r1, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2228      	movs	r2, #40	; 0x28
 800477a:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	0010      	movs	r0, r2
 8004784:	4798      	blx	r3
    }
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	46bd      	mov	sp, r7
 800478a:	b004      	add	sp, #16
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	20000288 	.word	0x20000288

08004794 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800479c:	2308      	movs	r3, #8
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 f853 	bl	800484c <prvGetNextExpireTime>
 80047a6:	0003      	movs	r3, r0
 80047a8:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	0011      	movs	r1, r2
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 f803 	bl	80047bc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80047b6:	f000 f8cd 	bl	8004954 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047ba:	e7ef      	b.n	800479c <prvTimerTask+0x8>

080047bc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80047c6:	f7ff f90f 	bl	80039e8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047ca:	2308      	movs	r3, #8
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	0018      	movs	r0, r3
 80047d0:	f000 f85e 	bl	8004890 <prvSampleTimeNow>
 80047d4:	0003      	movs	r3, r0
 80047d6:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d12b      	bne.n	8004836 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10c      	bne.n	80047fe <prvProcessTimerOrBlockTask+0x42>
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d808      	bhi.n	80047fe <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80047ec:	f7ff f908 	bl	8003a00 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0011      	movs	r1, r2
 80047f6:	0018      	movs	r0, r3
 80047f8:	f7ff ff9a 	bl	8004730 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80047fc:	e01d      	b.n	800483a <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <prvProcessTimerOrBlockTask+0x88>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <prvProcessTimerOrBlockTask+0x56>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <prvProcessTimerOrBlockTask+0x58>
 8004812:	2300      	movs	r3, #0
 8004814:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004816:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <prvProcessTimerOrBlockTask+0x8c>)
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	0019      	movs	r1, r3
 8004824:	f7fe ff10 	bl	8003648 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004828:	f7ff f8ea 	bl	8003a00 <xTaskResumeAll>
 800482c:	1e03      	subs	r3, r0, #0
 800482e:	d104      	bne.n	800483a <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8004830:	f000 fa2e 	bl	8004c90 <vPortYield>
    }
 8004834:	e001      	b.n	800483a <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8004836:	f7ff f8e3 	bl	8003a00 <xTaskResumeAll>
    }
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	46bd      	mov	sp, r7
 800483e:	b004      	add	sp, #16
 8004840:	bd80      	pop	{r7, pc}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	2000028c 	.word	0x2000028c
 8004848:	20000290 	.word	0x20000290

0800484c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004854:	4b0d      	ldr	r3, [pc, #52]	; (800488c <prvGetNextExpireTime+0x40>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <prvGetNextExpireTime+0x16>
 800485e:	2201      	movs	r2, #1
 8004860:	e000      	b.n	8004864 <prvGetNextExpireTime+0x18>
 8004862:	2200      	movs	r2, #0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d105      	bne.n	800487c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <prvGetNextExpireTime+0x40>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	e001      	b.n	8004880 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004880:	68fb      	ldr	r3, [r7, #12]
    }
 8004882:	0018      	movs	r0, r3
 8004884:	46bd      	mov	sp, r7
 8004886:	b004      	add	sp, #16
 8004888:	bd80      	pop	{r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	20000288 	.word	0x20000288

08004890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004898:	f7ff f99a 	bl	8003bd0 <xTaskGetTickCount>
 800489c:	0003      	movs	r3, r0
 800489e:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <prvSampleTimeNow+0x3c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d205      	bcs.n	80048b6 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 80048aa:	f000 f901 	bl	8004ab0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e002      	b.n	80048bc <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80048bc:	4b03      	ldr	r3, [pc, #12]	; (80048cc <prvSampleTimeNow+0x3c>)
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 80048c2:	68fb      	ldr	r3, [r7, #12]
    }
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b004      	add	sp, #16
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000298 	.word	0x20000298

080048d0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d812      	bhi.n	800491c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	1ad2      	subs	r2, r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	429a      	cmp	r2, r3
 8004902:	d302      	bcc.n	800490a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e01b      	b.n	8004942 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <prvInsertTimerInActiveList+0x7c>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3304      	adds	r3, #4
 8004912:	0019      	movs	r1, r3
 8004914:	0010      	movs	r0, r2
 8004916:	f7fe f9ca 	bl	8002cae <vListInsert>
 800491a:	e012      	b.n	8004942 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d206      	bcs.n	8004932 <prvInsertTimerInActiveList+0x62>
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e007      	b.n	8004942 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <prvInsertTimerInActiveList+0x80>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3304      	adds	r3, #4
 800493a:	0019      	movs	r1, r3
 800493c:	0010      	movs	r0, r2
 800493e:	f7fe f9b6 	bl	8002cae <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004942:	697b      	ldr	r3, [r7, #20]
    }
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	b006      	add	sp, #24
 800494a:	bd80      	pop	{r7, pc}
 800494c:	2000028c 	.word	0x2000028c
 8004950:	20000288 	.word	0x20000288

08004954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800495a:	e095      	b.n	8004a88 <prvProcessReceivedCommands+0x134>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800495c:	1d3b      	adds	r3, r7, #4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	da00      	bge.n	8004966 <prvProcessReceivedCommands+0x12>
 8004964:	e08f      	b.n	8004a86 <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004966:	1d3b      	adds	r3, r7, #4
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	3304      	adds	r3, #4
 8004978:	0018      	movs	r0, r3
 800497a:	f7fe f9ce 	bl	8002d1a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800497e:	003b      	movs	r3, r7
 8004980:	0018      	movs	r0, r3
 8004982:	f7ff ff85 	bl	8004890 <prvSampleTimeNow>
 8004986:	0003      	movs	r3, r0
 8004988:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b09      	cmp	r3, #9
 8004990:	d900      	bls.n	8004994 <prvProcessReceivedCommands+0x40>
 8004992:	e079      	b.n	8004a88 <prvProcessReceivedCommands+0x134>
 8004994:	009a      	lsls	r2, r3, #2
 8004996:	4b44      	ldr	r3, [pc, #272]	; (8004aa8 <prvProcessReceivedCommands+0x154>)
 8004998:	18d3      	adds	r3, r2, r3
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2228      	movs	r2, #40	; 0x28
 80049a2:	5c9b      	ldrb	r3, [r3, r2]
 80049a4:	2201      	movs	r2, #1
 80049a6:	4313      	orrs	r3, r2
 80049a8:	b2d9      	uxtb	r1, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2228      	movs	r2, #40	; 0x28
 80049ae:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049b0:	1d3b      	adds	r3, r7, #4
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	18d1      	adds	r1, r2, r3
 80049ba:	1d3b      	adds	r3, r7, #4
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	6978      	ldr	r0, [r7, #20]
 80049c2:	f7ff ff85 	bl	80048d0 <prvInsertTimerInActiveList>
 80049c6:	1e03      	subs	r3, r0, #0
 80049c8:	d05e      	beq.n	8004a88 <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2228      	movs	r2, #40	; 0x28
 80049ce:	5c9b      	ldrb	r3, [r3, r2]
 80049d0:	001a      	movs	r2, r3
 80049d2:	2304      	movs	r3, #4
 80049d4:	4013      	ands	r3, r2
 80049d6:	d00a      	beq.n	80049ee <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80049d8:	1d3b      	adds	r3, r7, #4
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	18d1      	adds	r1, r2, r3
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f7ff fe80 	bl	80046ec <prvReloadTimer>
 80049ec:	e008      	b.n	8004a00 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2228      	movs	r2, #40	; 0x28
 80049f2:	5c9b      	ldrb	r3, [r3, r2]
 80049f4:	2201      	movs	r2, #1
 80049f6:	4393      	bics	r3, r2
 80049f8:	b2d9      	uxtb	r1, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2228      	movs	r2, #40	; 0x28
 80049fe:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	0010      	movs	r0, r2
 8004a08:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004a0a:	e03d      	b.n	8004a88 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2228      	movs	r2, #40	; 0x28
 8004a10:	5c9b      	ldrb	r3, [r3, r2]
 8004a12:	2201      	movs	r2, #1
 8004a14:	4393      	bics	r3, r2
 8004a16:	b2d9      	uxtb	r1, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2228      	movs	r2, #40	; 0x28
 8004a1c:	5499      	strb	r1, [r3, r2]
                        break;
 8004a1e:	e033      	b.n	8004a88 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2228      	movs	r2, #40	; 0x28
 8004a24:	5c9b      	ldrb	r3, [r3, r2]
 8004a26:	2201      	movs	r2, #1
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	b2d9      	uxtb	r1, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2228      	movs	r2, #40	; 0x28
 8004a30:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a32:	1d3b      	adds	r3, r7, #4
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <prvProcessReceivedCommands+0xf2>
 8004a42:	b672      	cpsid	i
 8004a44:	e7fe      	b.n	8004a44 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	18d1      	adds	r1, r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	6978      	ldr	r0, [r7, #20]
 8004a54:	f7ff ff3c 	bl	80048d0 <prvInsertTimerInActiveList>
                        break;
 8004a58:	e016      	b.n	8004a88 <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2228      	movs	r2, #40	; 0x28
 8004a5e:	5c9b      	ldrb	r3, [r3, r2]
 8004a60:	001a      	movs	r2, r3
 8004a62:	2302      	movs	r3, #2
 8004a64:	4013      	ands	r3, r2
 8004a66:	d104      	bne.n	8004a72 <prvProcessReceivedCommands+0x11e>
                            {
                                vPortFree( pxTimer );
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f000 fa60 	bl	8004f30 <vPortFree>
 8004a70:	e00a      	b.n	8004a88 <prvProcessReceivedCommands+0x134>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2228      	movs	r2, #40	; 0x28
 8004a76:	5c9b      	ldrb	r3, [r3, r2]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4393      	bics	r3, r2
 8004a7c:	b2d9      	uxtb	r1, r3
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2228      	movs	r2, #40	; 0x28
 8004a82:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004a84:	e000      	b.n	8004a88 <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004a86:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <prvProcessReceivedCommands+0x158>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	1d39      	adds	r1, r7, #4
 8004a8e:	2200      	movs	r2, #0
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7fe fbc2 	bl	800321a <xQueueReceive>
 8004a96:	1e03      	subs	r3, r0, #0
 8004a98:	d000      	beq.n	8004a9c <prvProcessReceivedCommands+0x148>
 8004a9a:	e75f      	b.n	800495c <prvProcessReceivedCommands+0x8>
        }
    }
 8004a9c:	46c0      	nop			; (mov r8, r8)
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b006      	add	sp, #24
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	080052a4 	.word	0x080052a4
 8004aac:	20000290 	.word	0x20000290

08004ab0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ab6:	e00b      	b.n	8004ad0 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <prvSwitchTimerLists+0x48>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	425a      	negs	r2, r3
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	0011      	movs	r1, r2
 8004aca:	0018      	movs	r0, r3
 8004acc:	f7ff fe30 	bl	8004730 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <prvSwitchTimerLists+0x48>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1ee      	bne.n	8004ab8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <prvSwitchTimerLists+0x48>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <prvSwitchTimerLists+0x4c>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <prvSwitchTimerLists+0x48>)
 8004ae6:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8004ae8:	4b04      	ldr	r3, [pc, #16]	; (8004afc <prvSwitchTimerLists+0x4c>)
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	601a      	str	r2, [r3, #0]
    }
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	20000288 	.word	0x20000288
 8004afc:	2000028c 	.word	0x2000028c

08004b00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004b04:	f000 f8d4 	bl	8004cb0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004b08:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <prvCheckForValidListAndQueue+0x5c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d120      	bne.n	8004b52 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8004b10:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <prvCheckForValidListAndQueue+0x60>)
 8004b12:	0018      	movs	r0, r3
 8004b14:	f7fe f8a2 	bl	8002c5c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004b18:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <prvCheckForValidListAndQueue+0x64>)
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f7fe f89e 	bl	8002c5c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004b20:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <prvCheckForValidListAndQueue+0x68>)
 8004b22:	4a0f      	ldr	r2, [pc, #60]	; (8004b60 <prvCheckForValidListAndQueue+0x60>)
 8004b24:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004b26:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <prvCheckForValidListAndQueue+0x6c>)
 8004b28:	4a0e      	ldr	r2, [pc, #56]	; (8004b64 <prvCheckForValidListAndQueue+0x64>)
 8004b2a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	210c      	movs	r1, #12
 8004b30:	2005      	movs	r0, #5
 8004b32:	f7fe f9a3 	bl	8002e7c <xQueueGenericCreate>
 8004b36:	0002      	movs	r2, r0
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <prvCheckForValidListAndQueue+0x5c>)
 8004b3a:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <prvCheckForValidListAndQueue+0x5c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d006      	beq.n	8004b52 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <prvCheckForValidListAndQueue+0x5c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <prvCheckForValidListAndQueue+0x70>)
 8004b4a:	0011      	movs	r1, r2
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7fe fd37 	bl	80035c0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b52:	f000 f8bf 	bl	8004cd4 <vPortExitCritical>
    }
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000290 	.word	0x20000290
 8004b60:	20000260 	.word	0x20000260
 8004b64:	20000274 	.word	0x20000274
 8004b68:	20000288 	.word	0x20000288
 8004b6c:	2000028c 	.word	0x2000028c
 8004b70:	08005214 	.word	0x08005214

08004b74 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3b04      	subs	r3, #4
 8004b84:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2280      	movs	r2, #128	; 0x80
 8004b8a:	0452      	lsls	r2, r2, #17
 8004b8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3b04      	subs	r3, #4
 8004b92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3b04      	subs	r3, #4
 8004b9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8004ba0:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <pxPortInitialiseStack+0x50>)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3b14      	subs	r3, #20
 8004baa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3b20      	subs	r3, #32
 8004bb6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
}
 8004bba:	0018      	movs	r0, r3
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	b004      	add	sp, #16
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	08004bc9 	.word	0x08004bc9

08004bc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <prvTaskExitError+0x2c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	d001      	beq.n	8004bde <prvTaskExitError+0x16>
 8004bda:	b672      	cpsid	i
 8004bdc:	e7fe      	b.n	8004bdc <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8004bde:	b672      	cpsid	i

    while( ulDummy == 0 )
 8004be0:	46c0      	nop			; (mov r8, r8)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0fc      	beq.n	8004be2 <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004be8:	46c0      	nop			; (mov r8, r8)
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b002      	add	sp, #8
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	20000010 	.word	0x20000010

08004bf8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8004bfc:	46c0      	nop			; (mov r8, r8)
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8004c10:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <pxCurrentTCBConst2>)
 8004c12:	6813      	ldr	r3, [r2, #0]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	3020      	adds	r0, #32
 8004c18:	f380 8809 	msr	PSP, r0
 8004c1c:	2002      	movs	r0, #2
 8004c1e:	f380 8814 	msr	CONTROL, r0
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004c28:	46ae      	mov	lr, r5
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	bc04      	pop	{r2}
 8004c2e:	b662      	cpsie	i
 8004c30:	4718      	bx	r3
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	46c0      	nop			; (mov r8, r8)

08004c40 <pxCurrentTCBConst2>:
 8004c40:	2000015c 	.word	0x2000015c
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46c0      	nop			; (mov r8, r8)

08004c48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <xPortStartScheduler+0x40>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <xPortStartScheduler+0x40>)
 8004c52:	21ff      	movs	r1, #255	; 0xff
 8004c54:	0409      	lsls	r1, r1, #16
 8004c56:	430a      	orrs	r2, r1
 8004c58:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <xPortStartScheduler+0x40>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <xPortStartScheduler+0x40>)
 8004c60:	21ff      	movs	r1, #255	; 0xff
 8004c62:	0609      	lsls	r1, r1, #24
 8004c64:	430a      	orrs	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004c68:	f000 f898 	bl	8004d9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004c6c:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <xPortStartScheduler+0x44>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8004c72:	f7ff ffcd 	bl	8004c10 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004c76:	f7ff f8cf 	bl	8003e18 <vTaskSwitchContext>
    prvTaskExitError();
 8004c7a:	f7ff ffa5 	bl	8004bc8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	e000ed20 	.word	0xe000ed20
 8004c8c:	20000010 	.word	0x20000010

08004c90 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <vPortYield+0x1c>)
 8004c96:	2280      	movs	r2, #128	; 0x80
 8004c98:	0552      	lsls	r2, r2, #21
 8004c9a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8004c9c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004ca0:	f3bf 8f6f 	isb	sy
}
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	e000ed04 	.word	0xe000ed04

08004cb0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004cb4:	b672      	cpsid	i
    uxCriticalNesting++;
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <vPortEnterCritical+0x20>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <vPortEnterCritical+0x20>)
 8004cbe:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8004cc0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004cc4:	f3bf 8f6f 	isb	sy
}
 8004cc8:	46c0      	nop			; (mov r8, r8)
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	20000010 	.word	0x20000010

08004cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <vPortExitCritical+0x2c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <vPortExitCritical+0x10>
 8004ce0:	b672      	cpsid	i
 8004ce2:	e7fe      	b.n	8004ce2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <vPortExitCritical+0x2c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	1e5a      	subs	r2, r3, #1
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <vPortExitCritical+0x2c>)
 8004cec:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8004cee:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <vPortExitCritical+0x2c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d100      	bne.n	8004cf8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004cf6:	b662      	cpsie	i
    }
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	20000010 	.word	0x20000010

08004d04 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8004d04:	f3ef 8010 	mrs	r0, PRIMASK
 8004d08:	b672      	cpsid	i
 8004d0a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004d0c:	46c0      	nop			; (mov r8, r8)
 8004d0e:	0018      	movs	r0, r3

08004d10 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8004d10:	f380 8810 	msr	PRIMASK, r0
 8004d14:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004d16:	46c0      	nop			; (mov r8, r8)
	...

08004d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004d20:	f3ef 8009 	mrs	r0, PSP
 8004d24:	4b0e      	ldr	r3, [pc, #56]	; (8004d60 <pxCurrentTCBConst>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	3820      	subs	r0, #32
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004d2e:	4644      	mov	r4, r8
 8004d30:	464d      	mov	r5, r9
 8004d32:	4656      	mov	r6, sl
 8004d34:	465f      	mov	r7, fp
 8004d36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004d38:	b508      	push	{r3, lr}
 8004d3a:	b672      	cpsid	i
 8004d3c:	f7ff f86c 	bl	8003e18 <vTaskSwitchContext>
 8004d40:	b662      	cpsie	i
 8004d42:	bc0c      	pop	{r2, r3}
 8004d44:	6811      	ldr	r1, [r2, #0]
 8004d46:	6808      	ldr	r0, [r1, #0]
 8004d48:	3010      	adds	r0, #16
 8004d4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004d4c:	46a0      	mov	r8, r4
 8004d4e:	46a9      	mov	r9, r5
 8004d50:	46b2      	mov	sl, r6
 8004d52:	46bb      	mov	fp, r7
 8004d54:	f380 8809 	msr	PSP, r0
 8004d58:	3820      	subs	r0, #32
 8004d5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004d5c:	4718      	bx	r3
 8004d5e:	46c0      	nop			; (mov r8, r8)

08004d60 <pxCurrentTCBConst>:
 8004d60:	2000015c 	.word	0x2000015c
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8004d64:	46c0      	nop			; (mov r8, r8)
 8004d66:	46c0      	nop			; (mov r8, r8)

08004d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d6e:	f7ff ffc9 	bl	8004d04 <ulSetInterruptMaskFromISR>
 8004d72:	0003      	movs	r3, r0
 8004d74:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d76:	f7fe ff43 	bl	8003c00 <xTaskIncrementTick>
 8004d7a:	1e03      	subs	r3, r0, #0
 8004d7c:	d003      	beq.n	8004d86 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <SysTick_Handler+0x30>)
 8004d80:	2280      	movs	r2, #128	; 0x80
 8004d82:	0552      	lsls	r2, r2, #21
 8004d84:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f7ff ffc1 	bl	8004d10 <vClearInterruptMaskFromISR>
}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b002      	add	sp, #8
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <vPortSetupTimerInterrupt+0x34>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <vPortSetupTimerInterrupt+0x38>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dac:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <vPortSetupTimerInterrupt+0x3c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	22fa      	movs	r2, #250	; 0xfa
 8004db2:	0091      	lsls	r1, r2, #2
 8004db4:	0018      	movs	r0, r3
 8004db6:	f7fb f9a7 	bl	8000108 <__udivsi3>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	001a      	movs	r2, r3
 8004dbe:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <vPortSetupTimerInterrupt+0x40>)
 8004dc0:	3a01      	subs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dc4:	4b02      	ldr	r3, [pc, #8]	; (8004dd0 <vPortSetupTimerInterrupt+0x34>)
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	601a      	str	r2, [r3, #0]
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	e000e010 	.word	0xe000e010
 8004dd4:	e000e018 	.word	0xe000e018
 8004dd8:	20000000 	.word	0x20000000
 8004ddc:	e000e014 	.word	0xe000e014

08004de0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004dec:	f7fe fdfc 	bl	80039e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004df0:	4b4a      	ldr	r3, [pc, #296]	; (8004f1c <pvPortMalloc+0x13c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004df8:	f000 f8e6 	bl	8004fc8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d012      	beq.n	8004e28 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004e02:	2208      	movs	r2, #8
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2107      	movs	r1, #7
 8004e08:	400b      	ands	r3, r1
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	43db      	mvns	r3, r3
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d804      	bhi.n	8004e24 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	18d3      	adds	r3, r2, r3
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	e001      	b.n	8004e28 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	db68      	blt.n	8004f00 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d065      	beq.n	8004f00 <pvPortMalloc+0x120>
 8004e34:	4b3a      	ldr	r3, [pc, #232]	; (8004f20 <pvPortMalloc+0x140>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d860      	bhi.n	8004f00 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004e3e:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <pvPortMalloc+0x144>)
 8004e40:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8004e42:	4b38      	ldr	r3, [pc, #224]	; (8004f24 <pvPortMalloc+0x144>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e48:	e004      	b.n	8004e54 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d903      	bls.n	8004e66 <pvPortMalloc+0x86>
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f1      	bne.n	8004e4a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004e66:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <pvPortMalloc+0x13c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d047      	beq.n	8004f00 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2208      	movs	r2, #8
 8004e76:	189b      	adds	r3, r3, r2
 8004e78:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	1ad2      	subs	r2, r2, r3
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d916      	bls.n	8004ec0 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	18d3      	adds	r3, r2, r3
 8004e98:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d001      	beq.n	8004ea6 <pvPortMalloc+0xc6>
 8004ea2:	b672      	cpsid	i
 8004ea4:	e7fe      	b.n	8004ea4 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	1ad2      	subs	r2, r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f000 f8de 	bl	800507c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ec0:	4b17      	ldr	r3, [pc, #92]	; (8004f20 <pvPortMalloc+0x140>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	1ad2      	subs	r2, r2, r3
 8004eca:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <pvPortMalloc+0x140>)
 8004ecc:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ece:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <pvPortMalloc+0x140>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <pvPortMalloc+0x148>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d203      	bcs.n	8004ee2 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004eda:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <pvPortMalloc+0x140>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <pvPortMalloc+0x148>)
 8004ee0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2280      	movs	r2, #128	; 0x80
 8004ee8:	0612      	lsls	r2, r2, #24
 8004eea:	431a      	orrs	r2, r3
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <pvPortMalloc+0x14c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <pvPortMalloc+0x14c>)
 8004efe:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004f00:	f7fe fd7e 	bl	8003a00 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2207      	movs	r2, #7
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d001      	beq.n	8004f10 <pvPortMalloc+0x130>
 8004f0c:	b672      	cpsid	i
 8004f0e:	e7fe      	b.n	8004f0e <pvPortMalloc+0x12e>
    return pvReturn;
 8004f10:	697b      	ldr	r3, [r7, #20]
}
 8004f12:	0018      	movs	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b008      	add	sp, #32
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	20001c08 	.word	0x20001c08
 8004f20:	20001c0c 	.word	0x20001c0c
 8004f24:	20001c00 	.word	0x20001c00
 8004f28:	20001c10 	.word	0x20001c10
 8004f2c:	20001c14 	.word	0x20001c14

08004f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d039      	beq.n	8004fb6 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004f42:	2308      	movs	r3, #8
 8004f44:	425b      	negs	r3, r3
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	18d3      	adds	r3, r2, r3
 8004f4a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	db01      	blt.n	8004f5c <vPortFree+0x2c>
 8004f58:	b672      	cpsid	i
 8004f5a:	e7fe      	b.n	8004f5a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <vPortFree+0x38>
 8004f64:	b672      	cpsid	i
 8004f66:	e7fe      	b.n	8004f66 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	0fdb      	lsrs	r3, r3, #31
 8004f6e:	1c1a      	adds	r2, r3, #0
 8004f70:	2301      	movs	r3, #1
 8004f72:	4013      	ands	r3, r2
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d01d      	beq.n	8004fb6 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d119      	bne.n	8004fb6 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	085a      	lsrs	r2, r3, #1
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004f8e:	f7fe fd2b 	bl	80039e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <vPortFree+0x90>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	18d2      	adds	r2, r2, r3
 8004f9c:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <vPortFree+0x90>)
 8004f9e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f000 f86a 	bl	800507c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <vPortFree+0x94>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <vPortFree+0x94>)
 8004fb0:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8004fb2:	f7fe fd25 	bl	8003a00 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b004      	add	sp, #16
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	20001c0c 	.word	0x20001c0c
 8004fc4:	20001c18 	.word	0x20001c18

08004fc8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fce:	4b25      	ldr	r3, [pc, #148]	; (8005064 <prvHeapInit+0x9c>)
 8004fd0:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004fd2:	4b25      	ldr	r3, [pc, #148]	; (8005068 <prvHeapInit+0xa0>)
 8004fd4:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2207      	movs	r2, #7
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d00c      	beq.n	8004ff8 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3307      	adds	r3, #7
 8004fe2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2207      	movs	r2, #7
 8004fe8:	4393      	bics	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad2      	subs	r2, r2, r3
 8004ff2:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <prvHeapInit+0xa0>)
 8004ff4:	18d3      	adds	r3, r2, r3
 8004ff6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	; (800506c <prvHeapInit+0xa4>)
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005002:	4b1a      	ldr	r3, [pc, #104]	; (800506c <prvHeapInit+0xa4>)
 8005004:	2200      	movs	r2, #0
 8005006:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	18d3      	adds	r3, r2, r3
 800500e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005010:	2208      	movs	r2, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2207      	movs	r2, #7
 800501c:	4393      	bics	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4b13      	ldr	r3, [pc, #76]	; (8005070 <prvHeapInit+0xa8>)
 8005024:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <prvHeapInit+0xa8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <prvHeapInit+0xa8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <prvHeapInit+0xa8>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	4b08      	ldr	r3, [pc, #32]	; (8005074 <prvHeapInit+0xac>)
 8005052:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	4b07      	ldr	r3, [pc, #28]	; (8005078 <prvHeapInit+0xb0>)
 800505a:	601a      	str	r2, [r3, #0]
}
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	46bd      	mov	sp, r7
 8005060:	b004      	add	sp, #16
 8005062:	bd80      	pop	{r7, pc}
 8005064:	00001964 	.word	0x00001964
 8005068:	2000029c 	.word	0x2000029c
 800506c:	20001c00 	.word	0x20001c00
 8005070:	20001c08 	.word	0x20001c08
 8005074:	20001c10 	.word	0x20001c10
 8005078:	20001c0c 	.word	0x20001c0c

0800507c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005084:	4b27      	ldr	r3, [pc, #156]	; (8005124 <prvInsertBlockIntoFreeList+0xa8>)
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e002      	b.n	8005090 <prvInsertBlockIntoFreeList+0x14>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d8f7      	bhi.n	800508a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	18d3      	adds	r3, r2, r3
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d108      	bne.n	80050be <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	18d2      	adds	r2, r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	18d2      	adds	r2, r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d118      	bne.n	8005104 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <prvInsertBlockIntoFreeList+0xac>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d00d      	beq.n	80050fa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	18d2      	adds	r2, r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	e008      	b.n	800510c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <prvInsertBlockIntoFreeList+0xac>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e003      	b.n	800510c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	429a      	cmp	r2, r3
 8005112:	d002      	beq.n	800511a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	46bd      	mov	sp, r7
 800511e:	b004      	add	sp, #16
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	20001c00 	.word	0x20001c00
 8005128:	20001c08 	.word	0x20001c08

0800512c <__libc_init_array>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	2600      	movs	r6, #0
 8005130:	4d0c      	ldr	r5, [pc, #48]	; (8005164 <__libc_init_array+0x38>)
 8005132:	4c0d      	ldr	r4, [pc, #52]	; (8005168 <__libc_init_array+0x3c>)
 8005134:	1b64      	subs	r4, r4, r5
 8005136:	10a4      	asrs	r4, r4, #2
 8005138:	42a6      	cmp	r6, r4
 800513a:	d109      	bne.n	8005150 <__libc_init_array+0x24>
 800513c:	2600      	movs	r6, #0
 800513e:	f000 f82b 	bl	8005198 <_init>
 8005142:	4d0a      	ldr	r5, [pc, #40]	; (800516c <__libc_init_array+0x40>)
 8005144:	4c0a      	ldr	r4, [pc, #40]	; (8005170 <__libc_init_array+0x44>)
 8005146:	1b64      	subs	r4, r4, r5
 8005148:	10a4      	asrs	r4, r4, #2
 800514a:	42a6      	cmp	r6, r4
 800514c:	d105      	bne.n	800515a <__libc_init_array+0x2e>
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	00b3      	lsls	r3, r6, #2
 8005152:	58eb      	ldr	r3, [r5, r3]
 8005154:	4798      	blx	r3
 8005156:	3601      	adds	r6, #1
 8005158:	e7ee      	b.n	8005138 <__libc_init_array+0xc>
 800515a:	00b3      	lsls	r3, r6, #2
 800515c:	58eb      	ldr	r3, [r5, r3]
 800515e:	4798      	blx	r3
 8005160:	3601      	adds	r6, #1
 8005162:	e7f2      	b.n	800514a <__libc_init_array+0x1e>
 8005164:	080052cc 	.word	0x080052cc
 8005168:	080052cc 	.word	0x080052cc
 800516c:	080052cc 	.word	0x080052cc
 8005170:	080052d0 	.word	0x080052d0

08005174 <memcpy>:
 8005174:	2300      	movs	r3, #0
 8005176:	b510      	push	{r4, lr}
 8005178:	429a      	cmp	r2, r3
 800517a:	d100      	bne.n	800517e <memcpy+0xa>
 800517c:	bd10      	pop	{r4, pc}
 800517e:	5ccc      	ldrb	r4, [r1, r3]
 8005180:	54c4      	strb	r4, [r0, r3]
 8005182:	3301      	adds	r3, #1
 8005184:	e7f8      	b.n	8005178 <memcpy+0x4>

08005186 <memset>:
 8005186:	0003      	movs	r3, r0
 8005188:	1882      	adds	r2, r0, r2
 800518a:	4293      	cmp	r3, r2
 800518c:	d100      	bne.n	8005190 <memset+0xa>
 800518e:	4770      	bx	lr
 8005190:	7019      	strb	r1, [r3, #0]
 8005192:	3301      	adds	r3, #1
 8005194:	e7f9      	b.n	800518a <memset+0x4>
	...

08005198 <_init>:
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519e:	bc08      	pop	{r3}
 80051a0:	469e      	mov	lr, r3
 80051a2:	4770      	bx	lr

080051a4 <_fini>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051aa:	bc08      	pop	{r3}
 80051ac:	469e      	mov	lr, r3
 80051ae:	4770      	bx	lr

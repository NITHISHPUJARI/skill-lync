
LDR_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006430  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006674  08006674  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006674  08006674  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006674  08006674  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800667c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c88  20000078  080066f4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d00  080066f4  00021d00  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171ce  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d3  00000000  00000000  0003726e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0003a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cf2  00000000  00000000  0003cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179e9  00000000  00000000  00055922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0bf3  00000000  00000000  0006d30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010defe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e34  00000000  00000000  0010df50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080064d8 	.word	0x080064d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080064d8 	.word	0x080064d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <lightTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Light sensor task
void lightTask(void* pvParameters) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  (void)pvParameters;

  while(1) {
    // Read light sensor value
    uint16_t lightValue = HAL_ADC_GetValue(&hadc1);
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <lightTask+0x38>)
 8000422:	0018      	movs	r0, r3
 8000424:	f000 ff2c 	bl	8001280 <HAL_ADC_GetValue>
 8000428:	0003      	movs	r3, r0
 800042a:	b29a      	uxth	r2, r3
 800042c:	210e      	movs	r1, #14
 800042e:	187b      	adds	r3, r7, r1
 8000430:	801a      	strh	r2, [r3, #0]

    // Send light sensor value to the queue
    xQueueSend(lightQueue, &lightValue, portMAX_DELAY);
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <lightTask+0x3c>)
 8000434:	6818      	ldr	r0, [r3, #0]
 8000436:	2301      	movs	r3, #1
 8000438:	425a      	negs	r2, r3
 800043a:	1879      	adds	r1, r7, r1
 800043c:	2300      	movs	r3, #0
 800043e:	f003 fbdc 	bl	8003bfa <xQueueGenericSend>

    // Delay for 1 second
    vTaskDelay(pdMS_TO_TICKS(1000));
 8000442:	23fa      	movs	r3, #250	; 0xfa
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	0018      	movs	r0, r3
 8000448:	f004 f842 	bl	80044d0 <vTaskDelay>
  while(1) {
 800044c:	e7e8      	b.n	8000420 <lightTask+0x8>
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	20000094 	.word	0x20000094
 8000454:	2000018c 	.word	0x2000018c

08000458 <displayTask>:
  }
}

// Display task
void displayTask(void* pvParameters) {
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b0b7      	sub	sp, #220	; 0xdc
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  (void)pvParameters;

  while(1) {
    // Receive light sensor value from the queue
    uint16_t lightValue;
    if (xQueueReceive(lightQueue, &lightValue, portMAX_DELAY)) {
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <displayTask+0x54>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2201      	movs	r2, #1
 8000466:	4252      	negs	r2, r2
 8000468:	24d6      	movs	r4, #214	; 0xd6
 800046a:	1939      	adds	r1, r7, r4
 800046c:	0018      	movs	r0, r3
 800046e:	f003 fc88 	bl	8003d82 <xQueueReceive>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d0f4      	beq.n	8000460 <displayTask+0x8>
      // Display light sensor value on the UART console
      char buffer[200];
      HAL_ADC_Start(&hadc1);
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <displayTask+0x58>)
 8000478:	0018      	movs	r0, r3
 800047a:	f000 feb3 	bl	80011e4 <HAL_ADC_Start>
      //sprintf(buffer, sizeof(buffer), "Light Sensor Value: %d\r\n", lightValue);
      //char *buffer = (" Light Sensor Value: %d\r\n", lightValue);
      sprintf(buffer, " Light Sensor Value: %d\r\n", lightValue);
 800047e:	193b      	adds	r3, r7, r4
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	001a      	movs	r2, r3
 8000484:	490b      	ldr	r1, [pc, #44]	; (80004b4 <displayTask+0x5c>)
 8000486:	240c      	movs	r4, #12
 8000488:	193b      	adds	r3, r7, r4
 800048a:	0018      	movs	r0, r3
 800048c:	f005 fbb4 	bl	8005bf8 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	f7ff fe38 	bl	8000108 <strlen>
 8000498:	0003      	movs	r3, r0
 800049a:	b29a      	uxth	r2, r3
 800049c:	2301      	movs	r3, #1
 800049e:	425b      	negs	r3, r3
 80004a0:	1939      	adds	r1, r7, r4
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <displayTask+0x60>)
 80004a4:	f002 fcf0 	bl	8002e88 <HAL_UART_Transmit>
  while(1) {
 80004a8:	e7da      	b.n	8000460 <displayTask+0x8>
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	2000018c 	.word	0x2000018c
 80004b0:	20000094 	.word	0x20000094
 80004b4:	080064f0 	.word	0x080064f0
 80004b8:	200000f8 	.word	0x200000f8

080004bc <ledTask>:
    }
  }
}

// LED task
void ledTask(void* pvParameters) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  (void)pvParameters;

  while(1) {
    // Toggle LED1 every 500ms
    HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 80004c4:	23a0      	movs	r3, #160	; 0xa0
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	2120      	movs	r1, #32
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fb71 	bl	8001bb2 <HAL_GPIO_TogglePin>
    vTaskDelay(pdMS_TO_TICKS(500));
 80004d0:	23fa      	movs	r3, #250	; 0xfa
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	0018      	movs	r0, r3
 80004d6:	f003 fffb 	bl	80044d0 <vTaskDelay>

    // Toggle LED2 every 100ms
    HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 80004da:	23a0      	movs	r3, #160	; 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2140      	movs	r1, #64	; 0x40
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fb66 	bl	8001bb2 <HAL_GPIO_TogglePin>
    vTaskDelay(pdMS_TO_TICKS(100));
 80004e6:	2064      	movs	r0, #100	; 0x64
 80004e8:	f003 fff2 	bl	80044d0 <vTaskDelay>
    HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 80004ec:	e7ea      	b.n	80004c4 <ledTask+0x8>
	...

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fb6d 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f86b 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f967 	bl	80007d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000502:	f000 f917 	bl	8000734 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000506:	f000 f8ad 	bl	8000664 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // Create the light sensor queue
    lightQueue = xQueueCreate(5, sizeof(uint16_t));
 800050a:	2200      	movs	r2, #0
 800050c:	2102      	movs	r1, #2
 800050e:	2005      	movs	r0, #5
 8000510:	f003 faee 	bl	8003af0 <xQueueGenericCreate>
 8000514:	0002      	movs	r2, r0
 8000516:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <main+0xb0>)
 8000518:	601a      	str	r2, [r3, #0]
    if (lightQueue == 0)  // Queue not created
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <main+0xb0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10e      	bne.n	8000540 <main+0x50>
          {
        	  char *str = "Unable to create Integer Queue\r\n\n";
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <main+0xb4>)
 8000524:	603b      	str	r3, [r7, #0]
        	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	0018      	movs	r0, r3
 800052a:	f7ff fded 	bl	8000108 <strlen>
 800052e:	0003      	movs	r3, r0
 8000530:	b29a      	uxth	r2, r3
 8000532:	2301      	movs	r3, #1
 8000534:	425b      	negs	r3, r3
 8000536:	6839      	ldr	r1, [r7, #0]
 8000538:	481b      	ldr	r0, [pc, #108]	; (80005a8 <main+0xb8>)
 800053a:	f002 fca5 	bl	8002e88 <HAL_UART_Transmit>
 800053e:	e00d      	b.n	800055c <main+0x6c>
          }
          else
          {
        	  char *str = "Integer Queue Created successfully\r\n\n";
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <main+0xbc>)
 8000542:	607b      	str	r3, [r7, #4]
        	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff fdde 	bl	8000108 <strlen>
 800054c:	0003      	movs	r3, r0
 800054e:	b29a      	uxth	r2, r3
 8000550:	2301      	movs	r3, #1
 8000552:	425b      	negs	r3, r3
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	4814      	ldr	r0, [pc, #80]	; (80005a8 <main+0xb8>)
 8000558:	f002 fc96 	bl	8002e88 <HAL_UART_Transmit>
          }

    // Create tasks
    xTaskCreate(lightTask, "LightTask", 200, NULL, 1, &lightTaskHandle);
 800055c:	4914      	ldr	r1, [pc, #80]	; (80005b0 <main+0xc0>)
 800055e:	4815      	ldr	r0, [pc, #84]	; (80005b4 <main+0xc4>)
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <main+0xc8>)
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	2301      	movs	r3, #1
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	22c8      	movs	r2, #200	; 0xc8
 800056c:	f003 fe53 	bl	8004216 <xTaskCreate>
    xTaskCreate(displayTask, "DisplayTask", 200, NULL, 1, &displayTaskHandle);
 8000570:	4912      	ldr	r1, [pc, #72]	; (80005bc <main+0xcc>)
 8000572:	4813      	ldr	r0, [pc, #76]	; (80005c0 <main+0xd0>)
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <main+0xd4>)
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	2301      	movs	r3, #1
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2300      	movs	r3, #0
 800057e:	22c8      	movs	r2, #200	; 0xc8
 8000580:	f003 fe49 	bl	8004216 <xTaskCreate>
    xTaskCreate(ledTask, "LEDTask", 200, NULL, 1, &ledTaskHandle);
 8000584:	4910      	ldr	r1, [pc, #64]	; (80005c8 <main+0xd8>)
 8000586:	4811      	ldr	r0, [pc, #68]	; (80005cc <main+0xdc>)
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <main+0xe0>)
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2301      	movs	r3, #1
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	22c8      	movs	r2, #200	; 0xc8
 8000594:	f003 fe3f 	bl	8004216 <xTaskCreate>

    // Start the FreeRTOS scheduler
    vTaskStartScheduler();
 8000598:	f003 ffc0 	bl	800451c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	e7fe      	b.n	800059c <main+0xac>
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	2000018c 	.word	0x2000018c
 80005a4:	0800650c 	.word	0x0800650c
 80005a8:	200000f8 	.word	0x200000f8
 80005ac:	08006530 	.word	0x08006530
 80005b0:	08006558 	.word	0x08006558
 80005b4:	08000419 	.word	0x08000419
 80005b8:	20000190 	.word	0x20000190
 80005bc:	08006564 	.word	0x08006564
 80005c0:	08000459 	.word	0x08000459
 80005c4:	20000194 	.word	0x20000194
 80005c8:	08006570 	.word	0x08006570
 80005cc:	080004bd 	.word	0x080004bd
 80005d0:	20000198 	.word	0x20000198

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b093      	sub	sp, #76	; 0x4c
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	2414      	movs	r4, #20
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	0018      	movs	r0, r3
 80005e0:	2334      	movs	r3, #52	; 0x34
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f005 fafe 	bl	8005be6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	0018      	movs	r0, r3
 80005ee:	2310      	movs	r3, #16
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f005 faf7 	bl	8005be6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 faf3 	bl	8001be8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2202      	movs	r2, #2
 8000606:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000616:	193b      	adds	r3, r7, r4
 8000618:	2240      	movs	r2, #64	; 0x40
 800061a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	193b      	adds	r3, r7, r4
 8000624:	0018      	movs	r0, r3
 8000626:	f001 fb2b 	bl	8001c80 <HAL_RCC_OscConfig>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800062e:	f000 f93d 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2207      	movs	r2, #7
 8000636:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2100      	movs	r1, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f001 fe26 	bl	80022a0 <HAL_RCC_ClockConfig>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000658:	f000 f928 	bl	80008ac <Error_Handler>
  }
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b013      	add	sp, #76	; 0x4c
 8000662:	bd90      	pop	{r4, r7, pc}

08000664 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	0018      	movs	r0, r3
 800066e:	230c      	movs	r3, #12
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f005 fab7 	bl	8005be6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000678:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <MX_ADC1_Init+0xc4>)
 800067a:	4a2c      	ldr	r2, [pc, #176]	; (800072c <MX_ADC1_Init+0xc8>)
 800067c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <MX_ADC1_Init+0xc4>)
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	05d2      	lsls	r2, r2, #23
 8000684:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_ADC1_Init+0xc4>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_ADC1_Init+0xc4>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <MX_ADC1_Init+0xc4>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <MX_ADC1_Init+0xc4>)
 800069a:	2204      	movs	r2, #4
 800069c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006c4:	222c      	movs	r2, #44	; 0x2c
 80006c6:	2100      	movs	r1, #0
 80006c8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006de:	223c      	movs	r2, #60	; 0x3c
 80006e0:	2100      	movs	r1, #0
 80006e2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_ADC1_Init+0xc4>)
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fbd1 	bl	8000e94 <HAL_ADC_Init>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80006f6:	f000 f8d9 	bl	80008ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <MX_ADC1_Init+0xcc>)
 80006fe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070c:	1d3a      	adds	r2, r7, #4
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_ADC1_Init+0xc4>)
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fdc0 	bl	8001298 <HAL_ADC_ConfigChannel>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 800071c:	f000 f8c6 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b004      	add	sp, #16
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000094 	.word	0x20000094
 800072c:	40012400 	.word	0x40012400
 8000730:	24000200 	.word	0x24000200

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800073a:	4a24      	ldr	r2, [pc, #144]	; (80007cc <MX_USART2_UART_Init+0x98>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000740:	22e1      	movs	r2, #225	; 0xe1
 8000742:	0252      	lsls	r2, r2, #9
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800077e:	0018      	movs	r0, r3
 8000780:	f002 fb2c 	bl	8002ddc <HAL_UART_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000788:	f000 f890 	bl	80008ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800078e:	2100      	movs	r1, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f002 ffbd 	bl	8003710 <HAL_UARTEx_SetTxFifoThreshold>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800079a:	f000 f887 	bl	80008ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 fff4 	bl	8003790 <HAL_UARTEx_SetRxFifoThreshold>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007ac:	f000 f87e 	bl	80008ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 ff72 	bl	800369c <HAL_UARTEx_DisableFifoMode>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007bc:	f000 f876 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	200000f8 	.word	0x200000f8
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b08b      	sub	sp, #44	; 0x2c
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	2414      	movs	r4, #20
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	0018      	movs	r0, r3
 80007dc:	2314      	movs	r3, #20
 80007de:	001a      	movs	r2, r3
 80007e0:	2100      	movs	r1, #0
 80007e2:	f005 fa00 	bl	8005be6 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <MX_GPIO_Init+0xb4>)
 80007e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_GPIO_Init+0xb4>)
 80007ec:	2104      	movs	r1, #4
 80007ee:	430a      	orrs	r2, r1
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
 80007f2:	4b24      	ldr	r3, [pc, #144]	; (8000884 <MX_GPIO_Init+0xb4>)
 80007f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f6:	2204      	movs	r2, #4
 80007f8:	4013      	ands	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_GPIO_Init+0xb4>)
 8000800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_GPIO_Init+0xb4>)
 8000804:	2120      	movs	r1, #32
 8000806:	430a      	orrs	r2, r1
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_GPIO_Init+0xb4>)
 800080c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080e:	2220      	movs	r2, #32
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_GPIO_Init+0xb4>)
 8000818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_GPIO_Init+0xb4>)
 800081c:	2101      	movs	r1, #1
 800081e:	430a      	orrs	r2, r1
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_GPIO_Init+0xb4>)
 8000824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000826:	2201      	movs	r2, #1
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_GPIO_Init+0xb4>)
 8000830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_GPIO_Init+0xb4>)
 8000834:	2102      	movs	r1, #2
 8000836:	430a      	orrs	r2, r1
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_GPIO_Init+0xb4>)
 800083c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800083e:	2202      	movs	r2, #2
 8000840:	4013      	ands	r3, r2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2200      	movs	r2, #0
 800084c:	2160      	movs	r1, #96	; 0x60
 800084e:	0018      	movs	r0, r3
 8000850:	f001 f992 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000854:	0021      	movs	r1, r4
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2260      	movs	r2, #96	; 0x60
 800085a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2201      	movs	r2, #1
 8000860:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	187a      	adds	r2, r7, r1
 8000870:	23a0      	movs	r3, #160	; 0xa0
 8000872:	05db      	lsls	r3, r3, #23
 8000874:	0011      	movs	r1, r2
 8000876:	0018      	movs	r0, r3
 8000878:	f001 f81a 	bl	80018b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b00b      	add	sp, #44	; 0x2c
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d101      	bne.n	800089e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089a:	f000 f9bb 	bl	8000c14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40000400 	.word	0x40000400

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x44>)
 80008c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_MspInit+0x44>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x44>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x44>)
 80008d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_MspInit+0x44>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	0549      	lsls	r1, r1, #21
 80008e0:	430a      	orrs	r2, r1
 80008e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_MspInit+0x44>)
 80008e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	055b      	lsls	r3, r3, #21
 80008ec:	4013      	ands	r3, r2
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b08b      	sub	sp, #44	; 0x2c
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	2414      	movs	r4, #20
 800090a:	193b      	adds	r3, r7, r4
 800090c:	0018      	movs	r0, r3
 800090e:	2314      	movs	r3, #20
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f005 f967 	bl	8005be6 <memset>
  if(hadc->Instance==ADC1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a17      	ldr	r2, [pc, #92]	; (800097c <HAL_ADC_MspInit+0x7c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d128      	bne.n	8000974 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_ADC_MspInit+0x80>)
 8000924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_ADC_MspInit+0x80>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	0349      	lsls	r1, r1, #13
 800092c:	430a      	orrs	r2, r1
 800092e:	641a      	str	r2, [r3, #64]	; 0x40
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <HAL_ADC_MspInit+0x80>)
 8000932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	035b      	lsls	r3, r3, #13
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_ADC_MspInit+0x80>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_ADC_MspInit+0x80>)
 8000944:	2102      	movs	r1, #2
 8000946:	430a      	orrs	r2, r1
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_ADC_MspInit+0x80>)
 800094c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094e:	2202      	movs	r2, #2
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2202      	movs	r2, #2
 800095a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2203      	movs	r2, #3
 8000960:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	193b      	adds	r3, r7, r4
 800096a:	4a06      	ldr	r2, [pc, #24]	; (8000984 <HAL_ADC_MspInit+0x84>)
 800096c:	0019      	movs	r1, r3
 800096e:	0010      	movs	r0, r2
 8000970:	f000 ff9e 	bl	80018b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b00b      	add	sp, #44	; 0x2c
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	40012400 	.word	0x40012400
 8000980:	40021000 	.word	0x40021000
 8000984:	50000400 	.word	0x50000400

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b091      	sub	sp, #68	; 0x44
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	232c      	movs	r3, #44	; 0x2c
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	0018      	movs	r0, r3
 8000996:	2314      	movs	r3, #20
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f005 f923 	bl	8005be6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	2410      	movs	r4, #16
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	0018      	movs	r0, r3
 80009a6:	231c      	movs	r3, #28
 80009a8:	001a      	movs	r2, r3
 80009aa:	2100      	movs	r1, #0
 80009ac:	f005 f91b 	bl	8005be6 <memset>
  if(huart->Instance==USART2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <HAL_UART_MspInit+0xb8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d13e      	bne.n	8000a38 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2202      	movs	r2, #2
 80009be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 fe3d 	bl	8002648 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009d2:	f7ff ff6b 	bl	80008ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 80009d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0289      	lsls	r1, r1, #10
 80009e0:	430a      	orrs	r2, r1
 80009e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 80009e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	029b      	lsls	r3, r3, #10
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 80009f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	430a      	orrs	r2, r1
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	2201      	movs	r2, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a0a:	212c      	movs	r1, #44	; 0x2c
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2202      	movs	r2, #2
 8000a16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2201      	movs	r2, #1
 8000a28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	187a      	adds	r2, r7, r1
 8000a2c:	23a0      	movs	r3, #160	; 0xa0
 8000a2e:	05db      	lsls	r3, r3, #23
 8000a30:	0011      	movs	r1, r2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 ff3c 	bl	80018b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b011      	add	sp, #68	; 0x44
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	40004400 	.word	0x40004400
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b5b0      	push	{r4, r5, r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a50:	232b      	movs	r3, #43	; 0x2b
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000a58:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <HAL_InitTick+0xf0>)
 8000a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a5c:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <HAL_InitTick+0xf0>)
 8000a5e:	2102      	movs	r1, #2
 8000a60:	430a      	orrs	r2, r1
 8000a62:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a64:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <HAL_InitTick+0xf0>)
 8000a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a70:	230c      	movs	r3, #12
 8000a72:	18fa      	adds	r2, r7, r3
 8000a74:	2410      	movs	r4, #16
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 fdba 	bl	80025f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d104      	bne.n	8000a96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a8c:	f001 fd9c 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8000a90:	0003      	movs	r3, r0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a94:	e004      	b.n	8000aa0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a96:	f001 fd97 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa2:	4926      	ldr	r1, [pc, #152]	; (8000b3c <HAL_InitTick+0xf4>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff fb41 	bl	800012c <__udivsi3>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	3b01      	subs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <HAL_InitTick+0xf8>)
 8000ab2:	4a24      	ldr	r2, [pc, #144]	; (8000b44 <HAL_InitTick+0xfc>)
 8000ab4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <HAL_InitTick+0xf8>)
 8000ab8:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <HAL_InitTick+0x100>)
 8000aba:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <HAL_InitTick+0xf8>)
 8000abe:	6a3a      	ldr	r2, [r7, #32]
 8000ac0:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_InitTick+0xf8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <HAL_InitTick+0xf8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_InitTick+0xf8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000ad4:	252b      	movs	r5, #43	; 0x2b
 8000ad6:	197c      	adds	r4, r7, r5
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_InitTick+0xf8>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f001 fee8 	bl	80028b0 <HAL_TIM_Base_Init>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000ae4:	197b      	adds	r3, r7, r5
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d11e      	bne.n	8000b2a <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000aec:	197c      	adds	r4, r7, r5
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_InitTick+0xf8>)
 8000af0:	0018      	movs	r0, r3
 8000af2:	f001 ff3d 	bl	8002970 <HAL_TIM_Base_Start_IT>
 8000af6:	0003      	movs	r3, r0
 8000af8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000afa:	197b      	adds	r3, r7, r5
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d113      	bne.n	8000b2a <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b02:	2010      	movs	r0, #16
 8000b04:	f000 fec3 	bl	800188e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d809      	bhi.n	8000b22 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	0019      	movs	r1, r3
 8000b14:	2010      	movs	r0, #16
 8000b16:	f000 fea5 	bl	8001864 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_InitTick+0x104>)
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	e003      	b.n	8000b2a <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000b22:	232b      	movs	r3, #43	; 0x2b
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000b2a:	232b      	movs	r3, #43	; 0x2b
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b00c      	add	sp, #48	; 0x30
 8000b36:	bdb0      	pop	{r4, r5, r7, pc}
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	000f4240 	.word	0x000f4240
 8000b40:	2000019c 	.word	0x2000019c
 8000b44:	40000400 	.word	0x40000400
 8000b48:	000003e7 	.word	0x000003e7
 8000b4c:	20000004 	.word	0x20000004

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <TIM3_IRQHandler+0x14>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f001 ff5a 	bl	8002a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	2000019c 	.word	0x2000019c

08000b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b84:	f7ff fff6 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bae:	f004 ffed 	bl	8005b8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bb2:	f7ff fc9d 	bl	80004f0 <main>

08000bb6 <LoopForever>:

LoopForever:
  b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   r0, =_estack
 8000bb8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bc4:	0800667c 	.word	0x0800667c
  ldr r2, =_sbss
 8000bc8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bcc:	20001d00 	.word	0x20001d00

08000bd0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_Init+0x3c>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_Init+0x3c>)
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	0049      	lsls	r1, r1, #1
 8000bea:	430a      	orrs	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f7ff ff2a 	bl	8000a48 <HAL_InitTick>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d003      	beq.n	8000c00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	e001      	b.n	8000c04 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe5a 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	781b      	ldrb	r3, [r3, #0]
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	18d2      	adds	r2, r2, r3
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_IncTick+0x20>)
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000008 	.word	0x20000008
 8000c34:	200001e8 	.word	0x200001e8

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	200001e8 	.word	0x200001e8

08000c4c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	601a      	str	r2, [r3, #0]
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	fe3fffff 	.word	0xfe3fffff

08000c74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	23e0      	movs	r3, #224	; 0xe0
 8000c82:	045b      	lsls	r3, r3, #17
 8000c84:	4013      	ands	r3, r2
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b084      	sub	sp, #16
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	400a      	ands	r2, r1
 8000ca4:	2107      	movs	r1, #7
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	000a      	movs	r2, r1
 8000caa:	43d2      	mvns	r2, r2
 8000cac:	401a      	ands	r2, r3
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	400b      	ands	r3, r1
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	4099      	lsls	r1, r3
 8000cb8:	000b      	movs	r3, r1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b004      	add	sp, #16
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	2104      	movs	r1, #4
 8000cda:	400a      	ands	r2, r1
 8000cdc:	2107      	movs	r1, #7
 8000cde:	4091      	lsls	r1, r2
 8000ce0:	000a      	movs	r2, r1
 8000ce2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000cea:	40da      	lsrs	r2, r3
 8000cec:	0013      	movs	r3, r2
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	211f      	movs	r1, #31
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	4091      	lsls	r1, r2
 8000d10:	000a      	movs	r2, r1
 8000d12:	43d2      	mvns	r2, r2
 8000d14:	401a      	ands	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0e9b      	lsrs	r3, r3, #26
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	4019      	ands	r1, r3
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	201f      	movs	r0, #31
 8000d22:	4003      	ands	r3, r0
 8000d24:	4099      	lsls	r1, r3
 8000d26:	000b      	movs	r3, r1
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b004      	add	sp, #16
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	035b      	lsls	r3, r3, #13
 8000d48:	0b5b      	lsrs	r3, r3, #13
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	0352      	lsls	r2, r2, #13
 8000d6a:	0b52      	lsrs	r2, r2, #13
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	0212      	lsls	r2, r2, #8
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
 8000d9c:	4904      	ldr	r1, [pc, #16]	; (8000db0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000d9e:	400b      	ands	r3, r1
 8000da0:	431a      	orrs	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b004      	add	sp, #16
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	07ffff00 	.word	0x07ffff00

08000db4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	0552      	lsls	r2, r2, #21
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	6fffffe8 	.word	0x6fffffe8

08000ddc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	055b      	lsls	r3, r3, #21
 8000dec:	401a      	ands	r2, r3
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	055b      	lsls	r3, r3, #21
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d101      	bne.n	8000dfa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b002      	add	sp, #8
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <LL_ADC_Enable+0x20>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	2201      	movs	r2, #1
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	7fffffe8 	.word	0x7fffffe8

08000e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	2201      	movs	r2, #1
 8000e36:	4013      	ands	r3, r2
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d101      	bne.n	8000e40 <LL_ADC_IsEnabled+0x18>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <LL_ADC_IsEnabled+0x1a>
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b002      	add	sp, #8
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <LL_ADC_REG_StartConversion+0x20>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	7fffffe8 	.word	0x7fffffe8

08000e70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d101      	bne.n	8000e88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9c:	231f      	movs	r3, #31
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e17f      	b.n	80011ba <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10a      	bne.n	8000ed8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff fd1b 	bl	8000900 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2254      	movs	r2, #84	; 0x54
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ff7d 	bl	8000ddc <LL_ADC_IsInternalRegulatorEnabled>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d115      	bne.n	8000f12 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	0018      	movs	r0, r3
 8000eec:	f7ff ff62 	bl	8000db4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ef0:	4bb4      	ldr	r3, [pc, #720]	; (80011c4 <HAL_ADC_Init+0x330>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	49b4      	ldr	r1, [pc, #720]	; (80011c8 <HAL_ADC_Init+0x334>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff f918 	bl	800012c <__udivsi3>
 8000efc:	0003      	movs	r3, r0
 8000efe:	3301      	adds	r3, #1
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f04:	e002      	b.n	8000f0c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f9      	bne.n	8000f06 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff ff60 	bl	8000ddc <LL_ADC_IsInternalRegulatorEnabled>
 8000f1c:	1e03      	subs	r3, r0, #0
 8000f1e:	d10f      	bne.n	8000f40 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f24:	2210      	movs	r2, #16
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f30:	2201      	movs	r2, #1
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f38:	231f      	movs	r3, #31
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff ff93 	bl	8000e70 <LL_ADC_REG_IsConversionOngoing>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	2210      	movs	r2, #16
 8000f54:	4013      	ands	r3, r2
 8000f56:	d000      	beq.n	8000f5a <HAL_ADC_Init+0xc6>
 8000f58:	e122      	b.n	80011a0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d000      	beq.n	8000f62 <HAL_ADC_Init+0xce>
 8000f60:	e11e      	b.n	80011a0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	4a99      	ldr	r2, [pc, #612]	; (80011cc <HAL_ADC_Init+0x338>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff ff56 	bl	8000e28 <LL_ADC_IsEnabled>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d000      	beq.n	8000f82 <HAL_ADC_Init+0xee>
 8000f80:	e0ad      	b.n	80010de <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7e1b      	ldrb	r3, [r3, #24]
 8000f8a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f8c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7e5b      	ldrb	r3, [r3, #25]
 8000f92:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f94:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7e9b      	ldrb	r3, [r3, #26]
 8000f9a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f9c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_ADC_Init+0x118>
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	015b      	lsls	r3, r3, #5
 8000faa:	e000      	b.n	8000fae <HAL_ADC_Init+0x11a>
 8000fac:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fae:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fb4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	da04      	bge.n	8000fc8 <HAL_ADC_Init+0x134>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	085b      	lsrs	r3, r3, #1
 8000fc6:	e001      	b.n	8000fcc <HAL_ADC_Init+0x138>
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000fcc:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	212c      	movs	r1, #44	; 0x2c
 8000fd2:	5c5b      	ldrb	r3, [r3, r1]
 8000fd4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fd6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	5c9b      	ldrb	r3, [r3, r2]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d115      	bne.n	8001014 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7e9b      	ldrb	r3, [r3, #26]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d105      	bne.n	8000ffc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	0252      	lsls	r2, r2, #9
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	e00b      	b.n	8001014 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	2220      	movs	r2, #32
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100c:	2201      	movs	r2, #1
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00a      	beq.n	8001032 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001020:	23e0      	movs	r3, #224	; 0xe0
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800102a:	4313      	orrs	r3, r2
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a65      	ldr	r2, [pc, #404]	; (80011d0 <HAL_ADC_Init+0x33c>)
 800103a:	4013      	ands	r3, r2
 800103c:	0019      	movs	r1, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	430a      	orrs	r2, r1
 8001046:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	0f9b      	lsrs	r3, r3, #30
 800104e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001054:	4313      	orrs	r3, r2
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	4313      	orrs	r3, r2
 800105a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	223c      	movs	r2, #60	; 0x3c
 8001060:	5c9b      	ldrb	r3, [r3, r2]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d111      	bne.n	800108a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	0f9b      	lsrs	r3, r3, #30
 800106c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001072:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001078:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800107e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	4313      	orrs	r3, r2
 8001084:	2201      	movs	r2, #1
 8001086:	4313      	orrs	r3, r2
 8001088:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <HAL_ADC_Init+0x340>)
 8001092:	4013      	ands	r3, r2
 8001094:	0019      	movs	r1, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	430a      	orrs	r2, r1
 800109e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	23c0      	movs	r3, #192	; 0xc0
 80010a6:	061b      	lsls	r3, r3, #24
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d018      	beq.n	80010de <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	05db      	lsls	r3, r3, #23
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d012      	beq.n	80010de <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	061b      	lsls	r3, r3, #24
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d00c      	beq.n	80010de <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80010c4:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <HAL_ADC_Init+0x344>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a44      	ldr	r2, [pc, #272]	; (80011dc <HAL_ADC_Init+0x348>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	0019      	movs	r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	23f0      	movs	r3, #240	; 0xf0
 80010d4:	039b      	lsls	r3, r3, #14
 80010d6:	401a      	ands	r2, r3
 80010d8:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <HAL_ADC_Init+0x344>)
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e6:	001a      	movs	r2, r3
 80010e8:	2100      	movs	r1, #0
 80010ea:	f7ff fdd0 	bl	8000c8e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f6:	493a      	ldr	r1, [pc, #232]	; (80011e0 <HAL_ADC_Init+0x34c>)
 80010f8:	001a      	movs	r2, r3
 80010fa:	f7ff fdc8 	bl	8000c8e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2110      	movs	r1, #16
 8001112:	4249      	negs	r1, r1
 8001114:	430a      	orrs	r2, r1
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
 8001118:	e018      	b.n	800114c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	039b      	lsls	r3, r3, #14
 8001122:	429a      	cmp	r2, r3
 8001124:	d112      	bne.n	800114c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	3b01      	subs	r3, #1
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	221c      	movs	r2, #28
 8001136:	4013      	ands	r3, r2
 8001138:	2210      	movs	r2, #16
 800113a:	4252      	negs	r2, r2
 800113c:	409a      	lsls	r2, r3
 800113e:	0011      	movs	r1, r2
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2100      	movs	r1, #0
 8001152:	0018      	movs	r0, r3
 8001154:	f7ff fdb8 	bl	8000cc8 <LL_ADC_GetSamplingTimeCommonChannels>
 8001158:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800115e:	429a      	cmp	r2, r3
 8001160:	d10b      	bne.n	800117a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116c:	2203      	movs	r2, #3
 800116e:	4393      	bics	r3, r2
 8001170:	2201      	movs	r2, #1
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001178:	e01c      	b.n	80011b4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	2212      	movs	r2, #18
 8001180:	4393      	bics	r3, r2
 8001182:	2210      	movs	r2, #16
 8001184:	431a      	orrs	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118e:	2201      	movs	r2, #1
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001196:	231f      	movs	r3, #31
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800119e:	e009      	b.n	80011b4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a4:	2210      	movs	r2, #16
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011ac:	231f      	movs	r3, #31
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80011b4:	231f      	movs	r3, #31
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	781b      	ldrb	r3, [r3, #0]
}
 80011ba:	0018      	movs	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	b008      	add	sp, #32
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	20000000 	.word	0x20000000
 80011c8:	00030d40 	.word	0x00030d40
 80011cc:	fffffefd 	.word	0xfffffefd
 80011d0:	fffe0201 	.word	0xfffe0201
 80011d4:	1ffffc02 	.word	0x1ffffc02
 80011d8:	40012708 	.word	0x40012708
 80011dc:	ffc3ffff 	.word	0xffc3ffff
 80011e0:	07ffff04 	.word	0x07ffff04

080011e4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff fe3d 	bl	8000e70 <LL_ADC_REG_IsConversionOngoing>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d135      	bne.n	8001266 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2254      	movs	r2, #84	; 0x54
 80011fe:	5c9b      	ldrb	r3, [r3, r2]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_ADC_Start+0x24>
 8001204:	2302      	movs	r3, #2
 8001206:	e035      	b.n	8001274 <HAL_ADC_Start+0x90>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2254      	movs	r2, #84	; 0x54
 800120c:	2101      	movs	r1, #1
 800120e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001210:	250f      	movs	r5, #15
 8001212:	197c      	adds	r4, r7, r5
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	0018      	movs	r0, r3
 8001218:	f000 fa16 	bl	8001648 <ADC_Enable>
 800121c:	0003      	movs	r3, r0
 800121e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001220:	197b      	adds	r3, r7, r5
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d119      	bne.n	800125c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <HAL_ADC_Start+0x98>)
 800122e:	4013      	ands	r3, r2
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	0052      	lsls	r2, r2, #1
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	221c      	movs	r2, #28
 8001246:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2254      	movs	r2, #84	; 0x54
 800124c:	2100      	movs	r1, #0
 800124e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff fdf9 	bl	8000e4c <LL_ADC_REG_StartConversion>
 800125a:	e008      	b.n	800126e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2254      	movs	r2, #84	; 0x54
 8001260:	2100      	movs	r1, #0
 8001262:	5499      	strb	r1, [r3, r2]
 8001264:	e003      	b.n	800126e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001266:	230f      	movs	r3, #15
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	2202      	movs	r2, #2
 800126c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800126e:	230f      	movs	r3, #15
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	781b      	ldrb	r3, [r3, #0]
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b004      	add	sp, #16
 800127a:	bdb0      	pop	{r4, r5, r7, pc}
 800127c:	fffff0fe 	.word	0xfffff0fe

08001280 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a2:	2317      	movs	r3, #23
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2254      	movs	r2, #84	; 0x54
 80012b2:	5c9b      	ldrb	r3, [r3, r2]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x24>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e1c0      	b.n	800163e <HAL_ADC_ConfigChannel+0x3a6>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2254      	movs	r2, #84	; 0x54
 80012c0:	2101      	movs	r1, #1
 80012c2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff fdd1 	bl	8000e70 <LL_ADC_REG_IsConversionOngoing>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d000      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x3c>
 80012d2:	e1a3      	b.n	800161c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d100      	bne.n	80012de <HAL_ADC_ConfigChannel+0x46>
 80012dc:	e143      	b.n	8001566 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	061b      	lsls	r3, r3, #24
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d004      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012ee:	4ac1      	ldr	r2, [pc, #772]	; (80015f4 <HAL_ADC_ConfigChannel+0x35c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d108      	bne.n	8001306 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	0019      	movs	r1, r3
 80012fe:	0010      	movs	r0, r2
 8001300:	f7ff fd19 	bl	8000d36 <LL_ADC_REG_SetSequencerChAdd>
 8001304:	e0c9      	b.n	800149a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	211f      	movs	r1, #31
 8001310:	400b      	ands	r3, r1
 8001312:	210f      	movs	r1, #15
 8001314:	4099      	lsls	r1, r3
 8001316:	000b      	movs	r3, r1
 8001318:	43db      	mvns	r3, r3
 800131a:	4013      	ands	r3, r2
 800131c:	0019      	movs	r1, r3
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	035b      	lsls	r3, r3, #13
 8001324:	0b5b      	lsrs	r3, r3, #13
 8001326:	d105      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x9c>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	0e9b      	lsrs	r3, r3, #26
 800132e:	221f      	movs	r2, #31
 8001330:	4013      	ands	r3, r2
 8001332:	e098      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2201      	movs	r2, #1
 800133a:	4013      	ands	r3, r2
 800133c:	d000      	beq.n	8001340 <HAL_ADC_ConfigChannel+0xa8>
 800133e:	e091      	b.n	8001464 <HAL_ADC_ConfigChannel+0x1cc>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2202      	movs	r2, #2
 8001346:	4013      	ands	r3, r2
 8001348:	d000      	beq.n	800134c <HAL_ADC_ConfigChannel+0xb4>
 800134a:	e089      	b.n	8001460 <HAL_ADC_ConfigChannel+0x1c8>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2204      	movs	r2, #4
 8001352:	4013      	ands	r3, r2
 8001354:	d000      	beq.n	8001358 <HAL_ADC_ConfigChannel+0xc0>
 8001356:	e081      	b.n	800145c <HAL_ADC_ConfigChannel+0x1c4>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2208      	movs	r2, #8
 800135e:	4013      	ands	r3, r2
 8001360:	d000      	beq.n	8001364 <HAL_ADC_ConfigChannel+0xcc>
 8001362:	e079      	b.n	8001458 <HAL_ADC_ConfigChannel+0x1c0>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2210      	movs	r2, #16
 800136a:	4013      	ands	r3, r2
 800136c:	d000      	beq.n	8001370 <HAL_ADC_ConfigChannel+0xd8>
 800136e:	e071      	b.n	8001454 <HAL_ADC_ConfigChannel+0x1bc>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2220      	movs	r2, #32
 8001376:	4013      	ands	r3, r2
 8001378:	d000      	beq.n	800137c <HAL_ADC_ConfigChannel+0xe4>
 800137a:	e069      	b.n	8001450 <HAL_ADC_ConfigChannel+0x1b8>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2240      	movs	r2, #64	; 0x40
 8001382:	4013      	ands	r3, r2
 8001384:	d000      	beq.n	8001388 <HAL_ADC_ConfigChannel+0xf0>
 8001386:	e061      	b.n	800144c <HAL_ADC_ConfigChannel+0x1b4>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	4013      	ands	r3, r2
 8001390:	d000      	beq.n	8001394 <HAL_ADC_ConfigChannel+0xfc>
 8001392:	e059      	b.n	8001448 <HAL_ADC_ConfigChannel+0x1b0>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4013      	ands	r3, r2
 800139e:	d151      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1ac>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	d149      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1a8>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4013      	ands	r3, r2
 80013b6:	d141      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1a4>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4013      	ands	r3, r2
 80013c2:	d139      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x1a0>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	015b      	lsls	r3, r3, #5
 80013cc:	4013      	ands	r3, r2
 80013ce:	d131      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x19c>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	019b      	lsls	r3, r3, #6
 80013d8:	4013      	ands	r3, r2
 80013da:	d129      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x198>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	01db      	lsls	r3, r3, #7
 80013e4:	4013      	ands	r3, r2
 80013e6:	d121      	bne.n	800142c <HAL_ADC_ConfigChannel+0x194>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	4013      	ands	r3, r2
 80013f2:	d119      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x190>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	025b      	lsls	r3, r3, #9
 80013fc:	4013      	ands	r3, r2
 80013fe:	d111      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x18c>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	029b      	lsls	r3, r3, #10
 8001408:	4013      	ands	r3, r2
 800140a:	d109      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x188>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	02db      	lsls	r3, r3, #11
 8001414:	4013      	ands	r3, r2
 8001416:	d001      	beq.n	800141c <HAL_ADC_ConfigChannel+0x184>
 8001418:	2312      	movs	r3, #18
 800141a:	e024      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 800141c:	2300      	movs	r3, #0
 800141e:	e022      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001420:	2311      	movs	r3, #17
 8001422:	e020      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001424:	2310      	movs	r3, #16
 8001426:	e01e      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001428:	230f      	movs	r3, #15
 800142a:	e01c      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 800142c:	230e      	movs	r3, #14
 800142e:	e01a      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001430:	230d      	movs	r3, #13
 8001432:	e018      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001434:	230c      	movs	r3, #12
 8001436:	e016      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001438:	230b      	movs	r3, #11
 800143a:	e014      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 800143c:	230a      	movs	r3, #10
 800143e:	e012      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001440:	2309      	movs	r3, #9
 8001442:	e010      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001444:	2308      	movs	r3, #8
 8001446:	e00e      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001448:	2307      	movs	r3, #7
 800144a:	e00c      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 800144c:	2306      	movs	r3, #6
 800144e:	e00a      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001450:	2305      	movs	r3, #5
 8001452:	e008      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001454:	2304      	movs	r3, #4
 8001456:	e006      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001458:	2303      	movs	r3, #3
 800145a:	e004      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 800145c:	2302      	movs	r3, #2
 800145e:	e002      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_ADC_ConfigChannel+0x1ce>
 8001464:	2300      	movs	r3, #0
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	6852      	ldr	r2, [r2, #4]
 800146a:	201f      	movs	r0, #31
 800146c:	4002      	ands	r2, r0
 800146e:	4093      	lsls	r3, r2
 8001470:	000a      	movs	r2, r1
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	429a      	cmp	r2, r3
 8001486:	d808      	bhi.n	800149a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	001a      	movs	r2, r3
 8001496:	f7ff fc2e 	bl	8000cf6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	001a      	movs	r2, r3
 80014a8:	f7ff fc68 	bl	8000d7c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db00      	blt.n	80014b6 <HAL_ADC_ConfigChannel+0x21e>
 80014b4:	e0bc      	b.n	8001630 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014b6:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <HAL_ADC_ConfigChannel+0x360>)
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff fbdb 	bl	8000c74 <LL_ADC_GetCommonPathInternalCh>
 80014be:	0003      	movs	r3, r0
 80014c0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a4d      	ldr	r2, [pc, #308]	; (80015fc <HAL_ADC_ConfigChannel+0x364>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d122      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	041b      	lsls	r3, r3, #16
 80014d2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014d4:	d11d      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	0412      	lsls	r2, r2, #16
 80014dc:	4313      	orrs	r3, r2
 80014de:	4a46      	ldr	r2, [pc, #280]	; (80015f8 <HAL_ADC_ConfigChannel+0x360>)
 80014e0:	0019      	movs	r1, r3
 80014e2:	0010      	movs	r0, r2
 80014e4:	f7ff fbb2 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014e8:	4b45      	ldr	r3, [pc, #276]	; (8001600 <HAL_ADC_ConfigChannel+0x368>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4945      	ldr	r1, [pc, #276]	; (8001604 <HAL_ADC_ConfigChannel+0x36c>)
 80014ee:	0018      	movs	r0, r3
 80014f0:	f7fe fe1c 	bl	800012c <__udivsi3>
 80014f4:	0003      	movs	r3, r0
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	0013      	movs	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	189b      	adds	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001502:	e002      	b.n	800150a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3b01      	subs	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f9      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001510:	e08e      	b.n	8001630 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <HAL_ADC_ConfigChannel+0x370>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d10e      	bne.n	800153a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	045b      	lsls	r3, r3, #17
 8001522:	4013      	ands	r3, r2
 8001524:	d109      	bne.n	800153a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	0452      	lsls	r2, r2, #17
 800152c:	4313      	orrs	r3, r2
 800152e:	4a32      	ldr	r2, [pc, #200]	; (80015f8 <HAL_ADC_ConfigChannel+0x360>)
 8001530:	0019      	movs	r1, r3
 8001532:	0010      	movs	r0, r2
 8001534:	f7ff fb8a 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
 8001538:	e07a      	b.n	8001630 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a33      	ldr	r2, [pc, #204]	; (800160c <HAL_ADC_ConfigChannel+0x374>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d000      	beq.n	8001546 <HAL_ADC_ConfigChannel+0x2ae>
 8001544:	e074      	b.n	8001630 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	03db      	lsls	r3, r3, #15
 800154c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800154e:	d000      	beq.n	8001552 <HAL_ADC_ConfigChannel+0x2ba>
 8001550:	e06e      	b.n	8001630 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	03d2      	lsls	r2, r2, #15
 8001558:	4313      	orrs	r3, r2
 800155a:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_ADC_ConfigChannel+0x360>)
 800155c:	0019      	movs	r1, r3
 800155e:	0010      	movs	r0, r2
 8001560:	f7ff fb74 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
 8001564:	e064      	b.n	8001630 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	429a      	cmp	r2, r3
 8001570:	d004      	beq.n	800157c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001576:	4a1f      	ldr	r2, [pc, #124]	; (80015f4 <HAL_ADC_ConfigChannel+0x35c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d107      	bne.n	800158c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0019      	movs	r1, r3
 8001586:	0010      	movs	r0, r2
 8001588:	f7ff fbe6 	bl	8000d58 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	da4d      	bge.n	8001630 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_ADC_ConfigChannel+0x360>)
 8001596:	0018      	movs	r0, r3
 8001598:	f7ff fb6c 	bl	8000c74 <LL_ADC_GetCommonPathInternalCh>
 800159c:	0003      	movs	r3, r0
 800159e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a15      	ldr	r2, [pc, #84]	; (80015fc <HAL_ADC_ConfigChannel+0x364>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d108      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4a18      	ldr	r2, [pc, #96]	; (8001610 <HAL_ADC_ConfigChannel+0x378>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <HAL_ADC_ConfigChannel+0x360>)
 80015b2:	0019      	movs	r1, r3
 80015b4:	0010      	movs	r0, r2
 80015b6:	f7ff fb49 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
 80015ba:	e039      	b.n	8001630 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_ADC_ConfigChannel+0x370>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d108      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <HAL_ADC_ConfigChannel+0x37c>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_ADC_ConfigChannel+0x360>)
 80015ce:	0019      	movs	r1, r3
 80015d0:	0010      	movs	r0, r2
 80015d2:	f7ff fb3b 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
 80015d6:	e02b      	b.n	8001630 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_ADC_ConfigChannel+0x374>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d126      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <HAL_ADC_ConfigChannel+0x380>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <HAL_ADC_ConfigChannel+0x360>)
 80015ea:	0019      	movs	r1, r3
 80015ec:	0010      	movs	r0, r2
 80015ee:	f7ff fb2d 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
 80015f2:	e01d      	b.n	8001630 <HAL_ADC_ConfigChannel+0x398>
 80015f4:	80000004 	.word	0x80000004
 80015f8:	40012708 	.word	0x40012708
 80015fc:	b0001000 	.word	0xb0001000
 8001600:	20000000 	.word	0x20000000
 8001604:	00030d40 	.word	0x00030d40
 8001608:	b8004000 	.word	0xb8004000
 800160c:	b4002000 	.word	0xb4002000
 8001610:	ff7fffff 	.word	0xff7fffff
 8001614:	feffffff 	.word	0xfeffffff
 8001618:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	2220      	movs	r2, #32
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001628:	2317      	movs	r3, #23
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2254      	movs	r2, #84	; 0x54
 8001634:	2100      	movs	r1, #0
 8001636:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001638:	2317      	movs	r3, #23
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	781b      	ldrb	r3, [r3, #0]
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b006      	add	sp, #24
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)

08001648 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0018      	movs	r0, r3
 800165a:	f7ff fbe5 	bl	8000e28 <LL_ADC_IsEnabled>
 800165e:	1e03      	subs	r3, r0, #0
 8001660:	d000      	beq.n	8001664 <ADC_Enable+0x1c>
 8001662:	e069      	b.n	8001738 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	4a36      	ldr	r2, [pc, #216]	; (8001744 <ADC_Enable+0xfc>)
 800166c:	4013      	ands	r3, r2
 800166e:	d00d      	beq.n	800168c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	2210      	movs	r2, #16
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2201      	movs	r2, #1
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e056      	b.n	800173a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff fbb7 	bl	8000e04 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <ADC_Enable+0x100>)
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff faeb 	bl	8000c74 <LL_ADC_GetCommonPathInternalCh>
 800169e:	0002      	movs	r2, r0
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	041b      	lsls	r3, r3, #16
 80016a4:	4013      	ands	r3, r2
 80016a6:	d00f      	beq.n	80016c8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <ADC_Enable+0x104>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4928      	ldr	r1, [pc, #160]	; (8001750 <ADC_Enable+0x108>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7fe fd3c 	bl	800012c <__udivsi3>
 80016b4:	0003      	movs	r3, r0
 80016b6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80016b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016ba:	e002      	b.n	80016c2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	3b01      	subs	r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f9      	bne.n	80016bc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7e5b      	ldrb	r3, [r3, #25]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d033      	beq.n	8001738 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80016d0:	f7ff fab2 	bl	8000c38 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016d8:	e027      	b.n	800172a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff fba2 	bl	8000e28 <LL_ADC_IsEnabled>
 80016e4:	1e03      	subs	r3, r0, #0
 80016e6:	d104      	bne.n	80016f2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff fb89 	bl	8000e04 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016f2:	f7ff faa1 	bl	8000c38 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d914      	bls.n	800172a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2201      	movs	r2, #1
 8001708:	4013      	ands	r3, r2
 800170a:	2b01      	cmp	r3, #1
 800170c:	d00d      	beq.n	800172a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	2210      	movs	r2, #16
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171e:	2201      	movs	r2, #1
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e007      	b.n	800173a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	4013      	ands	r3, r2
 8001734:	2b01      	cmp	r3, #1
 8001736:	d1d0      	bne.n	80016da <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	80000017 	.word	0x80000017
 8001748:	40012708 	.word	0x40012708
 800174c:	20000000 	.word	0x20000000
 8001750:	00030d40 	.word	0x00030d40

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	0002      	movs	r2, r0
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b7f      	cmp	r3, #127	; 0x7f
 8001766:	d809      	bhi.n	800177c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001768:	1dfb      	adds	r3, r7, #7
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	001a      	movs	r2, r3
 800176e:	231f      	movs	r3, #31
 8001770:	401a      	ands	r2, r3
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_EnableIRQ+0x30>)
 8001774:	2101      	movs	r1, #1
 8001776:	4091      	lsls	r1, r2
 8001778:	000a      	movs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b002      	add	sp, #8
 8001782:	bd80      	pop	{r7, pc}
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	0002      	movs	r2, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b7f      	cmp	r3, #127	; 0x7f
 800179c:	d828      	bhi.n	80017f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800179e:	4a2f      	ldr	r2, [pc, #188]	; (800185c <__NVIC_SetPriority+0xd4>)
 80017a0:	1dfb      	adds	r3, r7, #7
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	33c0      	adds	r3, #192	; 0xc0
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	589b      	ldr	r3, [r3, r2]
 80017ae:	1dfa      	adds	r2, r7, #7
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	0011      	movs	r1, r2
 80017b4:	2203      	movs	r2, #3
 80017b6:	400a      	ands	r2, r1
 80017b8:	00d2      	lsls	r2, r2, #3
 80017ba:	21ff      	movs	r1, #255	; 0xff
 80017bc:	4091      	lsls	r1, r2
 80017be:	000a      	movs	r2, r1
 80017c0:	43d2      	mvns	r2, r2
 80017c2:	401a      	ands	r2, r3
 80017c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	019b      	lsls	r3, r3, #6
 80017ca:	22ff      	movs	r2, #255	; 0xff
 80017cc:	401a      	ands	r2, r3
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	0018      	movs	r0, r3
 80017d4:	2303      	movs	r3, #3
 80017d6:	4003      	ands	r3, r0
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017dc:	481f      	ldr	r0, [pc, #124]	; (800185c <__NVIC_SetPriority+0xd4>)
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	430a      	orrs	r2, r1
 80017e8:	33c0      	adds	r3, #192	; 0xc0
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017ee:	e031      	b.n	8001854 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f0:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <__NVIC_SetPriority+0xd8>)
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	0019      	movs	r1, r3
 80017f8:	230f      	movs	r3, #15
 80017fa:	400b      	ands	r3, r1
 80017fc:	3b08      	subs	r3, #8
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3306      	adds	r3, #6
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	18d3      	adds	r3, r2, r3
 8001806:	3304      	adds	r3, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	1dfa      	adds	r2, r7, #7
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	0011      	movs	r1, r2
 8001810:	2203      	movs	r2, #3
 8001812:	400a      	ands	r2, r1
 8001814:	00d2      	lsls	r2, r2, #3
 8001816:	21ff      	movs	r1, #255	; 0xff
 8001818:	4091      	lsls	r1, r2
 800181a:	000a      	movs	r2, r1
 800181c:	43d2      	mvns	r2, r2
 800181e:	401a      	ands	r2, r3
 8001820:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	019b      	lsls	r3, r3, #6
 8001826:	22ff      	movs	r2, #255	; 0xff
 8001828:	401a      	ands	r2, r3
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	0018      	movs	r0, r3
 8001830:	2303      	movs	r3, #3
 8001832:	4003      	ands	r3, r0
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <__NVIC_SetPriority+0xd8>)
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	001c      	movs	r4, r3
 8001840:	230f      	movs	r3, #15
 8001842:	4023      	ands	r3, r4
 8001844:	3b08      	subs	r3, #8
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	430a      	orrs	r2, r1
 800184a:	3306      	adds	r3, #6
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	18c3      	adds	r3, r0, r3
 8001850:	3304      	adds	r3, #4
 8001852:	601a      	str	r2, [r3, #0]
}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b003      	add	sp, #12
 800185a:	bd90      	pop	{r4, r7, pc}
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	210f      	movs	r1, #15
 8001870:	187b      	adds	r3, r7, r1
 8001872:	1c02      	adds	r2, r0, #0
 8001874:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	187b      	adds	r3, r7, r1
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b25b      	sxtb	r3, r3
 800187e:	0011      	movs	r1, r2
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ff81 	bl	8001788 <__NVIC_SetPriority>
}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b004      	add	sp, #16
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	0002      	movs	r2, r0
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff ff57 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b002      	add	sp, #8
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	e147      	b.n	8001b50 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4091      	lsls	r1, r2
 80018ca:	000a      	movs	r2, r1
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d100      	bne.n	80018d8 <HAL_GPIO_Init+0x28>
 80018d6:	e138      	b.n	8001b4a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2203      	movs	r2, #3
 80018de:	4013      	ands	r3, r2
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d005      	beq.n	80018f0 <HAL_GPIO_Init+0x40>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2203      	movs	r2, #3
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d130      	bne.n	8001952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	409a      	lsls	r2, r3
 80018fe:	0013      	movs	r3, r2
 8001900:	43da      	mvns	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	409a      	lsls	r2, r3
 8001912:	0013      	movs	r3, r2
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001926:	2201      	movs	r2, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
 800192c:	0013      	movs	r3, r2
 800192e:	43da      	mvns	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	2201      	movs	r2, #1
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
 8001944:	0013      	movs	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2203      	movs	r2, #3
 8001958:	4013      	ands	r3, r2
 800195a:	2b03      	cmp	r3, #3
 800195c:	d017      	beq.n	800198e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	43da      	mvns	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	409a      	lsls	r2, r3
 8001980:	0013      	movs	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2203      	movs	r2, #3
 8001994:	4013      	ands	r3, r2
 8001996:	2b02      	cmp	r3, #2
 8001998:	d123      	bne.n	80019e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	58d3      	ldr	r3, [r2, r3]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2207      	movs	r2, #7
 80019ac:	4013      	ands	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	220f      	movs	r2, #15
 80019b2:	409a      	lsls	r2, r3
 80019b4:	0013      	movs	r3, r2
 80019b6:	43da      	mvns	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2107      	movs	r1, #7
 80019c6:	400b      	ands	r3, r1
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	6939      	ldr	r1, [r7, #16]
 80019e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	409a      	lsls	r2, r3
 80019f0:	0013      	movs	r3, r2
 80019f2:	43da      	mvns	r2, r3
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2203      	movs	r2, #3
 8001a00:	401a      	ands	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	409a      	lsls	r2, r3
 8001a08:	0013      	movs	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	23c0      	movs	r3, #192	; 0xc0
 8001a1c:	029b      	lsls	r3, r3, #10
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d100      	bne.n	8001a24 <HAL_GPIO_Init+0x174>
 8001a22:	e092      	b.n	8001b4a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a24:	4a50      	ldr	r2, [pc, #320]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3318      	adds	r3, #24
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	589b      	ldr	r3, [r3, r2]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2203      	movs	r2, #3
 8001a36:	4013      	ands	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	0013      	movs	r3, r2
 8001a40:	43da      	mvns	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	23a0      	movs	r3, #160	; 0xa0
 8001a4c:	05db      	lsls	r3, r3, #23
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x1ca>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a45      	ldr	r2, [pc, #276]	; (8001b6c <HAL_GPIO_Init+0x2bc>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x1c6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a44      	ldr	r2, [pc, #272]	; (8001b70 <HAL_GPIO_Init+0x2c0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x1c2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a43      	ldr	r2, [pc, #268]	; (8001b74 <HAL_GPIO_Init+0x2c4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x1be>
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x1cc>
 8001a6e:	2305      	movs	r3, #5
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_Init+0x1cc>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_Init+0x1cc>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x1cc>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	2103      	movs	r1, #3
 8001a80:	400a      	ands	r2, r1
 8001a82:	00d2      	lsls	r2, r2, #3
 8001a84:	4093      	lsls	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001a8c:	4936      	ldr	r1, [pc, #216]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3318      	adds	r3, #24
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a9a:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	035b      	lsls	r3, r3, #13
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001ac4:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43da      	mvns	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	039b      	lsls	r3, r3, #14
 8001adc:	4013      	ands	r3, r2
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aee:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001af0:	2384      	movs	r3, #132	; 0x84
 8001af2:	58d3      	ldr	r3, [r2, r3]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43da      	mvns	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	029b      	lsls	r3, r3, #10
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b14:	4914      	ldr	r1, [pc, #80]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001b16:	2284      	movs	r2, #132	; 0x84
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001b1c:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	58d3      	ldr	r3, [r2, r3]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43da      	mvns	r2, r3
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	025b      	lsls	r3, r3, #9
 8001b36:	4013      	ands	r3, r2
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b42:	4909      	ldr	r1, [pc, #36]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	40da      	lsrs	r2, r3
 8001b58:	1e13      	subs	r3, r2, #0
 8001b5a:	d000      	beq.n	8001b5e <HAL_GPIO_Init+0x2ae>
 8001b5c:	e6b0      	b.n	80018c0 <HAL_GPIO_Init+0x10>
  }
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b006      	add	sp, #24
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021800 	.word	0x40021800
 8001b6c:	50000400 	.word	0x50000400
 8001b70:	50000800 	.word	0x50000800
 8001b74:	50000c00 	.word	0x50000c00

08001b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	0008      	movs	r0, r1
 8001b82:	0011      	movs	r1, r2
 8001b84:	1cbb      	adds	r3, r7, #2
 8001b86:	1c02      	adds	r2, r0, #0
 8001b88:	801a      	strh	r2, [r3, #0]
 8001b8a:	1c7b      	adds	r3, r7, #1
 8001b8c:	1c0a      	adds	r2, r1, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b90:	1c7b      	adds	r3, r7, #1
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b98:	1cbb      	adds	r3, r7, #2
 8001b9a:	881a      	ldrh	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba0:	e003      	b.n	8001baa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba2:	1cbb      	adds	r3, r7, #2
 8001ba4:	881a      	ldrh	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b002      	add	sp, #8
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	000a      	movs	r2, r1
 8001bbc:	1cbb      	adds	r3, r7, #2
 8001bbe:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bc6:	1cbb      	adds	r3, r7, #2
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	041a      	lsls	r2, r3, #16
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	1cb9      	adds	r1, r7, #2
 8001bd6:	8809      	ldrh	r1, [r1, #0]
 8001bd8:	400b      	ands	r3, r1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	619a      	str	r2, [r3, #24]
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b004      	add	sp, #16
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d11f      	bne.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	0013      	movs	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	189b      	adds	r3, r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4912      	ldr	r1, [pc, #72]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7fe fa86 	bl	800012c <__udivsi3>
 8001c20:	0003      	movs	r3, r0
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c26:	e008      	b.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e001      	b.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e009      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	401a      	ands	r2, r3
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d0ed      	beq.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b004      	add	sp, #16
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	fffff9ff 	.word	0xfffff9ff
 8001c60:	20000000 	.word	0x20000000
 8001c64:	000f4240 	.word	0x000f4240

08001c68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	23e0      	movs	r3, #224	; 0xe0
 8001c72:	01db      	lsls	r3, r3, #7
 8001c74:	4013      	ands	r3, r2
}
 8001c76:	0018      	movs	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e2f3      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <HAL_RCC_OscConfig+0x1e>
 8001c9c:	e07c      	b.n	8001d98 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9e:	4bc3      	ldr	r3, [pc, #780]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2238      	movs	r2, #56	; 0x38
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca8:	4bc0      	ldr	r3, [pc, #768]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2203      	movs	r2, #3
 8001cae:	4013      	ands	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3e>
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d10b      	bne.n	8001cdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	4bb9      	ldr	r3, [pc, #740]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d062      	beq.n	8001d96 <HAL_RCC_OscConfig+0x116>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d15e      	bne.n	8001d96 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e2ce      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	025b      	lsls	r3, r3, #9
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x78>
 8001ce8:	4bb0      	ldr	r3, [pc, #704]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4baf      	ldr	r3, [pc, #700]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	0249      	lsls	r1, r1, #9
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e020      	b.n	8001d3a <HAL_RCC_OscConfig+0xba>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	23a0      	movs	r3, #160	; 0xa0
 8001cfe:	02db      	lsls	r3, r3, #11
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10e      	bne.n	8001d22 <HAL_RCC_OscConfig+0xa2>
 8001d04:	4ba9      	ldr	r3, [pc, #676]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4ba8      	ldr	r3, [pc, #672]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	02c9      	lsls	r1, r1, #11
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	4ba6      	ldr	r3, [pc, #664]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4ba5      	ldr	r3, [pc, #660]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	0249      	lsls	r1, r1, #9
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e00b      	b.n	8001d3a <HAL_RCC_OscConfig+0xba>
 8001d22:	4ba2      	ldr	r3, [pc, #648]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4ba1      	ldr	r3, [pc, #644]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d28:	49a1      	ldr	r1, [pc, #644]	; (8001fb0 <HAL_RCC_OscConfig+0x330>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	4b9f      	ldr	r3, [pc, #636]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b9e      	ldr	r3, [pc, #632]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d34:	499f      	ldr	r1, [pc, #636]	; (8001fb4 <HAL_RCC_OscConfig+0x334>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d014      	beq.n	8001d6c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7fe ff79 	bl	8000c38 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7fe ff74 	bl	8000c38 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e28d      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5e:	4b93      	ldr	r3, [pc, #588]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	029b      	lsls	r3, r3, #10
 8001d66:	4013      	ands	r3, r2
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xcc>
 8001d6a:	e015      	b.n	8001d98 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7fe ff64 	bl	8000c38 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d76:	f7fe ff5f 	bl	8000c38 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e278      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d88:	4b88      	ldr	r3, [pc, #544]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
 8001d92:	d1f0      	bne.n	8001d76 <HAL_RCC_OscConfig+0xf6>
 8001d94:	e000      	b.n	8001d98 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d100      	bne.n	8001da4 <HAL_RCC_OscConfig+0x124>
 8001da2:	e099      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da4:	4b81      	ldr	r3, [pc, #516]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2238      	movs	r2, #56	; 0x38
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dae:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2203      	movs	r2, #3
 8001db4:	4013      	ands	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x144>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d002      	beq.n	8001dca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d135      	bne.n	8001e36 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dca:	4b78      	ldr	r3, [pc, #480]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x162>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e24b      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b72      	ldr	r3, [pc, #456]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a74      	ldr	r2, [pc, #464]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	0019      	movs	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	021a      	lsls	r2, r3, #8
 8001df2:	4b6e      	ldr	r3, [pc, #440]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d112      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001dfe:	4b6b      	ldr	r3, [pc, #428]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6e      	ldr	r2, [pc, #440]	; (8001fbc <HAL_RCC_OscConfig+0x33c>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e12:	4b66      	ldr	r3, [pc, #408]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0adb      	lsrs	r3, r3, #11
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	4a68      	ldr	r2, [pc, #416]	; (8001fc0 <HAL_RCC_OscConfig+0x340>)
 8001e1e:	40da      	lsrs	r2, r3
 8001e20:	4b68      	ldr	r3, [pc, #416]	; (8001fc4 <HAL_RCC_OscConfig+0x344>)
 8001e22:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e24:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <HAL_RCC_OscConfig+0x348>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7fe fe0d 	bl	8000a48 <HAL_InitTick>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d051      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e221      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d030      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a5e      	ldr	r2, [pc, #376]	; (8001fbc <HAL_RCC_OscConfig+0x33c>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	4b57      	ldr	r3, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e52:	4b56      	ldr	r3, [pc, #344]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b55      	ldr	r3, [pc, #340]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	0049      	lsls	r1, r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe feea 	bl	8000c38 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7fe fee5 	bl	8000c38 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1fe      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4013      	ands	r3, r2
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b48      	ldr	r3, [pc, #288]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a4a      	ldr	r2, [pc, #296]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	021a      	lsls	r2, r3, #8
 8001e98:	4b44      	ldr	r3, [pc, #272]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	e01b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ea0:	4b42      	ldr	r3, [pc, #264]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b41      	ldr	r3, [pc, #260]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	4949      	ldr	r1, [pc, #292]	; (8001fcc <HAL_RCC_OscConfig+0x34c>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe fec4 	bl	8000c38 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7fe febf 	bl	8000c38 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1d8      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec8:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x236>
 8001ed4:	e000      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2208      	movs	r2, #8
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d047      	beq.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ee2:	4b32      	ldr	r3, [pc, #200]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2238      	movs	r2, #56	; 0x38
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b18      	cmp	r3, #24
 8001eec:	d10a      	bne.n	8001f04 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d03c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d138      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e1ba      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d019      	beq.n	8001f40 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	430a      	orrs	r2, r1
 8001f16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe fe8e 	bl	8000c38 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f22:	f7fe fe89 	bl	8000c38 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e1a2      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d0f1      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2a2>
 8001f3e:	e018      	b.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	438a      	bics	r2, r1
 8001f4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fe74 	bl	8000c38 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f56:	f7fe fe6f 	bl	8000c38 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e188      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d1f1      	bne.n	8001f56 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2fe>
 8001f7c:	e0c6      	b.n	800210c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	231f      	movs	r3, #31
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2238      	movs	r2, #56	; 0x38
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	d11e      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	2202      	movs	r2, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d100      	bne.n	8001f9e <HAL_RCC_OscConfig+0x31e>
 8001f9c:	e0b6      	b.n	800210c <HAL_RCC_OscConfig+0x48c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d000      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x328>
 8001fa6:	e0b1      	b.n	800210c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e166      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	fffeffff 	.word	0xfffeffff
 8001fb4:	fffbffff 	.word	0xfffbffff
 8001fb8:	ffff80ff 	.word	0xffff80ff
 8001fbc:	ffffc7ff 	.word	0xffffc7ff
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fd0:	4bac      	ldr	r3, [pc, #688]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8001fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	055b      	lsls	r3, r3, #21
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x360>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x362>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d011      	beq.n	800200a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4ba7      	ldr	r3, [pc, #668]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8001fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fea:	4ba6      	ldr	r3, [pc, #664]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8001fec:	2180      	movs	r1, #128	; 0x80
 8001fee:	0549      	lsls	r1, r1, #21
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ff4:	4ba3      	ldr	r3, [pc, #652]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8001ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	055b      	lsls	r3, r3, #21
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002002:	231f      	movs	r3, #31
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200a:	4b9f      	ldr	r3, [pc, #636]	; (8002288 <HAL_RCC_OscConfig+0x608>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4013      	ands	r3, r2
 8002014:	d11a      	bne.n	800204c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002016:	4b9c      	ldr	r3, [pc, #624]	; (8002288 <HAL_RCC_OscConfig+0x608>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4b9b      	ldr	r3, [pc, #620]	; (8002288 <HAL_RCC_OscConfig+0x608>)
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	0049      	lsls	r1, r1, #1
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002024:	f7fe fe08 	bl	8000c38 <HAL_GetTick>
 8002028:	0003      	movs	r3, r0
 800202a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7fe fe03 	bl	8000c38 <HAL_GetTick>
 8002032:	0002      	movs	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e11c      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002040:	4b91      	ldr	r3, [pc, #580]	; (8002288 <HAL_RCC_OscConfig+0x608>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4013      	ands	r3, r2
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x3e2>
 8002054:	4b8b      	ldr	r3, [pc, #556]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002056:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002058:	4b8a      	ldr	r3, [pc, #552]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 800205a:	2101      	movs	r1, #1
 800205c:	430a      	orrs	r2, r1
 800205e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002060:	e01c      	b.n	800209c <HAL_RCC_OscConfig+0x41c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b05      	cmp	r3, #5
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x404>
 800206a:	4b86      	ldr	r3, [pc, #536]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 800206c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800206e:	4b85      	ldr	r3, [pc, #532]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002070:	2104      	movs	r1, #4
 8002072:	430a      	orrs	r2, r1
 8002074:	65da      	str	r2, [r3, #92]	; 0x5c
 8002076:	4b83      	ldr	r3, [pc, #524]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002078:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800207a:	4b82      	ldr	r3, [pc, #520]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	65da      	str	r2, [r3, #92]	; 0x5c
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0x41c>
 8002084:	4b7f      	ldr	r3, [pc, #508]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002088:	4b7e      	ldr	r3, [pc, #504]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 800208a:	2101      	movs	r1, #1
 800208c:	438a      	bics	r2, r1
 800208e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002090:	4b7c      	ldr	r3, [pc, #496]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002092:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002094:	4b7b      	ldr	r3, [pc, #492]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002096:	2104      	movs	r1, #4
 8002098:	438a      	bics	r2, r1
 800209a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d014      	beq.n	80020ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe fdc8 	bl	8000c38 <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ac:	e009      	b.n	80020c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7fe fdc3 	bl	8000c38 <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	4a74      	ldr	r2, [pc, #464]	; (800228c <HAL_RCC_OscConfig+0x60c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0db      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c2:	4b70      	ldr	r3, [pc, #448]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x42e>
 80020cc:	e013      	b.n	80020f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7fe fdb3 	bl	8000c38 <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d6:	e009      	b.n	80020ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7fe fdae 	bl	8000c38 <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	4a6a      	ldr	r2, [pc, #424]	; (800228c <HAL_RCC_OscConfig+0x60c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0c6      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ec:	4b65      	ldr	r3, [pc, #404]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2202      	movs	r2, #2
 80020f2:	4013      	ands	r3, r2
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80020f6:	231f      	movs	r3, #31
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002100:	4b60      	ldr	r3, [pc, #384]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002104:	4b5f      	ldr	r3, [pc, #380]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002106:	4962      	ldr	r1, [pc, #392]	; (8002290 <HAL_RCC_OscConfig+0x610>)
 8002108:	400a      	ands	r2, r1
 800210a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d100      	bne.n	8002116 <HAL_RCC_OscConfig+0x496>
 8002114:	e0b0      	b.n	8002278 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002116:	4b5b      	ldr	r3, [pc, #364]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2238      	movs	r2, #56	; 0x38
 800211c:	4013      	ands	r3, r2
 800211e:	2b10      	cmp	r3, #16
 8002120:	d100      	bne.n	8002124 <HAL_RCC_OscConfig+0x4a4>
 8002122:	e078      	b.n	8002216 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d153      	bne.n	80021d4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212c:	4b55      	ldr	r3, [pc, #340]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002132:	4958      	ldr	r1, [pc, #352]	; (8002294 <HAL_RCC_OscConfig+0x614>)
 8002134:	400a      	ands	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe fd7e 	bl	8000c38 <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7fe fd79 	bl	8000c38 <HAL_GetTick>
 8002146:	0002      	movs	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e092      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	049b      	lsls	r3, r3, #18
 800215c:	4013      	ands	r3, r2
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002160:	4b48      	ldr	r3, [pc, #288]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a4c      	ldr	r2, [pc, #304]	; (8002298 <HAL_RCC_OscConfig+0x618>)
 8002166:	4013      	ands	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	431a      	orrs	r2, r3
 8002188:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 800218a:	430a      	orrs	r2, r1
 800218c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218e:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0449      	lsls	r1, r1, #17
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800219c:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	4b38      	ldr	r3, [pc, #224]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	0549      	lsls	r1, r1, #21
 80021a6:	430a      	orrs	r2, r1
 80021a8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7fe fd45 	bl	8000c38 <HAL_GetTick>
 80021ae:	0003      	movs	r3, r0
 80021b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe fd40 	bl	8000c38 <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e059      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	049b      	lsls	r3, r3, #18
 80021ce:	4013      	ands	r3, r2
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x534>
 80021d2:	e051      	b.n	8002278 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d4:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 80021da:	492e      	ldr	r1, [pc, #184]	; (8002294 <HAL_RCC_OscConfig+0x614>)
 80021dc:	400a      	ands	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe fd2a 	bl	8000c38 <HAL_GetTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ea:	f7fe fd25 	bl	8000c38 <HAL_GetTick>
 80021ee:	0002      	movs	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e03e      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	049b      	lsls	r3, r3, #18
 8002204:	4013      	ands	r3, r2
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 800220e:	4923      	ldr	r1, [pc, #140]	; (800229c <HAL_RCC_OscConfig+0x61c>)
 8002210:	400a      	ands	r2, r1
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	e030      	b.n	8002278 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e02b      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_RCC_OscConfig+0x604>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2203      	movs	r2, #3
 800222c:	401a      	ands	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	429a      	cmp	r2, r3
 8002234:	d11e      	bne.n	8002274 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2270      	movs	r2, #112	; 0x70
 800223a:	401a      	ands	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d117      	bne.n	8002274 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	23fe      	movs	r3, #254	; 0xfe
 8002248:	01db      	lsls	r3, r3, #7
 800224a:	401a      	ands	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d10e      	bne.n	8002274 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	23f8      	movs	r3, #248	; 0xf8
 800225a:	039b      	lsls	r3, r3, #14
 800225c:	401a      	ands	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	0f5b      	lsrs	r3, r3, #29
 800226a:	075a      	lsls	r2, r3, #29
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b008      	add	sp, #32
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	40021000 	.word	0x40021000
 8002288:	40007000 	.word	0x40007000
 800228c:	00001388 	.word	0x00001388
 8002290:	efffffff 	.word	0xefffffff
 8002294:	feffffff 	.word	0xfeffffff
 8002298:	1fc1808c 	.word	0x1fc1808c
 800229c:	effefffc 	.word	0xeffefffc

080022a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0e9      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b4:	4b76      	ldr	r3, [pc, #472]	; (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2207      	movs	r2, #7
 80022ba:	4013      	ands	r3, r2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d91e      	bls.n	8002300 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b73      	ldr	r3, [pc, #460]	; (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2207      	movs	r2, #7
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	4b70      	ldr	r3, [pc, #448]	; (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022d4:	f7fe fcb0 	bl	8000c38 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f7fe fcab 	bl	8000c38 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a6a      	ldr	r2, [pc, #424]	; (8002494 <HAL_RCC_ClockConfig+0x1f4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e0ca      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022f2:	4b67      	ldr	r3, [pc, #412]	; (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2207      	movs	r2, #7
 80022f8:	4013      	ands	r3, r2
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1ee      	bne.n	80022de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2202      	movs	r2, #2
 8002306:	4013      	ands	r3, r2
 8002308:	d015      	beq.n	8002336 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2204      	movs	r2, #4
 8002310:	4013      	ands	r3, r2
 8002312:	d006      	beq.n	8002322 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002314:	4b60      	ldr	r3, [pc, #384]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 800231a:	21e0      	movs	r1, #224	; 0xe0
 800231c:	01c9      	lsls	r1, r1, #7
 800231e:	430a      	orrs	r2, r1
 8002320:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4a5d      	ldr	r2, [pc, #372]	; (800249c <HAL_RCC_ClockConfig+0x1fc>)
 8002328:	4013      	ands	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002332:	430a      	orrs	r2, r1
 8002334:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	4013      	ands	r3, r2
 800233e:	d057      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002348:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	029b      	lsls	r3, r3, #10
 8002350:	4013      	ands	r3, r2
 8002352:	d12b      	bne.n	80023ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e097      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d107      	bne.n	8002370 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	049b      	lsls	r3, r3, #18
 8002368:	4013      	ands	r3, r2
 800236a:	d11f      	bne.n	80023ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e08b      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002378:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4013      	ands	r3, r2
 8002382:	d113      	bne.n	80023ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e07f      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d106      	bne.n	800239e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002390:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002394:	2202      	movs	r2, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d108      	bne.n	80023ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e074      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e06d      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ac:	4b3a      	ldr	r3, [pc, #232]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2207      	movs	r2, #7
 80023b2:	4393      	bics	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	4b37      	ldr	r3, [pc, #220]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c0:	f7fe fc3a 	bl	8000c38 <HAL_GetTick>
 80023c4:	0003      	movs	r3, r0
 80023c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c8:	e009      	b.n	80023de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ca:	f7fe fc35 	bl	8000c38 <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	4a2f      	ldr	r2, [pc, #188]	; (8002494 <HAL_RCC_ClockConfig+0x1f4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e054      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	4b2e      	ldr	r3, [pc, #184]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2238      	movs	r2, #56	; 0x38
 80023e4:	401a      	ands	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1ec      	bne.n	80023ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4b27      	ldr	r3, [pc, #156]	; (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2207      	movs	r2, #7
 80023f6:	4013      	ands	r3, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d21e      	bcs.n	800243c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2207      	movs	r2, #7
 8002404:	4393      	bics	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002410:	f7fe fc12 	bl	8000c38 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002418:	e009      	b.n	800242e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241a:	f7fe fc0d 	bl	8000c38 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <HAL_RCC_ClockConfig+0x1f4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e02c      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2207      	movs	r2, #7
 8002434:	4013      	ands	r3, r2
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d1ee      	bne.n	800241a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2204      	movs	r2, #4
 8002442:	4013      	ands	r3, r2
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <HAL_RCC_ClockConfig+0x200>)
 800244c:	4013      	ands	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002456:	430a      	orrs	r2, r1
 8002458:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800245a:	f000 f829 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 800245e:	0001      	movs	r1, r0
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	220f      	movs	r2, #15
 8002468:	401a      	ands	r2, r3
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_RCC_ClockConfig+0x204>)
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	58d3      	ldr	r3, [r2, r3]
 8002470:	221f      	movs	r2, #31
 8002472:	4013      	ands	r3, r2
 8002474:	000a      	movs	r2, r1
 8002476:	40da      	lsrs	r2, r3
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_ClockConfig+0x208>)
 800247a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x20c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0018      	movs	r0, r3
 8002482:	f7fe fae1 	bl	8000a48 <HAL_InitTick>
 8002486:	0003      	movs	r3, r0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b004      	add	sp, #16
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40022000 	.word	0x40022000
 8002494:	00001388 	.word	0x00001388
 8002498:	40021000 	.word	0x40021000
 800249c:	fffff0ff 	.word	0xfffff0ff
 80024a0:	ffff8fff 	.word	0xffff8fff
 80024a4:	08006590 	.word	0x08006590
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000004 	.word	0x20000004

080024b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024b6:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2238      	movs	r2, #56	; 0x38
 80024bc:	4013      	ands	r3, r2
 80024be:	d10f      	bne.n	80024e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80024c0:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0adb      	lsrs	r3, r3, #11
 80024c6:	2207      	movs	r2, #7
 80024c8:	4013      	ands	r3, r2
 80024ca:	2201      	movs	r2, #1
 80024cc:	409a      	lsls	r2, r3
 80024ce:	0013      	movs	r3, r2
 80024d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	4835      	ldr	r0, [pc, #212]	; (80025ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80024d6:	f7fd fe29 	bl	800012c <__udivsi3>
 80024da:	0003      	movs	r3, r0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	e05d      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2238      	movs	r2, #56	; 0x38
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024ec:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	e054      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2238      	movs	r2, #56	; 0x38
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d138      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024fe:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2203      	movs	r2, #3
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	2207      	movs	r2, #7
 8002510:	4013      	ands	r3, r2
 8002512:	3301      	adds	r3, #1
 8002514:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d10d      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	4824      	ldr	r0, [pc, #144]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002520:	f7fd fe04 	bl	800012c <__udivsi3>
 8002524:	0003      	movs	r3, r0
 8002526:	0019      	movs	r1, r3
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	227f      	movs	r2, #127	; 0x7f
 8002530:	4013      	ands	r3, r2
 8002532:	434b      	muls	r3, r1
 8002534:	617b      	str	r3, [r7, #20]
        break;
 8002536:	e00d      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	481c      	ldr	r0, [pc, #112]	; (80025ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800253c:	f7fd fdf6 	bl	800012c <__udivsi3>
 8002540:	0003      	movs	r3, r0
 8002542:	0019      	movs	r1, r3
 8002544:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	227f      	movs	r2, #127	; 0x7f
 800254c:	4013      	ands	r3, r2
 800254e:	434b      	muls	r3, r1
 8002550:	617b      	str	r3, [r7, #20]
        break;
 8002552:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0f5b      	lsrs	r3, r3, #29
 800255a:	2207      	movs	r2, #7
 800255c:	4013      	ands	r3, r2
 800255e:	3301      	adds	r3, #1
 8002560:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	6978      	ldr	r0, [r7, #20]
 8002566:	f7fd fde1 	bl	800012c <__udivsi3>
 800256a:	0003      	movs	r3, r0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	e015      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002570:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2238      	movs	r2, #56	; 0x38
 8002576:	4013      	ands	r3, r2
 8002578:	2b20      	cmp	r3, #32
 800257a:	d103      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	e00b      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2238      	movs	r2, #56	; 0x38
 800258a:	4013      	ands	r3, r2
 800258c:	2b18      	cmp	r3, #24
 800258e:	d103      	bne.n	8002598 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002590:	23fa      	movs	r3, #250	; 0xfa
 8002592:	01db      	lsls	r3, r3, #7
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e001      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800259c:	693b      	ldr	r3, [r7, #16]
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b006      	add	sp, #24
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	40021000 	.word	0x40021000
 80025ac:	00f42400 	.word	0x00f42400
 80025b0:	007a1200 	.word	0x007a1200

080025b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	0018      	movs	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	20000000 	.word	0x20000000

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b5b0      	push	{r4, r5, r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80025cc:	f7ff fff2 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d0:	0004      	movs	r4, r0
 80025d2:	f7ff fb49 	bl	8001c68 <LL_RCC_GetAPB1Prescaler>
 80025d6:	0003      	movs	r3, r0
 80025d8:	0b1a      	lsrs	r2, r3, #12
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025dc:	0092      	lsls	r2, r2, #2
 80025de:	58d3      	ldr	r3, [r2, r3]
 80025e0:	221f      	movs	r2, #31
 80025e2:	4013      	ands	r3, r2
 80025e4:	40dc      	lsrs	r4, r3
 80025e6:	0023      	movs	r3, r4
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bdb0      	pop	{r4, r5, r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	080065d0 	.word	0x080065d0

080025f4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2207      	movs	r2, #7
 8002602:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_RCC_GetClockConfig+0x4c>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2207      	movs	r2, #7
 800260a:	401a      	ands	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_GetClockConfig+0x4c>)
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	23f0      	movs	r3, #240	; 0xf0
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	401a      	ands	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_RCC_GetClockConfig+0x4c>)
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	23e0      	movs	r3, #224	; 0xe0
 8002624:	01db      	lsls	r3, r3, #7
 8002626:	401a      	ands	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetClockConfig+0x50>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2207      	movs	r2, #7
 8002632:	401a      	ands	r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	601a      	str	r2, [r3, #0]
}
 8002638:	46c0      	nop			; (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b002      	add	sp, #8
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000
 8002644:	40022000 	.word	0x40022000

08002648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002650:	2313      	movs	r3, #19
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002658:	2312      	movs	r3, #18
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	029b      	lsls	r3, r3, #10
 8002668:	4013      	ands	r3, r2
 800266a:	d100      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800266c:	e0a3      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266e:	2011      	movs	r0, #17
 8002670:	183b      	adds	r3, r7, r0
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002676:	4b86      	ldr	r3, [pc, #536]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	055b      	lsls	r3, r3, #21
 800267e:	4013      	ands	r3, r2
 8002680:	d110      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	4b83      	ldr	r3, [pc, #524]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002684:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002686:	4b82      	ldr	r3, [pc, #520]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002688:	2180      	movs	r1, #128	; 0x80
 800268a:	0549      	lsls	r1, r1, #21
 800268c:	430a      	orrs	r2, r1
 800268e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002690:	4b7f      	ldr	r3, [pc, #508]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	055b      	lsls	r3, r3, #21
 8002698:	4013      	ands	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269e:	183b      	adds	r3, r7, r0
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a4:	4b7b      	ldr	r3, [pc, #492]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b7a      	ldr	r3, [pc, #488]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	0049      	lsls	r1, r1, #1
 80026ae:	430a      	orrs	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026b2:	f7fe fac1 	bl	8000c38 <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ba:	e00b      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026bc:	f7fe fabc 	bl	8000c38 <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d904      	bls.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80026ca:	2313      	movs	r3, #19
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	2203      	movs	r2, #3
 80026d0:	701a      	strb	r2, [r3, #0]
        break;
 80026d2:	e005      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026d4:	4b6f      	ldr	r3, [pc, #444]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4013      	ands	r3, r2
 80026de:	d0ed      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80026e0:	2313      	movs	r3, #19
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d154      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026ea:	4b69      	ldr	r3, [pc, #420]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026ee:	23c0      	movs	r3, #192	; 0xc0
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4013      	ands	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d019      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	429a      	cmp	r2, r3
 8002704:	d014      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002706:	4b62      	ldr	r3, [pc, #392]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	4a63      	ldr	r2, [pc, #396]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800270c:	4013      	ands	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002710:	4b5f      	ldr	r3, [pc, #380]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002712:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002714:	4b5e      	ldr	r3, [pc, #376]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	0249      	lsls	r1, r1, #9
 800271a:	430a      	orrs	r2, r1
 800271c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800271e:	4b5c      	ldr	r3, [pc, #368]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002720:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002722:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002724:	495d      	ldr	r1, [pc, #372]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002726:	400a      	ands	r2, r1
 8002728:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800272a:	4b59      	ldr	r3, [pc, #356]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2201      	movs	r2, #1
 8002734:	4013      	ands	r3, r2
 8002736:	d016      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fa7e 	bl	8000c38 <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002740:	e00c      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe fa79 	bl	8000c38 <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	4a54      	ldr	r2, [pc, #336]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d904      	bls.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002752:	2313      	movs	r3, #19
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	2203      	movs	r2, #3
 8002758:	701a      	strb	r2, [r3, #0]
            break;
 800275a:	e004      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275c:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	2202      	movs	r2, #2
 8002762:	4013      	ands	r3, r2
 8002764:	d0ed      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002766:	2313      	movs	r3, #19
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10a      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002770:	4b47      	ldr	r3, [pc, #284]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	4a48      	ldr	r2, [pc, #288]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	4b44      	ldr	r3, [pc, #272]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002780:	430a      	orrs	r2, r1
 8002782:	65da      	str	r2, [r3, #92]	; 0x5c
 8002784:	e00c      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002786:	2312      	movs	r3, #18
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	2213      	movs	r2, #19
 800278c:	18ba      	adds	r2, r7, r2
 800278e:	7812      	ldrb	r2, [r2, #0]
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e005      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	2312      	movs	r3, #18
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2213      	movs	r2, #19
 800279a:	18ba      	adds	r2, r7, r2
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027a0:	2311      	movs	r3, #17
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d105      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027aa:	4b39      	ldr	r3, [pc, #228]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027b0:	493c      	ldr	r1, [pc, #240]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027b2:	400a      	ands	r2, r1
 80027b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2201      	movs	r2, #1
 80027bc:	4013      	ands	r3, r2
 80027be:	d009      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c0:	4b33      	ldr	r3, [pc, #204]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	2203      	movs	r2, #3
 80027c6:	4393      	bics	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2202      	movs	r2, #2
 80027da:	4013      	ands	r3, r2
 80027dc:	d009      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027de:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	220c      	movs	r2, #12
 80027e4:	4393      	bics	r3, r2
 80027e6:	0019      	movs	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027ee:	430a      	orrs	r2, r1
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2220      	movs	r2, #32
 80027f8:	4013      	ands	r3, r2
 80027fa:	d009      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	4a29      	ldr	r2, [pc, #164]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800280c:	430a      	orrs	r2, r1
 800280e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	01db      	lsls	r3, r3, #7
 8002818:	4013      	ands	r3, r2
 800281a:	d015      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800281c:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	0899      	lsrs	r1, r3, #2
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800282a:	430a      	orrs	r2, r1
 800282c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	05db      	lsls	r3, r3, #23
 8002836:	429a      	cmp	r2, r3
 8002838:	d106      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	0249      	lsls	r1, r1, #9
 8002844:	430a      	orrs	r2, r1
 8002846:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	4013      	ands	r3, r2
 8002852:	d016      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002864:	430a      	orrs	r2, r1
 8002866:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	01db      	lsls	r3, r3, #7
 8002870:	429a      	cmp	r2, r3
 8002872:	d106      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800287a:	2180      	movs	r1, #128	; 0x80
 800287c:	0249      	lsls	r1, r1, #9
 800287e:	430a      	orrs	r2, r1
 8002880:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002882:	2312      	movs	r3, #18
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b006      	add	sp, #24
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
 8002898:	fffffcff 	.word	0xfffffcff
 800289c:	fffeffff 	.word	0xfffeffff
 80028a0:	00001388 	.word	0x00001388
 80028a4:	efffffff 	.word	0xefffffff
 80028a8:	ffffcfff 	.word	0xffffcfff
 80028ac:	ffff3fff 	.word	0xffff3fff

080028b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e04a      	b.n	8002958 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	223d      	movs	r2, #61	; 0x3d
 80028c6:	5c9b      	ldrb	r3, [r3, r2]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d107      	bne.n	80028de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	223c      	movs	r2, #60	; 0x3c
 80028d2:	2100      	movs	r1, #0
 80028d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 f841 	bl	8002960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	223d      	movs	r2, #61	; 0x3d
 80028e2:	2102      	movs	r1, #2
 80028e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	0019      	movs	r1, r3
 80028f0:	0010      	movs	r0, r2
 80028f2:	f000 f9e5 	bl	8002cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2248      	movs	r2, #72	; 0x48
 80028fa:	2101      	movs	r1, #1
 80028fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	223e      	movs	r2, #62	; 0x3e
 8002902:	2101      	movs	r1, #1
 8002904:	5499      	strb	r1, [r3, r2]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	223f      	movs	r2, #63	; 0x3f
 800290a:	2101      	movs	r1, #1
 800290c:	5499      	strb	r1, [r3, r2]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2240      	movs	r2, #64	; 0x40
 8002912:	2101      	movs	r1, #1
 8002914:	5499      	strb	r1, [r3, r2]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2241      	movs	r2, #65	; 0x41
 800291a:	2101      	movs	r1, #1
 800291c:	5499      	strb	r1, [r3, r2]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2242      	movs	r2, #66	; 0x42
 8002922:	2101      	movs	r1, #1
 8002924:	5499      	strb	r1, [r3, r2]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2243      	movs	r2, #67	; 0x43
 800292a:	2101      	movs	r1, #1
 800292c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2244      	movs	r2, #68	; 0x44
 8002932:	2101      	movs	r1, #1
 8002934:	5499      	strb	r1, [r3, r2]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2245      	movs	r2, #69	; 0x45
 800293a:	2101      	movs	r1, #1
 800293c:	5499      	strb	r1, [r3, r2]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2246      	movs	r2, #70	; 0x46
 8002942:	2101      	movs	r1, #1
 8002944:	5499      	strb	r1, [r3, r2]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2247      	movs	r2, #71	; 0x47
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	223d      	movs	r2, #61	; 0x3d
 8002952:	2101      	movs	r1, #1
 8002954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	223d      	movs	r2, #61	; 0x3d
 800297c:	5c9b      	ldrb	r3, [r3, r2]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d001      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e03c      	b.n	8002a02 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	223d      	movs	r2, #61	; 0x3d
 800298c:	2102      	movs	r1, #2
 800298e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2101      	movs	r1, #1
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_TIM_Base_Start_IT+0x9c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_TIM_Base_Start_IT+0x4e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a18      	ldr	r2, [pc, #96]	; (8002a10 <HAL_TIM_Base_Start_IT+0xa0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d004      	beq.n	80029be <HAL_TIM_Base_Start_IT+0x4e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_TIM_Base_Start_IT+0xa4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d116      	bne.n	80029ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <HAL_TIM_Base_Start_IT+0xa8>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b06      	cmp	r3, #6
 80029ce:	d016      	beq.n	80029fe <HAL_TIM_Base_Start_IT+0x8e>
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	025b      	lsls	r3, r3, #9
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d011      	beq.n	80029fe <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	e008      	b.n	80029fe <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2101      	movs	r1, #1
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e000      	b.n	8002a00 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fe:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b004      	add	sp, #16
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	40012c00 	.word	0x40012c00
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40014000 	.word	0x40014000
 8002a18:	00010007 	.word	0x00010007

08002a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d124      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d11d      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2203      	movs	r2, #3
 8002a46:	4252      	negs	r2, r2
 8002a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2203      	movs	r2, #3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 f916 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 8002a64:	e007      	b.n	8002a76 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 f909 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 f915 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2204      	movs	r2, #4
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d125      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2204      	movs	r2, #4
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d11e      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2205      	movs	r2, #5
 8002a9e:	4252      	negs	r2, r2
 8002aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	23c0      	movs	r3, #192	; 0xc0
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f000 f8e9 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 8002abe:	e007      	b.n	8002ad0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 f8dc 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f8e8 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2208      	movs	r2, #8
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d124      	bne.n	8002b2e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2208      	movs	r2, #8
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d11d      	bne.n	8002b2e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2209      	movs	r2, #9
 8002af8:	4252      	negs	r2, r2
 8002afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2204      	movs	r2, #4
 8002b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f000 f8bd 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 8002b16:	e007      	b.n	8002b28 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 f8b0 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 f8bc 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2210      	movs	r2, #16
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d125      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2210      	movs	r2, #16
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d11e      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2211      	movs	r2, #17
 8002b50:	4252      	negs	r2, r2
 8002b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2208      	movs	r2, #8
 8002b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	23c0      	movs	r3, #192	; 0xc0
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4013      	ands	r3, r2
 8002b66:	d004      	beq.n	8002b72 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 f890 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 8002b70:	e007      	b.n	8002b82 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f883 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 f88f 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10f      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d108      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	4252      	negs	r2, r2
 8002bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7fd fe69 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d10f      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b80      	cmp	r3, #128	; 0x80
 8002bd0:	d108      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2281      	movs	r2, #129	; 0x81
 8002bd8:	4252      	negs	r2, r2
 8002bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 f8ec 	bl	8002dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	401a      	ands	r2, r3
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d10e      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2280      	movs	r2, #128	; 0x80
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d107      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_TIM_IRQHandler+0x260>)
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 f8db 	bl	8002dcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2240      	movs	r2, #64	; 0x40
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d10f      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d108      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2241      	movs	r2, #65	; 0x41
 8002c38:	4252      	negs	r2, r2
 8002c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 f836 	bl	8002cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d10f      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d108      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2221      	movs	r2, #33	; 0x21
 8002c66:	4252      	negs	r2, r2
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 f89d 	bl	8002dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b002      	add	sp, #8
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	fffffeff 	.word	0xfffffeff

08002c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b002      	add	sp, #8
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a2f      	ldr	r2, [pc, #188]	; (8002d90 <TIM_Base_SetConfig+0xd0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <TIM_Base_SetConfig+0x20>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a2e      	ldr	r2, [pc, #184]	; (8002d94 <TIM_Base_SetConfig+0xd4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d108      	bne.n	8002cf2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2270      	movs	r2, #112	; 0x70
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <TIM_Base_SetConfig+0xd0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <TIM_Base_SetConfig+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a25      	ldr	r2, [pc, #148]	; (8002d94 <TIM_Base_SetConfig+0xd4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <TIM_Base_SetConfig+0x62>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a24      	ldr	r2, [pc, #144]	; (8002d98 <TIM_Base_SetConfig+0xd8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0x62>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a23      	ldr	r2, [pc, #140]	; (8002d9c <TIM_Base_SetConfig+0xdc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0x62>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <TIM_Base_SetConfig+0xe0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0x62>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a21      	ldr	r2, [pc, #132]	; (8002da4 <TIM_Base_SetConfig+0xe4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a20      	ldr	r2, [pc, #128]	; (8002da8 <TIM_Base_SetConfig+0xe8>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2280      	movs	r2, #128	; 0x80
 8002d38:	4393      	bics	r3, r2
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <TIM_Base_SetConfig+0xd0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <TIM_Base_SetConfig+0xba>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a0d      	ldr	r2, [pc, #52]	; (8002d9c <TIM_Base_SetConfig+0xdc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <TIM_Base_SetConfig+0xba>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <TIM_Base_SetConfig+0xe0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <TIM_Base_SetConfig+0xba>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <TIM_Base_SetConfig+0xe4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d103      	bne.n	8002d82 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	615a      	str	r2, [r3, #20]
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40002000 	.word	0x40002000
 8002d9c:	40014000 	.word	0x40014000
 8002da0:	40014400 	.word	0x40014400
 8002da4:	40014800 	.word	0x40014800
 8002da8:	fffffcff 	.word	0xfffffcff

08002dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b002      	add	sp, #8
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e046      	b.n	8002e7c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2288      	movs	r2, #136	; 0x88
 8002df2:	589b      	ldr	r3, [r3, r2]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d107      	bne.n	8002e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2284      	movs	r2, #132	; 0x84
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7fd fdc0 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2288      	movs	r2, #136	; 0x88
 8002e0c:	2124      	movs	r1, #36	; 0x24
 8002e0e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	438a      	bics	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 f8cc 	bl	8002fc0 <UART_SetConfig>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e024      	b.n	8002e7c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 fa63 	bl	8003308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	490d      	ldr	r1, [pc, #52]	; (8002e84 <HAL_UART_Init+0xa8>)
 8002e4e:	400a      	ands	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	212a      	movs	r1, #42	; 0x2a
 8002e5e:	438a      	bics	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f000 fafb 	bl	8003470 <UART_CheckIdleState>
 8002e7a:	0003      	movs	r3, r0
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	ffffb7ff 	.word	0xffffb7ff

08002e88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	1dbb      	adds	r3, r7, #6
 8002e96:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2288      	movs	r2, #136	; 0x88
 8002e9c:	589b      	ldr	r3, [r3, r2]
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d000      	beq.n	8002ea4 <HAL_UART_Transmit+0x1c>
 8002ea2:	e088      	b.n	8002fb6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_UART_Transmit+0x2a>
 8002eaa:	1dbb      	adds	r3, r7, #6
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e080      	b.n	8002fb8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	015b      	lsls	r3, r3, #5
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d109      	bne.n	8002ed6 <HAL_UART_Transmit+0x4e>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d001      	beq.n	8002ed6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e070      	b.n	8002fb8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2290      	movs	r2, #144	; 0x90
 8002eda:	2100      	movs	r1, #0
 8002edc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2288      	movs	r2, #136	; 0x88
 8002ee2:	2121      	movs	r1, #33	; 0x21
 8002ee4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ee6:	f7fd fea7 	bl	8000c38 <HAL_GetTick>
 8002eea:	0003      	movs	r3, r0
 8002eec:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1dba      	adds	r2, r7, #6
 8002ef2:	2154      	movs	r1, #84	; 0x54
 8002ef4:	8812      	ldrh	r2, [r2, #0]
 8002ef6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1dba      	adds	r2, r7, #6
 8002efc:	2156      	movs	r1, #86	; 0x56
 8002efe:	8812      	ldrh	r2, [r2, #0]
 8002f00:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	015b      	lsls	r3, r3, #5
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d108      	bne.n	8002f20 <HAL_UART_Transmit+0x98>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d104      	bne.n	8002f20 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	e003      	b.n	8002f28 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f28:	e02c      	b.n	8002f84 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	0013      	movs	r3, r2
 8002f34:	2200      	movs	r2, #0
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	f000 fae8 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002f3c:	1e03      	subs	r3, r0, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e039      	b.n	8002fb8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	001a      	movs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	05d2      	lsls	r2, r2, #23
 8002f56:	0dd2      	lsrs	r2, r2, #23
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e007      	b.n	8002f72 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2256      	movs	r2, #86	; 0x56
 8002f76:	5a9b      	ldrh	r3, [r3, r2]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b299      	uxth	r1, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2256      	movs	r2, #86	; 0x56
 8002f82:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2256      	movs	r2, #86	; 0x56
 8002f88:	5a9b      	ldrh	r3, [r3, r2]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1cc      	bne.n	8002f2a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	0013      	movs	r3, r2
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2140      	movs	r1, #64	; 0x40
 8002f9e:	f000 fab5 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002fa2:	1e03      	subs	r3, r0, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e006      	b.n	8002fb8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2288      	movs	r2, #136	; 0x88
 8002fae:	2120      	movs	r1, #32
 8002fb0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
  }
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b008      	add	sp, #32
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fc8:	231a      	movs	r3, #26
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4abc      	ldr	r2, [pc, #752]	; (80032e0 <UART_SetConfig+0x320>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4ab7      	ldr	r2, [pc, #732]	; (80032e4 <UART_SetConfig+0x324>)
 8003006:	4013      	ands	r3, r2
 8003008:	0019      	movs	r1, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	4313      	orrs	r3, r2
 8003024:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4aae      	ldr	r2, [pc, #696]	; (80032e8 <UART_SetConfig+0x328>)
 800302e:	4013      	ands	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	430a      	orrs	r2, r1
 800303a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	220f      	movs	r2, #15
 8003044:	4393      	bics	r3, r2
 8003046:	0019      	movs	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4aa4      	ldr	r2, [pc, #656]	; (80032ec <UART_SetConfig+0x32c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d127      	bne.n	80030ae <UART_SetConfig+0xee>
 800305e:	4ba4      	ldr	r3, [pc, #656]	; (80032f0 <UART_SetConfig+0x330>)
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	2203      	movs	r2, #3
 8003064:	4013      	ands	r3, r2
 8003066:	2b03      	cmp	r3, #3
 8003068:	d017      	beq.n	800309a <UART_SetConfig+0xda>
 800306a:	d81b      	bhi.n	80030a4 <UART_SetConfig+0xe4>
 800306c:	2b02      	cmp	r3, #2
 800306e:	d00a      	beq.n	8003086 <UART_SetConfig+0xc6>
 8003070:	d818      	bhi.n	80030a4 <UART_SetConfig+0xe4>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <UART_SetConfig+0xbc>
 8003076:	2b01      	cmp	r3, #1
 8003078:	d00a      	beq.n	8003090 <UART_SetConfig+0xd0>
 800307a:	e013      	b.n	80030a4 <UART_SetConfig+0xe4>
 800307c:	231b      	movs	r3, #27
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e058      	b.n	8003138 <UART_SetConfig+0x178>
 8003086:	231b      	movs	r3, #27
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2202      	movs	r2, #2
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e053      	b.n	8003138 <UART_SetConfig+0x178>
 8003090:	231b      	movs	r3, #27
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	2204      	movs	r2, #4
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e04e      	b.n	8003138 <UART_SetConfig+0x178>
 800309a:	231b      	movs	r3, #27
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	2208      	movs	r2, #8
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	e049      	b.n	8003138 <UART_SetConfig+0x178>
 80030a4:	231b      	movs	r3, #27
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	2210      	movs	r2, #16
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e044      	b.n	8003138 <UART_SetConfig+0x178>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a90      	ldr	r2, [pc, #576]	; (80032f4 <UART_SetConfig+0x334>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d127      	bne.n	8003108 <UART_SetConfig+0x148>
 80030b8:	4b8d      	ldr	r3, [pc, #564]	; (80032f0 <UART_SetConfig+0x330>)
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	220c      	movs	r2, #12
 80030be:	4013      	ands	r3, r2
 80030c0:	2b0c      	cmp	r3, #12
 80030c2:	d017      	beq.n	80030f4 <UART_SetConfig+0x134>
 80030c4:	d81b      	bhi.n	80030fe <UART_SetConfig+0x13e>
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d00a      	beq.n	80030e0 <UART_SetConfig+0x120>
 80030ca:	d818      	bhi.n	80030fe <UART_SetConfig+0x13e>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <UART_SetConfig+0x116>
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d00a      	beq.n	80030ea <UART_SetConfig+0x12a>
 80030d4:	e013      	b.n	80030fe <UART_SetConfig+0x13e>
 80030d6:	231b      	movs	r3, #27
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e02b      	b.n	8003138 <UART_SetConfig+0x178>
 80030e0:	231b      	movs	r3, #27
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2202      	movs	r2, #2
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e026      	b.n	8003138 <UART_SetConfig+0x178>
 80030ea:	231b      	movs	r3, #27
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	2204      	movs	r2, #4
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e021      	b.n	8003138 <UART_SetConfig+0x178>
 80030f4:	231b      	movs	r3, #27
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2208      	movs	r2, #8
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e01c      	b.n	8003138 <UART_SetConfig+0x178>
 80030fe:	231b      	movs	r3, #27
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	2210      	movs	r2, #16
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	e017      	b.n	8003138 <UART_SetConfig+0x178>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a7a      	ldr	r2, [pc, #488]	; (80032f8 <UART_SetConfig+0x338>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d104      	bne.n	800311c <UART_SetConfig+0x15c>
 8003112:	231b      	movs	r3, #27
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e00d      	b.n	8003138 <UART_SetConfig+0x178>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a76      	ldr	r2, [pc, #472]	; (80032fc <UART_SetConfig+0x33c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d104      	bne.n	8003130 <UART_SetConfig+0x170>
 8003126:	231b      	movs	r3, #27
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e003      	b.n	8003138 <UART_SetConfig+0x178>
 8003130:	231b      	movs	r3, #27
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	2210      	movs	r2, #16
 8003136:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	429a      	cmp	r2, r3
 8003142:	d000      	beq.n	8003146 <UART_SetConfig+0x186>
 8003144:	e065      	b.n	8003212 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003146:	231b      	movs	r3, #27
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d015      	beq.n	800317c <UART_SetConfig+0x1bc>
 8003150:	dc18      	bgt.n	8003184 <UART_SetConfig+0x1c4>
 8003152:	2b04      	cmp	r3, #4
 8003154:	d00d      	beq.n	8003172 <UART_SetConfig+0x1b2>
 8003156:	dc15      	bgt.n	8003184 <UART_SetConfig+0x1c4>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <UART_SetConfig+0x1a2>
 800315c:	2b02      	cmp	r3, #2
 800315e:	d005      	beq.n	800316c <UART_SetConfig+0x1ac>
 8003160:	e010      	b.n	8003184 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003162:	f7ff fa31 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8003166:	0003      	movs	r3, r0
 8003168:	617b      	str	r3, [r7, #20]
        break;
 800316a:	e012      	b.n	8003192 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800316c:	4b64      	ldr	r3, [pc, #400]	; (8003300 <UART_SetConfig+0x340>)
 800316e:	617b      	str	r3, [r7, #20]
        break;
 8003170:	e00f      	b.n	8003192 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003172:	f7ff f99d 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 8003176:	0003      	movs	r3, r0
 8003178:	617b      	str	r3, [r7, #20]
        break;
 800317a:	e00a      	b.n	8003192 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	617b      	str	r3, [r7, #20]
        break;
 8003182:	e006      	b.n	8003192 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003188:	231a      	movs	r3, #26
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
        break;
 8003190:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d100      	bne.n	800319a <UART_SetConfig+0x1da>
 8003198:	e08d      	b.n	80032b6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319e:	4b59      	ldr	r3, [pc, #356]	; (8003304 <UART_SetConfig+0x344>)
 80031a0:	0052      	lsls	r2, r2, #1
 80031a2:	5ad3      	ldrh	r3, [r2, r3]
 80031a4:	0019      	movs	r1, r3
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7fc ffc0 	bl	800012c <__udivsi3>
 80031ac:	0003      	movs	r3, r0
 80031ae:	005a      	lsls	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	18d2      	adds	r2, r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	0019      	movs	r1, r3
 80031be:	0010      	movs	r0, r2
 80031c0:	f7fc ffb4 	bl	800012c <__udivsi3>
 80031c4:	0003      	movs	r3, r0
 80031c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	d91c      	bls.n	8003208 <UART_SetConfig+0x248>
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	025b      	lsls	r3, r3, #9
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d217      	bcs.n	8003208 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	200e      	movs	r0, #14
 80031de:	183b      	adds	r3, r7, r0
 80031e0:	210f      	movs	r1, #15
 80031e2:	438a      	bics	r2, r1
 80031e4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2207      	movs	r2, #7
 80031ee:	4013      	ands	r3, r2
 80031f0:	b299      	uxth	r1, r3
 80031f2:	183b      	adds	r3, r7, r0
 80031f4:	183a      	adds	r2, r7, r0
 80031f6:	8812      	ldrh	r2, [r2, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	183a      	adds	r2, r7, r0
 8003202:	8812      	ldrh	r2, [r2, #0]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	e056      	b.n	80032b6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003208:	231a      	movs	r3, #26
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e051      	b.n	80032b6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003212:	231b      	movs	r3, #27
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d015      	beq.n	8003248 <UART_SetConfig+0x288>
 800321c:	dc18      	bgt.n	8003250 <UART_SetConfig+0x290>
 800321e:	2b04      	cmp	r3, #4
 8003220:	d00d      	beq.n	800323e <UART_SetConfig+0x27e>
 8003222:	dc15      	bgt.n	8003250 <UART_SetConfig+0x290>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <UART_SetConfig+0x26e>
 8003228:	2b02      	cmp	r3, #2
 800322a:	d005      	beq.n	8003238 <UART_SetConfig+0x278>
 800322c:	e010      	b.n	8003250 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800322e:	f7ff f9cb 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8003232:	0003      	movs	r3, r0
 8003234:	617b      	str	r3, [r7, #20]
        break;
 8003236:	e012      	b.n	800325e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <UART_SetConfig+0x340>)
 800323a:	617b      	str	r3, [r7, #20]
        break;
 800323c:	e00f      	b.n	800325e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800323e:	f7ff f937 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 8003242:	0003      	movs	r3, r0
 8003244:	617b      	str	r3, [r7, #20]
        break;
 8003246:	e00a      	b.n	800325e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	617b      	str	r3, [r7, #20]
        break;
 800324e:	e006      	b.n	800325e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003254:	231a      	movs	r3, #26
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
        break;
 800325c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d028      	beq.n	80032b6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003268:	4b26      	ldr	r3, [pc, #152]	; (8003304 <UART_SetConfig+0x344>)
 800326a:	0052      	lsls	r2, r2, #1
 800326c:	5ad3      	ldrh	r3, [r2, r3]
 800326e:	0019      	movs	r1, r3
 8003270:	6978      	ldr	r0, [r7, #20]
 8003272:	f7fc ff5b 	bl	800012c <__udivsi3>
 8003276:	0003      	movs	r3, r0
 8003278:	001a      	movs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	18d2      	adds	r2, r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0019      	movs	r1, r3
 8003288:	0010      	movs	r0, r2
 800328a:	f7fc ff4f 	bl	800012c <__udivsi3>
 800328e:	0003      	movs	r3, r0
 8003290:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d90a      	bls.n	80032ae <UART_SetConfig+0x2ee>
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	025b      	lsls	r3, r3, #9
 800329e:	429a      	cmp	r2, r3
 80032a0:	d205      	bcs.n	80032ae <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	e003      	b.n	80032b6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80032ae:	231a      	movs	r3, #26
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	226a      	movs	r2, #106	; 0x6a
 80032ba:	2101      	movs	r1, #1
 80032bc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2268      	movs	r2, #104	; 0x68
 80032c2:	2101      	movs	r1, #1
 80032c4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80032d2:	231a      	movs	r3, #26
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	781b      	ldrb	r3, [r3, #0]
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b008      	add	sp, #32
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	cfff69f3 	.word	0xcfff69f3
 80032e4:	ffffcfff 	.word	0xffffcfff
 80032e8:	11fff4ff 	.word	0x11fff4ff
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40004400 	.word	0x40004400
 80032f8:	40004800 	.word	0x40004800
 80032fc:	40004c00 	.word	0x40004c00
 8003300:	00f42400 	.word	0x00f42400
 8003304:	080065f0 	.word	0x080065f0

08003308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	2201      	movs	r2, #1
 8003316:	4013      	ands	r3, r2
 8003318:	d00b      	beq.n	8003332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a4a      	ldr	r2, [pc, #296]	; (800344c <UART_AdvFeatureConfig+0x144>)
 8003322:	4013      	ands	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	2202      	movs	r2, #2
 8003338:	4013      	ands	r3, r2
 800333a:	d00b      	beq.n	8003354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4a43      	ldr	r2, [pc, #268]	; (8003450 <UART_AdvFeatureConfig+0x148>)
 8003344:	4013      	ands	r3, r2
 8003346:	0019      	movs	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	2204      	movs	r2, #4
 800335a:	4013      	ands	r3, r2
 800335c:	d00b      	beq.n	8003376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a3b      	ldr	r2, [pc, #236]	; (8003454 <UART_AdvFeatureConfig+0x14c>)
 8003366:	4013      	ands	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	2208      	movs	r2, #8
 800337c:	4013      	ands	r3, r2
 800337e:	d00b      	beq.n	8003398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4a34      	ldr	r2, [pc, #208]	; (8003458 <UART_AdvFeatureConfig+0x150>)
 8003388:	4013      	ands	r3, r2
 800338a:	0019      	movs	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	2210      	movs	r2, #16
 800339e:	4013      	ands	r3, r2
 80033a0:	d00b      	beq.n	80033ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a2c      	ldr	r2, [pc, #176]	; (800345c <UART_AdvFeatureConfig+0x154>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	2220      	movs	r2, #32
 80033c0:	4013      	ands	r3, r2
 80033c2:	d00b      	beq.n	80033dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	4a25      	ldr	r2, [pc, #148]	; (8003460 <UART_AdvFeatureConfig+0x158>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	4013      	ands	r3, r2
 80033e4:	d01d      	beq.n	8003422 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <UART_AdvFeatureConfig+0x15c>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	035b      	lsls	r3, r3, #13
 8003406:	429a      	cmp	r2, r3
 8003408:	d10b      	bne.n	8003422 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a15      	ldr	r2, [pc, #84]	; (8003468 <UART_AdvFeatureConfig+0x160>)
 8003412:	4013      	ands	r3, r2
 8003414:	0019      	movs	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	2280      	movs	r2, #128	; 0x80
 8003428:	4013      	ands	r3, r2
 800342a:	d00b      	beq.n	8003444 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4a0e      	ldr	r2, [pc, #56]	; (800346c <UART_AdvFeatureConfig+0x164>)
 8003434:	4013      	ands	r3, r2
 8003436:	0019      	movs	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  }
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	b002      	add	sp, #8
 800344a:	bd80      	pop	{r7, pc}
 800344c:	fffdffff 	.word	0xfffdffff
 8003450:	fffeffff 	.word	0xfffeffff
 8003454:	fffbffff 	.word	0xfffbffff
 8003458:	ffff7fff 	.word	0xffff7fff
 800345c:	ffffefff 	.word	0xffffefff
 8003460:	ffffdfff 	.word	0xffffdfff
 8003464:	ffefffff 	.word	0xffefffff
 8003468:	ff9fffff 	.word	0xff9fffff
 800346c:	fff7ffff 	.word	0xfff7ffff

08003470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af02      	add	r7, sp, #8
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2290      	movs	r2, #144	; 0x90
 800347c:	2100      	movs	r1, #0
 800347e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003480:	f7fd fbda 	bl	8000c38 <HAL_GetTick>
 8003484:	0003      	movs	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2208      	movs	r2, #8
 8003490:	4013      	ands	r3, r2
 8003492:	2b08      	cmp	r3, #8
 8003494:	d10c      	bne.n	80034b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	0391      	lsls	r1, r2, #14
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4a1a      	ldr	r2, [pc, #104]	; (8003508 <UART_CheckIdleState+0x98>)
 80034a0:	9200      	str	r2, [sp, #0]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f000 f832 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d001      	beq.n	80034b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e026      	b.n	80034fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2204      	movs	r2, #4
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d10c      	bne.n	80034d8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	03d1      	lsls	r1, r2, #15
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4a10      	ldr	r2, [pc, #64]	; (8003508 <UART_CheckIdleState+0x98>)
 80034c8:	9200      	str	r2, [sp, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f000 f81e 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 80034d0:	1e03      	subs	r3, r0, #0
 80034d2:	d001      	beq.n	80034d8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e012      	b.n	80034fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2288      	movs	r2, #136	; 0x88
 80034dc:	2120      	movs	r1, #32
 80034de:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	228c      	movs	r2, #140	; 0x8c
 80034e4:	2120      	movs	r1, #32
 80034e6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2284      	movs	r2, #132	; 0x84
 80034f8:	2100      	movs	r1, #0
 80034fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	01ffffff 	.word	0x01ffffff

0800350c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b094      	sub	sp, #80	; 0x50
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	1dfb      	adds	r3, r7, #7
 800351a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351c:	e0a7      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003520:	3301      	adds	r3, #1
 8003522:	d100      	bne.n	8003526 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003524:	e0a3      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fd fb87 	bl	8000c38 <HAL_GetTick>
 800352a:	0002      	movs	r2, r0
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <UART_WaitOnFlagUntilTimeout+0x30>
 8003536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003538:	2b00      	cmp	r3, #0
 800353a:	d13f      	bne.n	80035bc <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353c:	f3ef 8310 	mrs	r3, PRIMASK
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003544:	647b      	str	r3, [r7, #68]	; 0x44
 8003546:	2301      	movs	r3, #1
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	f383 8810 	msr	PRIMASK, r3
}
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	494e      	ldr	r1, [pc, #312]	; (8003698 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800355e:	400a      	ands	r2, r1
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003564:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	f383 8810 	msr	PRIMASK, r3
}
 800356c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356e:	f3ef 8310 	mrs	r3, PRIMASK
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003576:	643b      	str	r3, [r7, #64]	; 0x40
 8003578:	2301      	movs	r3, #1
 800357a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357e:	f383 8810 	msr	PRIMASK, r3
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2101      	movs	r1, #1
 8003590:	438a      	bics	r2, r1
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359a:	f383 8810 	msr	PRIMASK, r3
}
 800359e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2288      	movs	r2, #136	; 0x88
 80035a4:	2120      	movs	r1, #32
 80035a6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	228c      	movs	r2, #140	; 0x8c
 80035ac:	2120      	movs	r1, #32
 80035ae:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2284      	movs	r2, #132	; 0x84
 80035b4:	2100      	movs	r1, #0
 80035b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e069      	b.n	8003690 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2204      	movs	r2, #4
 80035c4:	4013      	ands	r3, r2
 80035c6:	d052      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	401a      	ands	r2, r3
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	429a      	cmp	r2, r3
 80035da:	d148      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ea:	613b      	str	r3, [r7, #16]
  return(result);
 80035ec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80035ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f0:	2301      	movs	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4924      	ldr	r1, [pc, #144]	; (8003698 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003608:	400a      	ands	r2, r1
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800360e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003618:	f3ef 8310 	mrs	r3, PRIMASK
 800361c:	61fb      	str	r3, [r7, #28]
  return(result);
 800361e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003620:	64bb      	str	r3, [r7, #72]	; 0x48
 8003622:	2301      	movs	r3, #1
 8003624:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	f383 8810 	msr	PRIMASK, r3
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2101      	movs	r1, #1
 800363a:	438a      	bics	r2, r1
 800363c:	609a      	str	r2, [r3, #8]
 800363e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	f383 8810 	msr	PRIMASK, r3
}
 8003648:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2288      	movs	r2, #136	; 0x88
 800364e:	2120      	movs	r1, #32
 8003650:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	228c      	movs	r2, #140	; 0x8c
 8003656:	2120      	movs	r1, #32
 8003658:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2290      	movs	r2, #144	; 0x90
 800365e:	2120      	movs	r1, #32
 8003660:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2284      	movs	r2, #132	; 0x84
 8003666:	2100      	movs	r1, #0
 8003668:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e010      	b.n	8003690 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	425a      	negs	r2, r3
 800367e:	4153      	adcs	r3, r2
 8003680:	b2db      	uxtb	r3, r3
 8003682:	001a      	movs	r2, r3
 8003684:	1dfb      	adds	r3, r7, #7
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d100      	bne.n	800368e <UART_WaitOnFlagUntilTimeout+0x182>
 800368c:	e747      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b014      	add	sp, #80	; 0x50
 8003696:	bd80      	pop	{r7, pc}
 8003698:	fffffe5f 	.word	0xfffffe5f

0800369c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2284      	movs	r2, #132	; 0x84
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e027      	b.n	8003702 <HAL_UARTEx_DisableFifoMode+0x66>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2284      	movs	r2, #132	; 0x84
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2288      	movs	r2, #136	; 0x88
 80036be:	2124      	movs	r1, #36	; 0x24
 80036c0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	438a      	bics	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4a0b      	ldr	r2, [pc, #44]	; (800370c <HAL_UARTEx_DisableFifoMode+0x70>)
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2288      	movs	r2, #136	; 0x88
 80036f4:	2120      	movs	r1, #32
 80036f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2284      	movs	r2, #132	; 0x84
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b004      	add	sp, #16
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	dfffffff 	.word	0xdfffffff

08003710 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2284      	movs	r2, #132	; 0x84
 800371e:	5c9b      	ldrb	r3, [r3, r2]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003724:	2302      	movs	r3, #2
 8003726:	e02e      	b.n	8003786 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2284      	movs	r2, #132	; 0x84
 800372c:	2101      	movs	r1, #1
 800372e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2288      	movs	r2, #136	; 0x88
 8003734:	2124      	movs	r1, #36	; 0x24
 8003736:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2101      	movs	r1, #1
 800374c:	438a      	bics	r2, r1
 800374e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	08d9      	lsrs	r1, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	0018      	movs	r0, r3
 8003768:	f000 f854 	bl	8003814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2288      	movs	r2, #136	; 0x88
 8003778:	2120      	movs	r1, #32
 800377a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2284      	movs	r2, #132	; 0x84
 8003780:	2100      	movs	r1, #0
 8003782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b004      	add	sp, #16
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2284      	movs	r2, #132	; 0x84
 800379e:	5c9b      	ldrb	r3, [r3, r2]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e02f      	b.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2284      	movs	r2, #132	; 0x84
 80037ac:	2101      	movs	r1, #1
 80037ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2288      	movs	r2, #136	; 0x88
 80037b4:	2124      	movs	r1, #36	; 0x24
 80037b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2101      	movs	r1, #1
 80037cc:	438a      	bics	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80037d8:	4013      	ands	r3, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f813 	bl	8003814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2288      	movs	r2, #136	; 0x88
 80037fa:	2120      	movs	r1, #32
 80037fc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2284      	movs	r2, #132	; 0x84
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b004      	add	sp, #16
 800380e:	bd80      	pop	{r7, pc}
 8003810:	f1ffffff 	.word	0xf1ffffff

08003814 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003820:	2b00      	cmp	r3, #0
 8003822:	d108      	bne.n	8003836 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	226a      	movs	r2, #106	; 0x6a
 8003828:	2101      	movs	r1, #1
 800382a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2268      	movs	r2, #104	; 0x68
 8003830:	2101      	movs	r1, #1
 8003832:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003834:	e043      	b.n	80038be <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003836:	260f      	movs	r6, #15
 8003838:	19bb      	adds	r3, r7, r6
 800383a:	2208      	movs	r2, #8
 800383c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800383e:	200e      	movs	r0, #14
 8003840:	183b      	adds	r3, r7, r0
 8003842:	2208      	movs	r2, #8
 8003844:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	0e5b      	lsrs	r3, r3, #25
 800384e:	b2da      	uxtb	r2, r3
 8003850:	240d      	movs	r4, #13
 8003852:	193b      	adds	r3, r7, r4
 8003854:	2107      	movs	r1, #7
 8003856:	400a      	ands	r2, r1
 8003858:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	0f5b      	lsrs	r3, r3, #29
 8003862:	b2da      	uxtb	r2, r3
 8003864:	250c      	movs	r5, #12
 8003866:	197b      	adds	r3, r7, r5
 8003868:	2107      	movs	r1, #7
 800386a:	400a      	ands	r2, r1
 800386c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800386e:	183b      	adds	r3, r7, r0
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	197a      	adds	r2, r7, r5
 8003874:	7812      	ldrb	r2, [r2, #0]
 8003876:	4914      	ldr	r1, [pc, #80]	; (80038c8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003878:	5c8a      	ldrb	r2, [r1, r2]
 800387a:	435a      	muls	r2, r3
 800387c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800387e:	197b      	adds	r3, r7, r5
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <UARTEx_SetNbDataToProcess+0xb8>)
 8003884:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003886:	0019      	movs	r1, r3
 8003888:	f7fc fcda 	bl	8000240 <__divsi3>
 800388c:	0003      	movs	r3, r0
 800388e:	b299      	uxth	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	226a      	movs	r2, #106	; 0x6a
 8003894:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003896:	19bb      	adds	r3, r7, r6
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	193a      	adds	r2, r7, r4
 800389c:	7812      	ldrb	r2, [r2, #0]
 800389e:	490a      	ldr	r1, [pc, #40]	; (80038c8 <UARTEx_SetNbDataToProcess+0xb4>)
 80038a0:	5c8a      	ldrb	r2, [r1, r2]
 80038a2:	435a      	muls	r2, r3
 80038a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80038a6:	193b      	adds	r3, r7, r4
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	4a08      	ldr	r2, [pc, #32]	; (80038cc <UARTEx_SetNbDataToProcess+0xb8>)
 80038ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038ae:	0019      	movs	r1, r3
 80038b0:	f7fc fcc6 	bl	8000240 <__divsi3>
 80038b4:	0003      	movs	r3, r0
 80038b6:	b299      	uxth	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2268      	movs	r2, #104	; 0x68
 80038bc:	5299      	strh	r1, [r3, r2]
}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b005      	add	sp, #20
 80038c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	08006608 	.word	0x08006608
 80038cc:	08006610 	.word	0x08006610

080038d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3308      	adds	r3, #8
 80038dc:	001a      	movs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	4252      	negs	r2, r2
 80038e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3308      	adds	r3, #8
 80038ee:	001a      	movs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3308      	adds	r3, #8
 80038f8:	001a      	movs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}

0800390c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b002      	add	sp, #8
 8003920:	bd80      	pop	{r7, pc}

08003922 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	3301      	adds	r3, #1
 8003936:	d103      	bne.n	8003940 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	e00c      	b.n	800395a <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3308      	adds	r3, #8
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e002      	b.n	800394e <vListInsert+0x2c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	429a      	cmp	r2, r3
 8003958:	d2f6      	bcs.n	8003948 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b004      	add	sp, #16
 800398c:	bd80      	pop	{r7, pc}

0800398e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6892      	ldr	r2, [r2, #8]
 80039a4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6852      	ldr	r2, [r2, #4]
 80039ae:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d103      	bne.n	80039c2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b004      	add	sp, #16
 80039dc:	bd80      	pop	{r7, pc}

080039de <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80039de:	b5b0      	push	{r4, r5, r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80039e8:	2301      	movs	r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <xQueueGenericReset+0x1c>
 80039f6:	b672      	cpsid	i
 80039f8:	e7fe      	b.n	80039f8 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d100      	bne.n	8003a02 <xQueueGenericReset+0x24>
 8003a00:	e06a      	b.n	8003ad8 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d066      	beq.n	8003ad8 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	2400      	movs	r4, #0
 8003a14:	0c15      	lsrs	r5, r2, #16
 8003a16:	0c19      	lsrs	r1, r3, #16
 8003a18:	b2a8      	uxth	r0, r5
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d104      	bne.n	8003a28 <xQueueGenericReset+0x4a>
 8003a1e:	b288      	uxth	r0, r1
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d013      	beq.n	8003a4c <xQueueGenericReset+0x6e>
 8003a24:	1c10      	adds	r0, r2, #0
 8003a26:	e004      	b.n	8003a32 <xQueueGenericReset+0x54>
 8003a28:	b289      	uxth	r1, r1
 8003a2a:	2900      	cmp	r1, #0
 8003a2c:	d10d      	bne.n	8003a4a <xQueueGenericReset+0x6c>
 8003a2e:	1c29      	adds	r1, r5, #0
 8003a30:	1c18      	adds	r0, r3, #0
 8003a32:	b292      	uxth	r2, r2
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	435a      	muls	r2, r3
 8003a38:	b283      	uxth	r3, r0
 8003a3a:	b289      	uxth	r1, r1
 8003a3c:	434b      	muls	r3, r1
 8003a3e:	0c12      	lsrs	r2, r2, #16
 8003a40:	189b      	adds	r3, r3, r2
 8003a42:	141b      	asrs	r3, r3, #16
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d000      	beq.n	8003a4c <xQueueGenericReset+0x6e>
 8003a4a:	2401      	movs	r4, #1
 8003a4c:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8003a4e:	d143      	bne.n	8003ad8 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8003a50:	f001 fe5e 	bl	8005710 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	434b      	muls	r3, r1
 8003a62:	18d2      	adds	r2, r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7e:	1e59      	subs	r1, r3, #1
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	434b      	muls	r3, r1
 8003a86:	18d2      	adds	r2, r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2244      	movs	r2, #68	; 0x44
 8003a90:	21ff      	movs	r1, #255	; 0xff
 8003a92:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2245      	movs	r2, #69	; 0x45
 8003a98:	21ff      	movs	r1, #255	; 0xff
 8003a9a:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10d      	bne.n	8003abe <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d013      	beq.n	8003ad2 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	3310      	adds	r3, #16
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f001 f830 	bl	8004b14 <xTaskRemoveFromEventList>
 8003ab4:	1e03      	subs	r3, r0, #0
 8003ab6:	d00c      	beq.n	8003ad2 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003ab8:	f001 fe1a 	bl	80056f0 <vPortYield>
 8003abc:	e009      	b.n	8003ad2 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	3310      	adds	r3, #16
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f7ff ff04 	bl	80038d0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3324      	adds	r3, #36	; 0x24
 8003acc:	0018      	movs	r0, r3
 8003ace:	f7ff feff 	bl	80038d0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003ad2:	f001 fe2f 	bl	8005734 <vPortExitCritical>
 8003ad6:	e001      	b.n	8003adc <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <xQueueGenericReset+0x108>
 8003ae2:	b672      	cpsid	i
 8003ae4:	e7fe      	b.n	8003ae4 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b004      	add	sp, #16
 8003aee:	bdb0      	pop	{r4, r5, r7, pc}

08003af0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af2:	b08b      	sub	sp, #44	; 0x2c
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	1dfb      	adds	r3, r7, #7
 8003afc:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d047      	beq.n	8003b98 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003b08:	2000      	movs	r0, #0
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	0c19      	lsrs	r1, r3, #16
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	1c1e      	adds	r6, r3, #0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	1c15      	adds	r5, r2, #0
 8003b1a:	b28a      	uxth	r2, r1
 8003b1c:	2a00      	cmp	r2, #0
 8003b1e:	d105      	bne.n	8003b2c <xQueueGenericCreate+0x3c>
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	2a00      	cmp	r2, #0
 8003b24:	d013      	beq.n	8003b4e <xQueueGenericCreate+0x5e>
 8003b26:	1c19      	adds	r1, r3, #0
 8003b28:	1c34      	adds	r4, r6, #0
 8003b2a:	e003      	b.n	8003b34 <xQueueGenericCreate+0x44>
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10c      	bne.n	8003b4c <xQueueGenericCreate+0x5c>
 8003b32:	1c2c      	adds	r4, r5, #0
 8003b34:	b2b3      	uxth	r3, r6
 8003b36:	b2aa      	uxth	r2, r5
 8003b38:	435a      	muls	r2, r3
 8003b3a:	b2a3      	uxth	r3, r4
 8003b3c:	b289      	uxth	r1, r1
 8003b3e:	434b      	muls	r3, r1
 8003b40:	0c12      	lsrs	r2, r2, #16
 8003b42:	189b      	adds	r3, r3, r2
 8003b44:	141b      	asrs	r3, r3, #16
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d000      	beq.n	8003b4e <xQueueGenericCreate+0x5e>
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003b50:	d122      	bne.n	8003b98 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003b58:	3351      	adds	r3, #81	; 0x51
 8003b5a:	d81d      	bhi.n	8003b98 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	4353      	muls	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	3350      	adds	r3, #80	; 0x50
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f001 fe69 	bl	8005840 <pvPortMalloc>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d014      	beq.n	8003ba2 <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3350      	adds	r3, #80	; 0x50
 8003b80:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b82:	1dfb      	adds	r3, r7, #7
 8003b84:	781c      	ldrb	r4, [r3, #0]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	0023      	movs	r3, r4
 8003b92:	f000 f80b 	bl	8003bac <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003b96:	e004      	b.n	8003ba2 <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <xQueueGenericCreate+0xb2>
 8003b9e:	b672      	cpsid	i
 8003ba0:	e7fe      	b.n	8003ba0 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
    }
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b009      	add	sp, #36	; 0x24
 8003baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bac <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	001a      	movs	r2, r3
 8003bba:	1cfb      	adds	r3, r7, #3
 8003bbc:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e002      	b.n	8003bd2 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2101      	movs	r1, #1
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7ff fefb 	bl	80039de <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	1cfa      	adds	r2, r7, #3
 8003bec:	214c      	movs	r1, #76	; 0x4c
 8003bee:	7812      	ldrb	r2, [r2, #0]
 8003bf0:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b004      	add	sp, #16
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b08a      	sub	sp, #40	; 0x28
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <xQueueGenericSend+0x20>
 8003c16:	b672      	cpsid	i
 8003c18:	e7fe      	b.n	8003c18 <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d103      	bne.n	8003c28 <xQueueGenericSend+0x2e>
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <xQueueGenericSend+0x32>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <xQueueGenericSend+0x34>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <xQueueGenericSend+0x3c>
 8003c32:	b672      	cpsid	i
 8003c34:	e7fe      	b.n	8003c34 <xQueueGenericSend+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d103      	bne.n	8003c44 <xQueueGenericSend+0x4a>
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <xQueueGenericSend+0x4e>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <xQueueGenericSend+0x50>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <xQueueGenericSend+0x58>
 8003c4e:	b672      	cpsid	i
 8003c50:	e7fe      	b.n	8003c50 <xQueueGenericSend+0x56>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c52:	f001 f949 	bl	8004ee8 <xTaskGetSchedulerState>
 8003c56:	1e03      	subs	r3, r0, #0
 8003c58:	d102      	bne.n	8003c60 <xQueueGenericSend+0x66>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <xQueueGenericSend+0x6a>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <xQueueGenericSend+0x6c>
 8003c64:	2300      	movs	r3, #0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <xQueueGenericSend+0x74>
 8003c6a:	b672      	cpsid	i
 8003c6c:	e7fe      	b.n	8003c6c <xQueueGenericSend+0x72>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c6e:	f001 fd4f 	bl	8005710 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <xQueueGenericSend+0x8a>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d11e      	bne.n	8003cc2 <xQueueGenericSend+0xc8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f000 f92e 	bl	8003eec <prvCopyDataToQueue>
 8003c90:	0003      	movs	r3, r0
 8003c92:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d009      	beq.n	8003cb0 <xQueueGenericSend+0xb6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	3324      	adds	r3, #36	; 0x24
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 ff37 	bl	8004b14 <xTaskRemoveFromEventList>
 8003ca6:	1e03      	subs	r3, r0, #0
 8003ca8:	d007      	beq.n	8003cba <xQueueGenericSend+0xc0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003caa:	f001 fd21 	bl	80056f0 <vPortYield>
 8003cae:	e004      	b.n	8003cba <xQueueGenericSend+0xc0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <xQueueGenericSend+0xc0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003cb6:	f001 fd1b 	bl	80056f0 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003cba:	f001 fd3b 	bl	8005734 <vPortExitCritical>
                return pdPASS;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e05b      	b.n	8003d7a <xQueueGenericSend+0x180>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d103      	bne.n	8003cd0 <xQueueGenericSend+0xd6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003cc8:	f001 fd34 	bl	8005734 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e054      	b.n	8003d7a <xQueueGenericSend+0x180>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <xQueueGenericSend+0xea>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003cd6:	2314      	movs	r3, #20
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 ffe4 	bl	8004ca8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003ce4:	f001 fd26 	bl	8005734 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003ce8:	f000 fc58 	bl	800459c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003cec:	f001 fd10 	bl	8005710 <vPortEnterCritical>
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	2244      	movs	r2, #68	; 0x44
 8003cf4:	5c9b      	ldrb	r3, [r3, r2]
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	d103      	bne.n	8003d04 <xQueueGenericSend+0x10a>
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	2244      	movs	r2, #68	; 0x44
 8003d00:	2100      	movs	r1, #0
 8003d02:	5499      	strb	r1, [r3, r2]
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2245      	movs	r2, #69	; 0x45
 8003d08:	5c9b      	ldrb	r3, [r3, r2]
 8003d0a:	b25b      	sxtb	r3, r3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	d103      	bne.n	8003d18 <xQueueGenericSend+0x11e>
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	2245      	movs	r2, #69	; 0x45
 8003d14:	2100      	movs	r1, #0
 8003d16:	5499      	strb	r1, [r3, r2]
 8003d18:	f001 fd0c 	bl	8005734 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d1c:	1d3a      	adds	r2, r7, #4
 8003d1e:	2314      	movs	r3, #20
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	0011      	movs	r1, r2
 8003d24:	0018      	movs	r0, r3
 8003d26:	f000 ffd3 	bl	8004cd0 <xTaskCheckForTimeOut>
 8003d2a:	1e03      	subs	r3, r0, #0
 8003d2c:	d11e      	bne.n	8003d6c <xQueueGenericSend+0x172>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 f9e0 	bl	80040f6 <prvIsQueueFull>
 8003d36:	1e03      	subs	r3, r0, #0
 8003d38:	d011      	beq.n	8003d5e <xQueueGenericSend+0x164>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	0011      	movs	r1, r2
 8003d42:	0018      	movs	r0, r3
 8003d44:	f000 fe8a 	bl	8004a5c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 f95f 	bl	800400e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003d50:	f000 fc30 	bl	80045b4 <xTaskResumeAll>
 8003d54:	1e03      	subs	r3, r0, #0
 8003d56:	d18a      	bne.n	8003c6e <xQueueGenericSend+0x74>
                {
                    portYIELD_WITHIN_API();
 8003d58:	f001 fcca 	bl	80056f0 <vPortYield>
 8003d5c:	e787      	b.n	8003c6e <xQueueGenericSend+0x74>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 f954 	bl	800400e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d66:	f000 fc25 	bl	80045b4 <xTaskResumeAll>
 8003d6a:	e780      	b.n	8003c6e <xQueueGenericSend+0x74>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f000 f94d 	bl	800400e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d74:	f000 fc1e 	bl	80045b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003d78:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b00a      	add	sp, #40	; 0x28
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b08a      	sub	sp, #40	; 0x28
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <xQueueReceive+0x1e>
 8003d9c:	b672      	cpsid	i
 8003d9e:	e7fe      	b.n	8003d9e <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <xQueueReceive+0x2c>
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <xQueueReceive+0x30>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <xQueueReceive+0x32>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <xQueueReceive+0x3a>
 8003db8:	b672      	cpsid	i
 8003dba:	e7fe      	b.n	8003dba <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dbc:	f001 f894 	bl	8004ee8 <xTaskGetSchedulerState>
 8003dc0:	1e03      	subs	r3, r0, #0
 8003dc2:	d102      	bne.n	8003dca <xQueueReceive+0x48>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <xQueueReceive+0x4c>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <xQueueReceive+0x4e>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <xQueueReceive+0x56>
 8003dd4:	b672      	cpsid	i
 8003dd6:	e7fe      	b.n	8003dd6 <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003dd8:	f001 fc9a 	bl	8005710 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01a      	beq.n	8003e1e <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	0011      	movs	r1, r2
 8003dee:	0018      	movs	r0, r3
 8003df0:	f000 f8e7 	bl	8003fc2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	1e5a      	subs	r2, r3, #1
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	3310      	adds	r3, #16
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f000 fe83 	bl	8004b14 <xTaskRemoveFromEventList>
 8003e0e:	1e03      	subs	r3, r0, #0
 8003e10:	d001      	beq.n	8003e16 <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e12:	f001 fc6d 	bl	80056f0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003e16:	f001 fc8d 	bl	8005734 <vPortExitCritical>
                return pdPASS;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e062      	b.n	8003ee4 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003e24:	f001 fc86 	bl	8005734 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e05b      	b.n	8003ee4 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e32:	2314      	movs	r3, #20
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	0018      	movs	r0, r3
 8003e38:	f000 ff36 	bl	8004ca8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003e40:	f001 fc78 	bl	8005734 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e44:	f000 fbaa 	bl	800459c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e48:	f001 fc62 	bl	8005710 <vPortEnterCritical>
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	2244      	movs	r2, #68	; 0x44
 8003e50:	5c9b      	ldrb	r3, [r3, r2]
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	3301      	adds	r3, #1
 8003e56:	d103      	bne.n	8003e60 <xQueueReceive+0xde>
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	2244      	movs	r2, #68	; 0x44
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5499      	strb	r1, [r3, r2]
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	2245      	movs	r2, #69	; 0x45
 8003e64:	5c9b      	ldrb	r3, [r3, r2]
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	3301      	adds	r3, #1
 8003e6a:	d103      	bne.n	8003e74 <xQueueReceive+0xf2>
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	2245      	movs	r2, #69	; 0x45
 8003e70:	2100      	movs	r1, #0
 8003e72:	5499      	strb	r1, [r3, r2]
 8003e74:	f001 fc5e 	bl	8005734 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e78:	1d3a      	adds	r2, r7, #4
 8003e7a:	2314      	movs	r3, #20
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	0011      	movs	r1, r2
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 ff25 	bl	8004cd0 <xTaskCheckForTimeOut>
 8003e86:	1e03      	subs	r3, r0, #0
 8003e88:	d11e      	bne.n	8003ec8 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f000 f91c 	bl	80040ca <prvIsQueueEmpty>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d011      	beq.n	8003eba <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	3324      	adds	r3, #36	; 0x24
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	0011      	movs	r1, r2
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f000 fddc 	bl	8004a5c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 f8b1 	bl	800400e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003eac:	f000 fb82 	bl	80045b4 <xTaskResumeAll>
 8003eb0:	1e03      	subs	r3, r0, #0
 8003eb2:	d191      	bne.n	8003dd8 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 8003eb4:	f001 fc1c 	bl	80056f0 <vPortYield>
 8003eb8:	e78e      	b.n	8003dd8 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 f8a6 	bl	800400e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003ec2:	f000 fb77 	bl	80045b4 <xTaskResumeAll>
 8003ec6:	e787      	b.n	8003dd8 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f000 f89f 	bl	800400e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003ed0:	f000 fb70 	bl	80045b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 f8f7 	bl	80040ca <prvIsQueueEmpty>
 8003edc:	1e03      	subs	r3, r0, #0
 8003ede:	d100      	bne.n	8003ee2 <xQueueReceive+0x160>
 8003ee0:	e77a      	b.n	8003dd8 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003ee2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b00a      	add	sp, #40	; 0x28
 8003eea:	bd80      	pop	{r7, pc}

08003eec <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10e      	bne.n	8003f28 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d14e      	bne.n	8003fb0 <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	0018      	movs	r0, r3
 8003f18:	f001 f802 	bl	8004f20 <xTaskPriorityDisinherit>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
 8003f26:	e043      	b.n	8003fb0 <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d119      	bne.n	8003f62 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6858      	ldr	r0, [r3, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	0019      	movs	r1, r3
 8003f3a:	f001 fe4b 	bl	8005bd4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	18d2      	adds	r2, r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d32b      	bcc.n	8003fb0 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	e026      	b.n	8003fb0 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	68d8      	ldr	r0, [r3, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	f001 fe31 	bl	8005bd4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	425b      	negs	r3, r3
 8003f7c:	18d2      	adds	r2, r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d207      	bcs.n	8003f9e <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	425b      	negs	r3, r3
 8003f98:	18d2      	adds	r2, r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d105      	bne.n	8003fb0 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003fb8:	697b      	ldr	r3, [r7, #20]
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b006      	add	sp, #24
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d018      	beq.n	8004006 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	18d2      	adds	r2, r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d303      	bcc.n	8003ff6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68d9      	ldr	r1, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	0018      	movs	r0, r3
 8004002:	f001 fde7 	bl	8005bd4 <memcpy>
    }
}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b002      	add	sp, #8
 800400c:	bd80      	pop	{r7, pc}

0800400e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004016:	f001 fb7b 	bl	8005710 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800401a:	230f      	movs	r3, #15
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	2145      	movs	r1, #69	; 0x45
 8004022:	5c52      	ldrb	r2, [r2, r1]
 8004024:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004026:	e013      	b.n	8004050 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	d016      	beq.n	800405e <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3324      	adds	r3, #36	; 0x24
 8004034:	0018      	movs	r0, r3
 8004036:	f000 fd6d 	bl	8004b14 <xTaskRemoveFromEventList>
 800403a:	1e03      	subs	r3, r0, #0
 800403c:	d001      	beq.n	8004042 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800403e:	f000 fe9b 	bl	8004d78 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004042:	210f      	movs	r1, #15
 8004044:	187b      	adds	r3, r7, r1
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	3b01      	subs	r3, #1
 800404a:	b2da      	uxtb	r2, r3
 800404c:	187b      	adds	r3, r7, r1
 800404e:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004050:	230f      	movs	r3, #15
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	b25b      	sxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	dce5      	bgt.n	8004028 <prvUnlockQueue+0x1a>
 800405c:	e000      	b.n	8004060 <prvUnlockQueue+0x52>
                    break;
 800405e:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2245      	movs	r2, #69	; 0x45
 8004064:	21ff      	movs	r1, #255	; 0xff
 8004066:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8004068:	f001 fb64 	bl	8005734 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800406c:	f001 fb50 	bl	8005710 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004070:	230e      	movs	r3, #14
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	2144      	movs	r1, #68	; 0x44
 8004078:	5c52      	ldrb	r2, [r2, r1]
 800407a:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800407c:	e013      	b.n	80040a6 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3310      	adds	r3, #16
 800408a:	0018      	movs	r0, r3
 800408c:	f000 fd42 	bl	8004b14 <xTaskRemoveFromEventList>
 8004090:	1e03      	subs	r3, r0, #0
 8004092:	d001      	beq.n	8004098 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8004094:	f000 fe70 	bl	8004d78 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004098:	210e      	movs	r1, #14
 800409a:	187b      	adds	r3, r7, r1
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	3b01      	subs	r3, #1
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	187b      	adds	r3, r7, r1
 80040a4:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80040a6:	230e      	movs	r3, #14
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b25b      	sxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	dce5      	bgt.n	800407e <prvUnlockQueue+0x70>
 80040b2:	e000      	b.n	80040b6 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 80040b4:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2244      	movs	r2, #68	; 0x44
 80040ba:	21ff      	movs	r1, #255	; 0xff
 80040bc:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80040be:	f001 fb39 	bl	8005734 <vPortExitCritical>
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b004      	add	sp, #16
 80040c8:	bd80      	pop	{r7, pc}

080040ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80040d2:	f001 fb1d 	bl	8005710 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d102      	bne.n	80040e4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80040de:	2301      	movs	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	e001      	b.n	80040e8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80040e8:	f001 fb24 	bl	8005734 <vPortExitCritical>

    return xReturn;
 80040ec:	68fb      	ldr	r3, [r7, #12]
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b004      	add	sp, #16
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80040fe:	f001 fb07 	bl	8005710 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	429a      	cmp	r2, r3
 800410c:	d102      	bne.n	8004114 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800410e:	2301      	movs	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	e001      	b.n	8004118 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004118:	f001 fb0c 	bl	8005734 <vPortExitCritical>

    return xReturn;
 800411c:	68fb      	ldr	r3, [r7, #12]
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b004      	add	sp, #16
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <vQueueAddToRegistry+0x18>
 800413c:	b672      	cpsid	i
 800413e:	e7fe      	b.n	800413e <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d025      	beq.n	8004192 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e01f      	b.n	800418c <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800414c:	4a17      	ldr	r2, [pc, #92]	; (80041ac <vQueueAddToRegistry+0x84>)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	18d3      	adds	r3, r2, r3
 8004154:	3304      	adds	r3, #4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d105      	bne.n	800416a <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	00da      	lsls	r2, r3, #3
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <vQueueAddToRegistry+0x84>)
 8004164:	18d3      	adds	r3, r2, r3
 8004166:	60bb      	str	r3, [r7, #8]
                    break;
 8004168:	e013      	b.n	8004192 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <vQueueAddToRegistry+0x5e>
 8004170:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <vQueueAddToRegistry+0x84>)
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	00d2      	lsls	r2, r2, #3
 8004176:	58d3      	ldr	r3, [r2, r3]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	00da      	lsls	r2, r3, #3
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <vQueueAddToRegistry+0x84>)
 8004182:	18d3      	adds	r3, r2, r3
 8004184:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3301      	adds	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b07      	cmp	r3, #7
 8004190:	d9dc      	bls.n	800414c <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b004      	add	sp, #16
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	200001ec 	.word	0x200001ec

080041b0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80041c0:	f001 faa6 	bl	8005710 <vPortEnterCritical>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2244      	movs	r2, #68	; 0x44
 80041c8:	5c9b      	ldrb	r3, [r3, r2]
 80041ca:	b25b      	sxtb	r3, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	d103      	bne.n	80041d8 <vQueueWaitForMessageRestricted+0x28>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2244      	movs	r2, #68	; 0x44
 80041d4:	2100      	movs	r1, #0
 80041d6:	5499      	strb	r1, [r3, r2]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2245      	movs	r2, #69	; 0x45
 80041dc:	5c9b      	ldrb	r3, [r3, r2]
 80041de:	b25b      	sxtb	r3, r3
 80041e0:	3301      	adds	r3, #1
 80041e2:	d103      	bne.n	80041ec <vQueueWaitForMessageRestricted+0x3c>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2245      	movs	r2, #69	; 0x45
 80041e8:	2100      	movs	r1, #0
 80041ea:	5499      	strb	r1, [r3, r2]
 80041ec:	f001 faa2 	bl	8005734 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	3324      	adds	r3, #36	; 0x24
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	0018      	movs	r0, r3
 8004202:	f000 fc49 	bl	8004a98 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	0018      	movs	r0, r3
 800420a:	f7ff ff00 	bl	800400e <prvUnlockQueue>
    }
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b006      	add	sp, #24
 8004214:	bd80      	pop	{r7, pc}

08004216 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004216:	b590      	push	{r4, r7, lr}
 8004218:	b08d      	sub	sp, #52	; 0x34
 800421a:	af04      	add	r7, sp, #16
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	1dbb      	adds	r3, r7, #6
 8004224:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004226:	1dbb      	adds	r3, r7, #6
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	0018      	movs	r0, r3
 800422e:	f001 fb07 	bl	8005840 <pvPortMalloc>
 8004232:	0003      	movs	r3, r0
 8004234:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d016      	beq.n	800426a <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800423c:	2054      	movs	r0, #84	; 0x54
 800423e:	f001 faff 	bl	8005840 <pvPortMalloc>
 8004242:	0003      	movs	r3, r0
 8004244:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2254      	movs	r2, #84	; 0x54
 8004250:	2100      	movs	r1, #0
 8004252:	0018      	movs	r0, r3
 8004254:	f001 fcc7 	bl	8005be6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
 800425e:	e006      	b.n	800426e <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	0018      	movs	r0, r3
 8004264:	f001 fb94 	bl	8005990 <vPortFree>
 8004268:	e001      	b.n	800426e <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d016      	beq.n	80042a2 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004274:	1dbb      	adds	r3, r7, #6
 8004276:	881a      	ldrh	r2, [r3, #0]
 8004278:	683c      	ldr	r4, [r7, #0]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	2300      	movs	r3, #0
 8004280:	9303      	str	r3, [sp, #12]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	9302      	str	r3, [sp, #8]
 8004286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	0023      	movs	r3, r4
 8004290:	f000 f810 	bl	80042b4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	0018      	movs	r0, r3
 8004298:	f000 f88c 	bl	80043b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800429c:	2301      	movs	r3, #1
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	e002      	b.n	80042a8 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042a2:	2301      	movs	r3, #1
 80042a4:	425b      	negs	r3, r3
 80042a6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80042a8:	69bb      	ldr	r3, [r7, #24]
    }
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b009      	add	sp, #36	; 0x24
 80042b0:	bd90      	pop	{r4, r7, pc}
	...

080042b4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	001a      	movs	r2, r3
 80042cc:	21a5      	movs	r1, #165	; 0xa5
 80042ce:	f001 fc8a 	bl	8005be6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4935      	ldr	r1, [pc, #212]	; (80043b0 <prvInitialiseNewTask+0xfc>)
 80042da:	468c      	mov	ip, r1
 80042dc:	4463      	add	r3, ip
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	18d3      	adds	r3, r2, r3
 80042e2:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2207      	movs	r2, #7
 80042e8:	4393      	bics	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2207      	movs	r2, #7
 80042f0:	4013      	ands	r3, r2
 80042f2:	d001      	beq.n	80042f8 <prvInitialiseNewTask+0x44>
 80042f4:	b672      	cpsid	i
 80042f6:	e7fe      	b.n	80042f6 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01f      	beq.n	800433e <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e013      	b.n	800432c <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	18d3      	adds	r3, r2, r3
 800430a:	7818      	ldrb	r0, [r3, #0]
 800430c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430e:	2134      	movs	r1, #52	; 0x34
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	18d3      	adds	r3, r2, r3
 8004314:	185b      	adds	r3, r3, r1
 8004316:	1c02      	adds	r2, r0, #0
 8004318:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	18d3      	adds	r3, r2, r3
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	3301      	adds	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b04      	cmp	r3, #4
 8004330:	d9e8      	bls.n	8004304 <prvInitialiseNewTask+0x50>
 8004332:	e000      	b.n	8004336 <prvInitialiseNewTask+0x82>
            {
                break;
 8004334:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	2238      	movs	r2, #56	; 0x38
 800433a:	2100      	movs	r1, #0
 800433c:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	2b04      	cmp	r3, #4
 8004342:	d901      	bls.n	8004348 <prvInitialiseNewTask+0x94>
 8004344:	b672      	cpsid	i
 8004346:	e7fe      	b.n	8004346 <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d901      	bls.n	8004352 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800434e:	2304      	movs	r3, #4
 8004350:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	6a3a      	ldr	r2, [r7, #32]
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	3304      	adds	r3, #4
 8004362:	0018      	movs	r0, r3
 8004364:	f7ff fad2 	bl	800390c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	3318      	adds	r3, #24
 800436c:	0018      	movs	r0, r3
 800436e:	f7ff facd 	bl	800390c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004376:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	2205      	movs	r2, #5
 800437c:	1ad2      	subs	r2, r2, r3
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004386:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	68f9      	ldr	r1, [r7, #12]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	0018      	movs	r0, r3
 8004390:	f001 f924 	bl	80055dc <pxPortInitialiseStack>
 8004394:	0002      	movs	r2, r0
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b006      	add	sp, #24
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	3fffffff 	.word	0x3fffffff

080043b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80043bc:	f001 f9a8 	bl	8005710 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80043c0:	4b3d      	ldr	r3, [pc, #244]	; (80044b8 <prvAddNewTaskToReadyList+0x104>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	4b3c      	ldr	r3, [pc, #240]	; (80044b8 <prvAddNewTaskToReadyList+0x104>)
 80043c8:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 80043ca:	4b3c      	ldr	r3, [pc, #240]	; (80044bc <prvAddNewTaskToReadyList+0x108>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80043d2:	4b3a      	ldr	r3, [pc, #232]	; (80044bc <prvAddNewTaskToReadyList+0x108>)
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043d8:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <prvAddNewTaskToReadyList+0x104>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d110      	bne.n	8004402 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80043e0:	f000 fce4 	bl	8004dac <prvInitialiseTaskLists>
 80043e4:	e00d      	b.n	8004402 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80043e6:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <prvAddNewTaskToReadyList+0x10c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043ee:	4b33      	ldr	r3, [pc, #204]	; (80044bc <prvAddNewTaskToReadyList+0x108>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d802      	bhi.n	8004402 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80043fc:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <prvAddNewTaskToReadyList+0x108>)
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004402:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <prvAddNewTaskToReadyList+0x110>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	4b2e      	ldr	r3, [pc, #184]	; (80044c4 <prvAddNewTaskToReadyList+0x110>)
 800440a:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800440c:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <prvAddNewTaskToReadyList+0x110>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	4b2b      	ldr	r3, [pc, #172]	; (80044c8 <prvAddNewTaskToReadyList+0x114>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d903      	bls.n	8004428 <prvAddNewTaskToReadyList+0x74>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <prvAddNewTaskToReadyList+0x114>)
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	4927      	ldr	r1, [pc, #156]	; (80044cc <prvAddNewTaskToReadyList+0x118>)
 800442e:	0013      	movs	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	189b      	adds	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	18cb      	adds	r3, r1, r3
 8004438:	3304      	adds	r3, #4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	3204      	adds	r2, #4
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	1d1a      	adds	r2, r3, #4
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	0013      	movs	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	189b      	adds	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4a18      	ldr	r2, [pc, #96]	; (80044cc <prvAddNewTaskToReadyList+0x118>)
 800446c:	189a      	adds	r2, r3, r2
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	615a      	str	r2, [r3, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004476:	4915      	ldr	r1, [pc, #84]	; (80044cc <prvAddNewTaskToReadyList+0x118>)
 8004478:	0013      	movs	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	189b      	adds	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	585b      	ldr	r3, [r3, r1]
 8004482:	1c58      	adds	r0, r3, #1
 8004484:	4911      	ldr	r1, [pc, #68]	; (80044cc <prvAddNewTaskToReadyList+0x118>)
 8004486:	0013      	movs	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	189b      	adds	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004490:	f001 f950 	bl	8005734 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004494:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <prvAddNewTaskToReadyList+0x10c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800449c:	4b07      	ldr	r3, [pc, #28]	; (80044bc <prvAddNewTaskToReadyList+0x108>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d201      	bcs.n	80044ae <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80044aa:	f001 f921 	bl	80056f0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b004      	add	sp, #16
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	20000304 	.word	0x20000304
 80044bc:	2000022c 	.word	0x2000022c
 80044c0:	20000310 	.word	0x20000310
 80044c4:	20000320 	.word	0x20000320
 80044c8:	2000030c 	.word	0x2000030c
 80044cc:	20000230 	.word	0x20000230

080044d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d010      	beq.n	8004504 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80044e2:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <vTaskDelay+0x48>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <vTaskDelay+0x1e>
 80044ea:	b672      	cpsid	i
 80044ec:	e7fe      	b.n	80044ec <vTaskDelay+0x1c>
            vTaskSuspendAll();
 80044ee:	f000 f855 	bl	800459c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2100      	movs	r1, #0
 80044f6:	0018      	movs	r0, r3
 80044f8:	f000 fd94 	bl	8005024 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80044fc:	f000 f85a 	bl	80045b4 <xTaskResumeAll>
 8004500:	0003      	movs	r3, r0
 8004502:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800450a:	f001 f8f1 	bl	80056f0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bd80      	pop	{r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	2000032c 	.word	0x2000032c

0800451c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004522:	4917      	ldr	r1, [pc, #92]	; (8004580 <vTaskStartScheduler+0x64>)
 8004524:	4817      	ldr	r0, [pc, #92]	; (8004584 <vTaskStartScheduler+0x68>)
 8004526:	4b18      	ldr	r3, [pc, #96]	; (8004588 <vTaskStartScheduler+0x6c>)
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	2300      	movs	r3, #0
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	2300      	movs	r3, #0
 8004530:	223c      	movs	r2, #60	; 0x3c
 8004532:	f7ff fe70 	bl	8004216 <xTaskCreate>
 8004536:	0003      	movs	r3, r0
 8004538:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d103      	bne.n	8004548 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8004540:	f000 fdde 	bl	8005100 <xTimerCreateTimerTask>
 8004544:	0003      	movs	r3, r0
 8004546:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d10d      	bne.n	800456a <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800454e:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004550:	4b0e      	ldr	r3, [pc, #56]	; (800458c <vTaskStartScheduler+0x70>)
 8004552:	2201      	movs	r2, #1
 8004554:	4252      	negs	r2, r2
 8004556:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004558:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <vTaskStartScheduler+0x74>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800455e:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <vTaskStartScheduler+0x78>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004564:	f001 f8a0 	bl	80056a8 <xPortStartScheduler>
 8004568:	e004      	b.n	8004574 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3301      	adds	r3, #1
 800456e:	d101      	bne.n	8004574 <vTaskStartScheduler+0x58>
 8004570:	b672      	cpsid	i
 8004572:	e7fe      	b.n	8004572 <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004574:	4b08      	ldr	r3, [pc, #32]	; (8004598 <vTaskStartScheduler+0x7c>)
 8004576:	681b      	ldr	r3, [r3, #0]
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b002      	add	sp, #8
 800457e:	bd80      	pop	{r7, pc}
 8004580:	08006578 	.word	0x08006578
 8004584:	08004d8d 	.word	0x08004d8d
 8004588:	20000328 	.word	0x20000328
 800458c:	20000324 	.word	0x20000324
 8004590:	20000310 	.word	0x20000310
 8004594:	20000308 	.word	0x20000308
 8004598:	2000000c 	.word	0x2000000c

0800459c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80045a0:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <vTaskSuspendAll+0x14>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	4b02      	ldr	r3, [pc, #8]	; (80045b0 <vTaskSuspendAll+0x14>)
 80045a8:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	2000032c 	.word	0x2000032c

080045b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80045c2:	4b68      	ldr	r3, [pc, #416]	; (8004764 <xTaskResumeAll+0x1b0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <xTaskResumeAll+0x1a>
 80045ca:	b672      	cpsid	i
 80045cc:	e7fe      	b.n	80045cc <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80045ce:	f001 f89f 	bl	8005710 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80045d2:	4b64      	ldr	r3, [pc, #400]	; (8004764 <xTaskResumeAll+0x1b0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	1e5a      	subs	r2, r3, #1
 80045d8:	4b62      	ldr	r3, [pc, #392]	; (8004764 <xTaskResumeAll+0x1b0>)
 80045da:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045dc:	4b61      	ldr	r3, [pc, #388]	; (8004764 <xTaskResumeAll+0x1b0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d000      	beq.n	80045e6 <xTaskResumeAll+0x32>
 80045e4:	e0b7      	b.n	8004756 <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045e6:	4b60      	ldr	r3, [pc, #384]	; (8004768 <xTaskResumeAll+0x1b4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d100      	bne.n	80045f0 <xTaskResumeAll+0x3c>
 80045ee:	e0b2      	b.n	8004756 <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045f0:	e089      	b.n	8004706 <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f2:	4b5e      	ldr	r3, [pc, #376]	; (800476c <xTaskResumeAll+0x1b8>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	6a12      	ldr	r2, [r2, #32]
 8004608:	609a      	str	r2, [r3, #8]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	69d2      	ldr	r2, [r2, #28]
 8004612:	605a      	str	r2, [r3, #4]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	3318      	adds	r3, #24
 800461c:	429a      	cmp	r2, r3
 800461e:	d103      	bne.n	8004628 <xTaskResumeAll+0x74>
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	605a      	str	r2, [r3, #4]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2200      	movs	r2, #0
 800462c:	629a      	str	r2, [r3, #40]	; 0x28
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	1e5a      	subs	r2, r3, #1
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	68d2      	ldr	r2, [r2, #12]
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	6892      	ldr	r2, [r2, #8]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	3304      	adds	r3, #4
 800465a:	429a      	cmp	r2, r3
 800465c:	d103      	bne.n	8004666 <xTaskResumeAll+0xb2>
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2200      	movs	r2, #0
 800466a:	615a      	str	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	1e5a      	subs	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	4b3d      	ldr	r3, [pc, #244]	; (8004770 <xTaskResumeAll+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d903      	bls.n	800468a <xTaskResumeAll+0xd6>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004686:	4b3a      	ldr	r3, [pc, #232]	; (8004770 <xTaskResumeAll+0x1bc>)
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468e:	4939      	ldr	r1, [pc, #228]	; (8004774 <xTaskResumeAll+0x1c0>)
 8004690:	0013      	movs	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	189b      	adds	r3, r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	18cb      	adds	r3, r1, r3
 800469a:	3304      	adds	r3, #4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	609a      	str	r2, [r3, #8]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	3204      	adds	r2, #4
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c4:	0013      	movs	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	189b      	adds	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4a29      	ldr	r2, [pc, #164]	; (8004774 <xTaskResumeAll+0x1c0>)
 80046ce:	189a      	adds	r2, r3, r2
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	615a      	str	r2, [r3, #20]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	4926      	ldr	r1, [pc, #152]	; (8004774 <xTaskResumeAll+0x1c0>)
 80046da:	0013      	movs	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	189b      	adds	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	585b      	ldr	r3, [r3, r1]
 80046e4:	1c58      	adds	r0, r3, #1
 80046e6:	4923      	ldr	r1, [pc, #140]	; (8004774 <xTaskResumeAll+0x1c0>)
 80046e8:	0013      	movs	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	189b      	adds	r3, r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <xTaskResumeAll+0x1c4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d302      	bcc.n	8004706 <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8004700:	4b1e      	ldr	r3, [pc, #120]	; (800477c <xTaskResumeAll+0x1c8>)
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004706:	4b19      	ldr	r3, [pc, #100]	; (800476c <xTaskResumeAll+0x1b8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d000      	beq.n	8004710 <xTaskResumeAll+0x15c>
 800470e:	e770      	b.n	80045f2 <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004716:	f000 fbcd 	bl	8004eb4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800471a:	4b19      	ldr	r3, [pc, #100]	; (8004780 <xTaskResumeAll+0x1cc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00f      	beq.n	8004746 <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004726:	f000 f83b 	bl	80047a0 <xTaskIncrementTick>
 800472a:	1e03      	subs	r3, r0, #0
 800472c:	d002      	beq.n	8004734 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <xTaskResumeAll+0x1c8>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3b01      	subs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f2      	bne.n	8004726 <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <xTaskResumeAll+0x1cc>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <xTaskResumeAll+0x1c8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800474e:	2301      	movs	r3, #1
 8004750:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004752:	f000 ffcd 	bl	80056f0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004756:	f000 ffed 	bl	8005734 <vPortExitCritical>

    return xAlreadyYielded;
 800475a:	693b      	ldr	r3, [r7, #16]
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	b006      	add	sp, #24
 8004762:	bd80      	pop	{r7, pc}
 8004764:	2000032c 	.word	0x2000032c
 8004768:	20000304 	.word	0x20000304
 800476c:	200002c4 	.word	0x200002c4
 8004770:	2000030c 	.word	0x2000030c
 8004774:	20000230 	.word	0x20000230
 8004778:	2000022c 	.word	0x2000022c
 800477c:	20000318 	.word	0x20000318
 8004780:	20000314 	.word	0x20000314

08004784 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800478a:	4b04      	ldr	r3, [pc, #16]	; (800479c <xTaskGetTickCount+0x18>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004790:	687b      	ldr	r3, [r7, #4]
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	b002      	add	sp, #8
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	20000308 	.word	0x20000308

080047a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047aa:	4b78      	ldr	r3, [pc, #480]	; (800498c <xTaskIncrementTick+0x1ec>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d000      	beq.n	80047b4 <xTaskIncrementTick+0x14>
 80047b2:	e0e0      	b.n	8004976 <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047b4:	4b76      	ldr	r3, [pc, #472]	; (8004990 <xTaskIncrementTick+0x1f0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80047bc:	4b74      	ldr	r3, [pc, #464]	; (8004990 <xTaskIncrementTick+0x1f0>)
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d117      	bne.n	80047f8 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 80047c8:	4b72      	ldr	r3, [pc, #456]	; (8004994 <xTaskIncrementTick+0x1f4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <xTaskIncrementTick+0x36>
 80047d2:	b672      	cpsid	i
 80047d4:	e7fe      	b.n	80047d4 <xTaskIncrementTick+0x34>
 80047d6:	4b6f      	ldr	r3, [pc, #444]	; (8004994 <xTaskIncrementTick+0x1f4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	4b6e      	ldr	r3, [pc, #440]	; (8004998 <xTaskIncrementTick+0x1f8>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4b6c      	ldr	r3, [pc, #432]	; (8004994 <xTaskIncrementTick+0x1f4>)
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	4b6c      	ldr	r3, [pc, #432]	; (8004998 <xTaskIncrementTick+0x1f8>)
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	4b6c      	ldr	r3, [pc, #432]	; (800499c <xTaskIncrementTick+0x1fc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	4b6a      	ldr	r3, [pc, #424]	; (800499c <xTaskIncrementTick+0x1fc>)
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f000 fb5e 	bl	8004eb4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80047f8:	4b69      	ldr	r3, [pc, #420]	; (80049a0 <xTaskIncrementTick+0x200>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d200      	bcs.n	8004804 <xTaskIncrementTick+0x64>
 8004802:	e0a4      	b.n	800494e <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004804:	4b63      	ldr	r3, [pc, #396]	; (8004994 <xTaskIncrementTick+0x1f4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d104      	bne.n	8004818 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800480e:	4b64      	ldr	r3, [pc, #400]	; (80049a0 <xTaskIncrementTick+0x200>)
 8004810:	2201      	movs	r2, #1
 8004812:	4252      	negs	r2, r2
 8004814:	601a      	str	r2, [r3, #0]
                    break;
 8004816:	e09a      	b.n	800494e <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004818:	4b5e      	ldr	r3, [pc, #376]	; (8004994 <xTaskIncrementTick+0x1f4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d203      	bcs.n	8004838 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004830:	4b5b      	ldr	r3, [pc, #364]	; (80049a0 <xTaskIncrementTick+0x200>)
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004836:	e08a      	b.n	800494e <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	68d2      	ldr	r2, [r2, #12]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	6892      	ldr	r2, [r2, #8]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	3304      	adds	r3, #4
 800485a:	429a      	cmp	r2, r3
 800485c:	d103      	bne.n	8004866 <xTaskIncrementTick+0xc6>
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2200      	movs	r2, #0
 800486a:	615a      	str	r2, [r3, #20]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	1e5a      	subs	r2, r3, #1
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01e      	beq.n	80048bc <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	607b      	str	r3, [r7, #4]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	6a12      	ldr	r2, [r2, #32]
 800488c:	609a      	str	r2, [r3, #8]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	69d2      	ldr	r2, [r2, #28]
 8004896:	605a      	str	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	3318      	adds	r3, #24
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d103      	bne.n	80048ac <xTaskIncrementTick+0x10c>
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	6a1a      	ldr	r2, [r3, #32]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2200      	movs	r2, #0
 80048b0:	629a      	str	r2, [r3, #40]	; 0x28
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	4b38      	ldr	r3, [pc, #224]	; (80049a4 <xTaskIncrementTick+0x204>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d903      	bls.n	80048d0 <xTaskIncrementTick+0x130>
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4b35      	ldr	r3, [pc, #212]	; (80049a4 <xTaskIncrementTick+0x204>)
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	4934      	ldr	r1, [pc, #208]	; (80049a8 <xTaskIncrementTick+0x208>)
 80048d6:	0013      	movs	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	189b      	adds	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	18cb      	adds	r3, r1, r3
 80048e0:	3304      	adds	r3, #4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	60da      	str	r2, [r3, #12]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	3204      	adds	r2, #4
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1d1a      	adds	r2, r3, #4
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	609a      	str	r2, [r3, #8]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490a:	0013      	movs	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	189b      	adds	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <xTaskIncrementTick+0x208>)
 8004914:	189a      	adds	r2, r3, r2
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	615a      	str	r2, [r3, #20]
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491e:	4922      	ldr	r1, [pc, #136]	; (80049a8 <xTaskIncrementTick+0x208>)
 8004920:	0013      	movs	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	189b      	adds	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	585b      	ldr	r3, [r3, r1]
 800492a:	1c58      	adds	r0, r3, #1
 800492c:	491e      	ldr	r1, [pc, #120]	; (80049a8 <xTaskIncrementTick+0x208>)
 800492e:	0013      	movs	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	189b      	adds	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <xTaskIncrementTick+0x20c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	429a      	cmp	r2, r3
 8004944:	d800      	bhi.n	8004948 <xTaskIncrementTick+0x1a8>
 8004946:	e75d      	b.n	8004804 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 8004948:	2301      	movs	r3, #1
 800494a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800494c:	e75a      	b.n	8004804 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800494e:	4b17      	ldr	r3, [pc, #92]	; (80049ac <xTaskIncrementTick+0x20c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004954:	4914      	ldr	r1, [pc, #80]	; (80049a8 <xTaskIncrementTick+0x208>)
 8004956:	0013      	movs	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	189b      	adds	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	585b      	ldr	r3, [r3, r1]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d901      	bls.n	8004968 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004968:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <xTaskIncrementTick+0x210>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	e004      	b.n	8004980 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004976:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <xTaskIncrementTick+0x214>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <xTaskIncrementTick+0x214>)
 800497e:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004980:	69fb      	ldr	r3, [r7, #28]
}
 8004982:	0018      	movs	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	b008      	add	sp, #32
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	2000032c 	.word	0x2000032c
 8004990:	20000308 	.word	0x20000308
 8004994:	200002bc 	.word	0x200002bc
 8004998:	200002c0 	.word	0x200002c0
 800499c:	2000031c 	.word	0x2000031c
 80049a0:	20000324 	.word	0x20000324
 80049a4:	2000030c 	.word	0x2000030c
 80049a8:	20000230 	.word	0x20000230
 80049ac:	2000022c 	.word	0x2000022c
 80049b0:	20000318 	.word	0x20000318
 80049b4:	20000314 	.word	0x20000314

080049b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049be:	4b22      	ldr	r3, [pc, #136]	; (8004a48 <vTaskSwitchContext+0x90>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80049c6:	4b21      	ldr	r3, [pc, #132]	; (8004a4c <vTaskSwitchContext+0x94>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80049cc:	e037      	b.n	8004a3e <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 80049ce:	4b1f      	ldr	r3, [pc, #124]	; (8004a4c <vTaskSwitchContext+0x94>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d4:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <vTaskSwitchContext+0x98>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	e007      	b.n	80049ec <vTaskSwitchContext+0x34>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <vTaskSwitchContext+0x2e>
 80049e2:	b672      	cpsid	i
 80049e4:	e7fe      	b.n	80049e4 <vTaskSwitchContext+0x2c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	4919      	ldr	r1, [pc, #100]	; (8004a54 <vTaskSwitchContext+0x9c>)
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	0013      	movs	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	189b      	adds	r3, r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	585b      	ldr	r3, [r3, r1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0ee      	beq.n	80049dc <vTaskSwitchContext+0x24>
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	0013      	movs	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	189b      	adds	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4a12      	ldr	r2, [pc, #72]	; (8004a54 <vTaskSwitchContext+0x9c>)
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	605a      	str	r2, [r3, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d104      	bne.n	8004a2e <vTaskSwitchContext+0x76>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <vTaskSwitchContext+0xa0>)
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <vTaskSwitchContext+0x98>)
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b002      	add	sp, #8
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	2000032c 	.word	0x2000032c
 8004a4c:	20000318 	.word	0x20000318
 8004a50:	2000030c 	.word	0x2000030c
 8004a54:	20000230 	.word	0x20000230
 8004a58:	2000022c 	.word	0x2000022c

08004a5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <vTaskPlaceOnEventList+0x14>
 8004a6c:	b672      	cpsid	i
 8004a6e:	e7fe      	b.n	8004a6e <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a70:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <vTaskPlaceOnEventList+0x38>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3318      	adds	r3, #24
 8004a76:	001a      	movs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	0011      	movs	r1, r2
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7fe ff50 	bl	8003922 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2101      	movs	r1, #1
 8004a86:	0018      	movs	r0, r3
 8004a88:	f000 facc 	bl	8005024 <prvAddCurrentTaskToDelayedList>
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	2000022c 	.word	0x2000022c

08004a98 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <vTaskPlaceOnEventListRestricted+0x16>
 8004aaa:	b672      	cpsid	i
 8004aac:	e7fe      	b.n	8004aac <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <vTaskPlaceOnEventListRestricted+0x78>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	61da      	str	r2, [r3, #28]
 8004abc:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <vTaskPlaceOnEventListRestricted+0x78>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	6892      	ldr	r2, [r2, #8]
 8004ac4:	621a      	str	r2, [r3, #32]
 8004ac6:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <vTaskPlaceOnEventListRestricted+0x78>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	3218      	adds	r2, #24
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <vTaskPlaceOnEventListRestricted+0x78>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3318      	adds	r3, #24
 8004ad8:	001a      	movs	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	609a      	str	r2, [r3, #8]
 8004ade:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <vTaskPlaceOnEventListRestricted+0x78>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 8004af6:	2301      	movs	r3, #1
 8004af8:	425b      	negs	r3, r3
 8004afa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	0011      	movs	r1, r2
 8004b02:	0018      	movs	r0, r3
 8004b04:	f000 fa8e 	bl	8005024 <prvAddCurrentTaskToDelayedList>
    }
 8004b08:	46c0      	nop			; (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b006      	add	sp, #24
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	2000022c 	.word	0x2000022c

08004b14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <xTaskRemoveFromEventList+0x1a>
 8004b2a:	b672      	cpsid	i
 8004b2c:	e7fe      	b.n	8004b2c <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	6a12      	ldr	r2, [r2, #32]
 8004b3c:	609a      	str	r2, [r3, #8]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	69d2      	ldr	r2, [r2, #28]
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	3318      	adds	r3, #24
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d103      	bne.n	8004b5c <xTaskRemoveFromEventList+0x48>
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	6a1a      	ldr	r2, [r3, #32]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	1e5a      	subs	r2, r3, #1
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b6c:	4b48      	ldr	r3, [pc, #288]	; (8004c90 <xTaskRemoveFromEventList+0x17c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d15d      	bne.n	8004c30 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	68d2      	ldr	r2, [r2, #12]
 8004b82:	609a      	str	r2, [r3, #8]
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	6892      	ldr	r2, [r2, #8]
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	3304      	adds	r3, #4
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d103      	bne.n	8004ba2 <xTaskRemoveFromEventList+0x8e>
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	605a      	str	r2, [r3, #4]
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	615a      	str	r2, [r3, #20]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	1e5a      	subs	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb6:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <xTaskRemoveFromEventList+0x180>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d903      	bls.n	8004bc6 <xTaskRemoveFromEventList+0xb2>
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc2:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <xTaskRemoveFromEventList+0x180>)
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	4933      	ldr	r1, [pc, #204]	; (8004c98 <xTaskRemoveFromEventList+0x184>)
 8004bcc:	0013      	movs	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	189b      	adds	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	18cb      	adds	r3, r1, r3
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	3204      	adds	r2, #4
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	0013      	movs	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	189b      	adds	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4a23      	ldr	r2, [pc, #140]	; (8004c98 <xTaskRemoveFromEventList+0x184>)
 8004c0a:	189a      	adds	r2, r3, r2
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	615a      	str	r2, [r3, #20]
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c14:	4920      	ldr	r1, [pc, #128]	; (8004c98 <xTaskRemoveFromEventList+0x184>)
 8004c16:	0013      	movs	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	189b      	adds	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	585b      	ldr	r3, [r3, r1]
 8004c20:	1c58      	adds	r0, r3, #1
 8004c22:	491d      	ldr	r1, [pc, #116]	; (8004c98 <xTaskRemoveFromEventList+0x184>)
 8004c24:	0013      	movs	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	189b      	adds	r3, r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	5058      	str	r0, [r3, r1]
 8004c2e:	e01b      	b.n	8004c68 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c30:	4b1a      	ldr	r3, [pc, #104]	; (8004c9c <xTaskRemoveFromEventList+0x188>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	61da      	str	r2, [r3, #28]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	621a      	str	r2, [r3, #32]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	3218      	adds	r2, #24
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	3318      	adds	r3, #24
 8004c52:	001a      	movs	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	4a10      	ldr	r2, [pc, #64]	; (8004c9c <xTaskRemoveFromEventList+0x188>)
 8004c5c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c5e:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <xTaskRemoveFromEventList+0x188>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <xTaskRemoveFromEventList+0x188>)
 8004c66:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <xTaskRemoveFromEventList+0x18c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d905      	bls.n	8004c82 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004c76:	2301      	movs	r3, #1
 8004c78:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <xTaskRemoveFromEventList+0x190>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e001      	b.n	8004c86 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8004c86:	69fb      	ldr	r3, [r7, #28]
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b008      	add	sp, #32
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	2000032c 	.word	0x2000032c
 8004c94:	2000030c 	.word	0x2000030c
 8004c98:	20000230 	.word	0x20000230
 8004c9c:	200002c4 	.word	0x200002c4
 8004ca0:	2000022c 	.word	0x2000022c
 8004ca4:	20000318 	.word	0x20000318

08004ca8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <vTaskInternalSetTimeOutState+0x20>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <vTaskInternalSetTimeOutState+0x24>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	605a      	str	r2, [r3, #4]
}
 8004cc0:	46c0      	nop			; (mov r8, r8)
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	2000031c 	.word	0x2000031c
 8004ccc:	20000308 	.word	0x20000308

08004cd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <xTaskCheckForTimeOut+0x14>
 8004ce0:	b672      	cpsid	i
 8004ce2:	e7fe      	b.n	8004ce2 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <xTaskCheckForTimeOut+0x1e>
 8004cea:	b672      	cpsid	i
 8004cec:	e7fe      	b.n	8004cec <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 8004cee:	f000 fd0f 	bl	8005710 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <xTaskCheckForTimeOut+0xa0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3301      	adds	r3, #1
 8004d08:	d102      	bne.n	8004d10 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	e027      	b.n	8004d60 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <xTaskCheckForTimeOut+0xa4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d00a      	beq.n	8004d32 <xTaskCheckForTimeOut+0x62>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d305      	bcc.n	8004d32 <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004d26:	2301      	movs	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	e016      	b.n	8004d60 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d20c      	bcs.n	8004d56 <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	1ad2      	subs	r2, r2, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f7ff ffac 	bl	8004ca8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e004      	b.n	8004d60 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8004d60:	f000 fce8 	bl	8005734 <vPortExitCritical>

    return xReturn;
 8004d64:	697b      	ldr	r3, [r7, #20]
}
 8004d66:	0018      	movs	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b006      	add	sp, #24
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	20000308 	.word	0x20000308
 8004d74:	2000031c 	.word	0x2000031c

08004d78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004d7c:	4b02      	ldr	r3, [pc, #8]	; (8004d88 <vTaskMissedYield+0x10>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000318 	.word	0x20000318

08004d8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004d94:	f000 f84e 	bl	8004e34 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <prvIdleTask+0x1c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d9f9      	bls.n	8004d94 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004da0:	f000 fca6 	bl	80056f0 <vPortYield>
        prvCheckTasksWaitingTermination();
 8004da4:	e7f6      	b.n	8004d94 <prvIdleTask+0x8>
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	20000230 	.word	0x20000230

08004dac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	e00c      	b.n	8004dd2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	0013      	movs	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <prvInitialiseTaskLists+0x68>)
 8004dc4:	189b      	adds	r3, r3, r2
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f7fe fd82 	bl	80038d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d9ef      	bls.n	8004db8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004dd8:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <prvInitialiseTaskLists+0x6c>)
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f7fe fd78 	bl	80038d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004de0:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <prvInitialiseTaskLists+0x70>)
 8004de2:	0018      	movs	r0, r3
 8004de4:	f7fe fd74 	bl	80038d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004de8:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <prvInitialiseTaskLists+0x74>)
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7fe fd70 	bl	80038d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <prvInitialiseTaskLists+0x78>)
 8004df2:	0018      	movs	r0, r3
 8004df4:	f7fe fd6c 	bl	80038d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <prvInitialiseTaskLists+0x7c>)
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f7fe fd68 	bl	80038d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <prvInitialiseTaskLists+0x80>)
 8004e02:	4a05      	ldr	r2, [pc, #20]	; (8004e18 <prvInitialiseTaskLists+0x6c>)
 8004e04:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <prvInitialiseTaskLists+0x84>)
 8004e08:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <prvInitialiseTaskLists+0x70>)
 8004e0a:	601a      	str	r2, [r3, #0]
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b002      	add	sp, #8
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000230 	.word	0x20000230
 8004e18:	20000294 	.word	0x20000294
 8004e1c:	200002a8 	.word	0x200002a8
 8004e20:	200002c4 	.word	0x200002c4
 8004e24:	200002d8 	.word	0x200002d8
 8004e28:	200002f0 	.word	0x200002f0
 8004e2c:	200002bc 	.word	0x200002bc
 8004e30:	200002c0 	.word	0x200002c0

08004e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e3a:	e01a      	b.n	8004e72 <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8004e3c:	f000 fc68 	bl	8005710 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e40:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <prvCheckTasksWaitingTermination+0x50>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7fe fd9e 	bl	800398e <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004e52:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <prvCheckTasksWaitingTermination+0x54>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	1e5a      	subs	r2, r3, #1
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <prvCheckTasksWaitingTermination+0x54>)
 8004e5a:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <prvCheckTasksWaitingTermination+0x58>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	1e5a      	subs	r2, r3, #1
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <prvCheckTasksWaitingTermination+0x58>)
 8004e64:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8004e66:	f000 fc65 	bl	8005734 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f000 f80f 	bl	8004e90 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <prvCheckTasksWaitingTermination+0x58>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e0      	bne.n	8004e3c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b002      	add	sp, #8
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	200002d8 	.word	0x200002d8
 8004e88:	20000304 	.word	0x20000304
 8004e8c:	200002ec 	.word	0x200002ec

08004e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f000 fd77 	bl	8005990 <vPortFree>
            vPortFree( pxTCB );
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f000 fd73 	bl	8005990 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b002      	add	sp, #8
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eb8:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <prvResetNextTaskUnblockTime+0x2c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d104      	bne.n	8004ecc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004ec2:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <prvResetNextTaskUnblockTime+0x30>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	4252      	negs	r2, r2
 8004ec8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004eca:	e005      	b.n	8004ed8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <prvResetNextTaskUnblockTime+0x2c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <prvResetNextTaskUnblockTime+0x30>)
 8004ed6:	601a      	str	r2, [r3, #0]
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	200002bc 	.word	0x200002bc
 8004ee4:	20000324 	.word	0x20000324

08004ee8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <xTaskGetSchedulerState+0x30>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	607b      	str	r3, [r7, #4]
 8004efa:	e008      	b.n	8004f0e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004efc:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <xTaskGetSchedulerState+0x34>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d102      	bne.n	8004f0a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004f04:	2302      	movs	r3, #2
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	e001      	b.n	8004f0e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004f0e:	687b      	ldr	r3, [r7, #4]
    }
 8004f10:	0018      	movs	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b002      	add	sp, #8
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20000310 	.word	0x20000310
 8004f1c:	2000032c 	.word	0x2000032c

08004f20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d06a      	beq.n	800500c <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004f36:	4b38      	ldr	r3, [pc, #224]	; (8005018 <xTaskPriorityDisinherit+0xf8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d001      	beq.n	8004f44 <xTaskPriorityDisinherit+0x24>
 8004f40:	b672      	cpsid	i
 8004f42:	e7fe      	b.n	8004f42 <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <xTaskPriorityDisinherit+0x30>
 8004f4c:	b672      	cpsid	i
 8004f4e:	e7fe      	b.n	8004f4e <xTaskPriorityDisinherit+0x2e>
            ( pxTCB->uxMutexesHeld )--;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f54:	1e5a      	subs	r2, r3, #1
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d052      	beq.n	800500c <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d14e      	bne.n	800500c <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	3304      	adds	r3, #4
 8004f72:	0018      	movs	r0, r3
 8004f74:	f7fe fd0b 	bl	800398e <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	2205      	movs	r2, #5
 8004f86:	1ad2      	subs	r2, r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f90:	4b22      	ldr	r3, [pc, #136]	; (800501c <xTaskPriorityDisinherit+0xfc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d903      	bls.n	8004fa0 <xTaskPriorityDisinherit+0x80>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9c:	4b1f      	ldr	r3, [pc, #124]	; (800501c <xTaskPriorityDisinherit+0xfc>)
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa4:	491e      	ldr	r1, [pc, #120]	; (8005020 <xTaskPriorityDisinherit+0x100>)
 8004fa6:	0013      	movs	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	18cb      	adds	r3, r1, r3
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	60da      	str	r2, [r3, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	3204      	adds	r2, #4
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1d1a      	adds	r2, r3, #4
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	609a      	str	r2, [r3, #8]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fda:	0013      	movs	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <xTaskPriorityDisinherit+0x100>)
 8004fe4:	189a      	adds	r2, r3, r2
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	615a      	str	r2, [r3, #20]
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fee:	490c      	ldr	r1, [pc, #48]	; (8005020 <xTaskPriorityDisinherit+0x100>)
 8004ff0:	0013      	movs	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	189b      	adds	r3, r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	585b      	ldr	r3, [r3, r1]
 8004ffa:	1c58      	adds	r0, r3, #1
 8004ffc:	4908      	ldr	r1, [pc, #32]	; (8005020 <xTaskPriorityDisinherit+0x100>)
 8004ffe:	0013      	movs	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	189b      	adds	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005008:	2301      	movs	r3, #1
 800500a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800500c:	697b      	ldr	r3, [r7, #20]
    }
 800500e:	0018      	movs	r0, r3
 8005010:	46bd      	mov	sp, r7
 8005012:	b006      	add	sp, #24
 8005014:	bd80      	pop	{r7, pc}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	2000022c 	.word	0x2000022c
 800501c:	2000030c 	.word	0x2000030c
 8005020:	20000230 	.word	0x20000230

08005024 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800502e:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005034:	4b2d      	ldr	r3, [pc, #180]	; (80050ec <prvAddCurrentTaskToDelayedList+0xc8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3304      	adds	r3, #4
 800503a:	0018      	movs	r0, r3
 800503c:	f7fe fca7 	bl	800398e <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3301      	adds	r3, #1
 8005044:	d124      	bne.n	8005090 <prvAddCurrentTaskToDelayedList+0x6c>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d021      	beq.n	8005090 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800504c:	4b28      	ldr	r3, [pc, #160]	; (80050f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	4b26      	ldr	r3, [pc, #152]	; (80050ec <prvAddCurrentTaskToDelayedList+0xc8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	609a      	str	r2, [r3, #8]
 800505a:	4b24      	ldr	r3, [pc, #144]	; (80050ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	6892      	ldr	r2, [r2, #8]
 8005062:	60da      	str	r2, [r3, #12]
 8005064:	4b21      	ldr	r3, [pc, #132]	; (80050ec <prvAddCurrentTaskToDelayedList+0xc8>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	3204      	adds	r2, #4
 800506e:	605a      	str	r2, [r3, #4]
 8005070:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <prvAddCurrentTaskToDelayedList+0xc8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	1d1a      	adds	r2, r3, #4
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	609a      	str	r2, [r3, #8]
 800507a:	4b1c      	ldr	r3, [pc, #112]	; (80050ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1c      	ldr	r2, [pc, #112]	; (80050f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005080:	615a      	str	r2, [r3, #20]
 8005082:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800508e:	e026      	b.n	80050de <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	18d3      	adds	r3, r2, r3
 8005096:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005098:	4b14      	ldr	r3, [pc, #80]	; (80050ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d209      	bcs.n	80050bc <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050a8:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <prvAddCurrentTaskToDelayedList+0xd0>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3304      	adds	r3, #4
 80050b2:	0019      	movs	r1, r3
 80050b4:	0010      	movs	r0, r2
 80050b6:	f7fe fc34 	bl	8003922 <vListInsert>
}
 80050ba:	e010      	b.n	80050de <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050bc:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <prvAddCurrentTaskToDelayedList+0xd4>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3304      	adds	r3, #4
 80050c6:	0019      	movs	r1, r3
 80050c8:	0010      	movs	r0, r2
 80050ca:	f7fe fc2a 	bl	8003922 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80050ce:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d202      	bcs.n	80050de <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 80050d8:	4b08      	ldr	r3, [pc, #32]	; (80050fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	601a      	str	r2, [r3, #0]
}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b006      	add	sp, #24
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	20000308 	.word	0x20000308
 80050ec:	2000022c 	.word	0x2000022c
 80050f0:	200002f0 	.word	0x200002f0
 80050f4:	200002c0 	.word	0x200002c0
 80050f8:	200002bc 	.word	0x200002bc
 80050fc:	20000324 	.word	0x20000324

08005100 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005106:	2300      	movs	r3, #0
 8005108:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800510a:	f000 fa2d 	bl	8005568 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800510e:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <xTimerCreateTimerTask+0x44>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005116:	490c      	ldr	r1, [pc, #48]	; (8005148 <xTimerCreateTimerTask+0x48>)
 8005118:	480c      	ldr	r0, [pc, #48]	; (800514c <xTimerCreateTimerTask+0x4c>)
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <xTimerCreateTimerTask+0x50>)
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	2302      	movs	r3, #2
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	2300      	movs	r3, #0
 8005124:	2250      	movs	r2, #80	; 0x50
 8005126:	f7ff f876 	bl	8004216 <xTaskCreate>
 800512a:	0003      	movs	r3, r0
 800512c:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <xTimerCreateTimerTask+0x38>
 8005134:	b672      	cpsid	i
 8005136:	e7fe      	b.n	8005136 <xTimerCreateTimerTask+0x36>
        return xReturn;
 8005138:	687b      	ldr	r3, [r7, #4]
    }
 800513a:	0018      	movs	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	b002      	add	sp, #8
 8005140:	bd80      	pop	{r7, pc}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	20000360 	.word	0x20000360
 8005148:	08006580 	.word	0x08006580
 800514c:	080051fd 	.word	0x080051fd
 8005150:	20000364 	.word	0x20000364

08005154 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005160:	e009      	b.n	8005176 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	18d3      	adds	r3, r2, r3
 800516a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	0010      	movs	r0, r2
 8005174:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	18d1      	adds	r1, r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f8d8 	bl	8005338 <prvInsertTimerInActiveList>
 8005188:	1e03      	subs	r3, r0, #0
 800518a:	d1ea      	bne.n	8005162 <prvReloadTimer+0xe>
        }
    }
 800518c:	46c0      	nop			; (mov r8, r8)
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	46bd      	mov	sp, r7
 8005192:	b004      	add	sp, #16
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a2:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <prvProcessExpiredTimer+0x60>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3304      	adds	r3, #4
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7fe fbec 	bl	800398e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2228      	movs	r2, #40	; 0x28
 80051ba:	5c9b      	ldrb	r3, [r3, r2]
 80051bc:	001a      	movs	r2, r3
 80051be:	2304      	movs	r3, #4
 80051c0:	4013      	ands	r3, r2
 80051c2:	d006      	beq.n	80051d2 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	0018      	movs	r0, r3
 80051cc:	f7ff ffc2 	bl	8005154 <prvReloadTimer>
 80051d0:	e008      	b.n	80051e4 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2228      	movs	r2, #40	; 0x28
 80051d6:	5c9b      	ldrb	r3, [r3, r2]
 80051d8:	2201      	movs	r2, #1
 80051da:	4393      	bics	r3, r2
 80051dc:	b2d9      	uxtb	r1, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2228      	movs	r2, #40	; 0x28
 80051e2:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	0010      	movs	r0, r2
 80051ec:	4798      	blx	r3
    }
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b004      	add	sp, #16
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	20000358 	.word	0x20000358

080051fc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005204:	2308      	movs	r3, #8
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	0018      	movs	r0, r3
 800520a:	f000 f853 	bl	80052b4 <prvGetNextExpireTime>
 800520e:	0003      	movs	r3, r0
 8005210:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	0011      	movs	r1, r2
 8005218:	0018      	movs	r0, r3
 800521a:	f000 f803 	bl	8005224 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800521e:	f000 f8cd 	bl	80053bc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005222:	e7ef      	b.n	8005204 <prvTimerTask+0x8>

08005224 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800522e:	f7ff f9b5 	bl	800459c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005232:	2308      	movs	r3, #8
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	0018      	movs	r0, r3
 8005238:	f000 f85e 	bl	80052f8 <prvSampleTimeNow>
 800523c:	0003      	movs	r3, r0
 800523e:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d12b      	bne.n	800529e <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10c      	bne.n	8005266 <prvProcessTimerOrBlockTask+0x42>
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	429a      	cmp	r2, r3
 8005252:	d808      	bhi.n	8005266 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8005254:	f7ff f9ae 	bl	80045b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	0011      	movs	r1, r2
 800525e:	0018      	movs	r0, r3
 8005260:	f7ff ff9a 	bl	8005198 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005264:	e01d      	b.n	80052a2 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800526c:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <prvProcessTimerOrBlockTask+0x88>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <prvProcessTimerOrBlockTask+0x56>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <prvProcessTimerOrBlockTask+0x58>
 800527a:	2300      	movs	r3, #0
 800527c:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <prvProcessTimerOrBlockTask+0x8c>)
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	0019      	movs	r1, r3
 800528c:	f7fe ff90 	bl	80041b0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005290:	f7ff f990 	bl	80045b4 <xTaskResumeAll>
 8005294:	1e03      	subs	r3, r0, #0
 8005296:	d104      	bne.n	80052a2 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8005298:	f000 fa2a 	bl	80056f0 <vPortYield>
    }
 800529c:	e001      	b.n	80052a2 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 800529e:	f7ff f989 	bl	80045b4 <xTaskResumeAll>
    }
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b004      	add	sp, #16
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	2000035c 	.word	0x2000035c
 80052b0:	20000360 	.word	0x20000360

080052b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052bc:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <prvGetNextExpireTime+0x40>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <prvGetNextExpireTime+0x16>
 80052c6:	2201      	movs	r2, #1
 80052c8:	e000      	b.n	80052cc <prvGetNextExpireTime+0x18>
 80052ca:	2200      	movs	r2, #0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <prvGetNextExpireTime+0x40>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e001      	b.n	80052e8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80052e8:	68fb      	ldr	r3, [r7, #12]
    }
 80052ea:	0018      	movs	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b004      	add	sp, #16
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	20000358 	.word	0x20000358

080052f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005300:	f7ff fa40 	bl	8004784 <xTaskGetTickCount>
 8005304:	0003      	movs	r3, r0
 8005306:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <prvSampleTimeNow+0x3c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	429a      	cmp	r2, r3
 8005310:	d205      	bcs.n	800531e <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8005312:	f000 f901 	bl	8005518 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e002      	b.n	8005324 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005324:	4b03      	ldr	r3, [pc, #12]	; (8005334 <prvSampleTimeNow+0x3c>)
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 800532a:	68fb      	ldr	r3, [r7, #12]
    }
 800532c:	0018      	movs	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	b004      	add	sp, #16
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000368 	.word	0x20000368

08005338 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	429a      	cmp	r2, r3
 800535c:	d812      	bhi.n	8005384 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	1ad2      	subs	r2, r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e01b      	b.n	80053aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <prvInsertTimerInActiveList+0x7c>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3304      	adds	r3, #4
 800537a:	0019      	movs	r1, r3
 800537c:	0010      	movs	r0, r2
 800537e:	f7fe fad0 	bl	8003922 <vListInsert>
 8005382:	e012      	b.n	80053aa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d206      	bcs.n	800539a <prvInsertTimerInActiveList+0x62>
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d302      	bcc.n	800539a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e007      	b.n	80053aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800539a:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <prvInsertTimerInActiveList+0x80>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3304      	adds	r3, #4
 80053a2:	0019      	movs	r1, r3
 80053a4:	0010      	movs	r0, r2
 80053a6:	f7fe fabc 	bl	8003922 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80053aa:	697b      	ldr	r3, [r7, #20]
    }
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b006      	add	sp, #24
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	2000035c 	.word	0x2000035c
 80053b8:	20000358 	.word	0x20000358

080053bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053c2:	e095      	b.n	80054f0 <prvProcessReceivedCommands+0x134>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053c4:	1d3b      	adds	r3, r7, #4
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	da00      	bge.n	80053ce <prvProcessReceivedCommands+0x12>
 80053cc:	e08f      	b.n	80054ee <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3304      	adds	r3, #4
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fe fad4 	bl	800398e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053e6:	003b      	movs	r3, r7
 80053e8:	0018      	movs	r0, r3
 80053ea:	f7ff ff85 	bl	80052f8 <prvSampleTimeNow>
 80053ee:	0003      	movs	r3, r0
 80053f0:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b09      	cmp	r3, #9
 80053f8:	d900      	bls.n	80053fc <prvProcessReceivedCommands+0x40>
 80053fa:	e079      	b.n	80054f0 <prvProcessReceivedCommands+0x134>
 80053fc:	009a      	lsls	r2, r3, #2
 80053fe:	4b44      	ldr	r3, [pc, #272]	; (8005510 <prvProcessReceivedCommands+0x154>)
 8005400:	18d3      	adds	r3, r2, r3
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2228      	movs	r2, #40	; 0x28
 800540a:	5c9b      	ldrb	r3, [r3, r2]
 800540c:	2201      	movs	r2, #1
 800540e:	4313      	orrs	r3, r2
 8005410:	b2d9      	uxtb	r1, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2228      	movs	r2, #40	; 0x28
 8005416:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005418:	1d3b      	adds	r3, r7, #4
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	18d1      	adds	r1, r2, r3
 8005422:	1d3b      	adds	r3, r7, #4
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	6978      	ldr	r0, [r7, #20]
 800542a:	f7ff ff85 	bl	8005338 <prvInsertTimerInActiveList>
 800542e:	1e03      	subs	r3, r0, #0
 8005430:	d05e      	beq.n	80054f0 <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2228      	movs	r2, #40	; 0x28
 8005436:	5c9b      	ldrb	r3, [r3, r2]
 8005438:	001a      	movs	r2, r3
 800543a:	2304      	movs	r3, #4
 800543c:	4013      	ands	r3, r2
 800543e:	d00a      	beq.n	8005456 <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005440:	1d3b      	adds	r3, r7, #4
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	18d1      	adds	r1, r2, r3
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	0018      	movs	r0, r3
 8005450:	f7ff fe80 	bl	8005154 <prvReloadTimer>
 8005454:	e008      	b.n	8005468 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2228      	movs	r2, #40	; 0x28
 800545a:	5c9b      	ldrb	r3, [r3, r2]
 800545c:	2201      	movs	r2, #1
 800545e:	4393      	bics	r3, r2
 8005460:	b2d9      	uxtb	r1, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2228      	movs	r2, #40	; 0x28
 8005466:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	0010      	movs	r0, r2
 8005470:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005472:	e03d      	b.n	80054f0 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2228      	movs	r2, #40	; 0x28
 8005478:	5c9b      	ldrb	r3, [r3, r2]
 800547a:	2201      	movs	r2, #1
 800547c:	4393      	bics	r3, r2
 800547e:	b2d9      	uxtb	r1, r3
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2228      	movs	r2, #40	; 0x28
 8005484:	5499      	strb	r1, [r3, r2]
                        break;
 8005486:	e033      	b.n	80054f0 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2228      	movs	r2, #40	; 0x28
 800548c:	5c9b      	ldrb	r3, [r3, r2]
 800548e:	2201      	movs	r2, #1
 8005490:	4313      	orrs	r3, r2
 8005492:	b2d9      	uxtb	r1, r3
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2228      	movs	r2, #40	; 0x28
 8005498:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800549a:	1d3b      	adds	r3, r7, #4
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <prvProcessReceivedCommands+0xf2>
 80054aa:	b672      	cpsid	i
 80054ac:	e7fe      	b.n	80054ac <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	18d1      	adds	r1, r2, r3
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	6978      	ldr	r0, [r7, #20]
 80054bc:	f7ff ff3c 	bl	8005338 <prvInsertTimerInActiveList>
                        break;
 80054c0:	e016      	b.n	80054f0 <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2228      	movs	r2, #40	; 0x28
 80054c6:	5c9b      	ldrb	r3, [r3, r2]
 80054c8:	001a      	movs	r2, r3
 80054ca:	2302      	movs	r3, #2
 80054cc:	4013      	ands	r3, r2
 80054ce:	d104      	bne.n	80054da <prvProcessReceivedCommands+0x11e>
                            {
                                vPortFree( pxTimer );
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	0018      	movs	r0, r3
 80054d4:	f000 fa5c 	bl	8005990 <vPortFree>
 80054d8:	e00a      	b.n	80054f0 <prvProcessReceivedCommands+0x134>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2228      	movs	r2, #40	; 0x28
 80054de:	5c9b      	ldrb	r3, [r3, r2]
 80054e0:	2201      	movs	r2, #1
 80054e2:	4393      	bics	r3, r2
 80054e4:	b2d9      	uxtb	r1, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2228      	movs	r2, #40	; 0x28
 80054ea:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80054ec:	e000      	b.n	80054f0 <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80054ee:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <prvProcessReceivedCommands+0x158>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	1d39      	adds	r1, r7, #4
 80054f6:	2200      	movs	r2, #0
 80054f8:	0018      	movs	r0, r3
 80054fa:	f7fe fc42 	bl	8003d82 <xQueueReceive>
 80054fe:	1e03      	subs	r3, r0, #0
 8005500:	d000      	beq.n	8005504 <prvProcessReceivedCommands+0x148>
 8005502:	e75f      	b.n	80053c4 <prvProcessReceivedCommands+0x8>
        }
    }
 8005504:	46c0      	nop			; (mov r8, r8)
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	46bd      	mov	sp, r7
 800550a:	b006      	add	sp, #24
 800550c:	bd80      	pop	{r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	08006618 	.word	0x08006618
 8005514:	20000360 	.word	0x20000360

08005518 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800551e:	e00b      	b.n	8005538 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005520:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <prvSwitchTimerLists+0x48>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800552a:	2301      	movs	r3, #1
 800552c:	425a      	negs	r2, r3
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	0011      	movs	r1, r2
 8005532:	0018      	movs	r0, r3
 8005534:	f7ff fe30 	bl	8005198 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005538:	4b09      	ldr	r3, [pc, #36]	; (8005560 <prvSwitchTimerLists+0x48>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1ee      	bne.n	8005520 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005542:	4b07      	ldr	r3, [pc, #28]	; (8005560 <prvSwitchTimerLists+0x48>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <prvSwitchTimerLists+0x4c>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b04      	ldr	r3, [pc, #16]	; (8005560 <prvSwitchTimerLists+0x48>)
 800554e:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8005550:	4b04      	ldr	r3, [pc, #16]	; (8005564 <prvSwitchTimerLists+0x4c>)
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	601a      	str	r2, [r3, #0]
    }
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	46bd      	mov	sp, r7
 800555a:	b002      	add	sp, #8
 800555c:	bd80      	pop	{r7, pc}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	20000358 	.word	0x20000358
 8005564:	2000035c 	.word	0x2000035c

08005568 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800556c:	f000 f8d0 	bl	8005710 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005570:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <prvCheckForValidListAndQueue+0x5c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d120      	bne.n	80055ba <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8005578:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <prvCheckForValidListAndQueue+0x60>)
 800557a:	0018      	movs	r0, r3
 800557c:	f7fe f9a8 	bl	80038d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005580:	4b12      	ldr	r3, [pc, #72]	; (80055cc <prvCheckForValidListAndQueue+0x64>)
 8005582:	0018      	movs	r0, r3
 8005584:	f7fe f9a4 	bl	80038d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005588:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <prvCheckForValidListAndQueue+0x68>)
 800558a:	4a0f      	ldr	r2, [pc, #60]	; (80055c8 <prvCheckForValidListAndQueue+0x60>)
 800558c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <prvCheckForValidListAndQueue+0x6c>)
 8005590:	4a0e      	ldr	r2, [pc, #56]	; (80055cc <prvCheckForValidListAndQueue+0x64>)
 8005592:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005594:	2200      	movs	r2, #0
 8005596:	210c      	movs	r1, #12
 8005598:	2005      	movs	r0, #5
 800559a:	f7fe faa9 	bl	8003af0 <xQueueGenericCreate>
 800559e:	0002      	movs	r2, r0
 80055a0:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <prvCheckForValidListAndQueue+0x5c>)
 80055a2:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80055a4:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <prvCheckForValidListAndQueue+0x5c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d006      	beq.n	80055ba <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <prvCheckForValidListAndQueue+0x5c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a09      	ldr	r2, [pc, #36]	; (80055d8 <prvCheckForValidListAndQueue+0x70>)
 80055b2:	0011      	movs	r1, r2
 80055b4:	0018      	movs	r0, r3
 80055b6:	f7fe fdb7 	bl	8004128 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80055ba:	f000 f8bb 	bl	8005734 <vPortExitCritical>
    }
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000360 	.word	0x20000360
 80055c8:	20000330 	.word	0x20000330
 80055cc:	20000344 	.word	0x20000344
 80055d0:	20000358 	.word	0x20000358
 80055d4:	2000035c 	.word	0x2000035c
 80055d8:	08006588 	.word	0x08006588

080055dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3b04      	subs	r3, #4
 80055ec:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2280      	movs	r2, #128	; 0x80
 80055f2:	0452      	lsls	r2, r2, #17
 80055f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3b04      	subs	r3, #4
 80055fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3b04      	subs	r3, #4
 8005606:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8005608:	4a08      	ldr	r2, [pc, #32]	; (800562c <pxPortInitialiseStack+0x50>)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3b14      	subs	r3, #20
 8005612:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3b20      	subs	r3, #32
 800561e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005620:	68fb      	ldr	r3, [r7, #12]
}
 8005622:	0018      	movs	r0, r3
 8005624:	46bd      	mov	sp, r7
 8005626:	b004      	add	sp, #16
 8005628:	bd80      	pop	{r7, pc}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	08005631 	.word	0x08005631

08005630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8005636:	2300      	movs	r3, #0
 8005638:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800563a:	4b08      	ldr	r3, [pc, #32]	; (800565c <prvTaskExitError+0x2c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	d001      	beq.n	8005646 <prvTaskExitError+0x16>
 8005642:	b672      	cpsid	i
 8005644:	e7fe      	b.n	8005644 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8005646:	b672      	cpsid	i

    while( ulDummy == 0 )
 8005648:	46c0      	nop			; (mov r8, r8)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0fc      	beq.n	800564a <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005650:	46c0      	nop			; (mov r8, r8)
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	46bd      	mov	sp, r7
 8005656:	b002      	add	sp, #8
 8005658:	bd80      	pop	{r7, pc}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	20000010 	.word	0x20000010

08005660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8005664:	46c0      	nop			; (mov r8, r8)
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	0000      	movs	r0, r0
 800566c:	0000      	movs	r0, r0
	...

08005670 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8005670:	4a0b      	ldr	r2, [pc, #44]	; (80056a0 <pxCurrentTCBConst2>)
 8005672:	6813      	ldr	r3, [r2, #0]
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	3020      	adds	r0, #32
 8005678:	f380 8809 	msr	PSP, r0
 800567c:	2002      	movs	r0, #2
 800567e:	f380 8814 	msr	CONTROL, r0
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005688:	46ae      	mov	lr, r5
 800568a:	bc08      	pop	{r3}
 800568c:	bc04      	pop	{r2}
 800568e:	b662      	cpsie	i
 8005690:	4718      	bx	r3
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	46c0      	nop			; (mov r8, r8)
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	46c0      	nop			; (mov r8, r8)
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	46c0      	nop			; (mov r8, r8)
 800569e:	46c0      	nop			; (mov r8, r8)

080056a0 <pxCurrentTCBConst2>:
 80056a0:	2000022c 	.word	0x2000022c
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 80056a4:	46c0      	nop			; (mov r8, r8)
 80056a6:	46c0      	nop			; (mov r8, r8)

080056a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80056ac:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <xPortStartScheduler+0x40>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <xPortStartScheduler+0x40>)
 80056b2:	21ff      	movs	r1, #255	; 0xff
 80056b4:	0409      	lsls	r1, r1, #16
 80056b6:	430a      	orrs	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80056ba:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <xPortStartScheduler+0x40>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <xPortStartScheduler+0x40>)
 80056c0:	21ff      	movs	r1, #255	; 0xff
 80056c2:	0609      	lsls	r1, r1, #24
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80056c8:	f000 f898 	bl	80057fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80056cc:	4b07      	ldr	r3, [pc, #28]	; (80056ec <xPortStartScheduler+0x44>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 80056d2:	f7ff ffcd 	bl	8005670 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80056d6:	f7ff f96f 	bl	80049b8 <vTaskSwitchContext>
    prvTaskExitError();
 80056da:	f7ff ffa9 	bl	8005630 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	e000ed20 	.word	0xe000ed20
 80056ec:	20000010 	.word	0x20000010

080056f0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <vPortYield+0x1c>)
 80056f6:	2280      	movs	r2, #128	; 0x80
 80056f8:	0552      	lsls	r2, r2, #21
 80056fa:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80056fc:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005700:	f3bf 8f6f 	isb	sy
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005714:	b672      	cpsid	i
    uxCriticalNesting++;
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <vPortEnterCritical+0x20>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	4b04      	ldr	r3, [pc, #16]	; (8005730 <vPortEnterCritical+0x20>)
 800571e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8005720:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005724:	f3bf 8f6f 	isb	sy
}
 8005728:	46c0      	nop			; (mov r8, r8)
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	20000010 	.word	0x20000010

08005734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005738:	4b09      	ldr	r3, [pc, #36]	; (8005760 <vPortExitCritical+0x2c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <vPortExitCritical+0x10>
 8005740:	b672      	cpsid	i
 8005742:	e7fe      	b.n	8005742 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <vPortExitCritical+0x2c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	1e5a      	subs	r2, r3, #1
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <vPortExitCritical+0x2c>)
 800574c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 800574e:	4b04      	ldr	r3, [pc, #16]	; (8005760 <vPortExitCritical+0x2c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d100      	bne.n	8005758 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005756:	b662      	cpsie	i
    }
}
 8005758:	46c0      	nop			; (mov r8, r8)
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	20000010 	.word	0x20000010

08005764 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8005764:	f3ef 8010 	mrs	r0, PRIMASK
 8005768:	b672      	cpsid	i
 800576a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800576c:	46c0      	nop			; (mov r8, r8)
 800576e:	0018      	movs	r0, r3

08005770 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8005770:	f380 8810 	msr	PRIMASK, r0
 8005774:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8005776:	46c0      	nop			; (mov r8, r8)
	...

08005780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005780:	f3ef 8009 	mrs	r0, PSP
 8005784:	4b0e      	ldr	r3, [pc, #56]	; (80057c0 <pxCurrentTCBConst>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	3820      	subs	r0, #32
 800578a:	6010      	str	r0, [r2, #0]
 800578c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800578e:	4644      	mov	r4, r8
 8005790:	464d      	mov	r5, r9
 8005792:	4656      	mov	r6, sl
 8005794:	465f      	mov	r7, fp
 8005796:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005798:	b508      	push	{r3, lr}
 800579a:	b672      	cpsid	i
 800579c:	f7ff f90c 	bl	80049b8 <vTaskSwitchContext>
 80057a0:	b662      	cpsie	i
 80057a2:	bc0c      	pop	{r2, r3}
 80057a4:	6811      	ldr	r1, [r2, #0]
 80057a6:	6808      	ldr	r0, [r1, #0]
 80057a8:	3010      	adds	r0, #16
 80057aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80057ac:	46a0      	mov	r8, r4
 80057ae:	46a9      	mov	r9, r5
 80057b0:	46b2      	mov	sl, r6
 80057b2:	46bb      	mov	fp, r7
 80057b4:	f380 8809 	msr	PSP, r0
 80057b8:	3820      	subs	r0, #32
 80057ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80057bc:	4718      	bx	r3
 80057be:	46c0      	nop			; (mov r8, r8)

080057c0 <pxCurrentTCBConst>:
 80057c0:	2000022c 	.word	0x2000022c
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 80057c4:	46c0      	nop			; (mov r8, r8)
 80057c6:	46c0      	nop			; (mov r8, r8)

080057c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80057ce:	f7ff ffc9 	bl	8005764 <ulSetInterruptMaskFromISR>
 80057d2:	0003      	movs	r3, r0
 80057d4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80057d6:	f7fe ffe3 	bl	80047a0 <xTaskIncrementTick>
 80057da:	1e03      	subs	r3, r0, #0
 80057dc:	d003      	beq.n	80057e6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <SysTick_Handler+0x30>)
 80057e0:	2280      	movs	r2, #128	; 0x80
 80057e2:	0552      	lsls	r2, r2, #21
 80057e4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7ff ffc1 	bl	8005770 <vClearInterruptMaskFromISR>
}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b002      	add	sp, #8
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	e000ed04 	.word	0xe000ed04

080057fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005800:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <vPortSetupTimerInterrupt+0x34>)
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <vPortSetupTimerInterrupt+0x38>)
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <vPortSetupTimerInterrupt+0x3c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	22fa      	movs	r2, #250	; 0xfa
 8005812:	0091      	lsls	r1, r2, #2
 8005814:	0018      	movs	r0, r3
 8005816:	f7fa fc89 	bl	800012c <__udivsi3>
 800581a:	0003      	movs	r3, r0
 800581c:	001a      	movs	r2, r3
 800581e:	4b07      	ldr	r3, [pc, #28]	; (800583c <vPortSetupTimerInterrupt+0x40>)
 8005820:	3a01      	subs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005824:	4b02      	ldr	r3, [pc, #8]	; (8005830 <vPortSetupTimerInterrupt+0x34>)
 8005826:	2207      	movs	r2, #7
 8005828:	601a      	str	r2, [r3, #0]
}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	e000e010 	.word	0xe000e010
 8005834:	e000e018 	.word	0xe000e018
 8005838:	20000000 	.word	0x20000000
 800583c:	e000e014 	.word	0xe000e014

08005840 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800584c:	f7fe fea6 	bl	800459c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005850:	4b4a      	ldr	r3, [pc, #296]	; (800597c <pvPortMalloc+0x13c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005858:	f000 f8e6 	bl	8005a28 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d012      	beq.n	8005888 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005862:	2208      	movs	r2, #8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2107      	movs	r1, #7
 8005868:	400b      	ands	r3, r1
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	3308      	adds	r3, #8
 800586e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	43db      	mvns	r3, r3
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	429a      	cmp	r2, r3
 8005878:	d804      	bhi.n	8005884 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	18d3      	adds	r3, r2, r3
 8005880:	607b      	str	r3, [r7, #4]
 8005882:	e001      	b.n	8005888 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	db68      	blt.n	8005960 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d065      	beq.n	8005960 <pvPortMalloc+0x120>
 8005894:	4b3a      	ldr	r3, [pc, #232]	; (8005980 <pvPortMalloc+0x140>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d860      	bhi.n	8005960 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800589e:	4b39      	ldr	r3, [pc, #228]	; (8005984 <pvPortMalloc+0x144>)
 80058a0:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80058a2:	4b38      	ldr	r3, [pc, #224]	; (8005984 <pvPortMalloc+0x144>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058a8:	e004      	b.n	80058b4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d903      	bls.n	80058c6 <pvPortMalloc+0x86>
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f1      	bne.n	80058aa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80058c6:	4b2d      	ldr	r3, [pc, #180]	; (800597c <pvPortMalloc+0x13c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d047      	beq.n	8005960 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2208      	movs	r2, #8
 80058d6:	189b      	adds	r3, r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	1ad2      	subs	r2, r2, r3
 80058ea:	2308      	movs	r3, #8
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d916      	bls.n	8005920 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	18d3      	adds	r3, r2, r3
 80058f8:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2207      	movs	r2, #7
 80058fe:	4013      	ands	r3, r2
 8005900:	d001      	beq.n	8005906 <pvPortMalloc+0xc6>
 8005902:	b672      	cpsid	i
 8005904:	e7fe      	b.n	8005904 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	1ad2      	subs	r2, r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	0018      	movs	r0, r3
 800591c:	f000 f8de 	bl	8005adc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005920:	4b17      	ldr	r3, [pc, #92]	; (8005980 <pvPortMalloc+0x140>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	1ad2      	subs	r2, r2, r3
 800592a:	4b15      	ldr	r3, [pc, #84]	; (8005980 <pvPortMalloc+0x140>)
 800592c:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <pvPortMalloc+0x140>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b15      	ldr	r3, [pc, #84]	; (8005988 <pvPortMalloc+0x148>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d203      	bcs.n	8005942 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800593a:	4b11      	ldr	r3, [pc, #68]	; (8005980 <pvPortMalloc+0x140>)
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4b12      	ldr	r3, [pc, #72]	; (8005988 <pvPortMalloc+0x148>)
 8005940:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2280      	movs	r2, #128	; 0x80
 8005948:	0612      	lsls	r2, r2, #24
 800594a:	431a      	orrs	r2, r3
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005956:	4b0d      	ldr	r3, [pc, #52]	; (800598c <pvPortMalloc+0x14c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <pvPortMalloc+0x14c>)
 800595e:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005960:	f7fe fe28 	bl	80045b4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2207      	movs	r2, #7
 8005968:	4013      	ands	r3, r2
 800596a:	d001      	beq.n	8005970 <pvPortMalloc+0x130>
 800596c:	b672      	cpsid	i
 800596e:	e7fe      	b.n	800596e <pvPortMalloc+0x12e>
    return pvReturn;
 8005970:	697b      	ldr	r3, [r7, #20]
}
 8005972:	0018      	movs	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	b008      	add	sp, #32
 8005978:	bd80      	pop	{r7, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	20001cd8 	.word	0x20001cd8
 8005980:	20001cdc 	.word	0x20001cdc
 8005984:	20001cd0 	.word	0x20001cd0
 8005988:	20001ce0 	.word	0x20001ce0
 800598c:	20001ce4 	.word	0x20001ce4

08005990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d039      	beq.n	8005a16 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80059a2:	2308      	movs	r3, #8
 80059a4:	425b      	negs	r3, r3
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	18d3      	adds	r3, r2, r3
 80059aa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	db01      	blt.n	80059bc <vPortFree+0x2c>
 80059b8:	b672      	cpsid	i
 80059ba:	e7fe      	b.n	80059ba <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <vPortFree+0x38>
 80059c4:	b672      	cpsid	i
 80059c6:	e7fe      	b.n	80059c6 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	0fdb      	lsrs	r3, r3, #31
 80059ce:	1c1a      	adds	r2, r3, #0
 80059d0:	2301      	movs	r3, #1
 80059d2:	4013      	ands	r3, r2
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01d      	beq.n	8005a16 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d119      	bne.n	8005a16 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	085a      	lsrs	r2, r3, #1
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80059ee:	f7fe fdd5 	bl	800459c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <vPortFree+0x90>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	18d2      	adds	r2, r2, r3
 80059fc:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <vPortFree+0x90>)
 80059fe:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 f86a 	bl	8005adc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <vPortFree+0x94>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <vPortFree+0x94>)
 8005a10:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8005a12:	f7fe fdcf 	bl	80045b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b004      	add	sp, #16
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	20001cdc 	.word	0x20001cdc
 8005a24:	20001ce8 	.word	0x20001ce8

08005a28 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a2e:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <prvHeapInit+0x9c>)
 8005a30:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005a32:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <prvHeapInit+0xa0>)
 8005a34:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2207      	movs	r2, #7
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d00c      	beq.n	8005a58 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3307      	adds	r3, #7
 8005a42:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2207      	movs	r2, #7
 8005a48:	4393      	bics	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1ad2      	subs	r2, r2, r3
 8005a52:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <prvHeapInit+0xa0>)
 8005a54:	18d3      	adds	r3, r2, r3
 8005a56:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a5c:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <prvHeapInit+0xa4>)
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005a62:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <prvHeapInit+0xa4>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	18d3      	adds	r3, r2, r3
 8005a6e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005a70:	2208      	movs	r2, #8
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2207      	movs	r2, #7
 8005a7c:	4393      	bics	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <prvHeapInit+0xa8>)
 8005a84:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8005a86:	4b12      	ldr	r3, [pc, #72]	; (8005ad0 <prvHeapInit+0xa8>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005a8e:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <prvHeapInit+0xa8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	1ad2      	subs	r2, r2, r3
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <prvHeapInit+0xa8>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <prvHeapInit+0xac>)
 8005ab2:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <prvHeapInit+0xb0>)
 8005aba:	601a      	str	r2, [r3, #0]
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b004      	add	sp, #16
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	00001964 	.word	0x00001964
 8005ac8:	2000036c 	.word	0x2000036c
 8005acc:	20001cd0 	.word	0x20001cd0
 8005ad0:	20001cd8 	.word	0x20001cd8
 8005ad4:	20001ce0 	.word	0x20001ce0
 8005ad8:	20001cdc 	.word	0x20001cdc

08005adc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ae4:	4b27      	ldr	r3, [pc, #156]	; (8005b84 <prvInsertBlockIntoFreeList+0xa8>)
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e002      	b.n	8005af0 <prvInsertBlockIntoFreeList+0x14>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d8f7      	bhi.n	8005aea <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	18d3      	adds	r3, r2, r3
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d108      	bne.n	8005b1e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	18d2      	adds	r2, r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	18d2      	adds	r2, r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d118      	bne.n	8005b64 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b14      	ldr	r3, [pc, #80]	; (8005b88 <prvInsertBlockIntoFreeList+0xac>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d00d      	beq.n	8005b5a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	18d2      	adds	r2, r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e008      	b.n	8005b6c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <prvInsertBlockIntoFreeList+0xac>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e003      	b.n	8005b6c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d002      	beq.n	8005b7a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b004      	add	sp, #16
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	20001cd0 	.word	0x20001cd0
 8005b88:	20001cd8 	.word	0x20001cd8

08005b8c <__libc_init_array>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	2600      	movs	r6, #0
 8005b90:	4d0c      	ldr	r5, [pc, #48]	; (8005bc4 <__libc_init_array+0x38>)
 8005b92:	4c0d      	ldr	r4, [pc, #52]	; (8005bc8 <__libc_init_array+0x3c>)
 8005b94:	1b64      	subs	r4, r4, r5
 8005b96:	10a4      	asrs	r4, r4, #2
 8005b98:	42a6      	cmp	r6, r4
 8005b9a:	d109      	bne.n	8005bb0 <__libc_init_array+0x24>
 8005b9c:	2600      	movs	r6, #0
 8005b9e:	f000 fc9b 	bl	80064d8 <_init>
 8005ba2:	4d0a      	ldr	r5, [pc, #40]	; (8005bcc <__libc_init_array+0x40>)
 8005ba4:	4c0a      	ldr	r4, [pc, #40]	; (8005bd0 <__libc_init_array+0x44>)
 8005ba6:	1b64      	subs	r4, r4, r5
 8005ba8:	10a4      	asrs	r4, r4, #2
 8005baa:	42a6      	cmp	r6, r4
 8005bac:	d105      	bne.n	8005bba <__libc_init_array+0x2e>
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	00b3      	lsls	r3, r6, #2
 8005bb2:	58eb      	ldr	r3, [r5, r3]
 8005bb4:	4798      	blx	r3
 8005bb6:	3601      	adds	r6, #1
 8005bb8:	e7ee      	b.n	8005b98 <__libc_init_array+0xc>
 8005bba:	00b3      	lsls	r3, r6, #2
 8005bbc:	58eb      	ldr	r3, [r5, r3]
 8005bbe:	4798      	blx	r3
 8005bc0:	3601      	adds	r6, #1
 8005bc2:	e7f2      	b.n	8005baa <__libc_init_array+0x1e>
 8005bc4:	08006674 	.word	0x08006674
 8005bc8:	08006674 	.word	0x08006674
 8005bcc:	08006674 	.word	0x08006674
 8005bd0:	08006678 	.word	0x08006678

08005bd4 <memcpy>:
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	b510      	push	{r4, lr}
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d100      	bne.n	8005bde <memcpy+0xa>
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	5ccc      	ldrb	r4, [r1, r3]
 8005be0:	54c4      	strb	r4, [r0, r3]
 8005be2:	3301      	adds	r3, #1
 8005be4:	e7f8      	b.n	8005bd8 <memcpy+0x4>

08005be6 <memset>:
 8005be6:	0003      	movs	r3, r0
 8005be8:	1882      	adds	r2, r0, r2
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d100      	bne.n	8005bf0 <memset+0xa>
 8005bee:	4770      	bx	lr
 8005bf0:	7019      	strb	r1, [r3, #0]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	e7f9      	b.n	8005bea <memset+0x4>
	...

08005bf8 <siprintf>:
 8005bf8:	b40e      	push	{r1, r2, r3}
 8005bfa:	b500      	push	{lr}
 8005bfc:	490b      	ldr	r1, [pc, #44]	; (8005c2c <siprintf+0x34>)
 8005bfe:	b09c      	sub	sp, #112	; 0x70
 8005c00:	ab1d      	add	r3, sp, #116	; 0x74
 8005c02:	9002      	str	r0, [sp, #8]
 8005c04:	9006      	str	r0, [sp, #24]
 8005c06:	9107      	str	r1, [sp, #28]
 8005c08:	9104      	str	r1, [sp, #16]
 8005c0a:	4809      	ldr	r0, [pc, #36]	; (8005c30 <siprintf+0x38>)
 8005c0c:	4909      	ldr	r1, [pc, #36]	; (8005c34 <siprintf+0x3c>)
 8005c0e:	cb04      	ldmia	r3!, {r2}
 8005c10:	9105      	str	r1, [sp, #20]
 8005c12:	6800      	ldr	r0, [r0, #0]
 8005c14:	a902      	add	r1, sp, #8
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	f000 f870 	bl	8005cfc <_svfiprintf_r>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	9a02      	ldr	r2, [sp, #8]
 8005c20:	7013      	strb	r3, [r2, #0]
 8005c22:	b01c      	add	sp, #112	; 0x70
 8005c24:	bc08      	pop	{r3}
 8005c26:	b003      	add	sp, #12
 8005c28:	4718      	bx	r3
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	7fffffff 	.word	0x7fffffff
 8005c30:	20000014 	.word	0x20000014
 8005c34:	ffff0208 	.word	0xffff0208

08005c38 <__ssputs_r>:
 8005c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3a:	688e      	ldr	r6, [r1, #8]
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	0007      	movs	r7, r0
 8005c40:	000c      	movs	r4, r1
 8005c42:	9203      	str	r2, [sp, #12]
 8005c44:	9301      	str	r3, [sp, #4]
 8005c46:	429e      	cmp	r6, r3
 8005c48:	d83c      	bhi.n	8005cc4 <__ssputs_r+0x8c>
 8005c4a:	2390      	movs	r3, #144	; 0x90
 8005c4c:	898a      	ldrh	r2, [r1, #12]
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	421a      	tst	r2, r3
 8005c52:	d034      	beq.n	8005cbe <__ssputs_r+0x86>
 8005c54:	6909      	ldr	r1, [r1, #16]
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	6960      	ldr	r0, [r4, #20]
 8005c5a:	1a5b      	subs	r3, r3, r1
 8005c5c:	9302      	str	r3, [sp, #8]
 8005c5e:	2303      	movs	r3, #3
 8005c60:	4343      	muls	r3, r0
 8005c62:	0fdd      	lsrs	r5, r3, #31
 8005c64:	18ed      	adds	r5, r5, r3
 8005c66:	9b01      	ldr	r3, [sp, #4]
 8005c68:	9802      	ldr	r0, [sp, #8]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	181b      	adds	r3, r3, r0
 8005c6e:	106d      	asrs	r5, r5, #1
 8005c70:	42ab      	cmp	r3, r5
 8005c72:	d900      	bls.n	8005c76 <__ssputs_r+0x3e>
 8005c74:	001d      	movs	r5, r3
 8005c76:	0553      	lsls	r3, r2, #21
 8005c78:	d532      	bpl.n	8005ce0 <__ssputs_r+0xa8>
 8005c7a:	0029      	movs	r1, r5
 8005c7c:	0038      	movs	r0, r7
 8005c7e:	f000 fb49 	bl	8006314 <_malloc_r>
 8005c82:	1e06      	subs	r6, r0, #0
 8005c84:	d109      	bne.n	8005c9a <__ssputs_r+0x62>
 8005c86:	230c      	movs	r3, #12
 8005c88:	603b      	str	r3, [r7, #0]
 8005c8a:	2340      	movs	r3, #64	; 0x40
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	89a2      	ldrh	r2, [r4, #12]
 8005c90:	4240      	negs	r0, r0
 8005c92:	4313      	orrs	r3, r2
 8005c94:	81a3      	strh	r3, [r4, #12]
 8005c96:	b005      	add	sp, #20
 8005c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9a:	9a02      	ldr	r2, [sp, #8]
 8005c9c:	6921      	ldr	r1, [r4, #16]
 8005c9e:	f7ff ff99 	bl	8005bd4 <memcpy>
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <__ssputs_r+0xc0>)
 8005ca6:	401a      	ands	r2, r3
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	4313      	orrs	r3, r2
 8005cac:	81a3      	strh	r3, [r4, #12]
 8005cae:	9b02      	ldr	r3, [sp, #8]
 8005cb0:	6126      	str	r6, [r4, #16]
 8005cb2:	18f6      	adds	r6, r6, r3
 8005cb4:	6026      	str	r6, [r4, #0]
 8005cb6:	6165      	str	r5, [r4, #20]
 8005cb8:	9e01      	ldr	r6, [sp, #4]
 8005cba:	1aed      	subs	r5, r5, r3
 8005cbc:	60a5      	str	r5, [r4, #8]
 8005cbe:	9b01      	ldr	r3, [sp, #4]
 8005cc0:	429e      	cmp	r6, r3
 8005cc2:	d900      	bls.n	8005cc6 <__ssputs_r+0x8e>
 8005cc4:	9e01      	ldr	r6, [sp, #4]
 8005cc6:	0032      	movs	r2, r6
 8005cc8:	9903      	ldr	r1, [sp, #12]
 8005cca:	6820      	ldr	r0, [r4, #0]
 8005ccc:	f000 faa3 	bl	8006216 <memmove>
 8005cd0:	68a3      	ldr	r3, [r4, #8]
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	1b9b      	subs	r3, r3, r6
 8005cd6:	60a3      	str	r3, [r4, #8]
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	199e      	adds	r6, r3, r6
 8005cdc:	6026      	str	r6, [r4, #0]
 8005cde:	e7da      	b.n	8005c96 <__ssputs_r+0x5e>
 8005ce0:	002a      	movs	r2, r5
 8005ce2:	0038      	movs	r0, r7
 8005ce4:	f000 fb8c 	bl	8006400 <_realloc_r>
 8005ce8:	1e06      	subs	r6, r0, #0
 8005cea:	d1e0      	bne.n	8005cae <__ssputs_r+0x76>
 8005cec:	0038      	movs	r0, r7
 8005cee:	6921      	ldr	r1, [r4, #16]
 8005cf0:	f000 faa4 	bl	800623c <_free_r>
 8005cf4:	e7c7      	b.n	8005c86 <__ssputs_r+0x4e>
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	fffffb7f 	.word	0xfffffb7f

08005cfc <_svfiprintf_r>:
 8005cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cfe:	b0a1      	sub	sp, #132	; 0x84
 8005d00:	9003      	str	r0, [sp, #12]
 8005d02:	001d      	movs	r5, r3
 8005d04:	898b      	ldrh	r3, [r1, #12]
 8005d06:	000f      	movs	r7, r1
 8005d08:	0016      	movs	r6, r2
 8005d0a:	061b      	lsls	r3, r3, #24
 8005d0c:	d511      	bpl.n	8005d32 <_svfiprintf_r+0x36>
 8005d0e:	690b      	ldr	r3, [r1, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10e      	bne.n	8005d32 <_svfiprintf_r+0x36>
 8005d14:	2140      	movs	r1, #64	; 0x40
 8005d16:	f000 fafd 	bl	8006314 <_malloc_r>
 8005d1a:	6038      	str	r0, [r7, #0]
 8005d1c:	6138      	str	r0, [r7, #16]
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d105      	bne.n	8005d2e <_svfiprintf_r+0x32>
 8005d22:	230c      	movs	r3, #12
 8005d24:	9a03      	ldr	r2, [sp, #12]
 8005d26:	3801      	subs	r0, #1
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	b021      	add	sp, #132	; 0x84
 8005d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d2e:	2340      	movs	r3, #64	; 0x40
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	2300      	movs	r3, #0
 8005d34:	ac08      	add	r4, sp, #32
 8005d36:	6163      	str	r3, [r4, #20]
 8005d38:	3320      	adds	r3, #32
 8005d3a:	7663      	strb	r3, [r4, #25]
 8005d3c:	3310      	adds	r3, #16
 8005d3e:	76a3      	strb	r3, [r4, #26]
 8005d40:	9507      	str	r5, [sp, #28]
 8005d42:	0035      	movs	r5, r6
 8005d44:	782b      	ldrb	r3, [r5, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <_svfiprintf_r+0x52>
 8005d4a:	2b25      	cmp	r3, #37	; 0x25
 8005d4c:	d147      	bne.n	8005dde <_svfiprintf_r+0xe2>
 8005d4e:	1bab      	subs	r3, r5, r6
 8005d50:	9305      	str	r3, [sp, #20]
 8005d52:	42b5      	cmp	r5, r6
 8005d54:	d00c      	beq.n	8005d70 <_svfiprintf_r+0x74>
 8005d56:	0032      	movs	r2, r6
 8005d58:	0039      	movs	r1, r7
 8005d5a:	9803      	ldr	r0, [sp, #12]
 8005d5c:	f7ff ff6c 	bl	8005c38 <__ssputs_r>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d100      	bne.n	8005d66 <_svfiprintf_r+0x6a>
 8005d64:	e0ae      	b.n	8005ec4 <_svfiprintf_r+0x1c8>
 8005d66:	6962      	ldr	r2, [r4, #20]
 8005d68:	9b05      	ldr	r3, [sp, #20]
 8005d6a:	4694      	mov	ip, r2
 8005d6c:	4463      	add	r3, ip
 8005d6e:	6163      	str	r3, [r4, #20]
 8005d70:	782b      	ldrb	r3, [r5, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d100      	bne.n	8005d78 <_svfiprintf_r+0x7c>
 8005d76:	e0a5      	b.n	8005ec4 <_svfiprintf_r+0x1c8>
 8005d78:	2201      	movs	r2, #1
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4252      	negs	r2, r2
 8005d7e:	6062      	str	r2, [r4, #4]
 8005d80:	a904      	add	r1, sp, #16
 8005d82:	3254      	adds	r2, #84	; 0x54
 8005d84:	1852      	adds	r2, r2, r1
 8005d86:	1c6e      	adds	r6, r5, #1
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	60e3      	str	r3, [r4, #12]
 8005d8c:	60a3      	str	r3, [r4, #8]
 8005d8e:	7013      	strb	r3, [r2, #0]
 8005d90:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d92:	2205      	movs	r2, #5
 8005d94:	7831      	ldrb	r1, [r6, #0]
 8005d96:	4854      	ldr	r0, [pc, #336]	; (8005ee8 <_svfiprintf_r+0x1ec>)
 8005d98:	f000 fa32 	bl	8006200 <memchr>
 8005d9c:	1c75      	adds	r5, r6, #1
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d11f      	bne.n	8005de2 <_svfiprintf_r+0xe6>
 8005da2:	6822      	ldr	r2, [r4, #0]
 8005da4:	06d3      	lsls	r3, r2, #27
 8005da6:	d504      	bpl.n	8005db2 <_svfiprintf_r+0xb6>
 8005da8:	2353      	movs	r3, #83	; 0x53
 8005daa:	a904      	add	r1, sp, #16
 8005dac:	185b      	adds	r3, r3, r1
 8005dae:	2120      	movs	r1, #32
 8005db0:	7019      	strb	r1, [r3, #0]
 8005db2:	0713      	lsls	r3, r2, #28
 8005db4:	d504      	bpl.n	8005dc0 <_svfiprintf_r+0xc4>
 8005db6:	2353      	movs	r3, #83	; 0x53
 8005db8:	a904      	add	r1, sp, #16
 8005dba:	185b      	adds	r3, r3, r1
 8005dbc:	212b      	movs	r1, #43	; 0x2b
 8005dbe:	7019      	strb	r1, [r3, #0]
 8005dc0:	7833      	ldrb	r3, [r6, #0]
 8005dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc4:	d016      	beq.n	8005df4 <_svfiprintf_r+0xf8>
 8005dc6:	0035      	movs	r5, r6
 8005dc8:	2100      	movs	r1, #0
 8005dca:	200a      	movs	r0, #10
 8005dcc:	68e3      	ldr	r3, [r4, #12]
 8005dce:	782a      	ldrb	r2, [r5, #0]
 8005dd0:	1c6e      	adds	r6, r5, #1
 8005dd2:	3a30      	subs	r2, #48	; 0x30
 8005dd4:	2a09      	cmp	r2, #9
 8005dd6:	d94e      	bls.n	8005e76 <_svfiprintf_r+0x17a>
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	d111      	bne.n	8005e00 <_svfiprintf_r+0x104>
 8005ddc:	e017      	b.n	8005e0e <_svfiprintf_r+0x112>
 8005dde:	3501      	adds	r5, #1
 8005de0:	e7b0      	b.n	8005d44 <_svfiprintf_r+0x48>
 8005de2:	4b41      	ldr	r3, [pc, #260]	; (8005ee8 <_svfiprintf_r+0x1ec>)
 8005de4:	6822      	ldr	r2, [r4, #0]
 8005de6:	1ac0      	subs	r0, r0, r3
 8005de8:	2301      	movs	r3, #1
 8005dea:	4083      	lsls	r3, r0
 8005dec:	4313      	orrs	r3, r2
 8005dee:	002e      	movs	r6, r5
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	e7ce      	b.n	8005d92 <_svfiprintf_r+0x96>
 8005df4:	9b07      	ldr	r3, [sp, #28]
 8005df6:	1d19      	adds	r1, r3, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	9107      	str	r1, [sp, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	db01      	blt.n	8005e04 <_svfiprintf_r+0x108>
 8005e00:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e02:	e004      	b.n	8005e0e <_svfiprintf_r+0x112>
 8005e04:	425b      	negs	r3, r3
 8005e06:	60e3      	str	r3, [r4, #12]
 8005e08:	2302      	movs	r3, #2
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	782b      	ldrb	r3, [r5, #0]
 8005e10:	2b2e      	cmp	r3, #46	; 0x2e
 8005e12:	d10a      	bne.n	8005e2a <_svfiprintf_r+0x12e>
 8005e14:	786b      	ldrb	r3, [r5, #1]
 8005e16:	2b2a      	cmp	r3, #42	; 0x2a
 8005e18:	d135      	bne.n	8005e86 <_svfiprintf_r+0x18a>
 8005e1a:	9b07      	ldr	r3, [sp, #28]
 8005e1c:	3502      	adds	r5, #2
 8005e1e:	1d1a      	adds	r2, r3, #4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	9207      	str	r2, [sp, #28]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	db2b      	blt.n	8005e80 <_svfiprintf_r+0x184>
 8005e28:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2a:	4e30      	ldr	r6, [pc, #192]	; (8005eec <_svfiprintf_r+0x1f0>)
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	0030      	movs	r0, r6
 8005e30:	7829      	ldrb	r1, [r5, #0]
 8005e32:	f000 f9e5 	bl	8006200 <memchr>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d006      	beq.n	8005e48 <_svfiprintf_r+0x14c>
 8005e3a:	2340      	movs	r3, #64	; 0x40
 8005e3c:	1b80      	subs	r0, r0, r6
 8005e3e:	4083      	lsls	r3, r0
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	3501      	adds	r5, #1
 8005e44:	4313      	orrs	r3, r2
 8005e46:	6023      	str	r3, [r4, #0]
 8005e48:	7829      	ldrb	r1, [r5, #0]
 8005e4a:	2206      	movs	r2, #6
 8005e4c:	4828      	ldr	r0, [pc, #160]	; (8005ef0 <_svfiprintf_r+0x1f4>)
 8005e4e:	1c6e      	adds	r6, r5, #1
 8005e50:	7621      	strb	r1, [r4, #24]
 8005e52:	f000 f9d5 	bl	8006200 <memchr>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d03c      	beq.n	8005ed4 <_svfiprintf_r+0x1d8>
 8005e5a:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <_svfiprintf_r+0x1f8>)
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d125      	bne.n	8005eac <_svfiprintf_r+0x1b0>
 8005e60:	2207      	movs	r2, #7
 8005e62:	9b07      	ldr	r3, [sp, #28]
 8005e64:	3307      	adds	r3, #7
 8005e66:	4393      	bics	r3, r2
 8005e68:	3308      	adds	r3, #8
 8005e6a:	9307      	str	r3, [sp, #28]
 8005e6c:	6963      	ldr	r3, [r4, #20]
 8005e6e:	9a04      	ldr	r2, [sp, #16]
 8005e70:	189b      	adds	r3, r3, r2
 8005e72:	6163      	str	r3, [r4, #20]
 8005e74:	e765      	b.n	8005d42 <_svfiprintf_r+0x46>
 8005e76:	4343      	muls	r3, r0
 8005e78:	0035      	movs	r5, r6
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	189b      	adds	r3, r3, r2
 8005e7e:	e7a6      	b.n	8005dce <_svfiprintf_r+0xd2>
 8005e80:	2301      	movs	r3, #1
 8005e82:	425b      	negs	r3, r3
 8005e84:	e7d0      	b.n	8005e28 <_svfiprintf_r+0x12c>
 8005e86:	2300      	movs	r3, #0
 8005e88:	200a      	movs	r0, #10
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	3501      	adds	r5, #1
 8005e8e:	6063      	str	r3, [r4, #4]
 8005e90:	7829      	ldrb	r1, [r5, #0]
 8005e92:	1c6e      	adds	r6, r5, #1
 8005e94:	3930      	subs	r1, #48	; 0x30
 8005e96:	2909      	cmp	r1, #9
 8005e98:	d903      	bls.n	8005ea2 <_svfiprintf_r+0x1a6>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0c5      	beq.n	8005e2a <_svfiprintf_r+0x12e>
 8005e9e:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea0:	e7c3      	b.n	8005e2a <_svfiprintf_r+0x12e>
 8005ea2:	4342      	muls	r2, r0
 8005ea4:	0035      	movs	r5, r6
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	1852      	adds	r2, r2, r1
 8005eaa:	e7f1      	b.n	8005e90 <_svfiprintf_r+0x194>
 8005eac:	ab07      	add	r3, sp, #28
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	003a      	movs	r2, r7
 8005eb2:	0021      	movs	r1, r4
 8005eb4:	4b10      	ldr	r3, [pc, #64]	; (8005ef8 <_svfiprintf_r+0x1fc>)
 8005eb6:	9803      	ldr	r0, [sp, #12]
 8005eb8:	e000      	b.n	8005ebc <_svfiprintf_r+0x1c0>
 8005eba:	bf00      	nop
 8005ebc:	9004      	str	r0, [sp, #16]
 8005ebe:	9b04      	ldr	r3, [sp, #16]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	d1d3      	bne.n	8005e6c <_svfiprintf_r+0x170>
 8005ec4:	89bb      	ldrh	r3, [r7, #12]
 8005ec6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ec8:	065b      	lsls	r3, r3, #25
 8005eca:	d400      	bmi.n	8005ece <_svfiprintf_r+0x1d2>
 8005ecc:	e72d      	b.n	8005d2a <_svfiprintf_r+0x2e>
 8005ece:	2001      	movs	r0, #1
 8005ed0:	4240      	negs	r0, r0
 8005ed2:	e72a      	b.n	8005d2a <_svfiprintf_r+0x2e>
 8005ed4:	ab07      	add	r3, sp, #28
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	003a      	movs	r2, r7
 8005eda:	0021      	movs	r1, r4
 8005edc:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <_svfiprintf_r+0x1fc>)
 8005ede:	9803      	ldr	r0, [sp, #12]
 8005ee0:	f000 f87c 	bl	8005fdc <_printf_i>
 8005ee4:	e7ea      	b.n	8005ebc <_svfiprintf_r+0x1c0>
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	08006640 	.word	0x08006640
 8005eec:	08006646 	.word	0x08006646
 8005ef0:	0800664a 	.word	0x0800664a
 8005ef4:	00000000 	.word	0x00000000
 8005ef8:	08005c39 	.word	0x08005c39

08005efc <_printf_common>:
 8005efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005efe:	0015      	movs	r5, r2
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	688a      	ldr	r2, [r1, #8]
 8005f04:	690b      	ldr	r3, [r1, #16]
 8005f06:	000c      	movs	r4, r1
 8005f08:	9000      	str	r0, [sp, #0]
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	da00      	bge.n	8005f10 <_printf_common+0x14>
 8005f0e:	0013      	movs	r3, r2
 8005f10:	0022      	movs	r2, r4
 8005f12:	602b      	str	r3, [r5, #0]
 8005f14:	3243      	adds	r2, #67	; 0x43
 8005f16:	7812      	ldrb	r2, [r2, #0]
 8005f18:	2a00      	cmp	r2, #0
 8005f1a:	d001      	beq.n	8005f20 <_printf_common+0x24>
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	069b      	lsls	r3, r3, #26
 8005f24:	d502      	bpl.n	8005f2c <_printf_common+0x30>
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	3302      	adds	r3, #2
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	6822      	ldr	r2, [r4, #0]
 8005f2e:	2306      	movs	r3, #6
 8005f30:	0017      	movs	r7, r2
 8005f32:	401f      	ands	r7, r3
 8005f34:	421a      	tst	r2, r3
 8005f36:	d027      	beq.n	8005f88 <_printf_common+0x8c>
 8005f38:	0023      	movs	r3, r4
 8005f3a:	3343      	adds	r3, #67	; 0x43
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	1e5a      	subs	r2, r3, #1
 8005f40:	4193      	sbcs	r3, r2
 8005f42:	6822      	ldr	r2, [r4, #0]
 8005f44:	0692      	lsls	r2, r2, #26
 8005f46:	d430      	bmi.n	8005faa <_printf_common+0xae>
 8005f48:	0022      	movs	r2, r4
 8005f4a:	9901      	ldr	r1, [sp, #4]
 8005f4c:	9800      	ldr	r0, [sp, #0]
 8005f4e:	9e08      	ldr	r6, [sp, #32]
 8005f50:	3243      	adds	r2, #67	; 0x43
 8005f52:	47b0      	blx	r6
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d025      	beq.n	8005fa4 <_printf_common+0xa8>
 8005f58:	2306      	movs	r3, #6
 8005f5a:	6820      	ldr	r0, [r4, #0]
 8005f5c:	682a      	ldr	r2, [r5, #0]
 8005f5e:	68e1      	ldr	r1, [r4, #12]
 8005f60:	2500      	movs	r5, #0
 8005f62:	4003      	ands	r3, r0
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d103      	bne.n	8005f70 <_printf_common+0x74>
 8005f68:	1a8d      	subs	r5, r1, r2
 8005f6a:	43eb      	mvns	r3, r5
 8005f6c:	17db      	asrs	r3, r3, #31
 8005f6e:	401d      	ands	r5, r3
 8005f70:	68a3      	ldr	r3, [r4, #8]
 8005f72:	6922      	ldr	r2, [r4, #16]
 8005f74:	4293      	cmp	r3, r2
 8005f76:	dd01      	ble.n	8005f7c <_printf_common+0x80>
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	18ed      	adds	r5, r5, r3
 8005f7c:	2700      	movs	r7, #0
 8005f7e:	42bd      	cmp	r5, r7
 8005f80:	d120      	bne.n	8005fc4 <_printf_common+0xc8>
 8005f82:	2000      	movs	r0, #0
 8005f84:	e010      	b.n	8005fa8 <_printf_common+0xac>
 8005f86:	3701      	adds	r7, #1
 8005f88:	68e3      	ldr	r3, [r4, #12]
 8005f8a:	682a      	ldr	r2, [r5, #0]
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	42bb      	cmp	r3, r7
 8005f90:	ddd2      	ble.n	8005f38 <_printf_common+0x3c>
 8005f92:	0022      	movs	r2, r4
 8005f94:	2301      	movs	r3, #1
 8005f96:	9901      	ldr	r1, [sp, #4]
 8005f98:	9800      	ldr	r0, [sp, #0]
 8005f9a:	9e08      	ldr	r6, [sp, #32]
 8005f9c:	3219      	adds	r2, #25
 8005f9e:	47b0      	blx	r6
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d1f0      	bne.n	8005f86 <_printf_common+0x8a>
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	4240      	negs	r0, r0
 8005fa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005faa:	2030      	movs	r0, #48	; 0x30
 8005fac:	18e1      	adds	r1, r4, r3
 8005fae:	3143      	adds	r1, #67	; 0x43
 8005fb0:	7008      	strb	r0, [r1, #0]
 8005fb2:	0021      	movs	r1, r4
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	3145      	adds	r1, #69	; 0x45
 8005fb8:	7809      	ldrb	r1, [r1, #0]
 8005fba:	18a2      	adds	r2, r4, r2
 8005fbc:	3243      	adds	r2, #67	; 0x43
 8005fbe:	3302      	adds	r3, #2
 8005fc0:	7011      	strb	r1, [r2, #0]
 8005fc2:	e7c1      	b.n	8005f48 <_printf_common+0x4c>
 8005fc4:	0022      	movs	r2, r4
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	9901      	ldr	r1, [sp, #4]
 8005fca:	9800      	ldr	r0, [sp, #0]
 8005fcc:	9e08      	ldr	r6, [sp, #32]
 8005fce:	321a      	adds	r2, #26
 8005fd0:	47b0      	blx	r6
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	d0e6      	beq.n	8005fa4 <_printf_common+0xa8>
 8005fd6:	3701      	adds	r7, #1
 8005fd8:	e7d1      	b.n	8005f7e <_printf_common+0x82>
	...

08005fdc <_printf_i>:
 8005fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fde:	b08b      	sub	sp, #44	; 0x2c
 8005fe0:	9206      	str	r2, [sp, #24]
 8005fe2:	000a      	movs	r2, r1
 8005fe4:	3243      	adds	r2, #67	; 0x43
 8005fe6:	9307      	str	r3, [sp, #28]
 8005fe8:	9005      	str	r0, [sp, #20]
 8005fea:	9204      	str	r2, [sp, #16]
 8005fec:	7e0a      	ldrb	r2, [r1, #24]
 8005fee:	000c      	movs	r4, r1
 8005ff0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ff2:	2a78      	cmp	r2, #120	; 0x78
 8005ff4:	d807      	bhi.n	8006006 <_printf_i+0x2a>
 8005ff6:	2a62      	cmp	r2, #98	; 0x62
 8005ff8:	d809      	bhi.n	800600e <_printf_i+0x32>
 8005ffa:	2a00      	cmp	r2, #0
 8005ffc:	d100      	bne.n	8006000 <_printf_i+0x24>
 8005ffe:	e0c1      	b.n	8006184 <_printf_i+0x1a8>
 8006000:	2a58      	cmp	r2, #88	; 0x58
 8006002:	d100      	bne.n	8006006 <_printf_i+0x2a>
 8006004:	e08c      	b.n	8006120 <_printf_i+0x144>
 8006006:	0026      	movs	r6, r4
 8006008:	3642      	adds	r6, #66	; 0x42
 800600a:	7032      	strb	r2, [r6, #0]
 800600c:	e022      	b.n	8006054 <_printf_i+0x78>
 800600e:	0010      	movs	r0, r2
 8006010:	3863      	subs	r0, #99	; 0x63
 8006012:	2815      	cmp	r0, #21
 8006014:	d8f7      	bhi.n	8006006 <_printf_i+0x2a>
 8006016:	f7fa f87f 	bl	8000118 <__gnu_thumb1_case_shi>
 800601a:	0016      	.short	0x0016
 800601c:	fff6001f 	.word	0xfff6001f
 8006020:	fff6fff6 	.word	0xfff6fff6
 8006024:	001ffff6 	.word	0x001ffff6
 8006028:	fff6fff6 	.word	0xfff6fff6
 800602c:	fff6fff6 	.word	0xfff6fff6
 8006030:	003600a8 	.word	0x003600a8
 8006034:	fff6009a 	.word	0xfff6009a
 8006038:	00b9fff6 	.word	0x00b9fff6
 800603c:	0036fff6 	.word	0x0036fff6
 8006040:	fff6fff6 	.word	0xfff6fff6
 8006044:	009e      	.short	0x009e
 8006046:	0026      	movs	r6, r4
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	3642      	adds	r6, #66	; 0x42
 800604c:	1d11      	adds	r1, r2, #4
 800604e:	6019      	str	r1, [r3, #0]
 8006050:	6813      	ldr	r3, [r2, #0]
 8006052:	7033      	strb	r3, [r6, #0]
 8006054:	2301      	movs	r3, #1
 8006056:	e0a7      	b.n	80061a8 <_printf_i+0x1cc>
 8006058:	6808      	ldr	r0, [r1, #0]
 800605a:	6819      	ldr	r1, [r3, #0]
 800605c:	1d0a      	adds	r2, r1, #4
 800605e:	0605      	lsls	r5, r0, #24
 8006060:	d50b      	bpl.n	800607a <_printf_i+0x9e>
 8006062:	680d      	ldr	r5, [r1, #0]
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	2d00      	cmp	r5, #0
 8006068:	da03      	bge.n	8006072 <_printf_i+0x96>
 800606a:	232d      	movs	r3, #45	; 0x2d
 800606c:	9a04      	ldr	r2, [sp, #16]
 800606e:	426d      	negs	r5, r5
 8006070:	7013      	strb	r3, [r2, #0]
 8006072:	4b61      	ldr	r3, [pc, #388]	; (80061f8 <_printf_i+0x21c>)
 8006074:	270a      	movs	r7, #10
 8006076:	9303      	str	r3, [sp, #12]
 8006078:	e01b      	b.n	80060b2 <_printf_i+0xd6>
 800607a:	680d      	ldr	r5, [r1, #0]
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	0641      	lsls	r1, r0, #25
 8006080:	d5f1      	bpl.n	8006066 <_printf_i+0x8a>
 8006082:	b22d      	sxth	r5, r5
 8006084:	e7ef      	b.n	8006066 <_printf_i+0x8a>
 8006086:	680d      	ldr	r5, [r1, #0]
 8006088:	6819      	ldr	r1, [r3, #0]
 800608a:	1d08      	adds	r0, r1, #4
 800608c:	6018      	str	r0, [r3, #0]
 800608e:	062e      	lsls	r6, r5, #24
 8006090:	d501      	bpl.n	8006096 <_printf_i+0xba>
 8006092:	680d      	ldr	r5, [r1, #0]
 8006094:	e003      	b.n	800609e <_printf_i+0xc2>
 8006096:	066d      	lsls	r5, r5, #25
 8006098:	d5fb      	bpl.n	8006092 <_printf_i+0xb6>
 800609a:	680d      	ldr	r5, [r1, #0]
 800609c:	b2ad      	uxth	r5, r5
 800609e:	4b56      	ldr	r3, [pc, #344]	; (80061f8 <_printf_i+0x21c>)
 80060a0:	2708      	movs	r7, #8
 80060a2:	9303      	str	r3, [sp, #12]
 80060a4:	2a6f      	cmp	r2, #111	; 0x6f
 80060a6:	d000      	beq.n	80060aa <_printf_i+0xce>
 80060a8:	3702      	adds	r7, #2
 80060aa:	0023      	movs	r3, r4
 80060ac:	2200      	movs	r2, #0
 80060ae:	3343      	adds	r3, #67	; 0x43
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	60a3      	str	r3, [r4, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	db03      	blt.n	80060c2 <_printf_i+0xe6>
 80060ba:	2204      	movs	r2, #4
 80060bc:	6821      	ldr	r1, [r4, #0]
 80060be:	4391      	bics	r1, r2
 80060c0:	6021      	str	r1, [r4, #0]
 80060c2:	2d00      	cmp	r5, #0
 80060c4:	d102      	bne.n	80060cc <_printf_i+0xf0>
 80060c6:	9e04      	ldr	r6, [sp, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00c      	beq.n	80060e6 <_printf_i+0x10a>
 80060cc:	9e04      	ldr	r6, [sp, #16]
 80060ce:	0028      	movs	r0, r5
 80060d0:	0039      	movs	r1, r7
 80060d2:	f7fa f8b1 	bl	8000238 <__aeabi_uidivmod>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	3e01      	subs	r6, #1
 80060da:	5c5b      	ldrb	r3, [r3, r1]
 80060dc:	7033      	strb	r3, [r6, #0]
 80060de:	002b      	movs	r3, r5
 80060e0:	0005      	movs	r5, r0
 80060e2:	429f      	cmp	r7, r3
 80060e4:	d9f3      	bls.n	80060ce <_printf_i+0xf2>
 80060e6:	2f08      	cmp	r7, #8
 80060e8:	d109      	bne.n	80060fe <_printf_i+0x122>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	07db      	lsls	r3, r3, #31
 80060ee:	d506      	bpl.n	80060fe <_printf_i+0x122>
 80060f0:	6863      	ldr	r3, [r4, #4]
 80060f2:	6922      	ldr	r2, [r4, #16]
 80060f4:	4293      	cmp	r3, r2
 80060f6:	dc02      	bgt.n	80060fe <_printf_i+0x122>
 80060f8:	2330      	movs	r3, #48	; 0x30
 80060fa:	3e01      	subs	r6, #1
 80060fc:	7033      	strb	r3, [r6, #0]
 80060fe:	9b04      	ldr	r3, [sp, #16]
 8006100:	1b9b      	subs	r3, r3, r6
 8006102:	6123      	str	r3, [r4, #16]
 8006104:	9b07      	ldr	r3, [sp, #28]
 8006106:	0021      	movs	r1, r4
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	9805      	ldr	r0, [sp, #20]
 800610c:	9b06      	ldr	r3, [sp, #24]
 800610e:	aa09      	add	r2, sp, #36	; 0x24
 8006110:	f7ff fef4 	bl	8005efc <_printf_common>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d14c      	bne.n	80061b2 <_printf_i+0x1d6>
 8006118:	2001      	movs	r0, #1
 800611a:	4240      	negs	r0, r0
 800611c:	b00b      	add	sp, #44	; 0x2c
 800611e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006120:	3145      	adds	r1, #69	; 0x45
 8006122:	700a      	strb	r2, [r1, #0]
 8006124:	4a34      	ldr	r2, [pc, #208]	; (80061f8 <_printf_i+0x21c>)
 8006126:	9203      	str	r2, [sp, #12]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	6821      	ldr	r1, [r4, #0]
 800612c:	ca20      	ldmia	r2!, {r5}
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	0608      	lsls	r0, r1, #24
 8006132:	d516      	bpl.n	8006162 <_printf_i+0x186>
 8006134:	07cb      	lsls	r3, r1, #31
 8006136:	d502      	bpl.n	800613e <_printf_i+0x162>
 8006138:	2320      	movs	r3, #32
 800613a:	4319      	orrs	r1, r3
 800613c:	6021      	str	r1, [r4, #0]
 800613e:	2710      	movs	r7, #16
 8006140:	2d00      	cmp	r5, #0
 8006142:	d1b2      	bne.n	80060aa <_printf_i+0xce>
 8006144:	2320      	movs	r3, #32
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	439a      	bics	r2, r3
 800614a:	6022      	str	r2, [r4, #0]
 800614c:	e7ad      	b.n	80060aa <_printf_i+0xce>
 800614e:	2220      	movs	r2, #32
 8006150:	6809      	ldr	r1, [r1, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	6022      	str	r2, [r4, #0]
 8006156:	0022      	movs	r2, r4
 8006158:	2178      	movs	r1, #120	; 0x78
 800615a:	3245      	adds	r2, #69	; 0x45
 800615c:	7011      	strb	r1, [r2, #0]
 800615e:	4a27      	ldr	r2, [pc, #156]	; (80061fc <_printf_i+0x220>)
 8006160:	e7e1      	b.n	8006126 <_printf_i+0x14a>
 8006162:	0648      	lsls	r0, r1, #25
 8006164:	d5e6      	bpl.n	8006134 <_printf_i+0x158>
 8006166:	b2ad      	uxth	r5, r5
 8006168:	e7e4      	b.n	8006134 <_printf_i+0x158>
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	680d      	ldr	r5, [r1, #0]
 800616e:	1d10      	adds	r0, r2, #4
 8006170:	6949      	ldr	r1, [r1, #20]
 8006172:	6018      	str	r0, [r3, #0]
 8006174:	6813      	ldr	r3, [r2, #0]
 8006176:	062e      	lsls	r6, r5, #24
 8006178:	d501      	bpl.n	800617e <_printf_i+0x1a2>
 800617a:	6019      	str	r1, [r3, #0]
 800617c:	e002      	b.n	8006184 <_printf_i+0x1a8>
 800617e:	066d      	lsls	r5, r5, #25
 8006180:	d5fb      	bpl.n	800617a <_printf_i+0x19e>
 8006182:	8019      	strh	r1, [r3, #0]
 8006184:	2300      	movs	r3, #0
 8006186:	9e04      	ldr	r6, [sp, #16]
 8006188:	6123      	str	r3, [r4, #16]
 800618a:	e7bb      	b.n	8006104 <_printf_i+0x128>
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	1d11      	adds	r1, r2, #4
 8006190:	6019      	str	r1, [r3, #0]
 8006192:	6816      	ldr	r6, [r2, #0]
 8006194:	2100      	movs	r1, #0
 8006196:	0030      	movs	r0, r6
 8006198:	6862      	ldr	r2, [r4, #4]
 800619a:	f000 f831 	bl	8006200 <memchr>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d001      	beq.n	80061a6 <_printf_i+0x1ca>
 80061a2:	1b80      	subs	r0, r0, r6
 80061a4:	6060      	str	r0, [r4, #4]
 80061a6:	6863      	ldr	r3, [r4, #4]
 80061a8:	6123      	str	r3, [r4, #16]
 80061aa:	2300      	movs	r3, #0
 80061ac:	9a04      	ldr	r2, [sp, #16]
 80061ae:	7013      	strb	r3, [r2, #0]
 80061b0:	e7a8      	b.n	8006104 <_printf_i+0x128>
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	0032      	movs	r2, r6
 80061b6:	9906      	ldr	r1, [sp, #24]
 80061b8:	9805      	ldr	r0, [sp, #20]
 80061ba:	9d07      	ldr	r5, [sp, #28]
 80061bc:	47a8      	blx	r5
 80061be:	1c43      	adds	r3, r0, #1
 80061c0:	d0aa      	beq.n	8006118 <_printf_i+0x13c>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	079b      	lsls	r3, r3, #30
 80061c6:	d415      	bmi.n	80061f4 <_printf_i+0x218>
 80061c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ca:	68e0      	ldr	r0, [r4, #12]
 80061cc:	4298      	cmp	r0, r3
 80061ce:	daa5      	bge.n	800611c <_printf_i+0x140>
 80061d0:	0018      	movs	r0, r3
 80061d2:	e7a3      	b.n	800611c <_printf_i+0x140>
 80061d4:	0022      	movs	r2, r4
 80061d6:	2301      	movs	r3, #1
 80061d8:	9906      	ldr	r1, [sp, #24]
 80061da:	9805      	ldr	r0, [sp, #20]
 80061dc:	9e07      	ldr	r6, [sp, #28]
 80061de:	3219      	adds	r2, #25
 80061e0:	47b0      	blx	r6
 80061e2:	1c43      	adds	r3, r0, #1
 80061e4:	d098      	beq.n	8006118 <_printf_i+0x13c>
 80061e6:	3501      	adds	r5, #1
 80061e8:	68e3      	ldr	r3, [r4, #12]
 80061ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061ec:	1a9b      	subs	r3, r3, r2
 80061ee:	42ab      	cmp	r3, r5
 80061f0:	dcf0      	bgt.n	80061d4 <_printf_i+0x1f8>
 80061f2:	e7e9      	b.n	80061c8 <_printf_i+0x1ec>
 80061f4:	2500      	movs	r5, #0
 80061f6:	e7f7      	b.n	80061e8 <_printf_i+0x20c>
 80061f8:	08006651 	.word	0x08006651
 80061fc:	08006662 	.word	0x08006662

08006200 <memchr>:
 8006200:	b2c9      	uxtb	r1, r1
 8006202:	1882      	adds	r2, r0, r2
 8006204:	4290      	cmp	r0, r2
 8006206:	d101      	bne.n	800620c <memchr+0xc>
 8006208:	2000      	movs	r0, #0
 800620a:	4770      	bx	lr
 800620c:	7803      	ldrb	r3, [r0, #0]
 800620e:	428b      	cmp	r3, r1
 8006210:	d0fb      	beq.n	800620a <memchr+0xa>
 8006212:	3001      	adds	r0, #1
 8006214:	e7f6      	b.n	8006204 <memchr+0x4>

08006216 <memmove>:
 8006216:	b510      	push	{r4, lr}
 8006218:	4288      	cmp	r0, r1
 800621a:	d902      	bls.n	8006222 <memmove+0xc>
 800621c:	188b      	adds	r3, r1, r2
 800621e:	4298      	cmp	r0, r3
 8006220:	d303      	bcc.n	800622a <memmove+0x14>
 8006222:	2300      	movs	r3, #0
 8006224:	e007      	b.n	8006236 <memmove+0x20>
 8006226:	5c8b      	ldrb	r3, [r1, r2]
 8006228:	5483      	strb	r3, [r0, r2]
 800622a:	3a01      	subs	r2, #1
 800622c:	d2fb      	bcs.n	8006226 <memmove+0x10>
 800622e:	bd10      	pop	{r4, pc}
 8006230:	5ccc      	ldrb	r4, [r1, r3]
 8006232:	54c4      	strb	r4, [r0, r3]
 8006234:	3301      	adds	r3, #1
 8006236:	429a      	cmp	r2, r3
 8006238:	d1fa      	bne.n	8006230 <memmove+0x1a>
 800623a:	e7f8      	b.n	800622e <memmove+0x18>

0800623c <_free_r>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	0005      	movs	r5, r0
 8006240:	2900      	cmp	r1, #0
 8006242:	d010      	beq.n	8006266 <_free_r+0x2a>
 8006244:	1f0c      	subs	r4, r1, #4
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da00      	bge.n	800624e <_free_r+0x12>
 800624c:	18e4      	adds	r4, r4, r3
 800624e:	0028      	movs	r0, r5
 8006250:	f000 f918 	bl	8006484 <__malloc_lock>
 8006254:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <_free_r+0x90>)
 8006256:	6813      	ldr	r3, [r2, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <_free_r+0x2c>
 800625c:	6063      	str	r3, [r4, #4]
 800625e:	6014      	str	r4, [r2, #0]
 8006260:	0028      	movs	r0, r5
 8006262:	f000 f917 	bl	8006494 <__malloc_unlock>
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	42a3      	cmp	r3, r4
 800626a:	d908      	bls.n	800627e <_free_r+0x42>
 800626c:	6821      	ldr	r1, [r4, #0]
 800626e:	1860      	adds	r0, r4, r1
 8006270:	4283      	cmp	r3, r0
 8006272:	d1f3      	bne.n	800625c <_free_r+0x20>
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	1841      	adds	r1, r0, r1
 800627a:	6021      	str	r1, [r4, #0]
 800627c:	e7ee      	b.n	800625c <_free_r+0x20>
 800627e:	001a      	movs	r2, r3
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <_free_r+0x4e>
 8006286:	42a3      	cmp	r3, r4
 8006288:	d9f9      	bls.n	800627e <_free_r+0x42>
 800628a:	6811      	ldr	r1, [r2, #0]
 800628c:	1850      	adds	r0, r2, r1
 800628e:	42a0      	cmp	r0, r4
 8006290:	d10b      	bne.n	80062aa <_free_r+0x6e>
 8006292:	6820      	ldr	r0, [r4, #0]
 8006294:	1809      	adds	r1, r1, r0
 8006296:	1850      	adds	r0, r2, r1
 8006298:	6011      	str	r1, [r2, #0]
 800629a:	4283      	cmp	r3, r0
 800629c:	d1e0      	bne.n	8006260 <_free_r+0x24>
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	1841      	adds	r1, r0, r1
 80062a4:	6011      	str	r1, [r2, #0]
 80062a6:	6053      	str	r3, [r2, #4]
 80062a8:	e7da      	b.n	8006260 <_free_r+0x24>
 80062aa:	42a0      	cmp	r0, r4
 80062ac:	d902      	bls.n	80062b4 <_free_r+0x78>
 80062ae:	230c      	movs	r3, #12
 80062b0:	602b      	str	r3, [r5, #0]
 80062b2:	e7d5      	b.n	8006260 <_free_r+0x24>
 80062b4:	6821      	ldr	r1, [r4, #0]
 80062b6:	1860      	adds	r0, r4, r1
 80062b8:	4283      	cmp	r3, r0
 80062ba:	d103      	bne.n	80062c4 <_free_r+0x88>
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	1841      	adds	r1, r0, r1
 80062c2:	6021      	str	r1, [r4, #0]
 80062c4:	6063      	str	r3, [r4, #4]
 80062c6:	6054      	str	r4, [r2, #4]
 80062c8:	e7ca      	b.n	8006260 <_free_r+0x24>
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	20001cec 	.word	0x20001cec

080062d0 <sbrk_aligned>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	4e0f      	ldr	r6, [pc, #60]	; (8006310 <sbrk_aligned+0x40>)
 80062d4:	000d      	movs	r5, r1
 80062d6:	6831      	ldr	r1, [r6, #0]
 80062d8:	0004      	movs	r4, r0
 80062da:	2900      	cmp	r1, #0
 80062dc:	d102      	bne.n	80062e4 <sbrk_aligned+0x14>
 80062de:	f000 f8bf 	bl	8006460 <_sbrk_r>
 80062e2:	6030      	str	r0, [r6, #0]
 80062e4:	0029      	movs	r1, r5
 80062e6:	0020      	movs	r0, r4
 80062e8:	f000 f8ba 	bl	8006460 <_sbrk_r>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d00a      	beq.n	8006306 <sbrk_aligned+0x36>
 80062f0:	2303      	movs	r3, #3
 80062f2:	1cc5      	adds	r5, r0, #3
 80062f4:	439d      	bics	r5, r3
 80062f6:	42a8      	cmp	r0, r5
 80062f8:	d007      	beq.n	800630a <sbrk_aligned+0x3a>
 80062fa:	1a29      	subs	r1, r5, r0
 80062fc:	0020      	movs	r0, r4
 80062fe:	f000 f8af 	bl	8006460 <_sbrk_r>
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	d101      	bne.n	800630a <sbrk_aligned+0x3a>
 8006306:	2501      	movs	r5, #1
 8006308:	426d      	negs	r5, r5
 800630a:	0028      	movs	r0, r5
 800630c:	bd70      	pop	{r4, r5, r6, pc}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	20001cf0 	.word	0x20001cf0

08006314 <_malloc_r>:
 8006314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006316:	2203      	movs	r2, #3
 8006318:	1ccb      	adds	r3, r1, #3
 800631a:	4393      	bics	r3, r2
 800631c:	3308      	adds	r3, #8
 800631e:	0006      	movs	r6, r0
 8006320:	001f      	movs	r7, r3
 8006322:	2b0c      	cmp	r3, #12
 8006324:	d232      	bcs.n	800638c <_malloc_r+0x78>
 8006326:	270c      	movs	r7, #12
 8006328:	42b9      	cmp	r1, r7
 800632a:	d831      	bhi.n	8006390 <_malloc_r+0x7c>
 800632c:	0030      	movs	r0, r6
 800632e:	f000 f8a9 	bl	8006484 <__malloc_lock>
 8006332:	4d32      	ldr	r5, [pc, #200]	; (80063fc <_malloc_r+0xe8>)
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	001c      	movs	r4, r3
 8006338:	2c00      	cmp	r4, #0
 800633a:	d12e      	bne.n	800639a <_malloc_r+0x86>
 800633c:	0039      	movs	r1, r7
 800633e:	0030      	movs	r0, r6
 8006340:	f7ff ffc6 	bl	80062d0 <sbrk_aligned>
 8006344:	0004      	movs	r4, r0
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	d11e      	bne.n	8006388 <_malloc_r+0x74>
 800634a:	682c      	ldr	r4, [r5, #0]
 800634c:	0025      	movs	r5, r4
 800634e:	2d00      	cmp	r5, #0
 8006350:	d14a      	bne.n	80063e8 <_malloc_r+0xd4>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	0029      	movs	r1, r5
 8006356:	18e3      	adds	r3, r4, r3
 8006358:	0030      	movs	r0, r6
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	f000 f880 	bl	8006460 <_sbrk_r>
 8006360:	9b01      	ldr	r3, [sp, #4]
 8006362:	4283      	cmp	r3, r0
 8006364:	d143      	bne.n	80063ee <_malloc_r+0xda>
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	3703      	adds	r7, #3
 800636a:	1aff      	subs	r7, r7, r3
 800636c:	2303      	movs	r3, #3
 800636e:	439f      	bics	r7, r3
 8006370:	3708      	adds	r7, #8
 8006372:	2f0c      	cmp	r7, #12
 8006374:	d200      	bcs.n	8006378 <_malloc_r+0x64>
 8006376:	270c      	movs	r7, #12
 8006378:	0039      	movs	r1, r7
 800637a:	0030      	movs	r0, r6
 800637c:	f7ff ffa8 	bl	80062d0 <sbrk_aligned>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d034      	beq.n	80063ee <_malloc_r+0xda>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	19df      	adds	r7, r3, r7
 8006388:	6027      	str	r7, [r4, #0]
 800638a:	e013      	b.n	80063b4 <_malloc_r+0xa0>
 800638c:	2b00      	cmp	r3, #0
 800638e:	dacb      	bge.n	8006328 <_malloc_r+0x14>
 8006390:	230c      	movs	r3, #12
 8006392:	2500      	movs	r5, #0
 8006394:	6033      	str	r3, [r6, #0]
 8006396:	0028      	movs	r0, r5
 8006398:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	1bd1      	subs	r1, r2, r7
 800639e:	d420      	bmi.n	80063e2 <_malloc_r+0xce>
 80063a0:	290b      	cmp	r1, #11
 80063a2:	d917      	bls.n	80063d4 <_malloc_r+0xc0>
 80063a4:	19e2      	adds	r2, r4, r7
 80063a6:	6027      	str	r7, [r4, #0]
 80063a8:	42a3      	cmp	r3, r4
 80063aa:	d111      	bne.n	80063d0 <_malloc_r+0xbc>
 80063ac:	602a      	str	r2, [r5, #0]
 80063ae:	6863      	ldr	r3, [r4, #4]
 80063b0:	6011      	str	r1, [r2, #0]
 80063b2:	6053      	str	r3, [r2, #4]
 80063b4:	0030      	movs	r0, r6
 80063b6:	0025      	movs	r5, r4
 80063b8:	f000 f86c 	bl	8006494 <__malloc_unlock>
 80063bc:	2207      	movs	r2, #7
 80063be:	350b      	adds	r5, #11
 80063c0:	1d23      	adds	r3, r4, #4
 80063c2:	4395      	bics	r5, r2
 80063c4:	1aea      	subs	r2, r5, r3
 80063c6:	429d      	cmp	r5, r3
 80063c8:	d0e5      	beq.n	8006396 <_malloc_r+0x82>
 80063ca:	1b5b      	subs	r3, r3, r5
 80063cc:	50a3      	str	r3, [r4, r2]
 80063ce:	e7e2      	b.n	8006396 <_malloc_r+0x82>
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e7ec      	b.n	80063ae <_malloc_r+0x9a>
 80063d4:	6862      	ldr	r2, [r4, #4]
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	d101      	bne.n	80063de <_malloc_r+0xca>
 80063da:	602a      	str	r2, [r5, #0]
 80063dc:	e7ea      	b.n	80063b4 <_malloc_r+0xa0>
 80063de:	605a      	str	r2, [r3, #4]
 80063e0:	e7e8      	b.n	80063b4 <_malloc_r+0xa0>
 80063e2:	0023      	movs	r3, r4
 80063e4:	6864      	ldr	r4, [r4, #4]
 80063e6:	e7a7      	b.n	8006338 <_malloc_r+0x24>
 80063e8:	002c      	movs	r4, r5
 80063ea:	686d      	ldr	r5, [r5, #4]
 80063ec:	e7af      	b.n	800634e <_malloc_r+0x3a>
 80063ee:	230c      	movs	r3, #12
 80063f0:	0030      	movs	r0, r6
 80063f2:	6033      	str	r3, [r6, #0]
 80063f4:	f000 f84e 	bl	8006494 <__malloc_unlock>
 80063f8:	e7cd      	b.n	8006396 <_malloc_r+0x82>
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	20001cec 	.word	0x20001cec

08006400 <_realloc_r>:
 8006400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006402:	0007      	movs	r7, r0
 8006404:	000e      	movs	r6, r1
 8006406:	0014      	movs	r4, r2
 8006408:	2900      	cmp	r1, #0
 800640a:	d105      	bne.n	8006418 <_realloc_r+0x18>
 800640c:	0011      	movs	r1, r2
 800640e:	f7ff ff81 	bl	8006314 <_malloc_r>
 8006412:	0005      	movs	r5, r0
 8006414:	0028      	movs	r0, r5
 8006416:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006418:	2a00      	cmp	r2, #0
 800641a:	d103      	bne.n	8006424 <_realloc_r+0x24>
 800641c:	f7ff ff0e 	bl	800623c <_free_r>
 8006420:	0025      	movs	r5, r4
 8006422:	e7f7      	b.n	8006414 <_realloc_r+0x14>
 8006424:	f000 f83e 	bl	80064a4 <_malloc_usable_size_r>
 8006428:	9001      	str	r0, [sp, #4]
 800642a:	4284      	cmp	r4, r0
 800642c:	d803      	bhi.n	8006436 <_realloc_r+0x36>
 800642e:	0035      	movs	r5, r6
 8006430:	0843      	lsrs	r3, r0, #1
 8006432:	42a3      	cmp	r3, r4
 8006434:	d3ee      	bcc.n	8006414 <_realloc_r+0x14>
 8006436:	0021      	movs	r1, r4
 8006438:	0038      	movs	r0, r7
 800643a:	f7ff ff6b 	bl	8006314 <_malloc_r>
 800643e:	1e05      	subs	r5, r0, #0
 8006440:	d0e8      	beq.n	8006414 <_realloc_r+0x14>
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	0022      	movs	r2, r4
 8006446:	429c      	cmp	r4, r3
 8006448:	d900      	bls.n	800644c <_realloc_r+0x4c>
 800644a:	001a      	movs	r2, r3
 800644c:	0031      	movs	r1, r6
 800644e:	0028      	movs	r0, r5
 8006450:	f7ff fbc0 	bl	8005bd4 <memcpy>
 8006454:	0031      	movs	r1, r6
 8006456:	0038      	movs	r0, r7
 8006458:	f7ff fef0 	bl	800623c <_free_r>
 800645c:	e7da      	b.n	8006414 <_realloc_r+0x14>
	...

08006460 <_sbrk_r>:
 8006460:	2300      	movs	r3, #0
 8006462:	b570      	push	{r4, r5, r6, lr}
 8006464:	4d06      	ldr	r5, [pc, #24]	; (8006480 <_sbrk_r+0x20>)
 8006466:	0004      	movs	r4, r0
 8006468:	0008      	movs	r0, r1
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	f000 f824 	bl	80064b8 <_sbrk>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d103      	bne.n	800647c <_sbrk_r+0x1c>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d000      	beq.n	800647c <_sbrk_r+0x1c>
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	bd70      	pop	{r4, r5, r6, pc}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	20001cf4 	.word	0x20001cf4

08006484 <__malloc_lock>:
 8006484:	b510      	push	{r4, lr}
 8006486:	4802      	ldr	r0, [pc, #8]	; (8006490 <__malloc_lock+0xc>)
 8006488:	f000 f814 	bl	80064b4 <__retarget_lock_acquire_recursive>
 800648c:	bd10      	pop	{r4, pc}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	20001cf8 	.word	0x20001cf8

08006494 <__malloc_unlock>:
 8006494:	b510      	push	{r4, lr}
 8006496:	4802      	ldr	r0, [pc, #8]	; (80064a0 <__malloc_unlock+0xc>)
 8006498:	f000 f80d 	bl	80064b6 <__retarget_lock_release_recursive>
 800649c:	bd10      	pop	{r4, pc}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	20001cf8 	.word	0x20001cf8

080064a4 <_malloc_usable_size_r>:
 80064a4:	1f0b      	subs	r3, r1, #4
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	1f18      	subs	r0, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da01      	bge.n	80064b2 <_malloc_usable_size_r+0xe>
 80064ae:	580b      	ldr	r3, [r1, r0]
 80064b0:	18c0      	adds	r0, r0, r3
 80064b2:	4770      	bx	lr

080064b4 <__retarget_lock_acquire_recursive>:
 80064b4:	4770      	bx	lr

080064b6 <__retarget_lock_release_recursive>:
 80064b6:	4770      	bx	lr

080064b8 <_sbrk>:
 80064b8:	4a05      	ldr	r2, [pc, #20]	; (80064d0 <_sbrk+0x18>)
 80064ba:	0003      	movs	r3, r0
 80064bc:	6811      	ldr	r1, [r2, #0]
 80064be:	2900      	cmp	r1, #0
 80064c0:	d101      	bne.n	80064c6 <_sbrk+0xe>
 80064c2:	4904      	ldr	r1, [pc, #16]	; (80064d4 <_sbrk+0x1c>)
 80064c4:	6011      	str	r1, [r2, #0]
 80064c6:	6810      	ldr	r0, [r2, #0]
 80064c8:	18c3      	adds	r3, r0, r3
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	4770      	bx	lr
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	20001cfc 	.word	0x20001cfc
 80064d4:	20001d00 	.word	0x20001d00

080064d8 <_init>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr

080064e4 <_fini>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr
